#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1290;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3621 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3632 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3643 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _397 = _395.x;
    float _407 = dot(vec4(_397, _395.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _424 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_397 - _407) * cbMtdParam._m0[24u].x) + _407) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3654 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _432 = (_425 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _433 = (_425 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _434 = (_425 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    vec4 _451 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _294) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _295) + cbTextureTilingScale._m0[3u].w));
    vec4 _471 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _473 = _471.x;
    float _483 = dot(vec4(_473, _471.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _497 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_473 - _483) * cbMtdParam._m0[24u].x) + _483) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3665 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _498 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _505 = (_498 * ((_451.x * cbMtdParam._m0[13u].x) - _432)) + _432;
    float _506 = (_498 * ((_451.y * cbMtdParam._m0[13u].y) - _433)) + _433;
    float _507 = (_498 * ((_451.z * cbMtdParam._m0[13u].z) - _434)) + _434;
    float _511 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _505;
    float _514 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _506;
    float _517 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _507;
    float _524 = ((_505 - _511) * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) + _511;
    float _525 = ((_506 - _514) * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) + _514;
    float _526 = ((_507 - _517) * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) + _517;
    vec4 _538 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _561 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _578 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _580 = _578.x;
    float _581 = _578.y;
    float _582 = _578.z;
    float _589 = ((_561.x - _580) * _425) + _580;
    float _590 = ((_561.y - _581) * _425) + _581;
    float _591 = ((_561.z - _582) * _425) + _582;
    vec4 _603 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _294) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _295) + cbTextureTilingScale._m0[2u].w));
    float _616 = ((_603.z - _591) * _498) + _591;
    float _619 = ((((_603.x - _589) * _498) + _589) * 2.0) + (-1.0);
    float _620 = ((((_603.y - _590) * _498) + _590) * 2.0) + (-1.0);
    float _621 = dot(vec2(_619, _620), vec2(_619, _620));
    float _3676 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _626 = sqrt(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))));
    float _631 = _619 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_538.x * 2.0) + (-1.0)));
    float _632 = _620 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_538.y * 2.0) + (-1.0)));
    vec4 _645 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _659 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _661 = _659.x;
    float _662 = 1.0 - _661;
    float _688 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_661 - _662) * cbMtdParam._m0[24u].w) + _662) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3687 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _689 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _697 = ((((cbMtdParam._m0[10u].x - _524) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _689) + _524;
    float _698 = ((((cbMtdParam._m0[10u].y - _525) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _689) + _525;
    float _699 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _526)) * _689) + _526;
    float _704 = (((_538.z - _616) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _616;
    float _708 = ((cbMtdParam._m0[23u].y - _704) * _689) + _704;
    vec4 _727 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _733 = (_727.x * 2.0) + (-1.0);
    float _734 = (_727.y * 2.0) + (-1.0);
    float _735 = dot(vec2(_733, _734), vec2(_733, _734));
    float _3698 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _751 = (_689 * (((cbMtdParam._m0[22u].z * _631) - _631) + _733)) + _631;
    float _752 = (_689 * (((cbMtdParam._m0[22u].z * _632) - _632) + _734)) + _632;
    float _753 = (_689 * (sqrt(1.0 - (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) - _626)) + _626;
    float _755 = cbMtdParam._m0[22u].x + _645.w;
    float _758 = fma(_753, _243 * NORMAL.x, fma(_752, _250 * TANGENT.x, (_236 * _228) * _751));
    float _761 = fma(_753, _243 * NORMAL.y, fma(_752, _250 * TANGENT.y, (_236 * _229) * _751));
    float _764 = fma(_753, _243 * NORMAL.z, fma(_752, _250 * TANGENT.z, (_236 * _230) * _751));
    float _768 = inversesqrt(dot(vec3(_758, _761, _764), vec3(_758, _761, _764)));
    float _769 = _768 * _758;
    float _770 = _768 * _761;
    float _771 = _768 * _764;
    float _3709 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _772 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _3720 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _3731 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _3742 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _3753 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _790 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _841 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _831);
    float _842 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _831);
    float _843 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _831);
    float _847 = inversesqrt(dot(vec3(_841, _842, _843), vec3(_841, _842, _843)));
    float _848 = _841 * _847;
    float _849 = _842 * _847;
    float _850 = _843 * _847;
    float _856 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _857 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _875 = fma(_771, cbSceneParam._m0[5u].z, fma(_770, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _769));
    float _878 = fma(_771, cbSceneParam._m0[6u].z, fma(_770, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _769));
    float _881 = fma(_771, cbSceneParam._m0[7u].z, fma(_770, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _769));
    uint _895 = (_275 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _901 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_895].x;
    float _902 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_895].y;
    float _903 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * cbInstanceData._m0[_895].z;
    float _3764 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    vec4 _915 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _856, cbSceneParam._m0[86u].y * _857));
    float _919 = ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * TEXCOORD_5.w) * _915.x;
    float _920 = dot(vec3(_769, _770, _771), vec3(_848, _849, _850));
    float _923 = _920 * 2.0;
    float _927 = (_923 * _769) - _848;
    float _928 = (_923 * _770) - _849;
    float _929 = (_923 * _771) - _850;
    float _933 = abs(dot(vec3(_848, _849, _850), vec3(_769, _770, _771)));
    float _3797 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _935 = sqrt(_772);
    float _948 = exp2((_935 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_935 * 3.0));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1289;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1014 = fma(_988, cbModelParam._m0[26u].z, fma(_984, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _980));
        float _1018 = fma(_988, cbModelParam._m0[27u].z, fma(_984, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _980));
        float _1022 = fma(_988, cbModelParam._m0[28u].z, fma(_984, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _980));
        float _1047 = _980 + _769;
        float _1048 = _984 + _770;
        float _1049 = _988 + _771;
        float _1059 = fma(_1049, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047)) - _1014;
        float _1060 = fma(_1049, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047)) - _1018;
        float _1061 = fma(_1049, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047)) - _1022;
        float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
        float _1078 = ((_1065 * _1059) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1014 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1065 * _1060) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1018 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1065 * _1061) / cbModelParam._m0[34u].z) + ((((((_1022 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        float _1117 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1083.x + (-0.5));
        float _1119 = _1117 * (_1083.y + (-0.5));
        float _1120 = _1117 * (_1083.z + (-0.5));
        float _1127 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1090.x + (-0.5));
        float _1129 = _1127 * (_1090.y + (-0.5));
        float _1130 = _1127 * (_1090.z + (-0.5));
        float _1137 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1097.x + (-0.5));
        float _1139 = _1137 * (_1097.y + (-0.5));
        float _1140 = _1137 * (_1097.z + (-0.5));
        float _1147 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1104.x + (-0.5));
        float _1149 = _1147 * (_1104.y + (-0.5));
        float _1150 = _1147 * (_1104.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1171 = (dot(vec3(_769, _770, _771), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1181 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3845 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1183 + 1.0))) + _1188) * _1151;
        float _1198 = _1119 * 0.5;
        float _1199 = _1129 * 0.5;
        float _1200 = _1139 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_769, _770, _771), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3878 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1225 + 1.0))) + _1230) * _1152;
        float _1240 = _1120 * 0.5;
        float _1241 = _1130 * 0.5;
        float _1242 = _1140 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_769, _770, _771), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3911 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1267 + 1.0))) + _1272) * _1153;
        _1289 = _1120;
        _1291 = _1119;
        _1292 = _1118;
        _1293 = _1130;
        _1294 = _1129;
        _1295 = _1128;
        _1296 = _1140;
        _1297 = _1139;
        _1298 = _1138;
        _1299 = _1153;
        _1300 = _1152;
        _1301 = _1151;
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _1290;
        _1291 = _1290;
        _1292 = _1290;
        _1293 = _1290;
        _1294 = _1290;
        _1295 = _1290;
        _1296 = _1290;
        _1297 = _1290;
        _1298 = _1290;
        _1299 = _1290;
        _1300 = _1290;
        _1301 = _1290;
        _1302 = 0.0;
        _1303 = 0.0;
        _1304 = 0.0;
    }
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1328 = fma(_988, cbModelParam._m0[30u].z, fma(_984, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _980));
        float _1332 = fma(_988, cbModelParam._m0[31u].z, fma(_984, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _980));
        float _1336 = fma(_988, cbModelParam._m0[32u].z, fma(_984, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _980));
        float _1359 = _980 + _769;
        float _1360 = _984 + _770;
        float _1361 = _988 + _771;
        float _1371 = fma(_1361, cbModelParam._m0[30u].z, fma(_1360, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1359)) - _1328;
        float _1372 = fma(_1361, cbModelParam._m0[31u].z, fma(_1360, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1359)) - _1332;
        float _1373 = fma(_1361, cbModelParam._m0[32u].z, fma(_1360, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1359)) - _1336;
        float _1377 = inversesqrt(dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373)));
        float _1390 = ((_1377 * _1371) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1328 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1391 = ((_1377 * _1372) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1332 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1377 * _1373) / cbModelParam._m0[35u].z) + ((((((_1336 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1390, _1391, _1392), 0.0);
        float _1427 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1394.x + (-0.5));
        float _1429 = _1427 * (_1394.y + (-0.5));
        float _1430 = _1427 * (_1394.z + (-0.5));
        float _1437 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1401.x + (-0.5));
        float _1439 = _1437 * (_1401.y + (-0.5));
        float _1440 = _1437 * (_1401.z + (-0.5));
        float _1447 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1408.x + (-0.5));
        float _1449 = _1447 * (_1408.y + (-0.5));
        float _1450 = _1447 * (_1408.z + (-0.5));
        float _1457 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1415.x + (-0.5));
        float _1459 = _1457 * (_1415.y + (-0.5));
        float _1460 = _1457 * (_1415.z + (-0.5));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = _1428 * 0.5;
        float _1465 = _1438 * 0.5;
        float _1466 = _1448 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_769, _770, _771), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _3974 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1491 + 1.0))) + _1496) * _1461;
        float _1506 = _1429 * 0.5;
        float _1507 = _1439 * 0.5;
        float _1508 = _1449 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_769, _770, _771), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4007 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1533 + 1.0))) + _1538) * _1462;
        float _1548 = _1430 * 0.5;
        float _1549 = _1440 * 0.5;
        float _1550 = _1450 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_769, _770, _771), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4040 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1575 + 1.0))) + _1580) * _1463;
        _1597 = _1430;
        _1598 = _1429;
        _1599 = _1428;
        _1600 = _1440;
        _1601 = _1439;
        _1602 = _1438;
        _1603 = _1450;
        _1604 = _1449;
        _1605 = _1448;
        _1606 = _1463;
        _1607 = _1462;
        _1608 = _1461;
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
    }
    else
    {
        _1597 = _1290;
        _1598 = _1290;
        _1599 = _1290;
        _1600 = _1290;
        _1601 = _1290;
        _1602 = _1290;
        _1603 = _1290;
        _1604 = _1290;
        _1605 = _1290;
        _1606 = _1290;
        _1607 = _1290;
        _1608 = _1290;
        _1609 = 0.0;
        _1610 = 0.0;
        _1611 = 0.0;
    }
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1302)) + _1302;
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1303)) + _1303;
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1304)) + _1304;
    float _1644 = fma(_1623, cbSceneParam._m0[89u].z, fma(_1622, cbSceneParam._m0[89u].y, _1621 * cbSceneParam._m0[89u].x));
    float _1647 = fma(_1623, cbSceneParam._m0[90u].z, fma(_1622, cbSceneParam._m0[90u].y, _1621 * cbSceneParam._m0[90u].x));
    float _1650 = fma(_1623, cbSceneParam._m0[91u].z, fma(_1622, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1621));
    float _1665 = _927 * 0.5;
    float _1666 = _928 * 0.5;
    float _1667 = _929 * 0.5;
    float _1668 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1671 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1674 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1708;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1681 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1289, _1293, _1296, _1299));
        float _1685 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1291, _1294, _1297, _1300));
        float _1689 = dot(vec4(_1665, _1666, _1667, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1696 = dot(vec4(cbModelParam._m0[39u]), vec4(_1665, _1666, _1667, 1.0));
        _1708 = dot(vec3(isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1696) ? 0.0 : (isnan(0.0) ? _1696 : max(0.0, _1696))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1708 = 1.0;
    }
    float _1719;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1710 = dot(vec4(cbModelParam._m0[40u]), vec4(_1665, _1666, _1667, 1.0));
        _1719 = dot(vec3(isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1710) ? 0.0 : (isnan(0.0) ? _1710 : max(0.0, _1710))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1719 = 1.0;
    }
    float _1723 = (_1719 * cbModelParam._m0[1u].x) + (_1708 * (1.0 - cbModelParam._m0[1u].x));
    float _1733 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _772);
    float _1734 = isnan(_1733) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1733 : min(cbModelParam._m0[25u].z, _1733));
    float _1816;
    float _1818;
    float _1820;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1783 = fma(_988, cbModelParam._m0[13u].z, fma(_984, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _980)) + cbModelParam._m0[13u].w;
        float _1787 = fma(_988, cbModelParam._m0[14u].z, fma(_984, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _980)) + cbModelParam._m0[14u].w;
        float _1791 = fma(_988, cbModelParam._m0[15u].z, fma(_984, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _980)) + cbModelParam._m0[15u].w;
        float _1794 = fma(_929, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _927));
        float _1797 = fma(_929, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _927));
        float _1800 = fma(_929, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _927));
        float _1828;
        if (_1794 > 0.0)
        {
            _1828 = abs((1.0 - _1783) / _1794);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1783 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1828 = frontier_phi_14_12_ladder;
        }
        float _2051;
        if (_1797 > 0.0)
        {
            _2051 = abs((1.0 - _1787) / _1797);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1787 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2051 = frontier_phi_23_19_ladder;
        }
        float _2297;
        if (_1800 > 0.0)
        {
            _2297 = abs((1.0 - _1791) / _1800);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1791 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2297 = frontier_phi_35_30_ladder;
        }
        float _2299 = isnan(_2051) ? _1828 : (isnan(_1828) ? _2051 : min(_1828, _2051));
        float _2300 = isnan(_2297) ? _2299 : (isnan(_2299) ? _2297 : min(_2299, _2297));
        float _2304 = (_2300 * _1794) + _1783;
        float _2305 = (_2300 * _1797) + _1787;
        float _2306 = (_2300 * _1800) + _1791;
        float _2307 = _2300 * 9.9999997473787516355514526367188e-05;
        float _2309 = (-1.0) - _2307;
        float _2311 = _2307 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2306 > _2311) || ((_2306 < _2309) || ((_2305 > _2311) || ((_2305 < _2309) || ((_2304 < _2309) || (_2304 > _2311))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2430 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2306, cbModelParam._m0[9u].z, fma(_2305, cbModelParam._m0[9u].y, _2304 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2306, cbModelParam._m0[10u].z, fma(_2305, cbModelParam._m0[10u].y, _2304 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2306, cbModelParam._m0[11u].z, fma(_2305, cbModelParam._m0[11u].y, _2304 * cbModelParam._m0[11u].x))), _1734);
            frontier_phi_13_35_ladder = _2430.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2430.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2430.x * cbModelParam._m0[1u].y;
        }
        _1816 = frontier_phi_13_35_ladder_2;
        _1818 = frontier_phi_13_35_ladder_1;
        _1820 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1804 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_927, _928, _929), _1734);
        _1816 = _1804.x * cbModelParam._m0[1u].y;
        _1818 = _1804.y * cbModelParam._m0[1u].y;
        _1820 = _1804.z * cbModelParam._m0[1u].y;
    }
    float _1824 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _772);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1824 : min(cbModelParam._m0[25u].w, _1824));
    float _1916;
    float _1918;
    float _1920;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1880 = fma(_988, cbModelParam._m0[21u].z, fma(_984, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _980)) + cbModelParam._m0[21u].w;
        float _1884 = fma(_988, cbModelParam._m0[22u].z, fma(_984, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _980)) + cbModelParam._m0[22u].w;
        float _1888 = fma(_988, cbModelParam._m0[23u].z, fma(_984, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _980)) + cbModelParam._m0[23u].w;
        float _1891 = fma(_929, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _927));
        float _1894 = fma(_929, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _927));
        float _1897 = fma(_929, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _927));
        float _2056;
        if (_1891 > 0.0)
        {
            _2056 = abs((1.0 - _1880) / _1891);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1880 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2056 = frontier_phi_25_21_ladder;
        }
        float _2324;
        if (_1894 > 0.0)
        {
            _2324 = abs((1.0 - _1884) / _1894);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1884 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2324 = frontier_phi_37_32_ladder;
        }
        float _2529;
        if (_1897 > 0.0)
        {
            _2529 = abs((1.0 - _1888) / _1897);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1888 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2529 = frontier_phi_46_43_ladder;
        }
        float _2531 = isnan(_2324) ? _2056 : (isnan(_2056) ? _2324 : min(_2056, _2324));
        float _2532 = isnan(_2529) ? _2531 : (isnan(_2531) ? _2529 : min(_2531, _2529));
        float _2536 = (_2532 * _1891) + _1880;
        float _2537 = (_2532 * _1894) + _1884;
        float _2538 = (_2532 * _1897) + _1888;
        float _2539 = _2532 * 9.9999997473787516355514526367188e-05;
        float _2540 = (-1.0) - _2539;
        float _2542 = _2539 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2538 > _2542) || ((_2538 < _2540) || ((_2537 > _2542) || ((_2537 < _2540) || ((_2536 < _2540) || (_2536 > _2542))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2737 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2538, cbModelParam._m0[17u].z, fma(_2537, cbModelParam._m0[17u].y, _2536 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2538, cbModelParam._m0[18u].z, fma(_2537, cbModelParam._m0[18u].y, _2536 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2538, cbModelParam._m0[19u].z, fma(_2537, cbModelParam._m0[19u].y, _2536 * cbModelParam._m0[19u].x))), _1825);
            frontier_phi_22_46_ladder = _2737.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2737.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2737.x * cbModelParam._m0[1u].z;
        }
        _1916 = frontier_phi_22_46_ladder_2;
        _1918 = frontier_phi_22_46_ladder_1;
        _1920 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1900 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_927, _928, _929), _1825);
        _1916 = _1900.x * cbModelParam._m0[1u].z;
        _1918 = _1900.y * cbModelParam._m0[1u].z;
        _1920 = _1900.z * cbModelParam._m0[1u].z;
    }
    float _1932 = ((((1.0 - _948) * ((_935 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_948 * _935)) * _919;
    float _1933 = _1932 * ((cbModelParam._m0[1u].w * (_1916 - _1816)) + _1816);
    float _1934 = _1932 * ((cbModelParam._m0[1u].w * (_1918 - _1818)) + _1818);
    float _1935 = _1932 * ((cbModelParam._m0[1u].w * (_1920 - _1820)) + _1820);
    float _1938 = fma(_1935, cbSceneParam._m0[89u].z, fma(_1934, cbSceneParam._m0[89u].y, _1933 * cbSceneParam._m0[89u].x));
    float _1941 = fma(_1935, cbSceneParam._m0[90u].z, fma(_1934, cbSceneParam._m0[90u].y, _1933 * cbSceneParam._m0[90u].x));
    float _1944 = fma(_1935, cbSceneParam._m0[91u].z, fma(_1934, cbSceneParam._m0[91u].y, _1933 * cbSceneParam._m0[91u].x));
    vec4 _1952 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_856, _857));
    float _1954 = _1952.w;
    float _1966 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1954);
    float _1967 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1954);
    float _1968 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1954);
    uvec4 _1972 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _1974 = _1972.x * 14u;
    uint _1975 = _1974 + 13u;
    float _1982 = _919 + (-1.0);
    float _1987 = (cbLight._m0[_1975].x * _1982) + 1.0;
    float _1988 = (cbLight._m0[_1975].y * _1982) + 1.0;
    float _1989 = (cbLight._m0[_1975].z * _1982) + 1.0;
    float _1990 = (cbLight._m0[_1975].w * _1982) + 1.0;
    uint _1991 = _1974 + 5u;
    float _1997 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
    uint _2001 = _1974 + 4u;
    float _2010 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
    uint _2014 = _1974 | 1u;
    float _2025 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_769, _770, _771));
    float _2028 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_769, _770, _771));
    float _4176 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _4187 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2033 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * 0.3183098733425140380859375;
    float _2035 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 0.3183098733425140380859375;
    float _2042 = ((cbLight._m0[_1991].x * _1997) * _2035) + (((cbLight._m0[_2001].x * _1966) * _2010) * _2033);
    float _2043 = ((_1997 * cbLight._m0[_1991].y) * _2035) + (((cbLight._m0[_2001].y * _1967) * _2010) * _2033);
    float _2044 = ((_1997 * cbLight._m0[_1991].z) * _2035) + (((cbLight._m0[_2001].z * _1968) * _2010) * _2033);
    uvec4 _2048 = floatBitsToUint(cbLight._m0[_1974 + 12u]);
    bool _2050 = _2048.x == 0u;
    float _2061;
    float _2063;
    float _2065;
    if (_2050)
    {
        _2061 = _2042;
        _2063 = _2043;
        _2065 = _2044;
    }
    else
    {
        uint _2069 = _1974 + 6u;
        float _2085 = (dot(vec3(cbLight._m0[_1974 + 2u].xyz), vec3(_769, _770, _771)) * 0.5) + 0.5;
        float _2086 = _2085 * _2085;
        float _4198 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2087 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2088 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
        _2061 = (((cbLight._m0[_2069].x * 0.3183098733425140380859375) * _2087) * _2088) + _2042;
        _2063 = (((cbLight._m0[_2069].y * 0.3183098733425140380859375) * _2087) * _2088) + _2043;
        _2065 = (((cbLight._m0[_2069].z * 0.3183098733425140380859375) * _2087) * _2088) + _2044;
    }
    bool _2068 = _2048.y == 0u;
    float _2106;
    float _2108;
    float _2110;
    if (_2068)
    {
        _2106 = _2061;
        _2108 = _2063;
        _2110 = _2065;
    }
    else
    {
        uint _2268 = _1974 + 7u;
        float _2284 = (dot(vec3(cbLight._m0[_1974 + 3u].xyz), vec3(_769, _770, _771)) * 0.5) + 0.5;
        float _2285 = _2284 * _2284;
        float _4214 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2286 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2287 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
        _2106 = (((cbLight._m0[_2268].x * 0.3183098733425140380859375) * _2286) * _2287) + _2061;
        _2108 = (((cbLight._m0[_2268].y * 0.3183098733425140380859375) * _2286) * _2287) + _2063;
        _2110 = (((cbLight._m0[_2268].z * 0.3183098733425140380859375) * _2286) * _2287) + _2065;
    }
    uint _2113 = _1974 + 8u;
    float _2126 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1974].w)) * _772) * 0.949999988079071044921875);
    float _2127 = _2126 * _2126;
    float _2128 = cbLight._m0[_1974].x + _848;
    float _2129 = cbLight._m0[_1974].y + _849;
    float _2130 = cbLight._m0[_1974].z + _850;
    float _2134 = inversesqrt(dot(vec3(_2128, _2129, _2130), vec3(_2128, _2129, _2130)));
    float _2135 = _2134 * _2128;
    float _2136 = _2134 * _2129;
    float _2137 = _2134 * _2130;
    float _2138 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_1974].xyz));
    float _4230 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2141 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _4241 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _2142 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2143 = dot(vec3(_769, _770, _771), vec3(_2135, _2136, _2137));
    float _4252 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2147 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_2135, _2136, _2137));
    float _4263 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2151 = _2127 * _2127;
    float _2155 = ((_2146 * _2146) * (_2151 + (-1.0))) + 1.0;
    float _2166 = (exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2167 = 1.0 - _2127;
    float _2178 = (0.5 / (((_2142 * ((_2141 * _2167) + _2127)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2167) + _2127) * _2141))) * _2141;
    float _4274 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2180 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2151 / ((_2155 * _2155) * 3.141590118408203125));
    uint _2194 = _1974 + 9u;
    float _2205 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2014].w)) * _772) * 0.949999988079071044921875);
    float _2206 = _2205 * _2205;
    float _2207 = cbLight._m0[_2014].x + _848;
    float _2208 = cbLight._m0[_2014].y + _849;
    float _2209 = cbLight._m0[_2014].z + _850;
    float _2213 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
    float _2214 = _2213 * _2207;
    float _2215 = _2213 * _2208;
    float _2216 = _2213 * _2209;
    float _2217 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2014].xyz));
    float _4285 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2220 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2221 = dot(vec3(_769, _770, _771), vec3(_2214, _2215, _2216));
    float _4296 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2225 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_2214, _2215, _2216));
    float _4307 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2229 = _2206 * _2206;
    float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
    float _2242 = (exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2243 = 1.0 - _2206;
    float _2253 = (0.5 / (((_2142 * ((_2220 * _2243) + _2206)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2243) + _2206) * _2220))) * _2220;
    float _4318 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2255 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
    float _2265 = (((_2242 * cbLight._m0[_2194].x) * _2255) * _1997) + ((((cbLight._m0[_2113].x * _1966) * _2166) * _2180) * _2010);
    float _2266 = (((_2242 * cbLight._m0[_2194].y) * _2255) * _1997) + ((((cbLight._m0[_2113].y * _1967) * _2166) * _2180) * _2010);
    float _2267 = (((_2242 * cbLight._m0[_2194].z) * _2255) * _1997) + ((((cbLight._m0[_2113].z * _1968) * _2166) * _2180) * _2010);
    float _2329;
    float _2331;
    float _2333;
    if (_2050)
    {
        _2329 = _2265;
        _2331 = _2266;
        _2333 = _2267;
    }
    else
    {
        uint _2335 = _1974 + 2u;
        uint _2339 = _1974 + 10u;
        float _2353 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2335].w)) * _772) * 0.949999988079071044921875);
        float _2354 = _2353 * _2353;
        float _2355 = cbLight._m0[_2335].x + _848;
        float _2356 = cbLight._m0[_2335].y + _849;
        float _2357 = cbLight._m0[_2335].z + _850;
        float _2361 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
        float _2362 = _2361 * _2355;
        float _2363 = _2361 * _2356;
        float _2364 = _2361 * _2357;
        float _2365 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2335].xyz));
        float _4329 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2368 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2369 = dot(vec3(_769, _770, _771), vec3(_2362, _2363, _2364));
        float _4340 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2372 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2373 = dot(vec3(cbLight._m0[_2335].xyz), vec3(_2362, _2363, _2364));
        float _4351 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2377 = _2354 * _2354;
        float _2381 = ((_2372 * _2372) * (_2377 + (-1.0))) + 1.0;
        float _2390 = (exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2391 = 1.0 - _2354;
        float _2401 = (0.5 / (((_2142 * ((_2368 * _2391) + _2354)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2391) + _2354) * _2368))) * _2368;
        float _4362 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2403 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2377 / ((_2381 * _2381) * 3.141590118408203125));
        float _2404 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
        _2329 = (((_2390 * cbLight._m0[_2339].x) * _2403) * _2404) + _2265;
        _2331 = (((_2390 * cbLight._m0[_2339].y) * _2403) * _2404) + _2266;
        _2333 = (((_2390 * cbLight._m0[_2339].z) * _2403) * _2404) + _2267;
    }
    float _2439;
    float _2441;
    float _2443;
    if (_2068)
    {
        _2439 = _2329;
        _2441 = _2331;
        _2443 = _2333;
    }
    else
    {
        uint _2450 = _1974 + 3u;
        uint _2454 = _1974 + 11u;
        float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2450].w)) * _772) * 0.949999988079071044921875);
        float _2469 = _2468 * _2468;
        float _2470 = cbLight._m0[_2450].x + _848;
        float _2471 = cbLight._m0[_2450].y + _849;
        float _2472 = cbLight._m0[_2450].z + _850;
        float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
        float _2477 = _2476 * _2470;
        float _2478 = _2476 * _2471;
        float _2479 = _2476 * _2472;
        float _2480 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2450].xyz));
        float _4378 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2484 = dot(vec3(_769, _770, _771), vec3(_2477, _2478, _2479));
        float _4389 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2488 = dot(vec3(cbLight._m0[_2450].xyz), vec3(_2477, _2478, _2479));
        float _4400 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2492 = _2469 * _2469;
        float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
        float _2505 = (exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2506 = 1.0 - _2469;
        float _2516 = (0.5 / (((_2142 * ((_2483 * _2506) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2506) + _2469) * _2483))) * _2483;
        float _4411 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2518 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
        float _2519 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
        _2439 = (((_2505 * cbLight._m0[_2454].x) * _2518) * _2519) + _2329;
        _2441 = (((_2505 * cbLight._m0[_2454].y) * _2518) * _2519) + _2331;
        _2443 = (((_2505 * cbLight._m0[_2454].z) * _2518) * _2519) + _2333;
    }
    float _2654;
    float _2656;
    float _2658;
    float _2660;
    float _2662;
    float _2664;
    if (_1972.y == 0u)
    {
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2594;
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2594;
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2594;
        uvec4 _2609 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2610 = _2609.x;
        uint _2621 = uint((float(_2609.y) * floor(float(uint(cbSceneParam._m0[85u].y * _857) / _2610))) + floor(float(uint(cbSceneParam._m0[85u].x * _856) / _2610)));
        float _2631 = (log2(_2597 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2632 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        uint _2635 = uint(isnan(14.0) ? _2632 : (isnan(_2632) ? 14.0 : min(_2632, 14.0)));
        uvec4 _2640 = texelFetch(g_lightClusterGridBuffer, int(((_2635 << 2u) + (_2621 << 6u)) >> 2u));
        uint _2641 = _2640.x;
        uint _2642 = _2609.z;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        if (((((1u << ((_2642 >> 4u) & 15u)) + 4294967295u) & _2641) == 0u) || ((_2642 & 240u) == 0u))
        {
            _2742 = 0.0;
            _2744 = 0.0;
            _2746 = 0.0;
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
        }
        else
        {
            float _2743;
            float _2745;
            float _2747;
            float _2749;
            float _2751;
            float _2753;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            uint _2893 = 0u;
            uint _2902;
            bool _2903;
            for (;;)
            {
                _2902 = texelFetch(g_lightClassification, int((((_2635 << 5u) + (_2621 << 9u)) + (_2893 << 2u)) >> 2u)).x;
                _2903 = _2902 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2903)
                {
                    frontier_phi_61_pred = _2887;
                    frontier_phi_61_pred_1 = _2892;
                    frontier_phi_61_pred_2 = _2891;
                    frontier_phi_61_pred_3 = _2890;
                    frontier_phi_61_pred_4 = _2889;
                    frontier_phi_61_pred_5 = _2888;
                }
                else
                {
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    uint _3017;
                    _3011 = _2887;
                    _3012 = _2888;
                    _3013 = _2889;
                    _3014 = _2890;
                    _3015 = _2891;
                    _3016 = _2892;
                    _3017 = _2902;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    for (;;)
                    {
                        uint _3021 = uint(findLSB(_3017)) + (_2893 << 5u);
                        uint _3018 = (_3017 + 4294967295u) & _3017;
                        uint _3023 = _3021 * 48u;
                        vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 3u)).x));
                        uint _3043 = (_3021 * 48u) + 4u;
                        vec4 _3056 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3043)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 3u)).x));
                        uint _3062 = (_3021 * 48u) + 8u;
                        vec3 _3073 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3062)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 2u)).x));
                        float _3077 = _3037.x - _2595;
                        float _3078 = _3037.y - _2596;
                        float _3079 = _3037.z - _2597;
                        float _3080 = dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079));
                        float _3083 = inversesqrt(_3080);
                        float _3084 = _3083 * _3077;
                        float _3085 = _3083 * _3078;
                        float _3086 = _3083 * _3079;
                        float _3087 = dot(vec3(_875, _878, _881), vec3(_3084, _3085, _3086));
                        float _3092 = 1.0 - (_3080 * _3037.w);
                        float _4437 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3093 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3094 = sqrt(_3080) * _3056.w;
                        float _3097 = 1.39999997615814208984375 / (_3094 + 1.39999997615814208984375);
                        float _3098 = _3097 * _3097;
                        float _3101 = ((1.0 - _3098) * _3087) + _3098;
                        float _3104 = _3094 * _3094;
                        float _3108 = ((isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0))) * _3093) / ((_3104 * 0.699999988079071044921875) + 1.0);
                        float _3112 = (-0.0) - _2595;
                        float _3113 = (-0.0) - _2596;
                        float _3114 = (-0.0) - _2597;
                        float _3118 = inversesqrt(dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114)));
                        float _3119 = _3118 * _3112;
                        float _3120 = _3118 * _3113;
                        float _3121 = _3118 * _3114;
                        float _3129 = exp2(log2(1.0 / ((_3104 * 3.5) + 5.0)) * 0.25);
                        float _3130 = 1.0 - _935;
                        float _3137 = sqrt(1.0 - ((1.0 - (_3130 * _3130)) * (1.0 - (_3129 * _3129))));
                        float _3138 = _3137 * _3137;
                        float _3139 = _3138 * _3138;
                        float _3140 = _3119 + _3084;
                        float _3141 = _3120 + _3085;
                        float _3142 = _3121 + _3086;
                        float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                        float _3150 = dot(vec3(_875, _878, _881), vec3(_3119, _3120, _3121));
                        float _4453 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3153 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3154 = dot(vec3(_875, _878, _881), vec3(_3146 * _3140, _3146 * _3141, _3146 * _3142));
                        float _4464 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3157 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3161 = ((_3157 * _3157) * (_3139 + (-1.0))) + 1.0;
                        float _3162 = _3097 * _3138;
                        float _3163 = _3162 * _3162;
                        float _3166 = ((1.0 - _3163) * _3087) + _3163;
                        float _4475 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3167 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3168 = 1.0 - _3138;
                        float _3178 = (0.5 / (((_3167 * ((_3153 * _3168) + _3138)) + 9.9999999392252902907785028219223e-09) + (((_3167 * _3168) + _3138) * _3153))) * _3167;
                        float _4486 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3189 = (((_3139 * 3.1415927410125732421875) * (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) / ((_3161 * _3161) * ((_3104 * 2.1991131305694580078125) + 3.141590118408203125))) * _3093;
                        _2946 = (_3108 * _3056.x) + _3014;
                        _2947 = (_3108 * _3056.y) + _3015;
                        _2948 = (_3108 * _3056.z) + _3016;
                        _2943 = (_3189 * _3073.x) + _3011;
                        _2944 = (_3189 * _3073.y) + _3012;
                        _2945 = (_3189 * _3073.z) + _3013;
                        if (_3018 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3011 = _2943;
                            _3012 = _2944;
                            _3013 = _2945;
                            _3014 = _2946;
                            _3015 = _2947;
                            _3016 = _2948;
                            _3017 = _3018;
                        }
                    }
                    frontier_phi_61_pred = _2943;
                    frontier_phi_61_pred_1 = _2948;
                    frontier_phi_61_pred_2 = _2947;
                    frontier_phi_61_pred_3 = _2946;
                    frontier_phi_61_pred_4 = _2945;
                    frontier_phi_61_pred_5 = _2944;
                }
                _2743 = frontier_phi_61_pred;
                _2753 = frontier_phi_61_pred_1;
                _2751 = frontier_phi_61_pred_2;
                _2749 = frontier_phi_61_pred_3;
                _2747 = frontier_phi_61_pred_4;
                _2745 = frontier_phi_61_pred_5;
                uint _2894 = _2893 + 1u;
                if (_2894 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2887 = _2743;
                    _2888 = _2745;
                    _2889 = _2747;
                    _2890 = _2749;
                    _2891 = _2751;
                    _2892 = _2753;
                    _2893 = _2894;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2742 = _2743;
            _2744 = _2745;
            _2746 = _2747;
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
        }
        uvec4 _2756 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2757 = _2756.z;
        uint _2759 = (_2757 >> 8u) & 15u;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        if (((4294967295u << _2759) & _2641) == 0u)
        {
            _2855 = _2742;
            _2857 = _2744;
            _2859 = _2746;
            _2861 = _2748;
            _2863 = _2750;
            _2865 = _2752;
        }
        else
        {
            float _2880 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
            float _2881 = _2880 * _2595;
            float _2882 = _2880 * _2596;
            float _2883 = _2880 * _2597;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2759 < ((_2757 >> 12u) & 15u))
            {
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _2864;
                float _2866;
                float _2994 = _2742;
                float _2995 = _2744;
                float _2996 = _2746;
                float _2997 = _2748;
                float _2998 = _2750;
                float _2999 = _2752;
                uint _3000 = _2759;
                uint _3009;
                bool _3010;
                for (;;)
                {
                    _3009 = texelFetch(g_lightClassification, int((((_2635 << 5u) + (_2621 << 9u)) + (_3000 << 2u)) >> 2u)).x;
                    _3010 = _3009 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3010)
                    {
                        frontier_phi_67_pred = _2997;
                        frontier_phi_67_pred_1 = _2998;
                        frontier_phi_67_pred_2 = _2999;
                        frontier_phi_67_pred_3 = _2996;
                        frontier_phi_67_pred_4 = _2995;
                        frontier_phi_67_pred_5 = _2994;
                    }
                    else
                    {
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3207 = _2994;
                        float _3208 = _2995;
                        float _3209 = _2996;
                        float _3210 = _2997;
                        float _3211 = _2998;
                        float _3212 = _2999;
                        uint _3213 = _3009;
                        uint _3214;
                        vec4 _3239;
                        float _3240;
                        vec4 _3255;
                        vec3 _3267;
                        vec4 _3282;
                        vec4 _3297;
                        float _3343;
                        bool _3344;
                        for (;;)
                        {
                            uint _3224 = ((_3000 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3213));
                            _3214 = (_3213 + 4294967295u) & _3213;
                            uint _3226 = _3224 * 40u;
                            _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            _3240 = _3239.w;
                            uint _3242 = (_3224 * 40u) + 4u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3257 = (_3224 * 40u) + 8u;
                            _3267 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x));
                            uint _3269 = (_3224 * 40u) + 16u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3284 = (_3224 * 40u) + 20u;
                            _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3299 = (_3224 * 40u) + 24u;
                            vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3318 = (_3224 * 40u) + 28u;
                            vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            _3343 = fma(_2597, _3331.z, fma(_2596, _3331.y, _3331.x * _2595)) + _3331.w;
                            _3344 = !((fma(_2597, _3312.z, fma(_2596, _3312.y, _3312.x * _2595)) + _3312.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3344)
                            {
                                float _3371 = _3239.x - _2595;
                                float _3372 = _3239.y - _2596;
                                float _3373 = _3239.z - _2597;
                                float _3374 = dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373));
                                float _3377 = inversesqrt(_3374);
                                float _3378 = _3377 * _3371;
                                float _3379 = _3377 * _3372;
                                float _3380 = _3377 * _3373;
                                float _3384 = 1.0 - (_3374 / (_3240 * _3240));
                                float _4497 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3385 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3389 = sqrt(_3374) * _3255.w;
                                float _3391 = 1.39999997615814208984375 / (_3389 + 1.39999997615814208984375);
                                float _3392 = _3391 * _3391;
                                float _3395 = ((1.0 - _3392) * dot(vec3(_3378, _3379, _3380), vec3(_875, _878, _881))) + _3392;
                                float _3398 = _3389 * _3389;
                                float _3402 = (fma(_2597, _3282.z, fma(_2596, _3282.y, _3282.x * _2595)) + _3282.w) / _3343;
                                float _3403 = (fma(_2597, _3297.z, fma(_2596, _3297.y, _3297.x * _2595)) + _3297.w) / _3343;
                                float _3407 = 1.0 - dot(vec2(_3402, _3403), vec2(_3402, _3403));
                                float _4513 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3408 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3409 = _3408 * (((isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0))) * _3385) / ((_3398 * 0.699999988079071044921875) + 1.0));
                                float _3421 = exp2(log2(1.0 / ((_3398 * 3.5) + 5.0)) * 0.25);
                                float _3422 = 1.0 - _935;
                                float _3429 = sqrt(1.0 - ((1.0 - (_3422 * _3422)) * (1.0 - (_3421 * _3421))));
                                float _3430 = _3429 * _3429;
                                float _3431 = _3430 * _3430;
                                float _3432 = _3378 - _2881;
                                float _3433 = _3379 - _2882;
                                float _3434 = _3380 - _2883;
                                float _3438 = inversesqrt(dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434)));
                                float _3442 = dot(vec3(_875, _878, _881), vec3((-0.0) - _2881, (-0.0) - _2882, (-0.0) - _2883));
                                float _4524 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3445 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3446 = dot(vec3(_875, _878, _881), vec3(_3438 * _3432, _3438 * _3433, _3438 * _3434));
                                float _4535 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3449 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3453 = ((_3449 * _3449) * (_3431 + (-1.0))) + 1.0;
                                float _3454 = _3391 * _3430;
                                float _3455 = _3454 * _3454;
                                float _3461 = ((1.0 - _3455) * dot(vec3(_875, _878, _881), vec3(_3378, _3379, _3380))) + _3455;
                                float _4546 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3462 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3463 = 1.0 - _3430;
                                float _3473 = (0.5 / (((_3462 * ((_3445 * _3463) + _3430)) + 9.9999999392252902907785028219223e-09) + (((_3462 * _3463) + _3430) * _3445))) * _3462;
                                float _4557 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3483 = (_3408 * _3385) * (((_3431 * 3.1415927410125732421875) * (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) / ((_3453 * _3453) * ((_3398 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3483 * _3267.x;
                                frontier_phi_73_pred_1 = _3483 * _3267.y;
                                frontier_phi_73_pred_2 = _3409 * _3255.z;
                                frontier_phi_73_pred_3 = _3409 * _3255.y;
                                frontier_phi_73_pred_4 = _3409 * _3255.x;
                                frontier_phi_73_pred_5 = _3483 * _3267.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3487 = frontier_phi_73_pred;
                            _3488 = frontier_phi_73_pred_1;
                            _3492 = frontier_phi_73_pred_2;
                            _3491 = frontier_phi_73_pred_3;
                            _3490 = frontier_phi_73_pred_4;
                            _3489 = frontier_phi_73_pred_5;
                            _3197 = _3490 + _3210;
                            _3198 = _3491 + _3211;
                            _3199 = _3492 + _3212;
                            _3194 = _3487 + _3207;
                            _3195 = _3488 + _3208;
                            _3196 = _3489 + _3209;
                            if (_3214 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3207 = _3194;
                                _3208 = _3195;
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3214;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3197;
                        frontier_phi_67_pred_1 = _3198;
                        frontier_phi_67_pred_2 = _3199;
                        frontier_phi_67_pred_3 = _3196;
                        frontier_phi_67_pred_4 = _3195;
                        frontier_phi_67_pred_5 = _3194;
                    }
                    _2862 = frontier_phi_67_pred;
                    _2864 = frontier_phi_67_pred_1;
                    _2866 = frontier_phi_67_pred_2;
                    _2860 = frontier_phi_67_pred_3;
                    _2858 = frontier_phi_67_pred_4;
                    _2856 = frontier_phi_67_pred_5;
                    uint _3001 = _3000 + 1u;
                    if (_3001 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2994 = _2856;
                        _2995 = _2858;
                        _2996 = _2860;
                        _2997 = _2862;
                        _2998 = _2864;
                        _2999 = _2866;
                        _3000 = _3001;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2864;
                frontier_phi_55_56_ladder_1 = _2866;
                frontier_phi_55_56_ladder_2 = _2862;
                frontier_phi_55_56_ladder_3 = _2860;
                frontier_phi_55_56_ladder_4 = _2858;
                frontier_phi_55_56_ladder_5 = _2856;
            }
            else
            {
                frontier_phi_55_56_ladder = _2750;
                frontier_phi_55_56_ladder_1 = _2752;
                frontier_phi_55_56_ladder_2 = _2748;
                frontier_phi_55_56_ladder_3 = _2746;
                frontier_phi_55_56_ladder_4 = _2744;
                frontier_phi_55_56_ladder_5 = _2742;
            }
            _2855 = frontier_phi_55_56_ladder_5;
            _2857 = frontier_phi_55_56_ladder_4;
            _2859 = frontier_phi_55_56_ladder_3;
            _2861 = frontier_phi_55_56_ladder_2;
            _2863 = frontier_phi_55_56_ladder;
            _2865 = frontier_phi_55_56_ladder_1;
        }
        float _2870 = isnan(1.0) ? _919 : (isnan(_919) ? 1.0 : min(_919, 1.0));
        _2654 = (_2870 * _2861) + _2106;
        _2656 = (_2870 * _2863) + _2108;
        _2658 = (_2870 * _2865) + _2110;
        _2660 = ((_2855 * 0.039999999105930328369140625) * _2870) + _2439;
        _2662 = ((_2857 * 0.039999999105930328369140625) * _2870) + _2441;
        _2664 = ((_2859 * 0.039999999105930328369140625) * _2870) + _2443;
    }
    else
    {
        _2654 = _2106;
        _2656 = _2108;
        _2658 = _2110;
        _2660 = _2439;
        _2662 = _2441;
        _2664 = _2443;
    }
    float _4573 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4584 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4595 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    uint _2684 = _275 + 6u;
    float _2692 = _856 / cbSceneParam._m0[86u].x;
    float _2693 = _857 / cbSceneParam._m0[86u].y;
    vec4 _2707 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2692, _2693, (log2((isnan(cbSceneParam._m0[77u].w) ? _790 : (isnan(_790) ? cbSceneParam._m0[77u].w : min(_790, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2709 = _2707.x;
    float _2710 = _2707.y;
    float _2711 = _2707.z;
    float _2712 = _2707.w;
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    if (_790 > cbSceneParam._m0[78u].w)
    {
        float _2767 = isnan(_790) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _790 : min(cbSceneParam._m0[80u].w, _790));
        float _2768 = _2767 / _790;
        float _2779 = _2768 * _841;
        float _2780 = _842 * _2768;
        float _2781 = (-0.0) - _2780;
        float _2783 = _2768 * _843;
        float _2785 = (cbSceneParam._m0[77u].w * _2781) / _2767;
        float _2786 = _2785 + cbSceneParam._m0[79u].w;
        float _2787 = cbSceneParam._m0[79u].w - _2780;
        float _2793 = sqrt(((_2779 * _2779) + (_2780 * _2780)) + (_2783 * _2783));
        float _2796 = (1.0 - (cbSceneParam._m0[77u].w / _2767)) * _2793;
        float _2801 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2803 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2956;
        if (abs((_2781 - _2785) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2956 = ((((_2786 > 0.0) ? exp2(_2801 * _2786) : (2.0 - exp2(_2803 * _2786))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2796;
        }
        else
        {
            float _2916 = 1.0 / cbSceneParam._m0[80u].x;
            float _2917 = isnan(_2787) ? _2786 : (isnan(_2786) ? _2787 : max(_2786, _2787));
            float _2918 = isnan(_2787) ? _2786 : (isnan(_2786) ? _2787 : min(_2786, _2787));
            float _2927 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : min(_2917, 0.0));
            float _2928 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : min(_2918, 0.0));
            _2956 = ((abs(_2793 / _2781) * cbSceneParam._m0[80u].y) * ((((_2927 - _2928) * 2.0) - ((exp2(_2801 * (isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0)))) - exp2(_2801 * (isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0))))) * _2916)) - ((exp2(_2803 * _2927) - exp2(_2803 * _2928)) * _2916))) + (_2796 * cbSceneParam._m0[80u].z);
        }
        vec4 _2958 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2692, _2693, 1.0), 0.0);
        float _2967 = exp2((_2956 * (-1.44269502162933349609375)) * (1.0 - _2958.w));
        float _2968 = log2(_2967);
        float _2984 = log2(_2712);
        _2805 = (exp2(_2984 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].x)) * _2958.x) / cbSceneParam._m0[78u].x)) + _2709;
        _2807 = (exp2(_2984 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].y)) * _2958.y) / cbSceneParam._m0[78u].y)) + _2710;
        _2809 = (exp2(_2984 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2968 * cbSceneParam._m0[78u].z)) * _2958.z) / cbSceneParam._m0[78u].z)) + _2711;
        _2811 = _2967 * _2712;
    }
    else
    {
        _2805 = _2709;
        _2807 = _2710;
        _2809 = _2711;
        _2811 = _2712;
    }
    float _2823 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2824 = _2823 == 3.0;
    float _2825 = log2(_2811);
    float _2832 = exp2(_2825 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2654 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _919))) + ((_2660 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1723)) * cbPerFrame._m0[3u].x));
    float _2833 = exp2(_2825 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2656 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _919))) + ((_2662 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1723)) * cbPerFrame._m0[3u].x));
    float _2834 = exp2(_2825 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2658 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _919))) + ((_2664 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1723)) * cbPerFrame._m0[3u].x));
    float _2843 = (_2823 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2843 * (_2824 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2805)));
    SV_Target.y = _2843 * (_2824 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2807)));
    SV_Target.z = _2843 * (_2824 ? _2834 : (_2834 + (cbSceneParam._m0[72u].w * _2809)));
    SV_Target.w = cbInstanceData._m0[_2684].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2684].w;
}


