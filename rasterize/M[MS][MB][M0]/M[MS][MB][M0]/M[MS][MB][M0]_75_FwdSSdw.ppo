#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1164;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _358 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _358) * cbMtdParam._m0[24u].x) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3495 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _383 = (_376 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _384 = (_376 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _385 = (_376 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _415 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _417 = _415.x;
    float _418 = _415.y;
    float _419 = _415.z;
    float _428 = ((_398.z - _419) * _376) + _419;
    float _431 = ((((_398.x - _417) * _376) + _417) * 2.0) + (-1.0);
    float _433 = ((((_398.y - _418) * _376) + _418) * 2.0) + (-1.0);
    float _434 = dot(vec2(_431, _433), vec2(_431, _433));
    float _3506 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _439 = sqrt(1.0 - (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))));
    vec4 _452 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _468 = _466.x;
    float _469 = 1.0 - _468;
    float _497 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_468 - _469) * cbMtdParam._m0[24u].w) + _469) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3517 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _498 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _506 = ((((cbMtdParam._m0[10u].x - _383) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _498) + _383;
    float _507 = ((((cbMtdParam._m0[10u].y - _384) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _498) + _384;
    float _508 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _385)) * _498) + _385;
    float _512 = ((cbMtdParam._m0[23u].y - _428) * _498) + _428;
    vec4 _531 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _533 = _531.x;
    float _534 = _531.y;
    float _540 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_229, _230, _231, 0.0));
    vec4 _555 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _260) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _261) + cbTextureTilingScale._m0[18u].w));
    float _557 = _555.x;
    float _562 = fract(_555.w + cbPerFrame._m0[22u].x);
    float _564 = (1.0 - _562) * _557;
    float _569 = ((_562 + (-1.0)) + _557) * 9.0;
    float _571 = ((_557 + (-1.0)) + _562) * 9.0;
    float _572 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _573 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _587 = (_564 * ((_555.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _572 : (isnan(_572) ? 3.0 : min(_572, 3.0))) * 3.1415927410125732421875);
    float _589 = (_564 * ((_555.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _573 : (isnan(_573) ? 3.0 : min(_573, 3.0))) * 3.1415927410125732421875);
    float _593 = inversesqrt(dot(vec3(_587, _589, 1.0), vec3(_587, _589, 1.0)));
    float _609 = (((((0.5 - _533) + ((_587 * 0.5) * _593)) * _540) + _533) * 2.0) + (-1.0);
    float _610 = (((((0.5 - _534) + ((_593 * 0.5) * _589)) * _540) + _534) * 2.0) + (-1.0);
    float _611 = dot(vec2(_609, _610), vec2(_609, _610));
    float _3548 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _627 = ((((cbMtdParam._m0[22u].z * _431) - _431) + _609) * _498) + _431;
    float _628 = ((((cbMtdParam._m0[22u].z * _433) - _433) + _610) * _498) + _433;
    float _629 = (_498 * (sqrt(1.0 - (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) - _439)) + _439;
    float _631 = cbMtdParam._m0[22u].x + _452.w;
    float _634 = fma(_629, _229, fma(_628, _235 * TANGENT.x, (_221 * _213) * _627));
    float _637 = fma(_629, _230, fma(_628, _235 * TANGENT.y, (_221 * _214) * _627));
    float _640 = fma(_629, _231, fma(_628, _235 * TANGENT.z, (_221 * _215) * _627));
    float _644 = inversesqrt(dot(vec3(_634, _637, _640), vec3(_634, _637, _640)));
    float _645 = _644 * _634;
    float _646 = _644 * _637;
    float _647 = _644 * _640;
    float _3559 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _648 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _3570 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3581 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3592 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3603 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _666 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _717 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _707);
    float _718 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _707);
    float _719 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _707);
    float _723 = inversesqrt(dot(vec3(_717, _718, _719), vec3(_717, _718, _719)));
    float _724 = _717 * _723;
    float _725 = _718 * _723;
    float _726 = _719 * _723;
    float _732 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _733 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _751 = fma(_647, cbSceneParam._m0[5u].z, fma(_646, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _645));
    float _754 = fma(_647, cbSceneParam._m0[6u].z, fma(_646, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _645));
    float _757 = fma(_647, cbSceneParam._m0[7u].z, fma(_646, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _645));
    uint _771 = (_241 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _777 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * cbInstanceData._m0[_771].x;
    float _778 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) * cbInstanceData._m0[_771].y;
    float _779 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) * cbInstanceData._m0[_771].z;
    float _3614 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _780 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _3625 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _3636 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    vec4 _791 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _732, cbSceneParam._m0[86u].y * _733));
    float _795 = ((isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * TEXCOORD_5.w) * _791.x;
    float _796 = dot(vec3(_645, _646, _647), vec3(_724, _725, _726));
    float _799 = _796 * 2.0;
    float _803 = (_799 * _645) - _724;
    float _804 = (_799 * _646) - _725;
    float _805 = (_799 * _647) - _726;
    float _809 = abs(dot(vec3(_724, _725, _726), vec3(_645, _646, _647)));
    float _3647 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _811 = sqrt(_648);
    float _823 = exp2((_811 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_811 * 3.0));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1163;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _889 = fma(_863, cbModelParam._m0[26u].z, fma(_859, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855));
        float _893 = fma(_863, cbModelParam._m0[27u].z, fma(_859, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855));
        float _897 = fma(_863, cbModelParam._m0[28u].z, fma(_859, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855));
        float _921 = _855 + _645;
        float _922 = _859 + _646;
        float _923 = _863 + _647;
        float _933 = fma(_923, cbModelParam._m0[26u].z, fma(_922, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _921)) - _889;
        float _934 = fma(_923, cbModelParam._m0[27u].z, fma(_922, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _921)) - _893;
        float _935 = fma(_923, cbModelParam._m0[28u].z, fma(_922, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _921)) - _897;
        float _939 = inversesqrt(dot(vec3(_933, _934, _935), vec3(_933, _934, _935)));
        float _952 = ((_939 * _933) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_889 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _953 = ((_939 * _934) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_893 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_939 * _935) / cbModelParam._m0[34u].z) + ((((((_897 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_952, _953, _954), 0.0);
        float _991 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_957.x + (-0.5));
        float _993 = _991 * (_957.y + (-0.5));
        float _994 = _991 * (_957.z + (-0.5));
        float _1001 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_964.x + (-0.5));
        float _1003 = _1001 * (_964.y + (-0.5));
        float _1004 = _1001 * (_964.z + (-0.5));
        float _1011 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_971.x + (-0.5));
        float _1013 = _1011 * (_971.y + (-0.5));
        float _1014 = _1011 * (_971.z + (-0.5));
        float _1021 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_978.x + (-0.5));
        float _1023 = _1021 * (_978.y + (-0.5));
        float _1024 = _1021 * (_978.z + (-0.5));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = _992 * 0.5;
        float _1029 = _1002 * 0.5;
        float _1030 = _1012 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1045 = (dot(vec3(_645, _646, _647), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1055 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3695 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1057 + 1.0))) + _1062) * _1025;
        float _1072 = _993 * 0.5;
        float _1073 = _1003 * 0.5;
        float _1074 = _1013 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_645, _646, _647), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3728 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1099 + 1.0))) + _1104) * _1026;
        float _1114 = _994 * 0.5;
        float _1115 = _1004 * 0.5;
        float _1116 = _1014 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_645, _646, _647), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3761 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1141 + 1.0))) + _1146) * _1027;
        _1163 = _994;
        _1165 = _993;
        _1166 = _992;
        _1167 = _1004;
        _1168 = _1003;
        _1169 = _1002;
        _1170 = _1014;
        _1171 = _1013;
        _1172 = _1012;
        _1173 = _1027;
        _1174 = _1026;
        _1175 = _1025;
        _1176 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
        _1177 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1178 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
    }
    else
    {
        _1163 = _1164;
        _1165 = _1164;
        _1166 = _1164;
        _1167 = _1164;
        _1168 = _1164;
        _1169 = _1164;
        _1170 = _1164;
        _1171 = _1164;
        _1172 = _1164;
        _1173 = _1164;
        _1174 = _1164;
        _1175 = _1164;
        _1176 = 0.0;
        _1177 = 0.0;
        _1178 = 0.0;
    }
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1203 = fma(_863, cbModelParam._m0[30u].z, fma(_859, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _855));
        float _1207 = fma(_863, cbModelParam._m0[31u].z, fma(_859, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _855));
        float _1211 = fma(_863, cbModelParam._m0[32u].z, fma(_859, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _855));
        float _1234 = _855 + _645;
        float _1235 = _859 + _646;
        float _1236 = _863 + _647;
        float _1246 = fma(_1236, cbModelParam._m0[30u].z, fma(_1235, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1234)) - _1203;
        float _1247 = fma(_1236, cbModelParam._m0[31u].z, fma(_1235, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1234)) - _1207;
        float _1248 = fma(_1236, cbModelParam._m0[32u].z, fma(_1235, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1234)) - _1211;
        float _1252 = inversesqrt(dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248)));
        float _1265 = ((_1252 * _1246) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1203 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1252 * _1247) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1207 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1252 * _1248) / cbModelParam._m0[35u].z) + ((((((_1211 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        float _1302 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1269.x + (-0.5));
        float _1304 = _1302 * (_1269.y + (-0.5));
        float _1305 = _1302 * (_1269.z + (-0.5));
        float _1312 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1276.x + (-0.5));
        float _1314 = _1312 * (_1276.y + (-0.5));
        float _1315 = _1312 * (_1276.z + (-0.5));
        float _1322 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1283.x + (-0.5));
        float _1324 = _1322 * (_1283.y + (-0.5));
        float _1325 = _1322 * (_1283.z + (-0.5));
        float _1332 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1290.x + (-0.5));
        float _1334 = _1332 * (_1290.y + (-0.5));
        float _1335 = _1332 * (_1290.z + (-0.5));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = _1303 * 0.5;
        float _1340 = _1313 * 0.5;
        float _1341 = _1323 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_645, _646, _647), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _3824 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1366 + 1.0))) + _1371) * _1336;
        float _1381 = _1304 * 0.5;
        float _1382 = _1314 * 0.5;
        float _1383 = _1324 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_645, _646, _647), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _3857 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1408 + 1.0))) + _1413) * _1337;
        float _1423 = _1305 * 0.5;
        float _1424 = _1315 * 0.5;
        float _1425 = _1325 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_645, _646, _647), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _3890 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1450 + 1.0))) + _1455) * _1338;
        _1472 = _1305;
        _1473 = _1304;
        _1474 = _1303;
        _1475 = _1315;
        _1476 = _1314;
        _1477 = _1313;
        _1478 = _1325;
        _1479 = _1324;
        _1480 = _1323;
        _1481 = _1338;
        _1482 = _1337;
        _1483 = _1336;
        _1484 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1485 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1486 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
    }
    else
    {
        _1472 = _1164;
        _1473 = _1164;
        _1474 = _1164;
        _1475 = _1164;
        _1476 = _1164;
        _1477 = _1164;
        _1478 = _1164;
        _1479 = _1164;
        _1480 = _1164;
        _1481 = _1164;
        _1482 = _1164;
        _1483 = _1164;
        _1484 = 0.0;
        _1485 = 0.0;
        _1486 = 0.0;
    }
    float _1496 = (cbModelParam._m0[1u].x * (_1484 - _1176)) + _1176;
    float _1497 = (cbModelParam._m0[1u].x * (_1485 - _1177)) + _1177;
    float _1498 = (cbModelParam._m0[1u].x * (_1486 - _1178)) + _1178;
    float _1519 = fma(_1498, cbSceneParam._m0[89u].z, fma(_1497, cbSceneParam._m0[89u].y, _1496 * cbSceneParam._m0[89u].x));
    float _1522 = fma(_1498, cbSceneParam._m0[90u].z, fma(_1497, cbSceneParam._m0[90u].y, _1496 * cbSceneParam._m0[90u].x));
    float _1525 = fma(_1498, cbSceneParam._m0[91u].z, fma(_1497, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1496));
    float _1540 = _803 * 0.5;
    float _1541 = _804 * 0.5;
    float _1542 = _805 * 0.5;
    float _1543 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1474, _1477, _1480, _1483));
    float _1546 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1473, _1476, _1479, _1482));
    float _1549 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1472, _1475, _1478, _1481));
    float _1583;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1556 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1163, _1167, _1170, _1173));
        float _1560 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1165, _1168, _1171, _1174));
        float _1564 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1166, _1169, _1172, _1175));
        float _1571 = dot(vec4(cbModelParam._m0[39u]), vec4(_1540, _1541, _1542, 1.0));
        _1583 = dot(vec3(isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1571) ? 0.0 : (isnan(0.0) ? _1571 : max(0.0, _1571))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1583 = 1.0;
    }
    float _1594;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1585 = dot(vec4(cbModelParam._m0[40u]), vec4(_1540, _1541, _1542, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1585) ? 0.0 : (isnan(0.0) ? _1585 : max(0.0, _1585))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1598 = (_1594 * cbModelParam._m0[1u].x) + (_1583 * (1.0 - cbModelParam._m0[1u].x));
    float _1608 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _648);
    float _1609 = isnan(_1608) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1608 : min(cbModelParam._m0[25u].z, _1608));
    float _1691;
    float _1693;
    float _1695;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1658 = fma(_863, cbModelParam._m0[13u].z, fma(_859, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _855)) + cbModelParam._m0[13u].w;
        float _1662 = fma(_863, cbModelParam._m0[14u].z, fma(_859, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _855)) + cbModelParam._m0[14u].w;
        float _1666 = fma(_863, cbModelParam._m0[15u].z, fma(_859, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _855)) + cbModelParam._m0[15u].w;
        float _1669 = fma(_805, cbModelParam._m0[13u].z, fma(_804, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803));
        float _1672 = fma(_805, cbModelParam._m0[14u].z, fma(_804, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803));
        float _1675 = fma(_805, cbModelParam._m0[15u].z, fma(_804, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803));
        float _1703;
        if (_1669 > 0.0)
        {
            _1703 = abs((1.0 - _1658) / _1669);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1658 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1703 = frontier_phi_14_12_ladder;
        }
        float _1925;
        if (_1672 > 0.0)
        {
            _1925 = abs((1.0 - _1662) / _1672);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1662 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1925 = frontier_phi_23_19_ladder;
        }
        float _2171;
        if (_1675 > 0.0)
        {
            _2171 = abs((1.0 - _1666) / _1675);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1666 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2171 = frontier_phi_35_30_ladder;
        }
        float _2173 = isnan(_1925) ? _1703 : (isnan(_1703) ? _1925 : min(_1703, _1925));
        float _2174 = isnan(_2171) ? _2173 : (isnan(_2173) ? _2171 : min(_2173, _2171));
        float _2178 = (_2174 * _1669) + _1658;
        float _2179 = (_2174 * _1672) + _1662;
        float _2180 = (_2174 * _1675) + _1666;
        float _2181 = _2174 * 9.9999997473787516355514526367188e-05;
        float _2183 = (-1.0) - _2181;
        float _2185 = _2181 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2180 > _2185) || ((_2180 < _2183) || ((_2179 > _2185) || ((_2179 < _2183) || ((_2178 < _2183) || (_2178 > _2185))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2304 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2180, cbModelParam._m0[9u].z, fma(_2179, cbModelParam._m0[9u].y, _2178 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2180, cbModelParam._m0[10u].z, fma(_2179, cbModelParam._m0[10u].y, _2178 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2180, cbModelParam._m0[11u].z, fma(_2179, cbModelParam._m0[11u].y, _2178 * cbModelParam._m0[11u].x))), _1609);
            frontier_phi_13_35_ladder = _2304.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2304.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2304.x * cbModelParam._m0[1u].y;
        }
        _1691 = frontier_phi_13_35_ladder_2;
        _1693 = frontier_phi_13_35_ladder_1;
        _1695 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1679 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_803, _804, _805), _1609);
        _1691 = _1679.x * cbModelParam._m0[1u].y;
        _1693 = _1679.y * cbModelParam._m0[1u].y;
        _1695 = _1679.z * cbModelParam._m0[1u].y;
    }
    float _1699 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _648);
    float _1700 = isnan(_1699) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1699 : min(cbModelParam._m0[25u].w, _1699));
    float _1790;
    float _1792;
    float _1794;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1754 = fma(_863, cbModelParam._m0[21u].z, fma(_859, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _855)) + cbModelParam._m0[21u].w;
        float _1758 = fma(_863, cbModelParam._m0[22u].z, fma(_859, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _855)) + cbModelParam._m0[22u].w;
        float _1762 = fma(_863, cbModelParam._m0[23u].z, fma(_859, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _855)) + cbModelParam._m0[23u].w;
        float _1765 = fma(_805, cbModelParam._m0[21u].z, fma(_804, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803));
        float _1768 = fma(_805, cbModelParam._m0[22u].z, fma(_804, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803));
        float _1771 = fma(_805, cbModelParam._m0[23u].z, fma(_804, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803));
        float _1930;
        if (_1765 > 0.0)
        {
            _1930 = abs((1.0 - _1754) / _1765);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1754 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1930 = frontier_phi_25_21_ladder;
        }
        float _2198;
        if (_1768 > 0.0)
        {
            _2198 = abs((1.0 - _1758) / _1768);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1758 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2198 = frontier_phi_37_32_ladder;
        }
        float _2403;
        if (_1771 > 0.0)
        {
            _2403 = abs((1.0 - _1762) / _1771);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1762 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2403 = frontier_phi_46_43_ladder;
        }
        float _2405 = isnan(_2198) ? _1930 : (isnan(_1930) ? _2198 : min(_1930, _2198));
        float _2406 = isnan(_2403) ? _2405 : (isnan(_2405) ? _2403 : min(_2405, _2403));
        float _2410 = (_2406 * _1765) + _1754;
        float _2411 = (_2406 * _1768) + _1758;
        float _2412 = (_2406 * _1771) + _1762;
        float _2413 = _2406 * 9.9999997473787516355514526367188e-05;
        float _2414 = (-1.0) - _2413;
        float _2416 = _2413 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2412 > _2416) || ((_2412 < _2414) || ((_2411 > _2416) || ((_2411 < _2414) || ((_2410 < _2414) || (_2410 > _2416))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2611 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2412, cbModelParam._m0[17u].z, fma(_2411, cbModelParam._m0[17u].y, _2410 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2412, cbModelParam._m0[18u].z, fma(_2411, cbModelParam._m0[18u].y, _2410 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2412, cbModelParam._m0[19u].z, fma(_2411, cbModelParam._m0[19u].y, _2410 * cbModelParam._m0[19u].x))), _1700);
            frontier_phi_22_46_ladder = _2611.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2611.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2611.x * cbModelParam._m0[1u].z;
        }
        _1790 = frontier_phi_22_46_ladder_2;
        _1792 = frontier_phi_22_46_ladder_1;
        _1794 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1774 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_803, _804, _805), _1700);
        _1790 = _1774.x * cbModelParam._m0[1u].z;
        _1792 = _1774.y * cbModelParam._m0[1u].z;
        _1794 = _1774.z * cbModelParam._m0[1u].z;
    }
    float _1806 = ((((1.0 - _823) * ((_811 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_823 * _811)) * _795;
    float _1807 = _1806 * ((cbModelParam._m0[1u].w * (_1790 - _1691)) + _1691);
    float _1808 = _1806 * ((cbModelParam._m0[1u].w * (_1792 - _1693)) + _1693);
    float _1809 = _1806 * ((cbModelParam._m0[1u].w * (_1794 - _1695)) + _1695);
    float _1812 = fma(_1809, cbSceneParam._m0[89u].z, fma(_1808, cbSceneParam._m0[89u].y, _1807 * cbSceneParam._m0[89u].x));
    float _1815 = fma(_1809, cbSceneParam._m0[90u].z, fma(_1808, cbSceneParam._m0[90u].y, _1807 * cbSceneParam._m0[90u].x));
    float _1818 = fma(_1809, cbSceneParam._m0[91u].z, fma(_1808, cbSceneParam._m0[91u].y, _1807 * cbSceneParam._m0[91u].x));
    vec4 _1826 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_732, _733));
    float _1828 = _1826.w;
    float _1840 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1828);
    float _1841 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1828);
    float _1842 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1828);
    uvec4 _1846 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1848 = _1846.x * 14u;
    uint _1849 = _1848 + 13u;
    float _1856 = _795 + (-1.0);
    float _1861 = (cbLight._m0[_1849].x * _1856) + 1.0;
    float _1862 = (cbLight._m0[_1849].y * _1856) + 1.0;
    float _1863 = (cbLight._m0[_1849].z * _1856) + 1.0;
    float _1864 = (cbLight._m0[_1849].w * _1856) + 1.0;
    uint _1865 = _1848 + 5u;
    float _1871 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
    uint _1875 = _1848 + 4u;
    float _1884 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
    uint _1888 = _1848 | 1u;
    float _1899 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_645, _646, _647));
    float _1902 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_645, _646, _647));
    float _4026 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _4037 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1907 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * 0.3183098733425140380859375;
    float _1909 = (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 0.3183098733425140380859375;
    float _1916 = ((cbLight._m0[_1865].x * _1871) * _1909) + (((cbLight._m0[_1875].x * _1840) * _1884) * _1907);
    float _1917 = ((_1871 * cbLight._m0[_1865].y) * _1909) + (((cbLight._m0[_1875].y * _1841) * _1884) * _1907);
    float _1918 = ((_1871 * cbLight._m0[_1865].z) * _1909) + (((cbLight._m0[_1875].z * _1842) * _1884) * _1907);
    uvec4 _1922 = floatBitsToUint(cbLight._m0[_1848 + 12u]);
    bool _1924 = _1922.x == 0u;
    float _1935;
    float _1937;
    float _1939;
    if (_1924)
    {
        _1935 = _1916;
        _1937 = _1917;
        _1939 = _1918;
    }
    else
    {
        uint _1943 = _1848 + 6u;
        float _1959 = (dot(vec3(cbLight._m0[_1848 + 2u].xyz), vec3(_645, _646, _647)) * 0.5) + 0.5;
        float _1960 = _1959 * _1959;
        float _4048 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1961 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1962 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
        _1935 = (((cbLight._m0[_1943].x * 0.3183098733425140380859375) * _1961) * _1962) + _1916;
        _1937 = (((cbLight._m0[_1943].y * 0.3183098733425140380859375) * _1961) * _1962) + _1917;
        _1939 = (((cbLight._m0[_1943].z * 0.3183098733425140380859375) * _1961) * _1962) + _1918;
    }
    bool _1942 = _1922.y == 0u;
    float _1980;
    float _1982;
    float _1984;
    if (_1942)
    {
        _1980 = _1935;
        _1982 = _1937;
        _1984 = _1939;
    }
    else
    {
        uint _2142 = _1848 + 7u;
        float _2158 = (dot(vec3(cbLight._m0[_1848 + 3u].xyz), vec3(_645, _646, _647)) * 0.5) + 0.5;
        float _2159 = _2158 * _2158;
        float _4064 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2160 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _2161 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
        _1980 = (((cbLight._m0[_2142].x * 0.3183098733425140380859375) * _2160) * _2161) + _1935;
        _1982 = (((cbLight._m0[_2142].y * 0.3183098733425140380859375) * _2160) * _2161) + _1937;
        _1984 = (((cbLight._m0[_2142].z * 0.3183098733425140380859375) * _2160) * _2161) + _1939;
    }
    uint _1987 = _1848 + 8u;
    float _2000 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1848].w)) * _648) * 0.949999988079071044921875);
    float _2001 = _2000 * _2000;
    float _2002 = cbLight._m0[_1848].x + _724;
    float _2003 = cbLight._m0[_1848].y + _725;
    float _2004 = cbLight._m0[_1848].z + _726;
    float _2008 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
    float _2009 = _2008 * _2002;
    float _2010 = _2008 * _2003;
    float _2011 = _2008 * _2004;
    float _2012 = dot(vec3(_645, _646, _647), vec3(cbLight._m0[_1848].xyz));
    float _4080 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _2016 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _2017 = dot(vec3(_645, _646, _647), vec3(_2009, _2010, _2011));
    float _4102 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _2021 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_2009, _2010, _2011));
    float _4113 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2025 = _2001 * _2001;
    float _2029 = ((_2020 * _2020) * (_2025 + (-1.0))) + 1.0;
    float _2040 = (exp2(log2(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2041 = 1.0 - _2001;
    float _2052 = (0.5 / (((_2016 * ((_2015 * _2041) + _2001)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2041) + _2001) * _2015))) * _2015;
    float _4124 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2054 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2025 / ((_2029 * _2029) * 3.141590118408203125));
    uint _2068 = _1848 + 9u;
    float _2079 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1888].w)) * _648) * 0.949999988079071044921875);
    float _2080 = _2079 * _2079;
    float _2081 = cbLight._m0[_1888].x + _724;
    float _2082 = cbLight._m0[_1888].y + _725;
    float _2083 = cbLight._m0[_1888].z + _726;
    float _2087 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
    float _2088 = _2087 * _2081;
    float _2089 = _2087 * _2082;
    float _2090 = _2087 * _2083;
    float _2091 = dot(vec3(_645, _646, _647), vec3(cbLight._m0[_1888].xyz));
    float _4135 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _2095 = dot(vec3(_645, _646, _647), vec3(_2088, _2089, _2090));
    float _4146 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2099 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_2088, _2089, _2090));
    float _4157 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2103 = _2080 * _2080;
    float _2107 = ((_2098 * _2098) * (_2103 + (-1.0))) + 1.0;
    float _2116 = (exp2(log2(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2117 = 1.0 - _2080;
    float _2127 = (0.5 / (((_2016 * ((_2094 * _2117) + _2080)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2117) + _2080) * _2094))) * _2094;
    float _4168 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2129 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2103 / ((_2107 * _2107) * 3.141590118408203125));
    float _2139 = (((_2116 * cbLight._m0[_2068].x) * _2129) * _1871) + ((((cbLight._m0[_1987].x * _1840) * _2040) * _2054) * _1884);
    float _2140 = (((_2116 * cbLight._m0[_2068].y) * _2129) * _1871) + ((((cbLight._m0[_1987].y * _1841) * _2040) * _2054) * _1884);
    float _2141 = (((_2116 * cbLight._m0[_2068].z) * _2129) * _1871) + ((((cbLight._m0[_1987].z * _1842) * _2040) * _2054) * _1884);
    float _2203;
    float _2205;
    float _2207;
    if (_1924)
    {
        _2203 = _2139;
        _2205 = _2140;
        _2207 = _2141;
    }
    else
    {
        uint _2209 = _1848 + 2u;
        uint _2213 = _1848 + 10u;
        float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2209].w)) * _648) * 0.949999988079071044921875);
        float _2228 = _2227 * _2227;
        float _2229 = cbLight._m0[_2209].x + _724;
        float _2230 = cbLight._m0[_2209].y + _725;
        float _2231 = cbLight._m0[_2209].z + _726;
        float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
        float _2236 = _2235 * _2229;
        float _2237 = _2235 * _2230;
        float _2238 = _2235 * _2231;
        float _2239 = dot(vec3(_645, _646, _647), vec3(cbLight._m0[_2209].xyz));
        float _4179 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2242 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2243 = dot(vec3(_645, _646, _647), vec3(_2236, _2237, _2238));
        float _4190 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2246 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2247 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2236, _2237, _2238));
        float _4201 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2251 = _2228 * _2228;
        float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
        float _2264 = (exp2(log2(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2265 = 1.0 - _2228;
        float _2275 = (0.5 / (((_2016 * ((_2242 * _2265) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2265) + _2228) * _2242))) * _2242;
        float _4212 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2277 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
        float _2278 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
        _2203 = (((_2264 * cbLight._m0[_2213].x) * _2277) * _2278) + _2139;
        _2205 = (((_2264 * cbLight._m0[_2213].y) * _2277) * _2278) + _2140;
        _2207 = (((_2264 * cbLight._m0[_2213].z) * _2277) * _2278) + _2141;
    }
    float _2313;
    float _2315;
    float _2317;
    if (_1942)
    {
        _2313 = _2203;
        _2315 = _2205;
        _2317 = _2207;
    }
    else
    {
        uint _2324 = _1848 + 3u;
        uint _2328 = _1848 + 11u;
        float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2324].w)) * _648) * 0.949999988079071044921875);
        float _2343 = _2342 * _2342;
        float _2344 = cbLight._m0[_2324].x + _724;
        float _2345 = cbLight._m0[_2324].y + _725;
        float _2346 = cbLight._m0[_2324].z + _726;
        float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
        float _2351 = _2350 * _2344;
        float _2352 = _2350 * _2345;
        float _2353 = _2350 * _2346;
        float _2354 = dot(vec3(_645, _646, _647), vec3(cbLight._m0[_2324].xyz));
        float _4228 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2357 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2358 = dot(vec3(_645, _646, _647), vec3(_2351, _2352, _2353));
        float _4239 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2361 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2362 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_2351, _2352, _2353));
        float _4250 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2366 = _2343 * _2343;
        float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
        float _2379 = (exp2(log2(1.0 - (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2380 = 1.0 - _2343;
        float _2390 = (0.5 / (((_2016 * ((_2357 * _2380) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2380) + _2343) * _2357))) * _2357;
        float _4261 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2392 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
        float _2393 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
        _2313 = (((_2379 * cbLight._m0[_2328].x) * _2392) * _2393) + _2203;
        _2315 = (((_2379 * cbLight._m0[_2328].y) * _2392) * _2393) + _2205;
        _2317 = (((_2379 * cbLight._m0[_2328].z) * _2392) * _2393) + _2207;
    }
    float _2528;
    float _2530;
    float _2532;
    float _2534;
    float _2536;
    float _2538;
    if (_1846.y == 0u)
    {
        float _2468 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2469 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2468;
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2468;
        float _2471 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2468;
        uvec4 _2483 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2484 = _2483.x;
        uint _2495 = uint((float(_2483.y) * floor(float(uint(cbSceneParam._m0[85u].y * _733) / _2484))) + floor(float(uint(cbSceneParam._m0[85u].x * _732) / _2484)));
        float _2505 = (log2(_2471 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2506 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        uint _2509 = uint(isnan(14.0) ? _2506 : (isnan(_2506) ? 14.0 : min(_2506, 14.0)));
        uvec4 _2514 = texelFetch(g_lightClusterGridBuffer, int(((_2509 << 2u) + (_2495 << 6u)) >> 2u));
        uint _2515 = _2514.x;
        uint _2516 = _2483.z;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        if (((((1u << ((_2516 >> 4u) & 15u)) + 4294967295u) & _2515) == 0u) || ((_2516 & 240u) == 0u))
        {
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
        }
        else
        {
            float _2617;
            float _2619;
            float _2621;
            float _2623;
            float _2625;
            float _2627;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            uint _2767 = 0u;
            uint _2776;
            bool _2777;
            for (;;)
            {
                _2776 = texelFetch(g_lightClassification, int((((_2509 << 5u) + (_2495 << 9u)) + (_2767 << 2u)) >> 2u)).x;
                _2777 = _2776 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2777)
                {
                    frontier_phi_61_pred = _2761;
                    frontier_phi_61_pred_1 = _2766;
                    frontier_phi_61_pred_2 = _2765;
                    frontier_phi_61_pred_3 = _2764;
                    frontier_phi_61_pred_4 = _2763;
                    frontier_phi_61_pred_5 = _2762;
                }
                else
                {
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    uint _2891;
                    _2885 = _2761;
                    _2886 = _2762;
                    _2887 = _2763;
                    _2888 = _2764;
                    _2889 = _2765;
                    _2890 = _2766;
                    _2891 = _2776;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    for (;;)
                    {
                        uint _2895 = uint(findLSB(_2891)) + (_2767 << 5u);
                        uint _2892 = (_2891 + 4294967295u) & _2891;
                        uint _2897 = _2895 * 48u;
                        vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2897)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 3u)).x));
                        uint _2917 = (_2895 * 48u) + 4u;
                        vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2917)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 3u)).x));
                        uint _2936 = (_2895 * 48u) + 8u;
                        vec3 _2947 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x));
                        float _2951 = _2911.x - _2469;
                        float _2952 = _2911.y - _2470;
                        float _2953 = _2911.z - _2471;
                        float _2954 = dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953));
                        float _2957 = inversesqrt(_2954);
                        float _2958 = _2957 * _2951;
                        float _2959 = _2957 * _2952;
                        float _2960 = _2957 * _2953;
                        float _2961 = dot(vec3(_751, _754, _757), vec3(_2958, _2959, _2960));
                        float _2966 = 1.0 - (_2954 * _2911.w);
                        float _4287 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2967 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                        float _2968 = sqrt(_2954) * _2930.w;
                        float _2971 = 1.39999997615814208984375 / (_2968 + 1.39999997615814208984375);
                        float _2972 = _2971 * _2971;
                        float _2975 = ((1.0 - _2972) * _2961) + _2972;
                        float _2978 = _2968 * _2968;
                        float _2982 = ((isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0))) * _2967) / ((_2978 * 0.699999988079071044921875) + 1.0);
                        float _2986 = (-0.0) - _2469;
                        float _2987 = (-0.0) - _2470;
                        float _2988 = (-0.0) - _2471;
                        float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
                        float _2993 = _2992 * _2986;
                        float _2994 = _2992 * _2987;
                        float _2995 = _2992 * _2988;
                        float _3003 = exp2(log2(1.0 / ((_2978 * 3.5) + 5.0)) * 0.25);
                        float _3004 = 1.0 - _811;
                        float _3011 = sqrt(1.0 - ((1.0 - (_3004 * _3004)) * (1.0 - (_3003 * _3003))));
                        float _3012 = _3011 * _3011;
                        float _3013 = _3012 * _3012;
                        float _3014 = _2993 + _2958;
                        float _3015 = _2994 + _2959;
                        float _3016 = _2995 + _2960;
                        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                        float _3024 = dot(vec3(_751, _754, _757), vec3(_2993, _2994, _2995));
                        float _4303 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3027 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _3028 = dot(vec3(_751, _754, _757), vec3(_3020 * _3014, _3020 * _3015, _3020 * _3016));
                        float _4314 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3031 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _3035 = ((_3031 * _3031) * (_3013 + (-1.0))) + 1.0;
                        float _3036 = _2971 * _3012;
                        float _3037 = _3036 * _3036;
                        float _3040 = ((1.0 - _3037) * _2961) + _3037;
                        float _4325 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3041 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _3042 = 1.0 - _3012;
                        float _3052 = (0.5 / (((_3041 * ((_3027 * _3042) + _3012)) + 9.9999999392252902907785028219223e-09) + (((_3041 * _3042) + _3012) * _3027))) * _3041;
                        float _4336 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3062 = (((_3013 * 3.1415927410125732421875) * (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) / ((_3035 * _3035) * ((_2978 * 2.1991131305694580078125) + 3.141590118408203125))) * _2967;
                        _2820 = (_2982 * _2930.x) + _2888;
                        _2821 = (_2982 * _2930.y) + _2889;
                        _2822 = (_2982 * _2930.z) + _2890;
                        _2817 = (_3062 * _2947.x) + _2885;
                        _2818 = (_3062 * _2947.y) + _2886;
                        _2819 = (_3062 * _2947.z) + _2887;
                        if (_2892 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2885 = _2817;
                            _2886 = _2818;
                            _2887 = _2819;
                            _2888 = _2820;
                            _2889 = _2821;
                            _2890 = _2822;
                            _2891 = _2892;
                        }
                    }
                    frontier_phi_61_pred = _2817;
                    frontier_phi_61_pred_1 = _2822;
                    frontier_phi_61_pred_2 = _2821;
                    frontier_phi_61_pred_3 = _2820;
                    frontier_phi_61_pred_4 = _2819;
                    frontier_phi_61_pred_5 = _2818;
                }
                _2617 = frontier_phi_61_pred;
                _2627 = frontier_phi_61_pred_1;
                _2625 = frontier_phi_61_pred_2;
                _2623 = frontier_phi_61_pred_3;
                _2621 = frontier_phi_61_pred_4;
                _2619 = frontier_phi_61_pred_5;
                uint _2768 = _2767 + 1u;
                if (_2768 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2761 = _2617;
                    _2762 = _2619;
                    _2763 = _2621;
                    _2764 = _2623;
                    _2765 = _2625;
                    _2766 = _2627;
                    _2767 = _2768;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
        }
        uvec4 _2630 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2631 = _2630.z;
        uint _2633 = (_2631 >> 8u) & 15u;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        if (((4294967295u << _2633) & _2515) == 0u)
        {
            _2729 = _2616;
            _2731 = _2618;
            _2733 = _2620;
            _2735 = _2622;
            _2737 = _2624;
            _2739 = _2626;
        }
        else
        {
            float _2754 = inversesqrt(dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471)));
            float _2755 = _2754 * _2469;
            float _2756 = _2754 * _2470;
            float _2757 = _2754 * _2471;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2633 < ((_2631 >> 12u) & 15u))
            {
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2868 = _2616;
                float _2869 = _2618;
                float _2870 = _2620;
                float _2871 = _2622;
                float _2872 = _2624;
                float _2873 = _2626;
                uint _2874 = _2633;
                uint _2883;
                bool _2884;
                for (;;)
                {
                    _2883 = texelFetch(g_lightClassification, int((((_2509 << 5u) + (_2495 << 9u)) + (_2874 << 2u)) >> 2u)).x;
                    _2884 = _2883 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2884)
                    {
                        frontier_phi_67_pred = _2871;
                        frontier_phi_67_pred_1 = _2872;
                        frontier_phi_67_pred_2 = _2873;
                        frontier_phi_67_pred_3 = _2870;
                        frontier_phi_67_pred_4 = _2869;
                        frontier_phi_67_pred_5 = _2868;
                    }
                    else
                    {
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3080 = _2868;
                        float _3081 = _2869;
                        float _3082 = _2870;
                        float _3083 = _2871;
                        float _3084 = _2872;
                        float _3085 = _2873;
                        uint _3086 = _2883;
                        uint _3087;
                        vec4 _3112;
                        float _3113;
                        vec4 _3128;
                        vec3 _3140;
                        vec4 _3155;
                        vec4 _3171;
                        float _3217;
                        bool _3218;
                        for (;;)
                        {
                            uint _3097 = ((_2874 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3086));
                            _3087 = (_3086 + 4294967295u) & _3086;
                            uint _3099 = _3097 * 40u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            _3113 = _3112.w;
                            uint _3115 = (_3097 * 40u) + 4u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3130 = (_3097 * 40u) + 8u;
                            _3140 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x));
                            uint _3142 = (_3097 * 40u) + 16u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3158 = (_3097 * 40u) + 20u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3173 = (_3097 * 40u) + 24u;
                            vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3192 = (_3097 * 40u) + 28u;
                            vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            _3217 = fma(_2471, _3205.z, fma(_2470, _3205.y, _3205.x * _2469)) + _3205.w;
                            _3218 = !((fma(_2471, _3186.z, fma(_2470, _3186.y, _3186.x * _2469)) + _3186.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3218)
                            {
                                float _3245 = _3112.x - _2469;
                                float _3246 = _3112.y - _2470;
                                float _3247 = _3112.z - _2471;
                                float _3248 = dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247));
                                float _3251 = inversesqrt(_3248);
                                float _3252 = _3251 * _3245;
                                float _3253 = _3251 * _3246;
                                float _3254 = _3251 * _3247;
                                float _3258 = 1.0 - (_3248 / (_3113 * _3113));
                                float _4347 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3263 = sqrt(_3248) * _3128.w;
                                float _3265 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                                float _3266 = _3265 * _3265;
                                float _3269 = ((1.0 - _3266) * dot(vec3(_3252, _3253, _3254), vec3(_751, _754, _757))) + _3266;
                                float _3272 = _3263 * _3263;
                                float _3276 = (fma(_2471, _3155.z, fma(_2470, _3155.y, _3155.x * _2469)) + _3155.w) / _3217;
                                float _3277 = (fma(_2471, _3171.z, fma(_2470, _3171.y, _3171.x * _2469)) + _3171.w) / _3217;
                                float _3281 = 1.0 - dot(vec2(_3276, _3277), vec2(_3276, _3277));
                                float _4363 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3282 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3283 = _3282 * (((isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0))) * _3259) / ((_3272 * 0.699999988079071044921875) + 1.0));
                                float _3295 = exp2(log2(1.0 / ((_3272 * 3.5) + 5.0)) * 0.25);
                                float _3296 = 1.0 - _811;
                                float _3303 = sqrt(1.0 - ((1.0 - (_3296 * _3296)) * (1.0 - (_3295 * _3295))));
                                float _3304 = _3303 * _3303;
                                float _3305 = _3304 * _3304;
                                float _3306 = _3252 - _2755;
                                float _3307 = _3253 - _2756;
                                float _3308 = _3254 - _2757;
                                float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                                float _3316 = dot(vec3(_751, _754, _757), vec3((-0.0) - _2755, (-0.0) - _2756, (-0.0) - _2757));
                                float _4374 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3319 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3320 = dot(vec3(_751, _754, _757), vec3(_3312 * _3306, _3312 * _3307, _3312 * _3308));
                                float _4385 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3323 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3327 = ((_3323 * _3323) * (_3305 + (-1.0))) + 1.0;
                                float _3328 = _3265 * _3304;
                                float _3329 = _3328 * _3328;
                                float _3335 = ((1.0 - _3329) * dot(vec3(_751, _754, _757), vec3(_3252, _3253, _3254))) + _3329;
                                float _4396 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3337 = 1.0 - _3304;
                                float _3347 = (0.5 / (((_3336 * ((_3319 * _3337) + _3304)) + 9.9999999392252902907785028219223e-09) + (((_3336 * _3337) + _3304) * _3319))) * _3336;
                                float _4407 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3357 = (_3282 * _3259) * (((_3305 * 3.1415927410125732421875) * (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) / ((_3327 * _3327) * ((_3272 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3357 * _3140.x;
                                frontier_phi_73_pred_1 = _3357 * _3140.y;
                                frontier_phi_73_pred_2 = _3283 * _3128.z;
                                frontier_phi_73_pred_3 = _3283 * _3128.y;
                                frontier_phi_73_pred_4 = _3283 * _3128.x;
                                frontier_phi_73_pred_5 = _3357 * _3140.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3361 = frontier_phi_73_pred;
                            _3362 = frontier_phi_73_pred_1;
                            _3366 = frontier_phi_73_pred_2;
                            _3365 = frontier_phi_73_pred_3;
                            _3364 = frontier_phi_73_pred_4;
                            _3363 = frontier_phi_73_pred_5;
                            _3070 = _3364 + _3083;
                            _3071 = _3365 + _3084;
                            _3072 = _3366 + _3085;
                            _3067 = _3361 + _3080;
                            _3068 = _3362 + _3081;
                            _3069 = _3363 + _3082;
                            if (_3087 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3087;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3070;
                        frontier_phi_67_pred_1 = _3071;
                        frontier_phi_67_pred_2 = _3072;
                        frontier_phi_67_pred_3 = _3069;
                        frontier_phi_67_pred_4 = _3068;
                        frontier_phi_67_pred_5 = _3067;
                    }
                    _2736 = frontier_phi_67_pred;
                    _2738 = frontier_phi_67_pred_1;
                    _2740 = frontier_phi_67_pred_2;
                    _2734 = frontier_phi_67_pred_3;
                    _2732 = frontier_phi_67_pred_4;
                    _2730 = frontier_phi_67_pred_5;
                    uint _2875 = _2874 + 1u;
                    if (_2875 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2868 = _2730;
                        _2869 = _2732;
                        _2870 = _2734;
                        _2871 = _2736;
                        _2872 = _2738;
                        _2873 = _2740;
                        _2874 = _2875;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2738;
                frontier_phi_55_56_ladder_1 = _2740;
                frontier_phi_55_56_ladder_2 = _2736;
                frontier_phi_55_56_ladder_3 = _2734;
                frontier_phi_55_56_ladder_4 = _2732;
                frontier_phi_55_56_ladder_5 = _2730;
            }
            else
            {
                frontier_phi_55_56_ladder = _2624;
                frontier_phi_55_56_ladder_1 = _2626;
                frontier_phi_55_56_ladder_2 = _2622;
                frontier_phi_55_56_ladder_3 = _2620;
                frontier_phi_55_56_ladder_4 = _2618;
                frontier_phi_55_56_ladder_5 = _2616;
            }
            _2729 = frontier_phi_55_56_ladder_5;
            _2731 = frontier_phi_55_56_ladder_4;
            _2733 = frontier_phi_55_56_ladder_3;
            _2735 = frontier_phi_55_56_ladder_2;
            _2737 = frontier_phi_55_56_ladder;
            _2739 = frontier_phi_55_56_ladder_1;
        }
        float _2744 = isnan(1.0) ? _795 : (isnan(_795) ? 1.0 : min(_795, 1.0));
        _2528 = (_2744 * _2735) + _1980;
        _2530 = (_2744 * _2737) + _1982;
        _2532 = (_2744 * _2739) + _1984;
        _2534 = ((_2729 * 0.039999999105930328369140625) * _2744) + _2313;
        _2536 = ((_2731 * 0.039999999105930328369140625) * _2744) + _2315;
        _2538 = ((_2733 * 0.039999999105930328369140625) * _2744) + _2317;
    }
    else
    {
        _2528 = _1980;
        _2530 = _1982;
        _2532 = _1984;
        _2534 = _2313;
        _2536 = _2315;
        _2538 = _2317;
    }
    float _4423 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4434 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4445 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    uint _2558 = _241 + 6u;
    float _2566 = _732 / cbSceneParam._m0[86u].x;
    float _2567 = _733 / cbSceneParam._m0[86u].y;
    vec4 _2581 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2566, _2567, (log2((isnan(cbSceneParam._m0[77u].w) ? _666 : (isnan(_666) ? cbSceneParam._m0[77u].w : min(_666, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2583 = _2581.x;
    float _2584 = _2581.y;
    float _2585 = _2581.z;
    float _2586 = _2581.w;
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    if (_666 > cbSceneParam._m0[78u].w)
    {
        float _2641 = isnan(_666) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _666 : min(cbSceneParam._m0[80u].w, _666));
        float _2642 = _2641 / _666;
        float _2653 = _2642 * _717;
        float _2654 = _718 * _2642;
        float _2655 = (-0.0) - _2654;
        float _2657 = _2642 * _719;
        float _2659 = (cbSceneParam._m0[77u].w * _2655) / _2641;
        float _2660 = _2659 + cbSceneParam._m0[79u].w;
        float _2661 = cbSceneParam._m0[79u].w - _2654;
        float _2667 = sqrt(((_2653 * _2653) + (_2654 * _2654)) + (_2657 * _2657));
        float _2670 = (1.0 - (cbSceneParam._m0[77u].w / _2641)) * _2667;
        float _2675 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2677 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2830;
        if (abs((_2655 - _2659) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2830 = ((((_2660 > 0.0) ? exp2(_2675 * _2660) : (2.0 - exp2(_2677 * _2660))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2670;
        }
        else
        {
            float _2790 = 1.0 / cbSceneParam._m0[80u].x;
            float _2791 = isnan(_2661) ? _2660 : (isnan(_2660) ? _2661 : max(_2660, _2661));
            float _2792 = isnan(_2661) ? _2660 : (isnan(_2660) ? _2661 : min(_2660, _2661));
            float _2801 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : min(_2791, 0.0));
            float _2802 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : min(_2792, 0.0));
            _2830 = ((abs(_2667 / _2655) * cbSceneParam._m0[80u].y) * ((((_2801 - _2802) * 2.0) - ((exp2(_2675 * (isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0)))) - exp2(_2675 * (isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0))))) * _2790)) - ((exp2(_2677 * _2801) - exp2(_2677 * _2802)) * _2790))) + (_2670 * cbSceneParam._m0[80u].z);
        }
        vec4 _2832 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2566, _2567, 1.0), 0.0);
        float _2841 = exp2((_2830 * (-1.44269502162933349609375)) * (1.0 - _2832.w));
        float _2842 = log2(_2841);
        float _2858 = log2(_2586);
        _2679 = (exp2(_2858 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].x)) * _2832.x) / cbSceneParam._m0[78u].x)) + _2583;
        _2681 = (exp2(_2858 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].y)) * _2832.y) / cbSceneParam._m0[78u].y)) + _2584;
        _2683 = (exp2(_2858 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].z)) * _2832.z) / cbSceneParam._m0[78u].z)) + _2585;
        _2685 = _2841 * _2586;
    }
    else
    {
        _2679 = _2583;
        _2681 = _2584;
        _2683 = _2585;
        _2685 = _2586;
    }
    float _2697 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2698 = _2697 == 3.0;
    float _2699 = log2(_2685);
    float _2706 = exp2(_2699 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2528 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _795))) + ((_2534 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1598)) * cbPerFrame._m0[3u].x));
    float _2707 = exp2(_2699 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2530 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _795))) + ((_2536 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1598)) * cbPerFrame._m0[3u].x));
    float _2708 = exp2(_2699 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2532 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _795))) + ((_2538 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1598)) * cbPerFrame._m0[3u].x));
    float _2717 = (_2697 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2717 * (_2698 ? _2706 : (_2706 + (cbSceneParam._m0[72u].w * _2679)));
    SV_Target.y = _2717 * (_2698 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2681)));
    SV_Target.z = _2717 * (_2698 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2683)));
    SV_Target.w = cbInstanceData._m0[_2558].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2558].w;
}


