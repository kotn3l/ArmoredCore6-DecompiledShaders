#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1073;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _244 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3381 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3392 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3403 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _259 = _254 + 1u;
    uint _263 = _254 + 2u;
    float _272 = sqrt(((cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x));
    float _273 = _272 * TEXCOORD.z;
    float _274 = _272 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _273) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _274) + cbTextureTilingScale._m0[13u].w));
    vec4 _311 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _316 = _311.x * cbMtdParam._m0[11u].x;
    float _317 = _311.y * cbMtdParam._m0[11u].y;
    float _318 = _311.z * cbMtdParam._m0[11u].z;
    vec4 _337 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _273) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _274) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _375 = _373.x;
    float _385 = dot(vec4(_375, _373.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _402 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_375 - _385) * cbMtdParam._m0[24u].x) + _385) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3414 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _410 = (_403 * ((_337.x * cbMtdParam._m0[12u].x) - _316)) + _316;
    float _411 = (_403 * ((_337.y * cbMtdParam._m0[12u].y) - _317)) + _317;
    float _412 = (_403 * ((_337.z * cbMtdParam._m0[12u].z) - _318)) + _318;
    float _416 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _287.x) * _410;
    float _419 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _287.y) * _411;
    float _422 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _287.z) * _412;
    float _429 = ((_410 - _416) * (isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0)))) + _416;
    float _430 = ((_411 - _419) * (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0)))) + _419;
    float _431 = ((_412 - _422) * (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0)))) + _422;
    vec4 _444 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _273) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _274) + cbTextureTilingScale._m0[20u].w));
    vec4 _469 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _273) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _274) + cbTextureTilingScale._m0[4u].w));
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _488 = _486.x;
    float _489 = _486.y;
    float _490 = _486.z;
    float _499 = ((_469.z - _490) * _403) + _490;
    float _502 = ((((_469.x - _488) * _403) + _488) * 2.0) + (-1.0);
    float _503 = ((((_469.y - _489) * _403) + _489) * 2.0) + (-1.0);
    float _504 = dot(vec2(_502, _503), vec2(_502, _503));
    float _3425 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _509 = sqrt(1.0 - (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))));
    float _514 = _502 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_444.x * 2.0) + (-1.0)));
    float _515 = _503 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_444.y * 2.0) + (-1.0)));
    vec4 _528 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _535 = (((_444.z - _499) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _499;
    float _537 = cbMtdParam._m0[22u].x + _528.w;
    float _540 = fma(_509, _220 * NORMAL.x, fma(_515, _227 * TANGENT.x, (_213 * _205) * _514));
    float _543 = fma(_509, _220 * NORMAL.y, fma(_515, _227 * TANGENT.y, (_213 * _206) * _514));
    float _546 = fma(_509, _220 * NORMAL.z, fma(_515, _227 * TANGENT.z, (_213 * _207) * _514));
    float _550 = inversesqrt(dot(vec3(_540, _543, _546), vec3(_540, _543, _546)));
    float _551 = _550 * _540;
    float _552 = _550 * _543;
    float _553 = _550 * _546;
    float _3436 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _554 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    float _3447 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3458 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3469 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3480 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _572 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _624 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _614);
    float _625 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _614);
    float _626 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _614);
    float _630 = inversesqrt(dot(vec3(_624, _625, _626), vec3(_624, _625, _626)));
    float _631 = _624 * _630;
    float _632 = _625 * _630;
    float _633 = _626 * _630;
    float _639 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _640 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _658 = fma(_553, cbSceneParam._m0[5u].z, fma(_552, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _551));
    float _661 = fma(_553, cbSceneParam._m0[6u].z, fma(_552, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _551));
    float _664 = fma(_553, cbSceneParam._m0[7u].z, fma(_552, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _551));
    uint _678 = (_254 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _684 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) * cbInstanceData._m0[_678].x;
    float _685 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0)))) * cbInstanceData._m0[_678].y;
    float _686 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0)))) * cbInstanceData._m0[_678].z;
    float _3491 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _687 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _688 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _3513 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _689 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    vec4 _698 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _639, cbSceneParam._m0[86u].y * _640));
    float _702 = ((isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * TEXCOORD_5.w) * _698.x;
    float _703 = dot(vec3(_551, _552, _553), vec3(_631, _632, _633));
    float _706 = _703 * 2.0;
    float _710 = (_706 * _551) - _631;
    float _711 = (_706 * _552) - _632;
    float _712 = (_706 * _553) - _633;
    float _716 = abs(dot(vec3(_631, _632, _633), vec3(_551, _552, _553)));
    float _3524 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _718 = sqrt(_554);
    float _731 = exp2((_718 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_718 * 3.0));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1072;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _797 = fma(_771, cbModelParam._m0[26u].z, fma(_767, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _763));
        float _801 = fma(_771, cbModelParam._m0[27u].z, fma(_767, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _763));
        float _805 = fma(_771, cbModelParam._m0[28u].z, fma(_767, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _763));
        float _830 = _763 + _551;
        float _831 = _767 + _552;
        float _832 = _771 + _553;
        float _842 = fma(_832, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _830)) - _797;
        float _843 = fma(_832, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _830)) - _801;
        float _844 = fma(_832, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _830)) - _805;
        float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
        float _861 = ((_848 * _842) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_797 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _862 = ((_848 * _843) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_801 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _863 = ((_848 * _844) / cbModelParam._m0[34u].z) + ((((((_805 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        float _900 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_866.x + (-0.5));
        float _902 = _900 * (_866.y + (-0.5));
        float _903 = _900 * (_866.z + (-0.5));
        float _910 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_873.x + (-0.5));
        float _912 = _910 * (_873.y + (-0.5));
        float _913 = _910 * (_873.z + (-0.5));
        float _920 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_880.x + (-0.5));
        float _922 = _920 * (_880.y + (-0.5));
        float _923 = _920 * (_880.z + (-0.5));
        float _930 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_887.x + (-0.5));
        float _932 = _930 * (_887.y + (-0.5));
        float _933 = _930 * (_887.z + (-0.5));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = _901 * 0.5;
        float _938 = _911 * 0.5;
        float _939 = _921 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _954 = (dot(vec3(_551, _552, _553), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3550 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _964 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3561 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3572 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * (_966 + 1.0))) + _971) * _934;
        float _981 = _902 * 0.5;
        float _982 = _912 * 0.5;
        float _983 = _922 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_551, _552, _553), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3583 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3594 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3605 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_1008 + 1.0))) + _1013) * _935;
        float _1023 = _903 * 0.5;
        float _1024 = _913 * 0.5;
        float _1025 = _923 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_551, _552, _553), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3616 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3627 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3638 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_1050 + 1.0))) + _1055) * _936;
        _1072 = _903;
        _1074 = _902;
        _1075 = _901;
        _1076 = _913;
        _1077 = _912;
        _1078 = _911;
        _1079 = _923;
        _1080 = _922;
        _1081 = _921;
        _1082 = _936;
        _1083 = _935;
        _1084 = _934;
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
        _1086 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1087 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
    }
    else
    {
        _1072 = _1073;
        _1074 = _1073;
        _1075 = _1073;
        _1076 = _1073;
        _1077 = _1073;
        _1078 = _1073;
        _1079 = _1073;
        _1080 = _1073;
        _1081 = _1073;
        _1082 = _1073;
        _1083 = _1073;
        _1084 = _1073;
        _1085 = 0.0;
        _1086 = 0.0;
        _1087 = 0.0;
    }
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1112 = fma(_771, cbModelParam._m0[30u].z, fma(_767, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _763));
        float _1116 = fma(_771, cbModelParam._m0[31u].z, fma(_767, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _763));
        float _1120 = fma(_771, cbModelParam._m0[32u].z, fma(_767, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _763));
        float _1143 = _763 + _551;
        float _1144 = _767 + _552;
        float _1145 = _771 + _553;
        float _1155 = fma(_1145, cbModelParam._m0[30u].z, fma(_1144, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1143)) - _1112;
        float _1156 = fma(_1145, cbModelParam._m0[31u].z, fma(_1144, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1143)) - _1116;
        float _1157 = fma(_1145, cbModelParam._m0[32u].z, fma(_1144, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1143)) - _1120;
        float _1161 = inversesqrt(dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157)));
        float _1174 = ((_1161 * _1155) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1112 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1161 * _1156) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1116 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1161 * _1157) / cbModelParam._m0[35u].z) + ((((((_1120 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        float _1211 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1178.x + (-0.5));
        float _1213 = _1211 * (_1178.y + (-0.5));
        float _1214 = _1211 * (_1178.z + (-0.5));
        float _1221 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1185.x + (-0.5));
        float _1223 = _1221 * (_1185.y + (-0.5));
        float _1224 = _1221 * (_1185.z + (-0.5));
        float _1231 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1192.x + (-0.5));
        float _1233 = _1231 * (_1192.y + (-0.5));
        float _1234 = _1231 * (_1192.z + (-0.5));
        float _1241 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1199.x + (-0.5));
        float _1243 = _1241 * (_1199.y + (-0.5));
        float _1244 = _1241 * (_1199.z + (-0.5));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = _1212 * 0.5;
        float _1249 = _1222 * 0.5;
        float _1250 = _1232 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_551, _552, _553), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3701 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1275 + 1.0))) + _1280) * _1245;
        float _1290 = _1213 * 0.5;
        float _1291 = _1223 * 0.5;
        float _1292 = _1233 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_551, _552, _553), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _3734 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1317 + 1.0))) + _1322) * _1246;
        float _1332 = _1214 * 0.5;
        float _1333 = _1224 * 0.5;
        float _1334 = _1234 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_551, _552, _553), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _3767 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1359 + 1.0))) + _1364) * _1247;
        _1381 = _1214;
        _1382 = _1213;
        _1383 = _1212;
        _1384 = _1224;
        _1385 = _1223;
        _1386 = _1222;
        _1387 = _1234;
        _1388 = _1233;
        _1389 = _1232;
        _1390 = _1247;
        _1391 = _1246;
        _1392 = _1245;
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
    }
    else
    {
        _1381 = _1073;
        _1382 = _1073;
        _1383 = _1073;
        _1384 = _1073;
        _1385 = _1073;
        _1386 = _1073;
        _1387 = _1073;
        _1388 = _1073;
        _1389 = _1073;
        _1390 = _1073;
        _1391 = _1073;
        _1392 = _1073;
        _1393 = 0.0;
        _1394 = 0.0;
        _1395 = 0.0;
    }
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1085)) + _1085;
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1086)) + _1086;
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1087)) + _1087;
    float _1428 = fma(_1407, cbSceneParam._m0[89u].z, fma(_1406, cbSceneParam._m0[89u].y, _1405 * cbSceneParam._m0[89u].x));
    float _1431 = fma(_1407, cbSceneParam._m0[90u].z, fma(_1406, cbSceneParam._m0[90u].y, _1405 * cbSceneParam._m0[90u].x));
    float _1434 = fma(_1407, cbSceneParam._m0[91u].z, fma(_1406, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1405));
    float _1449 = _710 * 0.5;
    float _1450 = _711 * 0.5;
    float _1451 = _712 * 0.5;
    float _1452 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1455 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1458 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1492;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1465 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1072, _1076, _1079, _1082));
        float _1469 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1074, _1077, _1080, _1083));
        float _1473 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1075, _1078, _1081, _1084));
        float _1480 = dot(vec4(cbModelParam._m0[39u]), vec4(_1449, _1450, _1451, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1480) ? 0.0 : (isnan(0.0) ? _1480 : max(0.0, _1480))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1503;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1494 = dot(vec4(cbModelParam._m0[40u]), vec4(_1449, _1450, _1451, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1494) ? 0.0 : (isnan(0.0) ? _1494 : max(0.0, _1494))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1507 = (_1503 * cbModelParam._m0[1u].x) + (_1492 * (1.0 - cbModelParam._m0[1u].x));
    float _1517 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _554);
    float _1518 = isnan(_1517) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1517 : min(cbModelParam._m0[25u].z, _1517));
    float _1600;
    float _1602;
    float _1604;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1567 = fma(_771, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763)) + cbModelParam._m0[13u].w;
        float _1571 = fma(_771, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763)) + cbModelParam._m0[14u].w;
        float _1575 = fma(_771, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763)) + cbModelParam._m0[15u].w;
        float _1578 = fma(_712, cbModelParam._m0[13u].z, fma(_711, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _710));
        float _1581 = fma(_712, cbModelParam._m0[14u].z, fma(_711, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _710));
        float _1584 = fma(_712, cbModelParam._m0[15u].z, fma(_711, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _710));
        float _1612;
        if (_1578 > 0.0)
        {
            _1612 = abs((1.0 - _1567) / _1578);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1567 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1612 = frontier_phi_14_12_ladder;
        }
        float _1814;
        if (_1581 > 0.0)
        {
            _1814 = abs((1.0 - _1571) / _1581);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1571 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1814 = frontier_phi_23_19_ladder;
        }
        float _2057;
        if (_1584 > 0.0)
        {
            _2057 = abs((1.0 - _1575) / _1584);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1575 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2057 = frontier_phi_35_30_ladder;
        }
        float _2059 = isnan(_1814) ? _1612 : (isnan(_1612) ? _1814 : min(_1612, _1814));
        float _2060 = isnan(_2057) ? _2059 : (isnan(_2059) ? _2057 : min(_2059, _2057));
        float _2064 = (_2060 * _1578) + _1567;
        float _2065 = (_2060 * _1581) + _1571;
        float _2066 = (_2060 * _1584) + _1575;
        float _2067 = _2060 * 9.9999997473787516355514526367188e-05;
        float _2069 = (-1.0) - _2067;
        float _2071 = _2067 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2066 > _2071) || ((_2066 < _2069) || ((_2065 > _2071) || ((_2065 < _2069) || ((_2064 < _2069) || (_2064 > _2071))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2190 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2066, cbModelParam._m0[9u].z, fma(_2065, cbModelParam._m0[9u].y, _2064 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2066, cbModelParam._m0[10u].z, fma(_2065, cbModelParam._m0[10u].y, _2064 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2066, cbModelParam._m0[11u].z, fma(_2065, cbModelParam._m0[11u].y, _2064 * cbModelParam._m0[11u].x))), _1518);
            frontier_phi_13_35_ladder = _2190.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2190.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2190.x * cbModelParam._m0[1u].y;
        }
        _1600 = frontier_phi_13_35_ladder_2;
        _1602 = frontier_phi_13_35_ladder_1;
        _1604 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1588 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_710, _711, _712), _1518);
        _1600 = _1588.x * cbModelParam._m0[1u].y;
        _1602 = _1588.y * cbModelParam._m0[1u].y;
        _1604 = _1588.z * cbModelParam._m0[1u].y;
    }
    float _1608 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _554);
    float _1609 = isnan(_1608) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1608 : min(cbModelParam._m0[25u].w, _1608));
    float _1700;
    float _1702;
    float _1704;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1664 = fma(_771, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763)) + cbModelParam._m0[21u].w;
        float _1668 = fma(_771, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763)) + cbModelParam._m0[22u].w;
        float _1672 = fma(_771, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763)) + cbModelParam._m0[23u].w;
        float _1675 = fma(_712, cbModelParam._m0[21u].z, fma(_711, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _710));
        float _1678 = fma(_712, cbModelParam._m0[22u].z, fma(_711, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _710));
        float _1681 = fma(_712, cbModelParam._m0[23u].z, fma(_711, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _710));
        float _1819;
        if (_1675 > 0.0)
        {
            _1819 = abs((1.0 - _1664) / _1675);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1664 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1819 = frontier_phi_25_21_ladder;
        }
        float _2084;
        if (_1678 > 0.0)
        {
            _2084 = abs((1.0 - _1668) / _1678);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1668 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2084 = frontier_phi_37_32_ladder;
        }
        float _2289;
        if (_1681 > 0.0)
        {
            _2289 = abs((1.0 - _1672) / _1681);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1672 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2289 = frontier_phi_46_43_ladder;
        }
        float _2291 = isnan(_2084) ? _1819 : (isnan(_1819) ? _2084 : min(_1819, _2084));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1675) + _1664;
        float _2297 = (_2292 * _1678) + _1668;
        float _2298 = (_2292 * _1681) + _1672;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2299;
        float _2302 = _2299 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2298 > _2302) || ((_2298 < _2300) || ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 < _2300) || (_2296 > _2302))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2497 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2298, cbModelParam._m0[17u].z, fma(_2297, cbModelParam._m0[17u].y, _2296 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2298, cbModelParam._m0[18u].z, fma(_2297, cbModelParam._m0[18u].y, _2296 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2298, cbModelParam._m0[19u].z, fma(_2297, cbModelParam._m0[19u].y, _2296 * cbModelParam._m0[19u].x))), _1609);
            frontier_phi_22_46_ladder = _2497.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2497.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2497.x * cbModelParam._m0[1u].z;
        }
        _1700 = frontier_phi_22_46_ladder_2;
        _1702 = frontier_phi_22_46_ladder_1;
        _1704 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1684 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_710, _711, _712), _1609);
        _1700 = _1684.x * cbModelParam._m0[1u].z;
        _1702 = _1684.y * cbModelParam._m0[1u].z;
        _1704 = _1684.z * cbModelParam._m0[1u].z;
    }
    float _1716 = ((((1.0 - _731) * ((_718 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_731 * _718)) * _702;
    float _1717 = _1716 * ((cbModelParam._m0[1u].w * (_1700 - _1600)) + _1600);
    float _1718 = _1716 * ((cbModelParam._m0[1u].w * (_1702 - _1602)) + _1602);
    float _1719 = _1716 * ((cbModelParam._m0[1u].w * (_1704 - _1604)) + _1604);
    float _1722 = fma(_1719, cbSceneParam._m0[89u].z, fma(_1718, cbSceneParam._m0[89u].y, _1717 * cbSceneParam._m0[89u].x));
    float _1725 = fma(_1719, cbSceneParam._m0[90u].z, fma(_1718, cbSceneParam._m0[90u].y, _1717 * cbSceneParam._m0[90u].x));
    float _1728 = fma(_1719, cbSceneParam._m0[91u].z, fma(_1718, cbSceneParam._m0[91u].y, _1717 * cbSceneParam._m0[91u].x));
    uvec4 _1738 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _1740 = _1738.x * 14u;
    uint _1741 = _1740 + 13u;
    float _1748 = _702 + (-1.0);
    float _1753 = (cbLight._m0[_1741].x * _1748) + 1.0;
    float _1754 = (cbLight._m0[_1741].y * _1748) + 1.0;
    float _1755 = (cbLight._m0[_1741].z * _1748) + 1.0;
    float _1756 = (cbLight._m0[_1741].w * _1748) + 1.0;
    uint _1757 = _1740 + 5u;
    float _1763 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
    uint _1767 = _1740 + 4u;
    float _1773 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
    uint _1777 = _1740 | 1u;
    float _1788 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_551, _552, _553));
    float _1791 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_551, _552, _553));
    float _3903 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _3914 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1796 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 0.3183098733425140380859375;
    float _1798 = (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * 0.3183098733425140380859375;
    float _1805 = ((cbLight._m0[_1757].x * _1763) * _1798) + ((cbLight._m0[_1767].x * _1773) * _1796);
    float _1806 = ((_1763 * cbLight._m0[_1757].y) * _1798) + ((_1773 * cbLight._m0[_1767].y) * _1796);
    float _1807 = ((_1763 * cbLight._m0[_1757].z) * _1798) + ((_1773 * cbLight._m0[_1767].z) * _1796);
    uvec4 _1811 = floatBitsToUint(cbLight._m0[_1740 + 12u]);
    bool _1813 = _1811.x == 0u;
    float _1824;
    float _1826;
    float _1828;
    if (_1813)
    {
        _1824 = _1805;
        _1826 = _1806;
        _1828 = _1807;
    }
    else
    {
        uint _1832 = _1740 + 6u;
        float _1848 = (dot(vec3(cbLight._m0[_1740 + 2u].xyz), vec3(_551, _552, _553)) * 0.5) + 0.5;
        float _1849 = _1848 * _1848;
        float _3925 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1851 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _1824 = (((cbLight._m0[_1832].x * 0.3183098733425140380859375) * _1850) * _1851) + _1805;
        _1826 = (((cbLight._m0[_1832].y * 0.3183098733425140380859375) * _1850) * _1851) + _1806;
        _1828 = (((cbLight._m0[_1832].z * 0.3183098733425140380859375) * _1850) * _1851) + _1807;
    }
    bool _1831 = _1811.y == 0u;
    float _1869;
    float _1871;
    float _1873;
    if (_1831)
    {
        _1869 = _1824;
        _1871 = _1826;
        _1873 = _1828;
    }
    else
    {
        uint _2028 = _1740 + 7u;
        float _2044 = (dot(vec3(cbLight._m0[_1740 + 3u].xyz), vec3(_551, _552, _553)) * 0.5) + 0.5;
        float _2045 = _2044 * _2044;
        float _3941 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _2047 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _1869 = (((cbLight._m0[_2028].x * 0.3183098733425140380859375) * _2046) * _2047) + _1824;
        _1871 = (((cbLight._m0[_2028].y * 0.3183098733425140380859375) * _2046) * _2047) + _1826;
        _1873 = (((cbLight._m0[_2028].z * 0.3183098733425140380859375) * _2046) * _2047) + _1828;
    }
    uint _1876 = _1740 + 8u;
    float _1889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1740].w)) * _554) * 0.949999988079071044921875);
    float _1890 = _1889 * _1889;
    float _1891 = cbLight._m0[_1740].x + _631;
    float _1892 = cbLight._m0[_1740].y + _632;
    float _1893 = cbLight._m0[_1740].z + _633;
    float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
    float _1898 = _1897 * _1891;
    float _1899 = _1897 * _1892;
    float _1900 = _1897 * _1893;
    float _1901 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_1740].xyz));
    float _3957 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _1905 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _1906 = dot(vec3(_551, _552, _553), vec3(_1898, _1899, _1900));
    float _3979 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _1910 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_1898, _1899, _1900));
    float _3990 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1914 = _1890 * _1890;
    float _1918 = ((_1909 * _1909) * (_1914 + (-1.0))) + 1.0;
    float _1929 = (exp2(log2(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1930 = 1.0 - _1890;
    float _1941 = (0.5 / (((_1905 * ((_1904 * _1930) + _1890)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _1930) + _1890) * _1904))) * _1904;
    float _4001 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1943 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1914 / ((_1918 * _1918) * 3.141590118408203125));
    uint _1954 = _1740 + 9u;
    float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1777].w)) * _554) * 0.949999988079071044921875);
    float _1966 = _1965 * _1965;
    float _1967 = cbLight._m0[_1777].x + _631;
    float _1968 = cbLight._m0[_1777].y + _632;
    float _1969 = cbLight._m0[_1777].z + _633;
    float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
    float _1974 = _1973 * _1967;
    float _1975 = _1973 * _1968;
    float _1976 = _1973 * _1969;
    float _1977 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_1777].xyz));
    float _4012 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _1981 = dot(vec3(_551, _552, _553), vec3(_1974, _1975, _1976));
    float _4023 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _1985 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_1974, _1975, _1976));
    float _4034 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1989 = _1966 * _1966;
    float _1993 = ((_1984 * _1984) * (_1989 + (-1.0))) + 1.0;
    float _2002 = (exp2(log2(1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2003 = 1.0 - _1966;
    float _2013 = (0.5 / (((_1905 * ((_1980 * _2003) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _2003) + _1966) * _1980))) * _1980;
    float _4045 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2015 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1989 / ((_1993 * _1993) * 3.141590118408203125));
    float _2025 = (((_2002 * cbLight._m0[_1954].x) * _2015) * _1763) + (((_1929 * cbLight._m0[_1876].x) * _1943) * _1773);
    float _2026 = (((_2002 * cbLight._m0[_1954].y) * _2015) * _1763) + (((_1929 * cbLight._m0[_1876].y) * _1943) * _1773);
    float _2027 = (((_2002 * cbLight._m0[_1954].z) * _2015) * _1763) + (((_1929 * cbLight._m0[_1876].z) * _1943) * _1773);
    float _2089;
    float _2091;
    float _2093;
    if (_1813)
    {
        _2089 = _2025;
        _2091 = _2026;
        _2093 = _2027;
    }
    else
    {
        uint _2095 = _1740 + 2u;
        uint _2099 = _1740 + 10u;
        float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _554) * 0.949999988079071044921875);
        float _2114 = _2113 * _2113;
        float _2115 = cbLight._m0[_2095].x + _631;
        float _2116 = cbLight._m0[_2095].y + _632;
        float _2117 = cbLight._m0[_2095].z + _633;
        float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
        float _2122 = _2121 * _2115;
        float _2123 = _2121 * _2116;
        float _2124 = _2121 * _2117;
        float _2125 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_2095].xyz));
        float _4056 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _2129 = dot(vec3(_551, _552, _553), vec3(_2122, _2123, _2124));
        float _4067 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _2133 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2122, _2123, _2124));
        float _4078 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2137 = _2114 * _2114;
        float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
        float _2150 = (exp2(log2(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2151 = 1.0 - _2114;
        float _2161 = (0.5 / (((_1905 * ((_2128 * _2151) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _2151) + _2114) * _2128))) * _2128;
        float _4089 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2163 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
        float _2164 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _2089 = (((_2150 * cbLight._m0[_2099].x) * _2163) * _2164) + _2025;
        _2091 = (((_2150 * cbLight._m0[_2099].y) * _2163) * _2164) + _2026;
        _2093 = (((_2150 * cbLight._m0[_2099].z) * _2163) * _2164) + _2027;
    }
    float _2199;
    float _2201;
    float _2203;
    if (_1831)
    {
        _2199 = _2089;
        _2201 = _2091;
        _2203 = _2093;
    }
    else
    {
        uint _2210 = _1740 + 3u;
        uint _2214 = _1740 + 11u;
        float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _554) * 0.949999988079071044921875);
        float _2229 = _2228 * _2228;
        float _2230 = cbLight._m0[_2210].x + _631;
        float _2231 = cbLight._m0[_2210].y + _632;
        float _2232 = cbLight._m0[_2210].z + _633;
        float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
        float _2237 = _2236 * _2230;
        float _2238 = _2236 * _2231;
        float _2239 = _2236 * _2232;
        float _2240 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_2210].xyz));
        float _4105 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2244 = dot(vec3(_551, _552, _553), vec3(_2237, _2238, _2239));
        float _4116 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _2248 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2237, _2238, _2239));
        float _4127 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2252 = _2229 * _2229;
        float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
        float _2265 = (exp2(log2(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2266 = 1.0 - _2229;
        float _2276 = (0.5 / (((_1905 * ((_2243 * _2266) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_1905 * _2266) + _2229) * _2243))) * _2243;
        float _4138 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2278 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
        float _2279 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _2199 = (((_2265 * cbLight._m0[_2214].x) * _2278) * _2279) + _2089;
        _2201 = (((_2265 * cbLight._m0[_2214].y) * _2278) * _2279) + _2091;
        _2203 = (((_2265 * cbLight._m0[_2214].z) * _2278) * _2279) + _2093;
    }
    float _2414;
    float _2416;
    float _2418;
    float _2420;
    float _2422;
    float _2424;
    if (_1738.y == 0u)
    {
        float _2354 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2355 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2354;
        float _2356 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2354;
        float _2357 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2354;
        uvec4 _2369 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2370 = _2369.x;
        uint _2381 = uint((float(_2369.y) * floor(float(uint(cbSceneParam._m0[85u].y * _640) / _2370))) + floor(float(uint(cbSceneParam._m0[85u].x * _639) / _2370)));
        float _2391 = (log2(_2357 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2392 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        uint _2395 = uint(isnan(14.0) ? _2392 : (isnan(_2392) ? 14.0 : min(_2392, 14.0)));
        uvec4 _2400 = texelFetch(g_lightClusterGridBuffer, int(((_2395 << 2u) + (_2381 << 6u)) >> 2u));
        uint _2401 = _2400.x;
        uint _2402 = _2369.z;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        if (((((1u << ((_2402 >> 4u) & 15u)) + 4294967295u) & _2401) == 0u) || ((_2402 & 240u) == 0u))
        {
            _2502 = 0.0;
            _2504 = 0.0;
            _2506 = 0.0;
            _2508 = 0.0;
            _2510 = 0.0;
            _2512 = 0.0;
        }
        else
        {
            float _2503;
            float _2505;
            float _2507;
            float _2509;
            float _2511;
            float _2513;
            float _2647 = 0.0;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            uint _2653 = 0u;
            uint _2662;
            bool _2663;
            for (;;)
            {
                _2662 = texelFetch(g_lightClassification, int((((_2395 << 5u) + (_2381 << 9u)) + (_2653 << 2u)) >> 2u)).x;
                _2663 = _2662 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2663)
                {
                    frontier_phi_61_pred = _2647;
                    frontier_phi_61_pred_1 = _2652;
                    frontier_phi_61_pred_2 = _2651;
                    frontier_phi_61_pred_3 = _2650;
                    frontier_phi_61_pred_4 = _2649;
                    frontier_phi_61_pred_5 = _2648;
                }
                else
                {
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    uint _2777;
                    _2771 = _2647;
                    _2772 = _2648;
                    _2773 = _2649;
                    _2774 = _2650;
                    _2775 = _2651;
                    _2776 = _2652;
                    _2777 = _2662;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    for (;;)
                    {
                        uint _2781 = uint(findLSB(_2777)) + (_2653 << 5u);
                        uint _2778 = (_2777 + 4294967295u) & _2777;
                        uint _2783 = _2781 * 48u;
                        vec4 _2797 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2783)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 3u)).x));
                        uint _2803 = (_2781 * 48u) + 4u;
                        vec4 _2816 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2803)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 3u)).x));
                        uint _2822 = (_2781 * 48u) + 8u;
                        vec3 _2833 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2822)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 2u)).x));
                        float _2837 = _2797.x - _2355;
                        float _2838 = _2797.y - _2356;
                        float _2839 = _2797.z - _2357;
                        float _2840 = dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839));
                        float _2843 = inversesqrt(_2840);
                        float _2844 = _2843 * _2837;
                        float _2845 = _2843 * _2838;
                        float _2846 = _2843 * _2839;
                        float _2847 = dot(vec3(_658, _661, _664), vec3(_2844, _2845, _2846));
                        float _2852 = 1.0 - (_2840 * _2797.w);
                        float _4164 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2853 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                        float _2854 = sqrt(_2840) * _2816.w;
                        float _2857 = 1.39999997615814208984375 / (_2854 + 1.39999997615814208984375);
                        float _2858 = _2857 * _2857;
                        float _2861 = ((1.0 - _2858) * _2847) + _2858;
                        float _2864 = _2854 * _2854;
                        float _2868 = ((isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0))) * _2853) / ((_2864 * 0.699999988079071044921875) + 1.0);
                        float _2872 = (-0.0) - _2355;
                        float _2873 = (-0.0) - _2356;
                        float _2874 = (-0.0) - _2357;
                        float _2878 = inversesqrt(dot(vec3(_2872, _2873, _2874), vec3(_2872, _2873, _2874)));
                        float _2879 = _2878 * _2872;
                        float _2880 = _2878 * _2873;
                        float _2881 = _2878 * _2874;
                        float _2889 = exp2(log2(1.0 / ((_2864 * 3.5) + 5.0)) * 0.25);
                        float _2890 = 1.0 - _718;
                        float _2897 = sqrt(1.0 - ((1.0 - (_2890 * _2890)) * (1.0 - (_2889 * _2889))));
                        float _2898 = _2897 * _2897;
                        float _2899 = _2898 * _2898;
                        float _2900 = _2879 + _2844;
                        float _2901 = _2880 + _2845;
                        float _2902 = _2881 + _2846;
                        float _2906 = inversesqrt(dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902)));
                        float _2910 = dot(vec3(_658, _661, _664), vec3(_2879, _2880, _2881));
                        float _4180 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                        float _2913 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                        float _2914 = dot(vec3(_658, _661, _664), vec3(_2906 * _2900, _2906 * _2901, _2906 * _2902));
                        float _4191 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2917 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                        float _2921 = ((_2917 * _2917) * (_2899 + (-1.0))) + 1.0;
                        float _2922 = _2857 * _2898;
                        float _2923 = _2922 * _2922;
                        float _2926 = ((1.0 - _2923) * _2847) + _2923;
                        float _4202 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2927 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                        float _2928 = 1.0 - _2898;
                        float _2938 = (0.5 / (((_2927 * ((_2913 * _2928) + _2898)) + 9.9999999392252902907785028219223e-09) + (((_2927 * _2928) + _2898) * _2913))) * _2927;
                        float _4213 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2949 = (((_2899 * 3.1415927410125732421875) * (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) / ((_2921 * _2921) * ((_2864 * 2.1991131305694580078125) + 3.141590118408203125))) * _2853;
                        _2706 = (_2868 * _2816.x) + _2774;
                        _2707 = (_2868 * _2816.y) + _2775;
                        _2708 = (_2868 * _2816.z) + _2776;
                        _2703 = (_2949 * _2833.x) + _2771;
                        _2704 = (_2949 * _2833.y) + _2772;
                        _2705 = (_2949 * _2833.z) + _2773;
                        if (_2778 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2771 = _2703;
                            _2772 = _2704;
                            _2773 = _2705;
                            _2774 = _2706;
                            _2775 = _2707;
                            _2776 = _2708;
                            _2777 = _2778;
                        }
                    }
                    frontier_phi_61_pred = _2703;
                    frontier_phi_61_pred_1 = _2708;
                    frontier_phi_61_pred_2 = _2707;
                    frontier_phi_61_pred_3 = _2706;
                    frontier_phi_61_pred_4 = _2705;
                    frontier_phi_61_pred_5 = _2704;
                }
                _2503 = frontier_phi_61_pred;
                _2513 = frontier_phi_61_pred_1;
                _2511 = frontier_phi_61_pred_2;
                _2509 = frontier_phi_61_pred_3;
                _2507 = frontier_phi_61_pred_4;
                _2505 = frontier_phi_61_pred_5;
                uint _2654 = _2653 + 1u;
                if (_2654 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2647 = _2503;
                    _2648 = _2505;
                    _2649 = _2507;
                    _2650 = _2509;
                    _2651 = _2511;
                    _2652 = _2513;
                    _2653 = _2654;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2502 = _2503;
            _2504 = _2505;
            _2506 = _2507;
            _2508 = _2509;
            _2510 = _2511;
            _2512 = _2513;
        }
        uvec4 _2516 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2517 = _2516.z;
        uint _2519 = (_2517 >> 8u) & 15u;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        if (((4294967295u << _2519) & _2401) == 0u)
        {
            _2615 = _2502;
            _2617 = _2504;
            _2619 = _2506;
            _2621 = _2508;
            _2623 = _2510;
            _2625 = _2512;
        }
        else
        {
            float _2640 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
            float _2641 = _2640 * _2355;
            float _2642 = _2640 * _2356;
            float _2643 = _2640 * _2357;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2519 < ((_2517 >> 12u) & 15u))
            {
                float _2616;
                float _2618;
                float _2620;
                float _2622;
                float _2624;
                float _2626;
                float _2754 = _2502;
                float _2755 = _2504;
                float _2756 = _2506;
                float _2757 = _2508;
                float _2758 = _2510;
                float _2759 = _2512;
                uint _2760 = _2519;
                uint _2769;
                bool _2770;
                for (;;)
                {
                    _2769 = texelFetch(g_lightClassification, int((((_2395 << 5u) + (_2381 << 9u)) + (_2760 << 2u)) >> 2u)).x;
                    _2770 = _2769 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2770)
                    {
                        frontier_phi_67_pred = _2757;
                        frontier_phi_67_pred_1 = _2758;
                        frontier_phi_67_pred_2 = _2759;
                        frontier_phi_67_pred_3 = _2756;
                        frontier_phi_67_pred_4 = _2755;
                        frontier_phi_67_pred_5 = _2754;
                    }
                    else
                    {
                        float _2954;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _2959;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _2967 = _2754;
                        float _2968 = _2755;
                        float _2969 = _2756;
                        float _2970 = _2757;
                        float _2971 = _2758;
                        float _2972 = _2759;
                        uint _2973 = _2769;
                        uint _2974;
                        vec4 _2999;
                        float _3000;
                        vec4 _3015;
                        vec3 _3027;
                        vec4 _3042;
                        vec4 _3057;
                        float _3103;
                        bool _3104;
                        for (;;)
                        {
                            uint _2984 = ((_2760 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2973));
                            _2974 = (_2973 + 4294967295u) & _2973;
                            uint _2986 = _2984 * 40u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            _3000 = _2999.w;
                            uint _3002 = (_2984 * 40u) + 4u;
                            _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3017 = (_2984 * 40u) + 8u;
                            _3027 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x));
                            uint _3029 = (_2984 * 40u) + 16u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3044 = (_2984 * 40u) + 20u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            uint _3059 = (_2984 * 40u) + 24u;
                            vec4 _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3078 = (_2984 * 40u) + 28u;
                            vec4 _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            _3103 = fma(_2357, _3091.z, fma(_2356, _3091.y, _3091.x * _2355)) + _3091.w;
                            _3104 = !((fma(_2357, _3072.z, fma(_2356, _3072.y, _3072.x * _2355)) + _3072.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3104)
                            {
                                float _3131 = _2999.x - _2355;
                                float _3132 = _2999.y - _2356;
                                float _3133 = _2999.z - _2357;
                                float _3134 = dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133));
                                float _3137 = inversesqrt(_3134);
                                float _3138 = _3137 * _3131;
                                float _3139 = _3137 * _3132;
                                float _3140 = _3137 * _3133;
                                float _3144 = 1.0 - (_3134 / (_3000 * _3000));
                                float _4224 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                                float _3145 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                                float _3149 = sqrt(_3134) * _3015.w;
                                float _3151 = 1.39999997615814208984375 / (_3149 + 1.39999997615814208984375);
                                float _3152 = _3151 * _3151;
                                float _3155 = ((1.0 - _3152) * dot(vec3(_3138, _3139, _3140), vec3(_658, _661, _664))) + _3152;
                                float _3158 = _3149 * _3149;
                                float _3162 = (fma(_2357, _3042.z, fma(_2356, _3042.y, _3042.x * _2355)) + _3042.w) / _3103;
                                float _3163 = (fma(_2357, _3057.z, fma(_2356, _3057.y, _3057.x * _2355)) + _3057.w) / _3103;
                                float _3167 = 1.0 - dot(vec2(_3162, _3163), vec2(_3162, _3163));
                                float _4240 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3168 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                                float _3169 = _3168 * (((isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0))) * _3145) / ((_3158 * 0.699999988079071044921875) + 1.0));
                                float _3181 = exp2(log2(1.0 / ((_3158 * 3.5) + 5.0)) * 0.25);
                                float _3182 = 1.0 - _718;
                                float _3189 = sqrt(1.0 - ((1.0 - (_3182 * _3182)) * (1.0 - (_3181 * _3181))));
                                float _3190 = _3189 * _3189;
                                float _3191 = _3190 * _3190;
                                float _3192 = _3138 - _2641;
                                float _3193 = _3139 - _2642;
                                float _3194 = _3140 - _2643;
                                float _3198 = inversesqrt(dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194)));
                                float _3202 = dot(vec3(_658, _661, _664), vec3((-0.0) - _2641, (-0.0) - _2642, (-0.0) - _2643));
                                float _4251 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3205 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                                float _3206 = dot(vec3(_658, _661, _664), vec3(_3198 * _3192, _3198 * _3193, _3198 * _3194));
                                float _4262 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                                float _3209 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                                float _3213 = ((_3209 * _3209) * (_3191 + (-1.0))) + 1.0;
                                float _3214 = _3151 * _3190;
                                float _3215 = _3214 * _3214;
                                float _3221 = ((1.0 - _3215) * dot(vec3(_658, _661, _664), vec3(_3138, _3139, _3140))) + _3215;
                                float _4273 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3222 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3223 = 1.0 - _3190;
                                float _3233 = (0.5 / (((_3222 * ((_3205 * _3223) + _3190)) + 9.9999999392252902907785028219223e-09) + (((_3222 * _3223) + _3190) * _3205))) * _3222;
                                float _4284 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3243 = (_3168 * _3145) * (((_3191 * 3.1415927410125732421875) * (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) / ((_3213 * _3213) * ((_3158 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3243 * _3027.x;
                                frontier_phi_73_pred_1 = _3243 * _3027.y;
                                frontier_phi_73_pred_2 = _3169 * _3015.z;
                                frontier_phi_73_pred_3 = _3169 * _3015.y;
                                frontier_phi_73_pred_4 = _3169 * _3015.x;
                                frontier_phi_73_pred_5 = _3243 * _3027.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3247 = frontier_phi_73_pred;
                            _3248 = frontier_phi_73_pred_1;
                            _3252 = frontier_phi_73_pred_2;
                            _3251 = frontier_phi_73_pred_3;
                            _3250 = frontier_phi_73_pred_4;
                            _3249 = frontier_phi_73_pred_5;
                            _2957 = _3250 + _2970;
                            _2958 = _3251 + _2971;
                            _2959 = _3252 + _2972;
                            _2954 = _3247 + _2967;
                            _2955 = _3248 + _2968;
                            _2956 = _3249 + _2969;
                            if (_2974 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2974;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2957;
                        frontier_phi_67_pred_1 = _2958;
                        frontier_phi_67_pred_2 = _2959;
                        frontier_phi_67_pred_3 = _2956;
                        frontier_phi_67_pred_4 = _2955;
                        frontier_phi_67_pred_5 = _2954;
                    }
                    _2622 = frontier_phi_67_pred;
                    _2624 = frontier_phi_67_pred_1;
                    _2626 = frontier_phi_67_pred_2;
                    _2620 = frontier_phi_67_pred_3;
                    _2618 = frontier_phi_67_pred_4;
                    _2616 = frontier_phi_67_pred_5;
                    uint _2761 = _2760 + 1u;
                    if (_2761 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2754 = _2616;
                        _2755 = _2618;
                        _2756 = _2620;
                        _2757 = _2622;
                        _2758 = _2624;
                        _2759 = _2626;
                        _2760 = _2761;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2624;
                frontier_phi_55_56_ladder_1 = _2626;
                frontier_phi_55_56_ladder_2 = _2622;
                frontier_phi_55_56_ladder_3 = _2620;
                frontier_phi_55_56_ladder_4 = _2618;
                frontier_phi_55_56_ladder_5 = _2616;
            }
            else
            {
                frontier_phi_55_56_ladder = _2510;
                frontier_phi_55_56_ladder_1 = _2512;
                frontier_phi_55_56_ladder_2 = _2508;
                frontier_phi_55_56_ladder_3 = _2506;
                frontier_phi_55_56_ladder_4 = _2504;
                frontier_phi_55_56_ladder_5 = _2502;
            }
            _2615 = frontier_phi_55_56_ladder_5;
            _2617 = frontier_phi_55_56_ladder_4;
            _2619 = frontier_phi_55_56_ladder_3;
            _2621 = frontier_phi_55_56_ladder_2;
            _2623 = frontier_phi_55_56_ladder;
            _2625 = frontier_phi_55_56_ladder_1;
        }
        float _2630 = isnan(1.0) ? _702 : (isnan(_702) ? 1.0 : min(_702, 1.0));
        _2414 = (_2630 * _2621) + _1869;
        _2416 = (_2630 * _2623) + _1871;
        _2418 = (_2630 * _2625) + _1873;
        _2420 = ((_2615 * 0.039999999105930328369140625) * _2630) + _2199;
        _2422 = ((_2617 * 0.039999999105930328369140625) * _2630) + _2201;
        _2424 = ((_2619 * 0.039999999105930328369140625) * _2630) + _2203;
    }
    else
    {
        _2414 = _1869;
        _2416 = _1871;
        _2418 = _1873;
        _2420 = _2199;
        _2422 = _2201;
        _2424 = _2203;
    }
    float _4300 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4311 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4322 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    uint _2444 = _254 + 6u;
    float _2452 = _639 / cbSceneParam._m0[86u].x;
    float _2453 = _640 / cbSceneParam._m0[86u].y;
    vec4 _2467 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2452, _2453, (log2((isnan(cbSceneParam._m0[77u].w) ? _572 : (isnan(_572) ? cbSceneParam._m0[77u].w : min(_572, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2469 = _2467.x;
    float _2470 = _2467.y;
    float _2471 = _2467.z;
    float _2472 = _2467.w;
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    if (_572 > cbSceneParam._m0[78u].w)
    {
        float _2527 = isnan(_572) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _572 : min(cbSceneParam._m0[80u].w, _572));
        float _2528 = _2527 / _572;
        float _2539 = _2528 * _624;
        float _2540 = _625 * _2528;
        float _2541 = (-0.0) - _2540;
        float _2543 = _2528 * _626;
        float _2545 = (cbSceneParam._m0[77u].w * _2541) / _2527;
        float _2546 = _2545 + cbSceneParam._m0[79u].w;
        float _2547 = cbSceneParam._m0[79u].w - _2540;
        float _2553 = sqrt(((_2539 * _2539) + (_2540 * _2540)) + (_2543 * _2543));
        float _2556 = (1.0 - (cbSceneParam._m0[77u].w / _2527)) * _2553;
        float _2561 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2563 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2716;
        if (abs((_2541 - _2545) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2716 = ((((_2546 > 0.0) ? exp2(_2561 * _2546) : (2.0 - exp2(_2563 * _2546))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2556;
        }
        else
        {
            float _2676 = 1.0 / cbSceneParam._m0[80u].x;
            float _2677 = isnan(_2547) ? _2546 : (isnan(_2546) ? _2547 : max(_2546, _2547));
            float _2678 = isnan(_2547) ? _2546 : (isnan(_2546) ? _2547 : min(_2546, _2547));
            float _2687 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : min(_2677, 0.0));
            float _2688 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : min(_2678, 0.0));
            _2716 = ((abs(_2553 / _2541) * cbSceneParam._m0[80u].y) * ((((_2687 - _2688) * 2.0) - ((exp2(_2561 * (isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0)))) - exp2(_2561 * (isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0))))) * _2676)) - ((exp2(_2563 * _2687) - exp2(_2563 * _2688)) * _2676))) + (_2556 * cbSceneParam._m0[80u].z);
        }
        vec4 _2718 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2452, _2453, 1.0), 0.0);
        float _2727 = exp2((_2716 * (-1.44269502162933349609375)) * (1.0 - _2718.w));
        float _2728 = log2(_2727);
        float _2744 = log2(_2472);
        _2565 = (exp2(_2744 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2728 * cbSceneParam._m0[78u].x)) * _2718.x) / cbSceneParam._m0[78u].x)) + _2469;
        _2567 = (exp2(_2744 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2728 * cbSceneParam._m0[78u].y)) * _2718.y) / cbSceneParam._m0[78u].y)) + _2470;
        _2569 = (exp2(_2744 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2728 * cbSceneParam._m0[78u].z)) * _2718.z) / cbSceneParam._m0[78u].z)) + _2471;
        _2571 = _2727 * _2472;
    }
    else
    {
        _2565 = _2469;
        _2567 = _2470;
        _2569 = _2471;
        _2571 = _2472;
    }
    float _2583 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2584 = _2583 == 3.0;
    float _2585 = log2(_2571);
    float _2592 = exp2(_2585 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2414 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _702))) + ((_2420 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1507)) * cbPerFrame._m0[3u].x));
    float _2593 = exp2(_2585 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2416 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _702))) + ((_2422 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1507)) * cbPerFrame._m0[3u].x));
    float _2594 = exp2(_2585 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2418 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _702))) + ((_2424 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1507)) * cbPerFrame._m0[3u].x));
    float _2603 = (_2583 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2603 * (_2584 ? _2592 : (_2592 + (cbSceneParam._m0[72u].w * _2565)));
    SV_Target.y = _2603 * (_2584 ? _2593 : (_2593 + (cbSceneParam._m0[72u].w * _2567)));
    SV_Target.z = _2603 * (_2584 ? _2594 : (_2594 + (cbSceneParam._m0[72u].w * _2569)));
    SV_Target.w = cbInstanceData._m0[_2444].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2444].w;
}


