#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _877;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _218 = uint(roundEven(NORMAL.w)) * 13u;
    uint _224 = _218 + 1u;
    uint _228 = _218 + 2u;
    float _237 = sqrt(((cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x) + (cbInstanceData._m0[_218].x * cbInstanceData._m0[_218].x)) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x));
    vec4 _258 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _264 = _258.x * cbMtdParam._m0[9u].x;
    float _265 = _258.y * cbMtdParam._m0[9u].y;
    float _266 = _258.z * cbMtdParam._m0[9u].z;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2(((_237 * TEXCOORD.z) * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, ((_237 * TEXCOORD.w) * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _305 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _309 = _305.z;
    float _313 = (_305.x * 2.0) + (-1.0);
    float _314 = (_305.y * 2.0) + (-1.0);
    float _315 = dot(vec2(_313, _314), vec2(_313, _314));
    float _3190 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _321 = sqrt(1.0 - (isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0))));
    float _326 = _313 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_279.x * 2.0) + (-1.0)));
    float _327 = _314 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_279.y * 2.0) + (-1.0)));
    float _332 = (((_279.z - _309) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _309;
    float _337 = cbMtdParam._m0[22u].x + _305.w;
    float _340 = fma(_321, _205 * NORMAL.x, fma(_327, _212 * TANGENT.x, (_198 * _190) * _326));
    float _343 = fma(_321, _205 * NORMAL.y, fma(_327, _212 * TANGENT.y, (_198 * _191) * _326));
    float _346 = fma(_321, _205 * NORMAL.z, fma(_327, _212 * TANGENT.z, (_198 * _192) * _326));
    float _350 = inversesqrt(dot(vec3(_340, _343, _346), vec3(_340, _343, _346)));
    float _351 = _350 * _340;
    float _352 = _350 * _343;
    float _353 = _350 * _346;
    float _3201 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _354 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
    float _3212 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _3223 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3234 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3245 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _372 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _414 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _424 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _414);
    float _425 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _414);
    float _426 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _414);
    float _430 = inversesqrt(dot(vec3(_424, _425, _426), vec3(_424, _425, _426)));
    float _431 = _424 * _430;
    float _432 = _425 * _430;
    float _433 = _426 * _430;
    float _439 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _440 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _461 = fma(_353, cbSceneParam._m0[5u].z, fma(_352, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _351));
    float _464 = fma(_353, cbSceneParam._m0[6u].z, fma(_352, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _351));
    float _467 = fma(_353, cbSceneParam._m0[7u].z, fma(_352, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _351));
    uint _481 = (_218 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _487 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0)))) * cbInstanceData._m0[_481].x;
    float _488 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0)))) * cbInstanceData._m0[_481].y;
    float _489 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0)))) * cbInstanceData._m0[_481].z;
    float _3256 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
    float _3267 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
    float _3278 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
    vec4 _501 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _439, cbSceneParam._m0[86u].y * _440));
    float _505 = ((isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0))) * TEXCOORD_5.w) * _501.x;
    float _506 = dot(vec3(_351, _352, _353), vec3(_431, _432, _433));
    float _509 = _506 * 2.0;
    float _513 = (_509 * _351) - _431;
    float _514 = (_509 * _352) - _432;
    float _515 = (_509 * _353) - _433;
    float _519 = abs(dot(vec3(_431, _432, _433), vec3(_351, _352, _353)));
    float _3289 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _521 = sqrt(_354);
    float _534 = exp2((_521 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_521 * 3.0));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _876;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _601 = fma(_574, cbModelParam._m0[26u].z, fma(_570, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _566));
        float _605 = fma(_574, cbModelParam._m0[27u].z, fma(_570, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _566));
        float _609 = fma(_574, cbModelParam._m0[28u].z, fma(_570, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _566));
        float _634 = _566 + _351;
        float _635 = _570 + _352;
        float _636 = _574 + _353;
        float _646 = fma(_636, cbModelParam._m0[26u].z, fma(_635, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _634)) - _601;
        float _647 = fma(_636, cbModelParam._m0[27u].z, fma(_635, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _634)) - _605;
        float _648 = fma(_636, cbModelParam._m0[28u].z, fma(_635, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _634)) - _609;
        float _652 = inversesqrt(dot(vec3(_646, _647, _648), vec3(_646, _647, _648)));
        float _665 = ((_652 * _646) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_601 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _666 = ((_652 * _647) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_605 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _667 = ((_652 * _648) / cbModelParam._m0[34u].z) + ((((((_609 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_665, _666, _667), 0.0);
        float _704 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_670.x + (-0.5));
        float _706 = _704 * (_670.y + (-0.5));
        float _707 = _704 * (_670.z + (-0.5));
        float _714 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_677.x + (-0.5));
        float _716 = _714 * (_677.y + (-0.5));
        float _717 = _714 * (_677.z + (-0.5));
        float _724 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _725 = _724 * (_684.x + (-0.5));
        float _726 = _724 * (_684.y + (-0.5));
        float _727 = _724 * (_684.z + (-0.5));
        float _734 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _735 = _734 * (_691.x + (-0.5));
        float _736 = _734 * (_691.y + (-0.5));
        float _737 = _734 * (_691.z + (-0.5));
        float _738 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _739 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = _705 * 0.5;
        float _742 = _715 * 0.5;
        float _743 = _725 * 0.5;
        float _744 = dot(vec3(_741, _742, _743), vec3(_741, _742, _743));
        float _749 = (_744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_744);
        float _758 = (dot(vec3(_351, _352, _353), vec3(_749 * _741, _749 * _742, _749 * _743)) + 1.0) * 0.5;
        float _3315 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _768 = sqrt(((_742 * _742) + (_741 * _741)) + (_743 * _743)) / (_738 + 9.9999997473787516355514526367188e-06);
        float _3326 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
        float _770 = _769 * 2.0;
        float _774 = (1.0 - _769) / (_769 + 1.0);
        float _3337 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _784 = ((((1.0 - _775) * (_770 + 2.0)) * exp2(log2(isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0))) * (_770 + 1.0))) + _775) * _738;
        float _785 = _706 * 0.5;
        float _786 = _716 * 0.5;
        float _787 = _726 * 0.5;
        float _788 = dot(vec3(_785, _786, _787), vec3(_785, _786, _787));
        float _793 = (_788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_788);
        float _801 = (dot(vec3(_351, _352, _353), vec3(_793 * _785, _793 * _786, _793 * _787)) + 1.0) * 0.5;
        float _3348 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _810 = sqrt(((_786 * _786) + (_785 * _785)) + (_787 * _787)) / (_739 + 9.9999997473787516355514526367188e-06);
        float _3359 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
        float _812 = _811 * 2.0;
        float _816 = (1.0 - _811) / (_811 + 1.0);
        float _3370 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _826 = ((((1.0 - _817) * (_812 + 2.0)) * exp2(log2(isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0))) * (_812 + 1.0))) + _817) * _739;
        float _827 = _707 * 0.5;
        float _828 = _717 * 0.5;
        float _829 = _727 * 0.5;
        float _830 = dot(vec3(_827, _828, _829), vec3(_827, _828, _829));
        float _835 = (_830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_830);
        float _843 = (dot(vec3(_351, _352, _353), vec3(_835 * _827, _835 * _828, _835 * _829)) + 1.0) * 0.5;
        float _3381 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _852 = sqrt(((_828 * _828) + (_827 * _827)) + (_829 * _829)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3392 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _854 = _853 * 2.0;
        float _858 = (1.0 - _853) / (_853 + 1.0);
        float _3403 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _868 = ((((1.0 - _859) * (_854 + 2.0)) * exp2(log2(isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0))) * (_854 + 1.0))) + _859) * _740;
        _876 = _707;
        _878 = _706;
        _879 = _705;
        _880 = _717;
        _881 = _716;
        _882 = _715;
        _883 = _727;
        _884 = _726;
        _885 = _725;
        _886 = _740;
        _887 = _739;
        _888 = _738;
        _889 = cbModelParam._m0[36u].z * (isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0)));
        _890 = cbModelParam._m0[36u].z * (isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0)));
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0)));
    }
    else
    {
        _876 = _877;
        _878 = _877;
        _879 = _877;
        _880 = _877;
        _881 = _877;
        _882 = _877;
        _883 = _877;
        _884 = _877;
        _885 = _877;
        _886 = _877;
        _887 = _877;
        _888 = _877;
        _889 = 0.0;
        _890 = 0.0;
        _891 = 0.0;
    }
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _916 = fma(_574, cbModelParam._m0[30u].z, fma(_570, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _566));
        float _920 = fma(_574, cbModelParam._m0[31u].z, fma(_570, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _566));
        float _924 = fma(_574, cbModelParam._m0[32u].z, fma(_570, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _566));
        float _947 = _566 + _351;
        float _948 = _570 + _352;
        float _949 = _574 + _353;
        float _959 = fma(_949, cbModelParam._m0[30u].z, fma(_948, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _947)) - _916;
        float _960 = fma(_949, cbModelParam._m0[31u].z, fma(_948, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _947)) - _920;
        float _961 = fma(_949, cbModelParam._m0[32u].z, fma(_948, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _947)) - _924;
        float _965 = inversesqrt(dot(vec3(_959, _960, _961), vec3(_959, _960, _961)));
        float _978 = ((_965 * _959) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_916 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _979 = ((_965 * _960) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_920 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _980 = ((_965 * _961) / cbModelParam._m0[35u].z) + ((((((_924 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_978, _979, _980), 0.0);
        float _1015 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_982.x + (-0.5));
        float _1017 = _1015 * (_982.y + (-0.5));
        float _1018 = _1015 * (_982.z + (-0.5));
        float _1025 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_989.x + (-0.5));
        float _1027 = _1025 * (_989.y + (-0.5));
        float _1028 = _1025 * (_989.z + (-0.5));
        float _1035 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_996.x + (-0.5));
        float _1037 = _1035 * (_996.y + (-0.5));
        float _1038 = _1035 * (_996.z + (-0.5));
        float _1045 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1003.x + (-0.5));
        float _1047 = _1045 * (_1003.y + (-0.5));
        float _1048 = _1045 * (_1003.z + (-0.5));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = _1016 * 0.5;
        float _1053 = _1026 * 0.5;
        float _1054 = _1036 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_351, _352, _353), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3444 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3455 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3466 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * (_1079 + 1.0))) + _1084) * _1049;
        float _1094 = _1017 * 0.5;
        float _1095 = _1027 * 0.5;
        float _1096 = _1037 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_351, _352, _353), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3499 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_1121 + 1.0))) + _1126) * _1050;
        float _1136 = _1018 * 0.5;
        float _1137 = _1028 * 0.5;
        float _1138 = _1038 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_351, _352, _353), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3532 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_1163 + 1.0))) + _1168) * _1051;
        _1185 = _1018;
        _1186 = _1017;
        _1187 = _1016;
        _1188 = _1028;
        _1189 = _1027;
        _1190 = _1026;
        _1191 = _1038;
        _1192 = _1037;
        _1193 = _1036;
        _1194 = _1051;
        _1195 = _1050;
        _1196 = _1049;
        _1197 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1198 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1199 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
    }
    else
    {
        _1185 = _877;
        _1186 = _877;
        _1187 = _877;
        _1188 = _877;
        _1189 = _877;
        _1190 = _877;
        _1191 = _877;
        _1192 = _877;
        _1193 = _877;
        _1194 = _877;
        _1195 = _877;
        _1196 = _877;
        _1197 = 0.0;
        _1198 = 0.0;
        _1199 = 0.0;
    }
    float _1209 = (cbModelParam._m0[1u].x * (_1197 - _889)) + _889;
    float _1210 = (cbModelParam._m0[1u].x * (_1198 - _890)) + _890;
    float _1211 = (cbModelParam._m0[1u].x * (_1199 - _891)) + _891;
    float _1232 = fma(_1211, cbSceneParam._m0[89u].z, fma(_1210, cbSceneParam._m0[89u].y, _1209 * cbSceneParam._m0[89u].x));
    float _1235 = fma(_1211, cbSceneParam._m0[90u].z, fma(_1210, cbSceneParam._m0[90u].y, _1209 * cbSceneParam._m0[90u].x));
    float _1238 = fma(_1211, cbSceneParam._m0[91u].z, fma(_1210, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1209));
    float _1253 = _513 * 0.5;
    float _1254 = _514 * 0.5;
    float _1255 = _515 * 0.5;
    float _1256 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1187, _1190, _1193, _1196));
    float _1259 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1186, _1189, _1192, _1195));
    float _1262 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_1185, _1188, _1191, _1194));
    float _1296;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1269 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_876, _880, _883, _886));
        float _1273 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_878, _881, _884, _887));
        float _1277 = dot(vec4(_1253, _1254, _1255, 1.0), vec4(_879, _882, _885, _888));
        float _1284 = dot(vec4(cbModelParam._m0[39u]), vec4(_1253, _1254, _1255, 1.0));
        _1296 = dot(vec3(isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1284) ? 0.0 : (isnan(0.0) ? _1284 : max(0.0, _1284))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1296 = 1.0;
    }
    float _1307;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1298 = dot(vec4(cbModelParam._m0[40u]), vec4(_1253, _1254, _1255, 1.0));
        _1307 = dot(vec3(isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)), isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1298) ? 0.0 : (isnan(0.0) ? _1298 : max(0.0, _1298))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1307 = 1.0;
    }
    float _1311 = (_1307 * cbModelParam._m0[1u].x) + (_1296 * (1.0 - cbModelParam._m0[1u].x));
    float _1321 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _354);
    float _1322 = isnan(_1321) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1321 : min(cbModelParam._m0[25u].z, _1321));
    float _1404;
    float _1406;
    float _1408;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1371 = fma(_574, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _566)) + cbModelParam._m0[13u].w;
        float _1375 = fma(_574, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _566)) + cbModelParam._m0[14u].w;
        float _1379 = fma(_574, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _566)) + cbModelParam._m0[15u].w;
        float _1382 = fma(_515, cbModelParam._m0[13u].z, fma(_514, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _513));
        float _1385 = fma(_515, cbModelParam._m0[14u].z, fma(_514, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _513));
        float _1388 = fma(_515, cbModelParam._m0[15u].z, fma(_514, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _513));
        float _1416;
        if (_1382 > 0.0)
        {
            _1416 = abs((1.0 - _1371) / _1382);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1371 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1416 = frontier_phi_14_12_ladder;
        }
        float _1621;
        if (_1385 > 0.0)
        {
            _1621 = abs((1.0 - _1375) / _1385);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1385 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1375 + 1.0) / _1385);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1621 = frontier_phi_23_19_ladder;
        }
        float _1864;
        if (_1388 > 0.0)
        {
            _1864 = abs((1.0 - _1379) / _1388);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1388 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1379 + 1.0) / _1388);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1864 = frontier_phi_35_30_ladder;
        }
        float _1866 = isnan(_1621) ? _1416 : (isnan(_1416) ? _1621 : min(_1416, _1621));
        float _1867 = isnan(_1864) ? _1866 : (isnan(_1866) ? _1864 : min(_1866, _1864));
        float _1871 = (_1867 * _1382) + _1371;
        float _1872 = (_1867 * _1385) + _1375;
        float _1873 = (_1867 * _1388) + _1379;
        float _1874 = _1867 * 9.9999997473787516355514526367188e-05;
        float _1876 = (-1.0) - _1874;
        float _1878 = _1874 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1873 > _1878) || ((_1873 < _1876) || ((_1872 > _1878) || ((_1872 < _1876) || ((_1871 < _1876) || (_1871 > _1878))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1997 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1873, cbModelParam._m0[9u].z, fma(_1872, cbModelParam._m0[9u].y, _1871 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1873, cbModelParam._m0[10u].z, fma(_1872, cbModelParam._m0[10u].y, _1871 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1873, cbModelParam._m0[11u].z, fma(_1872, cbModelParam._m0[11u].y, _1871 * cbModelParam._m0[11u].x))), _1322);
            frontier_phi_13_35_ladder = _1997.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1997.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1997.x * cbModelParam._m0[1u].y;
        }
        _1404 = frontier_phi_13_35_ladder_2;
        _1406 = frontier_phi_13_35_ladder_1;
        _1408 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1392 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_513, _514, _515), _1322);
        _1404 = _1392.x * cbModelParam._m0[1u].y;
        _1406 = _1392.y * cbModelParam._m0[1u].y;
        _1408 = _1392.z * cbModelParam._m0[1u].y;
    }
    float _1412 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _354);
    float _1413 = isnan(_1412) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1412 : min(cbModelParam._m0[25u].w, _1412));
    float _1505;
    float _1507;
    float _1509;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1469 = fma(_574, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _566)) + cbModelParam._m0[21u].w;
        float _1473 = fma(_574, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _566)) + cbModelParam._m0[22u].w;
        float _1477 = fma(_574, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _566)) + cbModelParam._m0[23u].w;
        float _1480 = fma(_515, cbModelParam._m0[21u].z, fma(_514, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _513));
        float _1483 = fma(_515, cbModelParam._m0[22u].z, fma(_514, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _513));
        float _1486 = fma(_515, cbModelParam._m0[23u].z, fma(_514, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _513));
        float _1626;
        if (_1480 > 0.0)
        {
            _1626 = abs((1.0 - _1469) / _1480);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1480 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1469 + 1.0) / _1480);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1626 = frontier_phi_25_21_ladder;
        }
        float _1891;
        if (_1483 > 0.0)
        {
            _1891 = abs((1.0 - _1473) / _1483);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1473 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1891 = frontier_phi_37_32_ladder;
        }
        float _2096;
        if (_1486 > 0.0)
        {
            _2096 = abs((1.0 - _1477) / _1486);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1477 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2096 = frontier_phi_46_43_ladder;
        }
        float _2098 = isnan(_1891) ? _1626 : (isnan(_1626) ? _1891 : min(_1626, _1891));
        float _2099 = isnan(_2096) ? _2098 : (isnan(_2098) ? _2096 : min(_2098, _2096));
        float _2103 = (_2099 * _1480) + _1469;
        float _2104 = (_2099 * _1483) + _1473;
        float _2105 = (_2099 * _1486) + _1477;
        float _2106 = _2099 * 9.9999997473787516355514526367188e-05;
        float _2107 = (-1.0) - _2106;
        float _2109 = _2106 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2105 > _2109) || ((_2105 < _2107) || ((_2104 > _2109) || ((_2104 < _2107) || ((_2103 < _2107) || (_2103 > _2109))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2304 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2105, cbModelParam._m0[17u].z, fma(_2104, cbModelParam._m0[17u].y, _2103 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2105, cbModelParam._m0[18u].z, fma(_2104, cbModelParam._m0[18u].y, _2103 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2105, cbModelParam._m0[19u].z, fma(_2104, cbModelParam._m0[19u].y, _2103 * cbModelParam._m0[19u].x))), _1413);
            frontier_phi_22_46_ladder = _2304.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2304.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2304.x * cbModelParam._m0[1u].z;
        }
        _1505 = frontier_phi_22_46_ladder_2;
        _1507 = frontier_phi_22_46_ladder_1;
        _1509 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1489 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_513, _514, _515), _1413);
        _1505 = _1489.x * cbModelParam._m0[1u].z;
        _1507 = _1489.y * cbModelParam._m0[1u].z;
        _1509 = _1489.z * cbModelParam._m0[1u].z;
    }
    float _1521 = ((((1.0 - _534) * ((_521 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_534 * _521)) * _505;
    float _1522 = _1521 * ((cbModelParam._m0[1u].w * (_1505 - _1404)) + _1404);
    float _1523 = _1521 * ((cbModelParam._m0[1u].w * (_1507 - _1406)) + _1406);
    float _1524 = _1521 * ((cbModelParam._m0[1u].w * (_1509 - _1408)) + _1408);
    float _1527 = fma(_1524, cbSceneParam._m0[89u].z, fma(_1523, cbSceneParam._m0[89u].y, _1522 * cbSceneParam._m0[89u].x));
    float _1530 = fma(_1524, cbSceneParam._m0[90u].z, fma(_1523, cbSceneParam._m0[90u].y, _1522 * cbSceneParam._m0[90u].x));
    float _1533 = fma(_1524, cbSceneParam._m0[91u].z, fma(_1523, cbSceneParam._m0[91u].y, _1522 * cbSceneParam._m0[91u].x));
    uvec4 _1543 = floatBitsToUint(cbInstanceData._m0[_218 + 5u]);
    uint _1545 = _1543.x * 14u;
    uint _1546 = _1545 + 13u;
    float _1553 = _505 + (-1.0);
    float _1558 = (cbLight._m0[_1546].x * _1553) + 1.0;
    float _1559 = (cbLight._m0[_1546].y * _1553) + 1.0;
    float _1560 = (cbLight._m0[_1546].z * _1553) + 1.0;
    float _1561 = (cbLight._m0[_1546].w * _1553) + 1.0;
    uint _1562 = _1545 + 5u;
    float _1568 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
    uint _1572 = _1545 + 4u;
    float _1579 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
    uint _1583 = _1545 | 1u;
    float _1594 = dot(vec3(cbLight._m0[_1545].xyz), vec3(_351, _352, _353));
    float _1597 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_351, _352, _353));
    float _3668 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
    float _3679 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
    float _1602 = (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * 0.3183098733425140380859375;
    float _1604 = (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * 0.3183098733425140380859375;
    float _1611 = ((cbLight._m0[_1562].x * _1568) * _1604) + ((cbLight._m0[_1572].x * _1579) * _1602);
    float _1612 = ((_1568 * cbLight._m0[_1562].y) * _1604) + ((_1579 * cbLight._m0[_1572].y) * _1602);
    float _1613 = ((_1568 * cbLight._m0[_1562].z) * _1604) + ((_1579 * cbLight._m0[_1572].z) * _1602);
    uvec4 _1618 = floatBitsToUint(cbLight._m0[_1545 + 12u]);
    bool _1620 = _1618.x == 0u;
    float _1631;
    float _1633;
    float _1635;
    if (_1620)
    {
        _1631 = _1611;
        _1633 = _1612;
        _1635 = _1613;
    }
    else
    {
        uint _1639 = _1545 + 6u;
        float _1655 = (dot(vec3(cbLight._m0[_1545 + 2u].xyz), vec3(_351, _352, _353)) * 0.5) + 0.5;
        float _1656 = _1655 * _1655;
        float _3690 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1658 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
        _1631 = (((cbLight._m0[_1639].x * 0.3183098733425140380859375) * _1657) * _1658) + _1611;
        _1633 = (((cbLight._m0[_1639].y * 0.3183098733425140380859375) * _1657) * _1658) + _1612;
        _1635 = (((cbLight._m0[_1639].z * 0.3183098733425140380859375) * _1657) * _1658) + _1613;
    }
    bool _1638 = _1618.y == 0u;
    float _1676;
    float _1678;
    float _1680;
    if (_1638)
    {
        _1676 = _1631;
        _1678 = _1633;
        _1680 = _1635;
    }
    else
    {
        uint _1835 = _1545 + 7u;
        float _1851 = (dot(vec3(cbLight._m0[_1545 + 3u].xyz), vec3(_351, _352, _353)) * 0.5) + 0.5;
        float _1852 = _1851 * _1851;
        float _3706 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1854 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
        _1676 = (((cbLight._m0[_1835].x * 0.3183098733425140380859375) * _1853) * _1854) + _1631;
        _1678 = (((cbLight._m0[_1835].y * 0.3183098733425140380859375) * _1853) * _1854) + _1633;
        _1680 = (((cbLight._m0[_1835].z * 0.3183098733425140380859375) * _1853) * _1854) + _1635;
    }
    uint _1683 = _1545 + 8u;
    float _1696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1545].w)) * _354) * 0.949999988079071044921875);
    float _1697 = _1696 * _1696;
    float _1698 = cbLight._m0[_1545].x + _431;
    float _1699 = cbLight._m0[_1545].y + _432;
    float _1700 = cbLight._m0[_1545].z + _433;
    float _1704 = inversesqrt(dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700)));
    float _1705 = _1704 * _1698;
    float _1706 = _1704 * _1699;
    float _1707 = _1704 * _1700;
    float _1708 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_1545].xyz));
    float _3722 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1711 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _3733 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _1712 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _1713 = dot(vec3(_351, _352, _353), vec3(_1705, _1706, _1707));
    float _3744 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1716 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _1717 = dot(vec3(cbLight._m0[_1545].xyz), vec3(_1705, _1706, _1707));
    float _3755 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1721 = _1697 * _1697;
    float _1725 = ((_1716 * _1716) * (_1721 + (-1.0))) + 1.0;
    float _1736 = (exp2(log2(1.0 - (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1737 = 1.0 - _1697;
    float _1748 = (0.5 / (((_1712 * ((_1711 * _1737) + _1697)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _1737) + _1697) * _1711))) * _1711;
    float _3766 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1750 = (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1721 / ((_1725 * _1725) * 3.141590118408203125));
    uint _1761 = _1545 + 9u;
    float _1772 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1583].w)) * _354) * 0.949999988079071044921875);
    float _1773 = _1772 * _1772;
    float _1774 = cbLight._m0[_1583].x + _431;
    float _1775 = cbLight._m0[_1583].y + _432;
    float _1776 = cbLight._m0[_1583].z + _433;
    float _1780 = inversesqrt(dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776)));
    float _1781 = _1780 * _1774;
    float _1782 = _1780 * _1775;
    float _1783 = _1780 * _1776;
    float _1784 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_1583].xyz));
    float _3777 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _1788 = dot(vec3(_351, _352, _353), vec3(_1781, _1782, _1783));
    float _3788 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1791 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _1792 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_1781, _1782, _1783));
    float _3799 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1796 = _1773 * _1773;
    float _1800 = ((_1791 * _1791) * (_1796 + (-1.0))) + 1.0;
    float _1809 = (exp2(log2(1.0 - (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1810 = 1.0 - _1773;
    float _1820 = (0.5 / (((_1712 * ((_1787 * _1810) + _1773)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _1810) + _1773) * _1787))) * _1787;
    float _3810 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1822 = (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1796 / ((_1800 * _1800) * 3.141590118408203125));
    float _1832 = (((_1809 * cbLight._m0[_1761].x) * _1822) * _1568) + (((_1736 * cbLight._m0[_1683].x) * _1750) * _1579);
    float _1833 = (((_1809 * cbLight._m0[_1761].y) * _1822) * _1568) + (((_1736 * cbLight._m0[_1683].y) * _1750) * _1579);
    float _1834 = (((_1809 * cbLight._m0[_1761].z) * _1822) * _1568) + (((_1736 * cbLight._m0[_1683].z) * _1750) * _1579);
    float _1896;
    float _1898;
    float _1900;
    if (_1620)
    {
        _1896 = _1832;
        _1898 = _1833;
        _1900 = _1834;
    }
    else
    {
        uint _1902 = _1545 + 2u;
        uint _1906 = _1545 + 10u;
        float _1920 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1902].w)) * _354) * 0.949999988079071044921875);
        float _1921 = _1920 * _1920;
        float _1922 = cbLight._m0[_1902].x + _431;
        float _1923 = cbLight._m0[_1902].y + _432;
        float _1924 = cbLight._m0[_1902].z + _433;
        float _1928 = inversesqrt(dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924)));
        float _1929 = _1928 * _1922;
        float _1930 = _1928 * _1923;
        float _1931 = _1928 * _1924;
        float _1932 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_1902].xyz));
        float _3821 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1935 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1936 = dot(vec3(_351, _352, _353), vec3(_1929, _1930, _1931));
        float _3832 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1939 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1940 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_1929, _1930, _1931));
        float _3843 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1944 = _1921 * _1921;
        float _1948 = ((_1939 * _1939) * (_1944 + (-1.0))) + 1.0;
        float _1957 = (exp2(log2(1.0 - (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1958 = 1.0 - _1921;
        float _1968 = (0.5 / (((_1712 * ((_1935 * _1958) + _1921)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _1958) + _1921) * _1935))) * _1935;
        float _3854 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1970 = (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1944 / ((_1948 * _1948) * 3.141590118408203125));
        float _1971 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
        _1896 = (((_1957 * cbLight._m0[_1906].x) * _1970) * _1971) + _1832;
        _1898 = (((_1957 * cbLight._m0[_1906].y) * _1970) * _1971) + _1833;
        _1900 = (((_1957 * cbLight._m0[_1906].z) * _1970) * _1971) + _1834;
    }
    float _2006;
    float _2008;
    float _2010;
    if (_1638)
    {
        _2006 = _1896;
        _2008 = _1898;
        _2010 = _1900;
    }
    else
    {
        uint _2017 = _1545 + 3u;
        uint _2021 = _1545 + 11u;
        float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _354) * 0.949999988079071044921875);
        float _2036 = _2035 * _2035;
        float _2037 = cbLight._m0[_2017].x + _431;
        float _2038 = cbLight._m0[_2017].y + _432;
        float _2039 = cbLight._m0[_2017].z + _433;
        float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
        float _2044 = _2043 * _2037;
        float _2045 = _2043 * _2038;
        float _2046 = _2043 * _2039;
        float _2047 = dot(vec3(_351, _352, _353), vec3(cbLight._m0[_2017].xyz));
        float _3870 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2050 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _2051 = dot(vec3(_351, _352, _353), vec3(_2044, _2045, _2046));
        float _3881 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2054 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _2055 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2044, _2045, _2046));
        float _3892 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2059 = _2036 * _2036;
        float _2063 = ((_2054 * _2054) * (_2059 + (-1.0))) + 1.0;
        float _2072 = (exp2(log2(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2073 = 1.0 - _2036;
        float _2083 = (0.5 / (((_1712 * ((_2050 * _2073) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_1712 * _2073) + _2036) * _2050))) * _2050;
        float _3903 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2085 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_2059 / ((_2063 * _2063) * 3.141590118408203125));
        float _2086 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
        _2006 = (((_2072 * cbLight._m0[_2021].x) * _2085) * _2086) + _1896;
        _2008 = (((_2072 * cbLight._m0[_2021].y) * _2085) * _2086) + _1898;
        _2010 = (((_2072 * cbLight._m0[_2021].z) * _2085) * _2086) + _1900;
    }
    float _2221;
    float _2223;
    float _2225;
    float _2227;
    float _2229;
    float _2231;
    if (_1543.y == 0u)
    {
        float _2161 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2162 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2161;
        float _2163 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2161;
        float _2164 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2161;
        uvec4 _2176 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2177 = _2176.x;
        uint _2188 = uint((float(_2176.y) * floor(float(uint(cbSceneParam._m0[85u].y * _440) / _2177))) + floor(float(uint(cbSceneParam._m0[85u].x * _439) / _2177)));
        float _2198 = (log2(_2164 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2199 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        uint _2202 = uint(isnan(14.0) ? _2199 : (isnan(_2199) ? 14.0 : min(_2199, 14.0)));
        uvec4 _2207 = texelFetch(g_lightClusterGridBuffer, int(((_2202 << 2u) + (_2188 << 6u)) >> 2u));
        uint _2208 = _2207.x;
        uint _2209 = _2176.z;
        float _2309;
        float _2311;
        float _2313;
        float _2315;
        float _2317;
        float _2319;
        if (((((1u << ((_2209 >> 4u) & 15u)) + 4294967295u) & _2208) == 0u) || ((_2209 & 240u) == 0u))
        {
            _2309 = 0.0;
            _2311 = 0.0;
            _2313 = 0.0;
            _2315 = 0.0;
            _2317 = 0.0;
            _2319 = 0.0;
        }
        else
        {
            float _2310;
            float _2312;
            float _2314;
            float _2316;
            float _2318;
            float _2320;
            float _2454 = 0.0;
            float _2455 = 0.0;
            float _2456 = 0.0;
            float _2457 = 0.0;
            float _2458 = 0.0;
            float _2459 = 0.0;
            uint _2460 = 0u;
            uint _2469;
            bool _2470;
            for (;;)
            {
                _2469 = texelFetch(g_lightClassification, int((((_2202 << 5u) + (_2188 << 9u)) + (_2460 << 2u)) >> 2u)).x;
                _2470 = _2469 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2470)
                {
                    frontier_phi_61_pred = _2454;
                    frontier_phi_61_pred_1 = _2459;
                    frontier_phi_61_pred_2 = _2458;
                    frontier_phi_61_pred_3 = _2457;
                    frontier_phi_61_pred_4 = _2456;
                    frontier_phi_61_pred_5 = _2455;
                }
                else
                {
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    float _2582;
                    float _2583;
                    uint _2584;
                    _2578 = _2454;
                    _2579 = _2455;
                    _2580 = _2456;
                    _2581 = _2457;
                    _2582 = _2458;
                    _2583 = _2459;
                    _2584 = _2469;
                    float _2510;
                    float _2511;
                    float _2512;
                    float _2513;
                    float _2514;
                    float _2515;
                    for (;;)
                    {
                        uint _2588 = uint(findLSB(_2584)) + (_2460 << 5u);
                        uint _2585 = (_2584 + 4294967295u) & _2584;
                        uint _2590 = _2588 * 48u;
                        vec4 _2604 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2590)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 3u)).x));
                        uint _2610 = (_2588 * 48u) + 4u;
                        vec4 _2623 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2610)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2610 + 3u)).x));
                        uint _2629 = (_2588 * 48u) + 8u;
                        vec3 _2640 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2629)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 2u)).x));
                        float _2644 = _2604.x - _2162;
                        float _2645 = _2604.y - _2163;
                        float _2646 = _2604.z - _2164;
                        float _2647 = dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646));
                        float _2650 = inversesqrt(_2647);
                        float _2651 = _2650 * _2644;
                        float _2652 = _2650 * _2645;
                        float _2653 = _2650 * _2646;
                        float _2654 = dot(vec3(_461, _464, _467), vec3(_2651, _2652, _2653));
                        float _2659 = 1.0 - (_2647 * _2604.w);
                        float _3929 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
                        float _2660 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
                        float _2661 = sqrt(_2647) * _2623.w;
                        float _2664 = 1.39999997615814208984375 / (_2661 + 1.39999997615814208984375);
                        float _2665 = _2664 * _2664;
                        float _2668 = ((1.0 - _2665) * _2654) + _2665;
                        float _2671 = _2661 * _2661;
                        float _2675 = ((isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0))) * _2660) / ((_2671 * 0.699999988079071044921875) + 1.0);
                        float _2679 = (-0.0) - _2162;
                        float _2680 = (-0.0) - _2163;
                        float _2681 = (-0.0) - _2164;
                        float _2685 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
                        float _2686 = _2685 * _2679;
                        float _2687 = _2685 * _2680;
                        float _2688 = _2685 * _2681;
                        float _2696 = exp2(log2(1.0 / ((_2671 * 3.5) + 5.0)) * 0.25);
                        float _2697 = 1.0 - _521;
                        float _2704 = sqrt(1.0 - ((1.0 - (_2697 * _2697)) * (1.0 - (_2696 * _2696))));
                        float _2705 = _2704 * _2704;
                        float _2706 = _2705 * _2705;
                        float _2707 = _2686 + _2651;
                        float _2708 = _2687 + _2652;
                        float _2709 = _2688 + _2653;
                        float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
                        float _2717 = dot(vec3(_461, _464, _467), vec3(_2686, _2687, _2688));
                        float _3945 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                        float _2720 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
                        float _2721 = dot(vec3(_461, _464, _467), vec3(_2713 * _2707, _2713 * _2708, _2713 * _2709));
                        float _3956 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                        float _2724 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
                        float _2728 = ((_2724 * _2724) * (_2706 + (-1.0))) + 1.0;
                        float _2729 = _2664 * _2705;
                        float _2730 = _2729 * _2729;
                        float _2733 = ((1.0 - _2730) * _2654) + _2730;
                        float _3967 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                        float _2734 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
                        float _2735 = 1.0 - _2705;
                        float _2745 = (0.5 / (((_2734 * ((_2720 * _2735) + _2705)) + 9.9999999392252902907785028219223e-09) + (((_2734 * _2735) + _2705) * _2720))) * _2734;
                        float _3978 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                        float _2756 = (((_2706 * 3.1415927410125732421875) * (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) / ((_2728 * _2728) * ((_2671 * 2.1991131305694580078125) + 3.141590118408203125))) * _2660;
                        _2513 = (_2675 * _2623.x) + _2581;
                        _2514 = (_2675 * _2623.y) + _2582;
                        _2515 = (_2675 * _2623.z) + _2583;
                        _2510 = (_2756 * _2640.x) + _2578;
                        _2511 = (_2756 * _2640.y) + _2579;
                        _2512 = (_2756 * _2640.z) + _2580;
                        if (_2585 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2578 = _2510;
                            _2579 = _2511;
                            _2580 = _2512;
                            _2581 = _2513;
                            _2582 = _2514;
                            _2583 = _2515;
                            _2584 = _2585;
                        }
                    }
                    frontier_phi_61_pred = _2510;
                    frontier_phi_61_pred_1 = _2515;
                    frontier_phi_61_pred_2 = _2514;
                    frontier_phi_61_pred_3 = _2513;
                    frontier_phi_61_pred_4 = _2512;
                    frontier_phi_61_pred_5 = _2511;
                }
                _2310 = frontier_phi_61_pred;
                _2320 = frontier_phi_61_pred_1;
                _2318 = frontier_phi_61_pred_2;
                _2316 = frontier_phi_61_pred_3;
                _2314 = frontier_phi_61_pred_4;
                _2312 = frontier_phi_61_pred_5;
                uint _2461 = _2460 + 1u;
                if (_2461 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2454 = _2310;
                    _2455 = _2312;
                    _2456 = _2314;
                    _2457 = _2316;
                    _2458 = _2318;
                    _2459 = _2320;
                    _2460 = _2461;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2309 = _2310;
            _2311 = _2312;
            _2313 = _2314;
            _2315 = _2316;
            _2317 = _2318;
            _2319 = _2320;
        }
        uvec4 _2323 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2324 = _2323.z;
        uint _2326 = (_2324 >> 8u) & 15u;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        if (((4294967295u << _2326) & _2208) == 0u)
        {
            _2422 = _2309;
            _2424 = _2311;
            _2426 = _2313;
            _2428 = _2315;
            _2430 = _2317;
            _2432 = _2319;
        }
        else
        {
            float _2447 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
            float _2448 = _2447 * _2162;
            float _2449 = _2447 * _2163;
            float _2450 = _2447 * _2164;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2326 < ((_2324 >> 12u) & 15u))
            {
                float _2423;
                float _2425;
                float _2427;
                float _2429;
                float _2431;
                float _2433;
                float _2561 = _2309;
                float _2562 = _2311;
                float _2563 = _2313;
                float _2564 = _2315;
                float _2565 = _2317;
                float _2566 = _2319;
                uint _2567 = _2326;
                uint _2576;
                bool _2577;
                for (;;)
                {
                    _2576 = texelFetch(g_lightClassification, int((((_2202 << 5u) + (_2188 << 9u)) + (_2567 << 2u)) >> 2u)).x;
                    _2577 = _2576 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2577)
                    {
                        frontier_phi_67_pred = _2564;
                        frontier_phi_67_pred_1 = _2565;
                        frontier_phi_67_pred_2 = _2566;
                        frontier_phi_67_pred_3 = _2563;
                        frontier_phi_67_pred_4 = _2562;
                        frontier_phi_67_pred_5 = _2561;
                    }
                    else
                    {
                        float _2761;
                        float _2762;
                        float _2763;
                        float _2764;
                        float _2765;
                        float _2766;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _2774 = _2561;
                        float _2775 = _2562;
                        float _2776 = _2563;
                        float _2777 = _2564;
                        float _2778 = _2565;
                        float _2779 = _2566;
                        uint _2780 = _2576;
                        uint _2781;
                        vec4 _2806;
                        float _2807;
                        vec4 _2822;
                        vec3 _2834;
                        vec4 _2850;
                        vec4 _2865;
                        float _2912;
                        bool _2913;
                        for (;;)
                        {
                            uint _2791 = ((_2567 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2780));
                            _2781 = (_2780 + 4294967295u) & _2780;
                            uint _2793 = _2791 * 40u;
                            _2806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 3u)).x));
                            _2807 = _2806.w;
                            uint _2809 = (_2791 * 40u) + 4u;
                            _2822 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2809)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2809 + 3u)).x));
                            uint _2824 = (_2791 * 40u) + 8u;
                            _2834 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x));
                            uint _2837 = (_2791 * 40u) + 16u;
                            _2850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 3u)).x));
                            uint _2852 = (_2791 * 40u) + 20u;
                            _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            uint _2868 = (_2791 * 40u) + 24u;
                            vec4 _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            uint _2887 = (_2791 * 40u) + 28u;
                            vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            _2912 = fma(_2164, _2900.z, fma(_2163, _2900.y, _2900.x * _2162)) + _2900.w;
                            _2913 = !((fma(_2164, _2881.z, fma(_2163, _2881.y, _2881.x * _2162)) + _2881.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2913)
                            {
                                float _2940 = _2806.x - _2162;
                                float _2941 = _2806.y - _2163;
                                float _2942 = _2806.z - _2164;
                                float _2943 = dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942));
                                float _2946 = inversesqrt(_2943);
                                float _2947 = _2946 * _2940;
                                float _2948 = _2946 * _2941;
                                float _2949 = _2946 * _2942;
                                float _2953 = 1.0 - (_2943 / (_2807 * _2807));
                                float _3989 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                                float _2954 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
                                float _2958 = sqrt(_2943) * _2822.w;
                                float _2960 = 1.39999997615814208984375 / (_2958 + 1.39999997615814208984375);
                                float _2961 = _2960 * _2960;
                                float _2964 = ((1.0 - _2961) * dot(vec3(_2947, _2948, _2949), vec3(_461, _464, _467))) + _2961;
                                float _2967 = _2958 * _2958;
                                float _2971 = (fma(_2164, _2850.z, fma(_2163, _2850.y, _2850.x * _2162)) + _2850.w) / _2912;
                                float _2972 = (fma(_2164, _2865.z, fma(_2163, _2865.y, _2865.x * _2162)) + _2865.w) / _2912;
                                float _2976 = 1.0 - dot(vec2(_2971, _2972), vec2(_2971, _2972));
                                float _4005 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                                float _2977 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
                                float _2978 = _2977 * (((isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0))) * _2954) / ((_2967 * 0.699999988079071044921875) + 1.0));
                                float _2990 = exp2(log2(1.0 / ((_2967 * 3.5) + 5.0)) * 0.25);
                                float _2991 = 1.0 - _521;
                                float _2998 = sqrt(1.0 - ((1.0 - (_2991 * _2991)) * (1.0 - (_2990 * _2990))));
                                float _2999 = _2998 * _2998;
                                float _3000 = _2999 * _2999;
                                float _3001 = _2947 - _2448;
                                float _3002 = _2948 - _2449;
                                float _3003 = _2949 - _2450;
                                float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
                                float _3011 = dot(vec3(_461, _464, _467), vec3((-0.0) - _2448, (-0.0) - _2449, (-0.0) - _2450));
                                float _4016 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                                float _3014 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                                float _3015 = dot(vec3(_461, _464, _467), vec3(_3007 * _3001, _3007 * _3002, _3007 * _3003));
                                float _4027 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                                float _3018 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                                float _3022 = ((_3018 * _3018) * (_3000 + (-1.0))) + 1.0;
                                float _3023 = _2960 * _2999;
                                float _3024 = _3023 * _3023;
                                float _3030 = ((1.0 - _3024) * dot(vec3(_461, _464, _467), vec3(_2947, _2948, _2949))) + _3024;
                                float _4038 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3031 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                                float _3032 = 1.0 - _2999;
                                float _3042 = (0.5 / (((_3031 * ((_3014 * _3032) + _2999)) + 9.9999999392252902907785028219223e-09) + (((_3031 * _3032) + _2999) * _3014))) * _3031;
                                float _4049 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3052 = (_2977 * _2954) * (((_3000 * 3.1415927410125732421875) * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) / ((_3022 * _3022) * ((_2967 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3052 * _2834.x;
                                frontier_phi_73_pred_1 = _3052 * _2834.y;
                                frontier_phi_73_pred_2 = _2978 * _2822.z;
                                frontier_phi_73_pred_3 = _2978 * _2822.y;
                                frontier_phi_73_pred_4 = _2978 * _2822.x;
                                frontier_phi_73_pred_5 = _3052 * _2834.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3056 = frontier_phi_73_pred;
                            _3057 = frontier_phi_73_pred_1;
                            _3061 = frontier_phi_73_pred_2;
                            _3060 = frontier_phi_73_pred_3;
                            _3059 = frontier_phi_73_pred_4;
                            _3058 = frontier_phi_73_pred_5;
                            _2764 = _3059 + _2777;
                            _2765 = _3060 + _2778;
                            _2766 = _3061 + _2779;
                            _2761 = _3056 + _2774;
                            _2762 = _3057 + _2775;
                            _2763 = _3058 + _2776;
                            if (_2781 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2774 = _2761;
                                _2775 = _2762;
                                _2776 = _2763;
                                _2777 = _2764;
                                _2778 = _2765;
                                _2779 = _2766;
                                _2780 = _2781;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2764;
                        frontier_phi_67_pred_1 = _2765;
                        frontier_phi_67_pred_2 = _2766;
                        frontier_phi_67_pred_3 = _2763;
                        frontier_phi_67_pred_4 = _2762;
                        frontier_phi_67_pred_5 = _2761;
                    }
                    _2429 = frontier_phi_67_pred;
                    _2431 = frontier_phi_67_pred_1;
                    _2433 = frontier_phi_67_pred_2;
                    _2427 = frontier_phi_67_pred_3;
                    _2425 = frontier_phi_67_pred_4;
                    _2423 = frontier_phi_67_pred_5;
                    uint _2568 = _2567 + 1u;
                    if (_2568 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2561 = _2423;
                        _2562 = _2425;
                        _2563 = _2427;
                        _2564 = _2429;
                        _2565 = _2431;
                        _2566 = _2433;
                        _2567 = _2568;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2431;
                frontier_phi_55_56_ladder_1 = _2433;
                frontier_phi_55_56_ladder_2 = _2429;
                frontier_phi_55_56_ladder_3 = _2427;
                frontier_phi_55_56_ladder_4 = _2425;
                frontier_phi_55_56_ladder_5 = _2423;
            }
            else
            {
                frontier_phi_55_56_ladder = _2317;
                frontier_phi_55_56_ladder_1 = _2319;
                frontier_phi_55_56_ladder_2 = _2315;
                frontier_phi_55_56_ladder_3 = _2313;
                frontier_phi_55_56_ladder_4 = _2311;
                frontier_phi_55_56_ladder_5 = _2309;
            }
            _2422 = frontier_phi_55_56_ladder_5;
            _2424 = frontier_phi_55_56_ladder_4;
            _2426 = frontier_phi_55_56_ladder_3;
            _2428 = frontier_phi_55_56_ladder_2;
            _2430 = frontier_phi_55_56_ladder;
            _2432 = frontier_phi_55_56_ladder_1;
        }
        float _2437 = isnan(1.0) ? _505 : (isnan(_505) ? 1.0 : min(_505, 1.0));
        _2221 = (_2437 * _2428) + _1676;
        _2223 = (_2437 * _2430) + _1678;
        _2225 = (_2437 * _2432) + _1680;
        _2227 = ((_2422 * 0.039999999105930328369140625) * _2437) + _2006;
        _2229 = ((_2424 * 0.039999999105930328369140625) * _2437) + _2008;
        _2231 = ((_2426 * 0.039999999105930328369140625) * _2437) + _2010;
    }
    else
    {
        _2221 = _1676;
        _2223 = _1678;
        _2225 = _1680;
        _2227 = _2006;
        _2229 = _2008;
        _2231 = _2010;
    }
    float _4065 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _4076 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _4087 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    uint _2251 = _218 + 6u;
    float _2259 = _439 / cbSceneParam._m0[86u].x;
    float _2260 = _440 / cbSceneParam._m0[86u].y;
    vec4 _2274 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2259, _2260, (log2((isnan(cbSceneParam._m0[77u].w) ? _372 : (isnan(_372) ? cbSceneParam._m0[77u].w : min(_372, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2276 = _2274.x;
    float _2277 = _2274.y;
    float _2278 = _2274.z;
    float _2279 = _2274.w;
    float _2372;
    float _2374;
    float _2376;
    float _2378;
    if (_372 > cbSceneParam._m0[78u].w)
    {
        float _2334 = isnan(_372) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _372 : min(cbSceneParam._m0[80u].w, _372));
        float _2335 = _2334 / _372;
        float _2346 = _2335 * _424;
        float _2347 = _425 * _2335;
        float _2348 = (-0.0) - _2347;
        float _2350 = _2335 * _426;
        float _2352 = (cbSceneParam._m0[77u].w * _2348) / _2334;
        float _2353 = _2352 + cbSceneParam._m0[79u].w;
        float _2354 = cbSceneParam._m0[79u].w - _2347;
        float _2360 = sqrt(((_2346 * _2346) + (_2347 * _2347)) + (_2350 * _2350));
        float _2363 = (1.0 - (cbSceneParam._m0[77u].w / _2334)) * _2360;
        float _2368 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2370 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2523;
        if (abs((_2348 - _2352) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2523 = ((((_2353 > 0.0) ? exp2(_2368 * _2353) : (2.0 - exp2(_2370 * _2353))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2363;
        }
        else
        {
            float _2483 = 1.0 / cbSceneParam._m0[80u].x;
            float _2484 = isnan(_2354) ? _2353 : (isnan(_2353) ? _2354 : max(_2353, _2354));
            float _2485 = isnan(_2354) ? _2353 : (isnan(_2353) ? _2354 : min(_2353, _2354));
            float _2494 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : min(_2484, 0.0));
            float _2495 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : min(_2485, 0.0));
            _2523 = ((abs(_2360 / _2348) * cbSceneParam._m0[80u].y) * ((((_2494 - _2495) * 2.0) - ((exp2(_2368 * (isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0)))) - exp2(_2368 * (isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0))))) * _2483)) - ((exp2(_2370 * _2494) - exp2(_2370 * _2495)) * _2483))) + (_2363 * cbSceneParam._m0[80u].z);
        }
        vec4 _2525 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2259, _2260, 1.0), 0.0);
        float _2534 = exp2((_2523 * (-1.44269502162933349609375)) * (1.0 - _2525.w));
        float _2535 = log2(_2534);
        float _2551 = log2(_2279);
        _2372 = (exp2(_2551 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2535 * cbSceneParam._m0[78u].x)) * _2525.x) / cbSceneParam._m0[78u].x)) + _2276;
        _2374 = (exp2(_2551 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2535 * cbSceneParam._m0[78u].y)) * _2525.y) / cbSceneParam._m0[78u].y)) + _2277;
        _2376 = (exp2(_2551 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2535 * cbSceneParam._m0[78u].z)) * _2525.z) / cbSceneParam._m0[78u].z)) + _2278;
        _2378 = _2534 * _2279;
    }
    else
    {
        _2372 = _2276;
        _2374 = _2277;
        _2376 = _2278;
        _2378 = _2279;
    }
    float _2390 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2391 = _2390 == 3.0;
    float _2392 = log2(_2378);
    float _2399 = exp2(_2392 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2221 + ((isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))) * _505))) + ((_2227 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _1311)) * cbPerFrame._m0[3u].x));
    float _2400 = exp2(_2392 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_2223 + ((isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0))) * _505))) + ((_2229 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _1311)) * cbPerFrame._m0[3u].x));
    float _2401 = exp2(_2392 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2225 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _505))) + ((_2231 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _1311)) * cbPerFrame._m0[3u].x));
    float _2410 = (_2390 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2410 * (_2391 ? _2399 : (_2399 + (cbSceneParam._m0[72u].w * _2372)));
    SV_Target.y = _2410 * (_2391 ? _2400 : (_2400 + (cbSceneParam._m0[72u].w * _2374)));
    SV_Target.z = _2410 * (_2391 ? _2401 : (_2401 + (cbSceneParam._m0[72u].w * _2376)));
    SV_Target.w = cbInstanceData._m0[_2251].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2251].w;
}


