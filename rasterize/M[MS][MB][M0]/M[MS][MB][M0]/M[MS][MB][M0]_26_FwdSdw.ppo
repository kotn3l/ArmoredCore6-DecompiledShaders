#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1132;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _336 = _332.z;
    float _340 = (_332.x * 2.0) + (-1.0);
    float _341 = (_332.y * 2.0) + (-1.0);
    float _342 = dot(vec2(_340, _341), vec2(_340, _341));
    float _3723 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _348 = sqrt(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))));
    float _353 = _340 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_306.x * 2.0) + (-1.0)));
    float _354 = _341 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_306.y * 2.0) + (-1.0)));
    float _357 = fma(_348, _229, fma(_354, _236, _353 * _222));
    float _360 = fma(_348, _230, fma(_354, _237, _353 * _223));
    float _363 = fma(_348, _231, fma(_354, _238, _353 * _224));
    float _367 = inversesqrt(dot(vec3(_357, _360, _363), vec3(_357, _360, _363)));
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _405 = _403.x;
    float _406 = 1.0 - _405;
    float _415 = (cbMtdParam._m0[19u].x + dot(vec4(_367 * _357, _367 * _360, _367 * _363, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_405 - _406) * cbMtdParam._m0[24u].z) + _406) * cbMtdParam._m0[21u].z);
    float _3734 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _418 = (-0.0) - cbMtdParam._m0[24u].y;
    float _420 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _421 = isnan(1.0) ? _420 : (isnan(_420) ? 1.0 : min(_420, 1.0));
    float _428 = _416 - ((_416 * TEXCOORD_8.x) * _421);
    float _429 = _416 - ((_416 * TEXCOORD_8.y) * _421);
    float _430 = _416 - ((_416 * TEXCOORD_8.z) * _421);
    float _437 = (_428 * (cbMtdParam._m0[17u].x - _286)) + _286;
    float _438 = (_429 * (cbMtdParam._m0[17u].y - _287)) + _287;
    float _439 = (_430 * (cbMtdParam._m0[17u].z - _288)) + _288;
    vec4 _451 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _453 = _451.x;
    float _454 = 1.0 - _453;
    float _484 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_453 - _454) * cbMtdParam._m0[24u].w) + _454) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3755 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _485 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _493 = ((((cbMtdParam._m0[10u].x - _437) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _485) + _437;
    float _494 = ((((cbMtdParam._m0[10u].y - _438) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _485) + _438;
    float _495 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _439)) * _485) + _439;
    float _500 = (((_306.z - _336) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _336;
    vec4 _514 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _521 = (_514.x * 2.0) + (-1.0);
    float _522 = (_514.y * 2.0) + (-1.0);
    float _523 = dot(vec2(_521, _522), vec2(_521, _522));
    float _3766 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _531 = ((_514.z - _500) * _428) + _500;
    float _534 = ((cbMtdParam._m0[23u].y - _531) * _485) + _531;
    vec4 _553 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _559 = (_553.x * 2.0) + (-1.0);
    float _560 = (_553.y * 2.0) + (-1.0);
    float _561 = dot(vec2(_559, _560), vec2(_559, _560));
    float _3777 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _576 = ((sqrt(1.0 - (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) - _348) * _430) + _348;
    float _579 = (((_521 - _353) * _428) + _353) + (cbMtdParam._m0[21u].x * _353);
    float _580 = (((_522 - _354) * _429) + _354) + (cbMtdParam._m0[21u].x * _354);
    float _591 = (((_559 - _579) + (_579 * cbMtdParam._m0[22u].z)) * _485) + _579;
    float _592 = (((_560 - _580) + (_580 * cbMtdParam._m0[22u].z)) * _485) + _580;
    float _593 = (_485 * (sqrt(1.0 - (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) - _576)) + _576;
    float _595 = cbMtdParam._m0[22u].x + _332.w;
    float _598 = fma(_593, _229, fma(_592, _236, _591 * _222));
    float _601 = fma(_593, _230, fma(_592, _237, _591 * _223));
    float _604 = fma(_593, _231, fma(_592, _238, _591 * _224));
    float _608 = inversesqrt(dot(vec3(_598, _601, _604), vec3(_598, _601, _604)));
    float _609 = _608 * _598;
    float _610 = _608 * _601;
    float _611 = _608 * _604;
    float _3788 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _612 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _3799 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _3810 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3821 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3832 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _630 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _680 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _670);
    float _681 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _670);
    float _682 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _670);
    float _686 = inversesqrt(dot(vec3(_680, _681, _682), vec3(_680, _681, _682)));
    float _687 = _680 * _686;
    float _688 = _681 * _686;
    float _689 = _682 * _686;
    float _695 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _696 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _717 = fma(_611, cbSceneParam._m0[5u].z, fma(_610, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _609));
    float _720 = fma(_611, cbSceneParam._m0[6u].z, fma(_610, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _609));
    float _723 = fma(_611, cbSceneParam._m0[7u].z, fma(_610, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _609));
    uint _737 = (_241 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _743 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) * cbInstanceData._m0[_737].x;
    float _744 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) * cbInstanceData._m0[_737].y;
    float _745 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * cbInstanceData._m0[_737].z;
    float _3843 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _3865 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    vec4 _757 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _695, cbSceneParam._m0[86u].y * _696));
    float _761 = ((isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * TEXCOORD_5.w) * _757.x;
    float _762 = dot(vec3(_609, _610, _611), vec3(_687, _688, _689));
    float _765 = _762 * 2.0;
    float _769 = (_765 * _609) - _687;
    float _770 = (_765 * _610) - _688;
    float _771 = (_765 * _611) - _689;
    float _775 = abs(dot(vec3(_687, _688, _689), vec3(_609, _610, _611)));
    float _3876 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _777 = sqrt(_612);
    float _790 = exp2((_777 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_777 * 3.0));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1131;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _856 = fma(_830, cbModelParam._m0[26u].z, fma(_826, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822));
        float _860 = fma(_830, cbModelParam._m0[27u].z, fma(_826, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822));
        float _864 = fma(_830, cbModelParam._m0[28u].z, fma(_826, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822));
        float _889 = _822 + _609;
        float _890 = _826 + _610;
        float _891 = _830 + _611;
        float _901 = fma(_891, cbModelParam._m0[26u].z, fma(_890, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _889)) - _856;
        float _902 = fma(_891, cbModelParam._m0[27u].z, fma(_890, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _889)) - _860;
        float _903 = fma(_891, cbModelParam._m0[28u].z, fma(_890, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _889)) - _864;
        float _907 = inversesqrt(dot(vec3(_901, _902, _903), vec3(_901, _902, _903)));
        float _920 = ((_907 * _901) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_856 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _921 = ((_907 * _902) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_860 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _922 = ((_907 * _903) / cbModelParam._m0[34u].z) + ((((((_864 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        float _959 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_925.x + (-0.5));
        float _961 = _959 * (_925.y + (-0.5));
        float _962 = _959 * (_925.z + (-0.5));
        float _969 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_932.x + (-0.5));
        float _971 = _969 * (_932.y + (-0.5));
        float _972 = _969 * (_932.z + (-0.5));
        float _979 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_939.x + (-0.5));
        float _981 = _979 * (_939.y + (-0.5));
        float _982 = _979 * (_939.z + (-0.5));
        float _989 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_946.x + (-0.5));
        float _991 = _989 * (_946.y + (-0.5));
        float _992 = _989 * (_946.z + (-0.5));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = _960 * 0.5;
        float _997 = _970 * 0.5;
        float _998 = _980 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1013 = (dot(vec3(_609, _610, _611), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1023 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3924 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1025 + 1.0))) + _1030) * _993;
        float _1040 = _961 * 0.5;
        float _1041 = _971 * 0.5;
        float _1042 = _981 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_609, _610, _611), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3957 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1067 + 1.0))) + _1072) * _994;
        float _1082 = _962 * 0.5;
        float _1083 = _972 * 0.5;
        float _1084 = _982 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_609, _610, _611), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3990 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1109 + 1.0))) + _1114) * _995;
        _1131 = _962;
        _1133 = _961;
        _1134 = _960;
        _1135 = _972;
        _1136 = _971;
        _1137 = _970;
        _1138 = _982;
        _1139 = _981;
        _1140 = _980;
        _1141 = _995;
        _1142 = _994;
        _1143 = _993;
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1145 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1146 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
    }
    else
    {
        _1131 = _1132;
        _1133 = _1132;
        _1134 = _1132;
        _1135 = _1132;
        _1136 = _1132;
        _1137 = _1132;
        _1138 = _1132;
        _1139 = _1132;
        _1140 = _1132;
        _1141 = _1132;
        _1142 = _1132;
        _1143 = _1132;
        _1144 = 0.0;
        _1145 = 0.0;
        _1146 = 0.0;
    }
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1171 = fma(_830, cbModelParam._m0[30u].z, fma(_826, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _822));
        float _1175 = fma(_830, cbModelParam._m0[31u].z, fma(_826, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _822));
        float _1179 = fma(_830, cbModelParam._m0[32u].z, fma(_826, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _822));
        float _1202 = _822 + _609;
        float _1203 = _826 + _610;
        float _1204 = _830 + _611;
        float _1214 = fma(_1204, cbModelParam._m0[30u].z, fma(_1203, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1202)) - _1171;
        float _1215 = fma(_1204, cbModelParam._m0[31u].z, fma(_1203, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1202)) - _1175;
        float _1216 = fma(_1204, cbModelParam._m0[32u].z, fma(_1203, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1202)) - _1179;
        float _1220 = inversesqrt(dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216)));
        float _1233 = ((_1220 * _1214) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1171 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1220 * _1215) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1175 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1220 * _1216) / cbModelParam._m0[35u].z) + ((((((_1179 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        float _1270 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1237.x + (-0.5));
        float _1272 = _1270 * (_1237.y + (-0.5));
        float _1273 = _1270 * (_1237.z + (-0.5));
        float _1280 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1244.x + (-0.5));
        float _1282 = _1280 * (_1244.y + (-0.5));
        float _1283 = _1280 * (_1244.z + (-0.5));
        float _1290 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1251.x + (-0.5));
        float _1292 = _1290 * (_1251.y + (-0.5));
        float _1293 = _1290 * (_1251.z + (-0.5));
        float _1300 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1258.x + (-0.5));
        float _1302 = _1300 * (_1258.y + (-0.5));
        float _1303 = _1300 * (_1258.z + (-0.5));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = _1271 * 0.5;
        float _1308 = _1281 * 0.5;
        float _1309 = _1291 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_609, _610, _611), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4053 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1334 + 1.0))) + _1339) * _1304;
        float _1349 = _1272 * 0.5;
        float _1350 = _1282 * 0.5;
        float _1351 = _1292 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_609, _610, _611), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4086 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1376 + 1.0))) + _1381) * _1305;
        float _1391 = _1273 * 0.5;
        float _1392 = _1283 * 0.5;
        float _1393 = _1293 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_609, _610, _611), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4119 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1418 + 1.0))) + _1423) * _1306;
        _1440 = _1273;
        _1441 = _1272;
        _1442 = _1271;
        _1443 = _1283;
        _1444 = _1282;
        _1445 = _1281;
        _1446 = _1293;
        _1447 = _1292;
        _1448 = _1291;
        _1449 = _1306;
        _1450 = _1305;
        _1451 = _1304;
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
    }
    else
    {
        _1440 = _1132;
        _1441 = _1132;
        _1442 = _1132;
        _1443 = _1132;
        _1444 = _1132;
        _1445 = _1132;
        _1446 = _1132;
        _1447 = _1132;
        _1448 = _1132;
        _1449 = _1132;
        _1450 = _1132;
        _1451 = _1132;
        _1452 = 0.0;
        _1453 = 0.0;
        _1454 = 0.0;
    }
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1144)) + _1144;
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1145)) + _1145;
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1146)) + _1146;
    float _1487 = fma(_1466, cbSceneParam._m0[89u].z, fma(_1465, cbSceneParam._m0[89u].y, _1464 * cbSceneParam._m0[89u].x));
    float _1490 = fma(_1466, cbSceneParam._m0[90u].z, fma(_1465, cbSceneParam._m0[90u].y, _1464 * cbSceneParam._m0[90u].x));
    float _1493 = fma(_1466, cbSceneParam._m0[91u].z, fma(_1465, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1464));
    float _1508 = _769 * 0.5;
    float _1509 = _770 * 0.5;
    float _1510 = _771 * 0.5;
    float _1511 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1514 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1517 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1551;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1524 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1131, _1135, _1138, _1141));
        float _1528 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1133, _1136, _1139, _1142));
        float _1532 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1134, _1137, _1140, _1143));
        float _1539 = dot(vec4(cbModelParam._m0[39u]), vec4(_1508, _1509, _1510, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1539) ? 0.0 : (isnan(0.0) ? _1539 : max(0.0, _1539))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1562;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1553 = dot(vec4(cbModelParam._m0[40u]), vec4(_1508, _1509, _1510, 1.0));
        _1562 = dot(vec3(isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1553) ? 0.0 : (isnan(0.0) ? _1553 : max(0.0, _1553))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1562 = 1.0;
    }
    float _1566 = (_1562 * cbModelParam._m0[1u].x) + (_1551 * (1.0 - cbModelParam._m0[1u].x));
    float _1576 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _612);
    float _1577 = isnan(_1576) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1576 : min(cbModelParam._m0[25u].z, _1576));
    float _1658;
    float _1660;
    float _1662;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1625 = fma(_830, cbModelParam._m0[13u].z, fma(_826, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _822)) + cbModelParam._m0[13u].w;
        float _1629 = fma(_830, cbModelParam._m0[14u].z, fma(_826, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _822)) + cbModelParam._m0[14u].w;
        float _1633 = fma(_830, cbModelParam._m0[15u].z, fma(_826, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _822)) + cbModelParam._m0[15u].w;
        float _1636 = fma(_771, cbModelParam._m0[13u].z, fma(_770, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _769));
        float _1639 = fma(_771, cbModelParam._m0[14u].z, fma(_770, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _769));
        float _1642 = fma(_771, cbModelParam._m0[15u].z, fma(_770, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _769));
        float _1670;
        if (_1636 > 0.0)
        {
            _1670 = abs((1.0 - _1625) / _1636);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1625 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1670 = frontier_phi_14_12_ladder;
        }
        float _1841;
        if (_1639 > 0.0)
        {
            _1841 = abs((1.0 - _1629) / _1639);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1629 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1841 = frontier_phi_23_19_ladder;
        }
        float _2137;
        if (_1642 > 0.0)
        {
            _2137 = abs((1.0 - _1633) / _1642);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1633 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2137 = frontier_phi_35_30_ladder;
        }
        float _2139 = isnan(_1841) ? _1670 : (isnan(_1670) ? _1841 : min(_1670, _1841));
        float _2140 = isnan(_2137) ? _2139 : (isnan(_2139) ? _2137 : min(_2139, _2137));
        float _2144 = (_2140 * _1636) + _1625;
        float _2145 = (_2140 * _1639) + _1629;
        float _2146 = (_2140 * _1642) + _1633;
        float _2147 = _2140 * 9.9999997473787516355514526367188e-05;
        float _2149 = (-1.0) - _2147;
        float _2151 = _2147 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2146 > _2151) || ((_2146 < _2149) || ((_2145 > _2151) || ((_2145 < _2149) || ((_2144 < _2149) || (_2144 > _2151))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2291 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2146, cbModelParam._m0[9u].z, fma(_2145, cbModelParam._m0[9u].y, _2144 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2146, cbModelParam._m0[10u].z, fma(_2145, cbModelParam._m0[10u].y, _2144 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2146, cbModelParam._m0[11u].z, fma(_2145, cbModelParam._m0[11u].y, _2144 * cbModelParam._m0[11u].x))), _1577);
            frontier_phi_13_35_ladder = _2291.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2291.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2291.x * cbModelParam._m0[1u].y;
        }
        _1658 = frontier_phi_13_35_ladder_2;
        _1660 = frontier_phi_13_35_ladder_1;
        _1662 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1646 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_769, _770, _771), _1577);
        _1658 = _1646.x * cbModelParam._m0[1u].y;
        _1660 = _1646.y * cbModelParam._m0[1u].y;
        _1662 = _1646.z * cbModelParam._m0[1u].y;
    }
    float _1666 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _612);
    float _1667 = isnan(_1666) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1666 : min(cbModelParam._m0[25u].w, _1666));
    float _1757;
    float _1759;
    float _1761;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1721 = fma(_830, cbModelParam._m0[21u].z, fma(_826, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _822)) + cbModelParam._m0[21u].w;
        float _1725 = fma(_830, cbModelParam._m0[22u].z, fma(_826, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _822)) + cbModelParam._m0[22u].w;
        float _1729 = fma(_830, cbModelParam._m0[23u].z, fma(_826, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _822)) + cbModelParam._m0[23u].w;
        float _1732 = fma(_771, cbModelParam._m0[21u].z, fma(_770, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _769));
        float _1735 = fma(_771, cbModelParam._m0[22u].z, fma(_770, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _769));
        float _1738 = fma(_771, cbModelParam._m0[23u].z, fma(_770, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _769));
        float _1846;
        if (_1732 > 0.0)
        {
            _1846 = abs((1.0 - _1721) / _1732);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1721 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1846 = frontier_phi_25_21_ladder;
        }
        float _2164;
        if (_1735 > 0.0)
        {
            _2164 = abs((1.0 - _1725) / _1735);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1725 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2164 = frontier_phi_37_32_ladder;
        }
        float _2491;
        if (_1738 > 0.0)
        {
            _2491 = abs((1.0 - _1729) / _1738);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1729 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2491 = frontier_phi_47_44_ladder;
        }
        float _2493 = isnan(_2164) ? _1846 : (isnan(_1846) ? _2164 : min(_1846, _2164));
        float _2494 = isnan(_2491) ? _2493 : (isnan(_2493) ? _2491 : min(_2493, _2491));
        float _2498 = (_2494 * _1732) + _1721;
        float _2499 = (_2494 * _1735) + _1725;
        float _2500 = (_2494 * _1738) + _1729;
        float _2501 = _2494 * 9.9999997473787516355514526367188e-05;
        float _2502 = (-1.0) - _2501;
        float _2504 = _2501 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2500 > _2504) || ((_2500 < _2502) || ((_2499 > _2504) || ((_2499 < _2502) || ((_2498 < _2502) || (_2498 > _2504))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2618 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2500, cbModelParam._m0[17u].z, fma(_2499, cbModelParam._m0[17u].y, _2498 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2500, cbModelParam._m0[18u].z, fma(_2499, cbModelParam._m0[18u].y, _2498 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2500, cbModelParam._m0[19u].z, fma(_2499, cbModelParam._m0[19u].y, _2498 * cbModelParam._m0[19u].x))), _1667);
            frontier_phi_22_47_ladder = _2618.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2618.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2618.x * cbModelParam._m0[1u].z;
        }
        _1757 = frontier_phi_22_47_ladder_2;
        _1759 = frontier_phi_22_47_ladder_1;
        _1761 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1741 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_769, _770, _771), _1667);
        _1757 = _1741.x * cbModelParam._m0[1u].z;
        _1759 = _1741.y * cbModelParam._m0[1u].z;
        _1761 = _1741.z * cbModelParam._m0[1u].z;
    }
    float _1773 = ((((1.0 - _790) * ((_777 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_790 * _777)) * _761;
    float _1774 = _1773 * ((cbModelParam._m0[1u].w * (_1757 - _1658)) + _1658);
    float _1775 = _1773 * ((cbModelParam._m0[1u].w * (_1759 - _1660)) + _1660);
    float _1776 = _1773 * ((cbModelParam._m0[1u].w * (_1761 - _1662)) + _1662);
    float _1779 = fma(_1776, cbSceneParam._m0[89u].z, fma(_1775, cbSceneParam._m0[89u].y, _1774 * cbSceneParam._m0[89u].x));
    float _1782 = fma(_1776, cbSceneParam._m0[90u].z, fma(_1775, cbSceneParam._m0[90u].y, _1774 * cbSceneParam._m0[90u].x));
    float _1785 = fma(_1776, cbSceneParam._m0[91u].z, fma(_1775, cbSceneParam._m0[91u].y, _1774 * cbSceneParam._m0[91u].x));
    float _1820 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1824 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1828 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1832 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1833 = _1820 / _1832;
    float _1834 = _1824 / _1832;
    float _1835 = _1828 / _1832;
    float _1982;
    float _1983;
    float _1984;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1862 = ((uint(_1835 > cbSceneParam._m0[59u].y) + uint(_1835 > cbSceneParam._m0[59u].x)) + uint(_1835 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1863 = _1862 + 43u;
        uint _1871 = _1862 + 44u;
        uint _1879 = _1862 + 45u;
        uint _1887 = _1862 + 46u;
        float _1898 = fma(_1832, cbSceneParam._m0[_1863].w, fma(_1828, cbSceneParam._m0[_1863].z, fma(_1824, cbSceneParam._m0[_1863].y, _1820 * cbSceneParam._m0[_1863].x)));
        float _1902 = fma(_1832, cbSceneParam._m0[_1871].w, fma(_1828, cbSceneParam._m0[_1871].z, fma(_1824, cbSceneParam._m0[_1871].y, _1820 * cbSceneParam._m0[_1871].x)));
        float _1910 = fma(_1832, cbSceneParam._m0[_1887].w, fma(_1828, cbSceneParam._m0[_1887].z, fma(_1824, cbSceneParam._m0[_1887].y, _1820 * cbSceneParam._m0[_1887].x)));
        float _1915 = cbSceneParam._m0[33u].z * _1910;
        float _1917 = cbSceneParam._m0[33u].w * _1910;
        float _1920 = fma(_1832, cbSceneParam._m0[_1879].w, fma(_1828, cbSceneParam._m0[_1879].z, fma(_1824, cbSceneParam._m0[_1879].y, _1820 * cbSceneParam._m0[_1879].x))) / _1910;
        float _1968 = (cbSceneParam._m0[33u].x - sqrt(((_1834 * _1834) + (_1833 * _1833)) + (_1835 * _1835))) * cbSceneParam._m0[33u].y;
        float _4245 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1975 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1915 + _1898) / _1910, (_1917 + _1902) / _1910), _1920), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1917 + _1898) / _1910, (_1902 - _1915) / _1910), _1920), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1898 - _1915) / _1910, (_1902 - _1917) / _1910), _1920), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1898 - _1917) / _1910, (_1915 + _1902) / _1910), _1920), 0.0)).x), vec4(0.25)));
        _1982 = 1.0 - (_1975 * cbSceneParam._m0[34u].x);
        _1983 = 1.0 - (_1975 * cbSceneParam._m0[34u].y);
        _1984 = 1.0 - (_1975 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1982 = 1.0;
        _1983 = 1.0;
        _1984 = 1.0;
    }
    float _2048;
    float _2050;
    float _2052;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2036 = fma(_1832, cbSceneParam._m0[63u].w, fma(_1828, cbSceneParam._m0[63u].z, fma(_1824, cbSceneParam._m0[63u].y, _1820 * cbSceneParam._m0[63u].x)));
        float _2037 = fma(_1832, cbSceneParam._m0[60u].w, fma(_1828, cbSceneParam._m0[60u].z, fma(_1824, cbSceneParam._m0[60u].y, _1820 * cbSceneParam._m0[60u].x))) / _2036;
        float _2038 = fma(_1832, cbSceneParam._m0[61u].w, fma(_1828, cbSceneParam._m0[61u].z, fma(_1824, cbSceneParam._m0[61u].y, _1820 * cbSceneParam._m0[61u].x))) / _2036;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2037 >= cbSceneParam._m0[64u].x) && (_2038 >= cbSceneParam._m0[64u].y)) && (_2037 <= cbSceneParam._m0[64u].z)) && (_2038 <= cbSceneParam._m0[64u].w))
        {
            float _2177 = fma(_1832, cbSceneParam._m0[62u].w, fma(_1828, cbSceneParam._m0[62u].z, fma(_1824, cbSceneParam._m0[62u].y, _1820 * cbSceneParam._m0[62u].x))) / _2036;
            float _2181 = isnan(cbSceneParam._m0[41u].w) ? _2177 : (isnan(_2177) ? cbSceneParam._m0[41u].w : max(_2177, cbSceneParam._m0[41u].w));
            float _2224 = (cbSceneParam._m0[33u].x - sqrt(((_1834 * _1834) + (_1833 * _1833)) + (_1835 * _1835))) * cbSceneParam._m0[33u].y;
            float _4261 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
            float _2231 = (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2037, cbSceneParam._m0[33u].w + _2038), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2037, _2038 - cbSceneParam._m0[33u].z), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2037 - cbSceneParam._m0[33u].z, _2038 - cbSceneParam._m0[33u].w), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2037 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2038), _2181), 0.0)).x), vec4(0.25)));
            float _2235 = 1.0 - (_2231 * cbSceneParam._m0[34u].x);
            float _2236 = 1.0 - (_2231 * cbSceneParam._m0[34u].y);
            float _2237 = 1.0 - (_2231 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2237) ? _1984 : (isnan(_1984) ? _2237 : min(_1984, _2237));
            frontier_phi_34_33_ladder_1 = isnan(_2236) ? _1983 : (isnan(_1983) ? _2236 : min(_1983, _2236));
            frontier_phi_34_33_ladder_2 = isnan(_2235) ? _1982 : (isnan(_1982) ? _2235 : min(_1982, _2235));
        }
        else
        {
            frontier_phi_34_33_ladder = _1984;
            frontier_phi_34_33_ladder_1 = _1983;
            frontier_phi_34_33_ladder_2 = _1982;
        }
        _2048 = frontier_phi_34_33_ladder_2;
        _2050 = frontier_phi_34_33_ladder_1;
        _2052 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2048 = _1982;
        _2050 = _1983;
        _2052 = _1984;
    }
    uvec4 _2057 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _2059 = _2057.x * 14u;
    uint _2060 = _2059 + 13u;
    float _2067 = _761 + (-1.0);
    float _2072 = (cbLight._m0[_2060].x * _2067) + 1.0;
    float _2073 = (cbLight._m0[_2060].y * _2067) + 1.0;
    float _2074 = (cbLight._m0[_2060].z * _2067) + 1.0;
    float _2075 = (cbLight._m0[_2060].w * _2067) + 1.0;
    uint _2076 = _2059 + 5u;
    float _2082 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
    uint _2086 = _2059 + 4u;
    float _2096 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
    uint _2100 = _2059 | 1u;
    float _2111 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_609, _610, _611));
    float _2114 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_609, _610, _611));
    float _4297 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _4308 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2119 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * 0.3183098733425140380859375;
    float _2121 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * 0.3183098733425140380859375;
    float _2128 = ((cbLight._m0[_2076].x * _2082) * _2121) + (((cbLight._m0[_2086].x * _2048) * _2096) * _2119);
    float _2129 = ((_2082 * cbLight._m0[_2076].y) * _2121) + (((cbLight._m0[_2086].y * _2050) * _2096) * _2119);
    float _2130 = ((_2082 * cbLight._m0[_2076].z) * _2121) + (((cbLight._m0[_2086].z * _2052) * _2096) * _2119);
    uvec4 _2134 = floatBitsToUint(cbLight._m0[_2059 + 12u]);
    bool _2136 = _2134.x == 0u;
    float _2238;
    float _2240;
    float _2242;
    if (_2136)
    {
        _2238 = _2128;
        _2240 = _2129;
        _2242 = _2130;
    }
    else
    {
        uint _2246 = _2059 + 6u;
        float _2262 = (dot(vec3(cbLight._m0[_2059 + 2u].xyz), vec3(_609, _610, _611)) * 0.5) + 0.5;
        float _2263 = _2262 * _2262;
        float _4319 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2264 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2265 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2238 = (((cbLight._m0[_2246].x * 0.3183098733425140380859375) * _2264) * _2265) + _2128;
        _2240 = (((cbLight._m0[_2246].y * 0.3183098733425140380859375) * _2264) * _2265) + _2129;
        _2242 = (((cbLight._m0[_2246].z * 0.3183098733425140380859375) * _2264) * _2265) + _2130;
    }
    bool _2245 = _2134.y == 0u;
    float _2300;
    float _2302;
    float _2304;
    if (_2245)
    {
        _2300 = _2238;
        _2302 = _2240;
        _2304 = _2242;
    }
    else
    {
        uint _2462 = _2059 + 7u;
        float _2478 = (dot(vec3(cbLight._m0[_2059 + 3u].xyz), vec3(_609, _610, _611)) * 0.5) + 0.5;
        float _2479 = _2478 * _2478;
        float _4335 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2480 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2481 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
        _2300 = (((cbLight._m0[_2462].x * 0.3183098733425140380859375) * _2480) * _2481) + _2238;
        _2302 = (((cbLight._m0[_2462].y * 0.3183098733425140380859375) * _2480) * _2481) + _2240;
        _2304 = (((cbLight._m0[_2462].z * 0.3183098733425140380859375) * _2480) * _2481) + _2242;
    }
    uint _2307 = _2059 + 8u;
    float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2059].w)) * _612) * 0.949999988079071044921875);
    float _2321 = _2320 * _2320;
    float _2322 = cbLight._m0[_2059].x + _687;
    float _2323 = cbLight._m0[_2059].y + _688;
    float _2324 = cbLight._m0[_2059].z + _689;
    float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
    float _2329 = _2328 * _2322;
    float _2330 = _2328 * _2323;
    float _2331 = _2328 * _2324;
    float _2332 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_2059].xyz));
    float _4351 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _4362 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _2336 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _2337 = dot(vec3(_609, _610, _611), vec3(_2329, _2330, _2331));
    float _4373 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2340 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _2341 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_2329, _2330, _2331));
    float _4384 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2345 = _2321 * _2321;
    float _2349 = ((_2340 * _2340) * (_2345 + (-1.0))) + 1.0;
    float _2360 = (exp2(log2(1.0 - (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2361 = 1.0 - _2321;
    float _2372 = (0.5 / (((_2336 * ((_2335 * _2361) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2361) + _2321) * _2335))) * _2335;
    float _4395 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2374 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2345 / ((_2349 * _2349) * 3.141590118408203125));
    uint _2388 = _2059 + 9u;
    float _2399 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2100].w)) * _612) * 0.949999988079071044921875);
    float _2400 = _2399 * _2399;
    float _2401 = cbLight._m0[_2100].x + _687;
    float _2402 = cbLight._m0[_2100].y + _688;
    float _2403 = cbLight._m0[_2100].z + _689;
    float _2407 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
    float _2408 = _2407 * _2401;
    float _2409 = _2407 * _2402;
    float _2410 = _2407 * _2403;
    float _2411 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_2100].xyz));
    float _4406 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _2415 = dot(vec3(_609, _610, _611), vec3(_2408, _2409, _2410));
    float _4417 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2418 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2419 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_2408, _2409, _2410));
    float _4428 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2423 = _2400 * _2400;
    float _2427 = ((_2418 * _2418) * (_2423 + (-1.0))) + 1.0;
    float _2436 = (exp2(log2(1.0 - (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2437 = 1.0 - _2400;
    float _2447 = (0.5 / (((_2336 * ((_2414 * _2437) + _2400)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2437) + _2400) * _2414))) * _2414;
    float _4439 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2449 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2423 / ((_2427 * _2427) * 3.141590118408203125));
    float _2459 = (((_2436 * cbLight._m0[_2388].x) * _2449) * _2082) + ((((cbLight._m0[_2307].x * _2048) * _2360) * _2374) * _2096);
    float _2460 = (((_2436 * cbLight._m0[_2388].y) * _2449) * _2082) + ((((cbLight._m0[_2307].y * _2050) * _2360) * _2374) * _2096);
    float _2461 = (((_2436 * cbLight._m0[_2388].z) * _2449) * _2082) + ((((cbLight._m0[_2307].z * _2052) * _2360) * _2374) * _2096);
    float _2517;
    float _2519;
    float _2521;
    if (_2136)
    {
        _2517 = _2459;
        _2519 = _2460;
        _2521 = _2461;
    }
    else
    {
        uint _2523 = _2059 + 2u;
        uint _2527 = _2059 + 10u;
        float _2541 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2523].w)) * _612) * 0.949999988079071044921875);
        float _2542 = _2541 * _2541;
        float _2543 = cbLight._m0[_2523].x + _687;
        float _2544 = cbLight._m0[_2523].y + _688;
        float _2545 = cbLight._m0[_2523].z + _689;
        float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
        float _2550 = _2549 * _2543;
        float _2551 = _2549 * _2544;
        float _2552 = _2549 * _2545;
        float _2553 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_2523].xyz));
        float _4450 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2556 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _2557 = dot(vec3(_609, _610, _611), vec3(_2550, _2551, _2552));
        float _4461 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2560 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2561 = dot(vec3(cbLight._m0[_2523].xyz), vec3(_2550, _2551, _2552));
        float _4472 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2565 = _2542 * _2542;
        float _2569 = ((_2560 * _2560) * (_2565 + (-1.0))) + 1.0;
        float _2578 = (exp2(log2(1.0 - (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2579 = 1.0 - _2542;
        float _2589 = (0.5 / (((_2336 * ((_2556 * _2579) + _2542)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2579) + _2542) * _2556))) * _2556;
        float _4483 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2591 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2565 / ((_2569 * _2569) * 3.141590118408203125));
        float _2592 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2517 = (((_2578 * cbLight._m0[_2527].x) * _2591) * _2592) + _2459;
        _2519 = (((_2578 * cbLight._m0[_2527].y) * _2591) * _2592) + _2460;
        _2521 = (((_2578 * cbLight._m0[_2527].z) * _2591) * _2592) + _2461;
    }
    float _2623;
    float _2625;
    float _2627;
    if (_2245)
    {
        _2623 = _2517;
        _2625 = _2519;
        _2627 = _2521;
    }
    else
    {
        uint _2634 = _2059 + 3u;
        uint _2638 = _2059 + 11u;
        float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2634].w)) * _612) * 0.949999988079071044921875);
        float _2653 = _2652 * _2652;
        float _2654 = cbLight._m0[_2634].x + _687;
        float _2655 = cbLight._m0[_2634].y + _688;
        float _2656 = cbLight._m0[_2634].z + _689;
        float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
        float _2661 = _2660 * _2654;
        float _2662 = _2660 * _2655;
        float _2663 = _2660 * _2656;
        float _2664 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_2634].xyz));
        float _4499 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2668 = dot(vec3(_609, _610, _611), vec3(_2661, _2662, _2663));
        float _4510 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2671 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2672 = dot(vec3(cbLight._m0[_2634].xyz), vec3(_2661, _2662, _2663));
        float _4521 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2676 = _2653 * _2653;
        float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
        float _2689 = (exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2690 = 1.0 - _2653;
        float _2700 = (0.5 / (((_2336 * ((_2667 * _2690) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2690) + _2653) * _2667))) * _2667;
        float _4532 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2702 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
        float _2703 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
        _2623 = (((_2689 * cbLight._m0[_2638].x) * _2702) * _2703) + _2517;
        _2625 = (((_2689 * cbLight._m0[_2638].y) * _2702) * _2703) + _2519;
        _2627 = (((_2689 * cbLight._m0[_2638].z) * _2702) * _2703) + _2521;
    }
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    if (_2057.y == 0u)
    {
        uvec4 _2724 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2725 = _2724.x;
        uint _2736 = uint((float(_2724.y) * floor(float(uint(cbSceneParam._m0[85u].y * _696) / _2725))) + floor(float(uint(cbSceneParam._m0[85u].x * _695) / _2725)));
        float _2746 = (log2(_1835 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2747 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        uint _2750 = uint(isnan(14.0) ? _2747 : (isnan(_2747) ? 14.0 : min(_2747, 14.0)));
        uvec4 _2755 = texelFetch(g_lightClusterGridBuffer, int(((_2750 << 2u) + (_2736 << 6u)) >> 2u));
        uint _2756 = _2755.x;
        uint _2757 = _2724.z;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        if (((((1u << ((_2757 >> 4u) & 15u)) + 4294967295u) & _2756) == 0u) || ((_2757 & 240u) == 0u))
        {
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
        }
        else
        {
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2847;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            uint _2986 = 0u;
            uint _2995;
            bool _2996;
            for (;;)
            {
                _2995 = texelFetch(g_lightClassification, int((((_2750 << 5u) + (_2736 << 9u)) + (_2986 << 2u)) >> 2u)).x;
                _2996 = _2995 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2996)
                {
                    frontier_phi_66_pred = _2985;
                    frontier_phi_66_pred_1 = _2984;
                    frontier_phi_66_pred_2 = _2983;
                    frontier_phi_66_pred_3 = _2982;
                    frontier_phi_66_pred_4 = _2981;
                    frontier_phi_66_pred_5 = _2980;
                }
                else
                {
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    uint _3110;
                    _3104 = _2980;
                    _3105 = _2981;
                    _3106 = _2982;
                    _3107 = _2983;
                    _3108 = _2984;
                    _3109 = _2985;
                    _3110 = _2995;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    for (;;)
                    {
                        uint _3114 = uint(findLSB(_3110)) + (_2986 << 5u);
                        uint _3111 = (_3110 + 4294967295u) & _3110;
                        uint _3116 = _3114 * 48u;
                        vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3116)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 3u)).x));
                        uint _3136 = (_3114 * 48u) + 4u;
                        vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3136)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 3u)).x));
                        uint _3155 = (_3114 * 48u) + 8u;
                        vec3 _3166 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3155)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 2u)).x));
                        float _3170 = _3130.x - _1833;
                        float _3171 = _3130.y - _1834;
                        float _3172 = _3130.z - _1835;
                        float _3173 = dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172));
                        float _3176 = inversesqrt(_3173);
                        float _3177 = _3176 * _3170;
                        float _3178 = _3176 * _3171;
                        float _3179 = _3176 * _3172;
                        float _3180 = dot(vec3(_717, _720, _723), vec3(_3177, _3178, _3179));
                        float _3185 = 1.0 - (_3173 * _3130.w);
                        float _4558 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3186 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3187 = sqrt(_3173) * _3149.w;
                        float _3190 = 1.39999997615814208984375 / (_3187 + 1.39999997615814208984375);
                        float _3191 = _3190 * _3190;
                        float _3194 = ((1.0 - _3191) * _3180) + _3191;
                        float _3197 = _3187 * _3187;
                        float _3201 = ((isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0))) * _3186) / ((_3197 * 0.699999988079071044921875) + 1.0);
                        float _3205 = (-0.0) - _1833;
                        float _3206 = (-0.0) - _1834;
                        float _3207 = (-0.0) - _1835;
                        float _3211 = inversesqrt(dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207)));
                        float _3212 = _3211 * _3205;
                        float _3213 = _3211 * _3206;
                        float _3214 = _3211 * _3207;
                        float _3221 = exp2(log2(1.0 / ((_3197 * 3.5) + 5.0)) * 0.25);
                        float _3222 = 1.0 - _777;
                        float _3229 = sqrt(1.0 - ((1.0 - (_3222 * _3222)) * (1.0 - (_3221 * _3221))));
                        float _3230 = _3229 * _3229;
                        float _3231 = _3230 * _3230;
                        float _3232 = _3212 + _3177;
                        float _3233 = _3213 + _3178;
                        float _3234 = _3214 + _3179;
                        float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                        float _3242 = dot(vec3(_717, _720, _723), vec3(_3212, _3213, _3214));
                        float _4574 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3245 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                        float _3246 = dot(vec3(_717, _720, _723), vec3(_3238 * _3232, _3238 * _3233, _3238 * _3234));
                        float _4585 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3249 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                        float _3253 = ((_3249 * _3249) * (_3231 + (-1.0))) + 1.0;
                        float _3254 = _3190 * _3230;
                        float _3255 = _3254 * _3254;
                        float _3258 = ((1.0 - _3255) * _3180) + _3255;
                        float _4596 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3259 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3260 = 1.0 - _3230;
                        float _3270 = (0.5 / (((_3259 * ((_3245 * _3260) + _3230)) + 9.9999999392252902907785028219223e-09) + (((_3259 * _3260) + _3230) * _3245))) * _3259;
                        float _4607 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3281 = (((_3231 * 3.1415927410125732421875) * (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) / ((_3253 * _3253) * ((_3197 * 2.1991131305694580078125) + 3.141590118408203125))) * _3186;
                        _3039 = (_3201 * _3149.x) + _3107;
                        _3040 = (_3201 * _3149.y) + _3108;
                        _3041 = (_3201 * _3149.z) + _3109;
                        _3036 = (_3281 * _3166.x) + _3104;
                        _3037 = (_3281 * _3166.y) + _3105;
                        _3038 = (_3281 * _3166.z) + _3106;
                        if (_3111 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3104 = _3036;
                            _3105 = _3037;
                            _3106 = _3038;
                            _3107 = _3039;
                            _3108 = _3040;
                            _3109 = _3041;
                            _3110 = _3111;
                        }
                    }
                    frontier_phi_66_pred = _3041;
                    frontier_phi_66_pred_1 = _3040;
                    frontier_phi_66_pred_2 = _3039;
                    frontier_phi_66_pred_3 = _3038;
                    frontier_phi_66_pred_4 = _3037;
                    frontier_phi_66_pred_5 = _3036;
                }
                _2847 = frontier_phi_66_pred;
                _2845 = frontier_phi_66_pred_1;
                _2843 = frontier_phi_66_pred_2;
                _2841 = frontier_phi_66_pred_3;
                _2839 = frontier_phi_66_pred_4;
                _2837 = frontier_phi_66_pred_5;
                uint _2987 = _2986 + 1u;
                if (_2987 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2980 = _2837;
                    _2981 = _2839;
                    _2982 = _2841;
                    _2983 = _2843;
                    _2984 = _2845;
                    _2985 = _2847;
                    _2986 = _2987;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
        }
        uvec4 _2850 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2851 = _2850.z;
        uint _2853 = (_2851 >> 8u) & 15u;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        if (((4294967295u << _2853) & _2756) == 0u)
        {
            _2948 = _2836;
            _2950 = _2838;
            _2952 = _2840;
            _2954 = _2842;
            _2956 = _2844;
            _2958 = _2846;
        }
        else
        {
            float _2973 = inversesqrt(dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835)));
            float _2974 = _2973 * _1833;
            float _2975 = _2973 * _1834;
            float _2976 = _2973 * _1835;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2853 < ((_2851 >> 12u) & 15u))
            {
                float _2949;
                float _2951;
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _3087 = _2836;
                float _3088 = _2838;
                float _3089 = _2840;
                float _3090 = _2842;
                float _3091 = _2844;
                float _3092 = _2846;
                uint _3093 = _2853;
                uint _3102;
                bool _3103;
                for (;;)
                {
                    _3102 = texelFetch(g_lightClassification, int((((_2750 << 5u) + (_2736 << 9u)) + (_3093 << 2u)) >> 2u)).x;
                    _3103 = _3102 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3103)
                    {
                        frontier_phi_72_pred = _3092;
                        frontier_phi_72_pred_1 = _3091;
                        frontier_phi_72_pred_2 = _3090;
                        frontier_phi_72_pred_3 = _3089;
                        frontier_phi_72_pred_4 = _3088;
                        frontier_phi_72_pred_5 = _3087;
                    }
                    else
                    {
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3299 = _3087;
                        float _3300 = _3088;
                        float _3301 = _3089;
                        float _3302 = _3090;
                        float _3303 = _3091;
                        float _3304 = _3092;
                        uint _3305 = _3102;
                        uint _3306;
                        vec4 _3331;
                        float _3332;
                        vec4 _3347;
                        vec3 _3359;
                        vec4 _3375;
                        vec4 _3390;
                        float _3436;
                        bool _3437;
                        for (;;)
                        {
                            uint _3316 = ((_3093 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3305));
                            _3306 = (_3305 + 4294967295u) & _3305;
                            uint _3318 = _3316 * 40u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            _3332 = _3331.w;
                            uint _3334 = (_3316 * 40u) + 4u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3349 = (_3316 * 40u) + 8u;
                            _3359 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x));
                            uint _3362 = (_3316 * 40u) + 16u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3377 = (_3316 * 40u) + 20u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3392 = (_3316 * 40u) + 24u;
                            vec4 _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3411 = (_3316 * 40u) + 28u;
                            vec4 _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            _3436 = fma(_1835, _3424.z, fma(_1834, _3424.y, _3424.x * _1833)) + _3424.w;
                            _3437 = !((fma(_1835, _3405.z, fma(_1834, _3405.y, _3405.x * _1833)) + _3405.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3437)
                            {
                                float _3464 = _3331.x - _1833;
                                float _3465 = _3331.y - _1834;
                                float _3466 = _3331.z - _1835;
                                float _3467 = dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466));
                                float _3470 = inversesqrt(_3467);
                                float _3471 = _3470 * _3464;
                                float _3472 = _3470 * _3465;
                                float _3473 = _3470 * _3466;
                                float _3477 = 1.0 - (_3467 / (_3332 * _3332));
                                float _4618 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3478 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3482 = sqrt(_3467) * _3347.w;
                                float _3484 = 1.39999997615814208984375 / (_3482 + 1.39999997615814208984375);
                                float _3485 = _3484 * _3484;
                                float _3488 = ((1.0 - _3485) * dot(vec3(_3471, _3472, _3473), vec3(_717, _720, _723))) + _3485;
                                float _3491 = _3482 * _3482;
                                float _3495 = (fma(_1835, _3375.z, fma(_1834, _3375.y, _3375.x * _1833)) + _3375.w) / _3436;
                                float _3496 = (fma(_1835, _3390.z, fma(_1834, _3390.y, _3390.x * _1833)) + _3390.w) / _3436;
                                float _3500 = 1.0 - dot(vec2(_3495, _3496), vec2(_3495, _3496));
                                float _4634 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3501 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                                float _3502 = _3501 * (((isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0))) * _3478) / ((_3491 * 0.699999988079071044921875) + 1.0));
                                float _3514 = exp2(log2(1.0 / ((_3491 * 3.5) + 5.0)) * 0.25);
                                float _3515 = 1.0 - _777;
                                float _3522 = sqrt(1.0 - ((1.0 - (_3515 * _3515)) * (1.0 - (_3514 * _3514))));
                                float _3523 = _3522 * _3522;
                                float _3524 = _3523 * _3523;
                                float _3525 = _3471 - _2974;
                                float _3526 = _3472 - _2975;
                                float _3527 = _3473 - _2976;
                                float _3531 = inversesqrt(dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527)));
                                float _3535 = dot(vec3(_717, _720, _723), vec3((-0.0) - _2974, (-0.0) - _2975, (-0.0) - _2976));
                                float _4645 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3538 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3539 = dot(vec3(_717, _720, _723), vec3(_3531 * _3525, _3531 * _3526, _3531 * _3527));
                                float _4656 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3542 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3546 = ((_3542 * _3542) * (_3524 + (-1.0))) + 1.0;
                                float _3547 = _3484 * _3523;
                                float _3548 = _3547 * _3547;
                                float _3554 = ((1.0 - _3548) * dot(vec3(_717, _720, _723), vec3(_3471, _3472, _3473))) + _3548;
                                float _4667 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3555 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3556 = 1.0 - _3523;
                                float _3566 = (0.5 / (((_3555 * ((_3538 * _3556) + _3523)) + 9.9999999392252902907785028219223e-09) + (((_3555 * _3556) + _3523) * _3538))) * _3555;
                                float _4678 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3576 = (_3501 * _3478) * (((_3524 * 3.1415927410125732421875) * (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) / ((_3546 * _3546) * ((_3491 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3502 * _3347.y;
                                frontier_phi_78_pred_1 = _3502 * _3347.x;
                                frontier_phi_78_pred_2 = _3576 * _3359.z;
                                frontier_phi_78_pred_3 = _3576 * _3359.y;
                                frontier_phi_78_pred_4 = _3576 * _3359.x;
                                frontier_phi_78_pred_5 = _3502 * _3347.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3584 = frontier_phi_78_pred;
                            _3583 = frontier_phi_78_pred_1;
                            _3582 = frontier_phi_78_pred_2;
                            _3581 = frontier_phi_78_pred_3;
                            _3580 = frontier_phi_78_pred_4;
                            _3585 = frontier_phi_78_pred_5;
                            _3289 = _3583 + _3302;
                            _3290 = _3584 + _3303;
                            _3291 = _3585 + _3304;
                            _3286 = _3580 + _3299;
                            _3287 = _3581 + _3300;
                            _3288 = _3582 + _3301;
                            if (_3306 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3306;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3291;
                        frontier_phi_72_pred_1 = _3290;
                        frontier_phi_72_pred_2 = _3289;
                        frontier_phi_72_pred_3 = _3288;
                        frontier_phi_72_pred_4 = _3287;
                        frontier_phi_72_pred_5 = _3286;
                    }
                    _2959 = frontier_phi_72_pred;
                    _2957 = frontier_phi_72_pred_1;
                    _2955 = frontier_phi_72_pred_2;
                    _2953 = frontier_phi_72_pred_3;
                    _2951 = frontier_phi_72_pred_4;
                    _2949 = frontier_phi_72_pred_5;
                    uint _3094 = _3093 + 1u;
                    if (_3094 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3087 = _2949;
                        _3088 = _2951;
                        _3089 = _2953;
                        _3090 = _2955;
                        _3091 = _2957;
                        _3092 = _2959;
                        _3093 = _3094;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2959;
                frontier_phi_60_61_ladder_1 = _2957;
                frontier_phi_60_61_ladder_2 = _2953;
                frontier_phi_60_61_ladder_3 = _2951;
                frontier_phi_60_61_ladder_4 = _2949;
                frontier_phi_60_61_ladder_5 = _2955;
            }
            else
            {
                frontier_phi_60_61_ladder = _2846;
                frontier_phi_60_61_ladder_1 = _2844;
                frontier_phi_60_61_ladder_2 = _2840;
                frontier_phi_60_61_ladder_3 = _2838;
                frontier_phi_60_61_ladder_4 = _2836;
                frontier_phi_60_61_ladder_5 = _2842;
            }
            _2948 = frontier_phi_60_61_ladder_4;
            _2950 = frontier_phi_60_61_ladder_3;
            _2952 = frontier_phi_60_61_ladder_2;
            _2954 = frontier_phi_60_61_ladder_5;
            _2956 = frontier_phi_60_61_ladder_1;
            _2958 = frontier_phi_60_61_ladder;
        }
        float _2963 = isnan(1.0) ? _761 : (isnan(_761) ? 1.0 : min(_761, 1.0));
        _2769 = (_2963 * _2954) + _2300;
        _2771 = (_2963 * _2956) + _2302;
        _2773 = (_2963 * _2958) + _2304;
        _2775 = ((_2948 * 0.039999999105930328369140625) * _2963) + _2623;
        _2777 = ((_2950 * 0.039999999105930328369140625) * _2963) + _2625;
        _2779 = ((_2952 * 0.039999999105930328369140625) * _2963) + _2627;
    }
    else
    {
        _2769 = _2300;
        _2771 = _2302;
        _2773 = _2304;
        _2775 = _2623;
        _2777 = _2625;
        _2779 = _2627;
    }
    float _4694 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4705 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4716 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    uint _2799 = _241 + 6u;
    float _2807 = _695 / cbSceneParam._m0[86u].x;
    float _2808 = _696 / cbSceneParam._m0[86u].y;
    vec4 _2822 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, (log2((isnan(cbSceneParam._m0[77u].w) ? _630 : (isnan(_630) ? cbSceneParam._m0[77u].w : min(_630, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2824 = _2822.x;
    float _2825 = _2822.y;
    float _2826 = _2822.z;
    float _2827 = _2822.w;
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    if (_630 > cbSceneParam._m0[78u].w)
    {
        float _2861 = isnan(_630) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _630 : min(cbSceneParam._m0[80u].w, _630));
        float _2862 = _2861 / _630;
        float _2873 = _2862 * _680;
        float _2874 = _681 * _2862;
        float _2875 = (-0.0) - _2874;
        float _2876 = _2862 * _682;
        float _2878 = (cbSceneParam._m0[77u].w * _2875) / _2861;
        float _2879 = _2878 + cbSceneParam._m0[79u].w;
        float _2880 = cbSceneParam._m0[79u].w - _2874;
        float _2886 = sqrt(((_2873 * _2873) + (_2874 * _2874)) + (_2876 * _2876));
        float _2889 = (1.0 - (cbSceneParam._m0[77u].w / _2861)) * _2886;
        float _2894 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2896 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3049;
        if (abs((_2875 - _2878) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3049 = ((((_2879 > 0.0) ? exp2(_2894 * _2879) : (2.0 - exp2(_2896 * _2879))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2889;
        }
        else
        {
            float _3009 = 1.0 / cbSceneParam._m0[80u].x;
            float _3010 = isnan(_2880) ? _2879 : (isnan(_2879) ? _2880 : max(_2879, _2880));
            float _3011 = isnan(_2880) ? _2879 : (isnan(_2879) ? _2880 : min(_2879, _2880));
            float _3020 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : min(_3010, 0.0));
            float _3021 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : min(_3011, 0.0));
            _3049 = ((abs(_2886 / _2875) * cbSceneParam._m0[80u].y) * ((((_3020 - _3021) * 2.0) - ((exp2(_2894 * (isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0)))) - exp2(_2894 * (isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0))))) * _3009)) - ((exp2(_2896 * _3020) - exp2(_2896 * _3021)) * _3009))) + (_2889 * cbSceneParam._m0[80u].z);
        }
        vec4 _3051 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, 1.0), 0.0);
        float _3060 = exp2((_3049 * (-1.44269502162933349609375)) * (1.0 - _3051.w));
        float _3061 = log2(_3060);
        float _3077 = log2(_2827);
        _2898 = (exp2(_3077 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3061 * cbSceneParam._m0[78u].x)) * _3051.x) / cbSceneParam._m0[78u].x)) + _2824;
        _2900 = (exp2(_3077 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3061 * cbSceneParam._m0[78u].y)) * _3051.y) / cbSceneParam._m0[78u].y)) + _2825;
        _2902 = (exp2(_3077 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3061 * cbSceneParam._m0[78u].z)) * _3051.z) / cbSceneParam._m0[78u].z)) + _2826;
        _2904 = _3060 * _2827;
    }
    else
    {
        _2898 = _2824;
        _2900 = _2825;
        _2902 = _2826;
        _2904 = _2827;
    }
    float _2916 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2917 = _2916 == 3.0;
    float _2918 = log2(_2904);
    float _2925 = exp2(_2918 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2769 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _761))) + ((_2775 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1566)) * cbPerFrame._m0[3u].x));
    float _2926 = exp2(_2918 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2771 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _761))) + ((_2777 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1566)) * cbPerFrame._m0[3u].x));
    float _2927 = exp2(_2918 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2773 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _761))) + ((_2779 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1566)) * cbPerFrame._m0[3u].x));
    float _2936 = (_2916 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2936 * (_2917 ? _2925 : (_2925 + (cbSceneParam._m0[72u].w * _2898)));
    SV_Target.y = _2936 * (_2917 ? _2926 : (_2926 + (cbSceneParam._m0[72u].w * _2900)));
    SV_Target.z = _2936 * (_2917 ? _2927 : (_2927 + (cbSceneParam._m0[72u].w * _2902)));
    SV_Target.w = cbInstanceData._m0[_2799].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2799].w;
}


