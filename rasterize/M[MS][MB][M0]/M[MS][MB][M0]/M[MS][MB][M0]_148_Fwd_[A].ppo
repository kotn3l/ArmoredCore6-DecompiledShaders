#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1381;
float _3738;
float _3739;
float _3740;
float _3741;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _239 = _238 * _230;
    float _240 = _238 * _231;
    float _241 = _238 * _232;
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = _252 * TANGENT.x;
    float _254 = _252 * TANGENT.y;
    float _255 = _252 * TANGENT.z;
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3750 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3761 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3772 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _408 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _408) * cbMtdParam._m0[24u].x) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3783 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _433 = (_426 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _434 = (_426 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _435 = (_426 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _439 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _433;
    float _442 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _434;
    float _445 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _435;
    float _452 = ((_433 - _439) * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) + _439;
    float _453 = ((_434 - _442) * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) + _442;
    float _454 = ((_435 - _445) * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) + _445;
    vec4 _473 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _296) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _297) + cbTextureTilingScale._m0[14u].w));
    vec4 _493 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _520 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _537 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _541 = _537.z;
    float _550 = ((_520.z - _541) * _426) + _541;
    float _553 = ((((_520.x - _539) * _426) + _539) * 2.0) + (-1.0);
    float _554 = ((((_520.y - _540) * _426) + _540) * 2.0) + (-1.0);
    float _555 = dot(vec2(_553, _554), vec2(_553, _554));
    float _3794 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _560 = sqrt(1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))));
    float _563 = _553 + ((((_493.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _564 = _554 + ((((_493.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _567 = fma(_560, _246, fma(_564, _253, _563 * _239));
    float _570 = fma(_560, _247, fma(_564, _254, _563 * _240));
    float _573 = fma(_560, _248, fma(_564, _255, _563 * _241));
    float _577 = inversesqrt(dot(vec3(_567, _570, _573), vec3(_567, _570, _573)));
    vec4 _593 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _621 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _296) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _297) + cbTextureTilingScale._m0[11u].w));
    float _623 = _621.x;
    float _624 = 1.0 - _623;
    float _630 = (cbMtdParam._m0[19u].x + dot(vec4(_577 * _567, _577 * _570, _577 * _573, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_623 - _624) * cbMtdParam._m0[24u].z) + _624) * cbMtdParam._m0[21u].z);
    float _3805 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _631 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _633 = (-0.0) - cbMtdParam._m0[24u].y;
    float _635 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _635 : (isnan(_635) ? 1.0 : min(_635, 1.0));
    float _643 = _631 - ((_631 * TEXCOORD_8.x) * _636);
    float _644 = _631 - ((_631 * TEXCOORD_8.y) * _636);
    float _645 = _631 - ((_631 * TEXCOORD_8.z) * _636);
    float _652 = (_643 * ((_473.x * cbMtdParam._m0[18u].x) - _452)) + _452;
    float _653 = (_644 * ((_473.y * cbMtdParam._m0[18u].y) - _453)) + _453;
    float _654 = (_645 * ((_473.z * cbMtdParam._m0[18u].z) - _454)) + _454;
    vec4 _666 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _668 = _666.x;
    float _669 = 1.0 - _668;
    float _695 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_668 - _669) * cbMtdParam._m0[24u].w) + _669) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3826 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _696 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _704 = ((((cbMtdParam._m0[10u].x - _652) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _696) + _652;
    float _705 = ((((cbMtdParam._m0[10u].y - _653) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _696) + _653;
    float _706 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _654)) * _696) + _654;
    float _711 = (((_493.z - _550) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _550;
    vec4 _725 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _296) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _297) + cbTextureTilingScale._m0[15u].w));
    float _732 = (_725.x * 2.0) + (-1.0);
    float _733 = (_725.y * 2.0) + (-1.0);
    float _734 = dot(vec2(_732, _733), vec2(_732, _733));
    float _3837 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _742 = ((_725.z - _711) * _643) + _711;
    float _745 = ((cbMtdParam._m0[23u].y - _742) * _696) + _742;
    vec4 _764 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _770 = (_764.x * 2.0) + (-1.0);
    float _771 = (_764.y * 2.0) + (-1.0);
    float _772 = dot(vec2(_770, _771), vec2(_770, _771));
    float _3848 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _787 = ((sqrt(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) - _560) * _645) + _560;
    float _790 = (((_732 - _563) * _643) + _563) + (cbMtdParam._m0[21u].x * _563);
    float _791 = (((_733 - _564) * _644) + _564) + (cbMtdParam._m0[21u].x * _564);
    float _802 = (((_770 - _790) + (_790 * cbMtdParam._m0[22u].z)) * _696) + _790;
    float _803 = (((_771 - _791) + (_791 * cbMtdParam._m0[22u].z)) * _696) + _791;
    float _804 = (_696 * (sqrt(1.0 - (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) - _787)) + _787;
    float _806 = cbMtdParam._m0[22u].x + _593.w;
    float _809 = fma(_804, _246, fma(_803, _253, _802 * _239));
    float _812 = fma(_804, _247, fma(_803, _254, _802 * _240));
    float _815 = fma(_804, _248, fma(_803, _255, _802 * _241));
    float _819 = inversesqrt(dot(vec3(_809, _812, _815), vec3(_809, _812, _815)));
    float _820 = _819 * _809;
    float _821 = _819 * _812;
    float _822 = _819 * _815;
    float _3859 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _823 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _3881 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _3892 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _3903 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _841 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _892 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _882);
    float _893 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _882);
    float _894 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _882);
    float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
    float _899 = _892 * _898;
    float _900 = _893 * _898;
    float _901 = _894 * _898;
    vec4 _906 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _908 = _906.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1062 = sqrt(((_892 * _892) + (_893 * _893)) + (_894 * _894));
        float _1068 = (cbMatDynParam._m0[5u].x * _1062) + cbMatDynParam._m0[5u].y;
        float _3914 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1073 = (cbMatDynParam._m0[5u].z * _1062) + cbMatDynParam._m0[5u].w;
        float _3925 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) - _1069)) + _1069) < ((_908 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _919 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _920 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _938 = fma(_822, cbSceneParam._m0[5u].z, fma(_821, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _820));
    float _941 = fma(_822, cbSceneParam._m0[6u].z, fma(_821, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _820));
    float _944 = fma(_822, cbSceneParam._m0[7u].z, fma(_821, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _820));
    uint _957 = _277 + 9u;
    uint _958 = _957 + uint(cbMatDynParam._m0[0u].w);
    float _964 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * cbInstanceData._m0[_958].x;
    float _965 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * cbInstanceData._m0[_958].y;
    float _966 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * cbInstanceData._m0[_958].z;
    float _3936 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _3958 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    vec4 _978 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _919, cbSceneParam._m0[86u].y * _920));
    float _982 = ((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * TEXCOORD_5.w) * _978.x;
    float _983 = dot(vec3(_820, _821, _822), vec3(_899, _900, _901));
    float _986 = _983 * 2.0;
    float _990 = (_986 * _820) - _899;
    float _991 = (_986 * _821) - _900;
    float _992 = (_986 * _822) - _901;
    float _996 = abs(dot(vec3(_899, _900, _901), vec3(_820, _821, _822)));
    float _3969 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _998 = sqrt(_823);
    float _1011 = exp2((_998 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_998 * 3.0));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1380;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1105 = fma(_1051, cbModelParam._m0[26u].z, fma(_1047, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043));
        float _1109 = fma(_1051, cbModelParam._m0[27u].z, fma(_1047, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043));
        float _1113 = fma(_1051, cbModelParam._m0[28u].z, fma(_1047, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043));
        float _1138 = _1043 + _820;
        float _1139 = _1047 + _821;
        float _1140 = _1051 + _822;
        float _1150 = fma(_1140, cbModelParam._m0[26u].z, fma(_1139, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1138)) - _1105;
        float _1151 = fma(_1140, cbModelParam._m0[27u].z, fma(_1139, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1138)) - _1109;
        float _1152 = fma(_1140, cbModelParam._m0[28u].z, fma(_1139, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1138)) - _1113;
        float _1156 = inversesqrt(dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152)));
        float _1169 = ((_1156 * _1150) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1105 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1156 * _1151) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1109 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1156 * _1152) / cbModelParam._m0[34u].z) + ((((((_1113 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        float _1208 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1174.x + (-0.5));
        float _1210 = _1208 * (_1174.y + (-0.5));
        float _1211 = _1208 * (_1174.z + (-0.5));
        float _1218 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1181.x + (-0.5));
        float _1220 = _1218 * (_1181.y + (-0.5));
        float _1221 = _1218 * (_1181.z + (-0.5));
        float _1228 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1188.x + (-0.5));
        float _1230 = _1228 * (_1188.y + (-0.5));
        float _1231 = _1228 * (_1188.z + (-0.5));
        float _1238 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1195.x + (-0.5));
        float _1240 = _1238 * (_1195.y + (-0.5));
        float _1241 = _1238 * (_1195.z + (-0.5));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = _1209 * 0.5;
        float _1246 = _1219 * 0.5;
        float _1247 = _1229 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1262 = (dot(vec3(_820, _821, _822), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1272 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _4017 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1274 + 1.0))) + _1279) * _1242;
        float _1289 = _1210 * 0.5;
        float _1290 = _1220 * 0.5;
        float _1291 = _1230 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_820, _821, _822), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4050 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1316 + 1.0))) + _1321) * _1243;
        float _1331 = _1211 * 0.5;
        float _1332 = _1221 * 0.5;
        float _1333 = _1231 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_820, _821, _822), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4083 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1358 + 1.0))) + _1363) * _1244;
        _1380 = _1211;
        _1382 = _1210;
        _1383 = _1209;
        _1384 = _1221;
        _1385 = _1220;
        _1386 = _1219;
        _1387 = _1231;
        _1388 = _1230;
        _1389 = _1229;
        _1390 = _1244;
        _1391 = _1243;
        _1392 = _1242;
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
    }
    else
    {
        _1380 = _1381;
        _1382 = _1381;
        _1383 = _1381;
        _1384 = _1381;
        _1385 = _1381;
        _1386 = _1381;
        _1387 = _1381;
        _1388 = _1381;
        _1389 = _1381;
        _1390 = _1381;
        _1391 = _1381;
        _1392 = _1381;
        _1393 = 0.0;
        _1394 = 0.0;
        _1395 = 0.0;
    }
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1423 = fma(_1051, cbModelParam._m0[30u].z, fma(_1047, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043));
        float _1427 = fma(_1051, cbModelParam._m0[31u].z, fma(_1047, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043));
        float _1431 = fma(_1051, cbModelParam._m0[32u].z, fma(_1047, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043));
        float _1454 = _1043 + _820;
        float _1455 = _1047 + _821;
        float _1456 = _1051 + _822;
        float _1466 = fma(_1456, cbModelParam._m0[30u].z, fma(_1455, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1454)) - _1423;
        float _1467 = fma(_1456, cbModelParam._m0[31u].z, fma(_1455, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1454)) - _1427;
        float _1468 = fma(_1456, cbModelParam._m0[32u].z, fma(_1455, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1454)) - _1431;
        float _1472 = inversesqrt(dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468)));
        float _1485 = ((_1472 * _1466) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1423 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1472 * _1467) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1427 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1487 = ((_1472 * _1468) / cbModelParam._m0[35u].z) + ((((((_1431 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        float _1522 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1489.x + (-0.5));
        float _1524 = _1522 * (_1489.y + (-0.5));
        float _1525 = _1522 * (_1489.z + (-0.5));
        float _1532 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1496.x + (-0.5));
        float _1534 = _1532 * (_1496.y + (-0.5));
        float _1535 = _1532 * (_1496.z + (-0.5));
        float _1542 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1503.x + (-0.5));
        float _1544 = _1542 * (_1503.y + (-0.5));
        float _1545 = _1542 * (_1503.z + (-0.5));
        float _1552 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1510.x + (-0.5));
        float _1554 = _1552 * (_1510.y + (-0.5));
        float _1555 = _1552 * (_1510.z + (-0.5));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = _1523 * 0.5;
        float _1560 = _1533 * 0.5;
        float _1561 = _1543 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_820, _821, _822), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4146 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1586 + 1.0))) + _1591) * _1556;
        float _1601 = _1524 * 0.5;
        float _1602 = _1534 * 0.5;
        float _1603 = _1544 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_820, _821, _822), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4179 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1628 + 1.0))) + _1633) * _1557;
        float _1643 = _1525 * 0.5;
        float _1644 = _1535 * 0.5;
        float _1645 = _1545 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_820, _821, _822), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4212 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1670 + 1.0))) + _1675) * _1558;
        _1692 = _1525;
        _1693 = _1524;
        _1694 = _1523;
        _1695 = _1535;
        _1696 = _1534;
        _1697 = _1533;
        _1698 = _1545;
        _1699 = _1544;
        _1700 = _1543;
        _1701 = _1558;
        _1702 = _1557;
        _1703 = _1556;
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
        _1706 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
    }
    else
    {
        _1692 = _1381;
        _1693 = _1381;
        _1694 = _1381;
        _1695 = _1381;
        _1696 = _1381;
        _1697 = _1381;
        _1698 = _1381;
        _1699 = _1381;
        _1700 = _1381;
        _1701 = _1381;
        _1702 = _1381;
        _1703 = _1381;
        _1704 = 0.0;
        _1705 = 0.0;
        _1706 = 0.0;
    }
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1393)) + _1393;
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1394)) + _1394;
    float _1718 = (cbModelParam._m0[1u].x * (_1706 - _1395)) + _1395;
    float _1739 = fma(_1718, cbSceneParam._m0[89u].z, fma(_1717, cbSceneParam._m0[89u].y, _1716 * cbSceneParam._m0[89u].x));
    float _1742 = fma(_1718, cbSceneParam._m0[90u].z, fma(_1717, cbSceneParam._m0[90u].y, _1716 * cbSceneParam._m0[90u].x));
    float _1745 = fma(_1718, cbSceneParam._m0[91u].z, fma(_1717, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1716));
    float _1760 = _990 * 0.5;
    float _1761 = _991 * 0.5;
    float _1762 = _992 * 0.5;
    float _1763 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1694, _1697, _1700, _1703));
    float _1766 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1769 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1803;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1776 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1380, _1384, _1387, _1390));
        float _1780 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1784 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1383, _1386, _1389, _1392));
        float _1791 = dot(vec4(cbModelParam._m0[39u]), vec4(_1760, _1761, _1762, 1.0));
        _1803 = dot(vec3(isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1791) ? 0.0 : (isnan(0.0) ? _1791 : max(0.0, _1791))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1803 = 1.0;
    }
    float _1814;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1805 = dot(vec4(cbModelParam._m0[40u]), vec4(_1760, _1761, _1762, 1.0));
        _1814 = dot(vec3(isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1805) ? 0.0 : (isnan(0.0) ? _1805 : max(0.0, _1805))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1814 = 1.0;
    }
    float _1818 = (_1814 * cbModelParam._m0[1u].x) + (_1803 * (1.0 - cbModelParam._m0[1u].x));
    float _1828 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _823);
    float _1829 = isnan(_1828) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1828 : min(cbModelParam._m0[25u].z, _1828));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1876 = fma(_1051, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1043)) + cbModelParam._m0[13u].w;
        float _1880 = fma(_1051, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1043)) + cbModelParam._m0[14u].w;
        float _1884 = fma(_1051, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1043)) + cbModelParam._m0[15u].w;
        float _1887 = fma(_992, cbModelParam._m0[13u].z, fma(_991, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _990));
        float _1890 = fma(_992, cbModelParam._m0[14u].z, fma(_991, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _990));
        float _1893 = fma(_992, cbModelParam._m0[15u].z, fma(_991, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _990));
        float _1921;
        if (_1887 > 0.0)
        {
            _1921 = abs((1.0 - _1876) / _1887);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1876 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1921 = frontier_phi_17_15_ladder;
        }
        float _2121;
        if (_1890 > 0.0)
        {
            _2121 = abs((1.0 - _1880) / _1890);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1880 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2121 = frontier_phi_26_22_ladder;
        }
        float _2364;
        if (_1893 > 0.0)
        {
            _2364 = abs((1.0 - _1884) / _1893);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1884 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2364 = frontier_phi_38_33_ladder;
        }
        float _2366 = isnan(_2121) ? _1921 : (isnan(_1921) ? _2121 : min(_1921, _2121));
        float _2367 = isnan(_2364) ? _2366 : (isnan(_2366) ? _2364 : min(_2366, _2364));
        float _2371 = (_2367 * _1887) + _1876;
        float _2372 = (_2367 * _1890) + _1880;
        float _2373 = (_2367 * _1893) + _1884;
        float _2374 = _2367 * 9.9999997473787516355514526367188e-05;
        float _2376 = (-1.0) - _2374;
        float _2378 = _2374 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2373 > _2378) || ((_2373 < _2376) || ((_2372 > _2378) || ((_2372 < _2376) || ((_2371 < _2376) || (_2371 > _2378))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2497 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2373, cbModelParam._m0[9u].z, fma(_2372, cbModelParam._m0[9u].y, _2371 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2373, cbModelParam._m0[10u].z, fma(_2372, cbModelParam._m0[10u].y, _2371 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2373, cbModelParam._m0[11u].z, fma(_2372, cbModelParam._m0[11u].y, _2371 * cbModelParam._m0[11u].x))), _1829);
            frontier_phi_16_38_ladder = _2497.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2497.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2497.x * cbModelParam._m0[1u].y;
        }
        _1909 = frontier_phi_16_38_ladder_2;
        _1911 = frontier_phi_16_38_ladder_1;
        _1913 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_990, _991, _992), _1829);
        _1909 = _1897.x * cbModelParam._m0[1u].y;
        _1911 = _1897.y * cbModelParam._m0[1u].y;
        _1913 = _1897.z * cbModelParam._m0[1u].y;
    }
    float _1917 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _823);
    float _1918 = isnan(_1917) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1917 : min(cbModelParam._m0[25u].w, _1917));
    float _2007;
    float _2009;
    float _2011;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1971 = fma(_1051, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1043)) + cbModelParam._m0[21u].w;
        float _1975 = fma(_1051, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1043)) + cbModelParam._m0[22u].w;
        float _1979 = fma(_1051, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1043)) + cbModelParam._m0[23u].w;
        float _1982 = fma(_992, cbModelParam._m0[21u].z, fma(_991, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _990));
        float _1985 = fma(_992, cbModelParam._m0[22u].z, fma(_991, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _990));
        float _1988 = fma(_992, cbModelParam._m0[23u].z, fma(_991, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _990));
        float _2126;
        if (_1982 > 0.0)
        {
            _2126 = abs((1.0 - _1971) / _1982);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1971 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2126 = frontier_phi_28_24_ladder;
        }
        float _2391;
        if (_1985 > 0.0)
        {
            _2391 = abs((1.0 - _1975) / _1985);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1975 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2391 = frontier_phi_40_35_ladder;
        }
        float _2596;
        if (_1988 > 0.0)
        {
            _2596 = abs((1.0 - _1979) / _1988);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1979 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2596 = frontier_phi_49_46_ladder;
        }
        float _2598 = isnan(_2391) ? _2126 : (isnan(_2126) ? _2391 : min(_2126, _2391));
        float _2599 = isnan(_2596) ? _2598 : (isnan(_2598) ? _2596 : min(_2598, _2596));
        float _2603 = (_2599 * _1982) + _1971;
        float _2604 = (_2599 * _1985) + _1975;
        float _2605 = (_2599 * _1988) + _1979;
        float _2606 = _2599 * 9.9999997473787516355514526367188e-05;
        float _2607 = (-1.0) - _2606;
        float _2609 = _2606 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2605 > _2609) || ((_2605 < _2607) || ((_2604 > _2609) || ((_2604 < _2607) || ((_2603 < _2607) || (_2603 > _2609))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2804 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2605, cbModelParam._m0[17u].z, fma(_2604, cbModelParam._m0[17u].y, _2603 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2605, cbModelParam._m0[18u].z, fma(_2604, cbModelParam._m0[18u].y, _2603 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2605, cbModelParam._m0[19u].z, fma(_2604, cbModelParam._m0[19u].y, _2603 * cbModelParam._m0[19u].x))), _1918);
            frontier_phi_25_49_ladder = _2804.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2804.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2804.x * cbModelParam._m0[1u].z;
        }
        _2007 = frontier_phi_25_49_ladder_2;
        _2009 = frontier_phi_25_49_ladder_1;
        _2011 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1991 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_990, _991, _992), _1918);
        _2007 = _1991.x * cbModelParam._m0[1u].z;
        _2009 = _1991.y * cbModelParam._m0[1u].z;
        _2011 = _1991.z * cbModelParam._m0[1u].z;
    }
    float _2023 = ((((1.0 - _1011) * ((_998 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1011 * _998)) * _982;
    float _2024 = _2023 * ((cbModelParam._m0[1u].w * (_2007 - _1909)) + _1909);
    float _2025 = _2023 * ((cbModelParam._m0[1u].w * (_2009 - _1911)) + _1911);
    float _2026 = _2023 * ((cbModelParam._m0[1u].w * (_2011 - _1913)) + _1913);
    float _2029 = fma(_2026, cbSceneParam._m0[89u].z, fma(_2025, cbSceneParam._m0[89u].y, _2024 * cbSceneParam._m0[89u].x));
    float _2032 = fma(_2026, cbSceneParam._m0[90u].z, fma(_2025, cbSceneParam._m0[90u].y, _2024 * cbSceneParam._m0[90u].x));
    float _2035 = fma(_2026, cbSceneParam._m0[91u].z, fma(_2025, cbSceneParam._m0[91u].y, _2024 * cbSceneParam._m0[91u].x));
    uvec4 _2045 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2047 = _2045.x * 14u;
    uint _2048 = _2047 + 13u;
    float _2055 = _982 + (-1.0);
    float _2060 = (cbLight._m0[_2048].x * _2055) + 1.0;
    float _2061 = (cbLight._m0[_2048].y * _2055) + 1.0;
    float _2062 = (cbLight._m0[_2048].z * _2055) + 1.0;
    float _2063 = (cbLight._m0[_2048].w * _2055) + 1.0;
    uint _2064 = _2047 + 5u;
    float _2070 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
    uint _2074 = _2047 + 4u;
    float _2080 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
    uint _2084 = _2047 | 1u;
    float _2095 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_820, _821, _822));
    float _2098 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_820, _821, _822));
    float _4348 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _4359 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2103 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * 0.3183098733425140380859375;
    float _2105 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * 0.3183098733425140380859375;
    float _2112 = ((cbLight._m0[_2064].x * _2070) * _2105) + ((cbLight._m0[_2074].x * _2080) * _2103);
    float _2113 = ((_2070 * cbLight._m0[_2064].y) * _2105) + ((_2080 * cbLight._m0[_2074].y) * _2103);
    float _2114 = ((_2070 * cbLight._m0[_2064].z) * _2105) + ((_2080 * cbLight._m0[_2074].z) * _2103);
    uvec4 _2118 = floatBitsToUint(cbLight._m0[_2047 + 12u]);
    bool _2120 = _2118.x == 0u;
    float _2131;
    float _2133;
    float _2135;
    if (_2120)
    {
        _2131 = _2112;
        _2133 = _2113;
        _2135 = _2114;
    }
    else
    {
        uint _2139 = _2047 + 6u;
        float _2155 = (dot(vec3(cbLight._m0[_2047 + 2u].xyz), vec3(_820, _821, _822)) * 0.5) + 0.5;
        float _2156 = _2155 * _2155;
        float _4370 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2157 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2158 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2131 = (((cbLight._m0[_2139].x * 0.3183098733425140380859375) * _2157) * _2158) + _2112;
        _2133 = (((cbLight._m0[_2139].y * 0.3183098733425140380859375) * _2157) * _2158) + _2113;
        _2135 = (((cbLight._m0[_2139].z * 0.3183098733425140380859375) * _2157) * _2158) + _2114;
    }
    bool _2138 = _2118.y == 0u;
    float _2176;
    float _2178;
    float _2180;
    if (_2138)
    {
        _2176 = _2131;
        _2178 = _2133;
        _2180 = _2135;
    }
    else
    {
        uint _2335 = _2047 + 7u;
        float _2351 = (dot(vec3(cbLight._m0[_2047 + 3u].xyz), vec3(_820, _821, _822)) * 0.5) + 0.5;
        float _2352 = _2351 * _2351;
        float _4386 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2353 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2354 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2176 = (((cbLight._m0[_2335].x * 0.3183098733425140380859375) * _2353) * _2354) + _2131;
        _2178 = (((cbLight._m0[_2335].y * 0.3183098733425140380859375) * _2353) * _2354) + _2133;
        _2180 = (((cbLight._m0[_2335].z * 0.3183098733425140380859375) * _2353) * _2354) + _2135;
    }
    uint _2183 = _2047 + 8u;
    float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _823) * 0.949999988079071044921875);
    float _2197 = _2196 * _2196;
    float _2198 = cbLight._m0[_2047].x + _899;
    float _2199 = cbLight._m0[_2047].y + _900;
    float _2200 = cbLight._m0[_2047].z + _901;
    float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
    float _2205 = _2204 * _2198;
    float _2206 = _2204 * _2199;
    float _2207 = _2204 * _2200;
    float _2208 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2047].xyz));
    float _4402 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _4413 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _2212 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2213 = dot(vec3(_820, _821, _822), vec3(_2205, _2206, _2207));
    float _4424 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2217 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2205, _2206, _2207));
    float _4435 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2221 = _2197 * _2197;
    float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
    float _2236 = (exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2237 = 1.0 - _2197;
    float _2248 = (0.5 / (((_2212 * ((_2211 * _2237) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2237) + _2197) * _2211))) * _2211;
    float _4446 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2250 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
    uint _2261 = _2047 + 9u;
    float _2272 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _823) * 0.949999988079071044921875);
    float _2273 = _2272 * _2272;
    float _2274 = cbLight._m0[_2084].x + _899;
    float _2275 = cbLight._m0[_2084].y + _900;
    float _2276 = cbLight._m0[_2084].z + _901;
    float _2280 = inversesqrt(dot(vec3(_2274, _2275, _2276), vec3(_2274, _2275, _2276)));
    float _2281 = _2280 * _2274;
    float _2282 = _2280 * _2275;
    float _2283 = _2280 * _2276;
    float _2284 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2084].xyz));
    float _4457 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2288 = dot(vec3(_820, _821, _822), vec3(_2281, _2282, _2283));
    float _4468 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _2292 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2281, _2282, _2283));
    float _4479 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2296 = _2273 * _2273;
    float _2300 = ((_2291 * _2291) * (_2296 + (-1.0))) + 1.0;
    float _2309 = (exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2310 = 1.0 - _2273;
    float _2320 = (0.5 / (((_2212 * ((_2287 * _2310) + _2273)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2310) + _2273) * _2287))) * _2287;
    float _4490 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2322 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2296 / ((_2300 * _2300) * 3.141590118408203125));
    float _2332 = (((_2309 * cbLight._m0[_2261].x) * _2322) * _2070) + (((_2236 * cbLight._m0[_2183].x) * _2250) * _2080);
    float _2333 = (((_2309 * cbLight._m0[_2261].y) * _2322) * _2070) + (((_2236 * cbLight._m0[_2183].y) * _2250) * _2080);
    float _2334 = (((_2309 * cbLight._m0[_2261].z) * _2322) * _2070) + (((_2236 * cbLight._m0[_2183].z) * _2250) * _2080);
    float _2396;
    float _2398;
    float _2400;
    if (_2120)
    {
        _2396 = _2332;
        _2398 = _2333;
        _2400 = _2334;
    }
    else
    {
        uint _2402 = _2047 + 2u;
        uint _2406 = _2047 + 10u;
        float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _823) * 0.949999988079071044921875);
        float _2421 = _2420 * _2420;
        float _2422 = cbLight._m0[_2402].x + _899;
        float _2423 = cbLight._m0[_2402].y + _900;
        float _2424 = cbLight._m0[_2402].z + _901;
        float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
        float _2429 = _2428 * _2422;
        float _2430 = _2428 * _2423;
        float _2431 = _2428 * _2424;
        float _2432 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2402].xyz));
        float _4501 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2436 = dot(vec3(_820, _821, _822), vec3(_2429, _2430, _2431));
        float _4512 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2440 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2429, _2430, _2431));
        float _4523 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2444 = _2421 * _2421;
        float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
        float _2457 = (exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2458 = 1.0 - _2421;
        float _2468 = (0.5 / (((_2212 * ((_2435 * _2458) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2458) + _2421) * _2435))) * _2435;
        float _4534 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2470 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
        float _2471 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2396 = (((_2457 * cbLight._m0[_2406].x) * _2470) * _2471) + _2332;
        _2398 = (((_2457 * cbLight._m0[_2406].y) * _2470) * _2471) + _2333;
        _2400 = (((_2457 * cbLight._m0[_2406].z) * _2470) * _2471) + _2334;
    }
    float _2506;
    float _2508;
    float _2510;
    if (_2138)
    {
        _2506 = _2396;
        _2508 = _2398;
        _2510 = _2400;
    }
    else
    {
        uint _2517 = _2047 + 3u;
        uint _2521 = _2047 + 11u;
        float _2535 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2517].w)) * _823) * 0.949999988079071044921875);
        float _2536 = _2535 * _2535;
        float _2537 = cbLight._m0[_2517].x + _899;
        float _2538 = cbLight._m0[_2517].y + _900;
        float _2539 = cbLight._m0[_2517].z + _901;
        float _2543 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
        float _2544 = _2543 * _2537;
        float _2545 = _2543 * _2538;
        float _2546 = _2543 * _2539;
        float _2547 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2517].xyz));
        float _4550 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2550 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2551 = dot(vec3(_820, _821, _822), vec3(_2544, _2545, _2546));
        float _4561 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2555 = dot(vec3(cbLight._m0[_2517].xyz), vec3(_2544, _2545, _2546));
        float _4572 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2559 = _2536 * _2536;
        float _2563 = ((_2554 * _2554) * (_2559 + (-1.0))) + 1.0;
        float _2572 = (exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2573 = 1.0 - _2536;
        float _2583 = (0.5 / (((_2212 * ((_2550 * _2573) + _2536)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2573) + _2536) * _2550))) * _2550;
        float _4583 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2585 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2559 / ((_2563 * _2563) * 3.141590118408203125));
        float _2586 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2506 = (((_2572 * cbLight._m0[_2521].x) * _2585) * _2586) + _2396;
        _2508 = (((_2572 * cbLight._m0[_2521].y) * _2585) * _2586) + _2398;
        _2510 = (((_2572 * cbLight._m0[_2521].z) * _2585) * _2586) + _2400;
    }
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    float _2731;
    if (_2045.y == 0u)
    {
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2661;
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2661;
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2661;
        uvec4 _2676 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2677 = _2676.x;
        uint _2688 = uint((float(_2676.y) * floor(float(uint(cbSceneParam._m0[85u].y * _920) / _2677))) + floor(float(uint(cbSceneParam._m0[85u].x * _919) / _2677)));
        float _2698 = (log2(_2664 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2699 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        uint _2702 = uint(isnan(14.0) ? _2699 : (isnan(_2699) ? 14.0 : min(_2699, 14.0)));
        uvec4 _2707 = texelFetch(g_lightClusterGridBuffer, int(((_2702 << 2u) + (_2688 << 6u)) >> 2u));
        uint _2708 = _2707.x;
        uint _2709 = _2676.z;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        if (((((1u << ((_2709 >> 4u) & 15u)) + 4294967295u) & _2708) == 0u) || ((_2709 & 240u) == 0u))
        {
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
        }
        else
        {
            float _2810;
            float _2812;
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            uint _2967 = 0u;
            uint _2976;
            bool _2977;
            for (;;)
            {
                _2976 = texelFetch(g_lightClassification, int((((_2702 << 5u) + (_2688 << 9u)) + (_2967 << 2u)) >> 2u)).x;
                _2977 = _2976 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2977)
                {
                    frontier_phi_66_pred = _2961;
                    frontier_phi_66_pred_1 = _2966;
                    frontier_phi_66_pred_2 = _2965;
                    frontier_phi_66_pred_3 = _2964;
                    frontier_phi_66_pred_4 = _2963;
                    frontier_phi_66_pred_5 = _2962;
                }
                else
                {
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    uint _3112;
                    _3106 = _2961;
                    _3107 = _2962;
                    _3108 = _2963;
                    _3109 = _2964;
                    _3110 = _2965;
                    _3111 = _2966;
                    _3112 = _2976;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    for (;;)
                    {
                        uint _3116 = uint(findLSB(_3112)) + (_2967 << 5u);
                        uint _3113 = (_3112 + 4294967295u) & _3112;
                        uint _3118 = _3116 * 48u;
                        vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3118)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 3u)).x));
                        uint _3138 = (_3116 * 48u) + 4u;
                        vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3138)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 3u)).x));
                        uint _3157 = (_3116 * 48u) + 8u;
                        vec3 _3168 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3157)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 2u)).x));
                        float _3172 = _3132.x - _2662;
                        float _3173 = _3132.y - _2663;
                        float _3174 = _3132.z - _2664;
                        float _3175 = dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174));
                        float _3178 = inversesqrt(_3175);
                        float _3179 = _3178 * _3172;
                        float _3180 = _3178 * _3173;
                        float _3181 = _3178 * _3174;
                        float _3182 = dot(vec3(_938, _941, _944), vec3(_3179, _3180, _3181));
                        float _3187 = 1.0 - (_3175 * _3132.w);
                        float _4609 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3188 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3189 = sqrt(_3175) * _3151.w;
                        float _3192 = 1.39999997615814208984375 / (_3189 + 1.39999997615814208984375);
                        float _3193 = _3192 * _3192;
                        float _3196 = ((1.0 - _3193) * _3182) + _3193;
                        float _3199 = _3189 * _3189;
                        float _3203 = ((isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0))) * _3188) / ((_3199 * 0.699999988079071044921875) + 1.0);
                        float _3207 = (-0.0) - _2662;
                        float _3208 = (-0.0) - _2663;
                        float _3209 = (-0.0) - _2664;
                        float _3213 = inversesqrt(dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209)));
                        float _3214 = _3213 * _3207;
                        float _3215 = _3213 * _3208;
                        float _3216 = _3213 * _3209;
                        float _3224 = exp2(log2(1.0 / ((_3199 * 3.5) + 5.0)) * 0.25);
                        float _3225 = 1.0 - _998;
                        float _3232 = sqrt(1.0 - ((1.0 - (_3225 * _3225)) * (1.0 - (_3224 * _3224))));
                        float _3233 = _3232 * _3232;
                        float _3234 = _3233 * _3233;
                        float _3235 = _3214 + _3179;
                        float _3236 = _3215 + _3180;
                        float _3237 = _3216 + _3181;
                        float _3241 = inversesqrt(dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237)));
                        float _3245 = dot(vec3(_938, _941, _944), vec3(_3214, _3215, _3216));
                        float _4625 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3248 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3249 = dot(vec3(_938, _941, _944), vec3(_3241 * _3235, _3241 * _3236, _3241 * _3237));
                        float _4636 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3252 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                        float _3256 = ((_3252 * _3252) * (_3234 + (-1.0))) + 1.0;
                        float _3257 = _3192 * _3233;
                        float _3258 = _3257 * _3257;
                        float _3261 = ((1.0 - _3258) * _3182) + _3258;
                        float _4647 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3262 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3263 = 1.0 - _3233;
                        float _3273 = (0.5 / (((_3262 * ((_3248 * _3263) + _3233)) + 9.9999999392252902907785028219223e-09) + (((_3262 * _3263) + _3233) * _3248))) * _3262;
                        float _4658 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3284 = (((_3234 * 3.1415927410125732421875) * (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) / ((_3256 * _3256) * ((_3199 * 2.1991131305694580078125) + 3.141590118408203125))) * _3188;
                        _3036 = (_3203 * _3151.x) + _3109;
                        _3037 = (_3203 * _3151.y) + _3110;
                        _3038 = (_3203 * _3151.z) + _3111;
                        _3033 = (_3284 * _3168.x) + _3106;
                        _3034 = (_3284 * _3168.y) + _3107;
                        _3035 = (_3284 * _3168.z) + _3108;
                        if (_3113 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3106 = _3033;
                            _3107 = _3034;
                            _3108 = _3035;
                            _3109 = _3036;
                            _3110 = _3037;
                            _3111 = _3038;
                            _3112 = _3113;
                        }
                    }
                    frontier_phi_66_pred = _3033;
                    frontier_phi_66_pred_1 = _3038;
                    frontier_phi_66_pred_2 = _3037;
                    frontier_phi_66_pred_3 = _3036;
                    frontier_phi_66_pred_4 = _3035;
                    frontier_phi_66_pred_5 = _3034;
                }
                _2810 = frontier_phi_66_pred;
                _2820 = frontier_phi_66_pred_1;
                _2818 = frontier_phi_66_pred_2;
                _2816 = frontier_phi_66_pred_3;
                _2814 = frontier_phi_66_pred_4;
                _2812 = frontier_phi_66_pred_5;
                uint _2968 = _2967 + 1u;
                if (_2968 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2961 = _2810;
                    _2962 = _2812;
                    _2963 = _2814;
                    _2964 = _2816;
                    _2965 = _2818;
                    _2966 = _2820;
                    _2967 = _2968;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
        }
        uvec4 _2823 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2824 = _2823.z;
        uint _2826 = (_2824 >> 8u) & 15u;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        if (((4294967295u << _2826) & _2708) == 0u)
        {
            _2929 = _2809;
            _2931 = _2811;
            _2933 = _2813;
            _2935 = _2815;
            _2937 = _2817;
            _2939 = _2819;
        }
        else
        {
            float _2954 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
            float _2955 = _2954 * _2662;
            float _2956 = _2954 * _2663;
            float _2957 = _2954 * _2664;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2826 < ((_2824 >> 12u) & 15u))
            {
                float _2930;
                float _2932;
                float _2934;
                float _2936;
                float _2938;
                float _2940;
                float _3089 = _2809;
                float _3090 = _2811;
                float _3091 = _2813;
                float _3092 = _2815;
                float _3093 = _2817;
                float _3094 = _2819;
                uint _3095 = _2826;
                uint _3104;
                bool _3105;
                for (;;)
                {
                    _3104 = texelFetch(g_lightClassification, int((((_2702 << 5u) + (_2688 << 9u)) + (_3095 << 2u)) >> 2u)).x;
                    _3105 = _3104 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3105)
                    {
                        frontier_phi_77_pred = _3094;
                        frontier_phi_77_pred_1 = _3093;
                        frontier_phi_77_pred_2 = _3092;
                        frontier_phi_77_pred_3 = _3091;
                        frontier_phi_77_pred_4 = _3090;
                        frontier_phi_77_pred_5 = _3089;
                    }
                    else
                    {
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3311 = _3089;
                        float _3312 = _3090;
                        float _3313 = _3091;
                        float _3314 = _3092;
                        float _3315 = _3093;
                        float _3316 = _3094;
                        uint _3317 = _3104;
                        uint _3318;
                        vec4 _3343;
                        float _3344;
                        vec4 _3359;
                        vec3 _3371;
                        vec4 _3386;
                        vec4 _3401;
                        float _3447;
                        bool _3448;
                        for (;;)
                        {
                            uint _3328 = ((_3095 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3317));
                            _3318 = (_3317 + 4294967295u) & _3317;
                            uint _3330 = _3328 * 40u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            _3344 = _3343.w;
                            uint _3346 = (_3328 * 40u) + 4u;
                            _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            uint _3361 = (_3328 * 40u) + 8u;
                            _3371 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x));
                            uint _3373 = (_3328 * 40u) + 16u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3388 = (_3328 * 40u) + 20u;
                            _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            uint _3403 = (_3328 * 40u) + 24u;
                            vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3422 = (_3328 * 40u) + 28u;
                            vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            _3447 = fma(_2664, _3435.z, fma(_2663, _3435.y, _3435.x * _2662)) + _3435.w;
                            _3448 = !((fma(_2664, _3416.z, fma(_2663, _3416.y, _3416.x * _2662)) + _3416.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3448)
                            {
                                float _3475 = _3343.x - _2662;
                                float _3476 = _3343.y - _2663;
                                float _3477 = _3343.z - _2664;
                                float _3478 = dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477));
                                float _3481 = inversesqrt(_3478);
                                float _3482 = _3481 * _3475;
                                float _3483 = _3481 * _3476;
                                float _3484 = _3481 * _3477;
                                float _3488 = 1.0 - (_3478 / (_3344 * _3344));
                                float _4669 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3489 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3493 = sqrt(_3478) * _3359.w;
                                float _3495 = 1.39999997615814208984375 / (_3493 + 1.39999997615814208984375);
                                float _3496 = _3495 * _3495;
                                float _3499 = ((1.0 - _3496) * dot(vec3(_3482, _3483, _3484), vec3(_938, _941, _944))) + _3496;
                                float _3502 = _3493 * _3493;
                                float _3506 = (fma(_2664, _3386.z, fma(_2663, _3386.y, _3386.x * _2662)) + _3386.w) / _3447;
                                float _3507 = (fma(_2664, _3401.z, fma(_2663, _3401.y, _3401.x * _2662)) + _3401.w) / _3447;
                                float _3511 = 1.0 - dot(vec2(_3506, _3507), vec2(_3506, _3507));
                                float _4685 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3512 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3513 = _3512 * (((isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0))) * _3489) / ((_3502 * 0.699999988079071044921875) + 1.0));
                                float _3525 = exp2(log2(1.0 / ((_3502 * 3.5) + 5.0)) * 0.25);
                                float _3526 = 1.0 - _998;
                                float _3533 = sqrt(1.0 - ((1.0 - (_3526 * _3526)) * (1.0 - (_3525 * _3525))));
                                float _3534 = _3533 * _3533;
                                float _3535 = _3534 * _3534;
                                float _3536 = _3482 - _2955;
                                float _3537 = _3483 - _2956;
                                float _3538 = _3484 - _2957;
                                float _3542 = inversesqrt(dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538)));
                                float _3546 = dot(vec3(_938, _941, _944), vec3((-0.0) - _2955, (-0.0) - _2956, (-0.0) - _2957));
                                float _4696 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3549 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3550 = dot(vec3(_938, _941, _944), vec3(_3542 * _3536, _3542 * _3537, _3542 * _3538));
                                float _4707 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3553 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3557 = ((_3553 * _3553) * (_3535 + (-1.0))) + 1.0;
                                float _3558 = _3495 * _3534;
                                float _3559 = _3558 * _3558;
                                float _3565 = ((1.0 - _3559) * dot(vec3(_938, _941, _944), vec3(_3482, _3483, _3484))) + _3559;
                                float _4718 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3567 = 1.0 - _3534;
                                float _3577 = (0.5 / (((_3566 * ((_3549 * _3567) + _3534)) + 9.9999999392252902907785028219223e-09) + (((_3566 * _3567) + _3534) * _3549))) * _3566;
                                float _4729 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3587 = (_3512 * _3489) * (((_3535 * 3.1415927410125732421875) * (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) / ((_3557 * _3557) * ((_3502 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3513 * _3359.y;
                                frontier_phi_83_pred_1 = _3513 * _3359.x;
                                frontier_phi_83_pred_2 = _3587 * _3371.z;
                                frontier_phi_83_pred_3 = _3587 * _3371.y;
                                frontier_phi_83_pred_4 = _3587 * _3371.x;
                                frontier_phi_83_pred_5 = _3513 * _3359.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3595 = frontier_phi_83_pred;
                            _3594 = frontier_phi_83_pred_1;
                            _3593 = frontier_phi_83_pred_2;
                            _3592 = frontier_phi_83_pred_3;
                            _3591 = frontier_phi_83_pred_4;
                            _3596 = frontier_phi_83_pred_5;
                            _3301 = _3594 + _3314;
                            _3302 = _3595 + _3315;
                            _3303 = _3596 + _3316;
                            _3298 = _3591 + _3311;
                            _3299 = _3592 + _3312;
                            _3300 = _3593 + _3313;
                            if (_3318 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3318;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3303;
                        frontier_phi_77_pred_1 = _3302;
                        frontier_phi_77_pred_2 = _3301;
                        frontier_phi_77_pred_3 = _3300;
                        frontier_phi_77_pred_4 = _3299;
                        frontier_phi_77_pred_5 = _3298;
                    }
                    _2940 = frontier_phi_77_pred;
                    _2938 = frontier_phi_77_pred_1;
                    _2936 = frontier_phi_77_pred_2;
                    _2934 = frontier_phi_77_pred_3;
                    _2932 = frontier_phi_77_pred_4;
                    _2930 = frontier_phi_77_pred_5;
                    uint _3096 = _3095 + 1u;
                    if (_3096 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3089 = _2930;
                        _3090 = _2932;
                        _3091 = _2934;
                        _3092 = _2936;
                        _3093 = _2938;
                        _3094 = _2940;
                        _3095 = _3096;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2934;
                frontier_phi_58_59_ladder_1 = _2940;
                frontier_phi_58_59_ladder_2 = _2938;
                frontier_phi_58_59_ladder_3 = _2936;
                frontier_phi_58_59_ladder_4 = _2932;
                frontier_phi_58_59_ladder_5 = _2930;
            }
            else
            {
                frontier_phi_58_59_ladder = _2813;
                frontier_phi_58_59_ladder_1 = _2819;
                frontier_phi_58_59_ladder_2 = _2817;
                frontier_phi_58_59_ladder_3 = _2815;
                frontier_phi_58_59_ladder_4 = _2811;
                frontier_phi_58_59_ladder_5 = _2809;
            }
            _2929 = frontier_phi_58_59_ladder_5;
            _2931 = frontier_phi_58_59_ladder_4;
            _2933 = frontier_phi_58_59_ladder;
            _2935 = frontier_phi_58_59_ladder_3;
            _2937 = frontier_phi_58_59_ladder_2;
            _2939 = frontier_phi_58_59_ladder_1;
        }
        float _2944 = isnan(1.0) ? _982 : (isnan(_982) ? 1.0 : min(_982, 1.0));
        _2721 = (_2944 * _2935) + _2176;
        _2723 = (_2944 * _2937) + _2178;
        _2725 = (_2944 * _2939) + _2180;
        _2727 = ((_2929 * 0.039999999105930328369140625) * _2944) + _2506;
        _2729 = ((_2931 * 0.039999999105930328369140625) * _2944) + _2508;
        _2731 = ((_2933 * 0.039999999105930328369140625) * _2944) + _2510;
    }
    else
    {
        _2721 = _2176;
        _2723 = _2178;
        _2725 = _2180;
        _2727 = _2506;
        _2729 = _2508;
        _2731 = _2510;
    }
    float _4745 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _4756 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4767 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _2748 = ((isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2721 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _982))) + ((_2727 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    float _2749 = ((isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2723 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _982))) + ((_2729 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    float _2750 = ((isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2725 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _982))) + ((_2731 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    uint _2751 = _277 + 6u;
    float _2759 = _919 / cbSceneParam._m0[86u].x;
    float _2760 = _920 / cbSceneParam._m0[86u].y;
    vec4 _2774 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2759, _2760, (log2((isnan(cbSceneParam._m0[77u].w) ? _841 : (isnan(_841) ? cbSceneParam._m0[77u].w : min(_841, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2776 = _2774.x;
    float _2777 = _2774.y;
    float _2778 = _2774.z;
    float _2779 = _2774.w;
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    if (_841 > cbSceneParam._m0[78u].w)
    {
        float _2834 = isnan(_841) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _841 : min(cbSceneParam._m0[80u].w, _841));
        float _2835 = _2834 / _841;
        float _2846 = _2835 * _892;
        float _2847 = _893 * _2835;
        float _2848 = (-0.0) - _2847;
        float _2849 = _2835 * _894;
        float _2851 = (cbSceneParam._m0[77u].w * _2848) / _2834;
        float _2852 = _2851 + cbSceneParam._m0[79u].w;
        float _2853 = cbSceneParam._m0[79u].w - _2847;
        float _2859 = sqrt(((_2846 * _2846) + (_2847 * _2847)) + (_2849 * _2849));
        float _2862 = (1.0 - (cbSceneParam._m0[77u].w / _2834)) * _2859;
        float _2867 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2869 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3046;
        if (abs((_2848 - _2851) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3046 = ((((_2852 > 0.0) ? exp2(_2867 * _2852) : (2.0 - exp2(_2869 * _2852))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2862;
        }
        else
        {
            float _2990 = 1.0 / cbSceneParam._m0[80u].x;
            float _2991 = isnan(_2853) ? _2852 : (isnan(_2852) ? _2853 : max(_2852, _2853));
            float _2992 = isnan(_2853) ? _2852 : (isnan(_2852) ? _2853 : min(_2852, _2853));
            float _3001 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : min(_2991, 0.0));
            float _3002 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : min(_2992, 0.0));
            _3046 = ((abs(_2859 / _2848) * cbSceneParam._m0[80u].y) * ((((_3001 - _3002) * 2.0) - ((exp2(_2867 * (isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0)))) - exp2(_2867 * (isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0))))) * _2990)) - ((exp2(_2869 * _3001) - exp2(_2869 * _3002)) * _2990))) + (_2862 * cbSceneParam._m0[80u].z);
        }
        vec4 _3048 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2759, _2760, 1.0), 0.0);
        float _3057 = exp2((_3046 * (-1.44269502162933349609375)) * (1.0 - _3048.w));
        float _3058 = log2(_3057);
        float _3074 = log2(_2779);
        _2871 = (exp2(_3074 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].x)) * _3048.x) / cbSceneParam._m0[78u].x)) + _2776;
        _2873 = (exp2(_3074 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].y)) * _3048.y) / cbSceneParam._m0[78u].y)) + _2777;
        _2875 = (exp2(_3074 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].z)) * _3048.z) / cbSceneParam._m0[78u].z)) + _2778;
        _2877 = _3057 * _2779;
    }
    else
    {
        _2871 = _2776;
        _2873 = _2777;
        _2875 = _2778;
        _2877 = _2779;
    }
    bool _3084;
    vec4 _2887;
    vec4 _2909;
    float _2911;
    float _2915;
    float _2916;
    float _2917;
    float _2918;
    bool _2928;
    for (;;)
    {
        _2887 = cbMatDynParam._m0[0u];
        float _2889 = roundEven(_2887.y);
        bool _2890 = _2889 == 3.0;
        float _2891 = log2(_2877);
        float _2898 = exp2(_2891 * cbSceneParam._m0[78u].x) * _2748;
        float _2899 = exp2(_2891 * cbSceneParam._m0[78u].y) * _2749;
        float _2900 = exp2(_2891 * cbSceneParam._m0[78u].z) * _2750;
        float _2907 = _908 + (-0.5);
        _2909 = cbMtdParam._m0[1u];
        _2911 = _2909.y * _2907;
        float _2914 = (_2889 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2915 = _2914 * (_2890 ? _2898 : (_2898 + (cbSceneParam._m0[72u].w * _2871)));
        _2916 = _2914 * (_2890 ? _2899 : (_2899 + (cbSceneParam._m0[72u].w * _2873)));
        _2917 = _2914 * (_2890 ? _2900 : (_2900 + (cbSceneParam._m0[72u].w * _2875)));
        _2918 = _2907 * 0.999000012874603271484375;
        _2928 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2928)
        {
            if ((cbInstanceData._m0[_277 + 7u].x + _2918) < 0.5)
            {
                _3084 = true;
                break;
            }
        }
        uint _3025 = _957 + uint(_2887.w);
        if ((cbInstanceData._m0[_3025].w < 1.0) && ((cbInstanceData._m0[_3025].w + _2918) < 0.5))
        {
            _3084 = true;
            break;
        }
        if ((_2911 + 1.0) < _2909.x)
        {
            _3084 = true;
            break;
        }
        _3084 = false;
        break;
    }
    float _3289;
    if (_3084)
    {
        discard_state = true;
        _3289 = 0.0;
    }
    else
    {
        _3289 = cbInstanceData._m0[_2751].w;
    }
    SV_Target.x = _2915;
    SV_Target.y = _2916;
    SV_Target.z = _2917;
    SV_Target.w = _3289;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2751].w;
    discard_exit();
}


