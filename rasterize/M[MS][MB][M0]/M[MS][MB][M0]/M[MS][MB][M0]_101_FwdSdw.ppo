#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1209;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3798 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3809 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3820 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    uint _262 = uint(roundEven(NORMAL.w)) * 13u;
    uint _267 = _262 + 1u;
    uint _271 = _262 + 2u;
    float _280 = sqrt(((cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x)) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x));
    float _281 = _280 * TEXCOORD.z;
    float _282 = _280 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _281) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _282) + cbTextureTilingScale._m0[13u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _324 = _319.x * cbMtdParam._m0[11u].x;
    float _325 = _319.y * cbMtdParam._m0[11u].y;
    float _326 = _319.z * cbMtdParam._m0[11u].z;
    vec4 _345 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _281) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _282) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _393 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _410 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_383 - _393) * cbMtdParam._m0[24u].x) + _393) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3831 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _418 = (_411 * ((_345.x * cbMtdParam._m0[12u].x) - _324)) + _324;
    float _419 = (_411 * ((_345.y * cbMtdParam._m0[12u].y) - _325)) + _325;
    float _420 = (_411 * ((_345.z * cbMtdParam._m0[12u].z) - _326)) + _326;
    float _424 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _295.x) * _418;
    float _427 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _295.y) * _419;
    float _430 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _295.z) * _420;
    float _437 = ((_418 - _424) * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) + _424;
    float _438 = ((_419 - _427) * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) + _427;
    float _439 = ((_420 - _430) * (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) + _430;
    vec4 _457 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _281) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _282) + cbTextureTilingScale._m0[20u].w));
    vec4 _484 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _281) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _282) + cbTextureTilingScale._m0[4u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _503 = _501.x;
    float _504 = _501.y;
    float _505 = _501.z;
    float _514 = ((_484.z - _505) * _411) + _505;
    float _517 = ((((_484.x - _503) * _411) + _503) * 2.0) + (-1.0);
    float _518 = ((((_484.y - _504) * _411) + _504) * 2.0) + (-1.0);
    float _519 = dot(vec2(_517, _518), vec2(_517, _518));
    float _3842 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _524 = sqrt(1.0 - (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))));
    vec4 _544 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _556 = (_517 + ((((_457.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_544.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _557 = (_518 + ((((_457.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_544.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _560 = fma(_524, _229, fma(_557, _236, _556 * _222));
    float _563 = fma(_524, _230, fma(_557, _237, _556 * _223));
    float _566 = fma(_524, _231, fma(_557, _238, _556 * _224));
    float _570 = inversesqrt(dot(vec3(_560, _563, _566), vec3(_560, _563, _566)));
    vec4 _599 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _281) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _282) + cbTextureTilingScale._m0[11u].w));
    float _601 = _599.x;
    float _602 = 1.0 - _601;
    float _608 = (cbMtdParam._m0[19u].x + dot(vec4(_570 * _560, _570 * _563, _570 * _566, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_601 - _602) * cbMtdParam._m0[24u].z) + _602) * cbMtdParam._m0[21u].z);
    float _3853 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _609 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _616 = (_609 * (cbMtdParam._m0[17u].x - _437)) + _437;
    float _617 = (_609 * (cbMtdParam._m0[17u].y - _438)) + _438;
    float _618 = (_609 * (cbMtdParam._m0[17u].z - _439)) + _439;
    float _623 = (((_457.z - _514) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _514;
    float _627 = ((_544.z - _623) * cbMtdParam._m0[19u].w) + _623;
    vec4 _640 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _281) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _282) + cbTextureTilingScale._m0[15u].w));
    float _647 = (_640.x * 2.0) + (-1.0);
    float _648 = (_640.y * 2.0) + (-1.0);
    float _649 = dot(vec2(_647, _648), vec2(_647, _648));
    float _3864 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _657 = ((_640.z - _627) * _609) + _627;
    float _667 = ((sqrt(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) - _524) * _609) + _524;
    float _670 = (((_647 - _556) * _609) + _556) + (cbMtdParam._m0[21u].x * _556);
    float _671 = (((_648 - _557) * _609) + _557) + (cbMtdParam._m0[21u].x * _557);
    float _673 = cbMtdParam._m0[22u].x + _544.w;
    float _676 = fma(_667, _229, fma(_671, _236, _670 * _222));
    float _679 = fma(_667, _230, fma(_671, _237, _670 * _223));
    float _682 = fma(_667, _231, fma(_671, _238, _670 * _224));
    float _686 = inversesqrt(dot(vec3(_676, _679, _682), vec3(_676, _679, _682)));
    float _687 = _686 * _676;
    float _688 = _686 * _679;
    float _689 = _686 * _682;
    float _3875 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _690 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _3886 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _3897 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _3908 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3919 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _708 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _760 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _750);
    float _761 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _750);
    float _762 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _750);
    float _766 = inversesqrt(dot(vec3(_760, _761, _762), vec3(_760, _761, _762)));
    float _767 = _760 * _766;
    float _768 = _761 * _766;
    float _769 = _762 * _766;
    float _775 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _776 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _794 = fma(_689, cbSceneParam._m0[5u].z, fma(_688, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _687));
    float _797 = fma(_689, cbSceneParam._m0[6u].z, fma(_688, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _687));
    float _800 = fma(_689, cbSceneParam._m0[7u].z, fma(_688, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _687));
    uint _814 = (_262 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _820 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * cbInstanceData._m0[_814].x;
    float _821 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) * cbInstanceData._m0[_814].y;
    float _822 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * cbInstanceData._m0[_814].z;
    float _3930 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    vec4 _834 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _775, cbSceneParam._m0[86u].y * _776));
    float _838 = ((isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * TEXCOORD_5.w) * _834.x;
    float _839 = dot(vec3(_687, _688, _689), vec3(_767, _768, _769));
    float _842 = _839 * 2.0;
    float _846 = (_842 * _687) - _767;
    float _847 = (_842 * _688) - _768;
    float _848 = (_842 * _689) - _769;
    float _852 = abs(dot(vec3(_767, _768, _769), vec3(_687, _688, _689)));
    float _3963 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _854 = sqrt(_690);
    float _867 = exp2((_854 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_854 * 3.0));
    float _899 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1208;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _933 = fma(_907, cbModelParam._m0[26u].z, fma(_903, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _899));
        float _937 = fma(_907, cbModelParam._m0[27u].z, fma(_903, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _899));
        float _941 = fma(_907, cbModelParam._m0[28u].z, fma(_903, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _899));
        float _966 = _899 + _687;
        float _967 = _903 + _688;
        float _968 = _907 + _689;
        float _978 = fma(_968, cbModelParam._m0[26u].z, fma(_967, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _966)) - _933;
        float _979 = fma(_968, cbModelParam._m0[27u].z, fma(_967, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _966)) - _937;
        float _980 = fma(_968, cbModelParam._m0[28u].z, fma(_967, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _966)) - _941;
        float _984 = inversesqrt(dot(vec3(_978, _979, _980), vec3(_978, _979, _980)));
        float _997 = ((_984 * _978) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_933 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_984 * _979) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_937 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_984 * _980) / cbModelParam._m0[34u].z) + ((((((_941 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        float _1036 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_1002.x + (-0.5));
        float _1038 = _1036 * (_1002.y + (-0.5));
        float _1039 = _1036 * (_1002.z + (-0.5));
        float _1046 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1009.x + (-0.5));
        float _1048 = _1046 * (_1009.y + (-0.5));
        float _1049 = _1046 * (_1009.z + (-0.5));
        float _1056 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1016.x + (-0.5));
        float _1058 = _1056 * (_1016.y + (-0.5));
        float _1059 = _1056 * (_1016.z + (-0.5));
        float _1066 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1023.x + (-0.5));
        float _1068 = _1066 * (_1023.y + (-0.5));
        float _1069 = _1066 * (_1023.z + (-0.5));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = _1037 * 0.5;
        float _1074 = _1047 * 0.5;
        float _1075 = _1057 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1090 = (dot(vec3(_687, _688, _689), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1100 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _4011 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1102 + 1.0))) + _1107) * _1070;
        float _1117 = _1038 * 0.5;
        float _1118 = _1048 * 0.5;
        float _1119 = _1058 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_687, _688, _689), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _4044 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1144 + 1.0))) + _1149) * _1071;
        float _1159 = _1039 * 0.5;
        float _1160 = _1049 * 0.5;
        float _1161 = _1059 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_687, _688, _689), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _4077 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1186 + 1.0))) + _1191) * _1072;
        _1208 = _1039;
        _1210 = _1038;
        _1211 = _1037;
        _1212 = _1049;
        _1213 = _1048;
        _1214 = _1047;
        _1215 = _1059;
        _1216 = _1058;
        _1217 = _1057;
        _1218 = _1072;
        _1219 = _1071;
        _1220 = _1070;
        _1221 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1223 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
    }
    else
    {
        _1208 = _1209;
        _1210 = _1209;
        _1211 = _1209;
        _1212 = _1209;
        _1213 = _1209;
        _1214 = _1209;
        _1215 = _1209;
        _1216 = _1209;
        _1217 = _1209;
        _1218 = _1209;
        _1219 = _1209;
        _1220 = _1209;
        _1221 = 0.0;
        _1222 = 0.0;
        _1223 = 0.0;
    }
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1248 = fma(_907, cbModelParam._m0[30u].z, fma(_903, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _899));
        float _1252 = fma(_907, cbModelParam._m0[31u].z, fma(_903, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _899));
        float _1256 = fma(_907, cbModelParam._m0[32u].z, fma(_903, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _899));
        float _1279 = _899 + _687;
        float _1280 = _903 + _688;
        float _1281 = _907 + _689;
        float _1291 = fma(_1281, cbModelParam._m0[30u].z, fma(_1280, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1279)) - _1248;
        float _1292 = fma(_1281, cbModelParam._m0[31u].z, fma(_1280, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1279)) - _1252;
        float _1293 = fma(_1281, cbModelParam._m0[32u].z, fma(_1280, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1279)) - _1256;
        float _1297 = inversesqrt(dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293)));
        float _1310 = ((_1297 * _1291) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1248 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1297 * _1292) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1252 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1297 * _1293) / cbModelParam._m0[35u].z) + ((((((_1256 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        float _1347 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1314.x + (-0.5));
        float _1349 = _1347 * (_1314.y + (-0.5));
        float _1350 = _1347 * (_1314.z + (-0.5));
        float _1357 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1321.x + (-0.5));
        float _1359 = _1357 * (_1321.y + (-0.5));
        float _1360 = _1357 * (_1321.z + (-0.5));
        float _1367 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1328.x + (-0.5));
        float _1369 = _1367 * (_1328.y + (-0.5));
        float _1370 = _1367 * (_1328.z + (-0.5));
        float _1377 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1335.x + (-0.5));
        float _1379 = _1377 * (_1335.y + (-0.5));
        float _1380 = _1377 * (_1335.z + (-0.5));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = _1348 * 0.5;
        float _1385 = _1358 * 0.5;
        float _1386 = _1368 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_687, _688, _689), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4140 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1411 + 1.0))) + _1416) * _1381;
        float _1426 = _1349 * 0.5;
        float _1427 = _1359 * 0.5;
        float _1428 = _1369 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_687, _688, _689), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4173 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1453 + 1.0))) + _1458) * _1382;
        float _1468 = _1350 * 0.5;
        float _1469 = _1360 * 0.5;
        float _1470 = _1370 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_687, _688, _689), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4206 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1495 + 1.0))) + _1500) * _1383;
        _1517 = _1350;
        _1518 = _1349;
        _1519 = _1348;
        _1520 = _1360;
        _1521 = _1359;
        _1522 = _1358;
        _1523 = _1370;
        _1524 = _1369;
        _1525 = _1368;
        _1526 = _1383;
        _1527 = _1382;
        _1528 = _1381;
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
    }
    else
    {
        _1517 = _1209;
        _1518 = _1209;
        _1519 = _1209;
        _1520 = _1209;
        _1521 = _1209;
        _1522 = _1209;
        _1523 = _1209;
        _1524 = _1209;
        _1525 = _1209;
        _1526 = _1209;
        _1527 = _1209;
        _1528 = _1209;
        _1529 = 0.0;
        _1530 = 0.0;
        _1531 = 0.0;
    }
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1221)) + _1221;
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1222)) + _1222;
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1223)) + _1223;
    float _1564 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1542, cbSceneParam._m0[89u].y, _1541 * cbSceneParam._m0[89u].x));
    float _1567 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1542, cbSceneParam._m0[90u].y, _1541 * cbSceneParam._m0[90u].x));
    float _1570 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1542, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1541));
    float _1585 = _846 * 0.5;
    float _1586 = _847 * 0.5;
    float _1587 = _848 * 0.5;
    float _1588 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1591 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1594 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1628;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1601 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1208, _1212, _1215, _1218));
        float _1605 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1210, _1213, _1216, _1219));
        float _1609 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1211, _1214, _1217, _1220));
        float _1616 = dot(vec4(cbModelParam._m0[39u]), vec4(_1585, _1586, _1587, 1.0));
        _1628 = dot(vec3(isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1616) ? 0.0 : (isnan(0.0) ? _1616 : max(0.0, _1616))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1628 = 1.0;
    }
    float _1639;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1630 = dot(vec4(cbModelParam._m0[40u]), vec4(_1585, _1586, _1587, 1.0));
        _1639 = dot(vec3(isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1630) ? 0.0 : (isnan(0.0) ? _1630 : max(0.0, _1630))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1639 = 1.0;
    }
    float _1643 = (_1639 * cbModelParam._m0[1u].x) + (_1628 * (1.0 - cbModelParam._m0[1u].x));
    float _1653 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _690);
    float _1654 = isnan(_1653) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1653 : min(cbModelParam._m0[25u].z, _1653));
    float _1735;
    float _1737;
    float _1739;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1702 = fma(_907, cbModelParam._m0[13u].z, fma(_903, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _899)) + cbModelParam._m0[13u].w;
        float _1706 = fma(_907, cbModelParam._m0[14u].z, fma(_903, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _899)) + cbModelParam._m0[14u].w;
        float _1710 = fma(_907, cbModelParam._m0[15u].z, fma(_903, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _899)) + cbModelParam._m0[15u].w;
        float _1713 = fma(_848, cbModelParam._m0[13u].z, fma(_847, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _846));
        float _1716 = fma(_848, cbModelParam._m0[14u].z, fma(_847, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _846));
        float _1719 = fma(_848, cbModelParam._m0[15u].z, fma(_847, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _846));
        float _1747;
        if (_1713 > 0.0)
        {
            _1747 = abs((1.0 - _1702) / _1713);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1702 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1747 = frontier_phi_14_12_ladder;
        }
        float _1917;
        if (_1716 > 0.0)
        {
            _1917 = abs((1.0 - _1706) / _1716);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1706 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1917 = frontier_phi_23_19_ladder;
        }
        float _2212;
        if (_1719 > 0.0)
        {
            _2212 = abs((1.0 - _1710) / _1719);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1710 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2212 = frontier_phi_35_30_ladder;
        }
        float _2214 = isnan(_1917) ? _1747 : (isnan(_1747) ? _1917 : min(_1747, _1917));
        float _2215 = isnan(_2212) ? _2214 : (isnan(_2214) ? _2212 : min(_2214, _2212));
        float _2219 = (_2215 * _1713) + _1702;
        float _2220 = (_2215 * _1716) + _1706;
        float _2221 = (_2215 * _1719) + _1710;
        float _2222 = _2215 * 9.9999997473787516355514526367188e-05;
        float _2224 = (-1.0) - _2222;
        float _2226 = _2222 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2221 > _2226) || ((_2221 < _2224) || ((_2220 > _2226) || ((_2220 < _2224) || ((_2219 < _2224) || (_2219 > _2226))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2366 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2221, cbModelParam._m0[9u].z, fma(_2220, cbModelParam._m0[9u].y, _2219 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2221, cbModelParam._m0[10u].z, fma(_2220, cbModelParam._m0[10u].y, _2219 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2221, cbModelParam._m0[11u].z, fma(_2220, cbModelParam._m0[11u].y, _2219 * cbModelParam._m0[11u].x))), _1654);
            frontier_phi_13_35_ladder = _2366.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2366.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2366.x * cbModelParam._m0[1u].y;
        }
        _1735 = frontier_phi_13_35_ladder_2;
        _1737 = frontier_phi_13_35_ladder_1;
        _1739 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1723 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_846, _847, _848), _1654);
        _1735 = _1723.x * cbModelParam._m0[1u].y;
        _1737 = _1723.y * cbModelParam._m0[1u].y;
        _1739 = _1723.z * cbModelParam._m0[1u].y;
    }
    float _1743 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _690);
    float _1744 = isnan(_1743) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1743 : min(cbModelParam._m0[25u].w, _1743));
    float _1834;
    float _1836;
    float _1838;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1798 = fma(_907, cbModelParam._m0[21u].z, fma(_903, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _899)) + cbModelParam._m0[21u].w;
        float _1802 = fma(_907, cbModelParam._m0[22u].z, fma(_903, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _899)) + cbModelParam._m0[22u].w;
        float _1806 = fma(_907, cbModelParam._m0[23u].z, fma(_903, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _899)) + cbModelParam._m0[23u].w;
        float _1809 = fma(_848, cbModelParam._m0[21u].z, fma(_847, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _846));
        float _1812 = fma(_848, cbModelParam._m0[22u].z, fma(_847, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _846));
        float _1815 = fma(_848, cbModelParam._m0[23u].z, fma(_847, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _846));
        float _1922;
        if (_1809 > 0.0)
        {
            _1922 = abs((1.0 - _1798) / _1809);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1798 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1922 = frontier_phi_25_21_ladder;
        }
        float _2239;
        if (_1812 > 0.0)
        {
            _2239 = abs((1.0 - _1802) / _1812);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1802 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2239 = frontier_phi_37_32_ladder;
        }
        float _2566;
        if (_1815 > 0.0)
        {
            _2566 = abs((1.0 - _1806) / _1815);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1806 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2566 = frontier_phi_47_44_ladder;
        }
        float _2568 = isnan(_2239) ? _1922 : (isnan(_1922) ? _2239 : min(_1922, _2239));
        float _2569 = isnan(_2566) ? _2568 : (isnan(_2568) ? _2566 : min(_2568, _2566));
        float _2573 = (_2569 * _1809) + _1798;
        float _2574 = (_2569 * _1812) + _1802;
        float _2575 = (_2569 * _1815) + _1806;
        float _2576 = _2569 * 9.9999997473787516355514526367188e-05;
        float _2577 = (-1.0) - _2576;
        float _2579 = _2576 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2575 > _2579) || ((_2575 < _2577) || ((_2574 > _2579) || ((_2574 < _2577) || ((_2573 < _2577) || (_2573 > _2579))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2693 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2575, cbModelParam._m0[17u].z, fma(_2574, cbModelParam._m0[17u].y, _2573 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2575, cbModelParam._m0[18u].z, fma(_2574, cbModelParam._m0[18u].y, _2573 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2575, cbModelParam._m0[19u].z, fma(_2574, cbModelParam._m0[19u].y, _2573 * cbModelParam._m0[19u].x))), _1744);
            frontier_phi_22_47_ladder = _2693.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2693.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2693.x * cbModelParam._m0[1u].z;
        }
        _1834 = frontier_phi_22_47_ladder_2;
        _1836 = frontier_phi_22_47_ladder_1;
        _1838 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1818 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_846, _847, _848), _1744);
        _1834 = _1818.x * cbModelParam._m0[1u].z;
        _1836 = _1818.y * cbModelParam._m0[1u].z;
        _1838 = _1818.z * cbModelParam._m0[1u].z;
    }
    float _1850 = ((((1.0 - _867) * ((_854 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_867 * _854)) * _838;
    float _1851 = _1850 * ((cbModelParam._m0[1u].w * (_1834 - _1735)) + _1735);
    float _1852 = _1850 * ((cbModelParam._m0[1u].w * (_1836 - _1737)) + _1737);
    float _1853 = _1850 * ((cbModelParam._m0[1u].w * (_1838 - _1739)) + _1739);
    float _1856 = fma(_1853, cbSceneParam._m0[89u].z, fma(_1852, cbSceneParam._m0[89u].y, _1851 * cbSceneParam._m0[89u].x));
    float _1859 = fma(_1853, cbSceneParam._m0[90u].z, fma(_1852, cbSceneParam._m0[90u].y, _1851 * cbSceneParam._m0[90u].x));
    float _1862 = fma(_1853, cbSceneParam._m0[91u].z, fma(_1852, cbSceneParam._m0[91u].y, _1851 * cbSceneParam._m0[91u].x));
    float _1896 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1900 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1904 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1908 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1909 = _1896 / _1908;
    float _1910 = _1900 / _1908;
    float _1911 = _1904 / _1908;
    float _2058;
    float _2059;
    float _2060;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1938 = ((uint(_1911 > cbSceneParam._m0[59u].y) + uint(_1911 > cbSceneParam._m0[59u].x)) + uint(_1911 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1939 = _1938 + 43u;
        uint _1947 = _1938 + 44u;
        uint _1955 = _1938 + 45u;
        uint _1963 = _1938 + 46u;
        float _1974 = fma(_1908, cbSceneParam._m0[_1939].w, fma(_1904, cbSceneParam._m0[_1939].z, fma(_1900, cbSceneParam._m0[_1939].y, _1896 * cbSceneParam._m0[_1939].x)));
        float _1978 = fma(_1908, cbSceneParam._m0[_1947].w, fma(_1904, cbSceneParam._m0[_1947].z, fma(_1900, cbSceneParam._m0[_1947].y, _1896 * cbSceneParam._m0[_1947].x)));
        float _1986 = fma(_1908, cbSceneParam._m0[_1963].w, fma(_1904, cbSceneParam._m0[_1963].z, fma(_1900, cbSceneParam._m0[_1963].y, _1896 * cbSceneParam._m0[_1963].x)));
        float _1991 = cbSceneParam._m0[33u].z * _1986;
        float _1993 = cbSceneParam._m0[33u].w * _1986;
        float _1996 = fma(_1908, cbSceneParam._m0[_1955].w, fma(_1904, cbSceneParam._m0[_1955].z, fma(_1900, cbSceneParam._m0[_1955].y, _1896 * cbSceneParam._m0[_1955].x))) / _1986;
        float _2044 = (cbSceneParam._m0[33u].x - sqrt(((_1910 * _1910) + (_1909 * _1909)) + (_1911 * _1911))) * cbSceneParam._m0[33u].y;
        float _4332 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2051 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1991 + _1974) / _1986, (_1993 + _1978) / _1986), _1996), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1993 + _1974) / _1986, (_1978 - _1991) / _1986), _1996), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1974 - _1991) / _1986, (_1978 - _1993) / _1986), _1996), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1974 - _1993) / _1986, (_1991 + _1978) / _1986), _1996), 0.0)).x), vec4(0.25)));
        _2058 = 1.0 - (_2051 * cbSceneParam._m0[34u].x);
        _2059 = 1.0 - (_2051 * cbSceneParam._m0[34u].y);
        _2060 = 1.0 - (_2051 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2058 = 1.0;
        _2059 = 1.0;
        _2060 = 1.0;
    }
    float _2124;
    float _2126;
    float _2128;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2112 = fma(_1908, cbSceneParam._m0[63u].w, fma(_1904, cbSceneParam._m0[63u].z, fma(_1900, cbSceneParam._m0[63u].y, _1896 * cbSceneParam._m0[63u].x)));
        float _2113 = fma(_1908, cbSceneParam._m0[60u].w, fma(_1904, cbSceneParam._m0[60u].z, fma(_1900, cbSceneParam._m0[60u].y, _1896 * cbSceneParam._m0[60u].x))) / _2112;
        float _2114 = fma(_1908, cbSceneParam._m0[61u].w, fma(_1904, cbSceneParam._m0[61u].z, fma(_1900, cbSceneParam._m0[61u].y, _1896 * cbSceneParam._m0[61u].x))) / _2112;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2113 >= cbSceneParam._m0[64u].x) && (_2114 >= cbSceneParam._m0[64u].y)) && (_2113 <= cbSceneParam._m0[64u].z)) && (_2114 <= cbSceneParam._m0[64u].w))
        {
            float _2252 = fma(_1908, cbSceneParam._m0[62u].w, fma(_1904, cbSceneParam._m0[62u].z, fma(_1900, cbSceneParam._m0[62u].y, _1896 * cbSceneParam._m0[62u].x))) / _2112;
            float _2256 = isnan(cbSceneParam._m0[41u].w) ? _2252 : (isnan(_2252) ? cbSceneParam._m0[41u].w : max(_2252, cbSceneParam._m0[41u].w));
            float _2299 = (cbSceneParam._m0[33u].x - sqrt(((_1910 * _1910) + (_1909 * _1909)) + (_1911 * _1911))) * cbSceneParam._m0[33u].y;
            float _4348 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
            float _2306 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2113, cbSceneParam._m0[33u].w + _2114), _2256), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2113, _2114 - cbSceneParam._m0[33u].z), _2256), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2113 - cbSceneParam._m0[33u].z, _2114 - cbSceneParam._m0[33u].w), _2256), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2113 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2114), _2256), 0.0)).x), vec4(0.25)));
            float _2310 = 1.0 - (_2306 * cbSceneParam._m0[34u].x);
            float _2311 = 1.0 - (_2306 * cbSceneParam._m0[34u].y);
            float _2312 = 1.0 - (_2306 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2312) ? _2060 : (isnan(_2060) ? _2312 : min(_2060, _2312));
            frontier_phi_34_33_ladder_1 = isnan(_2311) ? _2059 : (isnan(_2059) ? _2311 : min(_2059, _2311));
            frontier_phi_34_33_ladder_2 = isnan(_2310) ? _2058 : (isnan(_2058) ? _2310 : min(_2058, _2310));
        }
        else
        {
            frontier_phi_34_33_ladder = _2060;
            frontier_phi_34_33_ladder_1 = _2059;
            frontier_phi_34_33_ladder_2 = _2058;
        }
        _2124 = frontier_phi_34_33_ladder_2;
        _2126 = frontier_phi_34_33_ladder_1;
        _2128 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2124 = _2058;
        _2126 = _2059;
        _2128 = _2060;
    }
    uvec4 _2133 = floatBitsToUint(cbInstanceData._m0[_262 + 5u]);
    uint _2135 = _2133.x * 14u;
    uint _2136 = _2135 + 13u;
    float _2143 = _838 + (-1.0);
    float _2148 = (cbLight._m0[_2136].x * _2143) + 1.0;
    float _2149 = (cbLight._m0[_2136].y * _2143) + 1.0;
    float _2150 = (cbLight._m0[_2136].z * _2143) + 1.0;
    float _2151 = (cbLight._m0[_2136].w * _2143) + 1.0;
    uint _2152 = _2135 + 5u;
    float _2158 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
    uint _2162 = _2135 + 4u;
    float _2171 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
    uint _2175 = _2135 | 1u;
    float _2186 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_687, _688, _689));
    float _2189 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_687, _688, _689));
    float _4384 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _4395 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2194 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * 0.3183098733425140380859375;
    float _2196 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * 0.3183098733425140380859375;
    float _2203 = ((cbLight._m0[_2152].x * _2158) * _2196) + (((cbLight._m0[_2162].x * _2124) * _2171) * _2194);
    float _2204 = ((_2158 * cbLight._m0[_2152].y) * _2196) + (((cbLight._m0[_2162].y * _2126) * _2171) * _2194);
    float _2205 = ((_2158 * cbLight._m0[_2152].z) * _2196) + (((cbLight._m0[_2162].z * _2128) * _2171) * _2194);
    uvec4 _2209 = floatBitsToUint(cbLight._m0[_2135 + 12u]);
    bool _2211 = _2209.x == 0u;
    float _2313;
    float _2315;
    float _2317;
    if (_2211)
    {
        _2313 = _2203;
        _2315 = _2204;
        _2317 = _2205;
    }
    else
    {
        uint _2321 = _2135 + 6u;
        float _2337 = (dot(vec3(cbLight._m0[_2135 + 2u].xyz), vec3(_687, _688, _689)) * 0.5) + 0.5;
        float _2338 = _2337 * _2337;
        float _4406 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2339 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2340 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2313 = (((cbLight._m0[_2321].x * 0.3183098733425140380859375) * _2339) * _2340) + _2203;
        _2315 = (((cbLight._m0[_2321].y * 0.3183098733425140380859375) * _2339) * _2340) + _2204;
        _2317 = (((cbLight._m0[_2321].z * 0.3183098733425140380859375) * _2339) * _2340) + _2205;
    }
    bool _2320 = _2209.y == 0u;
    float _2375;
    float _2377;
    float _2379;
    if (_2320)
    {
        _2375 = _2313;
        _2377 = _2315;
        _2379 = _2317;
    }
    else
    {
        uint _2537 = _2135 + 7u;
        float _2553 = (dot(vec3(cbLight._m0[_2135 + 3u].xyz), vec3(_687, _688, _689)) * 0.5) + 0.5;
        float _2554 = _2553 * _2553;
        float _4422 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2555 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2556 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2375 = (((cbLight._m0[_2537].x * 0.3183098733425140380859375) * _2555) * _2556) + _2313;
        _2377 = (((cbLight._m0[_2537].y * 0.3183098733425140380859375) * _2555) * _2556) + _2315;
        _2379 = (((cbLight._m0[_2537].z * 0.3183098733425140380859375) * _2555) * _2556) + _2317;
    }
    uint _2382 = _2135 + 8u;
    float _2395 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2135].w)) * _690) * 0.949999988079071044921875);
    float _2396 = _2395 * _2395;
    float _2397 = cbLight._m0[_2135].x + _767;
    float _2398 = cbLight._m0[_2135].y + _768;
    float _2399 = cbLight._m0[_2135].z + _769;
    float _2403 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
    float _2404 = _2403 * _2397;
    float _2405 = _2403 * _2398;
    float _2406 = _2403 * _2399;
    float _2407 = dot(vec3(_687, _688, _689), vec3(cbLight._m0[_2135].xyz));
    float _4438 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _4449 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _2411 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2412 = dot(vec3(_687, _688, _689), vec3(_2404, _2405, _2406));
    float _4460 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2415 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2416 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2404, _2405, _2406));
    float _4471 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2420 = _2396 * _2396;
    float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
    float _2435 = (exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2436 = 1.0 - _2396;
    float _2447 = (0.5 / (((_2411 * ((_2410 * _2436) + _2396)) + 9.9999999392252902907785028219223e-09) + (((_2411 * _2436) + _2396) * _2410))) * _2410;
    float _4482 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2449 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
    uint _2463 = _2135 + 9u;
    float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _690) * 0.949999988079071044921875);
    float _2475 = _2474 * _2474;
    float _2476 = cbLight._m0[_2175].x + _767;
    float _2477 = cbLight._m0[_2175].y + _768;
    float _2478 = cbLight._m0[_2175].z + _769;
    float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
    float _2483 = _2482 * _2476;
    float _2484 = _2482 * _2477;
    float _2485 = _2482 * _2478;
    float _2486 = dot(vec3(_687, _688, _689), vec3(cbLight._m0[_2175].xyz));
    float _4493 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2489 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _2490 = dot(vec3(_687, _688, _689), vec3(_2483, _2484, _2485));
    float _4504 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _2494 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2483, _2484, _2485));
    float _4515 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2498 = _2475 * _2475;
    float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
    float _2511 = (exp2(log2(1.0 - (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2512 = 1.0 - _2475;
    float _2522 = (0.5 / (((_2411 * ((_2489 * _2512) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2411 * _2512) + _2475) * _2489))) * _2489;
    float _4526 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2524 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
    float _2534 = (((_2511 * cbLight._m0[_2463].x) * _2524) * _2158) + ((((cbLight._m0[_2382].x * _2124) * _2435) * _2449) * _2171);
    float _2535 = (((_2511 * cbLight._m0[_2463].y) * _2524) * _2158) + ((((cbLight._m0[_2382].y * _2126) * _2435) * _2449) * _2171);
    float _2536 = (((_2511 * cbLight._m0[_2463].z) * _2524) * _2158) + ((((cbLight._m0[_2382].z * _2128) * _2435) * _2449) * _2171);
    float _2592;
    float _2594;
    float _2596;
    if (_2211)
    {
        _2592 = _2534;
        _2594 = _2535;
        _2596 = _2536;
    }
    else
    {
        uint _2598 = _2135 + 2u;
        uint _2602 = _2135 + 10u;
        float _2616 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2598].w)) * _690) * 0.949999988079071044921875);
        float _2617 = _2616 * _2616;
        float _2618 = cbLight._m0[_2598].x + _767;
        float _2619 = cbLight._m0[_2598].y + _768;
        float _2620 = cbLight._m0[_2598].z + _769;
        float _2624 = inversesqrt(dot(vec3(_2618, _2619, _2620), vec3(_2618, _2619, _2620)));
        float _2625 = _2624 * _2618;
        float _2626 = _2624 * _2619;
        float _2627 = _2624 * _2620;
        float _2628 = dot(vec3(_687, _688, _689), vec3(cbLight._m0[_2598].xyz));
        float _4537 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2631 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2632 = dot(vec3(_687, _688, _689), vec3(_2625, _2626, _2627));
        float _4548 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2635 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2636 = dot(vec3(cbLight._m0[_2598].xyz), vec3(_2625, _2626, _2627));
        float _4559 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2640 = _2617 * _2617;
        float _2644 = ((_2635 * _2635) * (_2640 + (-1.0))) + 1.0;
        float _2653 = (exp2(log2(1.0 - (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2654 = 1.0 - _2617;
        float _2664 = (0.5 / (((_2411 * ((_2631 * _2654) + _2617)) + 9.9999999392252902907785028219223e-09) + (((_2411 * _2654) + _2617) * _2631))) * _2631;
        float _4570 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2666 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2640 / ((_2644 * _2644) * 3.141590118408203125));
        float _2667 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2592 = (((_2653 * cbLight._m0[_2602].x) * _2666) * _2667) + _2534;
        _2594 = (((_2653 * cbLight._m0[_2602].y) * _2666) * _2667) + _2535;
        _2596 = (((_2653 * cbLight._m0[_2602].z) * _2666) * _2667) + _2536;
    }
    float _2698;
    float _2700;
    float _2702;
    if (_2320)
    {
        _2698 = _2592;
        _2700 = _2594;
        _2702 = _2596;
    }
    else
    {
        uint _2709 = _2135 + 3u;
        uint _2713 = _2135 + 11u;
        float _2727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2709].w)) * _690) * 0.949999988079071044921875);
        float _2728 = _2727 * _2727;
        float _2729 = cbLight._m0[_2709].x + _767;
        float _2730 = cbLight._m0[_2709].y + _768;
        float _2731 = cbLight._m0[_2709].z + _769;
        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
        float _2736 = _2735 * _2729;
        float _2737 = _2735 * _2730;
        float _2738 = _2735 * _2731;
        float _2739 = dot(vec3(_687, _688, _689), vec3(cbLight._m0[_2709].xyz));
        float _4586 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2743 = dot(vec3(_687, _688, _689), vec3(_2736, _2737, _2738));
        float _4597 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _2747 = dot(vec3(cbLight._m0[_2709].xyz), vec3(_2736, _2737, _2738));
        float _4608 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2751 = _2728 * _2728;
        float _2755 = ((_2746 * _2746) * (_2751 + (-1.0))) + 1.0;
        float _2764 = (exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2765 = 1.0 - _2728;
        float _2775 = (0.5 / (((_2411 * ((_2742 * _2765) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2411 * _2765) + _2728) * _2742))) * _2742;
        float _4619 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2777 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2751 / ((_2755 * _2755) * 3.141590118408203125));
        float _2778 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2698 = (((_2764 * cbLight._m0[_2713].x) * _2777) * _2778) + _2592;
        _2700 = (((_2764 * cbLight._m0[_2713].y) * _2777) * _2778) + _2594;
        _2702 = (((_2764 * cbLight._m0[_2713].z) * _2777) * _2778) + _2596;
    }
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    if (_2133.y == 0u)
    {
        uvec4 _2799 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2800 = _2799.x;
        uint _2811 = uint((float(_2799.y) * floor(float(uint(cbSceneParam._m0[85u].y * _776) / _2800))) + floor(float(uint(cbSceneParam._m0[85u].x * _775) / _2800)));
        float _2821 = (log2(_1911 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2822 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        uint _2825 = uint(isnan(14.0) ? _2822 : (isnan(_2822) ? 14.0 : min(_2822, 14.0)));
        uvec4 _2830 = texelFetch(g_lightClusterGridBuffer, int(((_2825 << 2u) + (_2811 << 6u)) >> 2u));
        uint _2831 = _2830.x;
        uint _2832 = _2799.z;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        if (((((1u << ((_2832 >> 4u) & 15u)) + 4294967295u) & _2831) == 0u) || ((_2832 & 240u) == 0u))
        {
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
            _2921 = 0.0;
        }
        else
        {
            float _2912;
            float _2914;
            float _2916;
            float _2918;
            float _2920;
            float _2922;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            uint _3062 = 0u;
            uint _3071;
            bool _3072;
            for (;;)
            {
                _3071 = texelFetch(g_lightClassification, int((((_2825 << 5u) + (_2811 << 9u)) + (_3062 << 2u)) >> 2u)).x;
                _3072 = _3071 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3072)
                {
                    frontier_phi_66_pred = _3061;
                    frontier_phi_66_pred_1 = _3060;
                    frontier_phi_66_pred_2 = _3059;
                    frontier_phi_66_pred_3 = _3058;
                    frontier_phi_66_pred_4 = _3057;
                    frontier_phi_66_pred_5 = _3056;
                }
                else
                {
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    uint _3186;
                    _3180 = _3056;
                    _3181 = _3057;
                    _3182 = _3058;
                    _3183 = _3059;
                    _3184 = _3060;
                    _3185 = _3061;
                    _3186 = _3071;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    for (;;)
                    {
                        uint _3190 = uint(findLSB(_3186)) + (_3062 << 5u);
                        uint _3187 = (_3186 + 4294967295u) & _3186;
                        uint _3192 = _3190 * 48u;
                        vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 3u)).x));
                        uint _3212 = (_3190 * 48u) + 4u;
                        vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 3u)).x));
                        uint _3231 = (_3190 * 48u) + 8u;
                        vec3 _3242 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x));
                        float _3246 = _3206.x - _1909;
                        float _3247 = _3206.y - _1910;
                        float _3248 = _3206.z - _1911;
                        float _3249 = dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248));
                        float _3252 = inversesqrt(_3249);
                        float _3253 = _3252 * _3246;
                        float _3254 = _3252 * _3247;
                        float _3255 = _3252 * _3248;
                        float _3256 = dot(vec3(_794, _797, _800), vec3(_3253, _3254, _3255));
                        float _3261 = 1.0 - (_3249 * _3206.w);
                        float _4645 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3262 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3263 = sqrt(_3249) * _3225.w;
                        float _3266 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                        float _3267 = _3266 * _3266;
                        float _3270 = ((1.0 - _3267) * _3256) + _3267;
                        float _3273 = _3263 * _3263;
                        float _3277 = ((isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))) * _3262) / ((_3273 * 0.699999988079071044921875) + 1.0);
                        float _3281 = (-0.0) - _1909;
                        float _3282 = (-0.0) - _1910;
                        float _3283 = (-0.0) - _1911;
                        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                        float _3288 = _3287 * _3281;
                        float _3289 = _3287 * _3282;
                        float _3290 = _3287 * _3283;
                        float _3297 = exp2(log2(1.0 / ((_3273 * 3.5) + 5.0)) * 0.25);
                        float _3298 = 1.0 - _854;
                        float _3305 = sqrt(1.0 - ((1.0 - (_3298 * _3298)) * (1.0 - (_3297 * _3297))));
                        float _3306 = _3305 * _3305;
                        float _3307 = _3306 * _3306;
                        float _3308 = _3288 + _3253;
                        float _3309 = _3289 + _3254;
                        float _3310 = _3290 + _3255;
                        float _3314 = inversesqrt(dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310)));
                        float _3318 = dot(vec3(_794, _797, _800), vec3(_3288, _3289, _3290));
                        float _4661 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3321 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                        float _3322 = dot(vec3(_794, _797, _800), vec3(_3314 * _3308, _3314 * _3309, _3314 * _3310));
                        float _4672 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3325 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                        float _3329 = ((_3325 * _3325) * (_3307 + (-1.0))) + 1.0;
                        float _3330 = _3266 * _3306;
                        float _3331 = _3330 * _3330;
                        float _3334 = ((1.0 - _3331) * _3256) + _3331;
                        float _4683 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3335 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                        float _3336 = 1.0 - _3306;
                        float _3346 = (0.5 / (((_3335 * ((_3321 * _3336) + _3306)) + 9.9999999392252902907785028219223e-09) + (((_3335 * _3336) + _3306) * _3321))) * _3335;
                        float _4694 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3357 = (((_3307 * 3.1415927410125732421875) * (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) / ((_3329 * _3329) * ((_3273 * 2.1991131305694580078125) + 3.141590118408203125))) * _3262;
                        _3115 = (_3277 * _3225.x) + _3183;
                        _3116 = (_3277 * _3225.y) + _3184;
                        _3117 = (_3277 * _3225.z) + _3185;
                        _3112 = (_3357 * _3242.x) + _3180;
                        _3113 = (_3357 * _3242.y) + _3181;
                        _3114 = (_3357 * _3242.z) + _3182;
                        if (_3187 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3180 = _3112;
                            _3181 = _3113;
                            _3182 = _3114;
                            _3183 = _3115;
                            _3184 = _3116;
                            _3185 = _3117;
                            _3186 = _3187;
                        }
                    }
                    frontier_phi_66_pred = _3117;
                    frontier_phi_66_pred_1 = _3116;
                    frontier_phi_66_pred_2 = _3115;
                    frontier_phi_66_pred_3 = _3114;
                    frontier_phi_66_pred_4 = _3113;
                    frontier_phi_66_pred_5 = _3112;
                }
                _2922 = frontier_phi_66_pred;
                _2920 = frontier_phi_66_pred_1;
                _2918 = frontier_phi_66_pred_2;
                _2916 = frontier_phi_66_pred_3;
                _2914 = frontier_phi_66_pred_4;
                _2912 = frontier_phi_66_pred_5;
                uint _3063 = _3062 + 1u;
                if (_3063 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3056 = _2912;
                    _3057 = _2914;
                    _3058 = _2916;
                    _3059 = _2918;
                    _3060 = _2920;
                    _3061 = _2922;
                    _3062 = _3063;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
            _2921 = _2922;
        }
        uvec4 _2925 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2926 = _2925.z;
        uint _2928 = (_2926 >> 8u) & 15u;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        if (((4294967295u << _2928) & _2831) == 0u)
        {
            _3024 = _2911;
            _3026 = _2913;
            _3028 = _2915;
            _3030 = _2917;
            _3032 = _2919;
            _3034 = _2921;
        }
        else
        {
            float _3049 = inversesqrt(dot(vec3(_1909, _1910, _1911), vec3(_1909, _1910, _1911)));
            float _3050 = _3049 * _1909;
            float _3051 = _3049 * _1910;
            float _3052 = _3049 * _1911;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2928 < ((_2926 >> 12u) & 15u))
            {
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3033;
                float _3035;
                float _3163 = _2911;
                float _3164 = _2913;
                float _3165 = _2915;
                float _3166 = _2917;
                float _3167 = _2919;
                float _3168 = _2921;
                uint _3169 = _2928;
                uint _3178;
                bool _3179;
                for (;;)
                {
                    _3178 = texelFetch(g_lightClassification, int((((_2825 << 5u) + (_2811 << 9u)) + (_3169 << 2u)) >> 2u)).x;
                    _3179 = _3178 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3179)
                    {
                        frontier_phi_72_pred = _3168;
                        frontier_phi_72_pred_1 = _3167;
                        frontier_phi_72_pred_2 = _3166;
                        frontier_phi_72_pred_3 = _3165;
                        frontier_phi_72_pred_4 = _3164;
                        frontier_phi_72_pred_5 = _3163;
                    }
                    else
                    {
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3375 = _3163;
                        float _3376 = _3164;
                        float _3377 = _3165;
                        float _3378 = _3166;
                        float _3379 = _3167;
                        float _3380 = _3168;
                        uint _3381 = _3178;
                        uint _3382;
                        vec4 _3407;
                        float _3408;
                        vec4 _3423;
                        vec3 _3435;
                        vec4 _3450;
                        vec4 _3465;
                        float _3511;
                        bool _3512;
                        for (;;)
                        {
                            uint _3392 = ((_3169 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3381));
                            _3382 = (_3381 + 4294967295u) & _3381;
                            uint _3394 = _3392 * 40u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            _3408 = _3407.w;
                            uint _3410 = (_3392 * 40u) + 4u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3425 = (_3392 * 40u) + 8u;
                            _3435 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x));
                            uint _3437 = (_3392 * 40u) + 16u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3452 = (_3392 * 40u) + 20u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3467 = (_3392 * 40u) + 24u;
                            vec4 _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3486 = (_3392 * 40u) + 28u;
                            vec4 _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            _3511 = fma(_1911, _3499.z, fma(_1910, _3499.y, _3499.x * _1909)) + _3499.w;
                            _3512 = !((fma(_1911, _3480.z, fma(_1910, _3480.y, _3480.x * _1909)) + _3480.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3512)
                            {
                                float _3539 = _3407.x - _1909;
                                float _3540 = _3407.y - _1910;
                                float _3541 = _3407.z - _1911;
                                float _3542 = dot(vec3(_3539, _3540, _3541), vec3(_3539, _3540, _3541));
                                float _3545 = inversesqrt(_3542);
                                float _3546 = _3545 * _3539;
                                float _3547 = _3545 * _3540;
                                float _3548 = _3545 * _3541;
                                float _3552 = 1.0 - (_3542 / (_3408 * _3408));
                                float _4705 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3553 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3557 = sqrt(_3542) * _3423.w;
                                float _3559 = 1.39999997615814208984375 / (_3557 + 1.39999997615814208984375);
                                float _3560 = _3559 * _3559;
                                float _3563 = ((1.0 - _3560) * dot(vec3(_3546, _3547, _3548), vec3(_794, _797, _800))) + _3560;
                                float _3566 = _3557 * _3557;
                                float _3570 = (fma(_1911, _3450.z, fma(_1910, _3450.y, _3450.x * _1909)) + _3450.w) / _3511;
                                float _3571 = (fma(_1911, _3465.z, fma(_1910, _3465.y, _3465.x * _1909)) + _3465.w) / _3511;
                                float _3575 = 1.0 - dot(vec2(_3570, _3571), vec2(_3570, _3571));
                                float _4721 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                                float _3577 = _3576 * (((isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0))) * _3553) / ((_3566 * 0.699999988079071044921875) + 1.0));
                                float _3589 = exp2(log2(1.0 / ((_3566 * 3.5) + 5.0)) * 0.25);
                                float _3590 = 1.0 - _854;
                                float _3597 = sqrt(1.0 - ((1.0 - (_3590 * _3590)) * (1.0 - (_3589 * _3589))));
                                float _3598 = _3597 * _3597;
                                float _3599 = _3598 * _3598;
                                float _3600 = _3546 - _3050;
                                float _3601 = _3547 - _3051;
                                float _3602 = _3548 - _3052;
                                float _3606 = inversesqrt(dot(vec3(_3600, _3601, _3602), vec3(_3600, _3601, _3602)));
                                float _3610 = dot(vec3(_794, _797, _800), vec3((-0.0) - _3050, (-0.0) - _3051, (-0.0) - _3052));
                                float _4732 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3613 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3614 = dot(vec3(_794, _797, _800), vec3(_3606 * _3600, _3606 * _3601, _3606 * _3602));
                                float _4743 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3617 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                                float _3621 = ((_3617 * _3617) * (_3599 + (-1.0))) + 1.0;
                                float _3622 = _3559 * _3598;
                                float _3623 = _3622 * _3622;
                                float _3629 = ((1.0 - _3623) * dot(vec3(_794, _797, _800), vec3(_3546, _3547, _3548))) + _3623;
                                float _4754 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3630 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                                float _3631 = 1.0 - _3598;
                                float _3641 = (0.5 / (((_3630 * ((_3613 * _3631) + _3598)) + 9.9999999392252902907785028219223e-09) + (((_3630 * _3631) + _3598) * _3613))) * _3630;
                                float _4765 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3651 = (_3576 * _3553) * (((_3599 * 3.1415927410125732421875) * (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) / ((_3621 * _3621) * ((_3566 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3577 * _3423.y;
                                frontier_phi_78_pred_1 = _3577 * _3423.x;
                                frontier_phi_78_pred_2 = _3651 * _3435.z;
                                frontier_phi_78_pred_3 = _3651 * _3435.y;
                                frontier_phi_78_pred_4 = _3651 * _3435.x;
                                frontier_phi_78_pred_5 = _3577 * _3423.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3659 = frontier_phi_78_pred;
                            _3658 = frontier_phi_78_pred_1;
                            _3657 = frontier_phi_78_pred_2;
                            _3656 = frontier_phi_78_pred_3;
                            _3655 = frontier_phi_78_pred_4;
                            _3660 = frontier_phi_78_pred_5;
                            _3365 = _3658 + _3378;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            _3362 = _3655 + _3375;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            if (_3382 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3382;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3367;
                        frontier_phi_72_pred_1 = _3366;
                        frontier_phi_72_pred_2 = _3365;
                        frontier_phi_72_pred_3 = _3364;
                        frontier_phi_72_pred_4 = _3363;
                        frontier_phi_72_pred_5 = _3362;
                    }
                    _3035 = frontier_phi_72_pred;
                    _3033 = frontier_phi_72_pred_1;
                    _3031 = frontier_phi_72_pred_2;
                    _3029 = frontier_phi_72_pred_3;
                    _3027 = frontier_phi_72_pred_4;
                    _3025 = frontier_phi_72_pred_5;
                    uint _3170 = _3169 + 1u;
                    if (_3170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3163 = _3025;
                        _3164 = _3027;
                        _3165 = _3029;
                        _3166 = _3031;
                        _3167 = _3033;
                        _3168 = _3035;
                        _3169 = _3170;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3035;
                frontier_phi_60_61_ladder_1 = _3033;
                frontier_phi_60_61_ladder_2 = _3029;
                frontier_phi_60_61_ladder_3 = _3027;
                frontier_phi_60_61_ladder_4 = _3025;
                frontier_phi_60_61_ladder_5 = _3031;
            }
            else
            {
                frontier_phi_60_61_ladder = _2921;
                frontier_phi_60_61_ladder_1 = _2919;
                frontier_phi_60_61_ladder_2 = _2915;
                frontier_phi_60_61_ladder_3 = _2913;
                frontier_phi_60_61_ladder_4 = _2911;
                frontier_phi_60_61_ladder_5 = _2917;
            }
            _3024 = frontier_phi_60_61_ladder_4;
            _3026 = frontier_phi_60_61_ladder_3;
            _3028 = frontier_phi_60_61_ladder_2;
            _3030 = frontier_phi_60_61_ladder_5;
            _3032 = frontier_phi_60_61_ladder_1;
            _3034 = frontier_phi_60_61_ladder;
        }
        float _3039 = isnan(1.0) ? _838 : (isnan(_838) ? 1.0 : min(_838, 1.0));
        _2844 = (_3039 * _3030) + _2375;
        _2846 = (_3039 * _3032) + _2377;
        _2848 = (_3039 * _3034) + _2379;
        _2850 = ((_3024 * 0.039999999105930328369140625) * _3039) + _2698;
        _2852 = ((_3026 * 0.039999999105930328369140625) * _3039) + _2700;
        _2854 = ((_3028 * 0.039999999105930328369140625) * _3039) + _2702;
    }
    else
    {
        _2844 = _2375;
        _2846 = _2377;
        _2848 = _2379;
        _2850 = _2698;
        _2852 = _2700;
        _2854 = _2702;
    }
    float _4781 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4792 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4803 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    uint _2874 = _262 + 6u;
    float _2882 = _775 / cbSceneParam._m0[86u].x;
    float _2883 = _776 / cbSceneParam._m0[86u].y;
    vec4 _2897 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2882, _2883, (log2((isnan(cbSceneParam._m0[77u].w) ? _708 : (isnan(_708) ? cbSceneParam._m0[77u].w : min(_708, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2899 = _2897.x;
    float _2900 = _2897.y;
    float _2901 = _2897.z;
    float _2902 = _2897.w;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    if (_708 > cbSceneParam._m0[78u].w)
    {
        float _2936 = isnan(_708) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _708 : min(cbSceneParam._m0[80u].w, _708));
        float _2937 = _2936 / _708;
        float _2948 = _2937 * _760;
        float _2949 = _761 * _2937;
        float _2950 = (-0.0) - _2949;
        float _2952 = _2937 * _762;
        float _2954 = (cbSceneParam._m0[77u].w * _2950) / _2936;
        float _2955 = _2954 + cbSceneParam._m0[79u].w;
        float _2956 = cbSceneParam._m0[79u].w - _2949;
        float _2962 = sqrt(((_2948 * _2948) + (_2949 * _2949)) + (_2952 * _2952));
        float _2965 = (1.0 - (cbSceneParam._m0[77u].w / _2936)) * _2962;
        float _2970 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2972 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3125;
        if (abs((_2950 - _2954) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3125 = ((((_2955 > 0.0) ? exp2(_2970 * _2955) : (2.0 - exp2(_2972 * _2955))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2965;
        }
        else
        {
            float _3085 = 1.0 / cbSceneParam._m0[80u].x;
            float _3086 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : max(_2955, _2956));
            float _3087 = isnan(_2956) ? _2955 : (isnan(_2955) ? _2956 : min(_2955, _2956));
            float _3096 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : min(_3086, 0.0));
            float _3097 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : min(_3087, 0.0));
            _3125 = ((abs(_2962 / _2950) * cbSceneParam._m0[80u].y) * ((((_3096 - _3097) * 2.0) - ((exp2(_2970 * (isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0)))) - exp2(_2970 * (isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))))) * _3085)) - ((exp2(_2972 * _3096) - exp2(_2972 * _3097)) * _3085))) + (_2965 * cbSceneParam._m0[80u].z);
        }
        vec4 _3127 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2882, _2883, 1.0), 0.0);
        float _3136 = exp2((_3125 * (-1.44269502162933349609375)) * (1.0 - _3127.w));
        float _3137 = log2(_3136);
        float _3153 = log2(_2902);
        _2974 = (exp2(_3153 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3137 * cbSceneParam._m0[78u].x)) * _3127.x) / cbSceneParam._m0[78u].x)) + _2899;
        _2976 = (exp2(_3153 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3137 * cbSceneParam._m0[78u].y)) * _3127.y) / cbSceneParam._m0[78u].y)) + _2900;
        _2978 = (exp2(_3153 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3137 * cbSceneParam._m0[78u].z)) * _3127.z) / cbSceneParam._m0[78u].z)) + _2901;
        _2980 = _3136 * _2902;
    }
    else
    {
        _2974 = _2899;
        _2976 = _2900;
        _2978 = _2901;
        _2980 = _2902;
    }
    float _2992 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2993 = _2992 == 3.0;
    float _2994 = log2(_2980);
    float _3001 = exp2(_2994 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2844 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _838))) + ((_2850 + ((isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))) * _1643)) * cbPerFrame._m0[3u].x));
    float _3002 = exp2(_2994 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (_2846 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _838))) + ((_2852 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1643)) * cbPerFrame._m0[3u].x));
    float _3003 = exp2(_2994 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2848 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _838))) + ((_2854 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1643)) * cbPerFrame._m0[3u].x));
    float _3012 = (_2992 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3012 * (_2993 ? _3001 : (_3001 + (cbSceneParam._m0[72u].w * _2974)));
    SV_Target.y = _3012 * (_2993 ? _3002 : (_3002 + (cbSceneParam._m0[72u].w * _2976)));
    SV_Target.z = _3012 * (_2993 ? _3003 : (_3003 + (cbSceneParam._m0[72u].w * _2978)));
    SV_Target.w = cbInstanceData._m0[_2874].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2874].w;
}


