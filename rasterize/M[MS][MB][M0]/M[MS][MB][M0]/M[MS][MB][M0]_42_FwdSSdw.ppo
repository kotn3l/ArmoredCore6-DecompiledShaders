#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1124;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _309 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _355 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _359 = _355.z;
    float _363 = (_355.x * 2.0) + (-1.0);
    float _364 = (_355.y * 2.0) + (-1.0);
    float _365 = dot(vec2(_363, _364), vec2(_363, _364));
    float _3455 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _371 = sqrt(1.0 - (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))));
    float _376 = _363 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_329.x * 2.0) + (-1.0)));
    float _377 = _364 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_329.y * 2.0) + (-1.0)));
    vec4 _394 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _396 = _394.x;
    float _397 = 1.0 - _396;
    float _406 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _409 = ((isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : min(_406, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _418 = (_409 - ((((((_396 - _397) * cbMtdParam._m0[24u].z) + _397) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _409))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3476 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _426 = (_419 * ((_309.x * cbMtdParam._m0[18u].x) - _288)) + _288;
    float _427 = (_419 * ((_309.y * cbMtdParam._m0[18u].y) - _289)) + _289;
    float _428 = (_419 * ((_309.z * cbMtdParam._m0[18u].z) - _290)) + _290;
    vec4 _441 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _443 = _441.x;
    float _444 = 1.0 - _443;
    float _473 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_443 - _444) * cbMtdParam._m0[24u].w) + _444) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3487 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _482 = ((((cbMtdParam._m0[10u].x - _426) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _474) + _426;
    float _483 = ((((cbMtdParam._m0[10u].y - _427) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _474) + _427;
    float _484 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _428)) * _474) + _428;
    float _489 = (((_329.z - _359) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _359;
    vec4 _503 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _510 = (_503.x * 2.0) + (-1.0);
    float _511 = (_503.y * 2.0) + (-1.0);
    float _512 = dot(vec2(_510, _511), vec2(_510, _511));
    float _3498 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _520 = (_419 * (_503.z - _489)) + _489;
    float _523 = ((cbMtdParam._m0[23u].y - _520) * _474) + _520;
    vec4 _545 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _551 = (_545.x * 2.0) + (-1.0);
    float _552 = (_545.y * 2.0) + (-1.0);
    float _553 = dot(vec2(_551, _552), vec2(_551, _552));
    float _3509 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _570 = (((_510 - _376) + (cbMtdParam._m0[21u].x * _376)) * _419) + _376;
    float _571 = (((_511 - _377) + (cbMtdParam._m0[21u].x * _377)) * _419) + _377;
    float _572 = (_419 * (sqrt(1.0 - (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) - _371)) + _371;
    float _583 = (((_551 - _570) + (_570 * cbMtdParam._m0[22u].z)) * _474) + _570;
    float _584 = (((_552 - _571) + (_571 * cbMtdParam._m0[22u].z)) * _474) + _571;
    float _585 = ((sqrt(1.0 - (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) - _572) * _474) + _572;
    float _587 = cbMtdParam._m0[22u].x + _355.w;
    float _590 = fma(_585, _230 * NORMAL.x, fma(_584, _237 * TANGENT.x, (_223 * _215) * _583));
    float _593 = fma(_585, _230 * NORMAL.y, fma(_584, _237 * TANGENT.y, (_223 * _216) * _583));
    float _596 = fma(_585, _230 * NORMAL.z, fma(_584, _237 * TANGENT.z, (_223 * _217) * _583));
    float _600 = inversesqrt(dot(vec3(_590, _593, _596), vec3(_590, _593, _596)));
    float _601 = _600 * _590;
    float _602 = _600 * _593;
    float _603 = _600 * _596;
    float _3520 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _604 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _3531 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _3542 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _3553 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3564 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _622 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _672 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _662);
    float _673 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _662);
    float _674 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _662);
    float _678 = inversesqrt(dot(vec3(_672, _673, _674), vec3(_672, _673, _674)));
    float _679 = _672 * _678;
    float _680 = _673 * _678;
    float _681 = _674 * _678;
    float _687 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _688 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _709 = fma(_603, cbSceneParam._m0[5u].z, fma(_602, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _601));
    float _712 = fma(_603, cbSceneParam._m0[6u].z, fma(_602, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _601));
    float _715 = fma(_603, cbSceneParam._m0[7u].z, fma(_602, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _601));
    uint _729 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _735 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0)))) * cbInstanceData._m0[_729].x;
    float _736 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) * cbInstanceData._m0[_729].y;
    float _737 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_729].z;
    float _3575 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _738 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _3586 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _3597 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    vec4 _749 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _687, cbSceneParam._m0[86u].y * _688));
    float _753 = ((isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * TEXCOORD_5.w) * _749.x;
    float _754 = dot(vec3(_601, _602, _603), vec3(_679, _680, _681));
    float _757 = _754 * 2.0;
    float _761 = (_757 * _601) - _679;
    float _762 = (_757 * _602) - _680;
    float _763 = (_757 * _603) - _681;
    float _767 = abs(dot(vec3(_679, _680, _681), vec3(_601, _602, _603)));
    float _3608 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _769 = sqrt(_604);
    float _782 = exp2((_769 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_769 * 3.0));
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1123;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _848 = fma(_822, cbModelParam._m0[26u].z, fma(_818, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814));
        float _852 = fma(_822, cbModelParam._m0[27u].z, fma(_818, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814));
        float _856 = fma(_822, cbModelParam._m0[28u].z, fma(_818, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814));
        float _881 = _814 + _601;
        float _882 = _818 + _602;
        float _883 = _822 + _603;
        float _893 = fma(_883, cbModelParam._m0[26u].z, fma(_882, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881)) - _848;
        float _894 = fma(_883, cbModelParam._m0[27u].z, fma(_882, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881)) - _852;
        float _895 = fma(_883, cbModelParam._m0[28u].z, fma(_882, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881)) - _856;
        float _899 = inversesqrt(dot(vec3(_893, _894, _895), vec3(_893, _894, _895)));
        float _912 = ((_899 * _893) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_848 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_899 * _894) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_852 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_899 * _895) / cbModelParam._m0[34u].z) + ((((((_856 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        float _951 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_917.x + (-0.5));
        float _953 = _951 * (_917.y + (-0.5));
        float _954 = _951 * (_917.z + (-0.5));
        float _961 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_924.x + (-0.5));
        float _963 = _961 * (_924.y + (-0.5));
        float _964 = _961 * (_924.z + (-0.5));
        float _971 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_931.x + (-0.5));
        float _973 = _971 * (_931.y + (-0.5));
        float _974 = _971 * (_931.z + (-0.5));
        float _981 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_938.x + (-0.5));
        float _983 = _981 * (_938.y + (-0.5));
        float _984 = _981 * (_938.z + (-0.5));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = _952 * 0.5;
        float _989 = _962 * 0.5;
        float _990 = _972 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1005 = (dot(vec3(_601, _602, _603), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1015 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3656 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1017 + 1.0))) + _1022) * _985;
        float _1032 = _953 * 0.5;
        float _1033 = _963 * 0.5;
        float _1034 = _973 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_601, _602, _603), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3689 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1059 + 1.0))) + _1064) * _986;
        float _1074 = _954 * 0.5;
        float _1075 = _964 * 0.5;
        float _1076 = _974 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_601, _602, _603), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3722 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1101 + 1.0))) + _1106) * _987;
        _1123 = _954;
        _1125 = _953;
        _1126 = _952;
        _1127 = _964;
        _1128 = _963;
        _1129 = _962;
        _1130 = _974;
        _1131 = _973;
        _1132 = _972;
        _1133 = _987;
        _1134 = _986;
        _1135 = _985;
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
    }
    else
    {
        _1123 = _1124;
        _1125 = _1124;
        _1126 = _1124;
        _1127 = _1124;
        _1128 = _1124;
        _1129 = _1124;
        _1130 = _1124;
        _1131 = _1124;
        _1132 = _1124;
        _1133 = _1124;
        _1134 = _1124;
        _1135 = _1124;
        _1136 = 0.0;
        _1137 = 0.0;
        _1138 = 0.0;
    }
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1163 = fma(_822, cbModelParam._m0[30u].z, fma(_818, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _814));
        float _1167 = fma(_822, cbModelParam._m0[31u].z, fma(_818, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _814));
        float _1171 = fma(_822, cbModelParam._m0[32u].z, fma(_818, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _814));
        float _1194 = _814 + _601;
        float _1195 = _818 + _602;
        float _1196 = _822 + _603;
        float _1206 = fma(_1196, cbModelParam._m0[30u].z, fma(_1195, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1194)) - _1163;
        float _1207 = fma(_1196, cbModelParam._m0[31u].z, fma(_1195, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1194)) - _1167;
        float _1208 = fma(_1196, cbModelParam._m0[32u].z, fma(_1195, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1194)) - _1171;
        float _1212 = inversesqrt(dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208)));
        float _1225 = ((_1212 * _1206) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1163 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1212 * _1207) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1167 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1212 * _1208) / cbModelParam._m0[35u].z) + ((((((_1171 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        float _1262 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1229.x + (-0.5));
        float _1264 = _1262 * (_1229.y + (-0.5));
        float _1265 = _1262 * (_1229.z + (-0.5));
        float _1272 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1236.x + (-0.5));
        float _1274 = _1272 * (_1236.y + (-0.5));
        float _1275 = _1272 * (_1236.z + (-0.5));
        float _1282 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1243.x + (-0.5));
        float _1284 = _1282 * (_1243.y + (-0.5));
        float _1285 = _1282 * (_1243.z + (-0.5));
        float _1292 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1250.x + (-0.5));
        float _1294 = _1292 * (_1250.y + (-0.5));
        float _1295 = _1292 * (_1250.z + (-0.5));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = _1263 * 0.5;
        float _1300 = _1273 * 0.5;
        float _1301 = _1283 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_601, _602, _603), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3785 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1326 + 1.0))) + _1331) * _1296;
        float _1341 = _1264 * 0.5;
        float _1342 = _1274 * 0.5;
        float _1343 = _1284 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_601, _602, _603), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _3818 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1368 + 1.0))) + _1373) * _1297;
        float _1383 = _1265 * 0.5;
        float _1384 = _1275 * 0.5;
        float _1385 = _1285 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_601, _602, _603), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _3851 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1410 + 1.0))) + _1415) * _1298;
        _1432 = _1265;
        _1433 = _1264;
        _1434 = _1263;
        _1435 = _1275;
        _1436 = _1274;
        _1437 = _1273;
        _1438 = _1285;
        _1439 = _1284;
        _1440 = _1283;
        _1441 = _1298;
        _1442 = _1297;
        _1443 = _1296;
        _1444 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1445 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1446 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
    }
    else
    {
        _1432 = _1124;
        _1433 = _1124;
        _1434 = _1124;
        _1435 = _1124;
        _1436 = _1124;
        _1437 = _1124;
        _1438 = _1124;
        _1439 = _1124;
        _1440 = _1124;
        _1441 = _1124;
        _1442 = _1124;
        _1443 = _1124;
        _1444 = 0.0;
        _1445 = 0.0;
        _1446 = 0.0;
    }
    float _1456 = (cbModelParam._m0[1u].x * (_1444 - _1136)) + _1136;
    float _1457 = (cbModelParam._m0[1u].x * (_1445 - _1137)) + _1137;
    float _1458 = (cbModelParam._m0[1u].x * (_1446 - _1138)) + _1138;
    float _1479 = fma(_1458, cbSceneParam._m0[89u].z, fma(_1457, cbSceneParam._m0[89u].y, _1456 * cbSceneParam._m0[89u].x));
    float _1482 = fma(_1458, cbSceneParam._m0[90u].z, fma(_1457, cbSceneParam._m0[90u].y, _1456 * cbSceneParam._m0[90u].x));
    float _1485 = fma(_1458, cbSceneParam._m0[91u].z, fma(_1457, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1456));
    float _1500 = _761 * 0.5;
    float _1501 = _762 * 0.5;
    float _1502 = _763 * 0.5;
    float _1503 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1434, _1437, _1440, _1443));
    float _1506 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1433, _1436, _1439, _1442));
    float _1509 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1432, _1435, _1438, _1441));
    float _1543;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1516 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1123, _1127, _1130, _1133));
        float _1520 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1125, _1128, _1131, _1134));
        float _1524 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1126, _1129, _1132, _1135));
        float _1531 = dot(vec4(cbModelParam._m0[39u]), vec4(_1500, _1501, _1502, 1.0));
        _1543 = dot(vec3(isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1531) ? 0.0 : (isnan(0.0) ? _1531 : max(0.0, _1531))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1543 = 1.0;
    }
    float _1554;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1545 = dot(vec4(cbModelParam._m0[40u]), vec4(_1500, _1501, _1502, 1.0));
        _1554 = dot(vec3(isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1545) ? 0.0 : (isnan(0.0) ? _1545 : max(0.0, _1545))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1554 = 1.0;
    }
    float _1558 = (_1554 * cbModelParam._m0[1u].x) + (_1543 * (1.0 - cbModelParam._m0[1u].x));
    float _1568 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _604);
    float _1569 = isnan(_1568) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1568 : min(cbModelParam._m0[25u].z, _1568));
    float _1649;
    float _1651;
    float _1653;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1616 = fma(_822, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _814)) + cbModelParam._m0[13u].w;
        float _1620 = fma(_822, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _814)) + cbModelParam._m0[14u].w;
        float _1624 = fma(_822, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _814)) + cbModelParam._m0[15u].w;
        float _1627 = fma(_763, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _761));
        float _1630 = fma(_763, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _761));
        float _1633 = fma(_763, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _761));
        float _1661;
        if (_1627 > 0.0)
        {
            _1661 = abs((1.0 - _1616) / _1627);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1616 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1661 = frontier_phi_14_12_ladder;
        }
        float _1884;
        if (_1630 > 0.0)
        {
            _1884 = abs((1.0 - _1620) / _1630);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1620 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1884 = frontier_phi_23_19_ladder;
        }
        float _2130;
        if (_1633 > 0.0)
        {
            _2130 = abs((1.0 - _1624) / _1633);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1624 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2130 = frontier_phi_35_30_ladder;
        }
        float _2132 = isnan(_1884) ? _1661 : (isnan(_1661) ? _1884 : min(_1661, _1884));
        float _2133 = isnan(_2130) ? _2132 : (isnan(_2132) ? _2130 : min(_2132, _2130));
        float _2137 = (_2133 * _1627) + _1616;
        float _2138 = (_2133 * _1630) + _1620;
        float _2139 = (_2133 * _1633) + _1624;
        float _2140 = _2133 * 9.9999997473787516355514526367188e-05;
        float _2142 = (-1.0) - _2140;
        float _2144 = _2140 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2139 > _2144) || ((_2139 < _2142) || ((_2138 > _2144) || ((_2138 < _2142) || ((_2137 < _2142) || (_2137 > _2144))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2263 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2139, cbModelParam._m0[9u].z, fma(_2138, cbModelParam._m0[9u].y, _2137 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2139, cbModelParam._m0[10u].z, fma(_2138, cbModelParam._m0[10u].y, _2137 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2139, cbModelParam._m0[11u].z, fma(_2138, cbModelParam._m0[11u].y, _2137 * cbModelParam._m0[11u].x))), _1569);
            frontier_phi_13_35_ladder = _2263.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2263.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2263.x * cbModelParam._m0[1u].y;
        }
        _1649 = frontier_phi_13_35_ladder_2;
        _1651 = frontier_phi_13_35_ladder_1;
        _1653 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1637 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_761, _762, _763), _1569);
        _1649 = _1637.x * cbModelParam._m0[1u].y;
        _1651 = _1637.y * cbModelParam._m0[1u].y;
        _1653 = _1637.z * cbModelParam._m0[1u].y;
    }
    float _1657 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _604);
    float _1658 = isnan(_1657) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1657 : min(cbModelParam._m0[25u].w, _1657));
    float _1747;
    float _1749;
    float _1751;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1711 = fma(_822, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _814)) + cbModelParam._m0[21u].w;
        float _1715 = fma(_822, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _814)) + cbModelParam._m0[22u].w;
        float _1719 = fma(_822, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _814)) + cbModelParam._m0[23u].w;
        float _1722 = fma(_763, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _761));
        float _1725 = fma(_763, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _761));
        float _1728 = fma(_763, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _761));
        float _1889;
        if (_1722 > 0.0)
        {
            _1889 = abs((1.0 - _1711) / _1722);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1711 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1889 = frontier_phi_25_21_ladder;
        }
        float _2157;
        if (_1725 > 0.0)
        {
            _2157 = abs((1.0 - _1715) / _1725);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1715 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2157 = frontier_phi_37_32_ladder;
        }
        float _2362;
        if (_1728 > 0.0)
        {
            _2362 = abs((1.0 - _1719) / _1728);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1719 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2362 = frontier_phi_46_43_ladder;
        }
        float _2364 = isnan(_2157) ? _1889 : (isnan(_1889) ? _2157 : min(_1889, _2157));
        float _2365 = isnan(_2362) ? _2364 : (isnan(_2364) ? _2362 : min(_2364, _2362));
        float _2369 = (_2365 * _1722) + _1711;
        float _2370 = (_2365 * _1725) + _1715;
        float _2371 = (_2365 * _1728) + _1719;
        float _2372 = _2365 * 9.9999997473787516355514526367188e-05;
        float _2373 = (-1.0) - _2372;
        float _2375 = _2372 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2371 > _2375) || ((_2371 < _2373) || ((_2370 > _2375) || ((_2370 < _2373) || ((_2369 < _2373) || (_2369 > _2375))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2570 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2371, cbModelParam._m0[17u].z, fma(_2370, cbModelParam._m0[17u].y, _2369 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2371, cbModelParam._m0[18u].z, fma(_2370, cbModelParam._m0[18u].y, _2369 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2371, cbModelParam._m0[19u].z, fma(_2370, cbModelParam._m0[19u].y, _2369 * cbModelParam._m0[19u].x))), _1658);
            frontier_phi_22_46_ladder = _2570.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2570.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2570.x * cbModelParam._m0[1u].z;
        }
        _1747 = frontier_phi_22_46_ladder_2;
        _1749 = frontier_phi_22_46_ladder_1;
        _1751 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1731 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_761, _762, _763), _1658);
        _1747 = _1731.x * cbModelParam._m0[1u].z;
        _1749 = _1731.y * cbModelParam._m0[1u].z;
        _1751 = _1731.z * cbModelParam._m0[1u].z;
    }
    float _1763 = ((((1.0 - _782) * ((_769 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_782 * _769)) * _753;
    float _1764 = _1763 * ((cbModelParam._m0[1u].w * (_1747 - _1649)) + _1649);
    float _1765 = _1763 * ((cbModelParam._m0[1u].w * (_1749 - _1651)) + _1651);
    float _1766 = _1763 * ((cbModelParam._m0[1u].w * (_1751 - _1653)) + _1653);
    float _1769 = fma(_1766, cbSceneParam._m0[89u].z, fma(_1765, cbSceneParam._m0[89u].y, _1764 * cbSceneParam._m0[89u].x));
    float _1772 = fma(_1766, cbSceneParam._m0[90u].z, fma(_1765, cbSceneParam._m0[90u].y, _1764 * cbSceneParam._m0[90u].x));
    float _1775 = fma(_1766, cbSceneParam._m0[91u].z, fma(_1765, cbSceneParam._m0[91u].y, _1764 * cbSceneParam._m0[91u].x));
    vec4 _1783 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_687, _688));
    float _1785 = _1783.w;
    float _1797 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1785);
    float _1798 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1785);
    float _1799 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1785);
    uvec4 _1803 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1805 = _1803.x * 14u;
    uint _1806 = _1805 + 13u;
    float _1813 = _753 + (-1.0);
    float _1818 = (cbLight._m0[_1806].x * _1813) + 1.0;
    float _1819 = (cbLight._m0[_1806].y * _1813) + 1.0;
    float _1820 = (cbLight._m0[_1806].z * _1813) + 1.0;
    float _1821 = (cbLight._m0[_1806].w * _1813) + 1.0;
    uint _1822 = _1805 + 5u;
    float _1828 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
    uint _1832 = _1805 + 4u;
    float _1842 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
    uint _1846 = _1805 | 1u;
    float _1857 = dot(vec3(cbLight._m0[_1805].xyz), vec3(_601, _602, _603));
    float _1860 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_601, _602, _603));
    float _3987 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _3998 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1865 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.3183098733425140380859375;
    float _1867 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * 0.3183098733425140380859375;
    float _1874 = ((cbLight._m0[_1822].x * _1828) * _1867) + (((cbLight._m0[_1832].x * _1797) * _1842) * _1865);
    float _1875 = ((_1828 * cbLight._m0[_1822].y) * _1867) + (((cbLight._m0[_1832].y * _1798) * _1842) * _1865);
    float _1876 = ((_1828 * cbLight._m0[_1822].z) * _1867) + (((cbLight._m0[_1832].z * _1799) * _1842) * _1865);
    uvec4 _1881 = floatBitsToUint(cbLight._m0[_1805 + 12u]);
    bool _1883 = _1881.x == 0u;
    float _1894;
    float _1896;
    float _1898;
    if (_1883)
    {
        _1894 = _1874;
        _1896 = _1875;
        _1898 = _1876;
    }
    else
    {
        uint _1902 = _1805 + 6u;
        float _1918 = (dot(vec3(cbLight._m0[_1805 + 2u].xyz), vec3(_601, _602, _603)) * 0.5) + 0.5;
        float _1919 = _1918 * _1918;
        float _4009 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1920 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1921 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
        _1894 = (((cbLight._m0[_1902].x * 0.3183098733425140380859375) * _1920) * _1921) + _1874;
        _1896 = (((cbLight._m0[_1902].y * 0.3183098733425140380859375) * _1920) * _1921) + _1875;
        _1898 = (((cbLight._m0[_1902].z * 0.3183098733425140380859375) * _1920) * _1921) + _1876;
    }
    bool _1901 = _1881.y == 0u;
    float _1939;
    float _1941;
    float _1943;
    if (_1901)
    {
        _1939 = _1894;
        _1941 = _1896;
        _1943 = _1898;
    }
    else
    {
        uint _2101 = _1805 + 7u;
        float _2117 = (dot(vec3(cbLight._m0[_1805 + 3u].xyz), vec3(_601, _602, _603)) * 0.5) + 0.5;
        float _2118 = _2117 * _2117;
        float _4025 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2119 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _2120 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _1939 = (((cbLight._m0[_2101].x * 0.3183098733425140380859375) * _2119) * _2120) + _1894;
        _1941 = (((cbLight._m0[_2101].y * 0.3183098733425140380859375) * _2119) * _2120) + _1896;
        _1943 = (((cbLight._m0[_2101].z * 0.3183098733425140380859375) * _2119) * _2120) + _1898;
    }
    uint _1946 = _1805 + 8u;
    float _1959 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1805].w)) * _604) * 0.949999988079071044921875);
    float _1960 = _1959 * _1959;
    float _1961 = cbLight._m0[_1805].x + _679;
    float _1962 = cbLight._m0[_1805].y + _680;
    float _1963 = cbLight._m0[_1805].z + _681;
    float _1967 = inversesqrt(dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963)));
    float _1968 = _1967 * _1961;
    float _1969 = _1967 * _1962;
    float _1970 = _1967 * _1963;
    float _1971 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_1805].xyz));
    float _4041 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1974 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _1975 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _1976 = dot(vec3(_601, _602, _603), vec3(_1968, _1969, _1970));
    float _4063 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _1980 = dot(vec3(cbLight._m0[_1805].xyz), vec3(_1968, _1969, _1970));
    float _4074 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1984 = _1960 * _1960;
    float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
    float _1999 = (exp2(log2(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2000 = 1.0 - _1960;
    float _2011 = (0.5 / (((_1975 * ((_1974 * _2000) + _1960)) + 9.9999999392252902907785028219223e-09) + (((_1975 * _2000) + _1960) * _1974))) * _1974;
    float _4085 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2013 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
    uint _2027 = _1805 + 9u;
    float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1846].w)) * _604) * 0.949999988079071044921875);
    float _2039 = _2038 * _2038;
    float _2040 = cbLight._m0[_1846].x + _679;
    float _2041 = cbLight._m0[_1846].y + _680;
    float _2042 = cbLight._m0[_1846].z + _681;
    float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
    float _2047 = _2046 * _2040;
    float _2048 = _2046 * _2041;
    float _2049 = _2046 * _2042;
    float _2050 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_1846].xyz));
    float _4096 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _2054 = dot(vec3(_601, _602, _603), vec3(_2047, _2048, _2049));
    float _4107 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _2058 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_2047, _2048, _2049));
    float _4118 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2062 = _2039 * _2039;
    float _2066 = ((_2057 * _2057) * (_2062 + (-1.0))) + 1.0;
    float _2075 = (exp2(log2(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2076 = 1.0 - _2039;
    float _2086 = (0.5 / (((_1975 * ((_2053 * _2076) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_1975 * _2076) + _2039) * _2053))) * _2053;
    float _4129 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2088 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_2062 / ((_2066 * _2066) * 3.141590118408203125));
    float _2098 = (((_2075 * cbLight._m0[_2027].x) * _2088) * _1828) + ((((cbLight._m0[_1946].x * _1797) * _1999) * _2013) * _1842);
    float _2099 = (((_2075 * cbLight._m0[_2027].y) * _2088) * _1828) + ((((cbLight._m0[_1946].y * _1798) * _1999) * _2013) * _1842);
    float _2100 = (((_2075 * cbLight._m0[_2027].z) * _2088) * _1828) + ((((cbLight._m0[_1946].z * _1799) * _1999) * _2013) * _1842);
    float _2162;
    float _2164;
    float _2166;
    if (_1883)
    {
        _2162 = _2098;
        _2164 = _2099;
        _2166 = _2100;
    }
    else
    {
        uint _2168 = _1805 + 2u;
        uint _2172 = _1805 + 10u;
        float _2186 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _604) * 0.949999988079071044921875);
        float _2187 = _2186 * _2186;
        float _2188 = cbLight._m0[_2168].x + _679;
        float _2189 = cbLight._m0[_2168].y + _680;
        float _2190 = cbLight._m0[_2168].z + _681;
        float _2194 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
        float _2195 = _2194 * _2188;
        float _2196 = _2194 * _2189;
        float _2197 = _2194 * _2190;
        float _2198 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2168].xyz));
        float _4140 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2201 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2202 = dot(vec3(_601, _602, _603), vec3(_2195, _2196, _2197));
        float _4151 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2205 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _2206 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2195, _2196, _2197));
        float _4162 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2210 = _2187 * _2187;
        float _2214 = ((_2205 * _2205) * (_2210 + (-1.0))) + 1.0;
        float _2223 = (exp2(log2(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2224 = 1.0 - _2187;
        float _2234 = (0.5 / (((_1975 * ((_2201 * _2224) + _2187)) + 9.9999999392252902907785028219223e-09) + (((_1975 * _2224) + _2187) * _2201))) * _2201;
        float _4173 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2236 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2210 / ((_2214 * _2214) * 3.141590118408203125));
        float _2237 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
        _2162 = (((_2223 * cbLight._m0[_2172].x) * _2236) * _2237) + _2098;
        _2164 = (((_2223 * cbLight._m0[_2172].y) * _2236) * _2237) + _2099;
        _2166 = (((_2223 * cbLight._m0[_2172].z) * _2236) * _2237) + _2100;
    }
    float _2272;
    float _2274;
    float _2276;
    if (_1901)
    {
        _2272 = _2162;
        _2274 = _2164;
        _2276 = _2166;
    }
    else
    {
        uint _2283 = _1805 + 3u;
        uint _2287 = _1805 + 11u;
        float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2283].w)) * _604) * 0.949999988079071044921875);
        float _2302 = _2301 * _2301;
        float _2303 = cbLight._m0[_2283].x + _679;
        float _2304 = cbLight._m0[_2283].y + _680;
        float _2305 = cbLight._m0[_2283].z + _681;
        float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
        float _2310 = _2309 * _2303;
        float _2311 = _2309 * _2304;
        float _2312 = _2309 * _2305;
        float _2313 = dot(vec3(_601, _602, _603), vec3(cbLight._m0[_2283].xyz));
        float _4189 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _2317 = dot(vec3(_601, _602, _603), vec3(_2310, _2311, _2312));
        float _4200 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2320 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _2321 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_2310, _2311, _2312));
        float _4211 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2325 = _2302 * _2302;
        float _2329 = ((_2320 * _2320) * (_2325 + (-1.0))) + 1.0;
        float _2338 = (exp2(log2(1.0 - (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2339 = 1.0 - _2302;
        float _2349 = (0.5 / (((_1975 * ((_2316 * _2339) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_1975 * _2339) + _2302) * _2316))) * _2316;
        float _4222 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2351 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2325 / ((_2329 * _2329) * 3.141590118408203125));
        float _2352 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _2272 = (((_2338 * cbLight._m0[_2287].x) * _2351) * _2352) + _2162;
        _2274 = (((_2338 * cbLight._m0[_2287].y) * _2351) * _2352) + _2164;
        _2276 = (((_2338 * cbLight._m0[_2287].z) * _2351) * _2352) + _2166;
    }
    float _2487;
    float _2489;
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    if (_1803.y == 0u)
    {
        float _2427 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2428 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2427;
        float _2429 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2427;
        float _2430 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2427;
        uvec4 _2442 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2443 = _2442.x;
        uint _2454 = uint((float(_2442.y) * floor(float(uint(cbSceneParam._m0[85u].y * _688) / _2443))) + floor(float(uint(cbSceneParam._m0[85u].x * _687) / _2443)));
        float _2464 = (log2(_2430 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2465 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        uint _2468 = uint(isnan(14.0) ? _2465 : (isnan(_2465) ? 14.0 : min(_2465, 14.0)));
        uvec4 _2473 = texelFetch(g_lightClusterGridBuffer, int(((_2468 << 2u) + (_2454 << 6u)) >> 2u));
        uint _2474 = _2473.x;
        uint _2475 = _2442.z;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        if (((((1u << ((_2475 >> 4u) & 15u)) + 4294967295u) & _2474) == 0u) || ((_2475 & 240u) == 0u))
        {
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
        }
        else
        {
            float _2576;
            float _2578;
            float _2580;
            float _2582;
            float _2584;
            float _2586;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            uint _2726 = 0u;
            uint _2735;
            bool _2736;
            for (;;)
            {
                _2735 = texelFetch(g_lightClassification, int((((_2468 << 5u) + (_2454 << 9u)) + (_2726 << 2u)) >> 2u)).x;
                _2736 = _2735 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2736)
                {
                    frontier_phi_61_pred = _2720;
                    frontier_phi_61_pred_1 = _2725;
                    frontier_phi_61_pred_2 = _2724;
                    frontier_phi_61_pred_3 = _2723;
                    frontier_phi_61_pred_4 = _2722;
                    frontier_phi_61_pred_5 = _2721;
                }
                else
                {
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    uint _2850;
                    _2844 = _2720;
                    _2845 = _2721;
                    _2846 = _2722;
                    _2847 = _2723;
                    _2848 = _2724;
                    _2849 = _2725;
                    _2850 = _2735;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    for (;;)
                    {
                        uint _2854 = uint(findLSB(_2850)) + (_2726 << 5u);
                        uint _2851 = (_2850 + 4294967295u) & _2850;
                        uint _2856 = _2854 * 48u;
                        vec4 _2870 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2856)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 3u)).x));
                        uint _2876 = (_2854 * 48u) + 4u;
                        vec4 _2889 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2876)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 3u)).x));
                        uint _2895 = (_2854 * 48u) + 8u;
                        vec3 _2906 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2895)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 2u)).x));
                        float _2910 = _2870.x - _2428;
                        float _2911 = _2870.y - _2429;
                        float _2912 = _2870.z - _2430;
                        float _2913 = dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912));
                        float _2916 = inversesqrt(_2913);
                        float _2917 = _2916 * _2910;
                        float _2918 = _2916 * _2911;
                        float _2919 = _2916 * _2912;
                        float _2920 = dot(vec3(_709, _712, _715), vec3(_2917, _2918, _2919));
                        float _2925 = 1.0 - (_2913 * _2870.w);
                        float _4248 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2926 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2927 = sqrt(_2913) * _2889.w;
                        float _2930 = 1.39999997615814208984375 / (_2927 + 1.39999997615814208984375);
                        float _2931 = _2930 * _2930;
                        float _2934 = ((1.0 - _2931) * _2920) + _2931;
                        float _2937 = _2927 * _2927;
                        float _2941 = ((isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0))) * _2926) / ((_2937 * 0.699999988079071044921875) + 1.0);
                        float _2945 = (-0.0) - _2428;
                        float _2946 = (-0.0) - _2429;
                        float _2947 = (-0.0) - _2430;
                        float _2951 = inversesqrt(dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947)));
                        float _2952 = _2951 * _2945;
                        float _2953 = _2951 * _2946;
                        float _2954 = _2951 * _2947;
                        float _2962 = exp2(log2(1.0 / ((_2937 * 3.5) + 5.0)) * 0.25);
                        float _2963 = 1.0 - _769;
                        float _2970 = sqrt(1.0 - ((1.0 - (_2963 * _2963)) * (1.0 - (_2962 * _2962))));
                        float _2971 = _2970 * _2970;
                        float _2972 = _2971 * _2971;
                        float _2973 = _2952 + _2917;
                        float _2974 = _2953 + _2918;
                        float _2975 = _2954 + _2919;
                        float _2979 = inversesqrt(dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975)));
                        float _2983 = dot(vec3(_709, _712, _715), vec3(_2952, _2953, _2954));
                        float _4264 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2986 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                        float _2987 = dot(vec3(_709, _712, _715), vec3(_2979 * _2973, _2979 * _2974, _2979 * _2975));
                        float _4275 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2990 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                        float _2994 = ((_2990 * _2990) * (_2972 + (-1.0))) + 1.0;
                        float _2995 = _2930 * _2971;
                        float _2996 = _2995 * _2995;
                        float _2999 = ((1.0 - _2996) * _2920) + _2996;
                        float _4286 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3000 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                        float _3001 = 1.0 - _2971;
                        float _3011 = (0.5 / (((_3000 * ((_2986 * _3001) + _2971)) + 9.9999999392252902907785028219223e-09) + (((_3000 * _3001) + _2971) * _2986))) * _3000;
                        float _4297 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3022 = (((_2972 * 3.1415927410125732421875) * (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) / ((_2994 * _2994) * ((_2937 * 2.1991131305694580078125) + 3.141590118408203125))) * _2926;
                        _2779 = (_2941 * _2889.x) + _2847;
                        _2780 = (_2941 * _2889.y) + _2848;
                        _2781 = (_2941 * _2889.z) + _2849;
                        _2776 = (_3022 * _2906.x) + _2844;
                        _2777 = (_3022 * _2906.y) + _2845;
                        _2778 = (_3022 * _2906.z) + _2846;
                        if (_2851 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2844 = _2776;
                            _2845 = _2777;
                            _2846 = _2778;
                            _2847 = _2779;
                            _2848 = _2780;
                            _2849 = _2781;
                            _2850 = _2851;
                        }
                    }
                    frontier_phi_61_pred = _2776;
                    frontier_phi_61_pred_1 = _2781;
                    frontier_phi_61_pred_2 = _2780;
                    frontier_phi_61_pred_3 = _2779;
                    frontier_phi_61_pred_4 = _2778;
                    frontier_phi_61_pred_5 = _2777;
                }
                _2576 = frontier_phi_61_pred;
                _2586 = frontier_phi_61_pred_1;
                _2584 = frontier_phi_61_pred_2;
                _2582 = frontier_phi_61_pred_3;
                _2580 = frontier_phi_61_pred_4;
                _2578 = frontier_phi_61_pred_5;
                uint _2727 = _2726 + 1u;
                if (_2727 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2720 = _2576;
                    _2721 = _2578;
                    _2722 = _2580;
                    _2723 = _2582;
                    _2724 = _2584;
                    _2725 = _2586;
                    _2726 = _2727;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
        }
        uvec4 _2589 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2590 = _2589.z;
        uint _2592 = (_2590 >> 8u) & 15u;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        if (((4294967295u << _2592) & _2474) == 0u)
        {
            _2688 = _2575;
            _2690 = _2577;
            _2692 = _2579;
            _2694 = _2581;
            _2696 = _2583;
            _2698 = _2585;
        }
        else
        {
            float _2713 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
            float _2714 = _2713 * _2428;
            float _2715 = _2713 * _2429;
            float _2716 = _2713 * _2430;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2592 < ((_2590 >> 12u) & 15u))
            {
                float _2689;
                float _2691;
                float _2693;
                float _2695;
                float _2697;
                float _2699;
                float _2827 = _2575;
                float _2828 = _2577;
                float _2829 = _2579;
                float _2830 = _2581;
                float _2831 = _2583;
                float _2832 = _2585;
                uint _2833 = _2592;
                uint _2842;
                bool _2843;
                for (;;)
                {
                    _2842 = texelFetch(g_lightClassification, int((((_2468 << 5u) + (_2454 << 9u)) + (_2833 << 2u)) >> 2u)).x;
                    _2843 = _2842 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2843)
                    {
                        frontier_phi_67_pred = _2830;
                        frontier_phi_67_pred_1 = _2831;
                        frontier_phi_67_pred_2 = _2832;
                        frontier_phi_67_pred_3 = _2829;
                        frontier_phi_67_pred_4 = _2828;
                        frontier_phi_67_pred_5 = _2827;
                    }
                    else
                    {
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3040 = _2827;
                        float _3041 = _2828;
                        float _3042 = _2829;
                        float _3043 = _2830;
                        float _3044 = _2831;
                        float _3045 = _2832;
                        uint _3046 = _2842;
                        uint _3047;
                        vec4 _3072;
                        float _3073;
                        vec4 _3088;
                        vec3 _3100;
                        vec4 _3116;
                        vec4 _3131;
                        float _3177;
                        bool _3178;
                        for (;;)
                        {
                            uint _3057 = ((_2833 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3046));
                            _3047 = (_3046 + 4294967295u) & _3046;
                            uint _3059 = _3057 * 40u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            _3073 = _3072.w;
                            uint _3075 = (_3057 * 40u) + 4u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3090 = (_3057 * 40u) + 8u;
                            _3100 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x));
                            uint _3103 = (_3057 * 40u) + 16u;
                            _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            uint _3118 = (_3057 * 40u) + 20u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3133 = (_3057 * 40u) + 24u;
                            vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3152 = (_3057 * 40u) + 28u;
                            vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            _3177 = fma(_2430, _3165.z, fma(_2429, _3165.y, _3165.x * _2428)) + _3165.w;
                            _3178 = !((fma(_2430, _3146.z, fma(_2429, _3146.y, _3146.x * _2428)) + _3146.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3178)
                            {
                                float _3205 = _3072.x - _2428;
                                float _3206 = _3072.y - _2429;
                                float _3207 = _3072.z - _2430;
                                float _3208 = dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207));
                                float _3211 = inversesqrt(_3208);
                                float _3212 = _3211 * _3205;
                                float _3213 = _3211 * _3206;
                                float _3214 = _3211 * _3207;
                                float _3218 = 1.0 - (_3208 / (_3073 * _3073));
                                float _4308 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                                float _3219 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3223 = sqrt(_3208) * _3088.w;
                                float _3225 = 1.39999997615814208984375 / (_3223 + 1.39999997615814208984375);
                                float _3226 = _3225 * _3225;
                                float _3229 = ((1.0 - _3226) * dot(vec3(_3212, _3213, _3214), vec3(_709, _712, _715))) + _3226;
                                float _3232 = _3223 * _3223;
                                float _3236 = (fma(_2430, _3116.z, fma(_2429, _3116.y, _3116.x * _2428)) + _3116.w) / _3177;
                                float _3237 = (fma(_2430, _3131.z, fma(_2429, _3131.y, _3131.x * _2428)) + _3131.w) / _3177;
                                float _3241 = 1.0 - dot(vec2(_3236, _3237), vec2(_3236, _3237));
                                float _4324 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3242 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3243 = _3242 * (((isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))) * _3219) / ((_3232 * 0.699999988079071044921875) + 1.0));
                                float _3255 = exp2(log2(1.0 / ((_3232 * 3.5) + 5.0)) * 0.25);
                                float _3256 = 1.0 - _769;
                                float _3263 = sqrt(1.0 - ((1.0 - (_3256 * _3256)) * (1.0 - (_3255 * _3255))));
                                float _3264 = _3263 * _3263;
                                float _3265 = _3264 * _3264;
                                float _3266 = _3212 - _2714;
                                float _3267 = _3213 - _2715;
                                float _3268 = _3214 - _2716;
                                float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                                float _3276 = dot(vec3(_709, _712, _715), vec3((-0.0) - _2714, (-0.0) - _2715, (-0.0) - _2716));
                                float _4335 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3279 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                                float _3280 = dot(vec3(_709, _712, _715), vec3(_3272 * _3266, _3272 * _3267, _3272 * _3268));
                                float _4346 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3283 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                                float _3287 = ((_3283 * _3283) * (_3265 + (-1.0))) + 1.0;
                                float _3288 = _3225 * _3264;
                                float _3289 = _3288 * _3288;
                                float _3295 = ((1.0 - _3289) * dot(vec3(_709, _712, _715), vec3(_3212, _3213, _3214))) + _3289;
                                float _4357 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3296 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                                float _3297 = 1.0 - _3264;
                                float _3307 = (0.5 / (((_3296 * ((_3279 * _3297) + _3264)) + 9.9999999392252902907785028219223e-09) + (((_3296 * _3297) + _3264) * _3279))) * _3296;
                                float _4368 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3317 = (_3242 * _3219) * (((_3265 * 3.1415927410125732421875) * (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) / ((_3287 * _3287) * ((_3232 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3317 * _3100.x;
                                frontier_phi_73_pred_1 = _3317 * _3100.y;
                                frontier_phi_73_pred_2 = _3243 * _3088.z;
                                frontier_phi_73_pred_3 = _3243 * _3088.y;
                                frontier_phi_73_pred_4 = _3243 * _3088.x;
                                frontier_phi_73_pred_5 = _3317 * _3100.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3321 = frontier_phi_73_pred;
                            _3322 = frontier_phi_73_pred_1;
                            _3326 = frontier_phi_73_pred_2;
                            _3325 = frontier_phi_73_pred_3;
                            _3324 = frontier_phi_73_pred_4;
                            _3323 = frontier_phi_73_pred_5;
                            _3030 = _3324 + _3043;
                            _3031 = _3325 + _3044;
                            _3032 = _3326 + _3045;
                            _3027 = _3321 + _3040;
                            _3028 = _3322 + _3041;
                            _3029 = _3323 + _3042;
                            if (_3047 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3047;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3030;
                        frontier_phi_67_pred_1 = _3031;
                        frontier_phi_67_pred_2 = _3032;
                        frontier_phi_67_pred_3 = _3029;
                        frontier_phi_67_pred_4 = _3028;
                        frontier_phi_67_pred_5 = _3027;
                    }
                    _2695 = frontier_phi_67_pred;
                    _2697 = frontier_phi_67_pred_1;
                    _2699 = frontier_phi_67_pred_2;
                    _2693 = frontier_phi_67_pred_3;
                    _2691 = frontier_phi_67_pred_4;
                    _2689 = frontier_phi_67_pred_5;
                    uint _2834 = _2833 + 1u;
                    if (_2834 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2827 = _2689;
                        _2828 = _2691;
                        _2829 = _2693;
                        _2830 = _2695;
                        _2831 = _2697;
                        _2832 = _2699;
                        _2833 = _2834;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2697;
                frontier_phi_55_56_ladder_1 = _2699;
                frontier_phi_55_56_ladder_2 = _2695;
                frontier_phi_55_56_ladder_3 = _2693;
                frontier_phi_55_56_ladder_4 = _2691;
                frontier_phi_55_56_ladder_5 = _2689;
            }
            else
            {
                frontier_phi_55_56_ladder = _2583;
                frontier_phi_55_56_ladder_1 = _2585;
                frontier_phi_55_56_ladder_2 = _2581;
                frontier_phi_55_56_ladder_3 = _2579;
                frontier_phi_55_56_ladder_4 = _2577;
                frontier_phi_55_56_ladder_5 = _2575;
            }
            _2688 = frontier_phi_55_56_ladder_5;
            _2690 = frontier_phi_55_56_ladder_4;
            _2692 = frontier_phi_55_56_ladder_3;
            _2694 = frontier_phi_55_56_ladder_2;
            _2696 = frontier_phi_55_56_ladder;
            _2698 = frontier_phi_55_56_ladder_1;
        }
        float _2703 = isnan(1.0) ? _753 : (isnan(_753) ? 1.0 : min(_753, 1.0));
        _2487 = (_2703 * _2694) + _1939;
        _2489 = (_2703 * _2696) + _1941;
        _2491 = (_2703 * _2698) + _1943;
        _2493 = ((_2688 * 0.039999999105930328369140625) * _2703) + _2272;
        _2495 = ((_2690 * 0.039999999105930328369140625) * _2703) + _2274;
        _2497 = ((_2692 * 0.039999999105930328369140625) * _2703) + _2276;
    }
    else
    {
        _2487 = _1939;
        _2489 = _1941;
        _2491 = _1943;
        _2493 = _2272;
        _2495 = _2274;
        _2497 = _2276;
    }
    float _4384 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _4395 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4406 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    uint _2517 = _243 + 6u;
    float _2525 = _687 / cbSceneParam._m0[86u].x;
    float _2526 = _688 / cbSceneParam._m0[86u].y;
    vec4 _2540 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2525, _2526, (log2((isnan(cbSceneParam._m0[77u].w) ? _622 : (isnan(_622) ? cbSceneParam._m0[77u].w : min(_622, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2542 = _2540.x;
    float _2543 = _2540.y;
    float _2544 = _2540.z;
    float _2545 = _2540.w;
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    if (_622 > cbSceneParam._m0[78u].w)
    {
        float _2600 = isnan(_622) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _622 : min(cbSceneParam._m0[80u].w, _622));
        float _2601 = _2600 / _622;
        float _2612 = _2601 * _672;
        float _2613 = _673 * _2601;
        float _2614 = (-0.0) - _2613;
        float _2616 = _2601 * _674;
        float _2618 = (cbSceneParam._m0[77u].w * _2614) / _2600;
        float _2619 = _2618 + cbSceneParam._m0[79u].w;
        float _2620 = cbSceneParam._m0[79u].w - _2613;
        float _2626 = sqrt(((_2612 * _2612) + (_2613 * _2613)) + (_2616 * _2616));
        float _2629 = (1.0 - (cbSceneParam._m0[77u].w / _2600)) * _2626;
        float _2634 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2636 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2789;
        if (abs((_2614 - _2618) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2789 = ((((_2619 > 0.0) ? exp2(_2634 * _2619) : (2.0 - exp2(_2636 * _2619))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2629;
        }
        else
        {
            float _2749 = 1.0 / cbSceneParam._m0[80u].x;
            float _2750 = isnan(_2620) ? _2619 : (isnan(_2619) ? _2620 : max(_2619, _2620));
            float _2751 = isnan(_2620) ? _2619 : (isnan(_2619) ? _2620 : min(_2619, _2620));
            float _2760 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : min(_2750, 0.0));
            float _2761 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : min(_2751, 0.0));
            _2789 = ((abs(_2626 / _2614) * cbSceneParam._m0[80u].y) * ((((_2760 - _2761) * 2.0) - ((exp2(_2634 * (isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0)))) - exp2(_2634 * (isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0))))) * _2749)) - ((exp2(_2636 * _2760) - exp2(_2636 * _2761)) * _2749))) + (_2629 * cbSceneParam._m0[80u].z);
        }
        vec4 _2791 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2525, _2526, 1.0), 0.0);
        float _2800 = exp2((_2789 * (-1.44269502162933349609375)) * (1.0 - _2791.w));
        float _2801 = log2(_2800);
        float _2817 = log2(_2545);
        _2638 = (exp2(_2817 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2801 * cbSceneParam._m0[78u].x)) * _2791.x) / cbSceneParam._m0[78u].x)) + _2542;
        _2640 = (exp2(_2817 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2801 * cbSceneParam._m0[78u].y)) * _2791.y) / cbSceneParam._m0[78u].y)) + _2543;
        _2642 = (exp2(_2817 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2801 * cbSceneParam._m0[78u].z)) * _2791.z) / cbSceneParam._m0[78u].z)) + _2544;
        _2644 = _2800 * _2545;
    }
    else
    {
        _2638 = _2542;
        _2640 = _2543;
        _2642 = _2544;
        _2644 = _2545;
    }
    float _2656 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2657 = _2656 == 3.0;
    float _2658 = log2(_2644);
    float _2665 = exp2(_2658 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2487 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _753))) + ((_2493 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1558)) * cbPerFrame._m0[3u].x));
    float _2666 = exp2(_2658 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2489 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _753))) + ((_2495 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1558)) * cbPerFrame._m0[3u].x));
    float _2667 = exp2(_2658 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2491 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _753))) + ((_2497 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1558)) * cbPerFrame._m0[3u].x));
    float _2676 = (_2656 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2676 * (_2657 ? _2665 : (_2665 + (cbSceneParam._m0[72u].w * _2638)));
    SV_Target.y = _2676 * (_2657 ? _2666 : (_2666 + (cbSceneParam._m0[72u].w * _2640)));
    SV_Target.z = _2676 * (_2657 ? _2667 : (_2667 + (cbSceneParam._m0[72u].w * _2642)));
    SV_Target.w = cbInstanceData._m0[_2517].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2517].w;
}


