#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1325;
float _3967;
float _3968;
float _3969;
float _3970;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _372 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _372) * cbMtdParam._m0[24u].x) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3979 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _397 = (_390 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _398 = (_390 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _399 = (_390 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _417 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _444 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _461 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _463 = _461.x;
    float _464 = _461.y;
    float _465 = _461.z;
    float _474 = ((_444.z - _465) * _390) + _465;
    float _477 = ((((_444.x - _463) * _390) + _463) * 2.0) + (-1.0);
    float _478 = ((((_444.y - _464) * _390) + _464) * 2.0) + (-1.0);
    float _479 = dot(vec2(_477, _478), vec2(_477, _478));
    float _3990 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _484 = sqrt(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))));
    vec4 _504 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _516 = (_477 + ((((_417.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_504.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _517 = (_478 + ((((_417.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_504.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _520 = fma(_484, _243, fma(_517, _250, _516 * _236));
    float _523 = fma(_484, _244, fma(_517, _251, _516 * _237));
    float _526 = fma(_484, _245, fma(_517, _252, _516 * _238));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    vec4 _559 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _561 = _559.x;
    float _562 = 1.0 - _561;
    float _568 = (cbMtdParam._m0[19u].x + dot(vec4(_530 * _520, _530 * _523, _530 * _526, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_561 - _562) * cbMtdParam._m0[24u].z) + _562) * cbMtdParam._m0[21u].z);
    float _4001 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _571 = (-0.0) - cbMtdParam._m0[24u].y;
    float _573 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _574 = isnan(1.0) ? _573 : (isnan(_573) ? 1.0 : min(_573, 1.0));
    float _581 = _569 - ((_569 * TEXCOORD_8.x) * _574);
    float _582 = _569 - ((_569 * TEXCOORD_8.y) * _574);
    float _583 = _569 - ((_569 * TEXCOORD_8.z) * _574);
    float _590 = (_581 * (cbMtdParam._m0[17u].x - _397)) + _397;
    float _591 = (_582 * (cbMtdParam._m0[17u].y - _398)) + _398;
    float _592 = (_583 * (cbMtdParam._m0[17u].z - _399)) + _399;
    vec4 _604 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _606 = _604.x;
    float _607 = 1.0 - _606;
    float _635 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_606 - _607) * cbMtdParam._m0[24u].w) + _607) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4022 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _644 = ((((cbMtdParam._m0[10u].x - _590) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _636) + _590;
    float _645 = ((((cbMtdParam._m0[10u].y - _591) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _636) + _591;
    float _646 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _592)) * _636) + _592;
    float _651 = (((_417.z - _474) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _474;
    float _655 = ((_504.z - _651) * cbMtdParam._m0[19u].w) + _651;
    vec4 _669 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _676 = (_669.x * 2.0) + (-1.0);
    float _677 = (_669.y * 2.0) + (-1.0);
    float _678 = dot(vec2(_676, _677), vec2(_676, _677));
    float _4033 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _686 = ((_669.z - _655) * _581) + _655;
    float _689 = ((cbMtdParam._m0[23u].y - _686) * _636) + _686;
    vec4 _708 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _714 = (_708.x * 2.0) + (-1.0);
    float _715 = (_708.y * 2.0) + (-1.0);
    float _716 = dot(vec2(_714, _715), vec2(_714, _715));
    float _4044 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _731 = ((sqrt(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) - _484) * _583) + _484;
    float _734 = (((_676 - _516) * _581) + _516) + (cbMtdParam._m0[21u].x * _516);
    float _735 = (((_677 - _517) * _582) + _517) + (cbMtdParam._m0[21u].x * _517);
    float _746 = (((_714 - _734) + (_734 * cbMtdParam._m0[22u].z)) * _636) + _734;
    float _747 = (((_715 - _735) + (_735 * cbMtdParam._m0[22u].z)) * _636) + _735;
    float _748 = (_636 * (sqrt(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) - _731)) + _731;
    float _750 = cbMtdParam._m0[22u].x + _504.w;
    float _753 = fma(_748, _243, fma(_747, _250, _746 * _236));
    float _756 = fma(_748, _244, fma(_747, _251, _746 * _237));
    float _759 = fma(_748, _245, fma(_747, _252, _746 * _238));
    float _763 = inversesqrt(dot(vec3(_753, _756, _759), vec3(_753, _756, _759)));
    float _764 = _763 * _753;
    float _765 = _763 * _756;
    float _766 = _763 * _759;
    float _4055 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _767 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _4066 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _4077 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4088 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4099 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _785 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _836 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _826);
    float _837 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _826);
    float _838 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _826);
    float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
    float _843 = _836 * _842;
    float _844 = _837 * _842;
    float _845 = _838 * _842;
    vec4 _850 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _852 = _850.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1006 = sqrt(((_836 * _836) + (_837 * _837)) + (_838 * _838));
        float _1012 = (cbMatDynParam._m0[5u].x * _1006) + cbMatDynParam._m0[5u].y;
        float _4110 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1017 = (cbMatDynParam._m0[5u].z * _1006) + cbMatDynParam._m0[5u].w;
        float _4121 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) - _1013)) + _1013) < ((_852 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _863 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _864 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _882 = fma(_766, cbSceneParam._m0[5u].z, fma(_765, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _764));
    float _885 = fma(_766, cbSceneParam._m0[6u].z, fma(_765, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _764));
    float _888 = fma(_766, cbSceneParam._m0[7u].z, fma(_765, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _764));
    uint _901 = _255 + 9u;
    uint _902 = _901 + uint(cbMatDynParam._m0[0u].w);
    float _908 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * cbInstanceData._m0[_902].x;
    float _909 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * cbInstanceData._m0[_902].y;
    float _910 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * cbInstanceData._m0[_902].z;
    float _4132 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _4143 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _4154 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    vec4 _922 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _863, cbSceneParam._m0[86u].y * _864));
    float _926 = ((isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * TEXCOORD_5.w) * _922.x;
    float _927 = dot(vec3(_764, _765, _766), vec3(_843, _844, _845));
    float _930 = _927 * 2.0;
    float _934 = (_930 * _764) - _843;
    float _935 = (_930 * _765) - _844;
    float _936 = (_930 * _766) - _845;
    float _940 = abs(dot(vec3(_843, _844, _845), vec3(_764, _765, _766)));
    float _4165 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _942 = sqrt(_767);
    float _955 = exp2((_942 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_942 * 3.0));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1324;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1049 = fma(_995, cbModelParam._m0[26u].z, fma(_991, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987));
        float _1053 = fma(_995, cbModelParam._m0[27u].z, fma(_991, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987));
        float _1057 = fma(_995, cbModelParam._m0[28u].z, fma(_991, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987));
        float _1082 = _987 + _764;
        float _1083 = _991 + _765;
        float _1084 = _995 + _766;
        float _1094 = fma(_1084, cbModelParam._m0[26u].z, fma(_1083, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1082)) - _1049;
        float _1095 = fma(_1084, cbModelParam._m0[27u].z, fma(_1083, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1082)) - _1053;
        float _1096 = fma(_1084, cbModelParam._m0[28u].z, fma(_1083, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1082)) - _1057;
        float _1100 = inversesqrt(dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096)));
        float _1113 = ((_1100 * _1094) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1049 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1100 * _1095) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1053 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1100 * _1096) / cbModelParam._m0[34u].z) + ((((((_1057 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        float _1152 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1118.x + (-0.5));
        float _1154 = _1152 * (_1118.y + (-0.5));
        float _1155 = _1152 * (_1118.z + (-0.5));
        float _1162 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1125.x + (-0.5));
        float _1164 = _1162 * (_1125.y + (-0.5));
        float _1165 = _1162 * (_1125.z + (-0.5));
        float _1172 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1132.x + (-0.5));
        float _1174 = _1172 * (_1132.y + (-0.5));
        float _1175 = _1172 * (_1132.z + (-0.5));
        float _1182 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1139.x + (-0.5));
        float _1184 = _1182 * (_1139.y + (-0.5));
        float _1185 = _1182 * (_1139.z + (-0.5));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = _1153 * 0.5;
        float _1190 = _1163 * 0.5;
        float _1191 = _1173 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1206 = (dot(vec3(_764, _765, _766), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1216 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _4213 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1218 + 1.0))) + _1223) * _1186;
        float _1233 = _1154 * 0.5;
        float _1234 = _1164 * 0.5;
        float _1235 = _1174 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_764, _765, _766), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _4224 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _4235 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _4246 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_1260 + 1.0))) + _1265) * _1187;
        float _1275 = _1155 * 0.5;
        float _1276 = _1165 * 0.5;
        float _1277 = _1175 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_764, _765, _766), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4279 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1302 + 1.0))) + _1307) * _1188;
        _1324 = _1155;
        _1326 = _1154;
        _1327 = _1153;
        _1328 = _1165;
        _1329 = _1164;
        _1330 = _1163;
        _1331 = _1175;
        _1332 = _1174;
        _1333 = _1173;
        _1334 = _1188;
        _1335 = _1187;
        _1336 = _1186;
        _1337 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
    }
    else
    {
        _1324 = _1325;
        _1326 = _1325;
        _1327 = _1325;
        _1328 = _1325;
        _1329 = _1325;
        _1330 = _1325;
        _1331 = _1325;
        _1332 = _1325;
        _1333 = _1325;
        _1334 = _1325;
        _1335 = _1325;
        _1336 = _1325;
        _1337 = 0.0;
        _1338 = 0.0;
        _1339 = 0.0;
    }
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1367 = fma(_995, cbModelParam._m0[30u].z, fma(_991, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _987));
        float _1371 = fma(_995, cbModelParam._m0[31u].z, fma(_991, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _987));
        float _1375 = fma(_995, cbModelParam._m0[32u].z, fma(_991, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _987));
        float _1398 = _987 + _764;
        float _1399 = _991 + _765;
        float _1400 = _995 + _766;
        float _1410 = fma(_1400, cbModelParam._m0[30u].z, fma(_1399, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1398)) - _1367;
        float _1411 = fma(_1400, cbModelParam._m0[31u].z, fma(_1399, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1398)) - _1371;
        float _1412 = fma(_1400, cbModelParam._m0[32u].z, fma(_1399, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1398)) - _1375;
        float _1416 = inversesqrt(dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412)));
        float _1429 = ((_1416 * _1410) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1367 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1416 * _1411) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1371 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1416 * _1412) / cbModelParam._m0[35u].z) + ((((((_1375 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        float _1466 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1433.x + (-0.5));
        float _1468 = _1466 * (_1433.y + (-0.5));
        float _1469 = _1466 * (_1433.z + (-0.5));
        float _1476 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1440.x + (-0.5));
        float _1478 = _1476 * (_1440.y + (-0.5));
        float _1479 = _1476 * (_1440.z + (-0.5));
        float _1486 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1447.x + (-0.5));
        float _1488 = _1486 * (_1447.y + (-0.5));
        float _1489 = _1486 * (_1447.z + (-0.5));
        float _1496 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1454.x + (-0.5));
        float _1498 = _1496 * (_1454.y + (-0.5));
        float _1499 = _1496 * (_1454.z + (-0.5));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = _1467 * 0.5;
        float _1504 = _1477 * 0.5;
        float _1505 = _1487 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_764, _765, _766), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4342 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1530 + 1.0))) + _1535) * _1500;
        float _1545 = _1468 * 0.5;
        float _1546 = _1478 * 0.5;
        float _1547 = _1488 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_764, _765, _766), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4353 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4364 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4375 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_1572 + 1.0))) + _1577) * _1501;
        float _1587 = _1469 * 0.5;
        float _1588 = _1479 * 0.5;
        float _1589 = _1489 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_764, _765, _766), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4386 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4397 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4408 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_1614 + 1.0))) + _1619) * _1502;
        _1636 = _1469;
        _1637 = _1468;
        _1638 = _1467;
        _1639 = _1479;
        _1640 = _1478;
        _1641 = _1477;
        _1642 = _1489;
        _1643 = _1488;
        _1644 = _1487;
        _1645 = _1502;
        _1646 = _1501;
        _1647 = _1500;
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
    }
    else
    {
        _1636 = _1325;
        _1637 = _1325;
        _1638 = _1325;
        _1639 = _1325;
        _1640 = _1325;
        _1641 = _1325;
        _1642 = _1325;
        _1643 = _1325;
        _1644 = _1325;
        _1645 = _1325;
        _1646 = _1325;
        _1647 = _1325;
        _1648 = 0.0;
        _1649 = 0.0;
        _1650 = 0.0;
    }
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1337)) + _1337;
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1338)) + _1338;
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1339)) + _1339;
    float _1683 = fma(_1662, cbSceneParam._m0[89u].z, fma(_1661, cbSceneParam._m0[89u].y, _1660 * cbSceneParam._m0[89u].x));
    float _1686 = fma(_1662, cbSceneParam._m0[90u].z, fma(_1661, cbSceneParam._m0[90u].y, _1660 * cbSceneParam._m0[90u].x));
    float _1689 = fma(_1662, cbSceneParam._m0[91u].z, fma(_1661, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1660));
    float _1704 = _934 * 0.5;
    float _1705 = _935 * 0.5;
    float _1706 = _936 * 0.5;
    float _1707 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1710 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1713 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1747;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1720 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1324, _1328, _1331, _1334));
        float _1724 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1326, _1329, _1332, _1335));
        float _1728 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1327, _1330, _1333, _1336));
        float _1735 = dot(vec4(cbModelParam._m0[39u]), vec4(_1704, _1705, _1706, 1.0));
        _1747 = dot(vec3(isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1735) ? 0.0 : (isnan(0.0) ? _1735 : max(0.0, _1735))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1747 = 1.0;
    }
    float _1758;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1749 = dot(vec4(cbModelParam._m0[40u]), vec4(_1704, _1705, _1706, 1.0));
        _1758 = dot(vec3(isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1749) ? 0.0 : (isnan(0.0) ? _1749 : max(0.0, _1749))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1758 = 1.0;
    }
    float _1762 = (_1758 * cbModelParam._m0[1u].x) + (_1747 * (1.0 - cbModelParam._m0[1u].x));
    float _1772 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _767);
    float _1773 = isnan(_1772) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1772 : min(cbModelParam._m0[25u].z, _1772));
    float _1854;
    float _1856;
    float _1858;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1821 = fma(_995, cbModelParam._m0[13u].z, fma(_991, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _987)) + cbModelParam._m0[13u].w;
        float _1825 = fma(_995, cbModelParam._m0[14u].z, fma(_991, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _987)) + cbModelParam._m0[14u].w;
        float _1829 = fma(_995, cbModelParam._m0[15u].z, fma(_991, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _987)) + cbModelParam._m0[15u].w;
        float _1832 = fma(_936, cbModelParam._m0[13u].z, fma(_935, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934));
        float _1835 = fma(_936, cbModelParam._m0[14u].z, fma(_935, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934));
        float _1838 = fma(_936, cbModelParam._m0[15u].z, fma(_935, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934));
        float _1866;
        if (_1832 > 0.0)
        {
            _1866 = abs((1.0 - _1821) / _1832);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1821 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1866 = frontier_phi_17_15_ladder;
        }
        float _2036;
        if (_1835 > 0.0)
        {
            _2036 = abs((1.0 - _1825) / _1835);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1825 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2036 = frontier_phi_26_22_ladder;
        }
        float _2331;
        if (_1838 > 0.0)
        {
            _2331 = abs((1.0 - _1829) / _1838);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1829 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2331 = frontier_phi_38_33_ladder;
        }
        float _2333 = isnan(_2036) ? _1866 : (isnan(_1866) ? _2036 : min(_1866, _2036));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1832) + _1821;
        float _2339 = (_2334 * _1835) + _1825;
        float _2340 = (_2334 * _1838) + _1829;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2341;
        float _2345 = _2341 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 > _2345) || ((_2339 < _2343) || ((_2338 < _2343) || (_2338 > _2345))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2340, cbModelParam._m0[9u].z, fma(_2339, cbModelParam._m0[9u].y, _2338 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2340, cbModelParam._m0[10u].z, fma(_2339, cbModelParam._m0[10u].y, _2338 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2340, cbModelParam._m0[11u].z, fma(_2339, cbModelParam._m0[11u].y, _2338 * cbModelParam._m0[11u].x))), _1773);
            frontier_phi_16_38_ladder = _2485.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2485.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2485.x * cbModelParam._m0[1u].y;
        }
        _1854 = frontier_phi_16_38_ladder_2;
        _1856 = frontier_phi_16_38_ladder_1;
        _1858 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1842 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_934, _935, _936), _1773);
        _1854 = _1842.x * cbModelParam._m0[1u].y;
        _1856 = _1842.y * cbModelParam._m0[1u].y;
        _1858 = _1842.z * cbModelParam._m0[1u].y;
    }
    float _1862 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _767);
    float _1863 = isnan(_1862) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1862 : min(cbModelParam._m0[25u].w, _1862));
    float _1953;
    float _1955;
    float _1957;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1917 = fma(_995, cbModelParam._m0[21u].z, fma(_991, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _987)) + cbModelParam._m0[21u].w;
        float _1921 = fma(_995, cbModelParam._m0[22u].z, fma(_991, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _987)) + cbModelParam._m0[22u].w;
        float _1925 = fma(_995, cbModelParam._m0[23u].z, fma(_991, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _987)) + cbModelParam._m0[23u].w;
        float _1928 = fma(_936, cbModelParam._m0[21u].z, fma(_935, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934));
        float _1931 = fma(_936, cbModelParam._m0[22u].z, fma(_935, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934));
        float _1934 = fma(_936, cbModelParam._m0[23u].z, fma(_935, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934));
        float _2041;
        if (_1928 > 0.0)
        {
            _2041 = abs((1.0 - _1917) / _1928);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1917 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2041 = frontier_phi_28_24_ladder;
        }
        float _2358;
        if (_1931 > 0.0)
        {
            _2358 = abs((1.0 - _1921) / _1931);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1921 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2358 = frontier_phi_40_35_ladder;
        }
        float _2685;
        if (_1934 > 0.0)
        {
            _2685 = abs((1.0 - _1925) / _1934);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1925 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2685 = frontier_phi_50_47_ladder;
        }
        float _2687 = isnan(_2358) ? _2041 : (isnan(_2041) ? _2358 : min(_2041, _2358));
        float _2688 = isnan(_2685) ? _2687 : (isnan(_2687) ? _2685 : min(_2687, _2685));
        float _2692 = (_2688 * _1928) + _1917;
        float _2693 = (_2688 * _1931) + _1921;
        float _2694 = (_2688 * _1934) + _1925;
        float _2695 = _2688 * 9.9999997473787516355514526367188e-05;
        float _2696 = (-1.0) - _2695;
        float _2698 = _2695 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2694 > _2698) || ((_2694 < _2696) || ((_2693 > _2698) || ((_2693 < _2696) || ((_2692 < _2696) || (_2692 > _2698))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2812 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2694, cbModelParam._m0[17u].z, fma(_2693, cbModelParam._m0[17u].y, _2692 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2694, cbModelParam._m0[18u].z, fma(_2693, cbModelParam._m0[18u].y, _2692 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2694, cbModelParam._m0[19u].z, fma(_2693, cbModelParam._m0[19u].y, _2692 * cbModelParam._m0[19u].x))), _1863);
            frontier_phi_25_50_ladder = _2812.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2812.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2812.x * cbModelParam._m0[1u].z;
        }
        _1953 = frontier_phi_25_50_ladder_2;
        _1955 = frontier_phi_25_50_ladder_1;
        _1957 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1937 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_934, _935, _936), _1863);
        _1953 = _1937.x * cbModelParam._m0[1u].z;
        _1955 = _1937.y * cbModelParam._m0[1u].z;
        _1957 = _1937.z * cbModelParam._m0[1u].z;
    }
    float _1969 = ((((1.0 - _955) * ((_942 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_955 * _942)) * _926;
    float _1970 = _1969 * ((cbModelParam._m0[1u].w * (_1953 - _1854)) + _1854);
    float _1971 = _1969 * ((cbModelParam._m0[1u].w * (_1955 - _1856)) + _1856);
    float _1972 = _1969 * ((cbModelParam._m0[1u].w * (_1957 - _1858)) + _1858);
    float _1975 = fma(_1972, cbSceneParam._m0[89u].z, fma(_1971, cbSceneParam._m0[89u].y, _1970 * cbSceneParam._m0[89u].x));
    float _1978 = fma(_1972, cbSceneParam._m0[90u].z, fma(_1971, cbSceneParam._m0[90u].y, _1970 * cbSceneParam._m0[90u].x));
    float _1981 = fma(_1972, cbSceneParam._m0[91u].z, fma(_1971, cbSceneParam._m0[91u].y, _1970 * cbSceneParam._m0[91u].x));
    float _2015 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2019 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2023 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2027 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2028 = _2015 / _2027;
    float _2029 = _2019 / _2027;
    float _2030 = _2023 / _2027;
    float _2177;
    float _2178;
    float _2179;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2057 = ((uint(_2030 > cbSceneParam._m0[59u].y) + uint(_2030 > cbSceneParam._m0[59u].x)) + uint(_2030 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2058 = _2057 + 43u;
        uint _2066 = _2057 + 44u;
        uint _2074 = _2057 + 45u;
        uint _2082 = _2057 + 46u;
        float _2093 = fma(_2027, cbSceneParam._m0[_2058].w, fma(_2023, cbSceneParam._m0[_2058].z, fma(_2019, cbSceneParam._m0[_2058].y, _2015 * cbSceneParam._m0[_2058].x)));
        float _2097 = fma(_2027, cbSceneParam._m0[_2066].w, fma(_2023, cbSceneParam._m0[_2066].z, fma(_2019, cbSceneParam._m0[_2066].y, _2015 * cbSceneParam._m0[_2066].x)));
        float _2105 = fma(_2027, cbSceneParam._m0[_2082].w, fma(_2023, cbSceneParam._m0[_2082].z, fma(_2019, cbSceneParam._m0[_2082].y, _2015 * cbSceneParam._m0[_2082].x)));
        float _2110 = cbSceneParam._m0[33u].z * _2105;
        float _2112 = cbSceneParam._m0[33u].w * _2105;
        float _2115 = fma(_2027, cbSceneParam._m0[_2074].w, fma(_2023, cbSceneParam._m0[_2074].z, fma(_2019, cbSceneParam._m0[_2074].y, _2015 * cbSceneParam._m0[_2074].x))) / _2105;
        float _2163 = (cbSceneParam._m0[33u].x - sqrt(((_2029 * _2029) + (_2028 * _2028)) + (_2030 * _2030))) * cbSceneParam._m0[33u].y;
        float _4534 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2170 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2110 + _2093) / _2105, (_2112 + _2097) / _2105), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 + _2093) / _2105, (_2097 - _2110) / _2105), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 - _2110) / _2105, (_2097 - _2112) / _2105), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 - _2112) / _2105, (_2110 + _2097) / _2105), _2115), 0.0)).x), vec4(0.25)));
        _2177 = 1.0 - (_2170 * cbSceneParam._m0[34u].x);
        _2178 = 1.0 - (_2170 * cbSceneParam._m0[34u].y);
        _2179 = 1.0 - (_2170 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2177 = 1.0;
        _2178 = 1.0;
        _2179 = 1.0;
    }
    float _2243;
    float _2245;
    float _2247;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2231 = fma(_2027, cbSceneParam._m0[63u].w, fma(_2023, cbSceneParam._m0[63u].z, fma(_2019, cbSceneParam._m0[63u].y, _2015 * cbSceneParam._m0[63u].x)));
        float _2232 = fma(_2027, cbSceneParam._m0[60u].w, fma(_2023, cbSceneParam._m0[60u].z, fma(_2019, cbSceneParam._m0[60u].y, _2015 * cbSceneParam._m0[60u].x))) / _2231;
        float _2233 = fma(_2027, cbSceneParam._m0[61u].w, fma(_2023, cbSceneParam._m0[61u].z, fma(_2019, cbSceneParam._m0[61u].y, _2015 * cbSceneParam._m0[61u].x))) / _2231;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2232 >= cbSceneParam._m0[64u].x) && (_2233 >= cbSceneParam._m0[64u].y)) && (_2232 <= cbSceneParam._m0[64u].z)) && (_2233 <= cbSceneParam._m0[64u].w))
        {
            float _2371 = fma(_2027, cbSceneParam._m0[62u].w, fma(_2023, cbSceneParam._m0[62u].z, fma(_2019, cbSceneParam._m0[62u].y, _2015 * cbSceneParam._m0[62u].x))) / _2231;
            float _2375 = isnan(cbSceneParam._m0[41u].w) ? _2371 : (isnan(_2371) ? cbSceneParam._m0[41u].w : max(_2371, cbSceneParam._m0[41u].w));
            float _2418 = (cbSceneParam._m0[33u].x - sqrt(((_2029 * _2029) + (_2028 * _2028)) + (_2030 * _2030))) * cbSceneParam._m0[33u].y;
            float _4550 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
            float _2425 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2232, cbSceneParam._m0[33u].w + _2233), _2375), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2232, _2233 - cbSceneParam._m0[33u].z), _2375), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2232 - cbSceneParam._m0[33u].z, _2233 - cbSceneParam._m0[33u].w), _2375), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2232 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2233), _2375), 0.0)).x), vec4(0.25)));
            float _2429 = 1.0 - (_2425 * cbSceneParam._m0[34u].x);
            float _2430 = 1.0 - (_2425 * cbSceneParam._m0[34u].y);
            float _2431 = 1.0 - (_2425 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2431) ? _2179 : (isnan(_2179) ? _2431 : min(_2179, _2431));
            frontier_phi_37_36_ladder_1 = isnan(_2430) ? _2178 : (isnan(_2178) ? _2430 : min(_2178, _2430));
            frontier_phi_37_36_ladder_2 = isnan(_2429) ? _2177 : (isnan(_2177) ? _2429 : min(_2177, _2429));
        }
        else
        {
            frontier_phi_37_36_ladder = _2179;
            frontier_phi_37_36_ladder_1 = _2178;
            frontier_phi_37_36_ladder_2 = _2177;
        }
        _2243 = frontier_phi_37_36_ladder_2;
        _2245 = frontier_phi_37_36_ladder_1;
        _2247 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2243 = _2177;
        _2245 = _2178;
        _2247 = _2179;
    }
    uvec4 _2252 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2254 = _2252.x * 14u;
    uint _2255 = _2254 + 13u;
    float _2262 = _926 + (-1.0);
    float _2267 = (cbLight._m0[_2255].x * _2262) + 1.0;
    float _2268 = (cbLight._m0[_2255].y * _2262) + 1.0;
    float _2269 = (cbLight._m0[_2255].z * _2262) + 1.0;
    float _2270 = (cbLight._m0[_2255].w * _2262) + 1.0;
    uint _2271 = _2254 + 5u;
    float _2277 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
    uint _2281 = _2254 + 4u;
    float _2290 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
    uint _2294 = _2254 | 1u;
    float _2305 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_764, _765, _766));
    float _2308 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_764, _765, _766));
    float _4586 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _4597 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2313 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * 0.3183098733425140380859375;
    float _2315 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * 0.3183098733425140380859375;
    float _2322 = ((cbLight._m0[_2271].x * _2277) * _2315) + (((cbLight._m0[_2281].x * _2243) * _2290) * _2313);
    float _2323 = ((_2277 * cbLight._m0[_2271].y) * _2315) + (((cbLight._m0[_2281].y * _2245) * _2290) * _2313);
    float _2324 = ((_2277 * cbLight._m0[_2271].z) * _2315) + (((cbLight._m0[_2281].z * _2247) * _2290) * _2313);
    uvec4 _2328 = floatBitsToUint(cbLight._m0[_2254 + 12u]);
    bool _2330 = _2328.x == 0u;
    float _2432;
    float _2434;
    float _2436;
    if (_2330)
    {
        _2432 = _2322;
        _2434 = _2323;
        _2436 = _2324;
    }
    else
    {
        uint _2440 = _2254 + 6u;
        float _2456 = (dot(vec3(cbLight._m0[_2254 + 2u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2457 = _2456 * _2456;
        float _4608 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2458 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _2459 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2432 = (((cbLight._m0[_2440].x * 0.3183098733425140380859375) * _2458) * _2459) + _2322;
        _2434 = (((cbLight._m0[_2440].y * 0.3183098733425140380859375) * _2458) * _2459) + _2323;
        _2436 = (((cbLight._m0[_2440].z * 0.3183098733425140380859375) * _2458) * _2459) + _2324;
    }
    bool _2439 = _2328.y == 0u;
    float _2494;
    float _2496;
    float _2498;
    if (_2439)
    {
        _2494 = _2432;
        _2496 = _2434;
        _2498 = _2436;
    }
    else
    {
        uint _2656 = _2254 + 7u;
        float _2672 = (dot(vec3(cbLight._m0[_2254 + 3u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2673 = _2672 * _2672;
        float _4624 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2674 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2675 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
        _2494 = (((cbLight._m0[_2656].x * 0.3183098733425140380859375) * _2674) * _2675) + _2432;
        _2496 = (((cbLight._m0[_2656].y * 0.3183098733425140380859375) * _2674) * _2675) + _2434;
        _2498 = (((cbLight._m0[_2656].z * 0.3183098733425140380859375) * _2674) * _2675) + _2436;
    }
    uint _2501 = _2254 + 8u;
    float _2514 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2254].w)) * _767) * 0.949999988079071044921875);
    float _2515 = _2514 * _2514;
    float _2516 = cbLight._m0[_2254].x + _843;
    float _2517 = cbLight._m0[_2254].y + _844;
    float _2518 = cbLight._m0[_2254].z + _845;
    float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
    float _2523 = _2522 * _2516;
    float _2524 = _2522 * _2517;
    float _2525 = _2522 * _2518;
    float _2526 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2254].xyz));
    float _4640 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2529 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _4651 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _2530 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
    float _2531 = dot(vec3(_764, _765, _766), vec3(_2523, _2524, _2525));
    float _4662 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2534 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    float _2535 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_2523, _2524, _2525));
    float _4673 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2539 = _2515 * _2515;
    float _2543 = ((_2534 * _2534) * (_2539 + (-1.0))) + 1.0;
    float _2554 = (exp2(log2(1.0 - (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2555 = 1.0 - _2515;
    float _2566 = (0.5 / (((_2530 * ((_2529 * _2555) + _2515)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2555) + _2515) * _2529))) * _2529;
    float _4684 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2568 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2539 / ((_2543 * _2543) * 3.141590118408203125));
    uint _2582 = _2254 + 9u;
    float _2593 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _767) * 0.949999988079071044921875);
    float _2594 = _2593 * _2593;
    float _2595 = cbLight._m0[_2294].x + _843;
    float _2596 = cbLight._m0[_2294].y + _844;
    float _2597 = cbLight._m0[_2294].z + _845;
    float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
    float _2602 = _2601 * _2595;
    float _2603 = _2601 * _2596;
    float _2604 = _2601 * _2597;
    float _2605 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2294].xyz));
    float _4695 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2608 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    float _2609 = dot(vec3(_764, _765, _766), vec3(_2602, _2603, _2604));
    float _4706 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
    float _2613 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2602, _2603, _2604));
    float _4717 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2617 = _2594 * _2594;
    float _2621 = ((_2612 * _2612) * (_2617 + (-1.0))) + 1.0;
    float _2630 = (exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2631 = 1.0 - _2594;
    float _2641 = (0.5 / (((_2530 * ((_2608 * _2631) + _2594)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2631) + _2594) * _2608))) * _2608;
    float _4728 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2643 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2617 / ((_2621 * _2621) * 3.141590118408203125));
    float _2653 = (((_2630 * cbLight._m0[_2582].x) * _2643) * _2277) + ((((cbLight._m0[_2501].x * _2243) * _2554) * _2568) * _2290);
    float _2654 = (((_2630 * cbLight._m0[_2582].y) * _2643) * _2277) + ((((cbLight._m0[_2501].y * _2245) * _2554) * _2568) * _2290);
    float _2655 = (((_2630 * cbLight._m0[_2582].z) * _2643) * _2277) + ((((cbLight._m0[_2501].z * _2247) * _2554) * _2568) * _2290);
    float _2711;
    float _2713;
    float _2715;
    if (_2330)
    {
        _2711 = _2653;
        _2713 = _2654;
        _2715 = _2655;
    }
    else
    {
        uint _2717 = _2254 + 2u;
        uint _2721 = _2254 + 10u;
        float _2735 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2717].w)) * _767) * 0.949999988079071044921875);
        float _2736 = _2735 * _2735;
        float _2737 = cbLight._m0[_2717].x + _843;
        float _2738 = cbLight._m0[_2717].y + _844;
        float _2739 = cbLight._m0[_2717].z + _845;
        float _2743 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
        float _2744 = _2743 * _2737;
        float _2745 = _2743 * _2738;
        float _2746 = _2743 * _2739;
        float _2747 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2717].xyz));
        float _4739 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2750 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2751 = dot(vec3(_764, _765, _766), vec3(_2744, _2745, _2746));
        float _4750 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2754 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
        float _2755 = dot(vec3(cbLight._m0[_2717].xyz), vec3(_2744, _2745, _2746));
        float _4761 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2759 = _2736 * _2736;
        float _2763 = ((_2754 * _2754) * (_2759 + (-1.0))) + 1.0;
        float _2772 = (exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2773 = 1.0 - _2736;
        float _2783 = (0.5 / (((_2530 * ((_2750 * _2773) + _2736)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2773) + _2736) * _2750))) * _2750;
        float _4772 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2785 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2759 / ((_2763 * _2763) * 3.141590118408203125));
        float _2786 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2711 = (((_2772 * cbLight._m0[_2721].x) * _2785) * _2786) + _2653;
        _2713 = (((_2772 * cbLight._m0[_2721].y) * _2785) * _2786) + _2654;
        _2715 = (((_2772 * cbLight._m0[_2721].z) * _2785) * _2786) + _2655;
    }
    float _2817;
    float _2819;
    float _2821;
    if (_2439)
    {
        _2817 = _2711;
        _2819 = _2713;
        _2821 = _2715;
    }
    else
    {
        uint _2828 = _2254 + 3u;
        uint _2832 = _2254 + 11u;
        float _2846 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2828].w)) * _767) * 0.949999988079071044921875);
        float _2847 = _2846 * _2846;
        float _2848 = cbLight._m0[_2828].x + _843;
        float _2849 = cbLight._m0[_2828].y + _844;
        float _2850 = cbLight._m0[_2828].z + _845;
        float _2854 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
        float _2855 = _2854 * _2848;
        float _2856 = _2854 * _2849;
        float _2857 = _2854 * _2850;
        float _2858 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2828].xyz));
        float _4788 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2861 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
        float _2862 = dot(vec3(_764, _765, _766), vec3(_2855, _2856, _2857));
        float _4799 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2865 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
        float _2866 = dot(vec3(cbLight._m0[_2828].xyz), vec3(_2855, _2856, _2857));
        float _4810 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2870 = _2847 * _2847;
        float _2874 = ((_2865 * _2865) * (_2870 + (-1.0))) + 1.0;
        float _2883 = (exp2(log2(1.0 - (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2884 = 1.0 - _2847;
        float _2894 = (0.5 / (((_2530 * ((_2861 * _2884) + _2847)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2884) + _2847) * _2861))) * _2861;
        float _4821 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2896 = (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2870 / ((_2874 * _2874) * 3.141590118408203125));
        float _2897 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
        _2817 = (((_2883 * cbLight._m0[_2832].x) * _2896) * _2897) + _2711;
        _2819 = (((_2883 * cbLight._m0[_2832].y) * _2896) * _2897) + _2713;
        _2821 = (((_2883 * cbLight._m0[_2832].z) * _2896) * _2897) + _2715;
    }
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    float _2973;
    if (_2252.y == 0u)
    {
        uvec4 _2918 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2919 = _2918.x;
        uint _2930 = uint((float(_2918.y) * floor(float(uint(cbSceneParam._m0[85u].y * _864) / _2919))) + floor(float(uint(cbSceneParam._m0[85u].x * _863) / _2919)));
        float _2940 = (log2(_2030 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2941 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        uint _2944 = uint(isnan(14.0) ? _2941 : (isnan(_2941) ? 14.0 : min(_2941, 14.0)));
        uvec4 _2949 = texelFetch(g_lightClusterGridBuffer, int(((_2944 << 2u) + (_2930 << 6u)) >> 2u));
        uint _2950 = _2949.x;
        uint _2951 = _2918.z;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        if (((((1u << ((_2951 >> 4u) & 15u)) + 4294967295u) & _2950) == 0u) || ((_2951 & 240u) == 0u))
        {
            _3030 = 0.0;
            _3032 = 0.0;
            _3034 = 0.0;
            _3036 = 0.0;
            _3038 = 0.0;
            _3040 = 0.0;
        }
        else
        {
            float _3031;
            float _3033;
            float _3035;
            float _3037;
            float _3039;
            float _3041;
            float _3182 = 0.0;
            float _3183 = 0.0;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            uint _3188 = 0u;
            uint _3197;
            bool _3198;
            for (;;)
            {
                _3197 = texelFetch(g_lightClassification, int((((_2944 << 5u) + (_2930 << 9u)) + (_3188 << 2u)) >> 2u)).x;
                _3198 = _3197 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3198)
                {
                    frontier_phi_71_pred = _3187;
                    frontier_phi_71_pred_1 = _3186;
                    frontier_phi_71_pred_2 = _3185;
                    frontier_phi_71_pred_3 = _3184;
                    frontier_phi_71_pred_4 = _3183;
                    frontier_phi_71_pred_5 = _3182;
                }
                else
                {
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    uint _3333;
                    _3327 = _3182;
                    _3328 = _3183;
                    _3329 = _3184;
                    _3330 = _3185;
                    _3331 = _3186;
                    _3332 = _3187;
                    _3333 = _3197;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    for (;;)
                    {
                        uint _3337 = uint(findLSB(_3333)) + (_3188 << 5u);
                        uint _3334 = (_3333 + 4294967295u) & _3333;
                        uint _3339 = _3337 * 48u;
                        vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3339)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 3u)).x));
                        uint _3359 = (_3337 * 48u) + 4u;
                        vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3359)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 3u)).x));
                        uint _3378 = (_3337 * 48u) + 8u;
                        vec3 _3389 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3378)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 2u)).x));
                        float _3393 = _3353.x - _2028;
                        float _3394 = _3353.y - _2029;
                        float _3395 = _3353.z - _2030;
                        float _3396 = dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395));
                        float _3399 = inversesqrt(_3396);
                        float _3400 = _3399 * _3393;
                        float _3401 = _3399 * _3394;
                        float _3402 = _3399 * _3395;
                        float _3403 = dot(vec3(_882, _885, _888), vec3(_3400, _3401, _3402));
                        float _3408 = 1.0 - (_3396 * _3353.w);
                        float _4847 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3409 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                        float _3410 = sqrt(_3396) * _3372.w;
                        float _3413 = 1.39999997615814208984375 / (_3410 + 1.39999997615814208984375);
                        float _3414 = _3413 * _3413;
                        float _3417 = ((1.0 - _3414) * _3403) + _3414;
                        float _3420 = _3410 * _3410;
                        float _3424 = ((isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0))) * _3409) / ((_3420 * 0.699999988079071044921875) + 1.0);
                        float _3428 = (-0.0) - _2028;
                        float _3429 = (-0.0) - _2029;
                        float _3430 = (-0.0) - _2030;
                        float _3434 = inversesqrt(dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430)));
                        float _3435 = _3434 * _3428;
                        float _3436 = _3434 * _3429;
                        float _3437 = _3434 * _3430;
                        float _3444 = exp2(log2(1.0 / ((_3420 * 3.5) + 5.0)) * 0.25);
                        float _3445 = 1.0 - _942;
                        float _3452 = sqrt(1.0 - ((1.0 - (_3445 * _3445)) * (1.0 - (_3444 * _3444))));
                        float _3453 = _3452 * _3452;
                        float _3454 = _3453 * _3453;
                        float _3455 = _3435 + _3400;
                        float _3456 = _3436 + _3401;
                        float _3457 = _3437 + _3402;
                        float _3461 = inversesqrt(dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457)));
                        float _3465 = dot(vec3(_882, _885, _888), vec3(_3435, _3436, _3437));
                        float _4863 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3468 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                        float _3469 = dot(vec3(_882, _885, _888), vec3(_3461 * _3455, _3461 * _3456, _3461 * _3457));
                        float _4874 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3472 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                        float _3476 = ((_3472 * _3472) * (_3454 + (-1.0))) + 1.0;
                        float _3477 = _3413 * _3453;
                        float _3478 = _3477 * _3477;
                        float _3481 = ((1.0 - _3478) * _3403) + _3478;
                        float _4885 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3482 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                        float _3483 = 1.0 - _3453;
                        float _3493 = (0.5 / (((_3482 * ((_3468 * _3483) + _3453)) + 9.9999999392252902907785028219223e-09) + (((_3482 * _3483) + _3453) * _3468))) * _3482;
                        float _4896 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3504 = (((_3454 * 3.1415927410125732421875) * (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0)))) / ((_3476 * _3476) * ((_3420 * 2.1991131305694580078125) + 3.141590118408203125))) * _3409;
                        _3257 = (_3424 * _3372.x) + _3330;
                        _3258 = (_3424 * _3372.y) + _3331;
                        _3259 = (_3424 * _3372.z) + _3332;
                        _3254 = (_3504 * _3389.x) + _3327;
                        _3255 = (_3504 * _3389.y) + _3328;
                        _3256 = (_3504 * _3389.z) + _3329;
                        if (_3334 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3327 = _3254;
                            _3328 = _3255;
                            _3329 = _3256;
                            _3330 = _3257;
                            _3331 = _3258;
                            _3332 = _3259;
                            _3333 = _3334;
                        }
                    }
                    frontier_phi_71_pred = _3259;
                    frontier_phi_71_pred_1 = _3258;
                    frontier_phi_71_pred_2 = _3257;
                    frontier_phi_71_pred_3 = _3256;
                    frontier_phi_71_pred_4 = _3255;
                    frontier_phi_71_pred_5 = _3254;
                }
                _3041 = frontier_phi_71_pred;
                _3039 = frontier_phi_71_pred_1;
                _3037 = frontier_phi_71_pred_2;
                _3035 = frontier_phi_71_pred_3;
                _3033 = frontier_phi_71_pred_4;
                _3031 = frontier_phi_71_pred_5;
                uint _3189 = _3188 + 1u;
                if (_3189 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3182 = _3031;
                    _3183 = _3033;
                    _3184 = _3035;
                    _3185 = _3037;
                    _3186 = _3039;
                    _3187 = _3041;
                    _3188 = _3189;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3030 = _3031;
            _3032 = _3033;
            _3034 = _3035;
            _3036 = _3037;
            _3038 = _3039;
            _3040 = _3041;
        }
        uvec4 _3044 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3045 = _3044.z;
        uint _3047 = (_3045 >> 8u) & 15u;
        float _3150;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        if (((4294967295u << _3047) & _2950) == 0u)
        {
            _3150 = _3030;
            _3152 = _3032;
            _3154 = _3034;
            _3156 = _3036;
            _3158 = _3038;
            _3160 = _3040;
        }
        else
        {
            float _3175 = inversesqrt(dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030)));
            float _3176 = _3175 * _2028;
            float _3177 = _3175 * _2029;
            float _3178 = _3175 * _2030;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3047 < ((_3045 >> 12u) & 15u))
            {
                float _3151;
                float _3153;
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3310 = _3030;
                float _3311 = _3032;
                float _3312 = _3034;
                float _3313 = _3036;
                float _3314 = _3038;
                float _3315 = _3040;
                uint _3316 = _3047;
                uint _3325;
                bool _3326;
                for (;;)
                {
                    _3325 = texelFetch(g_lightClassification, int((((_2944 << 5u) + (_2930 << 9u)) + (_3316 << 2u)) >> 2u)).x;
                    _3326 = _3325 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3326)
                    {
                        frontier_phi_82_pred = _3315;
                        frontier_phi_82_pred_1 = _3314;
                        frontier_phi_82_pred_2 = _3313;
                        frontier_phi_82_pred_3 = _3312;
                        frontier_phi_82_pred_4 = _3311;
                        frontier_phi_82_pred_5 = _3310;
                    }
                    else
                    {
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3531 = _3310;
                        float _3532 = _3311;
                        float _3533 = _3312;
                        float _3534 = _3313;
                        float _3535 = _3314;
                        float _3536 = _3315;
                        uint _3537 = _3325;
                        uint _3538;
                        vec4 _3563;
                        float _3564;
                        vec4 _3579;
                        vec3 _3591;
                        vec4 _3606;
                        vec4 _3621;
                        float _3667;
                        bool _3668;
                        for (;;)
                        {
                            uint _3548 = ((_3316 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3537));
                            _3538 = (_3537 + 4294967295u) & _3537;
                            uint _3550 = _3548 * 40u;
                            _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            _3564 = _3563.w;
                            uint _3566 = (_3548 * 40u) + 4u;
                            _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            uint _3581 = (_3548 * 40u) + 8u;
                            _3591 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x));
                            uint _3593 = (_3548 * 40u) + 16u;
                            _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3608 = (_3548 * 40u) + 20u;
                            _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            uint _3623 = (_3548 * 40u) + 24u;
                            vec4 _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3642 = (_3548 * 40u) + 28u;
                            vec4 _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            _3667 = fma(_2030, _3655.z, fma(_2029, _3655.y, _3655.x * _2028)) + _3655.w;
                            _3668 = !((fma(_2030, _3636.z, fma(_2029, _3636.y, _3636.x * _2028)) + _3636.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3668)
                            {
                                float _3695 = _3563.x - _2028;
                                float _3696 = _3563.y - _2029;
                                float _3697 = _3563.z - _2030;
                                float _3698 = dot(vec3(_3695, _3696, _3697), vec3(_3695, _3696, _3697));
                                float _3701 = inversesqrt(_3698);
                                float _3702 = _3701 * _3695;
                                float _3703 = _3701 * _3696;
                                float _3704 = _3701 * _3697;
                                float _3708 = 1.0 - (_3698 / (_3564 * _3564));
                                float _4907 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3709 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                                float _3713 = sqrt(_3698) * _3579.w;
                                float _3715 = 1.39999997615814208984375 / (_3713 + 1.39999997615814208984375);
                                float _3716 = _3715 * _3715;
                                float _3719 = ((1.0 - _3716) * dot(vec3(_3702, _3703, _3704), vec3(_882, _885, _888))) + _3716;
                                float _3722 = _3713 * _3713;
                                float _3726 = (fma(_2030, _3606.z, fma(_2029, _3606.y, _3606.x * _2028)) + _3606.w) / _3667;
                                float _3727 = (fma(_2030, _3621.z, fma(_2029, _3621.y, _3621.x * _2028)) + _3621.w) / _3667;
                                float _3731 = 1.0 - dot(vec2(_3726, _3727), vec2(_3726, _3727));
                                float _4923 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                                float _3733 = _3732 * (((isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0))) * _3709) / ((_3722 * 0.699999988079071044921875) + 1.0));
                                float _3745 = exp2(log2(1.0 / ((_3722 * 3.5) + 5.0)) * 0.25);
                                float _3746 = 1.0 - _942;
                                float _3753 = sqrt(1.0 - ((1.0 - (_3746 * _3746)) * (1.0 - (_3745 * _3745))));
                                float _3754 = _3753 * _3753;
                                float _3755 = _3754 * _3754;
                                float _3756 = _3702 - _3176;
                                float _3757 = _3703 - _3177;
                                float _3758 = _3704 - _3178;
                                float _3762 = inversesqrt(dot(vec3(_3756, _3757, _3758), vec3(_3756, _3757, _3758)));
                                float _3766 = dot(vec3(_882, _885, _888), vec3((-0.0) - _3176, (-0.0) - _3177, (-0.0) - _3178));
                                float _4934 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3769 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                                float _3770 = dot(vec3(_882, _885, _888), vec3(_3762 * _3756, _3762 * _3757, _3762 * _3758));
                                float _4945 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3773 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
                                float _3777 = ((_3773 * _3773) * (_3755 + (-1.0))) + 1.0;
                                float _3778 = _3715 * _3754;
                                float _3779 = _3778 * _3778;
                                float _3785 = ((1.0 - _3779) * dot(vec3(_882, _885, _888), vec3(_3702, _3703, _3704))) + _3779;
                                float _4956 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3786 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                                float _3787 = 1.0 - _3754;
                                float _3797 = (0.5 / (((_3786 * ((_3769 * _3787) + _3754)) + 9.9999999392252902907785028219223e-09) + (((_3786 * _3787) + _3754) * _3769))) * _3786;
                                float _4967 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3807 = (_3732 * _3709) * (((_3755 * 3.1415927410125732421875) * (isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0)))) / ((_3777 * _3777) * ((_3722 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3733 * _3579.z;
                                frontier_phi_88_pred_1 = _3733 * _3579.y;
                                frontier_phi_88_pred_2 = _3733 * _3579.x;
                                frontier_phi_88_pred_3 = _3807 * _3591.z;
                                frontier_phi_88_pred_4 = _3807 * _3591.y;
                                frontier_phi_88_pred_5 = _3807 * _3591.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3816 = frontier_phi_88_pred;
                            _3815 = frontier_phi_88_pred_1;
                            _3814 = frontier_phi_88_pred_2;
                            _3813 = frontier_phi_88_pred_3;
                            _3812 = frontier_phi_88_pred_4;
                            _3811 = frontier_phi_88_pred_5;
                            _3521 = _3814 + _3534;
                            _3522 = _3815 + _3535;
                            _3523 = _3816 + _3536;
                            _3518 = _3811 + _3531;
                            _3519 = _3812 + _3532;
                            _3520 = _3813 + _3533;
                            if (_3538 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3538;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3523;
                        frontier_phi_82_pred_1 = _3522;
                        frontier_phi_82_pred_2 = _3521;
                        frontier_phi_82_pred_3 = _3520;
                        frontier_phi_82_pred_4 = _3519;
                        frontier_phi_82_pred_5 = _3518;
                    }
                    _3161 = frontier_phi_82_pred;
                    _3159 = frontier_phi_82_pred_1;
                    _3157 = frontier_phi_82_pred_2;
                    _3155 = frontier_phi_82_pred_3;
                    _3153 = frontier_phi_82_pred_4;
                    _3151 = frontier_phi_82_pred_5;
                    uint _3317 = _3316 + 1u;
                    if (_3317 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3310 = _3151;
                        _3311 = _3153;
                        _3312 = _3155;
                        _3313 = _3157;
                        _3314 = _3159;
                        _3315 = _3161;
                        _3316 = _3317;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3157;
                frontier_phi_63_64_ladder_1 = _3161;
                frontier_phi_63_64_ladder_2 = _3159;
                frontier_phi_63_64_ladder_3 = _3155;
                frontier_phi_63_64_ladder_4 = _3153;
                frontier_phi_63_64_ladder_5 = _3151;
            }
            else
            {
                frontier_phi_63_64_ladder = _3036;
                frontier_phi_63_64_ladder_1 = _3040;
                frontier_phi_63_64_ladder_2 = _3038;
                frontier_phi_63_64_ladder_3 = _3034;
                frontier_phi_63_64_ladder_4 = _3032;
                frontier_phi_63_64_ladder_5 = _3030;
            }
            _3150 = frontier_phi_63_64_ladder_5;
            _3152 = frontier_phi_63_64_ladder_4;
            _3154 = frontier_phi_63_64_ladder_3;
            _3156 = frontier_phi_63_64_ladder;
            _3158 = frontier_phi_63_64_ladder_2;
            _3160 = frontier_phi_63_64_ladder_1;
        }
        float _3165 = isnan(1.0) ? _926 : (isnan(_926) ? 1.0 : min(_926, 1.0));
        _2963 = (_3165 * _3156) + _2494;
        _2965 = (_3165 * _3158) + _2496;
        _2967 = (_3165 * _3160) + _2498;
        _2969 = ((_3150 * 0.039999999105930328369140625) * _3165) + _2817;
        _2971 = ((_3152 * 0.039999999105930328369140625) * _3165) + _2819;
        _2973 = ((_3154 * 0.039999999105930328369140625) * _3165) + _2821;
    }
    else
    {
        _2963 = _2494;
        _2965 = _2496;
        _2967 = _2498;
        _2969 = _2817;
        _2971 = _2819;
        _2973 = _2821;
    }
    float _4983 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _4994 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _5005 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _2990 = ((isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0))) * (_2963 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _926))) + ((_2969 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1762)) * cbPerFrame._m0[3u].x);
    float _2991 = ((isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0))) * (_2965 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _926))) + ((_2971 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1762)) * cbPerFrame._m0[3u].x);
    float _2992 = ((isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0))) * (_2967 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _926))) + ((_2973 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1762)) * cbPerFrame._m0[3u].x);
    uint _2993 = _255 + 6u;
    float _3001 = _863 / cbSceneParam._m0[86u].x;
    float _3002 = _864 / cbSceneParam._m0[86u].y;
    vec4 _3016 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3001, _3002, (log2((isnan(cbSceneParam._m0[77u].w) ? _785 : (isnan(_785) ? cbSceneParam._m0[77u].w : min(_785, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3018 = _3016.x;
    float _3019 = _3016.y;
    float _3020 = _3016.z;
    float _3021 = _3016.w;
    float _3092;
    float _3094;
    float _3096;
    float _3098;
    if (_785 > cbSceneParam._m0[78u].w)
    {
        float _3055 = isnan(_785) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _785 : min(cbSceneParam._m0[80u].w, _785));
        float _3056 = _3055 / _785;
        float _3067 = _3056 * _836;
        float _3068 = _837 * _3056;
        float _3069 = (-0.0) - _3068;
        float _3070 = _3056 * _838;
        float _3072 = (cbSceneParam._m0[77u].w * _3069) / _3055;
        float _3073 = _3072 + cbSceneParam._m0[79u].w;
        float _3074 = cbSceneParam._m0[79u].w - _3068;
        float _3080 = sqrt(((_3067 * _3067) + (_3068 * _3068)) + (_3070 * _3070));
        float _3083 = (1.0 - (cbSceneParam._m0[77u].w / _3055)) * _3080;
        float _3088 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3090 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3267;
        if (abs((_3069 - _3072) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3267 = ((((_3073 > 0.0) ? exp2(_3088 * _3073) : (2.0 - exp2(_3090 * _3073))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3083;
        }
        else
        {
            float _3211 = 1.0 / cbSceneParam._m0[80u].x;
            float _3212 = isnan(_3074) ? _3073 : (isnan(_3073) ? _3074 : max(_3073, _3074));
            float _3213 = isnan(_3074) ? _3073 : (isnan(_3073) ? _3074 : min(_3073, _3074));
            float _3222 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : min(_3212, 0.0));
            float _3223 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : min(_3213, 0.0));
            _3267 = ((abs(_3080 / _3069) * cbSceneParam._m0[80u].y) * ((((_3222 - _3223) * 2.0) - ((exp2(_3088 * (isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0)))) - exp2(_3088 * (isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0))))) * _3211)) - ((exp2(_3090 * _3222) - exp2(_3090 * _3223)) * _3211))) + (_3083 * cbSceneParam._m0[80u].z);
        }
        vec4 _3269 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3001, _3002, 1.0), 0.0);
        float _3278 = exp2((_3267 * (-1.44269502162933349609375)) * (1.0 - _3269.w));
        float _3279 = log2(_3278);
        float _3295 = log2(_3021);
        _3092 = (exp2(_3295 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3279 * cbSceneParam._m0[78u].x)) * _3269.x) / cbSceneParam._m0[78u].x)) + _3018;
        _3094 = (exp2(_3295 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3279 * cbSceneParam._m0[78u].y)) * _3269.y) / cbSceneParam._m0[78u].y)) + _3019;
        _3096 = (exp2(_3295 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3279 * cbSceneParam._m0[78u].z)) * _3269.z) / cbSceneParam._m0[78u].z)) + _3020;
        _3098 = _3278 * _3021;
    }
    else
    {
        _3092 = _3018;
        _3094 = _3019;
        _3096 = _3020;
        _3098 = _3021;
    }
    bool _3305;
    vec4 _3108;
    vec4 _3130;
    float _3132;
    float _3136;
    float _3137;
    float _3138;
    float _3139;
    bool _3149;
    for (;;)
    {
        _3108 = cbMatDynParam._m0[0u];
        float _3110 = roundEven(_3108.y);
        bool _3111 = _3110 == 3.0;
        float _3112 = log2(_3098);
        float _3119 = exp2(_3112 * cbSceneParam._m0[78u].x) * _2990;
        float _3120 = exp2(_3112 * cbSceneParam._m0[78u].y) * _2991;
        float _3121 = exp2(_3112 * cbSceneParam._m0[78u].z) * _2992;
        float _3128 = _852 + (-0.5);
        _3130 = cbMtdParam._m0[1u];
        _3132 = _3130.y * _3128;
        float _3135 = (_3110 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3136 = _3135 * (_3111 ? _3119 : (_3119 + (cbSceneParam._m0[72u].w * _3092)));
        _3137 = _3135 * (_3111 ? _3120 : (_3120 + (cbSceneParam._m0[72u].w * _3094)));
        _3138 = _3135 * (_3111 ? _3121 : (_3121 + (cbSceneParam._m0[72u].w * _3096)));
        _3139 = _3128 * 0.999000012874603271484375;
        _3149 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3149)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _3139) < 0.5)
            {
                _3305 = true;
                break;
            }
        }
        uint _3246 = _901 + uint(_3108.w);
        if ((cbInstanceData._m0[_3246].w < 1.0) && ((cbInstanceData._m0[_3246].w + _3139) < 0.5))
        {
            _3305 = true;
            break;
        }
        if ((_3132 + 1.0) < _3130.x)
        {
            _3305 = true;
            break;
        }
        _3305 = false;
        break;
    }
    float _3509;
    if (_3305)
    {
        discard_state = true;
        _3509 = 0.0;
    }
    else
    {
        _3509 = cbInstanceData._m0[_2993].w;
    }
    SV_Target.x = _3136;
    SV_Target.y = _3137;
    SV_Target.z = _3138;
    SV_Target.w = _3509;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2993].w;
    discard_exit();
}


