#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1129;
float _3514;
float _3515;
float _3516;
float _3517;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _341 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _343 = _341.x;
    float _353 = dot(vec4(_343, _341.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _370 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_343 - _353) * cbMtdParam._m0[24u].x) + _353) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3526 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _371 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _378 = (_371 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _379 = (_371 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _380 = (_371 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _397 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _254) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _255) + cbTextureTilingScale._m0[3u].w));
    vec4 _417 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _419 = _417.x;
    float _429 = dot(vec4(_419, _417.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _443 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_419 - _429) * cbMtdParam._m0[24u].x) + _429) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3537 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _451 = (_444 * ((_397.x * cbMtdParam._m0[13u].x) - _378)) + _378;
    float _452 = (_444 * ((_397.y * cbMtdParam._m0[13u].y) - _379)) + _379;
    float _453 = (_444 * ((_397.z * cbMtdParam._m0[13u].z) - _380)) + _380;
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _483 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _485 = _483.x;
    float _486 = _483.y;
    float _487 = _483.z;
    float _494 = ((_466.x - _485) * _371) + _485;
    float _495 = ((_466.y - _486) * _371) + _486;
    float _496 = ((_466.z - _487) * _371) + _487;
    vec4 _508 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _254) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _255) + cbTextureTilingScale._m0[2u].w));
    float _521 = ((_508.z - _496) * _444) + _496;
    float _524 = ((((_508.x - _494) * _444) + _494) * 2.0) + (-1.0);
    float _526 = ((((_508.y - _495) * _444) + _495) * 2.0) + (-1.0);
    float _527 = dot(vec2(_524, _526), vec2(_524, _526));
    float _3548 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _532 = sqrt(1.0 - (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))));
    vec4 _545 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _552 = cbMtdParam._m0[22u].x + _545.w;
    float _555 = fma(_532, _221 * NORMAL.x, fma(_526, _228 * TANGENT.x, (_214 * _206) * _524));
    float _558 = fma(_532, _221 * NORMAL.y, fma(_526, _228 * TANGENT.y, (_214 * _207) * _524));
    float _561 = fma(_532, _221 * NORMAL.z, fma(_526, _228 * TANGENT.z, (_214 * _208) * _524));
    float _565 = inversesqrt(dot(vec3(_555, _558, _561), vec3(_555, _558, _561)));
    float _566 = _565 * _555;
    float _567 = _565 * _558;
    float _568 = _565 * _561;
    float _3559 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _569 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _3570 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _3581 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3592 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3603 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _587 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _639 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _629);
    float _640 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _629);
    float _641 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _629);
    float _645 = inversesqrt(dot(vec3(_639, _640, _641), vec3(_639, _640, _641)));
    float _646 = _639 * _645;
    float _647 = _640 * _645;
    float _648 = _641 * _645;
    vec4 _653 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _655 = _653.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _809 = sqrt(((_639 * _639) + (_640 * _640)) + (_641 * _641));
        float _815 = (cbMatDynParam._m0[5u].x * _809) + cbMatDynParam._m0[5u].y;
        float _3614 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _820 = (cbMatDynParam._m0[5u].z * _809) + cbMatDynParam._m0[5u].w;
        float _3625 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) - _816)) + _816) < ((_655 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _666 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _667 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _685 = fma(_568, cbSceneParam._m0[5u].z, fma(_567, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _566));
    float _688 = fma(_568, cbSceneParam._m0[6u].z, fma(_567, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _566));
    float _691 = fma(_568, cbSceneParam._m0[7u].z, fma(_567, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _566));
    uint _704 = _234 + 9u;
    uint _705 = _704 + uint(cbMatDynParam._m0[0u].w);
    float _711 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * cbInstanceData._m0[_705].x;
    float _712 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) * cbInstanceData._m0[_705].y;
    float _713 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) * cbInstanceData._m0[_705].z;
    float _3636 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _3647 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _3658 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    vec4 _725 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _666, cbSceneParam._m0[86u].y * _667));
    float _729 = ((isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * TEXCOORD_5.w) * _725.x;
    float _730 = dot(vec3(_566, _567, _568), vec3(_646, _647, _648));
    float _733 = _730 * 2.0;
    float _737 = (_733 * _566) - _646;
    float _738 = (_733 * _567) - _647;
    float _739 = (_733 * _568) - _648;
    float _743 = abs(dot(vec3(_646, _647, _648), vec3(_566, _567, _568)));
    float _3669 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _745 = sqrt(_569);
    float _758 = exp2((_745 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_745 * 3.0));
    float _790 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1128;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _853 = fma(_798, cbModelParam._m0[26u].z, fma(_794, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _790));
        float _857 = fma(_798, cbModelParam._m0[27u].z, fma(_794, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _790));
        float _861 = fma(_798, cbModelParam._m0[28u].z, fma(_794, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _790));
        float _886 = _790 + _566;
        float _887 = _794 + _567;
        float _888 = _798 + _568;
        float _898 = fma(_888, cbModelParam._m0[26u].z, fma(_887, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _886)) - _853;
        float _899 = fma(_888, cbModelParam._m0[27u].z, fma(_887, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _886)) - _857;
        float _900 = fma(_888, cbModelParam._m0[28u].z, fma(_887, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _886)) - _861;
        float _904 = inversesqrt(dot(vec3(_898, _899, _900), vec3(_898, _899, _900)));
        float _917 = ((_904 * _898) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_853 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_904 * _899) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_857 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_904 * _900) / cbModelParam._m0[34u].z) + ((((((_861 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        float _956 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_922.x + (-0.5));
        float _958 = _956 * (_922.y + (-0.5));
        float _959 = _956 * (_922.z + (-0.5));
        float _966 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_929.x + (-0.5));
        float _968 = _966 * (_929.y + (-0.5));
        float _969 = _966 * (_929.z + (-0.5));
        float _976 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_936.x + (-0.5));
        float _978 = _976 * (_936.y + (-0.5));
        float _979 = _976 * (_936.z + (-0.5));
        float _986 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_943.x + (-0.5));
        float _988 = _986 * (_943.y + (-0.5));
        float _989 = _986 * (_943.z + (-0.5));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = _957 * 0.5;
        float _994 = _967 * 0.5;
        float _995 = _977 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1010 = (dot(vec3(_566, _567, _568), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1020 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3717 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1022 + 1.0))) + _1027) * _990;
        float _1037 = _958 * 0.5;
        float _1038 = _968 * 0.5;
        float _1039 = _978 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_566, _567, _568), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3750 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1064 + 1.0))) + _1069) * _991;
        float _1079 = _959 * 0.5;
        float _1080 = _969 * 0.5;
        float _1081 = _979 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_566, _567, _568), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3783 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1106 + 1.0))) + _1111) * _992;
        _1128 = _959;
        _1130 = _958;
        _1131 = _957;
        _1132 = _969;
        _1133 = _968;
        _1134 = _967;
        _1135 = _979;
        _1136 = _978;
        _1137 = _977;
        _1138 = _992;
        _1139 = _991;
        _1140 = _990;
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
    }
    else
    {
        _1128 = _1129;
        _1130 = _1129;
        _1131 = _1129;
        _1132 = _1129;
        _1133 = _1129;
        _1134 = _1129;
        _1135 = _1129;
        _1136 = _1129;
        _1137 = _1129;
        _1138 = _1129;
        _1139 = _1129;
        _1140 = _1129;
        _1141 = 0.0;
        _1142 = 0.0;
        _1143 = 0.0;
    }
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1170 = fma(_798, cbModelParam._m0[30u].z, fma(_794, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _790));
        float _1174 = fma(_798, cbModelParam._m0[31u].z, fma(_794, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _790));
        float _1178 = fma(_798, cbModelParam._m0[32u].z, fma(_794, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _790));
        float _1201 = _790 + _566;
        float _1202 = _794 + _567;
        float _1203 = _798 + _568;
        float _1213 = fma(_1203, cbModelParam._m0[30u].z, fma(_1202, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1201)) - _1170;
        float _1214 = fma(_1203, cbModelParam._m0[31u].z, fma(_1202, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1201)) - _1174;
        float _1215 = fma(_1203, cbModelParam._m0[32u].z, fma(_1202, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1201)) - _1178;
        float _1219 = inversesqrt(dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215)));
        float _1232 = ((_1219 * _1213) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1170 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1219 * _1214) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1174 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1219 * _1215) / cbModelParam._m0[35u].z) + ((((((_1178 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        float _1269 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1236.x + (-0.5));
        float _1271 = _1269 * (_1236.y + (-0.5));
        float _1272 = _1269 * (_1236.z + (-0.5));
        float _1279 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1243.x + (-0.5));
        float _1281 = _1279 * (_1243.y + (-0.5));
        float _1282 = _1279 * (_1243.z + (-0.5));
        float _1289 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1250.x + (-0.5));
        float _1291 = _1289 * (_1250.y + (-0.5));
        float _1292 = _1289 * (_1250.z + (-0.5));
        float _1299 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1257.x + (-0.5));
        float _1301 = _1299 * (_1257.y + (-0.5));
        float _1302 = _1299 * (_1257.z + (-0.5));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = _1270 * 0.5;
        float _1307 = _1280 * 0.5;
        float _1308 = _1290 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_566, _567, _568), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _3846 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1333 + 1.0))) + _1338) * _1303;
        float _1348 = _1271 * 0.5;
        float _1349 = _1281 * 0.5;
        float _1350 = _1291 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_566, _567, _568), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _3879 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1375 + 1.0))) + _1380) * _1304;
        float _1390 = _1272 * 0.5;
        float _1391 = _1282 * 0.5;
        float _1392 = _1292 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_566, _567, _568), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3912 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1417 + 1.0))) + _1422) * _1305;
        _1439 = _1272;
        _1440 = _1271;
        _1441 = _1270;
        _1442 = _1282;
        _1443 = _1281;
        _1444 = _1280;
        _1445 = _1292;
        _1446 = _1291;
        _1447 = _1290;
        _1448 = _1305;
        _1449 = _1304;
        _1450 = _1303;
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
    }
    else
    {
        _1439 = _1129;
        _1440 = _1129;
        _1441 = _1129;
        _1442 = _1129;
        _1443 = _1129;
        _1444 = _1129;
        _1445 = _1129;
        _1446 = _1129;
        _1447 = _1129;
        _1448 = _1129;
        _1449 = _1129;
        _1450 = _1129;
        _1451 = 0.0;
        _1452 = 0.0;
        _1453 = 0.0;
    }
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1141)) + _1141;
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1142)) + _1142;
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1143)) + _1143;
    float _1486 = fma(_1465, cbSceneParam._m0[89u].z, fma(_1464, cbSceneParam._m0[89u].y, _1463 * cbSceneParam._m0[89u].x));
    float _1489 = fma(_1465, cbSceneParam._m0[90u].z, fma(_1464, cbSceneParam._m0[90u].y, _1463 * cbSceneParam._m0[90u].x));
    float _1492 = fma(_1465, cbSceneParam._m0[91u].z, fma(_1464, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1463));
    float _1507 = _737 * 0.5;
    float _1508 = _738 * 0.5;
    float _1509 = _739 * 0.5;
    float _1510 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1513 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1516 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1550;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1523 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1128, _1132, _1135, _1138));
        float _1527 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1130, _1133, _1136, _1139));
        float _1531 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1131, _1134, _1137, _1140));
        float _1538 = dot(vec4(cbModelParam._m0[39u]), vec4(_1507, _1508, _1509, 1.0));
        _1550 = dot(vec3(isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1538) ? 0.0 : (isnan(0.0) ? _1538 : max(0.0, _1538))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1550 = 1.0;
    }
    float _1561;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1552 = dot(vec4(cbModelParam._m0[40u]), vec4(_1507, _1508, _1509, 1.0));
        _1561 = dot(vec3(isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1552) ? 0.0 : (isnan(0.0) ? _1552 : max(0.0, _1552))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1561 = 1.0;
    }
    float _1565 = (_1561 * cbModelParam._m0[1u].x) + (_1550 * (1.0 - cbModelParam._m0[1u].x));
    float _1575 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _569);
    float _1576 = isnan(_1575) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1575 : min(cbModelParam._m0[25u].z, _1575));
    float _1658;
    float _1660;
    float _1662;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1625 = fma(_798, cbModelParam._m0[13u].z, fma(_794, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _790)) + cbModelParam._m0[13u].w;
        float _1629 = fma(_798, cbModelParam._m0[14u].z, fma(_794, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _790)) + cbModelParam._m0[14u].w;
        float _1633 = fma(_798, cbModelParam._m0[15u].z, fma(_794, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _790)) + cbModelParam._m0[15u].w;
        float _1636 = fma(_739, cbModelParam._m0[13u].z, fma(_738, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _737));
        float _1639 = fma(_739, cbModelParam._m0[14u].z, fma(_738, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _737));
        float _1642 = fma(_739, cbModelParam._m0[15u].z, fma(_738, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _737));
        float _1670;
        if (_1636 > 0.0)
        {
            _1670 = abs((1.0 - _1625) / _1636);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1625 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1670 = frontier_phi_17_15_ladder;
        }
        float _1893;
        if (_1639 > 0.0)
        {
            _1893 = abs((1.0 - _1629) / _1639);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1629 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1893 = frontier_phi_26_22_ladder;
        }
        float _2139;
        if (_1642 > 0.0)
        {
            _2139 = abs((1.0 - _1633) / _1642);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1633 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2139 = frontier_phi_38_33_ladder;
        }
        float _2141 = isnan(_1893) ? _1670 : (isnan(_1670) ? _1893 : min(_1670, _1893));
        float _2142 = isnan(_2139) ? _2141 : (isnan(_2141) ? _2139 : min(_2141, _2139));
        float _2146 = (_2142 * _1636) + _1625;
        float _2147 = (_2142 * _1639) + _1629;
        float _2148 = (_2142 * _1642) + _1633;
        float _2149 = _2142 * 9.9999997473787516355514526367188e-05;
        float _2151 = (-1.0) - _2149;
        float _2153 = _2149 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2148 > _2153) || ((_2148 < _2151) || ((_2147 > _2153) || ((_2147 < _2151) || ((_2146 < _2151) || (_2146 > _2153))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2272 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2148, cbModelParam._m0[9u].z, fma(_2147, cbModelParam._m0[9u].y, _2146 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2148, cbModelParam._m0[10u].z, fma(_2147, cbModelParam._m0[10u].y, _2146 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2148, cbModelParam._m0[11u].z, fma(_2147, cbModelParam._m0[11u].y, _2146 * cbModelParam._m0[11u].x))), _1576);
            frontier_phi_16_38_ladder = _2272.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2272.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2272.x * cbModelParam._m0[1u].y;
        }
        _1658 = frontier_phi_16_38_ladder_2;
        _1660 = frontier_phi_16_38_ladder_1;
        _1662 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1646 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_737, _738, _739), _1576);
        _1658 = _1646.x * cbModelParam._m0[1u].y;
        _1660 = _1646.y * cbModelParam._m0[1u].y;
        _1662 = _1646.z * cbModelParam._m0[1u].y;
    }
    float _1666 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _569);
    float _1667 = isnan(_1666) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1666 : min(cbModelParam._m0[25u].w, _1666));
    float _1758;
    float _1760;
    float _1762;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1722 = fma(_798, cbModelParam._m0[21u].z, fma(_794, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _790)) + cbModelParam._m0[21u].w;
        float _1726 = fma(_798, cbModelParam._m0[22u].z, fma(_794, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _790)) + cbModelParam._m0[22u].w;
        float _1730 = fma(_798, cbModelParam._m0[23u].z, fma(_794, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _790)) + cbModelParam._m0[23u].w;
        float _1733 = fma(_739, cbModelParam._m0[21u].z, fma(_738, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _737));
        float _1736 = fma(_739, cbModelParam._m0[22u].z, fma(_738, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _737));
        float _1739 = fma(_739, cbModelParam._m0[23u].z, fma(_738, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _737));
        float _1898;
        if (_1733 > 0.0)
        {
            _1898 = abs((1.0 - _1722) / _1733);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1722 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1898 = frontier_phi_28_24_ladder;
        }
        float _2166;
        if (_1736 > 0.0)
        {
            _2166 = abs((1.0 - _1726) / _1736);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1726 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2166 = frontier_phi_40_35_ladder;
        }
        float _2371;
        if (_1739 > 0.0)
        {
            _2371 = abs((1.0 - _1730) / _1739);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1730 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2371 = frontier_phi_49_46_ladder;
        }
        float _2373 = isnan(_2166) ? _1898 : (isnan(_1898) ? _2166 : min(_1898, _2166));
        float _2374 = isnan(_2371) ? _2373 : (isnan(_2373) ? _2371 : min(_2373, _2371));
        float _2378 = (_2374 * _1733) + _1722;
        float _2379 = (_2374 * _1736) + _1726;
        float _2380 = (_2374 * _1739) + _1730;
        float _2381 = _2374 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2381;
        float _2384 = _2381 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2380 > _2384) || ((_2380 < _2382) || ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 < _2382) || (_2378 > _2384))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2579 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2380, cbModelParam._m0[17u].z, fma(_2379, cbModelParam._m0[17u].y, _2378 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2380, cbModelParam._m0[18u].z, fma(_2379, cbModelParam._m0[18u].y, _2378 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2380, cbModelParam._m0[19u].z, fma(_2379, cbModelParam._m0[19u].y, _2378 * cbModelParam._m0[19u].x))), _1667);
            frontier_phi_25_49_ladder = _2579.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2579.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2579.x * cbModelParam._m0[1u].z;
        }
        _1758 = frontier_phi_25_49_ladder_2;
        _1760 = frontier_phi_25_49_ladder_1;
        _1762 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1742 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_737, _738, _739), _1667);
        _1758 = _1742.x * cbModelParam._m0[1u].z;
        _1760 = _1742.y * cbModelParam._m0[1u].z;
        _1762 = _1742.z * cbModelParam._m0[1u].z;
    }
    float _1774 = ((((1.0 - _758) * ((_745 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_758 * _745)) * _729;
    float _1775 = _1774 * ((cbModelParam._m0[1u].w * (_1758 - _1658)) + _1658);
    float _1776 = _1774 * ((cbModelParam._m0[1u].w * (_1760 - _1660)) + _1660);
    float _1777 = _1774 * ((cbModelParam._m0[1u].w * (_1762 - _1662)) + _1662);
    float _1780 = fma(_1777, cbSceneParam._m0[89u].z, fma(_1776, cbSceneParam._m0[89u].y, _1775 * cbSceneParam._m0[89u].x));
    float _1783 = fma(_1777, cbSceneParam._m0[90u].z, fma(_1776, cbSceneParam._m0[90u].y, _1775 * cbSceneParam._m0[90u].x));
    float _1786 = fma(_1777, cbSceneParam._m0[91u].z, fma(_1776, cbSceneParam._m0[91u].y, _1775 * cbSceneParam._m0[91u].x));
    vec4 _1794 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_666, _667));
    float _1796 = _1794.w;
    float _1808 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1796);
    float _1809 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1796);
    float _1810 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1796);
    uvec4 _1814 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1816 = _1814.x * 14u;
    uint _1817 = _1816 + 13u;
    float _1824 = _729 + (-1.0);
    float _1829 = (cbLight._m0[_1817].x * _1824) + 1.0;
    float _1830 = (cbLight._m0[_1817].y * _1824) + 1.0;
    float _1831 = (cbLight._m0[_1817].z * _1824) + 1.0;
    float _1832 = (cbLight._m0[_1817].w * _1824) + 1.0;
    uint _1833 = _1816 + 5u;
    float _1839 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
    uint _1843 = _1816 + 4u;
    float _1852 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
    uint _1856 = _1816 | 1u;
    float _1867 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_566, _567, _568));
    float _1870 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_566, _567, _568));
    float _4048 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _4059 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1875 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * 0.3183098733425140380859375;
    float _1877 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * 0.3183098733425140380859375;
    float _1884 = ((cbLight._m0[_1833].x * _1839) * _1877) + (((cbLight._m0[_1843].x * _1808) * _1852) * _1875);
    float _1885 = ((_1839 * cbLight._m0[_1833].y) * _1877) + (((cbLight._m0[_1843].y * _1809) * _1852) * _1875);
    float _1886 = ((_1839 * cbLight._m0[_1833].z) * _1877) + (((cbLight._m0[_1843].z * _1810) * _1852) * _1875);
    uvec4 _1890 = floatBitsToUint(cbLight._m0[_1816 + 12u]);
    bool _1892 = _1890.x == 0u;
    float _1903;
    float _1905;
    float _1907;
    if (_1892)
    {
        _1903 = _1884;
        _1905 = _1885;
        _1907 = _1886;
    }
    else
    {
        uint _1911 = _1816 + 6u;
        float _1927 = (dot(vec3(cbLight._m0[_1816 + 2u].xyz), vec3(_566, _567, _568)) * 0.5) + 0.5;
        float _1928 = _1927 * _1927;
        float _4070 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1929 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1930 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _1903 = (((cbLight._m0[_1911].x * 0.3183098733425140380859375) * _1929) * _1930) + _1884;
        _1905 = (((cbLight._m0[_1911].y * 0.3183098733425140380859375) * _1929) * _1930) + _1885;
        _1907 = (((cbLight._m0[_1911].z * 0.3183098733425140380859375) * _1929) * _1930) + _1886;
    }
    bool _1910 = _1890.y == 0u;
    float _1948;
    float _1950;
    float _1952;
    if (_1910)
    {
        _1948 = _1903;
        _1950 = _1905;
        _1952 = _1907;
    }
    else
    {
        uint _2110 = _1816 + 7u;
        float _2126 = (dot(vec3(cbLight._m0[_1816 + 3u].xyz), vec3(_566, _567, _568)) * 0.5) + 0.5;
        float _2127 = _2126 * _2126;
        float _4086 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2128 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _2129 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _1948 = (((cbLight._m0[_2110].x * 0.3183098733425140380859375) * _2128) * _2129) + _1903;
        _1950 = (((cbLight._m0[_2110].y * 0.3183098733425140380859375) * _2128) * _2129) + _1905;
        _1952 = (((cbLight._m0[_2110].z * 0.3183098733425140380859375) * _2128) * _2129) + _1907;
    }
    uint _1955 = _1816 + 8u;
    float _1968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1816].w)) * _569) * 0.949999988079071044921875);
    float _1969 = _1968 * _1968;
    float _1970 = cbLight._m0[_1816].x + _646;
    float _1971 = cbLight._m0[_1816].y + _647;
    float _1972 = cbLight._m0[_1816].z + _648;
    float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
    float _1977 = _1976 * _1970;
    float _1978 = _1976 * _1971;
    float _1979 = _1976 * _1972;
    float _1980 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_1816].xyz));
    float _4102 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _4113 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _1984 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _1985 = dot(vec3(_566, _567, _568), vec3(_1977, _1978, _1979));
    float _4124 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _1989 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_1977, _1978, _1979));
    float _4135 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1993 = _1969 * _1969;
    float _1997 = ((_1988 * _1988) * (_1993 + (-1.0))) + 1.0;
    float _2008 = (exp2(log2(1.0 - (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2009 = 1.0 - _1969;
    float _2020 = (0.5 / (((_1984 * ((_1983 * _2009) + _1969)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2009) + _1969) * _1983))) * _1983;
    float _4146 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2022 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1993 / ((_1997 * _1997) * 3.141590118408203125));
    uint _2036 = _1816 + 9u;
    float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1856].w)) * _569) * 0.949999988079071044921875);
    float _2048 = _2047 * _2047;
    float _2049 = cbLight._m0[_1856].x + _646;
    float _2050 = cbLight._m0[_1856].y + _647;
    float _2051 = cbLight._m0[_1856].z + _648;
    float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
    float _2056 = _2055 * _2049;
    float _2057 = _2055 * _2050;
    float _2058 = _2055 * _2051;
    float _2059 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_1856].xyz));
    float _4157 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _2063 = dot(vec3(_566, _567, _568), vec3(_2056, _2057, _2058));
    float _4168 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _2067 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_2056, _2057, _2058));
    float _4179 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2071 = _2048 * _2048;
    float _2075 = ((_2066 * _2066) * (_2071 + (-1.0))) + 1.0;
    float _2084 = (exp2(log2(1.0 - (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2085 = 1.0 - _2048;
    float _2095 = (0.5 / (((_1984 * ((_2062 * _2085) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2085) + _2048) * _2062))) * _2062;
    float _4190 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2097 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2071 / ((_2075 * _2075) * 3.141590118408203125));
    float _2107 = (((_2084 * cbLight._m0[_2036].x) * _2097) * _1839) + ((((cbLight._m0[_1955].x * _1808) * _2008) * _2022) * _1852);
    float _2108 = (((_2084 * cbLight._m0[_2036].y) * _2097) * _1839) + ((((cbLight._m0[_1955].y * _1809) * _2008) * _2022) * _1852);
    float _2109 = (((_2084 * cbLight._m0[_2036].z) * _2097) * _1839) + ((((cbLight._m0[_1955].z * _1810) * _2008) * _2022) * _1852);
    float _2171;
    float _2173;
    float _2175;
    if (_1892)
    {
        _2171 = _2107;
        _2173 = _2108;
        _2175 = _2109;
    }
    else
    {
        uint _2177 = _1816 + 2u;
        uint _2181 = _1816 + 10u;
        float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _569) * 0.949999988079071044921875);
        float _2196 = _2195 * _2195;
        float _2197 = cbLight._m0[_2177].x + _646;
        float _2198 = cbLight._m0[_2177].y + _647;
        float _2199 = cbLight._m0[_2177].z + _648;
        float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
        float _2204 = _2203 * _2197;
        float _2205 = _2203 * _2198;
        float _2206 = _2203 * _2199;
        float _2207 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2177].xyz));
        float _4201 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2211 = dot(vec3(_566, _567, _568), vec3(_2204, _2205, _2206));
        float _4212 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2215 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2204, _2205, _2206));
        float _4223 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2219 = _2196 * _2196;
        float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
        float _2232 = (exp2(log2(1.0 - (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2233 = 1.0 - _2196;
        float _2243 = (0.5 / (((_1984 * ((_2210 * _2233) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2233) + _2196) * _2210))) * _2210;
        float _4234 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2245 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
        float _2246 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _2171 = (((_2232 * cbLight._m0[_2181].x) * _2245) * _2246) + _2107;
        _2173 = (((_2232 * cbLight._m0[_2181].y) * _2245) * _2246) + _2108;
        _2175 = (((_2232 * cbLight._m0[_2181].z) * _2245) * _2246) + _2109;
    }
    float _2281;
    float _2283;
    float _2285;
    if (_1910)
    {
        _2281 = _2171;
        _2283 = _2173;
        _2285 = _2175;
    }
    else
    {
        uint _2292 = _1816 + 3u;
        uint _2296 = _1816 + 11u;
        float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _569) * 0.949999988079071044921875);
        float _2311 = _2310 * _2310;
        float _2312 = cbLight._m0[_2292].x + _646;
        float _2313 = cbLight._m0[_2292].y + _647;
        float _2314 = cbLight._m0[_2292].z + _648;
        float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
        float _2319 = _2318 * _2312;
        float _2320 = _2318 * _2313;
        float _2321 = _2318 * _2314;
        float _2322 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2292].xyz));
        float _4250 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2325 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2326 = dot(vec3(_566, _567, _568), vec3(_2319, _2320, _2321));
        float _4261 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2330 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2319, _2320, _2321));
        float _4272 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2334 = _2311 * _2311;
        float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
        float _2347 = (exp2(log2(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2348 = 1.0 - _2311;
        float _2358 = (0.5 / (((_1984 * ((_2325 * _2348) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_1984 * _2348) + _2311) * _2325))) * _2325;
        float _4283 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2360 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
        float _2361 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _2281 = (((_2347 * cbLight._m0[_2296].x) * _2360) * _2361) + _2171;
        _2283 = (((_2347 * cbLight._m0[_2296].y) * _2360) * _2361) + _2173;
        _2285 = (((_2347 * cbLight._m0[_2296].z) * _2360) * _2361) + _2175;
    }
    float _2496;
    float _2498;
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    if (_1814.y == 0u)
    {
        float _2436 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2437 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2436;
        float _2438 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2436;
        float _2439 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2436;
        uvec4 _2451 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2452 = _2451.x;
        uint _2463 = uint((float(_2451.y) * floor(float(uint(cbSceneParam._m0[85u].y * _667) / _2452))) + floor(float(uint(cbSceneParam._m0[85u].x * _666) / _2452)));
        float _2473 = (log2(_2439 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2474 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        uint _2477 = uint(isnan(14.0) ? _2474 : (isnan(_2474) ? 14.0 : min(_2474, 14.0)));
        uvec4 _2482 = texelFetch(g_lightClusterGridBuffer, int(((_2477 << 2u) + (_2463 << 6u)) >> 2u));
        uint _2483 = _2482.x;
        uint _2484 = _2451.z;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        if (((((1u << ((_2484 >> 4u) & 15u)) + 4294967295u) & _2483) == 0u) || ((_2484 & 240u) == 0u))
        {
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
        }
        else
        {
            float _2585;
            float _2587;
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            float _2740 = 0.0;
            float _2741 = 0.0;
            float _2742 = 0.0;
            uint _2743 = 0u;
            uint _2752;
            bool _2753;
            for (;;)
            {
                _2752 = texelFetch(g_lightClassification, int((((_2477 << 5u) + (_2463 << 9u)) + (_2743 << 2u)) >> 2u)).x;
                _2753 = _2752 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2753)
                {
                    frontier_phi_66_pred = _2737;
                    frontier_phi_66_pred_1 = _2742;
                    frontier_phi_66_pred_2 = _2741;
                    frontier_phi_66_pred_3 = _2740;
                    frontier_phi_66_pred_4 = _2739;
                    frontier_phi_66_pred_5 = _2738;
                }
                else
                {
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    uint _2888;
                    _2882 = _2737;
                    _2883 = _2738;
                    _2884 = _2739;
                    _2885 = _2740;
                    _2886 = _2741;
                    _2887 = _2742;
                    _2888 = _2752;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    for (;;)
                    {
                        uint _2892 = uint(findLSB(_2888)) + (_2743 << 5u);
                        uint _2889 = (_2888 + 4294967295u) & _2888;
                        uint _2894 = _2892 * 48u;
                        vec4 _2908 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2894)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 3u)).x));
                        uint _2914 = (_2892 * 48u) + 4u;
                        vec4 _2927 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2914)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 3u)).x));
                        uint _2933 = (_2892 * 48u) + 8u;
                        vec3 _2944 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2933)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 2u)).x));
                        float _2948 = _2908.x - _2437;
                        float _2949 = _2908.y - _2438;
                        float _2950 = _2908.z - _2439;
                        float _2951 = dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950));
                        float _2954 = inversesqrt(_2951);
                        float _2955 = _2954 * _2948;
                        float _2956 = _2954 * _2949;
                        float _2957 = _2954 * _2950;
                        float _2958 = dot(vec3(_685, _688, _691), vec3(_2955, _2956, _2957));
                        float _2963 = 1.0 - (_2951 * _2908.w);
                        float _4309 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2964 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _2965 = sqrt(_2951) * _2927.w;
                        float _2968 = 1.39999997615814208984375 / (_2965 + 1.39999997615814208984375);
                        float _2969 = _2968 * _2968;
                        float _2972 = ((1.0 - _2969) * _2958) + _2969;
                        float _2975 = _2965 * _2965;
                        float _2979 = ((isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0))) * _2964) / ((_2975 * 0.699999988079071044921875) + 1.0);
                        float _2983 = (-0.0) - _2437;
                        float _2984 = (-0.0) - _2438;
                        float _2985 = (-0.0) - _2439;
                        float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
                        float _2990 = _2989 * _2983;
                        float _2991 = _2989 * _2984;
                        float _2992 = _2989 * _2985;
                        float _3000 = exp2(log2(1.0 / ((_2975 * 3.5) + 5.0)) * 0.25);
                        float _3001 = 1.0 - _745;
                        float _3008 = sqrt(1.0 - ((1.0 - (_3001 * _3001)) * (1.0 - (_3000 * _3000))));
                        float _3009 = _3008 * _3008;
                        float _3010 = _3009 * _3009;
                        float _3011 = _2990 + _2955;
                        float _3012 = _2991 + _2956;
                        float _3013 = _2992 + _2957;
                        float _3017 = inversesqrt(dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013)));
                        float _3021 = dot(vec3(_685, _688, _691), vec3(_2990, _2991, _2992));
                        float _4325 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3024 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _3025 = dot(vec3(_685, _688, _691), vec3(_3017 * _3011, _3017 * _3012, _3017 * _3013));
                        float _4336 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3028 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _3032 = ((_3028 * _3028) * (_3010 + (-1.0))) + 1.0;
                        float _3033 = _2968 * _3009;
                        float _3034 = _3033 * _3033;
                        float _3037 = ((1.0 - _3034) * _2958) + _3034;
                        float _4347 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3038 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _3039 = 1.0 - _3009;
                        float _3049 = (0.5 / (((_3038 * ((_3024 * _3039) + _3009)) + 9.9999999392252902907785028219223e-09) + (((_3038 * _3039) + _3009) * _3024))) * _3038;
                        float _4358 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3060 = (((_3010 * 3.1415927410125732421875) * (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) / ((_3032 * _3032) * ((_2975 * 2.1991131305694580078125) + 3.141590118408203125))) * _2964;
                        _2812 = (_2979 * _2927.x) + _2885;
                        _2813 = (_2979 * _2927.y) + _2886;
                        _2814 = (_2979 * _2927.z) + _2887;
                        _2809 = (_3060 * _2944.x) + _2882;
                        _2810 = (_3060 * _2944.y) + _2883;
                        _2811 = (_3060 * _2944.z) + _2884;
                        if (_2889 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2882 = _2809;
                            _2883 = _2810;
                            _2884 = _2811;
                            _2885 = _2812;
                            _2886 = _2813;
                            _2887 = _2814;
                            _2888 = _2889;
                        }
                    }
                    frontier_phi_66_pred = _2809;
                    frontier_phi_66_pred_1 = _2814;
                    frontier_phi_66_pred_2 = _2813;
                    frontier_phi_66_pred_3 = _2812;
                    frontier_phi_66_pred_4 = _2811;
                    frontier_phi_66_pred_5 = _2810;
                }
                _2585 = frontier_phi_66_pred;
                _2595 = frontier_phi_66_pred_1;
                _2593 = frontier_phi_66_pred_2;
                _2591 = frontier_phi_66_pred_3;
                _2589 = frontier_phi_66_pred_4;
                _2587 = frontier_phi_66_pred_5;
                uint _2744 = _2743 + 1u;
                if (_2744 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2737 = _2585;
                    _2738 = _2587;
                    _2739 = _2589;
                    _2740 = _2591;
                    _2741 = _2593;
                    _2742 = _2595;
                    _2743 = _2744;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
        }
        uvec4 _2598 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2599 = _2598.z;
        uint _2601 = (_2599 >> 8u) & 15u;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        if (((4294967295u << _2601) & _2483) == 0u)
        {
            _2705 = _2584;
            _2707 = _2586;
            _2709 = _2588;
            _2711 = _2590;
            _2713 = _2592;
            _2715 = _2594;
        }
        else
        {
            float _2730 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
            float _2731 = _2730 * _2437;
            float _2732 = _2730 * _2438;
            float _2733 = _2730 * _2439;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2601 < ((_2599 >> 12u) & 15u))
            {
                float _2706;
                float _2708;
                float _2710;
                float _2712;
                float _2714;
                float _2716;
                float _2865 = _2584;
                float _2866 = _2586;
                float _2867 = _2588;
                float _2868 = _2590;
                float _2869 = _2592;
                float _2870 = _2594;
                uint _2871 = _2601;
                uint _2880;
                bool _2881;
                for (;;)
                {
                    _2880 = texelFetch(g_lightClassification, int((((_2477 << 5u) + (_2463 << 9u)) + (_2871 << 2u)) >> 2u)).x;
                    _2881 = _2880 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2881)
                    {
                        frontier_phi_77_pred = _2870;
                        frontier_phi_77_pred_1 = _2869;
                        frontier_phi_77_pred_2 = _2868;
                        frontier_phi_77_pred_3 = _2867;
                        frontier_phi_77_pred_4 = _2866;
                        frontier_phi_77_pred_5 = _2865;
                    }
                    else
                    {
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3087 = _2865;
                        float _3088 = _2866;
                        float _3089 = _2867;
                        float _3090 = _2868;
                        float _3091 = _2869;
                        float _3092 = _2870;
                        uint _3093 = _2880;
                        uint _3094;
                        vec4 _3119;
                        float _3120;
                        vec4 _3135;
                        vec3 _3147;
                        vec4 _3162;
                        vec4 _3177;
                        float _3223;
                        bool _3224;
                        for (;;)
                        {
                            uint _3104 = ((_2871 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3093));
                            _3094 = (_3093 + 4294967295u) & _3093;
                            uint _3106 = _3104 * 40u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            _3120 = _3119.w;
                            uint _3122 = (_3104 * 40u) + 4u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3137 = (_3104 * 40u) + 8u;
                            _3147 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x));
                            uint _3149 = (_3104 * 40u) + 16u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3164 = (_3104 * 40u) + 20u;
                            _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            uint _3179 = (_3104 * 40u) + 24u;
                            vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3198 = (_3104 * 40u) + 28u;
                            vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            _3223 = fma(_2439, _3211.z, fma(_2438, _3211.y, _3211.x * _2437)) + _3211.w;
                            _3224 = !((fma(_2439, _3192.z, fma(_2438, _3192.y, _3192.x * _2437)) + _3192.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3224)
                            {
                                float _3251 = _3119.x - _2437;
                                float _3252 = _3119.y - _2438;
                                float _3253 = _3119.z - _2439;
                                float _3254 = dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253));
                                float _3257 = inversesqrt(_3254);
                                float _3258 = _3257 * _3251;
                                float _3259 = _3257 * _3252;
                                float _3260 = _3257 * _3253;
                                float _3264 = 1.0 - (_3254 / (_3120 * _3120));
                                float _4369 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3265 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3269 = sqrt(_3254) * _3135.w;
                                float _3271 = 1.39999997615814208984375 / (_3269 + 1.39999997615814208984375);
                                float _3272 = _3271 * _3271;
                                float _3275 = ((1.0 - _3272) * dot(vec3(_3258, _3259, _3260), vec3(_685, _688, _691))) + _3272;
                                float _3278 = _3269 * _3269;
                                float _3282 = (fma(_2439, _3162.z, fma(_2438, _3162.y, _3162.x * _2437)) + _3162.w) / _3223;
                                float _3283 = (fma(_2439, _3177.z, fma(_2438, _3177.y, _3177.x * _2437)) + _3177.w) / _3223;
                                float _3287 = 1.0 - dot(vec2(_3282, _3283), vec2(_3282, _3283));
                                float _4385 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3289 = _3288 * (((isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0))) * _3265) / ((_3278 * 0.699999988079071044921875) + 1.0));
                                float _3301 = exp2(log2(1.0 / ((_3278 * 3.5) + 5.0)) * 0.25);
                                float _3302 = 1.0 - _745;
                                float _3309 = sqrt(1.0 - ((1.0 - (_3302 * _3302)) * (1.0 - (_3301 * _3301))));
                                float _3310 = _3309 * _3309;
                                float _3311 = _3310 * _3310;
                                float _3312 = _3258 - _2731;
                                float _3313 = _3259 - _2732;
                                float _3314 = _3260 - _2733;
                                float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                                float _3322 = dot(vec3(_685, _688, _691), vec3((-0.0) - _2731, (-0.0) - _2732, (-0.0) - _2733));
                                float _4396 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3325 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3326 = dot(vec3(_685, _688, _691), vec3(_3318 * _3312, _3318 * _3313, _3318 * _3314));
                                float _4407 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3329 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3333 = ((_3329 * _3329) * (_3311 + (-1.0))) + 1.0;
                                float _3334 = _3271 * _3310;
                                float _3335 = _3334 * _3334;
                                float _3341 = ((1.0 - _3335) * dot(vec3(_685, _688, _691), vec3(_3258, _3259, _3260))) + _3335;
                                float _4418 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3342 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3343 = 1.0 - _3310;
                                float _3353 = (0.5 / (((_3342 * ((_3325 * _3343) + _3310)) + 9.9999999392252902907785028219223e-09) + (((_3342 * _3343) + _3310) * _3325))) * _3342;
                                float _4429 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3363 = (_3288 * _3265) * (((_3311 * 3.1415927410125732421875) * (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) / ((_3333 * _3333) * ((_3278 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3289 * _3135.y;
                                frontier_phi_83_pred_1 = _3289 * _3135.x;
                                frontier_phi_83_pred_2 = _3363 * _3147.z;
                                frontier_phi_83_pred_3 = _3363 * _3147.y;
                                frontier_phi_83_pred_4 = _3363 * _3147.x;
                                frontier_phi_83_pred_5 = _3289 * _3135.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3371 = frontier_phi_83_pred;
                            _3370 = frontier_phi_83_pred_1;
                            _3369 = frontier_phi_83_pred_2;
                            _3368 = frontier_phi_83_pred_3;
                            _3367 = frontier_phi_83_pred_4;
                            _3372 = frontier_phi_83_pred_5;
                            _3077 = _3370 + _3090;
                            _3078 = _3371 + _3091;
                            _3079 = _3372 + _3092;
                            _3074 = _3367 + _3087;
                            _3075 = _3368 + _3088;
                            _3076 = _3369 + _3089;
                            if (_3094 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3094;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3079;
                        frontier_phi_77_pred_1 = _3078;
                        frontier_phi_77_pred_2 = _3077;
                        frontier_phi_77_pred_3 = _3076;
                        frontier_phi_77_pred_4 = _3075;
                        frontier_phi_77_pred_5 = _3074;
                    }
                    _2716 = frontier_phi_77_pred;
                    _2714 = frontier_phi_77_pred_1;
                    _2712 = frontier_phi_77_pred_2;
                    _2710 = frontier_phi_77_pred_3;
                    _2708 = frontier_phi_77_pred_4;
                    _2706 = frontier_phi_77_pred_5;
                    uint _2872 = _2871 + 1u;
                    if (_2872 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2865 = _2706;
                        _2866 = _2708;
                        _2867 = _2710;
                        _2868 = _2712;
                        _2869 = _2714;
                        _2870 = _2716;
                        _2871 = _2872;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2710;
                frontier_phi_58_59_ladder_1 = _2716;
                frontier_phi_58_59_ladder_2 = _2714;
                frontier_phi_58_59_ladder_3 = _2712;
                frontier_phi_58_59_ladder_4 = _2708;
                frontier_phi_58_59_ladder_5 = _2706;
            }
            else
            {
                frontier_phi_58_59_ladder = _2588;
                frontier_phi_58_59_ladder_1 = _2594;
                frontier_phi_58_59_ladder_2 = _2592;
                frontier_phi_58_59_ladder_3 = _2590;
                frontier_phi_58_59_ladder_4 = _2586;
                frontier_phi_58_59_ladder_5 = _2584;
            }
            _2705 = frontier_phi_58_59_ladder_5;
            _2707 = frontier_phi_58_59_ladder_4;
            _2709 = frontier_phi_58_59_ladder;
            _2711 = frontier_phi_58_59_ladder_3;
            _2713 = frontier_phi_58_59_ladder_2;
            _2715 = frontier_phi_58_59_ladder_1;
        }
        float _2720 = isnan(1.0) ? _729 : (isnan(_729) ? 1.0 : min(_729, 1.0));
        _2496 = (_2720 * _2711) + _1948;
        _2498 = (_2720 * _2713) + _1950;
        _2500 = (_2720 * _2715) + _1952;
        _2502 = ((_2705 * 0.039999999105930328369140625) * _2720) + _2281;
        _2504 = ((_2707 * 0.039999999105930328369140625) * _2720) + _2283;
        _2506 = ((_2709 * 0.039999999105930328369140625) * _2720) + _2285;
    }
    else
    {
        _2496 = _1948;
        _2498 = _1950;
        _2500 = _1952;
        _2502 = _2281;
        _2504 = _2283;
        _2506 = _2285;
    }
    float _4445 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4456 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _4467 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _2523 = ((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2496 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _729))) + ((_2502 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1565)) * cbPerFrame._m0[3u].x);
    float _2524 = ((isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2498 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _729))) + ((_2504 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1565)) * cbPerFrame._m0[3u].x);
    float _2525 = ((isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2500 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _729))) + ((_2506 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1565)) * cbPerFrame._m0[3u].x);
    uint _2526 = _234 + 6u;
    float _2534 = _666 / cbSceneParam._m0[86u].x;
    float _2535 = _667 / cbSceneParam._m0[86u].y;
    vec4 _2549 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2534, _2535, (log2((isnan(cbSceneParam._m0[77u].w) ? _587 : (isnan(_587) ? cbSceneParam._m0[77u].w : min(_587, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2551 = _2549.x;
    float _2552 = _2549.y;
    float _2553 = _2549.z;
    float _2554 = _2549.w;
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    if (_587 > cbSceneParam._m0[78u].w)
    {
        float _2609 = isnan(_587) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _587 : min(cbSceneParam._m0[80u].w, _587));
        float _2610 = _2609 / _587;
        float _2621 = _2610 * _639;
        float _2622 = _640 * _2610;
        float _2623 = (-0.0) - _2622;
        float _2625 = _2610 * _641;
        float _2627 = (cbSceneParam._m0[77u].w * _2623) / _2609;
        float _2628 = _2627 + cbSceneParam._m0[79u].w;
        float _2629 = cbSceneParam._m0[79u].w - _2622;
        float _2635 = sqrt(((_2621 * _2621) + (_2622 * _2622)) + (_2625 * _2625));
        float _2638 = (1.0 - (cbSceneParam._m0[77u].w / _2609)) * _2635;
        float _2643 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2645 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2822;
        if (abs((_2623 - _2627) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2822 = ((((_2628 > 0.0) ? exp2(_2643 * _2628) : (2.0 - exp2(_2645 * _2628))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2638;
        }
        else
        {
            float _2766 = 1.0 / cbSceneParam._m0[80u].x;
            float _2767 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : max(_2628, _2629));
            float _2768 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : min(_2628, _2629));
            float _2777 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : min(_2767, 0.0));
            float _2778 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : min(_2768, 0.0));
            _2822 = ((abs(_2635 / _2623) * cbSceneParam._m0[80u].y) * ((((_2777 - _2778) * 2.0) - ((exp2(_2643 * (isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0)))) - exp2(_2643 * (isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0))))) * _2766)) - ((exp2(_2645 * _2777) - exp2(_2645 * _2778)) * _2766))) + (_2638 * cbSceneParam._m0[80u].z);
        }
        vec4 _2824 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2534, _2535, 1.0), 0.0);
        float _2833 = exp2((_2822 * (-1.44269502162933349609375)) * (1.0 - _2824.w));
        float _2834 = log2(_2833);
        float _2850 = log2(_2554);
        _2647 = (exp2(_2850 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2834 * cbSceneParam._m0[78u].x)) * _2824.x) / cbSceneParam._m0[78u].x)) + _2551;
        _2649 = (exp2(_2850 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2834 * cbSceneParam._m0[78u].y)) * _2824.y) / cbSceneParam._m0[78u].y)) + _2552;
        _2651 = (exp2(_2850 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2834 * cbSceneParam._m0[78u].z)) * _2824.z) / cbSceneParam._m0[78u].z)) + _2553;
        _2653 = _2833 * _2554;
    }
    else
    {
        _2647 = _2551;
        _2649 = _2552;
        _2651 = _2553;
        _2653 = _2554;
    }
    bool _2860;
    vec4 _2663;
    vec4 _2685;
    float _2687;
    float _2691;
    float _2692;
    float _2693;
    float _2694;
    bool _2704;
    for (;;)
    {
        _2663 = cbMatDynParam._m0[0u];
        float _2665 = roundEven(_2663.y);
        bool _2666 = _2665 == 3.0;
        float _2667 = log2(_2653);
        float _2674 = exp2(_2667 * cbSceneParam._m0[78u].x) * _2523;
        float _2675 = exp2(_2667 * cbSceneParam._m0[78u].y) * _2524;
        float _2676 = exp2(_2667 * cbSceneParam._m0[78u].z) * _2525;
        float _2683 = _655 + (-0.5);
        _2685 = cbMtdParam._m0[1u];
        _2687 = _2685.y * _2683;
        float _2690 = (_2665 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2691 = _2690 * (_2666 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2647)));
        _2692 = _2690 * (_2666 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2649)));
        _2693 = _2690 * (_2666 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2651)));
        _2694 = _2683 * 0.999000012874603271484375;
        _2704 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2704)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2694) < 0.5)
            {
                _2860 = true;
                break;
            }
        }
        uint _2801 = _704 + uint(_2663.w);
        if ((cbInstanceData._m0[_2801].w < 1.0) && ((cbInstanceData._m0[_2801].w + _2694) < 0.5))
        {
            _2860 = true;
            break;
        }
        if ((_2687 + 1.0) < _2685.x)
        {
            _2860 = true;
            break;
        }
        _2860 = false;
        break;
    }
    float _3065;
    if (_2860)
    {
        discard_state = true;
        _3065 = 0.0;
    }
    else
    {
        _3065 = cbInstanceData._m0[_2526].w;
    }
    SV_Target.x = _2691;
    SV_Target.y = _2692;
    SV_Target.z = _2693;
    SV_Target.w = _3065;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2526].w;
    discard_exit();
}


