#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1152;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _336 = _332.z;
    float _340 = (_332.x * 2.0) + (-1.0);
    float _341 = (_332.y * 2.0) + (-1.0);
    float _342 = dot(vec2(_340, _341), vec2(_340, _341));
    float _3484 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _348 = sqrt(1.0 - (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))));
    float _353 = _340 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_306.x * 2.0) + (-1.0)));
    float _354 = _341 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_306.y * 2.0) + (-1.0)));
    float _357 = fma(_348, _229, fma(_354, _236, _353 * _222));
    float _360 = fma(_348, _230, fma(_354, _237, _353 * _223));
    float _363 = fma(_348, _231, fma(_354, _238, _353 * _224));
    float _367 = inversesqrt(dot(vec3(_357, _360, _363), vec3(_357, _360, _363)));
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _405 = _403.x;
    float _406 = 1.0 - _405;
    float _413 = ((_405 - _406) * cbMtdParam._m0[24u].z) + _406;
    float _415 = (cbMtdParam._m0[19u].x + dot(vec4(_367 * _357, _367 * _360, _367 * _363, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_413 * cbMtdParam._m0[21u].z);
    float _3495 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _418 = (-0.0) - cbMtdParam._m0[24u].y;
    float _420 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _421 = isnan(1.0) ? _420 : (isnan(_420) ? 1.0 : min(_420, 1.0));
    float _428 = _416 - ((_416 * TEXCOORD_8.x) * _421);
    float _429 = _416 - ((_416 * TEXCOORD_8.y) * _421);
    float _430 = _416 - ((_416 * TEXCOORD_8.z) * _421);
    float _437 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _441 = ((isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : min(_437, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _449 = (_441 - (((_413 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _441))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3526 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _454 = ((_428 * (cbMtdParam._m0[17u].x - _286)) * _450) + _286;
    float _455 = ((_429 * (cbMtdParam._m0[17u].y - _287)) * _450) + _287;
    float _456 = ((_430 * (cbMtdParam._m0[17u].z - _288)) * _450) + _288;
    vec4 _468 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _470 = _468.x;
    float _471 = 1.0 - _470;
    float _500 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_470 - _471) * cbMtdParam._m0[24u].w) + _471) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3537 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _509 = ((((cbMtdParam._m0[10u].x - _454) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _501) + _454;
    float _510 = ((((cbMtdParam._m0[10u].y - _455) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _501) + _455;
    float _511 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _456)) * _501) + _456;
    float _516 = (((_306.z - _336) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _336;
    vec4 _530 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _537 = (_530.x * 2.0) + (-1.0);
    float _538 = (_530.y * 2.0) + (-1.0);
    float _539 = dot(vec2(_537, _538), vec2(_537, _538));
    float _3548 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _548 = (((_530.z - _516) * _428) * _450) + _516;
    float _551 = ((cbMtdParam._m0[23u].y - _548) * _501) + _548;
    vec4 _570 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _576 = (_570.x * 2.0) + (-1.0);
    float _577 = (_570.y * 2.0) + (-1.0);
    float _578 = dot(vec2(_576, _577), vec2(_576, _577));
    float _3559 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _598 = (((cbMtdParam._m0[21u].x * _353) + ((_537 - _353) * _428)) * _450) + _353;
    float _599 = (((cbMtdParam._m0[21u].x * _354) + ((_538 - _354) * _429)) * _450) + _354;
    float _600 = (((sqrt(1.0 - (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) - _348) * _430) * _450) + _348;
    float _611 = (((_576 - _598) + (_598 * cbMtdParam._m0[22u].z)) * _501) + _598;
    float _612 = (((_577 - _599) + (_599 * cbMtdParam._m0[22u].z)) * _501) + _599;
    float _613 = ((sqrt(1.0 - (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) - _600) * _501) + _600;
    float _615 = cbMtdParam._m0[22u].x + _332.w;
    float _618 = fma(_613, _229, fma(_612, _236, _611 * _222));
    float _621 = fma(_613, _230, fma(_612, _237, _611 * _223));
    float _624 = fma(_613, _231, fma(_612, _238, _611 * _224));
    float _628 = inversesqrt(dot(vec3(_618, _621, _624), vec3(_618, _621, _624)));
    float _629 = _628 * _618;
    float _630 = _628 * _621;
    float _631 = _628 * _624;
    float _3570 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _632 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _3581 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3592 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3603 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _3614 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _650 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _700 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _690);
    float _701 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _690);
    float _702 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _690);
    float _706 = inversesqrt(dot(vec3(_700, _701, _702), vec3(_700, _701, _702)));
    float _707 = _700 * _706;
    float _708 = _701 * _706;
    float _709 = _702 * _706;
    float _715 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _716 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _737 = fma(_631, cbSceneParam._m0[5u].z, fma(_630, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _629));
    float _740 = fma(_631, cbSceneParam._m0[6u].z, fma(_630, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _629));
    float _743 = fma(_631, cbSceneParam._m0[7u].z, fma(_630, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _629));
    uint _757 = (_241 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _763 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) * cbInstanceData._m0[_757].x;
    float _764 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) * cbInstanceData._m0[_757].y;
    float _765 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) * cbInstanceData._m0[_757].z;
    float _3625 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _3636 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _3647 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    vec4 _777 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _715, cbSceneParam._m0[86u].y * _716));
    float _781 = ((isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * TEXCOORD_5.w) * _777.x;
    float _782 = dot(vec3(_629, _630, _631), vec3(_707, _708, _709));
    float _785 = _782 * 2.0;
    float _789 = (_785 * _629) - _707;
    float _790 = (_785 * _630) - _708;
    float _791 = (_785 * _631) - _709;
    float _795 = abs(dot(vec3(_707, _708, _709), vec3(_629, _630, _631)));
    float _3658 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _797 = sqrt(_632);
    float _810 = exp2((_797 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_797 * 3.0));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1151;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _876 = fma(_850, cbModelParam._m0[26u].z, fma(_846, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842));
        float _880 = fma(_850, cbModelParam._m0[27u].z, fma(_846, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842));
        float _884 = fma(_850, cbModelParam._m0[28u].z, fma(_846, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842));
        float _909 = _842 + _629;
        float _910 = _846 + _630;
        float _911 = _850 + _631;
        float _921 = fma(_911, cbModelParam._m0[26u].z, fma(_910, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _909)) - _876;
        float _922 = fma(_911, cbModelParam._m0[27u].z, fma(_910, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _909)) - _880;
        float _923 = fma(_911, cbModelParam._m0[28u].z, fma(_910, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _909)) - _884;
        float _927 = inversesqrt(dot(vec3(_921, _922, _923), vec3(_921, _922, _923)));
        float _940 = ((_927 * _921) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_876 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_927 * _922) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_880 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_927 * _923) / cbModelParam._m0[34u].z) + ((((((_884 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        float _979 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_945.x + (-0.5));
        float _981 = _979 * (_945.y + (-0.5));
        float _982 = _979 * (_945.z + (-0.5));
        float _989 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_952.x + (-0.5));
        float _991 = _989 * (_952.y + (-0.5));
        float _992 = _989 * (_952.z + (-0.5));
        float _999 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_959.x + (-0.5));
        float _1001 = _999 * (_959.y + (-0.5));
        float _1002 = _999 * (_959.z + (-0.5));
        float _1009 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_966.x + (-0.5));
        float _1011 = _1009 * (_966.y + (-0.5));
        float _1012 = _1009 * (_966.z + (-0.5));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = _980 * 0.5;
        float _1017 = _990 * 0.5;
        float _1018 = _1000 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1033 = (dot(vec3(_629, _630, _631), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1043 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3706 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1045 + 1.0))) + _1050) * _1013;
        float _1060 = _981 * 0.5;
        float _1061 = _991 * 0.5;
        float _1062 = _1001 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_629, _630, _631), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3739 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1087 + 1.0))) + _1092) * _1014;
        float _1102 = _982 * 0.5;
        float _1103 = _992 * 0.5;
        float _1104 = _1002 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_629, _630, _631), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3772 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1129 + 1.0))) + _1134) * _1015;
        _1151 = _982;
        _1153 = _981;
        _1154 = _980;
        _1155 = _992;
        _1156 = _991;
        _1157 = _990;
        _1158 = _1002;
        _1159 = _1001;
        _1160 = _1000;
        _1161 = _1015;
        _1162 = _1014;
        _1163 = _1013;
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1165 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
    }
    else
    {
        _1151 = _1152;
        _1153 = _1152;
        _1154 = _1152;
        _1155 = _1152;
        _1156 = _1152;
        _1157 = _1152;
        _1158 = _1152;
        _1159 = _1152;
        _1160 = _1152;
        _1161 = _1152;
        _1162 = _1152;
        _1163 = _1152;
        _1164 = 0.0;
        _1165 = 0.0;
        _1166 = 0.0;
    }
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1191 = fma(_850, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _842));
        float _1195 = fma(_850, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _842));
        float _1199 = fma(_850, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _842));
        float _1222 = _842 + _629;
        float _1223 = _846 + _630;
        float _1224 = _850 + _631;
        float _1234 = fma(_1224, cbModelParam._m0[30u].z, fma(_1223, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1222)) - _1191;
        float _1235 = fma(_1224, cbModelParam._m0[31u].z, fma(_1223, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1222)) - _1195;
        float _1236 = fma(_1224, cbModelParam._m0[32u].z, fma(_1223, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1222)) - _1199;
        float _1240 = inversesqrt(dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236)));
        float _1253 = ((_1240 * _1234) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1191 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1240 * _1235) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1195 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1240 * _1236) / cbModelParam._m0[35u].z) + ((((((_1199 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        float _1290 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1257.x + (-0.5));
        float _1292 = _1290 * (_1257.y + (-0.5));
        float _1293 = _1290 * (_1257.z + (-0.5));
        float _1300 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1264.x + (-0.5));
        float _1302 = _1300 * (_1264.y + (-0.5));
        float _1303 = _1300 * (_1264.z + (-0.5));
        float _1310 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1271.x + (-0.5));
        float _1312 = _1310 * (_1271.y + (-0.5));
        float _1313 = _1310 * (_1271.z + (-0.5));
        float _1320 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1278.x + (-0.5));
        float _1322 = _1320 * (_1278.y + (-0.5));
        float _1323 = _1320 * (_1278.z + (-0.5));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = _1291 * 0.5;
        float _1328 = _1301 * 0.5;
        float _1329 = _1311 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_629, _630, _631), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _3835 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1354 + 1.0))) + _1359) * _1324;
        float _1369 = _1292 * 0.5;
        float _1370 = _1302 * 0.5;
        float _1371 = _1312 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_629, _630, _631), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _3868 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1396 + 1.0))) + _1401) * _1325;
        float _1411 = _1293 * 0.5;
        float _1412 = _1303 * 0.5;
        float _1413 = _1313 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_629, _630, _631), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _3901 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1438 + 1.0))) + _1443) * _1326;
        _1460 = _1293;
        _1461 = _1292;
        _1462 = _1291;
        _1463 = _1303;
        _1464 = _1302;
        _1465 = _1301;
        _1466 = _1313;
        _1467 = _1312;
        _1468 = _1311;
        _1469 = _1326;
        _1470 = _1325;
        _1471 = _1324;
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1473 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
    }
    else
    {
        _1460 = _1152;
        _1461 = _1152;
        _1462 = _1152;
        _1463 = _1152;
        _1464 = _1152;
        _1465 = _1152;
        _1466 = _1152;
        _1467 = _1152;
        _1468 = _1152;
        _1469 = _1152;
        _1470 = _1152;
        _1471 = _1152;
        _1472 = 0.0;
        _1473 = 0.0;
        _1474 = 0.0;
    }
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1164)) + _1164;
    float _1485 = (cbModelParam._m0[1u].x * (_1473 - _1165)) + _1165;
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1166)) + _1166;
    float _1507 = fma(_1486, cbSceneParam._m0[89u].z, fma(_1485, cbSceneParam._m0[89u].y, _1484 * cbSceneParam._m0[89u].x));
    float _1510 = fma(_1486, cbSceneParam._m0[90u].z, fma(_1485, cbSceneParam._m0[90u].y, _1484 * cbSceneParam._m0[90u].x));
    float _1513 = fma(_1486, cbSceneParam._m0[91u].z, fma(_1485, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1484));
    float _1528 = _789 * 0.5;
    float _1529 = _790 * 0.5;
    float _1530 = _791 * 0.5;
    float _1531 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1534 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1461, _1464, _1467, _1470));
    float _1537 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1571;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1544 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1151, _1155, _1158, _1161));
        float _1548 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1153, _1156, _1159, _1162));
        float _1552 = dot(vec4(_1528, _1529, _1530, 1.0), vec4(_1154, _1157, _1160, _1163));
        float _1559 = dot(vec4(cbModelParam._m0[39u]), vec4(_1528, _1529, _1530, 1.0));
        _1571 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1559) ? 0.0 : (isnan(0.0) ? _1559 : max(0.0, _1559))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1571 = 1.0;
    }
    float _1582;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1573 = dot(vec4(cbModelParam._m0[40u]), vec4(_1528, _1529, _1530, 1.0));
        _1582 = dot(vec3(isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1573) ? 0.0 : (isnan(0.0) ? _1573 : max(0.0, _1573))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1582 = 1.0;
    }
    float _1586 = (_1582 * cbModelParam._m0[1u].x) + (_1571 * (1.0 - cbModelParam._m0[1u].x));
    float _1596 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _632);
    float _1597 = isnan(_1596) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1596 : min(cbModelParam._m0[25u].z, _1596));
    float _1678;
    float _1680;
    float _1682;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1645 = fma(_850, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _842)) + cbModelParam._m0[13u].w;
        float _1649 = fma(_850, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _842)) + cbModelParam._m0[14u].w;
        float _1653 = fma(_850, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _842)) + cbModelParam._m0[15u].w;
        float _1656 = fma(_791, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _789));
        float _1659 = fma(_791, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _789));
        float _1662 = fma(_791, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _789));
        float _1690;
        if (_1656 > 0.0)
        {
            _1690 = abs((1.0 - _1645) / _1656);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1645 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1690 = frontier_phi_14_12_ladder;
        }
        float _1914;
        if (_1659 > 0.0)
        {
            _1914 = abs((1.0 - _1649) / _1659);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1649 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1914 = frontier_phi_23_19_ladder;
        }
        float _2160;
        if (_1662 > 0.0)
        {
            _2160 = abs((1.0 - _1653) / _1662);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1653 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2160 = frontier_phi_35_30_ladder;
        }
        float _2162 = isnan(_1914) ? _1690 : (isnan(_1690) ? _1914 : min(_1690, _1914));
        float _2163 = isnan(_2160) ? _2162 : (isnan(_2162) ? _2160 : min(_2162, _2160));
        float _2167 = (_2163 * _1656) + _1645;
        float _2168 = (_2163 * _1659) + _1649;
        float _2169 = (_2163 * _1662) + _1653;
        float _2170 = _2163 * 9.9999997473787516355514526367188e-05;
        float _2172 = (-1.0) - _2170;
        float _2174 = _2170 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2169 > _2174) || ((_2169 < _2172) || ((_2168 > _2174) || ((_2168 < _2172) || ((_2167 < _2172) || (_2167 > _2174))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2293 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2169, cbModelParam._m0[9u].z, fma(_2168, cbModelParam._m0[9u].y, _2167 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2169, cbModelParam._m0[10u].z, fma(_2168, cbModelParam._m0[10u].y, _2167 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2169, cbModelParam._m0[11u].z, fma(_2168, cbModelParam._m0[11u].y, _2167 * cbModelParam._m0[11u].x))), _1597);
            frontier_phi_13_35_ladder = _2293.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2293.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2293.x * cbModelParam._m0[1u].y;
        }
        _1678 = frontier_phi_13_35_ladder_2;
        _1680 = frontier_phi_13_35_ladder_1;
        _1682 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_789, _790, _791), _1597);
        _1678 = _1666.x * cbModelParam._m0[1u].y;
        _1680 = _1666.y * cbModelParam._m0[1u].y;
        _1682 = _1666.z * cbModelParam._m0[1u].y;
    }
    float _1686 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _632);
    float _1687 = isnan(_1686) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1686 : min(cbModelParam._m0[25u].w, _1686));
    float _1777;
    float _1779;
    float _1781;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1741 = fma(_850, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _842)) + cbModelParam._m0[21u].w;
        float _1745 = fma(_850, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _842)) + cbModelParam._m0[22u].w;
        float _1749 = fma(_850, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _842)) + cbModelParam._m0[23u].w;
        float _1752 = fma(_791, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _789));
        float _1755 = fma(_791, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _789));
        float _1758 = fma(_791, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _789));
        float _1919;
        if (_1752 > 0.0)
        {
            _1919 = abs((1.0 - _1741) / _1752);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1741 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1919 = frontier_phi_25_21_ladder;
        }
        float _2187;
        if (_1755 > 0.0)
        {
            _2187 = abs((1.0 - _1745) / _1755);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1745 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2187 = frontier_phi_37_32_ladder;
        }
        float _2392;
        if (_1758 > 0.0)
        {
            _2392 = abs((1.0 - _1749) / _1758);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1749 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2392 = frontier_phi_46_43_ladder;
        }
        float _2394 = isnan(_2187) ? _1919 : (isnan(_1919) ? _2187 : min(_1919, _2187));
        float _2395 = isnan(_2392) ? _2394 : (isnan(_2394) ? _2392 : min(_2394, _2392));
        float _2399 = (_2395 * _1752) + _1741;
        float _2400 = (_2395 * _1755) + _1745;
        float _2401 = (_2395 * _1758) + _1749;
        float _2402 = _2395 * 9.9999997473787516355514526367188e-05;
        float _2403 = (-1.0) - _2402;
        float _2405 = _2402 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2401 > _2405) || ((_2401 < _2403) || ((_2400 > _2405) || ((_2400 < _2403) || ((_2399 < _2403) || (_2399 > _2405))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2600 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2401, cbModelParam._m0[17u].z, fma(_2400, cbModelParam._m0[17u].y, _2399 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2401, cbModelParam._m0[18u].z, fma(_2400, cbModelParam._m0[18u].y, _2399 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2401, cbModelParam._m0[19u].z, fma(_2400, cbModelParam._m0[19u].y, _2399 * cbModelParam._m0[19u].x))), _1687);
            frontier_phi_22_46_ladder = _2600.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2600.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2600.x * cbModelParam._m0[1u].z;
        }
        _1777 = frontier_phi_22_46_ladder_2;
        _1779 = frontier_phi_22_46_ladder_1;
        _1781 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1761 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_789, _790, _791), _1687);
        _1777 = _1761.x * cbModelParam._m0[1u].z;
        _1779 = _1761.y * cbModelParam._m0[1u].z;
        _1781 = _1761.z * cbModelParam._m0[1u].z;
    }
    float _1793 = ((((1.0 - _810) * ((_797 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_810 * _797)) * _781;
    float _1794 = _1793 * ((cbModelParam._m0[1u].w * (_1777 - _1678)) + _1678);
    float _1795 = _1793 * ((cbModelParam._m0[1u].w * (_1779 - _1680)) + _1680);
    float _1796 = _1793 * ((cbModelParam._m0[1u].w * (_1781 - _1682)) + _1682);
    float _1799 = fma(_1796, cbSceneParam._m0[89u].z, fma(_1795, cbSceneParam._m0[89u].y, _1794 * cbSceneParam._m0[89u].x));
    float _1802 = fma(_1796, cbSceneParam._m0[90u].z, fma(_1795, cbSceneParam._m0[90u].y, _1794 * cbSceneParam._m0[90u].x));
    float _1805 = fma(_1796, cbSceneParam._m0[91u].z, fma(_1795, cbSceneParam._m0[91u].y, _1794 * cbSceneParam._m0[91u].x));
    vec4 _1813 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_715, _716));
    float _1815 = _1813.w;
    float _1827 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1815);
    float _1828 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1815);
    float _1829 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1815);
    uvec4 _1833 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1835 = _1833.x * 14u;
    uint _1836 = _1835 + 13u;
    float _1843 = _781 + (-1.0);
    float _1848 = (cbLight._m0[_1836].x * _1843) + 1.0;
    float _1849 = (cbLight._m0[_1836].y * _1843) + 1.0;
    float _1850 = (cbLight._m0[_1836].z * _1843) + 1.0;
    float _1851 = (cbLight._m0[_1836].w * _1843) + 1.0;
    uint _1852 = _1835 + 5u;
    float _1858 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
    uint _1862 = _1835 + 4u;
    float _1872 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1876 = _1835 | 1u;
    float _1887 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_629, _630, _631));
    float _1890 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_629, _630, _631));
    float _4037 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _4048 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1895 = (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 0.3183098733425140380859375;
    float _1897 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * 0.3183098733425140380859375;
    float _1904 = ((cbLight._m0[_1852].x * _1858) * _1897) + (((cbLight._m0[_1862].x * _1827) * _1872) * _1895);
    float _1905 = ((_1858 * cbLight._m0[_1852].y) * _1897) + (((cbLight._m0[_1862].y * _1828) * _1872) * _1895);
    float _1906 = ((_1858 * cbLight._m0[_1852].z) * _1897) + (((cbLight._m0[_1862].z * _1829) * _1872) * _1895);
    uvec4 _1911 = floatBitsToUint(cbLight._m0[_1835 + 12u]);
    bool _1913 = _1911.x == 0u;
    float _1924;
    float _1926;
    float _1928;
    if (_1913)
    {
        _1924 = _1904;
        _1926 = _1905;
        _1928 = _1906;
    }
    else
    {
        uint _1932 = _1835 + 6u;
        float _1948 = (dot(vec3(cbLight._m0[_1835 + 2u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _1949 = _1948 * _1948;
        float _4059 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1950 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1951 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _1924 = (((cbLight._m0[_1932].x * 0.3183098733425140380859375) * _1950) * _1951) + _1904;
        _1926 = (((cbLight._m0[_1932].y * 0.3183098733425140380859375) * _1950) * _1951) + _1905;
        _1928 = (((cbLight._m0[_1932].z * 0.3183098733425140380859375) * _1950) * _1951) + _1906;
    }
    bool _1931 = _1911.y == 0u;
    float _1969;
    float _1971;
    float _1973;
    if (_1931)
    {
        _1969 = _1924;
        _1971 = _1926;
        _1973 = _1928;
    }
    else
    {
        uint _2131 = _1835 + 7u;
        float _2147 = (dot(vec3(cbLight._m0[_1835 + 3u].xyz), vec3(_629, _630, _631)) * 0.5) + 0.5;
        float _2148 = _2147 * _2147;
        float _4075 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2149 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _2150 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _1969 = (((cbLight._m0[_2131].x * 0.3183098733425140380859375) * _2149) * _2150) + _1924;
        _1971 = (((cbLight._m0[_2131].y * 0.3183098733425140380859375) * _2149) * _2150) + _1926;
        _1973 = (((cbLight._m0[_2131].z * 0.3183098733425140380859375) * _2149) * _2150) + _1928;
    }
    uint _1976 = _1835 + 8u;
    float _1989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1835].w)) * _632) * 0.949999988079071044921875);
    float _1990 = _1989 * _1989;
    float _1991 = cbLight._m0[_1835].x + _707;
    float _1992 = cbLight._m0[_1835].y + _708;
    float _1993 = cbLight._m0[_1835].z + _709;
    float _1997 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
    float _1998 = _1997 * _1991;
    float _1999 = _1997 * _1992;
    float _2000 = _1997 * _1993;
    float _2001 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1835].xyz));
    float _4091 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _2005 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _2006 = dot(vec3(_629, _630, _631), vec3(_1998, _1999, _2000));
    float _4113 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2009 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _2010 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_1998, _1999, _2000));
    float _4124 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2014 = _1990 * _1990;
    float _2018 = ((_2009 * _2009) * (_2014 + (-1.0))) + 1.0;
    float _2029 = (exp2(log2(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2030 = 1.0 - _1990;
    float _2041 = (0.5 / (((_2005 * ((_2004 * _2030) + _1990)) + 9.9999999392252902907785028219223e-09) + (((_2005 * _2030) + _1990) * _2004))) * _2004;
    float _4135 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2043 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2014 / ((_2018 * _2018) * 3.141590118408203125));
    uint _2057 = _1835 + 9u;
    float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1876].w)) * _632) * 0.949999988079071044921875);
    float _2069 = _2068 * _2068;
    float _2070 = cbLight._m0[_1876].x + _707;
    float _2071 = cbLight._m0[_1876].y + _708;
    float _2072 = cbLight._m0[_1876].z + _709;
    float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
    float _2077 = _2076 * _2070;
    float _2078 = _2076 * _2071;
    float _2079 = _2076 * _2072;
    float _2080 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1876].xyz));
    float _4146 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2084 = dot(vec3(_629, _630, _631), vec3(_2077, _2078, _2079));
    float _4157 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _2088 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_2077, _2078, _2079));
    float _4168 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2092 = _2069 * _2069;
    float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
    float _2105 = (exp2(log2(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2106 = 1.0 - _2069;
    float _2116 = (0.5 / (((_2005 * ((_2083 * _2106) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_2005 * _2106) + _2069) * _2083))) * _2083;
    float _4179 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2118 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
    float _2128 = (((_2105 * cbLight._m0[_2057].x) * _2118) * _1858) + ((((cbLight._m0[_1976].x * _1827) * _2029) * _2043) * _1872);
    float _2129 = (((_2105 * cbLight._m0[_2057].y) * _2118) * _1858) + ((((cbLight._m0[_1976].y * _1828) * _2029) * _2043) * _1872);
    float _2130 = (((_2105 * cbLight._m0[_2057].z) * _2118) * _1858) + ((((cbLight._m0[_1976].z * _1829) * _2029) * _2043) * _1872);
    float _2192;
    float _2194;
    float _2196;
    if (_1913)
    {
        _2192 = _2128;
        _2194 = _2129;
        _2196 = _2130;
    }
    else
    {
        uint _2198 = _1835 + 2u;
        uint _2202 = _1835 + 10u;
        float _2216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _632) * 0.949999988079071044921875);
        float _2217 = _2216 * _2216;
        float _2218 = cbLight._m0[_2198].x + _707;
        float _2219 = cbLight._m0[_2198].y + _708;
        float _2220 = cbLight._m0[_2198].z + _709;
        float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
        float _2225 = _2224 * _2218;
        float _2226 = _2224 * _2219;
        float _2227 = _2224 * _2220;
        float _2228 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2198].xyz));
        float _4190 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2231 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2232 = dot(vec3(_629, _630, _631), vec3(_2225, _2226, _2227));
        float _4201 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2235 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2236 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2225, _2226, _2227));
        float _4212 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2240 = _2217 * _2217;
        float _2244 = ((_2235 * _2235) * (_2240 + (-1.0))) + 1.0;
        float _2253 = (exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2254 = 1.0 - _2217;
        float _2264 = (0.5 / (((_2005 * ((_2231 * _2254) + _2217)) + 9.9999999392252902907785028219223e-09) + (((_2005 * _2254) + _2217) * _2231))) * _2231;
        float _4223 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2266 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2240 / ((_2244 * _2244) * 3.141590118408203125));
        float _2267 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2192 = (((_2253 * cbLight._m0[_2202].x) * _2266) * _2267) + _2128;
        _2194 = (((_2253 * cbLight._m0[_2202].y) * _2266) * _2267) + _2129;
        _2196 = (((_2253 * cbLight._m0[_2202].z) * _2266) * _2267) + _2130;
    }
    float _2302;
    float _2304;
    float _2306;
    if (_1931)
    {
        _2302 = _2192;
        _2304 = _2194;
        _2306 = _2196;
    }
    else
    {
        uint _2313 = _1835 + 3u;
        uint _2317 = _1835 + 11u;
        float _2331 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2313].w)) * _632) * 0.949999988079071044921875);
        float _2332 = _2331 * _2331;
        float _2333 = cbLight._m0[_2313].x + _707;
        float _2334 = cbLight._m0[_2313].y + _708;
        float _2335 = cbLight._m0[_2313].z + _709;
        float _2339 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
        float _2340 = _2339 * _2333;
        float _2341 = _2339 * _2334;
        float _2342 = _2339 * _2335;
        float _2343 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_2313].xyz));
        float _4239 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2347 = dot(vec3(_629, _630, _631), vec3(_2340, _2341, _2342));
        float _4250 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2350 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2351 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_2340, _2341, _2342));
        float _4261 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2355 = _2332 * _2332;
        float _2359 = ((_2350 * _2350) * (_2355 + (-1.0))) + 1.0;
        float _2368 = (exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2369 = 1.0 - _2332;
        float _2379 = (0.5 / (((_2005 * ((_2346 * _2369) + _2332)) + 9.9999999392252902907785028219223e-09) + (((_2005 * _2369) + _2332) * _2346))) * _2346;
        float _4272 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2381 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2355 / ((_2359 * _2359) * 3.141590118408203125));
        float _2382 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _2302 = (((_2368 * cbLight._m0[_2317].x) * _2381) * _2382) + _2192;
        _2304 = (((_2368 * cbLight._m0[_2317].y) * _2381) * _2382) + _2194;
        _2306 = (((_2368 * cbLight._m0[_2317].z) * _2381) * _2382) + _2196;
    }
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    float _2525;
    float _2527;
    if (_1833.y == 0u)
    {
        float _2457 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2458 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2457;
        float _2459 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2457;
        float _2460 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2457;
        uvec4 _2472 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2473 = _2472.x;
        uint _2484 = uint((float(_2472.y) * floor(float(uint(cbSceneParam._m0[85u].y * _716) / _2473))) + floor(float(uint(cbSceneParam._m0[85u].x * _715) / _2473)));
        float _2494 = (log2(_2460 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2495 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        uint _2498 = uint(isnan(14.0) ? _2495 : (isnan(_2495) ? 14.0 : min(_2495, 14.0)));
        uvec4 _2503 = texelFetch(g_lightClusterGridBuffer, int(((_2498 << 2u) + (_2484 << 6u)) >> 2u));
        uint _2504 = _2503.x;
        uint _2505 = _2472.z;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        if (((((1u << ((_2505 >> 4u) & 15u)) + 4294967295u) & _2504) == 0u) || ((_2505 & 240u) == 0u))
        {
            _2605 = 0.0;
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
            _2613 = 0.0;
            _2615 = 0.0;
        }
        else
        {
            float _2606;
            float _2608;
            float _2610;
            float _2612;
            float _2614;
            float _2616;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            uint _2755 = 0u;
            uint _2764;
            bool _2765;
            for (;;)
            {
                _2764 = texelFetch(g_lightClassification, int((((_2498 << 5u) + (_2484 << 9u)) + (_2755 << 2u)) >> 2u)).x;
                _2765 = _2764 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2765)
                {
                    frontier_phi_61_pred = _2749;
                    frontier_phi_61_pred_1 = _2754;
                    frontier_phi_61_pred_2 = _2753;
                    frontier_phi_61_pred_3 = _2752;
                    frontier_phi_61_pred_4 = _2751;
                    frontier_phi_61_pred_5 = _2750;
                }
                else
                {
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    uint _2879;
                    _2873 = _2749;
                    _2874 = _2750;
                    _2875 = _2751;
                    _2876 = _2752;
                    _2877 = _2753;
                    _2878 = _2754;
                    _2879 = _2764;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    for (;;)
                    {
                        uint _2883 = uint(findLSB(_2879)) + (_2755 << 5u);
                        uint _2880 = (_2879 + 4294967295u) & _2879;
                        uint _2885 = _2883 * 48u;
                        vec4 _2899 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 3u)).x));
                        uint _2905 = (_2883 * 48u) + 4u;
                        vec4 _2918 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2905)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 3u)).x));
                        uint _2924 = (_2883 * 48u) + 8u;
                        vec3 _2935 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2924)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 2u)).x));
                        float _2939 = _2899.x - _2458;
                        float _2940 = _2899.y - _2459;
                        float _2941 = _2899.z - _2460;
                        float _2942 = dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941));
                        float _2945 = inversesqrt(_2942);
                        float _2946 = _2945 * _2939;
                        float _2947 = _2945 * _2940;
                        float _2948 = _2945 * _2941;
                        float _2949 = dot(vec3(_737, _740, _743), vec3(_2946, _2947, _2948));
                        float _2954 = 1.0 - (_2942 * _2899.w);
                        float _4298 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2955 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                        float _2956 = sqrt(_2942) * _2918.w;
                        float _2959 = 1.39999997615814208984375 / (_2956 + 1.39999997615814208984375);
                        float _2960 = _2959 * _2959;
                        float _2963 = ((1.0 - _2960) * _2949) + _2960;
                        float _2966 = _2956 * _2956;
                        float _2970 = ((isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0))) * _2955) / ((_2966 * 0.699999988079071044921875) + 1.0);
                        float _2974 = (-0.0) - _2458;
                        float _2975 = (-0.0) - _2459;
                        float _2976 = (-0.0) - _2460;
                        float _2980 = inversesqrt(dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976)));
                        float _2981 = _2980 * _2974;
                        float _2982 = _2980 * _2975;
                        float _2983 = _2980 * _2976;
                        float _2991 = exp2(log2(1.0 / ((_2966 * 3.5) + 5.0)) * 0.25);
                        float _2992 = 1.0 - _797;
                        float _2999 = sqrt(1.0 - ((1.0 - (_2992 * _2992)) * (1.0 - (_2991 * _2991))));
                        float _3000 = _2999 * _2999;
                        float _3001 = _3000 * _3000;
                        float _3002 = _2981 + _2946;
                        float _3003 = _2982 + _2947;
                        float _3004 = _2983 + _2948;
                        float _3008 = inversesqrt(dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004)));
                        float _3012 = dot(vec3(_737, _740, _743), vec3(_2981, _2982, _2983));
                        float _4314 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3015 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _3016 = dot(vec3(_737, _740, _743), vec3(_3008 * _3002, _3008 * _3003, _3008 * _3004));
                        float _4325 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3019 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _3023 = ((_3019 * _3019) * (_3001 + (-1.0))) + 1.0;
                        float _3024 = _2959 * _3000;
                        float _3025 = _3024 * _3024;
                        float _3028 = ((1.0 - _3025) * _2949) + _3025;
                        float _4336 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3029 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _3030 = 1.0 - _3000;
                        float _3040 = (0.5 / (((_3029 * ((_3015 * _3030) + _3000)) + 9.9999999392252902907785028219223e-09) + (((_3029 * _3030) + _3000) * _3015))) * _3029;
                        float _4347 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3051 = (((_3001 * 3.1415927410125732421875) * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) / ((_3023 * _3023) * ((_2966 * 2.1991131305694580078125) + 3.141590118408203125))) * _2955;
                        _2808 = (_2970 * _2918.x) + _2876;
                        _2809 = (_2970 * _2918.y) + _2877;
                        _2810 = (_2970 * _2918.z) + _2878;
                        _2805 = (_3051 * _2935.x) + _2873;
                        _2806 = (_3051 * _2935.y) + _2874;
                        _2807 = (_3051 * _2935.z) + _2875;
                        if (_2880 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2873 = _2805;
                            _2874 = _2806;
                            _2875 = _2807;
                            _2876 = _2808;
                            _2877 = _2809;
                            _2878 = _2810;
                            _2879 = _2880;
                        }
                    }
                    frontier_phi_61_pred = _2805;
                    frontier_phi_61_pred_1 = _2810;
                    frontier_phi_61_pred_2 = _2809;
                    frontier_phi_61_pred_3 = _2808;
                    frontier_phi_61_pred_4 = _2807;
                    frontier_phi_61_pred_5 = _2806;
                }
                _2606 = frontier_phi_61_pred;
                _2616 = frontier_phi_61_pred_1;
                _2614 = frontier_phi_61_pred_2;
                _2612 = frontier_phi_61_pred_3;
                _2610 = frontier_phi_61_pred_4;
                _2608 = frontier_phi_61_pred_5;
                uint _2756 = _2755 + 1u;
                if (_2756 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2749 = _2606;
                    _2750 = _2608;
                    _2751 = _2610;
                    _2752 = _2612;
                    _2753 = _2614;
                    _2754 = _2616;
                    _2755 = _2756;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2605 = _2606;
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
            _2613 = _2614;
            _2615 = _2616;
        }
        uvec4 _2619 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2620 = _2619.z;
        uint _2622 = (_2620 >> 8u) & 15u;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        if (((4294967295u << _2622) & _2504) == 0u)
        {
            _2717 = _2605;
            _2719 = _2607;
            _2721 = _2609;
            _2723 = _2611;
            _2725 = _2613;
            _2727 = _2615;
        }
        else
        {
            float _2742 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
            float _2743 = _2742 * _2458;
            float _2744 = _2742 * _2459;
            float _2745 = _2742 * _2460;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2622 < ((_2620 >> 12u) & 15u))
            {
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2856 = _2605;
                float _2857 = _2607;
                float _2858 = _2609;
                float _2859 = _2611;
                float _2860 = _2613;
                float _2861 = _2615;
                uint _2862 = _2622;
                uint _2871;
                bool _2872;
                for (;;)
                {
                    _2871 = texelFetch(g_lightClassification, int((((_2498 << 5u) + (_2484 << 9u)) + (_2862 << 2u)) >> 2u)).x;
                    _2872 = _2871 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2872)
                    {
                        frontier_phi_67_pred = _2859;
                        frontier_phi_67_pred_1 = _2860;
                        frontier_phi_67_pred_2 = _2861;
                        frontier_phi_67_pred_3 = _2858;
                        frontier_phi_67_pred_4 = _2857;
                        frontier_phi_67_pred_5 = _2856;
                    }
                    else
                    {
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3069 = _2856;
                        float _3070 = _2857;
                        float _3071 = _2858;
                        float _3072 = _2859;
                        float _3073 = _2860;
                        float _3074 = _2861;
                        uint _3075 = _2871;
                        uint _3076;
                        vec4 _3101;
                        float _3102;
                        vec4 _3117;
                        vec3 _3129;
                        vec4 _3145;
                        vec4 _3160;
                        float _3206;
                        bool _3207;
                        for (;;)
                        {
                            uint _3086 = ((_2862 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3075));
                            _3076 = (_3075 + 4294967295u) & _3075;
                            uint _3088 = _3086 * 40u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            _3102 = _3101.w;
                            uint _3104 = (_3086 * 40u) + 4u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3119 = (_3086 * 40u) + 8u;
                            _3129 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x));
                            uint _3132 = (_3086 * 40u) + 16u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3147 = (_3086 * 40u) + 20u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3162 = (_3086 * 40u) + 24u;
                            vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3181 = (_3086 * 40u) + 28u;
                            vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            _3206 = fma(_2460, _3194.z, fma(_2459, _3194.y, _3194.x * _2458)) + _3194.w;
                            _3207 = !((fma(_2460, _3175.z, fma(_2459, _3175.y, _3175.x * _2458)) + _3175.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3207)
                            {
                                float _3234 = _3101.x - _2458;
                                float _3235 = _3101.y - _2459;
                                float _3236 = _3101.z - _2460;
                                float _3237 = dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236));
                                float _3240 = inversesqrt(_3237);
                                float _3241 = _3240 * _3234;
                                float _3242 = _3240 * _3235;
                                float _3243 = _3240 * _3236;
                                float _3247 = 1.0 - (_3237 / (_3102 * _3102));
                                float _4358 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3252 = sqrt(_3237) * _3117.w;
                                float _3254 = 1.39999997615814208984375 / (_3252 + 1.39999997615814208984375);
                                float _3255 = _3254 * _3254;
                                float _3258 = ((1.0 - _3255) * dot(vec3(_3241, _3242, _3243), vec3(_737, _740, _743))) + _3255;
                                float _3261 = _3252 * _3252;
                                float _3265 = (fma(_2460, _3145.z, fma(_2459, _3145.y, _3145.x * _2458)) + _3145.w) / _3206;
                                float _3266 = (fma(_2460, _3160.z, fma(_2459, _3160.y, _3160.x * _2458)) + _3160.w) / _3206;
                                float _3270 = 1.0 - dot(vec2(_3265, _3266), vec2(_3265, _3266));
                                float _4374 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3271 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3272 = _3271 * (((isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0))) * _3248) / ((_3261 * 0.699999988079071044921875) + 1.0));
                                float _3284 = exp2(log2(1.0 / ((_3261 * 3.5) + 5.0)) * 0.25);
                                float _3285 = 1.0 - _797;
                                float _3292 = sqrt(1.0 - ((1.0 - (_3285 * _3285)) * (1.0 - (_3284 * _3284))));
                                float _3293 = _3292 * _3292;
                                float _3294 = _3293 * _3293;
                                float _3295 = _3241 - _2743;
                                float _3296 = _3242 - _2744;
                                float _3297 = _3243 - _2745;
                                float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                                float _3305 = dot(vec3(_737, _740, _743), vec3((-0.0) - _2743, (-0.0) - _2744, (-0.0) - _2745));
                                float _4385 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3308 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3309 = dot(vec3(_737, _740, _743), vec3(_3301 * _3295, _3301 * _3296, _3301 * _3297));
                                float _4396 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3312 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3316 = ((_3312 * _3312) * (_3294 + (-1.0))) + 1.0;
                                float _3317 = _3254 * _3293;
                                float _3318 = _3317 * _3317;
                                float _3324 = ((1.0 - _3318) * dot(vec3(_737, _740, _743), vec3(_3241, _3242, _3243))) + _3318;
                                float _4407 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3325 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3326 = 1.0 - _3293;
                                float _3336 = (0.5 / (((_3325 * ((_3308 * _3326) + _3293)) + 9.9999999392252902907785028219223e-09) + (((_3325 * _3326) + _3293) * _3308))) * _3325;
                                float _4418 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3346 = (_3271 * _3248) * (((_3294 * 3.1415927410125732421875) * (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) / ((_3316 * _3316) * ((_3261 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3346 * _3129.x;
                                frontier_phi_73_pred_1 = _3346 * _3129.y;
                                frontier_phi_73_pred_2 = _3272 * _3117.z;
                                frontier_phi_73_pred_3 = _3272 * _3117.y;
                                frontier_phi_73_pred_4 = _3272 * _3117.x;
                                frontier_phi_73_pred_5 = _3346 * _3129.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3350 = frontier_phi_73_pred;
                            _3351 = frontier_phi_73_pred_1;
                            _3355 = frontier_phi_73_pred_2;
                            _3354 = frontier_phi_73_pred_3;
                            _3353 = frontier_phi_73_pred_4;
                            _3352 = frontier_phi_73_pred_5;
                            _3059 = _3353 + _3072;
                            _3060 = _3354 + _3073;
                            _3061 = _3355 + _3074;
                            _3056 = _3350 + _3069;
                            _3057 = _3351 + _3070;
                            _3058 = _3352 + _3071;
                            if (_3076 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3076;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3059;
                        frontier_phi_67_pred_1 = _3060;
                        frontier_phi_67_pred_2 = _3061;
                        frontier_phi_67_pred_3 = _3058;
                        frontier_phi_67_pred_4 = _3057;
                        frontier_phi_67_pred_5 = _3056;
                    }
                    _2724 = frontier_phi_67_pred;
                    _2726 = frontier_phi_67_pred_1;
                    _2728 = frontier_phi_67_pred_2;
                    _2722 = frontier_phi_67_pred_3;
                    _2720 = frontier_phi_67_pred_4;
                    _2718 = frontier_phi_67_pred_5;
                    uint _2863 = _2862 + 1u;
                    if (_2863 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2856 = _2718;
                        _2857 = _2720;
                        _2858 = _2722;
                        _2859 = _2724;
                        _2860 = _2726;
                        _2861 = _2728;
                        _2862 = _2863;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2726;
                frontier_phi_55_56_ladder_1 = _2728;
                frontier_phi_55_56_ladder_2 = _2724;
                frontier_phi_55_56_ladder_3 = _2722;
                frontier_phi_55_56_ladder_4 = _2720;
                frontier_phi_55_56_ladder_5 = _2718;
            }
            else
            {
                frontier_phi_55_56_ladder = _2613;
                frontier_phi_55_56_ladder_1 = _2615;
                frontier_phi_55_56_ladder_2 = _2611;
                frontier_phi_55_56_ladder_3 = _2609;
                frontier_phi_55_56_ladder_4 = _2607;
                frontier_phi_55_56_ladder_5 = _2605;
            }
            _2717 = frontier_phi_55_56_ladder_5;
            _2719 = frontier_phi_55_56_ladder_4;
            _2721 = frontier_phi_55_56_ladder_3;
            _2723 = frontier_phi_55_56_ladder_2;
            _2725 = frontier_phi_55_56_ladder;
            _2727 = frontier_phi_55_56_ladder_1;
        }
        float _2732 = isnan(1.0) ? _781 : (isnan(_781) ? 1.0 : min(_781, 1.0));
        _2517 = (_2732 * _2723) + _1969;
        _2519 = (_2732 * _2725) + _1971;
        _2521 = (_2732 * _2727) + _1973;
        _2523 = ((_2717 * 0.039999999105930328369140625) * _2732) + _2302;
        _2525 = ((_2719 * 0.039999999105930328369140625) * _2732) + _2304;
        _2527 = ((_2721 * 0.039999999105930328369140625) * _2732) + _2306;
    }
    else
    {
        _2517 = _1969;
        _2519 = _1971;
        _2521 = _1973;
        _2523 = _2302;
        _2525 = _2304;
        _2527 = _2306;
    }
    float _4434 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4445 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4456 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    uint _2547 = _241 + 6u;
    float _2555 = _715 / cbSceneParam._m0[86u].x;
    float _2556 = _716 / cbSceneParam._m0[86u].y;
    vec4 _2570 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2555, _2556, (log2((isnan(cbSceneParam._m0[77u].w) ? _650 : (isnan(_650) ? cbSceneParam._m0[77u].w : min(_650, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2572 = _2570.x;
    float _2573 = _2570.y;
    float _2574 = _2570.z;
    float _2575 = _2570.w;
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    if (_650 > cbSceneParam._m0[78u].w)
    {
        float _2630 = isnan(_650) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _650 : min(cbSceneParam._m0[80u].w, _650));
        float _2631 = _2630 / _650;
        float _2642 = _2631 * _700;
        float _2643 = _701 * _2631;
        float _2644 = (-0.0) - _2643;
        float _2645 = _2631 * _702;
        float _2647 = (cbSceneParam._m0[77u].w * _2644) / _2630;
        float _2648 = _2647 + cbSceneParam._m0[79u].w;
        float _2649 = cbSceneParam._m0[79u].w - _2643;
        float _2655 = sqrt(((_2642 * _2642) + (_2643 * _2643)) + (_2645 * _2645));
        float _2658 = (1.0 - (cbSceneParam._m0[77u].w / _2630)) * _2655;
        float _2663 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2665 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2818;
        if (abs((_2644 - _2647) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2818 = ((((_2648 > 0.0) ? exp2(_2663 * _2648) : (2.0 - exp2(_2665 * _2648))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2658;
        }
        else
        {
            float _2778 = 1.0 / cbSceneParam._m0[80u].x;
            float _2779 = isnan(_2649) ? _2648 : (isnan(_2648) ? _2649 : max(_2648, _2649));
            float _2780 = isnan(_2649) ? _2648 : (isnan(_2648) ? _2649 : min(_2648, _2649));
            float _2789 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : min(_2779, 0.0));
            float _2790 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : min(_2780, 0.0));
            _2818 = ((abs(_2655 / _2644) * cbSceneParam._m0[80u].y) * ((((_2789 - _2790) * 2.0) - ((exp2(_2663 * (isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0)))) - exp2(_2663 * (isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0))))) * _2778)) - ((exp2(_2665 * _2789) - exp2(_2665 * _2790)) * _2778))) + (_2658 * cbSceneParam._m0[80u].z);
        }
        vec4 _2820 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2555, _2556, 1.0), 0.0);
        float _2829 = exp2((_2818 * (-1.44269502162933349609375)) * (1.0 - _2820.w));
        float _2830 = log2(_2829);
        float _2846 = log2(_2575);
        _2667 = (exp2(_2846 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].x)) * _2820.x) / cbSceneParam._m0[78u].x)) + _2572;
        _2669 = (exp2(_2846 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].y)) * _2820.y) / cbSceneParam._m0[78u].y)) + _2573;
        _2671 = (exp2(_2846 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].z)) * _2820.z) / cbSceneParam._m0[78u].z)) + _2574;
        _2673 = _2829 * _2575;
    }
    else
    {
        _2667 = _2572;
        _2669 = _2573;
        _2671 = _2574;
        _2673 = _2575;
    }
    float _2685 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2686 = _2685 == 3.0;
    float _2687 = log2(_2673);
    float _2694 = exp2(_2687 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2517 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _781))) + ((_2523 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1586)) * cbPerFrame._m0[3u].x));
    float _2695 = exp2(_2687 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2519 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _781))) + ((_2525 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1586)) * cbPerFrame._m0[3u].x));
    float _2696 = exp2(_2687 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2521 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _781))) + ((_2527 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1586)) * cbPerFrame._m0[3u].x));
    float _2705 = (_2685 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2705 * (_2686 ? _2694 : (_2694 + (cbSceneParam._m0[72u].w * _2667)));
    SV_Target.y = _2705 * (_2686 ? _2695 : (_2695 + (cbSceneParam._m0[72u].w * _2669)));
    SV_Target.z = _2705 * (_2686 ? _2696 : (_2696 + (cbSceneParam._m0[72u].w * _2671)));
    SV_Target.w = cbInstanceData._m0[_2547].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2547].w;
}


