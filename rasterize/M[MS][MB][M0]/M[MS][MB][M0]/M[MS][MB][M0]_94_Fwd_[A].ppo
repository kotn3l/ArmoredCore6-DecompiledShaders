#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1349;
float _3709;
float _3710;
float _3711;
float _3712;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3721 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3732 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3743 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _408 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _408) * cbMtdParam._m0[24u].x) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3754 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _433 = (_426 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _434 = (_426 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _435 = (_426 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _439 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _433;
    float _442 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _434;
    float _445 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _435;
    float _452 = ((_433 - _439) * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) + _439;
    float _453 = ((_434 - _442) * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) + _442;
    float _454 = ((_435 - _445) * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) + _445;
    vec4 _472 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _514 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _516 = _514.x;
    float _517 = _514.y;
    float _518 = _514.z;
    float _527 = ((_497.z - _518) * _426) + _518;
    float _530 = ((((_497.x - _516) * _426) + _516) * 2.0) + (-1.0);
    float _531 = ((((_497.y - _517) * _426) + _517) * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _3765 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _537 = sqrt(1.0 - (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))));
    vec4 _553 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _578 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _296) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _297) + cbTextureTilingScale._m0[11u].w));
    float _580 = _578.x;
    float _581 = 1.0 - _580;
    float _587 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _590 = ((isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : min(_587, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _599 = (_590 - ((((((_580 - _581) * cbMtdParam._m0[24u].z) + _581) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _590))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3786 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _600 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _607 = (_600 * (cbMtdParam._m0[17u].x - _452)) + _452;
    float _608 = (_600 * (cbMtdParam._m0[17u].y - _453)) + _453;
    float _609 = (_600 * (cbMtdParam._m0[17u].z - _454)) + _454;
    vec4 _621 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _623 = _621.x;
    float _624 = 1.0 - _623;
    float _649 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_623 - _624) * cbMtdParam._m0[24u].w) + _624) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3797 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _650 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _658 = ((((cbMtdParam._m0[10u].x - _607) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _650) + _607;
    float _659 = ((((cbMtdParam._m0[10u].y - _608) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _650) + _608;
    float _660 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _609)) * _650) + _609;
    float _665 = (((_472.z - _527) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _527;
    float _669 = ((_553.z - _665) * cbMtdParam._m0[19u].w) + _665;
    vec4 _683 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _296) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _297) + cbTextureTilingScale._m0[15u].w));
    float _690 = (_683.x * 2.0) + (-1.0);
    float _691 = (_683.y * 2.0) + (-1.0);
    float _692 = dot(vec2(_690, _691), vec2(_690, _691));
    float _3808 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _700 = (_600 * (_683.z - _669)) + _669;
    float _703 = ((cbMtdParam._m0[23u].y - _700) * _650) + _700;
    vec4 _722 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _728 = (_722.x * 2.0) + (-1.0);
    float _729 = (_722.y * 2.0) + (-1.0);
    float _730 = dot(vec2(_728, _729), vec2(_728, _729));
    float _3819 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _744 = (_530 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_472.x * 2.0) + (-1.0)))) + (((_553.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _745 = (_531 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_472.y * 2.0) + (-1.0)))) + (((_553.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _757 = (((_690 - _744) + (cbMtdParam._m0[21u].x * _744)) * _600) + _744;
    float _758 = (((_691 - _745) + (cbMtdParam._m0[21u].x * _745)) * _600) + _745;
    float _759 = (_600 * (sqrt(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) - _537)) + _537;
    float _770 = (((_728 - _757) + (_757 * cbMtdParam._m0[22u].z)) * _650) + _757;
    float _771 = (((_729 - _758) + (_758 * cbMtdParam._m0[22u].z)) * _650) + _758;
    float _772 = ((sqrt(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) - _759) * _650) + _759;
    float _774 = cbMtdParam._m0[22u].x + _553.w;
    float _777 = fma(_772, _245 * NORMAL.x, fma(_771, _252 * TANGENT.x, (_238 * _230) * _770));
    float _780 = fma(_772, _245 * NORMAL.y, fma(_771, _252 * TANGENT.y, (_238 * _231) * _770));
    float _783 = fma(_772, _245 * NORMAL.z, fma(_771, _252 * TANGENT.z, (_238 * _232) * _770));
    float _787 = inversesqrt(dot(vec3(_777, _780, _783), vec3(_777, _780, _783)));
    float _788 = _787 * _777;
    float _789 = _787 * _780;
    float _790 = _787 * _783;
    float _3830 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _791 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _3841 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _3852 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _3863 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _3874 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _809 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _860 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _850);
    float _861 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _850);
    float _862 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _850);
    float _866 = inversesqrt(dot(vec3(_860, _861, _862), vec3(_860, _861, _862)));
    float _867 = _860 * _866;
    float _868 = _861 * _866;
    float _869 = _862 * _866;
    vec4 _874 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _876 = _874.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1030 = sqrt(((_860 * _860) + (_861 * _861)) + (_862 * _862));
        float _1036 = (cbMatDynParam._m0[5u].x * _1030) + cbMatDynParam._m0[5u].y;
        float _3885 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1041 = (cbMatDynParam._m0[5u].z * _1030) + cbMatDynParam._m0[5u].w;
        float _3896 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) - _1037)) + _1037) < ((_876 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _887 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _888 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _906 = fma(_790, cbSceneParam._m0[5u].z, fma(_789, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _788));
    float _909 = fma(_790, cbSceneParam._m0[6u].z, fma(_789, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _788));
    float _912 = fma(_790, cbSceneParam._m0[7u].z, fma(_789, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _788));
    uint _925 = _277 + 9u;
    uint _926 = _925 + uint(cbMatDynParam._m0[0u].w);
    float _932 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * cbInstanceData._m0[_926].x;
    float _933 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * cbInstanceData._m0[_926].y;
    float _934 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_926].z;
    float _3907 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    vec4 _946 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _887, cbSceneParam._m0[86u].y * _888));
    float _950 = ((isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * TEXCOORD_5.w) * _946.x;
    float _951 = dot(vec3(_788, _789, _790), vec3(_867, _868, _869));
    float _954 = _951 * 2.0;
    float _958 = (_954 * _788) - _867;
    float _959 = (_954 * _789) - _868;
    float _960 = (_954 * _790) - _869;
    float _964 = abs(dot(vec3(_867, _868, _869), vec3(_788, _789, _790)));
    float _3940 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _966 = sqrt(_791);
    float _979 = exp2((_966 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_966 * 3.0));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1348;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1073 = fma(_1019, cbModelParam._m0[26u].z, fma(_1015, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1011));
        float _1077 = fma(_1019, cbModelParam._m0[27u].z, fma(_1015, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1011));
        float _1081 = fma(_1019, cbModelParam._m0[28u].z, fma(_1015, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1011));
        float _1106 = _1011 + _788;
        float _1107 = _1015 + _789;
        float _1108 = _1019 + _790;
        float _1118 = fma(_1108, cbModelParam._m0[26u].z, fma(_1107, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1106)) - _1073;
        float _1119 = fma(_1108, cbModelParam._m0[27u].z, fma(_1107, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1106)) - _1077;
        float _1120 = fma(_1108, cbModelParam._m0[28u].z, fma(_1107, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1106)) - _1081;
        float _1124 = inversesqrt(dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120)));
        float _1137 = ((_1124 * _1118) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1073 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1124 * _1119) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1077 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1124 * _1120) / cbModelParam._m0[34u].z) + ((((((_1081 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        float _1176 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1142.x + (-0.5));
        float _1178 = _1176 * (_1142.y + (-0.5));
        float _1179 = _1176 * (_1142.z + (-0.5));
        float _1186 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1149.x + (-0.5));
        float _1188 = _1186 * (_1149.y + (-0.5));
        float _1189 = _1186 * (_1149.z + (-0.5));
        float _1196 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1156.x + (-0.5));
        float _1198 = _1196 * (_1156.y + (-0.5));
        float _1199 = _1196 * (_1156.z + (-0.5));
        float _1206 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1163.x + (-0.5));
        float _1208 = _1206 * (_1163.y + (-0.5));
        float _1209 = _1206 * (_1163.z + (-0.5));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = _1177 * 0.5;
        float _1214 = _1187 * 0.5;
        float _1215 = _1197 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1230 = (dot(vec3(_788, _789, _790), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1240 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3988 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1242 + 1.0))) + _1247) * _1210;
        float _1257 = _1178 * 0.5;
        float _1258 = _1188 * 0.5;
        float _1259 = _1198 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_788, _789, _790), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4021 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1284 + 1.0))) + _1289) * _1211;
        float _1299 = _1179 * 0.5;
        float _1300 = _1189 * 0.5;
        float _1301 = _1199 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_788, _789, _790), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4054 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1326 + 1.0))) + _1331) * _1212;
        _1348 = _1179;
        _1350 = _1178;
        _1351 = _1177;
        _1352 = _1189;
        _1353 = _1188;
        _1354 = _1187;
        _1355 = _1199;
        _1356 = _1198;
        _1357 = _1197;
        _1358 = _1212;
        _1359 = _1211;
        _1360 = _1210;
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1362 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
    }
    else
    {
        _1348 = _1349;
        _1350 = _1349;
        _1351 = _1349;
        _1352 = _1349;
        _1353 = _1349;
        _1354 = _1349;
        _1355 = _1349;
        _1356 = _1349;
        _1357 = _1349;
        _1358 = _1349;
        _1359 = _1349;
        _1360 = _1349;
        _1361 = 0.0;
        _1362 = 0.0;
        _1363 = 0.0;
    }
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1391 = fma(_1019, cbModelParam._m0[30u].z, fma(_1015, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1011));
        float _1395 = fma(_1019, cbModelParam._m0[31u].z, fma(_1015, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1011));
        float _1399 = fma(_1019, cbModelParam._m0[32u].z, fma(_1015, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1011));
        float _1422 = _1011 + _788;
        float _1423 = _1015 + _789;
        float _1424 = _1019 + _790;
        float _1434 = fma(_1424, cbModelParam._m0[30u].z, fma(_1423, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1422)) - _1391;
        float _1435 = fma(_1424, cbModelParam._m0[31u].z, fma(_1423, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1422)) - _1395;
        float _1436 = fma(_1424, cbModelParam._m0[32u].z, fma(_1423, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1422)) - _1399;
        float _1440 = inversesqrt(dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436)));
        float _1453 = ((_1440 * _1434) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1391 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1454 = ((_1440 * _1435) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1395 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1455 = ((_1440 * _1436) / cbModelParam._m0[35u].z) + ((((((_1399 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1453, _1454, _1455), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1453, _1454, _1455), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1453, _1454, _1455), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1453, _1454, _1455), 0.0);
        float _1490 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1457.x + (-0.5));
        float _1492 = _1490 * (_1457.y + (-0.5));
        float _1493 = _1490 * (_1457.z + (-0.5));
        float _1500 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1464.x + (-0.5));
        float _1502 = _1500 * (_1464.y + (-0.5));
        float _1503 = _1500 * (_1464.z + (-0.5));
        float _1510 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1471.x + (-0.5));
        float _1512 = _1510 * (_1471.y + (-0.5));
        float _1513 = _1510 * (_1471.z + (-0.5));
        float _1520 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1478.x + (-0.5));
        float _1522 = _1520 * (_1478.y + (-0.5));
        float _1523 = _1520 * (_1478.z + (-0.5));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = _1491 * 0.5;
        float _1528 = _1501 * 0.5;
        float _1529 = _1511 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_788, _789, _790), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4117 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1554 + 1.0))) + _1559) * _1524;
        float _1569 = _1492 * 0.5;
        float _1570 = _1502 * 0.5;
        float _1571 = _1512 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_788, _789, _790), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4150 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1596 + 1.0))) + _1601) * _1525;
        float _1611 = _1493 * 0.5;
        float _1612 = _1503 * 0.5;
        float _1613 = _1513 * 0.5;
        float _1614 = dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613));
        float _1619 = (_1614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1614);
        float _1627 = (dot(vec3(_788, _789, _790), vec3(_1619 * _1611, _1619 * _1612, _1619 * _1613)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1636 = sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1638 = _1637 * 2.0;
        float _1642 = (1.0 - _1637) / (_1637 + 1.0);
        float _4183 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1652 = ((((1.0 - _1643) * (_1638 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1638 + 1.0))) + _1643) * _1526;
        _1660 = _1493;
        _1661 = _1492;
        _1662 = _1491;
        _1663 = _1503;
        _1664 = _1502;
        _1665 = _1501;
        _1666 = _1513;
        _1667 = _1512;
        _1668 = _1511;
        _1669 = _1526;
        _1670 = _1525;
        _1671 = _1524;
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
        _1673 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)));
    }
    else
    {
        _1660 = _1349;
        _1661 = _1349;
        _1662 = _1349;
        _1663 = _1349;
        _1664 = _1349;
        _1665 = _1349;
        _1666 = _1349;
        _1667 = _1349;
        _1668 = _1349;
        _1669 = _1349;
        _1670 = _1349;
        _1671 = _1349;
        _1672 = 0.0;
        _1673 = 0.0;
        _1674 = 0.0;
    }
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1361)) + _1361;
    float _1685 = (cbModelParam._m0[1u].x * (_1673 - _1362)) + _1362;
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1363)) + _1363;
    float _1707 = fma(_1686, cbSceneParam._m0[89u].z, fma(_1685, cbSceneParam._m0[89u].y, _1684 * cbSceneParam._m0[89u].x));
    float _1710 = fma(_1686, cbSceneParam._m0[90u].z, fma(_1685, cbSceneParam._m0[90u].y, _1684 * cbSceneParam._m0[90u].x));
    float _1713 = fma(_1686, cbSceneParam._m0[91u].z, fma(_1685, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1684));
    float _1728 = _958 * 0.5;
    float _1729 = _959 * 0.5;
    float _1730 = _960 * 0.5;
    float _1731 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1734 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1661, _1664, _1667, _1670));
    float _1737 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1771;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1744 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1348, _1352, _1355, _1358));
        float _1748 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1350, _1353, _1356, _1359));
        float _1752 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1351, _1354, _1357, _1360));
        float _1759 = dot(vec4(cbModelParam._m0[39u]), vec4(_1728, _1729, _1730, 1.0));
        _1771 = dot(vec3(isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1759) ? 0.0 : (isnan(0.0) ? _1759 : max(0.0, _1759))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1771 = 1.0;
    }
    float _1782;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1773 = dot(vec4(cbModelParam._m0[40u]), vec4(_1728, _1729, _1730, 1.0));
        _1782 = dot(vec3(isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1773) ? 0.0 : (isnan(0.0) ? _1773 : max(0.0, _1773))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1782 = 1.0;
    }
    float _1786 = (_1782 * cbModelParam._m0[1u].x) + (_1771 * (1.0 - cbModelParam._m0[1u].x));
    float _1796 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _791);
    float _1797 = isnan(_1796) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1796 : min(cbModelParam._m0[25u].z, _1796));
    float _1878;
    float _1880;
    float _1882;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1845 = fma(_1019, cbModelParam._m0[13u].z, fma(_1015, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1011)) + cbModelParam._m0[13u].w;
        float _1849 = fma(_1019, cbModelParam._m0[14u].z, fma(_1015, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1011)) + cbModelParam._m0[14u].w;
        float _1853 = fma(_1019, cbModelParam._m0[15u].z, fma(_1015, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1011)) + cbModelParam._m0[15u].w;
        float _1856 = fma(_960, cbModelParam._m0[13u].z, fma(_959, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _958));
        float _1859 = fma(_960, cbModelParam._m0[14u].z, fma(_959, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _958));
        float _1862 = fma(_960, cbModelParam._m0[15u].z, fma(_959, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _958));
        float _1890;
        if (_1856 > 0.0)
        {
            _1890 = abs((1.0 - _1845) / _1856);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1845 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1890 = frontier_phi_17_15_ladder;
        }
        float _2091;
        if (_1859 > 0.0)
        {
            _2091 = abs((1.0 - _1849) / _1859);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1849 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2091 = frontier_phi_26_22_ladder;
        }
        float _2334;
        if (_1862 > 0.0)
        {
            _2334 = abs((1.0 - _1853) / _1862);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1853 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2334 = frontier_phi_38_33_ladder;
        }
        float _2336 = isnan(_2091) ? _1890 : (isnan(_1890) ? _2091 : min(_1890, _2091));
        float _2337 = isnan(_2334) ? _2336 : (isnan(_2336) ? _2334 : min(_2336, _2334));
        float _2341 = (_2337 * _1856) + _1845;
        float _2342 = (_2337 * _1859) + _1849;
        float _2343 = (_2337 * _1862) + _1853;
        float _2344 = _2337 * 9.9999997473787516355514526367188e-05;
        float _2346 = (-1.0) - _2344;
        float _2348 = _2344 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2343 > _2348) || ((_2343 < _2346) || ((_2342 > _2348) || ((_2342 < _2346) || ((_2341 < _2346) || (_2341 > _2348))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2467 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2343, cbModelParam._m0[9u].z, fma(_2342, cbModelParam._m0[9u].y, _2341 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2343, cbModelParam._m0[10u].z, fma(_2342, cbModelParam._m0[10u].y, _2341 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2343, cbModelParam._m0[11u].z, fma(_2342, cbModelParam._m0[11u].y, _2341 * cbModelParam._m0[11u].x))), _1797);
            frontier_phi_16_38_ladder = _2467.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2467.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2467.x * cbModelParam._m0[1u].y;
        }
        _1878 = frontier_phi_16_38_ladder_2;
        _1880 = frontier_phi_16_38_ladder_1;
        _1882 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1866 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_958, _959, _960), _1797);
        _1878 = _1866.x * cbModelParam._m0[1u].y;
        _1880 = _1866.y * cbModelParam._m0[1u].y;
        _1882 = _1866.z * cbModelParam._m0[1u].y;
    }
    float _1886 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _791);
    float _1887 = isnan(_1886) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1886 : min(cbModelParam._m0[25u].w, _1886));
    float _1977;
    float _1979;
    float _1981;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1941 = fma(_1019, cbModelParam._m0[21u].z, fma(_1015, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1011)) + cbModelParam._m0[21u].w;
        float _1945 = fma(_1019, cbModelParam._m0[22u].z, fma(_1015, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1011)) + cbModelParam._m0[22u].w;
        float _1949 = fma(_1019, cbModelParam._m0[23u].z, fma(_1015, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1011)) + cbModelParam._m0[23u].w;
        float _1952 = fma(_960, cbModelParam._m0[21u].z, fma(_959, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _958));
        float _1955 = fma(_960, cbModelParam._m0[22u].z, fma(_959, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _958));
        float _1958 = fma(_960, cbModelParam._m0[23u].z, fma(_959, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _958));
        float _2096;
        if (_1952 > 0.0)
        {
            _2096 = abs((1.0 - _1941) / _1952);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1941 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2096 = frontier_phi_28_24_ladder;
        }
        float _2361;
        if (_1955 > 0.0)
        {
            _2361 = abs((1.0 - _1945) / _1955);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1945 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2361 = frontier_phi_40_35_ladder;
        }
        float _2566;
        if (_1958 > 0.0)
        {
            _2566 = abs((1.0 - _1949) / _1958);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1949 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2566 = frontier_phi_49_46_ladder;
        }
        float _2568 = isnan(_2361) ? _2096 : (isnan(_2096) ? _2361 : min(_2096, _2361));
        float _2569 = isnan(_2566) ? _2568 : (isnan(_2568) ? _2566 : min(_2568, _2566));
        float _2573 = (_2569 * _1952) + _1941;
        float _2574 = (_2569 * _1955) + _1945;
        float _2575 = (_2569 * _1958) + _1949;
        float _2576 = _2569 * 9.9999997473787516355514526367188e-05;
        float _2577 = (-1.0) - _2576;
        float _2579 = _2576 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2575 > _2579) || ((_2575 < _2577) || ((_2574 > _2579) || ((_2574 < _2577) || ((_2573 < _2577) || (_2573 > _2579))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2774 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2575, cbModelParam._m0[17u].z, fma(_2574, cbModelParam._m0[17u].y, _2573 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2575, cbModelParam._m0[18u].z, fma(_2574, cbModelParam._m0[18u].y, _2573 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2575, cbModelParam._m0[19u].z, fma(_2574, cbModelParam._m0[19u].y, _2573 * cbModelParam._m0[19u].x))), _1887);
            frontier_phi_25_49_ladder = _2774.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2774.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2774.x * cbModelParam._m0[1u].z;
        }
        _1977 = frontier_phi_25_49_ladder_2;
        _1979 = frontier_phi_25_49_ladder_1;
        _1981 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1961 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_958, _959, _960), _1887);
        _1977 = _1961.x * cbModelParam._m0[1u].z;
        _1979 = _1961.y * cbModelParam._m0[1u].z;
        _1981 = _1961.z * cbModelParam._m0[1u].z;
    }
    float _1993 = ((((1.0 - _979) * ((_966 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_979 * _966)) * _950;
    float _1994 = _1993 * ((cbModelParam._m0[1u].w * (_1977 - _1878)) + _1878);
    float _1995 = _1993 * ((cbModelParam._m0[1u].w * (_1979 - _1880)) + _1880);
    float _1996 = _1993 * ((cbModelParam._m0[1u].w * (_1981 - _1882)) + _1882);
    float _1999 = fma(_1996, cbSceneParam._m0[89u].z, fma(_1995, cbSceneParam._m0[89u].y, _1994 * cbSceneParam._m0[89u].x));
    float _2002 = fma(_1996, cbSceneParam._m0[90u].z, fma(_1995, cbSceneParam._m0[90u].y, _1994 * cbSceneParam._m0[90u].x));
    float _2005 = fma(_1996, cbSceneParam._m0[91u].z, fma(_1995, cbSceneParam._m0[91u].y, _1994 * cbSceneParam._m0[91u].x));
    uvec4 _2015 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2017 = _2015.x * 14u;
    uint _2018 = _2017 + 13u;
    float _2025 = _950 + (-1.0);
    float _2030 = (cbLight._m0[_2018].x * _2025) + 1.0;
    float _2031 = (cbLight._m0[_2018].y * _2025) + 1.0;
    float _2032 = (cbLight._m0[_2018].z * _2025) + 1.0;
    float _2033 = (cbLight._m0[_2018].w * _2025) + 1.0;
    uint _2034 = _2017 + 5u;
    float _2040 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2044 = _2017 + 4u;
    float _2050 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
    uint _2054 = _2017 | 1u;
    float _2065 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_788, _789, _790));
    float _2068 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_788, _789, _790));
    float _4319 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _4330 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2073 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * 0.3183098733425140380859375;
    float _2075 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * 0.3183098733425140380859375;
    float _2082 = ((cbLight._m0[_2034].x * _2040) * _2075) + ((cbLight._m0[_2044].x * _2050) * _2073);
    float _2083 = ((_2040 * cbLight._m0[_2034].y) * _2075) + ((_2050 * cbLight._m0[_2044].y) * _2073);
    float _2084 = ((_2040 * cbLight._m0[_2034].z) * _2075) + ((_2050 * cbLight._m0[_2044].z) * _2073);
    uvec4 _2088 = floatBitsToUint(cbLight._m0[_2017 + 12u]);
    bool _2090 = _2088.x == 0u;
    float _2101;
    float _2103;
    float _2105;
    if (_2090)
    {
        _2101 = _2082;
        _2103 = _2083;
        _2105 = _2084;
    }
    else
    {
        uint _2109 = _2017 + 6u;
        float _2125 = (dot(vec3(cbLight._m0[_2017 + 2u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2126 = _2125 * _2125;
        float _4341 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2127 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2128 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2101 = (((cbLight._m0[_2109].x * 0.3183098733425140380859375) * _2127) * _2128) + _2082;
        _2103 = (((cbLight._m0[_2109].y * 0.3183098733425140380859375) * _2127) * _2128) + _2083;
        _2105 = (((cbLight._m0[_2109].z * 0.3183098733425140380859375) * _2127) * _2128) + _2084;
    }
    bool _2108 = _2088.y == 0u;
    float _2146;
    float _2148;
    float _2150;
    if (_2108)
    {
        _2146 = _2101;
        _2148 = _2103;
        _2150 = _2105;
    }
    else
    {
        uint _2305 = _2017 + 7u;
        float _2321 = (dot(vec3(cbLight._m0[_2017 + 3u].xyz), vec3(_788, _789, _790)) * 0.5) + 0.5;
        float _2322 = _2321 * _2321;
        float _4357 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2323 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2324 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2146 = (((cbLight._m0[_2305].x * 0.3183098733425140380859375) * _2323) * _2324) + _2101;
        _2148 = (((cbLight._m0[_2305].y * 0.3183098733425140380859375) * _2323) * _2324) + _2103;
        _2150 = (((cbLight._m0[_2305].z * 0.3183098733425140380859375) * _2323) * _2324) + _2105;
    }
    uint _2153 = _2017 + 8u;
    float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _791) * 0.949999988079071044921875);
    float _2167 = _2166 * _2166;
    float _2168 = cbLight._m0[_2017].x + _867;
    float _2169 = cbLight._m0[_2017].y + _868;
    float _2170 = cbLight._m0[_2017].z + _869;
    float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
    float _2175 = _2174 * _2168;
    float _2176 = _2174 * _2169;
    float _2177 = _2174 * _2170;
    float _2178 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2017].xyz));
    float _4373 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _4384 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _2182 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2183 = dot(vec3(_788, _789, _790), vec3(_2175, _2176, _2177));
    float _4395 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2187 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2175, _2176, _2177));
    float _4406 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2191 = _2167 * _2167;
    float _2195 = ((_2186 * _2186) * (_2191 + (-1.0))) + 1.0;
    float _2206 = (exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2207 = 1.0 - _2167;
    float _2218 = (0.5 / (((_2182 * ((_2181 * _2207) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_2182 * _2207) + _2167) * _2181))) * _2181;
    float _4417 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2220 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2191 / ((_2195 * _2195) * 3.141590118408203125));
    uint _2231 = _2017 + 9u;
    float _2242 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2054].w)) * _791) * 0.949999988079071044921875);
    float _2243 = _2242 * _2242;
    float _2244 = cbLight._m0[_2054].x + _867;
    float _2245 = cbLight._m0[_2054].y + _868;
    float _2246 = cbLight._m0[_2054].z + _869;
    float _2250 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
    float _2251 = _2250 * _2244;
    float _2252 = _2250 * _2245;
    float _2253 = _2250 * _2246;
    float _2254 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2054].xyz));
    float _4428 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2258 = dot(vec3(_788, _789, _790), vec3(_2251, _2252, _2253));
    float _4439 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2262 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_2251, _2252, _2253));
    float _4450 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2266 = _2243 * _2243;
    float _2270 = ((_2261 * _2261) * (_2266 + (-1.0))) + 1.0;
    float _2279 = (exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2280 = 1.0 - _2243;
    float _2290 = (0.5 / (((_2182 * ((_2257 * _2280) + _2243)) + 9.9999999392252902907785028219223e-09) + (((_2182 * _2280) + _2243) * _2257))) * _2257;
    float _4461 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2292 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2266 / ((_2270 * _2270) * 3.141590118408203125));
    float _2302 = (((_2279 * cbLight._m0[_2231].x) * _2292) * _2040) + (((_2206 * cbLight._m0[_2153].x) * _2220) * _2050);
    float _2303 = (((_2279 * cbLight._m0[_2231].y) * _2292) * _2040) + (((_2206 * cbLight._m0[_2153].y) * _2220) * _2050);
    float _2304 = (((_2279 * cbLight._m0[_2231].z) * _2292) * _2040) + (((_2206 * cbLight._m0[_2153].z) * _2220) * _2050);
    float _2366;
    float _2368;
    float _2370;
    if (_2090)
    {
        _2366 = _2302;
        _2368 = _2303;
        _2370 = _2304;
    }
    else
    {
        uint _2372 = _2017 + 2u;
        uint _2376 = _2017 + 10u;
        float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _791) * 0.949999988079071044921875);
        float _2391 = _2390 * _2390;
        float _2392 = cbLight._m0[_2372].x + _867;
        float _2393 = cbLight._m0[_2372].y + _868;
        float _2394 = cbLight._m0[_2372].z + _869;
        float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
        float _2399 = _2398 * _2392;
        float _2400 = _2398 * _2393;
        float _2401 = _2398 * _2394;
        float _2402 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2372].xyz));
        float _4472 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2406 = dot(vec3(_788, _789, _790), vec3(_2399, _2400, _2401));
        float _4483 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2410 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2399, _2400, _2401));
        float _4494 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2414 = _2391 * _2391;
        float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
        float _2427 = (exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2428 = 1.0 - _2391;
        float _2438 = (0.5 / (((_2182 * ((_2405 * _2428) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2182 * _2428) + _2391) * _2405))) * _2405;
        float _4505 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2440 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
        float _2441 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2366 = (((_2427 * cbLight._m0[_2376].x) * _2440) * _2441) + _2302;
        _2368 = (((_2427 * cbLight._m0[_2376].y) * _2440) * _2441) + _2303;
        _2370 = (((_2427 * cbLight._m0[_2376].z) * _2440) * _2441) + _2304;
    }
    float _2476;
    float _2478;
    float _2480;
    if (_2108)
    {
        _2476 = _2366;
        _2478 = _2368;
        _2480 = _2370;
    }
    else
    {
        uint _2487 = _2017 + 3u;
        uint _2491 = _2017 + 11u;
        float _2505 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2487].w)) * _791) * 0.949999988079071044921875);
        float _2506 = _2505 * _2505;
        float _2507 = cbLight._m0[_2487].x + _867;
        float _2508 = cbLight._m0[_2487].y + _868;
        float _2509 = cbLight._m0[_2487].z + _869;
        float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
        float _2514 = _2513 * _2507;
        float _2515 = _2513 * _2508;
        float _2516 = _2513 * _2509;
        float _2517 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_2487].xyz));
        float _4521 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2521 = dot(vec3(_788, _789, _790), vec3(_2514, _2515, _2516));
        float _4532 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2524 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2525 = dot(vec3(cbLight._m0[_2487].xyz), vec3(_2514, _2515, _2516));
        float _4543 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2529 = _2506 * _2506;
        float _2533 = ((_2524 * _2524) * (_2529 + (-1.0))) + 1.0;
        float _2542 = (exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2543 = 1.0 - _2506;
        float _2553 = (0.5 / (((_2182 * ((_2520 * _2543) + _2506)) + 9.9999999392252902907785028219223e-09) + (((_2182 * _2543) + _2506) * _2520))) * _2520;
        float _4554 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2555 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2529 / ((_2533 * _2533) * 3.141590118408203125));
        float _2556 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2476 = (((_2542 * cbLight._m0[_2491].x) * _2555) * _2556) + _2366;
        _2478 = (((_2542 * cbLight._m0[_2491].y) * _2555) * _2556) + _2368;
        _2480 = (((_2542 * cbLight._m0[_2491].z) * _2555) * _2556) + _2370;
    }
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    if (_2015.y == 0u)
    {
        float _2631 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2632 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2631;
        float _2633 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2631;
        float _2634 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2631;
        uvec4 _2646 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2647 = _2646.x;
        uint _2658 = uint((float(_2646.y) * floor(float(uint(cbSceneParam._m0[85u].y * _888) / _2647))) + floor(float(uint(cbSceneParam._m0[85u].x * _887) / _2647)));
        float _2668 = (log2(_2634 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2669 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        uint _2672 = uint(isnan(14.0) ? _2669 : (isnan(_2669) ? 14.0 : min(_2669, 14.0)));
        uvec4 _2677 = texelFetch(g_lightClusterGridBuffer, int(((_2672 << 2u) + (_2658 << 6u)) >> 2u));
        uint _2678 = _2677.x;
        uint _2679 = _2646.z;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        if (((((1u << ((_2679 >> 4u) & 15u)) + 4294967295u) & _2678) == 0u) || ((_2679 & 240u) == 0u))
        {
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
        }
        else
        {
            float _2780;
            float _2782;
            float _2784;
            float _2786;
            float _2788;
            float _2790;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            uint _2938 = 0u;
            uint _2947;
            bool _2948;
            for (;;)
            {
                _2947 = texelFetch(g_lightClassification, int((((_2672 << 5u) + (_2658 << 9u)) + (_2938 << 2u)) >> 2u)).x;
                _2948 = _2947 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2948)
                {
                    frontier_phi_66_pred = _2932;
                    frontier_phi_66_pred_1 = _2937;
                    frontier_phi_66_pred_2 = _2936;
                    frontier_phi_66_pred_3 = _2935;
                    frontier_phi_66_pred_4 = _2934;
                    frontier_phi_66_pred_5 = _2933;
                }
                else
                {
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    uint _3083;
                    _3077 = _2932;
                    _3078 = _2933;
                    _3079 = _2934;
                    _3080 = _2935;
                    _3081 = _2936;
                    _3082 = _2937;
                    _3083 = _2947;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    for (;;)
                    {
                        uint _3087 = uint(findLSB(_3083)) + (_2938 << 5u);
                        uint _3084 = (_3083 + 4294967295u) & _3083;
                        uint _3089 = _3087 * 48u;
                        vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3089)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 3u)).x));
                        uint _3109 = (_3087 * 48u) + 4u;
                        vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 3u)).x));
                        uint _3128 = (_3087 * 48u) + 8u;
                        vec3 _3139 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3128)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 2u)).x));
                        float _3143 = _3103.x - _2632;
                        float _3144 = _3103.y - _2633;
                        float _3145 = _3103.z - _2634;
                        float _3146 = dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145));
                        float _3149 = inversesqrt(_3146);
                        float _3150 = _3149 * _3143;
                        float _3151 = _3149 * _3144;
                        float _3152 = _3149 * _3145;
                        float _3153 = dot(vec3(_906, _909, _912), vec3(_3150, _3151, _3152));
                        float _3158 = 1.0 - (_3146 * _3103.w);
                        float _4580 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3159 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3160 = sqrt(_3146) * _3122.w;
                        float _3163 = 1.39999997615814208984375 / (_3160 + 1.39999997615814208984375);
                        float _3164 = _3163 * _3163;
                        float _3167 = ((1.0 - _3164) * _3153) + _3164;
                        float _3170 = _3160 * _3160;
                        float _3174 = ((isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0))) * _3159) / ((_3170 * 0.699999988079071044921875) + 1.0);
                        float _3178 = (-0.0) - _2632;
                        float _3179 = (-0.0) - _2633;
                        float _3180 = (-0.0) - _2634;
                        float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                        float _3185 = _3184 * _3178;
                        float _3186 = _3184 * _3179;
                        float _3187 = _3184 * _3180;
                        float _3195 = exp2(log2(1.0 / ((_3170 * 3.5) + 5.0)) * 0.25);
                        float _3196 = 1.0 - _966;
                        float _3203 = sqrt(1.0 - ((1.0 - (_3196 * _3196)) * (1.0 - (_3195 * _3195))));
                        float _3204 = _3203 * _3203;
                        float _3205 = _3204 * _3204;
                        float _3206 = _3185 + _3150;
                        float _3207 = _3186 + _3151;
                        float _3208 = _3187 + _3152;
                        float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                        float _3216 = dot(vec3(_906, _909, _912), vec3(_3185, _3186, _3187));
                        float _4596 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3219 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3220 = dot(vec3(_906, _909, _912), vec3(_3212 * _3206, _3212 * _3207, _3212 * _3208));
                        float _4607 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3223 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3227 = ((_3223 * _3223) * (_3205 + (-1.0))) + 1.0;
                        float _3228 = _3163 * _3204;
                        float _3229 = _3228 * _3228;
                        float _3232 = ((1.0 - _3229) * _3153) + _3229;
                        float _4618 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3233 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3234 = 1.0 - _3204;
                        float _3244 = (0.5 / (((_3233 * ((_3219 * _3234) + _3204)) + 9.9999999392252902907785028219223e-09) + (((_3233 * _3234) + _3204) * _3219))) * _3233;
                        float _4629 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3255 = (((_3205 * 3.1415927410125732421875) * (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) / ((_3227 * _3227) * ((_3170 * 2.1991131305694580078125) + 3.141590118408203125))) * _3159;
                        _3007 = (_3174 * _3122.x) + _3080;
                        _3008 = (_3174 * _3122.y) + _3081;
                        _3009 = (_3174 * _3122.z) + _3082;
                        _3004 = (_3255 * _3139.x) + _3077;
                        _3005 = (_3255 * _3139.y) + _3078;
                        _3006 = (_3255 * _3139.z) + _3079;
                        if (_3084 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3077 = _3004;
                            _3078 = _3005;
                            _3079 = _3006;
                            _3080 = _3007;
                            _3081 = _3008;
                            _3082 = _3009;
                            _3083 = _3084;
                        }
                    }
                    frontier_phi_66_pred = _3004;
                    frontier_phi_66_pred_1 = _3009;
                    frontier_phi_66_pred_2 = _3008;
                    frontier_phi_66_pred_3 = _3007;
                    frontier_phi_66_pred_4 = _3006;
                    frontier_phi_66_pred_5 = _3005;
                }
                _2780 = frontier_phi_66_pred;
                _2790 = frontier_phi_66_pred_1;
                _2788 = frontier_phi_66_pred_2;
                _2786 = frontier_phi_66_pred_3;
                _2784 = frontier_phi_66_pred_4;
                _2782 = frontier_phi_66_pred_5;
                uint _2939 = _2938 + 1u;
                if (_2939 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2932 = _2780;
                    _2933 = _2782;
                    _2934 = _2784;
                    _2935 = _2786;
                    _2936 = _2788;
                    _2937 = _2790;
                    _2938 = _2939;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
        }
        uvec4 _2793 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2794 = _2793.z;
        uint _2796 = (_2794 >> 8u) & 15u;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        if (((4294967295u << _2796) & _2678) == 0u)
        {
            _2900 = _2779;
            _2902 = _2781;
            _2904 = _2783;
            _2906 = _2785;
            _2908 = _2787;
            _2910 = _2789;
        }
        else
        {
            float _2925 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
            float _2926 = _2925 * _2632;
            float _2927 = _2925 * _2633;
            float _2928 = _2925 * _2634;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2796 < ((_2794 >> 12u) & 15u))
            {
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _3060 = _2779;
                float _3061 = _2781;
                float _3062 = _2783;
                float _3063 = _2785;
                float _3064 = _2787;
                float _3065 = _2789;
                uint _3066 = _2796;
                uint _3075;
                bool _3076;
                for (;;)
                {
                    _3075 = texelFetch(g_lightClassification, int((((_2672 << 5u) + (_2658 << 9u)) + (_3066 << 2u)) >> 2u)).x;
                    _3076 = _3075 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3076)
                    {
                        frontier_phi_77_pred = _3065;
                        frontier_phi_77_pred_1 = _3064;
                        frontier_phi_77_pred_2 = _3063;
                        frontier_phi_77_pred_3 = _3062;
                        frontier_phi_77_pred_4 = _3061;
                        frontier_phi_77_pred_5 = _3060;
                    }
                    else
                    {
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3282 = _3060;
                        float _3283 = _3061;
                        float _3284 = _3062;
                        float _3285 = _3063;
                        float _3286 = _3064;
                        float _3287 = _3065;
                        uint _3288 = _3075;
                        uint _3289;
                        vec4 _3314;
                        float _3315;
                        vec4 _3330;
                        vec3 _3342;
                        vec4 _3357;
                        vec4 _3372;
                        float _3418;
                        bool _3419;
                        for (;;)
                        {
                            uint _3299 = ((_3066 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3288));
                            _3289 = (_3288 + 4294967295u) & _3288;
                            uint _3301 = _3299 * 40u;
                            _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            _3315 = _3314.w;
                            uint _3317 = (_3299 * 40u) + 4u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3332 = (_3299 * 40u) + 8u;
                            _3342 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x));
                            uint _3344 = (_3299 * 40u) + 16u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3359 = (_3299 * 40u) + 20u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3374 = (_3299 * 40u) + 24u;
                            vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3393 = (_3299 * 40u) + 28u;
                            vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            _3418 = fma(_2634, _3406.z, fma(_2633, _3406.y, _3406.x * _2632)) + _3406.w;
                            _3419 = !((fma(_2634, _3387.z, fma(_2633, _3387.y, _3387.x * _2632)) + _3387.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3419)
                            {
                                float _3446 = _3314.x - _2632;
                                float _3447 = _3314.y - _2633;
                                float _3448 = _3314.z - _2634;
                                float _3449 = dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448));
                                float _3452 = inversesqrt(_3449);
                                float _3453 = _3452 * _3446;
                                float _3454 = _3452 * _3447;
                                float _3455 = _3452 * _3448;
                                float _3459 = 1.0 - (_3449 / (_3315 * _3315));
                                float _4640 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3464 = sqrt(_3449) * _3330.w;
                                float _3466 = 1.39999997615814208984375 / (_3464 + 1.39999997615814208984375);
                                float _3467 = _3466 * _3466;
                                float _3470 = ((1.0 - _3467) * dot(vec3(_3453, _3454, _3455), vec3(_906, _909, _912))) + _3467;
                                float _3473 = _3464 * _3464;
                                float _3477 = (fma(_2634, _3357.z, fma(_2633, _3357.y, _3357.x * _2632)) + _3357.w) / _3418;
                                float _3478 = (fma(_2634, _3372.z, fma(_2633, _3372.y, _3372.x * _2632)) + _3372.w) / _3418;
                                float _3482 = 1.0 - dot(vec2(_3477, _3478), vec2(_3477, _3478));
                                float _4656 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3483 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3484 = _3483 * (((isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0))) * _3460) / ((_3473 * 0.699999988079071044921875) + 1.0));
                                float _3496 = exp2(log2(1.0 / ((_3473 * 3.5) + 5.0)) * 0.25);
                                float _3497 = 1.0 - _966;
                                float _3504 = sqrt(1.0 - ((1.0 - (_3497 * _3497)) * (1.0 - (_3496 * _3496))));
                                float _3505 = _3504 * _3504;
                                float _3506 = _3505 * _3505;
                                float _3507 = _3453 - _2926;
                                float _3508 = _3454 - _2927;
                                float _3509 = _3455 - _2928;
                                float _3513 = inversesqrt(dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509)));
                                float _3517 = dot(vec3(_906, _909, _912), vec3((-0.0) - _2926, (-0.0) - _2927, (-0.0) - _2928));
                                float _4667 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3520 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3521 = dot(vec3(_906, _909, _912), vec3(_3513 * _3507, _3513 * _3508, _3513 * _3509));
                                float _4678 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3524 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3528 = ((_3524 * _3524) * (_3506 + (-1.0))) + 1.0;
                                float _3529 = _3466 * _3505;
                                float _3530 = _3529 * _3529;
                                float _3536 = ((1.0 - _3530) * dot(vec3(_906, _909, _912), vec3(_3453, _3454, _3455))) + _3530;
                                float _4689 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3538 = 1.0 - _3505;
                                float _3548 = (0.5 / (((_3537 * ((_3520 * _3538) + _3505)) + 9.9999999392252902907785028219223e-09) + (((_3537 * _3538) + _3505) * _3520))) * _3537;
                                float _4700 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3558 = (_3483 * _3460) * (((_3506 * 3.1415927410125732421875) * (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) / ((_3528 * _3528) * ((_3473 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3484 * _3330.y;
                                frontier_phi_83_pred_1 = _3484 * _3330.x;
                                frontier_phi_83_pred_2 = _3558 * _3342.z;
                                frontier_phi_83_pred_3 = _3558 * _3342.y;
                                frontier_phi_83_pred_4 = _3558 * _3342.x;
                                frontier_phi_83_pred_5 = _3484 * _3330.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3566 = frontier_phi_83_pred;
                            _3565 = frontier_phi_83_pred_1;
                            _3564 = frontier_phi_83_pred_2;
                            _3563 = frontier_phi_83_pred_3;
                            _3562 = frontier_phi_83_pred_4;
                            _3567 = frontier_phi_83_pred_5;
                            _3272 = _3565 + _3285;
                            _3273 = _3566 + _3286;
                            _3274 = _3567 + _3287;
                            _3269 = _3562 + _3282;
                            _3270 = _3563 + _3283;
                            _3271 = _3564 + _3284;
                            if (_3289 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3289;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3274;
                        frontier_phi_77_pred_1 = _3273;
                        frontier_phi_77_pred_2 = _3272;
                        frontier_phi_77_pred_3 = _3271;
                        frontier_phi_77_pred_4 = _3270;
                        frontier_phi_77_pred_5 = _3269;
                    }
                    _2911 = frontier_phi_77_pred;
                    _2909 = frontier_phi_77_pred_1;
                    _2907 = frontier_phi_77_pred_2;
                    _2905 = frontier_phi_77_pred_3;
                    _2903 = frontier_phi_77_pred_4;
                    _2901 = frontier_phi_77_pred_5;
                    uint _3067 = _3066 + 1u;
                    if (_3067 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3060 = _2901;
                        _3061 = _2903;
                        _3062 = _2905;
                        _3063 = _2907;
                        _3064 = _2909;
                        _3065 = _2911;
                        _3066 = _3067;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2905;
                frontier_phi_58_59_ladder_1 = _2911;
                frontier_phi_58_59_ladder_2 = _2909;
                frontier_phi_58_59_ladder_3 = _2907;
                frontier_phi_58_59_ladder_4 = _2903;
                frontier_phi_58_59_ladder_5 = _2901;
            }
            else
            {
                frontier_phi_58_59_ladder = _2783;
                frontier_phi_58_59_ladder_1 = _2789;
                frontier_phi_58_59_ladder_2 = _2787;
                frontier_phi_58_59_ladder_3 = _2785;
                frontier_phi_58_59_ladder_4 = _2781;
                frontier_phi_58_59_ladder_5 = _2779;
            }
            _2900 = frontier_phi_58_59_ladder_5;
            _2902 = frontier_phi_58_59_ladder_4;
            _2904 = frontier_phi_58_59_ladder;
            _2906 = frontier_phi_58_59_ladder_3;
            _2908 = frontier_phi_58_59_ladder_2;
            _2910 = frontier_phi_58_59_ladder_1;
        }
        float _2915 = isnan(1.0) ? _950 : (isnan(_950) ? 1.0 : min(_950, 1.0));
        _2691 = (_2915 * _2906) + _2146;
        _2693 = (_2915 * _2908) + _2148;
        _2695 = (_2915 * _2910) + _2150;
        _2697 = ((_2900 * 0.039999999105930328369140625) * _2915) + _2476;
        _2699 = ((_2902 * 0.039999999105930328369140625) * _2915) + _2478;
        _2701 = ((_2904 * 0.039999999105930328369140625) * _2915) + _2480;
    }
    else
    {
        _2691 = _2146;
        _2693 = _2148;
        _2695 = _2150;
        _2697 = _2476;
        _2699 = _2478;
        _2701 = _2480;
    }
    float _4716 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _4727 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _4738 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _2718 = ((isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2691 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _950))) + ((_2697 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1786)) * cbPerFrame._m0[3u].x);
    float _2719 = ((isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2693 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _950))) + ((_2699 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1786)) * cbPerFrame._m0[3u].x);
    float _2720 = ((isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2695 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _950))) + ((_2701 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1786)) * cbPerFrame._m0[3u].x);
    uint _2721 = _277 + 6u;
    float _2729 = _887 / cbSceneParam._m0[86u].x;
    float _2730 = _888 / cbSceneParam._m0[86u].y;
    vec4 _2744 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2729, _2730, (log2((isnan(cbSceneParam._m0[77u].w) ? _809 : (isnan(_809) ? cbSceneParam._m0[77u].w : min(_809, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2746 = _2744.x;
    float _2747 = _2744.y;
    float _2748 = _2744.z;
    float _2749 = _2744.w;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    if (_809 > cbSceneParam._m0[78u].w)
    {
        float _2804 = isnan(_809) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _809 : min(cbSceneParam._m0[80u].w, _809));
        float _2805 = _2804 / _809;
        float _2816 = _2805 * _860;
        float _2817 = _861 * _2805;
        float _2818 = (-0.0) - _2817;
        float _2820 = _2805 * _862;
        float _2822 = (cbSceneParam._m0[77u].w * _2818) / _2804;
        float _2823 = _2822 + cbSceneParam._m0[79u].w;
        float _2824 = cbSceneParam._m0[79u].w - _2817;
        float _2830 = sqrt(((_2816 * _2816) + (_2817 * _2817)) + (_2820 * _2820));
        float _2833 = (1.0 - (cbSceneParam._m0[77u].w / _2804)) * _2830;
        float _2838 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2840 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3017;
        if (abs((_2818 - _2822) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3017 = ((((_2823 > 0.0) ? exp2(_2838 * _2823) : (2.0 - exp2(_2840 * _2823))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2833;
        }
        else
        {
            float _2961 = 1.0 / cbSceneParam._m0[80u].x;
            float _2962 = isnan(_2824) ? _2823 : (isnan(_2823) ? _2824 : max(_2823, _2824));
            float _2963 = isnan(_2824) ? _2823 : (isnan(_2823) ? _2824 : min(_2823, _2824));
            float _2972 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : min(_2962, 0.0));
            float _2973 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : min(_2963, 0.0));
            _3017 = ((abs(_2830 / _2818) * cbSceneParam._m0[80u].y) * ((((_2972 - _2973) * 2.0) - ((exp2(_2838 * (isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0)))) - exp2(_2838 * (isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0))))) * _2961)) - ((exp2(_2840 * _2972) - exp2(_2840 * _2973)) * _2961))) + (_2833 * cbSceneParam._m0[80u].z);
        }
        vec4 _3019 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2729, _2730, 1.0), 0.0);
        float _3028 = exp2((_3017 * (-1.44269502162933349609375)) * (1.0 - _3019.w));
        float _3029 = log2(_3028);
        float _3045 = log2(_2749);
        _2842 = (exp2(_3045 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].x)) * _3019.x) / cbSceneParam._m0[78u].x)) + _2746;
        _2844 = (exp2(_3045 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].y)) * _3019.y) / cbSceneParam._m0[78u].y)) + _2747;
        _2846 = (exp2(_3045 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].z)) * _3019.z) / cbSceneParam._m0[78u].z)) + _2748;
        _2848 = _3028 * _2749;
    }
    else
    {
        _2842 = _2746;
        _2844 = _2747;
        _2846 = _2748;
        _2848 = _2749;
    }
    bool _3055;
    vec4 _2858;
    vec4 _2880;
    float _2882;
    float _2886;
    float _2887;
    float _2888;
    float _2889;
    bool _2899;
    for (;;)
    {
        _2858 = cbMatDynParam._m0[0u];
        float _2860 = roundEven(_2858.y);
        bool _2861 = _2860 == 3.0;
        float _2862 = log2(_2848);
        float _2869 = exp2(_2862 * cbSceneParam._m0[78u].x) * _2718;
        float _2870 = exp2(_2862 * cbSceneParam._m0[78u].y) * _2719;
        float _2871 = exp2(_2862 * cbSceneParam._m0[78u].z) * _2720;
        float _2878 = _876 + (-0.5);
        _2880 = cbMtdParam._m0[1u];
        _2882 = _2880.y * _2878;
        float _2885 = (_2860 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2886 = _2885 * (_2861 ? _2869 : (_2869 + (cbSceneParam._m0[72u].w * _2842)));
        _2887 = _2885 * (_2861 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2844)));
        _2888 = _2885 * (_2861 ? _2871 : (_2871 + (cbSceneParam._m0[72u].w * _2846)));
        _2889 = _2878 * 0.999000012874603271484375;
        _2899 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2899)
        {
            if ((cbInstanceData._m0[_277 + 7u].x + _2889) < 0.5)
            {
                _3055 = true;
                break;
            }
        }
        uint _2996 = _925 + uint(_2858.w);
        if ((cbInstanceData._m0[_2996].w < 1.0) && ((cbInstanceData._m0[_2996].w + _2889) < 0.5))
        {
            _3055 = true;
            break;
        }
        if ((_2882 + 1.0) < _2880.x)
        {
            _3055 = true;
            break;
        }
        _3055 = false;
        break;
    }
    float _3260;
    if (_3055)
    {
        discard_state = true;
        _3260 = 0.0;
    }
    else
    {
        _3260 = cbInstanceData._m0[_2721].w;
    }
    SV_Target.x = _2886;
    SV_Target.y = _2887;
    SV_Target.z = _2888;
    SV_Target.w = _3260;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2721].w;
    discard_exit();
}


