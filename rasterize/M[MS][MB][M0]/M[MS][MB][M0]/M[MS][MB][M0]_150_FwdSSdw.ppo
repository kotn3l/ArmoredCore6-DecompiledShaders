#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1357;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _237 = _236 * _228;
    float _238 = _236 * _229;
    float _239 = _236 * _230;
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = _250 * TANGENT.x;
    float _252 = _250 * TANGENT.y;
    float _253 = _250 * TANGENT.z;
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3684 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3695 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3706 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _406 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _423 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_396 - _406) * cbMtdParam._m0[24u].x) + _406) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3717 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _431 = (_424 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _432 = (_424 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _433 = (_424 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    float _437 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _431;
    float _440 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _432;
    float _443 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _433;
    float _450 = ((_431 - _437) * (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) + _437;
    float _451 = ((_432 - _440) * (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) + _440;
    float _452 = ((_433 - _443) * (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) + _443;
    vec4 _471 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _294) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _295) + cbTextureTilingScale._m0[14u].w));
    vec4 _491 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _518 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _535 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _537 = _535.x;
    float _538 = _535.y;
    float _539 = _535.z;
    float _548 = ((_518.z - _539) * _424) + _539;
    float _551 = ((((_518.x - _537) * _424) + _537) * 2.0) + (-1.0);
    float _552 = ((((_518.y - _538) * _424) + _538) * 2.0) + (-1.0);
    float _553 = dot(vec2(_551, _552), vec2(_551, _552));
    float _3728 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _558 = sqrt(1.0 - (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))));
    vec4 _578 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _590 = (_551 + ((((_491.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_578.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _591 = (_552 + ((((_491.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_578.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _594 = fma(_558, _244, fma(_591, _251, _590 * _237));
    float _597 = fma(_558, _245, fma(_591, _252, _590 * _238));
    float _600 = fma(_558, _246, fma(_591, _253, _590 * _239));
    float _604 = inversesqrt(dot(vec3(_594, _597, _600), vec3(_594, _597, _600)));
    vec4 _633 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _294) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _295) + cbTextureTilingScale._m0[11u].w));
    float _635 = _633.x;
    float _636 = 1.0 - _635;
    float _642 = (cbMtdParam._m0[19u].x + dot(vec4(_604 * _594, _604 * _597, _604 * _600, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_635 - _636) * cbMtdParam._m0[24u].z) + _636) * cbMtdParam._m0[21u].z);
    float _3739 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _643 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _645 = (-0.0) - cbMtdParam._m0[24u].y;
    float _647 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _647 : (isnan(_647) ? 1.0 : min(_647, 1.0));
    float _655 = _643 - ((_643 * TEXCOORD_8.x) * _648);
    float _656 = _643 - ((_643 * TEXCOORD_8.y) * _648);
    float _657 = _643 - ((_643 * TEXCOORD_8.z) * _648);
    float _664 = (_655 * ((_471.x * cbMtdParam._m0[18u].x) - _450)) + _450;
    float _665 = (_656 * ((_471.y * cbMtdParam._m0[18u].y) - _451)) + _451;
    float _666 = (_657 * ((_471.z * cbMtdParam._m0[18u].z) - _452)) + _452;
    vec4 _678 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _680 = _678.x;
    float _681 = 1.0 - _680;
    float _707 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_680 - _681) * cbMtdParam._m0[24u].w) + _681) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3760 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _708 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _716 = ((((cbMtdParam._m0[10u].x - _664) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _708) + _664;
    float _717 = ((((cbMtdParam._m0[10u].y - _665) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _708) + _665;
    float _718 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _666)) * _708) + _666;
    float _723 = (((_491.z - _548) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _548;
    float _727 = ((_578.z - _723) * cbMtdParam._m0[19u].w) + _723;
    vec4 _741 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _294) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _295) + cbTextureTilingScale._m0[15u].w));
    float _748 = (_741.x * 2.0) + (-1.0);
    float _749 = (_741.y * 2.0) + (-1.0);
    float _750 = dot(vec2(_748, _749), vec2(_748, _749));
    float _3771 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _758 = ((_741.z - _727) * _655) + _727;
    float _761 = ((cbMtdParam._m0[23u].y - _758) * _708) + _758;
    vec4 _780 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _786 = (_780.x * 2.0) + (-1.0);
    float _787 = (_780.y * 2.0) + (-1.0);
    float _788 = dot(vec2(_786, _787), vec2(_786, _787));
    float _3782 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _803 = ((sqrt(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) - _558) * _657) + _558;
    float _806 = (((_748 - _590) * _655) + _590) + (cbMtdParam._m0[21u].x * _590);
    float _807 = (((_749 - _591) * _656) + _591) + (cbMtdParam._m0[21u].x * _591);
    float _818 = (((_786 - _806) + (_806 * cbMtdParam._m0[22u].z)) * _708) + _806;
    float _819 = (((_787 - _807) + (_807 * cbMtdParam._m0[22u].z)) * _708) + _807;
    float _820 = (_708 * (sqrt(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) - _803)) + _803;
    float _822 = cbMtdParam._m0[22u].x + _578.w;
    float _825 = fma(_820, _244, fma(_819, _251, _818 * _237));
    float _828 = fma(_820, _245, fma(_819, _252, _818 * _238));
    float _831 = fma(_820, _246, fma(_819, _253, _818 * _239));
    float _835 = inversesqrt(dot(vec3(_825, _828, _831), vec3(_825, _828, _831)));
    float _836 = _835 * _825;
    float _837 = _835 * _828;
    float _838 = _835 * _831;
    float _3793 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _839 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _3804 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _3815 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _3826 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _3837 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _857 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _908 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _898);
    float _909 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _898);
    float _910 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _898);
    float _914 = inversesqrt(dot(vec3(_908, _909, _910), vec3(_908, _909, _910)));
    float _915 = _908 * _914;
    float _916 = _909 * _914;
    float _917 = _910 * _914;
    float _923 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _924 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _942 = fma(_838, cbSceneParam._m0[5u].z, fma(_837, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _836));
    float _945 = fma(_838, cbSceneParam._m0[6u].z, fma(_837, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _836));
    float _948 = fma(_838, cbSceneParam._m0[7u].z, fma(_837, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _836));
    uint _962 = (_275 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _968 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * cbInstanceData._m0[_962].x;
    float _969 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * cbInstanceData._m0[_962].y;
    float _970 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * cbInstanceData._m0[_962].z;
    float _3848 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _972 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _973 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    vec4 _982 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _923, cbSceneParam._m0[86u].y * _924));
    float _986 = ((isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * TEXCOORD_5.w) * _982.x;
    float _987 = dot(vec3(_836, _837, _838), vec3(_915, _916, _917));
    float _990 = _987 * 2.0;
    float _994 = (_990 * _836) - _915;
    float _995 = (_990 * _837) - _916;
    float _996 = (_990 * _838) - _917;
    float _1000 = abs(dot(vec3(_915, _916, _917), vec3(_836, _837, _838)));
    float _3881 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1002 = sqrt(_839);
    float _1015 = exp2((_1002 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1002 * 3.0));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1356;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1081 = fma(_1055, cbModelParam._m0[26u].z, fma(_1051, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047));
        float _1085 = fma(_1055, cbModelParam._m0[27u].z, fma(_1051, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047));
        float _1089 = fma(_1055, cbModelParam._m0[28u].z, fma(_1051, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047));
        float _1114 = _1047 + _836;
        float _1115 = _1051 + _837;
        float _1116 = _1055 + _838;
        float _1126 = fma(_1116, cbModelParam._m0[26u].z, fma(_1115, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1114)) - _1081;
        float _1127 = fma(_1116, cbModelParam._m0[27u].z, fma(_1115, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1114)) - _1085;
        float _1128 = fma(_1116, cbModelParam._m0[28u].z, fma(_1115, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1114)) - _1089;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1081 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1085 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[34u].z) + ((((((_1089 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1184 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1150.x + (-0.5));
        float _1186 = _1184 * (_1150.y + (-0.5));
        float _1187 = _1184 * (_1150.z + (-0.5));
        float _1194 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1157.x + (-0.5));
        float _1196 = _1194 * (_1157.y + (-0.5));
        float _1197 = _1194 * (_1157.z + (-0.5));
        float _1204 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1164.x + (-0.5));
        float _1206 = _1204 * (_1164.y + (-0.5));
        float _1207 = _1204 * (_1164.z + (-0.5));
        float _1214 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1171.x + (-0.5));
        float _1216 = _1214 * (_1171.y + (-0.5));
        float _1217 = _1214 * (_1171.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1238 = (dot(vec3(_836, _837, _838), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1248 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3929 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1250 + 1.0))) + _1255) * _1218;
        float _1265 = _1186 * 0.5;
        float _1266 = _1196 * 0.5;
        float _1267 = _1206 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_836, _837, _838), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3962 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1292 + 1.0))) + _1297) * _1219;
        float _1307 = _1187 * 0.5;
        float _1308 = _1197 * 0.5;
        float _1309 = _1207 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_836, _837, _838), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3995 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1334 + 1.0))) + _1339) * _1220;
        _1356 = _1187;
        _1358 = _1186;
        _1359 = _1185;
        _1360 = _1197;
        _1361 = _1196;
        _1362 = _1195;
        _1363 = _1207;
        _1364 = _1206;
        _1365 = _1205;
        _1366 = _1220;
        _1367 = _1219;
        _1368 = _1218;
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1357;
        _1358 = _1357;
        _1359 = _1357;
        _1360 = _1357;
        _1361 = _1357;
        _1362 = _1357;
        _1363 = _1357;
        _1364 = _1357;
        _1365 = _1357;
        _1366 = _1357;
        _1367 = _1357;
        _1368 = _1357;
        _1369 = 0.0;
        _1370 = 0.0;
        _1371 = 0.0;
    }
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1396 = fma(_1055, cbModelParam._m0[30u].z, fma(_1051, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1047));
        float _1400 = fma(_1055, cbModelParam._m0[31u].z, fma(_1051, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1047));
        float _1404 = fma(_1055, cbModelParam._m0[32u].z, fma(_1051, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1047));
        float _1427 = _1047 + _836;
        float _1428 = _1051 + _837;
        float _1429 = _1055 + _838;
        float _1439 = fma(_1429, cbModelParam._m0[30u].z, fma(_1428, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1427)) - _1396;
        float _1440 = fma(_1429, cbModelParam._m0[31u].z, fma(_1428, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1427)) - _1400;
        float _1441 = fma(_1429, cbModelParam._m0[32u].z, fma(_1428, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1427)) - _1404;
        float _1445 = inversesqrt(dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441)));
        float _1458 = ((_1445 * _1439) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1396 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1459 = ((_1445 * _1440) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1400 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1460 = ((_1445 * _1441) / cbModelParam._m0[35u].z) + ((((((_1404 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        float _1495 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1462.x + (-0.5));
        float _1497 = _1495 * (_1462.y + (-0.5));
        float _1498 = _1495 * (_1462.z + (-0.5));
        float _1505 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1469.x + (-0.5));
        float _1507 = _1505 * (_1469.y + (-0.5));
        float _1508 = _1505 * (_1469.z + (-0.5));
        float _1515 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1476.x + (-0.5));
        float _1517 = _1515 * (_1476.y + (-0.5));
        float _1518 = _1515 * (_1476.z + (-0.5));
        float _1525 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1483.x + (-0.5));
        float _1527 = _1525 * (_1483.y + (-0.5));
        float _1528 = _1525 * (_1483.z + (-0.5));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = _1496 * 0.5;
        float _1533 = _1506 * 0.5;
        float _1534 = _1516 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_836, _837, _838), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4058 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1559 + 1.0))) + _1564) * _1529;
        float _1574 = _1497 * 0.5;
        float _1575 = _1507 * 0.5;
        float _1576 = _1517 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_836, _837, _838), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4091 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1601 + 1.0))) + _1606) * _1530;
        float _1616 = _1498 * 0.5;
        float _1617 = _1508 * 0.5;
        float _1618 = _1518 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1632 = (dot(vec3(_836, _837, _838), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1641 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4124 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1643 + 1.0))) + _1648) * _1531;
        _1665 = _1498;
        _1666 = _1497;
        _1667 = _1496;
        _1668 = _1508;
        _1669 = _1507;
        _1670 = _1506;
        _1671 = _1518;
        _1672 = _1517;
        _1673 = _1516;
        _1674 = _1531;
        _1675 = _1530;
        _1676 = _1529;
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
    }
    else
    {
        _1665 = _1357;
        _1666 = _1357;
        _1667 = _1357;
        _1668 = _1357;
        _1669 = _1357;
        _1670 = _1357;
        _1671 = _1357;
        _1672 = _1357;
        _1673 = _1357;
        _1674 = _1357;
        _1675 = _1357;
        _1676 = _1357;
        _1677 = 0.0;
        _1678 = 0.0;
        _1679 = 0.0;
    }
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1369)) + _1369;
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1370)) + _1370;
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1371)) + _1371;
    float _1712 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1715 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1718 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1689));
    float _1733 = _994 * 0.5;
    float _1734 = _995 * 0.5;
    float _1735 = _996 * 0.5;
    float _1736 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1739 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1742 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1776;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1749 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1356, _1360, _1363, _1366));
        float _1753 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1358, _1361, _1364, _1367));
        float _1757 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1359, _1362, _1365, _1368));
        float _1764 = dot(vec4(cbModelParam._m0[39u]), vec4(_1733, _1734, _1735, 1.0));
        _1776 = dot(vec3(isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1764) ? 0.0 : (isnan(0.0) ? _1764 : max(0.0, _1764))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1776 = 1.0;
    }
    float _1787;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1778 = dot(vec4(cbModelParam._m0[40u]), vec4(_1733, _1734, _1735, 1.0));
        _1787 = dot(vec3(isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1778) ? 0.0 : (isnan(0.0) ? _1778 : max(0.0, _1778))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1787 = 1.0;
    }
    float _1791 = (_1787 * cbModelParam._m0[1u].x) + (_1776 * (1.0 - cbModelParam._m0[1u].x));
    float _1801 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _839);
    float _1802 = isnan(_1801) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1801 : min(cbModelParam._m0[25u].z, _1801));
    float _1882;
    float _1884;
    float _1886;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1849 = fma(_1055, cbModelParam._m0[13u].z, fma(_1051, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1047)) + cbModelParam._m0[13u].w;
        float _1853 = fma(_1055, cbModelParam._m0[14u].z, fma(_1051, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1047)) + cbModelParam._m0[14u].w;
        float _1857 = fma(_1055, cbModelParam._m0[15u].z, fma(_1051, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1047)) + cbModelParam._m0[15u].w;
        float _1860 = fma(_996, cbModelParam._m0[13u].z, fma(_995, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _994));
        float _1863 = fma(_996, cbModelParam._m0[14u].z, fma(_995, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _994));
        float _1866 = fma(_996, cbModelParam._m0[15u].z, fma(_995, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _994));
        float _1894;
        if (_1860 > 0.0)
        {
            _1894 = abs((1.0 - _1849) / _1860);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1849 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1894 = frontier_phi_14_12_ladder;
        }
        float _2115;
        if (_1863 > 0.0)
        {
            _2115 = abs((1.0 - _1853) / _1863);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1853 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2115 = frontier_phi_23_19_ladder;
        }
        float _2361;
        if (_1866 > 0.0)
        {
            _2361 = abs((1.0 - _1857) / _1866);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1857 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2361 = frontier_phi_35_30_ladder;
        }
        float _2363 = isnan(_2115) ? _1894 : (isnan(_1894) ? _2115 : min(_1894, _2115));
        float _2364 = isnan(_2361) ? _2363 : (isnan(_2363) ? _2361 : min(_2363, _2361));
        float _2368 = (_2364 * _1860) + _1849;
        float _2369 = (_2364 * _1863) + _1853;
        float _2370 = (_2364 * _1866) + _1857;
        float _2371 = _2364 * 9.9999997473787516355514526367188e-05;
        float _2373 = (-1.0) - _2371;
        float _2375 = _2371 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2370 > _2375) || ((_2370 < _2373) || ((_2369 > _2375) || ((_2369 < _2373) || ((_2368 < _2373) || (_2368 > _2375))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2494 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2370, cbModelParam._m0[9u].z, fma(_2369, cbModelParam._m0[9u].y, _2368 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2370, cbModelParam._m0[10u].z, fma(_2369, cbModelParam._m0[10u].y, _2368 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2370, cbModelParam._m0[11u].z, fma(_2369, cbModelParam._m0[11u].y, _2368 * cbModelParam._m0[11u].x))), _1802);
            frontier_phi_13_35_ladder = _2494.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2494.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2494.x * cbModelParam._m0[1u].y;
        }
        _1882 = frontier_phi_13_35_ladder_2;
        _1884 = frontier_phi_13_35_ladder_1;
        _1886 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1870 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_994, _995, _996), _1802);
        _1882 = _1870.x * cbModelParam._m0[1u].y;
        _1884 = _1870.y * cbModelParam._m0[1u].y;
        _1886 = _1870.z * cbModelParam._m0[1u].y;
    }
    float _1890 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _839);
    float _1891 = isnan(_1890) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1890 : min(cbModelParam._m0[25u].w, _1890));
    float _1980;
    float _1982;
    float _1984;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1944 = fma(_1055, cbModelParam._m0[21u].z, fma(_1051, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1047)) + cbModelParam._m0[21u].w;
        float _1948 = fma(_1055, cbModelParam._m0[22u].z, fma(_1051, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1047)) + cbModelParam._m0[22u].w;
        float _1952 = fma(_1055, cbModelParam._m0[23u].z, fma(_1051, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1047)) + cbModelParam._m0[23u].w;
        float _1955 = fma(_996, cbModelParam._m0[21u].z, fma(_995, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _994));
        float _1958 = fma(_996, cbModelParam._m0[22u].z, fma(_995, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _994));
        float _1961 = fma(_996, cbModelParam._m0[23u].z, fma(_995, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _994));
        float _2120;
        if (_1955 > 0.0)
        {
            _2120 = abs((1.0 - _1944) / _1955);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1944 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2120 = frontier_phi_25_21_ladder;
        }
        float _2388;
        if (_1958 > 0.0)
        {
            _2388 = abs((1.0 - _1948) / _1958);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1948 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2388 = frontier_phi_37_32_ladder;
        }
        float _2593;
        if (_1961 > 0.0)
        {
            _2593 = abs((1.0 - _1952) / _1961);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1952 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2593 = frontier_phi_46_43_ladder;
        }
        float _2595 = isnan(_2388) ? _2120 : (isnan(_2120) ? _2388 : min(_2120, _2388));
        float _2596 = isnan(_2593) ? _2595 : (isnan(_2595) ? _2593 : min(_2595, _2593));
        float _2600 = (_2596 * _1955) + _1944;
        float _2601 = (_2596 * _1958) + _1948;
        float _2602 = (_2596 * _1961) + _1952;
        float _2603 = _2596 * 9.9999997473787516355514526367188e-05;
        float _2604 = (-1.0) - _2603;
        float _2606 = _2603 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2602 > _2606) || ((_2602 < _2604) || ((_2601 > _2606) || ((_2601 < _2604) || ((_2600 < _2604) || (_2600 > _2606))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2801 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2602, cbModelParam._m0[17u].z, fma(_2601, cbModelParam._m0[17u].y, _2600 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2602, cbModelParam._m0[18u].z, fma(_2601, cbModelParam._m0[18u].y, _2600 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2602, cbModelParam._m0[19u].z, fma(_2601, cbModelParam._m0[19u].y, _2600 * cbModelParam._m0[19u].x))), _1891);
            frontier_phi_22_46_ladder = _2801.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2801.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2801.x * cbModelParam._m0[1u].z;
        }
        _1980 = frontier_phi_22_46_ladder_2;
        _1982 = frontier_phi_22_46_ladder_1;
        _1984 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1964 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_994, _995, _996), _1891);
        _1980 = _1964.x * cbModelParam._m0[1u].z;
        _1982 = _1964.y * cbModelParam._m0[1u].z;
        _1984 = _1964.z * cbModelParam._m0[1u].z;
    }
    float _1996 = ((((1.0 - _1015) * ((_1002 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1015 * _1002)) * _986;
    float _1997 = _1996 * ((cbModelParam._m0[1u].w * (_1980 - _1882)) + _1882);
    float _1998 = _1996 * ((cbModelParam._m0[1u].w * (_1982 - _1884)) + _1884);
    float _1999 = _1996 * ((cbModelParam._m0[1u].w * (_1984 - _1886)) + _1886);
    float _2002 = fma(_1999, cbSceneParam._m0[89u].z, fma(_1998, cbSceneParam._m0[89u].y, _1997 * cbSceneParam._m0[89u].x));
    float _2005 = fma(_1999, cbSceneParam._m0[90u].z, fma(_1998, cbSceneParam._m0[90u].y, _1997 * cbSceneParam._m0[90u].x));
    float _2008 = fma(_1999, cbSceneParam._m0[91u].z, fma(_1998, cbSceneParam._m0[91u].y, _1997 * cbSceneParam._m0[91u].x));
    vec4 _2016 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_923, _924));
    float _2018 = _2016.w;
    float _2030 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2018);
    float _2031 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2018);
    float _2032 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2018);
    uvec4 _2036 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2038 = _2036.x * 14u;
    uint _2039 = _2038 + 13u;
    float _2046 = _986 + (-1.0);
    float _2051 = (cbLight._m0[_2039].x * _2046) + 1.0;
    float _2052 = (cbLight._m0[_2039].y * _2046) + 1.0;
    float _2053 = (cbLight._m0[_2039].z * _2046) + 1.0;
    float _2054 = (cbLight._m0[_2039].w * _2046) + 1.0;
    uint _2055 = _2038 + 5u;
    float _2061 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
    uint _2065 = _2038 + 4u;
    float _2074 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
    uint _2078 = _2038 | 1u;
    float _2089 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_836, _837, _838));
    float _2092 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_836, _837, _838));
    float _4260 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _4271 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2097 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * 0.3183098733425140380859375;
    float _2099 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * 0.3183098733425140380859375;
    float _2106 = ((cbLight._m0[_2055].x * _2061) * _2099) + (((cbLight._m0[_2065].x * _2030) * _2074) * _2097);
    float _2107 = ((_2061 * cbLight._m0[_2055].y) * _2099) + (((cbLight._m0[_2065].y * _2031) * _2074) * _2097);
    float _2108 = ((_2061 * cbLight._m0[_2055].z) * _2099) + (((cbLight._m0[_2065].z * _2032) * _2074) * _2097);
    uvec4 _2112 = floatBitsToUint(cbLight._m0[_2038 + 12u]);
    bool _2114 = _2112.x == 0u;
    float _2125;
    float _2127;
    float _2129;
    if (_2114)
    {
        _2125 = _2106;
        _2127 = _2107;
        _2129 = _2108;
    }
    else
    {
        uint _2133 = _2038 + 6u;
        float _2149 = (dot(vec3(cbLight._m0[_2038 + 2u].xyz), vec3(_836, _837, _838)) * 0.5) + 0.5;
        float _2150 = _2149 * _2149;
        float _4282 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2151 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2152 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2125 = (((cbLight._m0[_2133].x * 0.3183098733425140380859375) * _2151) * _2152) + _2106;
        _2127 = (((cbLight._m0[_2133].y * 0.3183098733425140380859375) * _2151) * _2152) + _2107;
        _2129 = (((cbLight._m0[_2133].z * 0.3183098733425140380859375) * _2151) * _2152) + _2108;
    }
    bool _2132 = _2112.y == 0u;
    float _2170;
    float _2172;
    float _2174;
    if (_2132)
    {
        _2170 = _2125;
        _2172 = _2127;
        _2174 = _2129;
    }
    else
    {
        uint _2332 = _2038 + 7u;
        float _2348 = (dot(vec3(cbLight._m0[_2038 + 3u].xyz), vec3(_836, _837, _838)) * 0.5) + 0.5;
        float _2349 = _2348 * _2348;
        float _4298 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2350 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2351 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2170 = (((cbLight._m0[_2332].x * 0.3183098733425140380859375) * _2350) * _2351) + _2125;
        _2172 = (((cbLight._m0[_2332].y * 0.3183098733425140380859375) * _2350) * _2351) + _2127;
        _2174 = (((cbLight._m0[_2332].z * 0.3183098733425140380859375) * _2350) * _2351) + _2129;
    }
    uint _2177 = _2038 + 8u;
    float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2038].w)) * _839) * 0.949999988079071044921875);
    float _2191 = _2190 * _2190;
    float _2192 = cbLight._m0[_2038].x + _915;
    float _2193 = cbLight._m0[_2038].y + _916;
    float _2194 = cbLight._m0[_2038].z + _917;
    float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
    float _2199 = _2198 * _2192;
    float _2200 = _2198 * _2193;
    float _2201 = _2198 * _2194;
    float _2202 = dot(vec3(_836, _837, _838), vec3(cbLight._m0[_2038].xyz));
    float _4314 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _4325 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _2206 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _2207 = dot(vec3(_836, _837, _838), vec3(_2199, _2200, _2201));
    float _4336 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2211 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2199, _2200, _2201));
    float _4347 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2215 = _2191 * _2191;
    float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
    float _2230 = (exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2231 = 1.0 - _2191;
    float _2242 = (0.5 / (((_2206 * ((_2205 * _2231) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2231) + _2191) * _2205))) * _2205;
    float _4358 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
    uint _2258 = _2038 + 9u;
    float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2078].w)) * _839) * 0.949999988079071044921875);
    float _2270 = _2269 * _2269;
    float _2271 = cbLight._m0[_2078].x + _915;
    float _2272 = cbLight._m0[_2078].y + _916;
    float _2273 = cbLight._m0[_2078].z + _917;
    float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
    float _2278 = _2277 * _2271;
    float _2279 = _2277 * _2272;
    float _2280 = _2277 * _2273;
    float _2281 = dot(vec3(_836, _837, _838), vec3(cbLight._m0[_2078].xyz));
    float _4369 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2285 = dot(vec3(_836, _837, _838), vec3(_2278, _2279, _2280));
    float _4380 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2289 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_2278, _2279, _2280));
    float _4391 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2293 = _2270 * _2270;
    float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
    float _2306 = (exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2307 = 1.0 - _2270;
    float _2317 = (0.5 / (((_2206 * ((_2284 * _2307) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2307) + _2270) * _2284))) * _2284;
    float _4402 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
    float _2329 = (((_2306 * cbLight._m0[_2258].x) * _2319) * _2061) + ((((cbLight._m0[_2177].x * _2030) * _2230) * _2244) * _2074);
    float _2330 = (((_2306 * cbLight._m0[_2258].y) * _2319) * _2061) + ((((cbLight._m0[_2177].y * _2031) * _2230) * _2244) * _2074);
    float _2331 = (((_2306 * cbLight._m0[_2258].z) * _2319) * _2061) + ((((cbLight._m0[_2177].z * _2032) * _2230) * _2244) * _2074);
    float _2393;
    float _2395;
    float _2397;
    if (_2114)
    {
        _2393 = _2329;
        _2395 = _2330;
        _2397 = _2331;
    }
    else
    {
        uint _2399 = _2038 + 2u;
        uint _2403 = _2038 + 10u;
        float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2399].w)) * _839) * 0.949999988079071044921875);
        float _2418 = _2417 * _2417;
        float _2419 = cbLight._m0[_2399].x + _915;
        float _2420 = cbLight._m0[_2399].y + _916;
        float _2421 = cbLight._m0[_2399].z + _917;
        float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
        float _2426 = _2425 * _2419;
        float _2427 = _2425 * _2420;
        float _2428 = _2425 * _2421;
        float _2429 = dot(vec3(_836, _837, _838), vec3(cbLight._m0[_2399].xyz));
        float _4413 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2432 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2433 = dot(vec3(_836, _837, _838), vec3(_2426, _2427, _2428));
        float _4424 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2437 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_2426, _2427, _2428));
        float _4435 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2441 = _2418 * _2418;
        float _2445 = ((_2436 * _2436) * (_2441 + (-1.0))) + 1.0;
        float _2454 = (exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2455 = 1.0 - _2418;
        float _2465 = (0.5 / (((_2206 * ((_2432 * _2455) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2455) + _2418) * _2432))) * _2432;
        float _4446 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2467 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2441 / ((_2445 * _2445) * 3.141590118408203125));
        float _2468 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2393 = (((_2454 * cbLight._m0[_2403].x) * _2467) * _2468) + _2329;
        _2395 = (((_2454 * cbLight._m0[_2403].y) * _2467) * _2468) + _2330;
        _2397 = (((_2454 * cbLight._m0[_2403].z) * _2467) * _2468) + _2331;
    }
    float _2503;
    float _2505;
    float _2507;
    if (_2132)
    {
        _2503 = _2393;
        _2505 = _2395;
        _2507 = _2397;
    }
    else
    {
        uint _2514 = _2038 + 3u;
        uint _2518 = _2038 + 11u;
        float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2514].w)) * _839) * 0.949999988079071044921875);
        float _2533 = _2532 * _2532;
        float _2534 = cbLight._m0[_2514].x + _915;
        float _2535 = cbLight._m0[_2514].y + _916;
        float _2536 = cbLight._m0[_2514].z + _917;
        float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
        float _2541 = _2540 * _2534;
        float _2542 = _2540 * _2535;
        float _2543 = _2540 * _2536;
        float _2544 = dot(vec3(_836, _837, _838), vec3(cbLight._m0[_2514].xyz));
        float _4462 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2548 = dot(vec3(_836, _837, _838), vec3(_2541, _2542, _2543));
        float _4473 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2552 = dot(vec3(cbLight._m0[_2514].xyz), vec3(_2541, _2542, _2543));
        float _4484 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2556 = _2533 * _2533;
        float _2560 = ((_2551 * _2551) * (_2556 + (-1.0))) + 1.0;
        float _2569 = (exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2570 = 1.0 - _2533;
        float _2580 = (0.5 / (((_2206 * ((_2547 * _2570) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2570) + _2533) * _2547))) * _2547;
        float _4495 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2582 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2556 / ((_2560 * _2560) * 3.141590118408203125));
        float _2583 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2503 = (((_2569 * cbLight._m0[_2518].x) * _2582) * _2583) + _2393;
        _2505 = (((_2569 * cbLight._m0[_2518].y) * _2582) * _2583) + _2395;
        _2507 = (((_2569 * cbLight._m0[_2518].z) * _2582) * _2583) + _2397;
    }
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    if (_2036.y == 0u)
    {
        float _2658 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2658;
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2658;
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2658;
        uvec4 _2673 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2674 = _2673.x;
        uint _2685 = uint((float(_2673.y) * floor(float(uint(cbSceneParam._m0[85u].y * _924) / _2674))) + floor(float(uint(cbSceneParam._m0[85u].x * _923) / _2674)));
        float _2695 = (log2(_2661 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2696 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        uint _2699 = uint(isnan(14.0) ? _2696 : (isnan(_2696) ? 14.0 : min(_2696, 14.0)));
        uvec4 _2704 = texelFetch(g_lightClusterGridBuffer, int(((_2699 << 2u) + (_2685 << 6u)) >> 2u));
        uint _2705 = _2704.x;
        uint _2706 = _2673.z;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        if (((((1u << ((_2706 >> 4u) & 15u)) + 4294967295u) & _2705) == 0u) || ((_2706 & 240u) == 0u))
        {
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
        }
        else
        {
            float _2807;
            float _2809;
            float _2811;
            float _2813;
            float _2815;
            float _2817;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            uint _2956 = 0u;
            uint _2965;
            bool _2966;
            for (;;)
            {
                _2965 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_2956 << 2u)) >> 2u)).x;
                _2966 = _2965 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2966)
                {
                    frontier_phi_61_pred = _2950;
                    frontier_phi_61_pred_1 = _2955;
                    frontier_phi_61_pred_2 = _2954;
                    frontier_phi_61_pred_3 = _2953;
                    frontier_phi_61_pred_4 = _2952;
                    frontier_phi_61_pred_5 = _2951;
                }
                else
                {
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    uint _3080;
                    _3074 = _2950;
                    _3075 = _2951;
                    _3076 = _2952;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2965;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    for (;;)
                    {
                        uint _3084 = uint(findLSB(_3080)) + (_2956 << 5u);
                        uint _3081 = (_3080 + 4294967295u) & _3080;
                        uint _3086 = _3084 * 48u;
                        vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 3u)).x));
                        uint _3106 = (_3084 * 48u) + 4u;
                        vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 3u)).x));
                        uint _3125 = (_3084 * 48u) + 8u;
                        vec3 _3136 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3125)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 2u)).x));
                        float _3140 = _3100.x - _2659;
                        float _3141 = _3100.y - _2660;
                        float _3142 = _3100.z - _2661;
                        float _3143 = dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142));
                        float _3146 = inversesqrt(_3143);
                        float _3147 = _3146 * _3140;
                        float _3148 = _3146 * _3141;
                        float _3149 = _3146 * _3142;
                        float _3150 = dot(vec3(_942, _945, _948), vec3(_3147, _3148, _3149));
                        float _3155 = 1.0 - (_3143 * _3100.w);
                        float _4521 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3156 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3157 = sqrt(_3143) * _3119.w;
                        float _3160 = 1.39999997615814208984375 / (_3157 + 1.39999997615814208984375);
                        float _3161 = _3160 * _3160;
                        float _3164 = ((1.0 - _3161) * _3150) + _3161;
                        float _3167 = _3157 * _3157;
                        float _3171 = ((isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))) * _3156) / ((_3167 * 0.699999988079071044921875) + 1.0);
                        float _3175 = (-0.0) - _2659;
                        float _3176 = (-0.0) - _2660;
                        float _3177 = (-0.0) - _2661;
                        float _3181 = inversesqrt(dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177)));
                        float _3182 = _3181 * _3175;
                        float _3183 = _3181 * _3176;
                        float _3184 = _3181 * _3177;
                        float _3192 = exp2(log2(1.0 / ((_3167 * 3.5) + 5.0)) * 0.25);
                        float _3193 = 1.0 - _1002;
                        float _3200 = sqrt(1.0 - ((1.0 - (_3193 * _3193)) * (1.0 - (_3192 * _3192))));
                        float _3201 = _3200 * _3200;
                        float _3202 = _3201 * _3201;
                        float _3203 = _3182 + _3147;
                        float _3204 = _3183 + _3148;
                        float _3205 = _3184 + _3149;
                        float _3209 = inversesqrt(dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205)));
                        float _3213 = dot(vec3(_942, _945, _948), vec3(_3182, _3183, _3184));
                        float _4537 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3216 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                        float _3217 = dot(vec3(_942, _945, _948), vec3(_3209 * _3203, _3209 * _3204, _3209 * _3205));
                        float _4548 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3220 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                        float _3224 = ((_3220 * _3220) * (_3202 + (-1.0))) + 1.0;
                        float _3225 = _3160 * _3201;
                        float _3226 = _3225 * _3225;
                        float _3229 = ((1.0 - _3226) * _3150) + _3226;
                        float _4559 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3230 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3231 = 1.0 - _3201;
                        float _3241 = (0.5 / (((_3230 * ((_3216 * _3231) + _3201)) + 9.9999999392252902907785028219223e-09) + (((_3230 * _3231) + _3201) * _3216))) * _3230;
                        float _4570 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3252 = (((_3202 * 3.1415927410125732421875) * (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) / ((_3224 * _3224) * ((_3167 * 2.1991131305694580078125) + 3.141590118408203125))) * _3156;
                        _3009 = (_3171 * _3119.x) + _3077;
                        _3010 = (_3171 * _3119.y) + _3078;
                        _3011 = (_3171 * _3119.z) + _3079;
                        _3006 = (_3252 * _3136.x) + _3074;
                        _3007 = (_3252 * _3136.y) + _3075;
                        _3008 = (_3252 * _3136.z) + _3076;
                        if (_3081 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3074 = _3006;
                            _3075 = _3007;
                            _3076 = _3008;
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3081;
                        }
                    }
                    frontier_phi_61_pred = _3006;
                    frontier_phi_61_pred_1 = _3011;
                    frontier_phi_61_pred_2 = _3010;
                    frontier_phi_61_pred_3 = _3009;
                    frontier_phi_61_pred_4 = _3008;
                    frontier_phi_61_pred_5 = _3007;
                }
                _2807 = frontier_phi_61_pred;
                _2817 = frontier_phi_61_pred_1;
                _2815 = frontier_phi_61_pred_2;
                _2813 = frontier_phi_61_pred_3;
                _2811 = frontier_phi_61_pred_4;
                _2809 = frontier_phi_61_pred_5;
                uint _2957 = _2956 + 1u;
                if (_2957 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2950 = _2807;
                    _2951 = _2809;
                    _2952 = _2811;
                    _2953 = _2813;
                    _2954 = _2815;
                    _2955 = _2817;
                    _2956 = _2957;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
        }
        uvec4 _2820 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2821 = _2820.z;
        uint _2823 = (_2821 >> 8u) & 15u;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        if (((4294967295u << _2823) & _2705) == 0u)
        {
            _2918 = _2806;
            _2920 = _2808;
            _2922 = _2810;
            _2924 = _2812;
            _2926 = _2814;
            _2928 = _2816;
        }
        else
        {
            float _2943 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
            float _2944 = _2943 * _2659;
            float _2945 = _2943 * _2660;
            float _2946 = _2943 * _2661;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2823 < ((_2821 >> 12u) & 15u))
            {
                float _2919;
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _3057 = _2806;
                float _3058 = _2808;
                float _3059 = _2810;
                float _3060 = _2812;
                float _3061 = _2814;
                float _3062 = _2816;
                uint _3063 = _2823;
                uint _3072;
                bool _3073;
                for (;;)
                {
                    _3072 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_3063 << 2u)) >> 2u)).x;
                    _3073 = _3072 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3073)
                    {
                        frontier_phi_67_pred = _3060;
                        frontier_phi_67_pred_1 = _3061;
                        frontier_phi_67_pred_2 = _3062;
                        frontier_phi_67_pred_3 = _3059;
                        frontier_phi_67_pred_4 = _3058;
                        frontier_phi_67_pred_5 = _3057;
                    }
                    else
                    {
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3270 = _3057;
                        float _3271 = _3058;
                        float _3272 = _3059;
                        float _3273 = _3060;
                        float _3274 = _3061;
                        float _3275 = _3062;
                        uint _3276 = _3072;
                        uint _3277;
                        vec4 _3302;
                        float _3303;
                        vec4 _3318;
                        vec3 _3330;
                        vec4 _3345;
                        vec4 _3360;
                        float _3406;
                        bool _3407;
                        for (;;)
                        {
                            uint _3287 = ((_3063 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3276));
                            _3277 = (_3276 + 4294967295u) & _3276;
                            uint _3289 = _3287 * 40u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            _3303 = _3302.w;
                            uint _3305 = (_3287 * 40u) + 4u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3320 = (_3287 * 40u) + 8u;
                            _3330 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x));
                            uint _3332 = (_3287 * 40u) + 16u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3347 = (_3287 * 40u) + 20u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3362 = (_3287 * 40u) + 24u;
                            vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3381 = (_3287 * 40u) + 28u;
                            vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            _3406 = fma(_2661, _3394.z, fma(_2660, _3394.y, _3394.x * _2659)) + _3394.w;
                            _3407 = !((fma(_2661, _3375.z, fma(_2660, _3375.y, _3375.x * _2659)) + _3375.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3407)
                            {
                                float _3434 = _3302.x - _2659;
                                float _3435 = _3302.y - _2660;
                                float _3436 = _3302.z - _2661;
                                float _3437 = dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436));
                                float _3440 = inversesqrt(_3437);
                                float _3441 = _3440 * _3434;
                                float _3442 = _3440 * _3435;
                                float _3443 = _3440 * _3436;
                                float _3447 = 1.0 - (_3437 / (_3303 * _3303));
                                float _4581 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3452 = sqrt(_3437) * _3318.w;
                                float _3454 = 1.39999997615814208984375 / (_3452 + 1.39999997615814208984375);
                                float _3455 = _3454 * _3454;
                                float _3458 = ((1.0 - _3455) * dot(vec3(_3441, _3442, _3443), vec3(_942, _945, _948))) + _3455;
                                float _3461 = _3452 * _3452;
                                float _3465 = (fma(_2661, _3345.z, fma(_2660, _3345.y, _3345.x * _2659)) + _3345.w) / _3406;
                                float _3466 = (fma(_2661, _3360.z, fma(_2660, _3360.y, _3360.x * _2659)) + _3360.w) / _3406;
                                float _3470 = 1.0 - dot(vec2(_3465, _3466), vec2(_3465, _3466));
                                float _4597 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3471 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                                float _3472 = _3471 * (((isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0))) * _3448) / ((_3461 * 0.699999988079071044921875) + 1.0));
                                float _3484 = exp2(log2(1.0 / ((_3461 * 3.5) + 5.0)) * 0.25);
                                float _3485 = 1.0 - _1002;
                                float _3492 = sqrt(1.0 - ((1.0 - (_3485 * _3485)) * (1.0 - (_3484 * _3484))));
                                float _3493 = _3492 * _3492;
                                float _3494 = _3493 * _3493;
                                float _3495 = _3441 - _2944;
                                float _3496 = _3442 - _2945;
                                float _3497 = _3443 - _2946;
                                float _3501 = inversesqrt(dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497)));
                                float _3505 = dot(vec3(_942, _945, _948), vec3((-0.0) - _2944, (-0.0) - _2945, (-0.0) - _2946));
                                float _4608 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3508 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3509 = dot(vec3(_942, _945, _948), vec3(_3501 * _3495, _3501 * _3496, _3501 * _3497));
                                float _4619 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3512 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3516 = ((_3512 * _3512) * (_3494 + (-1.0))) + 1.0;
                                float _3517 = _3454 * _3493;
                                float _3518 = _3517 * _3517;
                                float _3524 = ((1.0 - _3518) * dot(vec3(_942, _945, _948), vec3(_3441, _3442, _3443))) + _3518;
                                float _4630 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3526 = 1.0 - _3493;
                                float _3536 = (0.5 / (((_3525 * ((_3508 * _3526) + _3493)) + 9.9999999392252902907785028219223e-09) + (((_3525 * _3526) + _3493) * _3508))) * _3525;
                                float _4641 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3546 = (_3471 * _3448) * (((_3494 * 3.1415927410125732421875) * (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) / ((_3516 * _3516) * ((_3461 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3546 * _3330.x;
                                frontier_phi_73_pred_1 = _3546 * _3330.y;
                                frontier_phi_73_pred_2 = _3472 * _3318.z;
                                frontier_phi_73_pred_3 = _3472 * _3318.y;
                                frontier_phi_73_pred_4 = _3472 * _3318.x;
                                frontier_phi_73_pred_5 = _3546 * _3330.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3550 = frontier_phi_73_pred;
                            _3551 = frontier_phi_73_pred_1;
                            _3555 = frontier_phi_73_pred_2;
                            _3554 = frontier_phi_73_pred_3;
                            _3553 = frontier_phi_73_pred_4;
                            _3552 = frontier_phi_73_pred_5;
                            _3260 = _3553 + _3273;
                            _3261 = _3554 + _3274;
                            _3262 = _3555 + _3275;
                            _3257 = _3550 + _3270;
                            _3258 = _3551 + _3271;
                            _3259 = _3552 + _3272;
                            if (_3277 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3277;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3260;
                        frontier_phi_67_pred_1 = _3261;
                        frontier_phi_67_pred_2 = _3262;
                        frontier_phi_67_pred_3 = _3259;
                        frontier_phi_67_pred_4 = _3258;
                        frontier_phi_67_pred_5 = _3257;
                    }
                    _2925 = frontier_phi_67_pred;
                    _2927 = frontier_phi_67_pred_1;
                    _2929 = frontier_phi_67_pred_2;
                    _2923 = frontier_phi_67_pred_3;
                    _2921 = frontier_phi_67_pred_4;
                    _2919 = frontier_phi_67_pred_5;
                    uint _3064 = _3063 + 1u;
                    if (_3064 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3057 = _2919;
                        _3058 = _2921;
                        _3059 = _2923;
                        _3060 = _2925;
                        _3061 = _2927;
                        _3062 = _2929;
                        _3063 = _3064;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2927;
                frontier_phi_55_56_ladder_1 = _2929;
                frontier_phi_55_56_ladder_2 = _2925;
                frontier_phi_55_56_ladder_3 = _2923;
                frontier_phi_55_56_ladder_4 = _2921;
                frontier_phi_55_56_ladder_5 = _2919;
            }
            else
            {
                frontier_phi_55_56_ladder = _2814;
                frontier_phi_55_56_ladder_1 = _2816;
                frontier_phi_55_56_ladder_2 = _2812;
                frontier_phi_55_56_ladder_3 = _2810;
                frontier_phi_55_56_ladder_4 = _2808;
                frontier_phi_55_56_ladder_5 = _2806;
            }
            _2918 = frontier_phi_55_56_ladder_5;
            _2920 = frontier_phi_55_56_ladder_4;
            _2922 = frontier_phi_55_56_ladder_3;
            _2924 = frontier_phi_55_56_ladder_2;
            _2926 = frontier_phi_55_56_ladder;
            _2928 = frontier_phi_55_56_ladder_1;
        }
        float _2933 = isnan(1.0) ? _986 : (isnan(_986) ? 1.0 : min(_986, 1.0));
        _2718 = (_2933 * _2924) + _2170;
        _2720 = (_2933 * _2926) + _2172;
        _2722 = (_2933 * _2928) + _2174;
        _2724 = ((_2918 * 0.039999999105930328369140625) * _2933) + _2503;
        _2726 = ((_2920 * 0.039999999105930328369140625) * _2933) + _2505;
        _2728 = ((_2922 * 0.039999999105930328369140625) * _2933) + _2507;
    }
    else
    {
        _2718 = _2170;
        _2720 = _2172;
        _2722 = _2174;
        _2724 = _2503;
        _2726 = _2505;
        _2728 = _2507;
    }
    float _4657 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _4668 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _4679 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    uint _2748 = _275 + 6u;
    float _2756 = _923 / cbSceneParam._m0[86u].x;
    float _2757 = _924 / cbSceneParam._m0[86u].y;
    vec4 _2771 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2756, _2757, (log2((isnan(cbSceneParam._m0[77u].w) ? _857 : (isnan(_857) ? cbSceneParam._m0[77u].w : min(_857, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2773 = _2771.x;
    float _2774 = _2771.y;
    float _2775 = _2771.z;
    float _2776 = _2771.w;
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    if (_857 > cbSceneParam._m0[78u].w)
    {
        float _2831 = isnan(_857) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _857 : min(cbSceneParam._m0[80u].w, _857));
        float _2832 = _2831 / _857;
        float _2843 = _2832 * _908;
        float _2844 = _909 * _2832;
        float _2845 = (-0.0) - _2844;
        float _2846 = _2832 * _910;
        float _2848 = (cbSceneParam._m0[77u].w * _2845) / _2831;
        float _2849 = _2848 + cbSceneParam._m0[79u].w;
        float _2850 = cbSceneParam._m0[79u].w - _2844;
        float _2856 = sqrt(((_2843 * _2843) + (_2844 * _2844)) + (_2846 * _2846));
        float _2859 = (1.0 - (cbSceneParam._m0[77u].w / _2831)) * _2856;
        float _2864 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2866 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3019;
        if (abs((_2845 - _2848) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3019 = ((((_2849 > 0.0) ? exp2(_2864 * _2849) : (2.0 - exp2(_2866 * _2849))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2859;
        }
        else
        {
            float _2979 = 1.0 / cbSceneParam._m0[80u].x;
            float _2980 = isnan(_2850) ? _2849 : (isnan(_2849) ? _2850 : max(_2849, _2850));
            float _2981 = isnan(_2850) ? _2849 : (isnan(_2849) ? _2850 : min(_2849, _2850));
            float _2990 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : min(_2980, 0.0));
            float _2991 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : min(_2981, 0.0));
            _3019 = ((abs(_2856 / _2845) * cbSceneParam._m0[80u].y) * ((((_2990 - _2991) * 2.0) - ((exp2(_2864 * (isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0)))) - exp2(_2864 * (isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0))))) * _2979)) - ((exp2(_2866 * _2990) - exp2(_2866 * _2991)) * _2979))) + (_2859 * cbSceneParam._m0[80u].z);
        }
        vec4 _3021 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2756, _2757, 1.0), 0.0);
        float _3030 = exp2((_3019 * (-1.44269502162933349609375)) * (1.0 - _3021.w));
        float _3031 = log2(_3030);
        float _3047 = log2(_2776);
        _2868 = (exp2(_3047 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3031 * cbSceneParam._m0[78u].x)) * _3021.x) / cbSceneParam._m0[78u].x)) + _2773;
        _2870 = (exp2(_3047 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3031 * cbSceneParam._m0[78u].y)) * _3021.y) / cbSceneParam._m0[78u].y)) + _2774;
        _2872 = (exp2(_3047 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3031 * cbSceneParam._m0[78u].z)) * _3021.z) / cbSceneParam._m0[78u].z)) + _2775;
        _2874 = _3030 * _2776;
    }
    else
    {
        _2868 = _2773;
        _2870 = _2774;
        _2872 = _2775;
        _2874 = _2776;
    }
    float _2886 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2887 = _2886 == 3.0;
    float _2888 = log2(_2874);
    float _2895 = exp2(_2888 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2718 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _986))) + ((_2724 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1791)) * cbPerFrame._m0[3u].x));
    float _2896 = exp2(_2888 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2720 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _986))) + ((_2726 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1791)) * cbPerFrame._m0[3u].x));
    float _2897 = exp2(_2888 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2722 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _986))) + ((_2728 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1791)) * cbPerFrame._m0[3u].x));
    float _2906 = (_2886 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2906 * (_2887 ? _2895 : (_2895 + (cbSceneParam._m0[72u].w * _2868)));
    SV_Target.y = _2906 * (_2887 ? _2896 : (_2896 + (cbSceneParam._m0[72u].w * _2870)));
    SV_Target.z = _2906 * (_2887 ? _2897 : (_2897 + (cbSceneParam._m0[72u].w * _2872)));
    SV_Target.w = cbInstanceData._m0[_2748].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2748].w;
}


