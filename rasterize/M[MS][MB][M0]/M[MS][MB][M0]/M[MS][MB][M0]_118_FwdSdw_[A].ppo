#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1329;
float _3971;
float _3972;
float _3973;
float _3974;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _374 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _374) * cbMtdParam._m0[24u].x) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3983 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _399 = (_392 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _400 = (_392 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _401 = (_392 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _419 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _446 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _465 = _463.x;
    float _466 = _463.y;
    float _467 = _463.z;
    float _476 = ((_446.z - _467) * _392) + _467;
    float _479 = ((((_446.x - _465) * _392) + _465) * 2.0) + (-1.0);
    float _480 = ((((_446.y - _466) * _392) + _466) * 2.0) + (-1.0);
    float _481 = dot(vec2(_479, _480), vec2(_479, _480));
    float _3994 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _486 = sqrt(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))));
    float _489 = _479 + ((((_419.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _490 = _480 + ((((_419.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _493 = fma(_486, _245, fma(_490, _252, _489 * _238));
    float _496 = fma(_486, _246, fma(_490, _253, _489 * _239));
    float _499 = fma(_486, _247, fma(_490, _254, _489 * _240));
    float _503 = inversesqrt(dot(vec3(_493, _496, _499), vec3(_493, _496, _499)));
    vec4 _519 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _547 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _549 = _547.x;
    float _550 = 1.0 - _549;
    float _554 = ((_549 - _550) * cbMtdParam._m0[24u].z) + _550;
    float _556 = (cbMtdParam._m0[19u].x + dot(vec4(_503 * _493, _503 * _496, _503 * _499, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_554 * cbMtdParam._m0[21u].z);
    float _4005 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _559 = (-0.0) - cbMtdParam._m0[24u].y;
    float _561 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _562 = isnan(1.0) ? _561 : (isnan(_561) ? 1.0 : min(_561, 1.0));
    float _569 = _557 - ((_557 * TEXCOORD_8.x) * _562);
    float _570 = _557 - ((_557 * TEXCOORD_8.y) * _562);
    float _571 = _557 - ((_557 * TEXCOORD_8.z) * _562);
    float _578 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _582 = ((isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : min(_578, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _590 = (_582 - (((_554 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _582))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4036 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _595 = ((_569 * (cbMtdParam._m0[17u].x - _399)) * _591) + _399;
    float _596 = ((_570 * (cbMtdParam._m0[17u].y - _400)) * _591) + _400;
    float _597 = ((_571 * (cbMtdParam._m0[17u].z - _401)) * _591) + _401;
    vec4 _609 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _611 = _609.x;
    float _612 = 1.0 - _611;
    float _639 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_611 - _612) * cbMtdParam._m0[24u].w) + _612) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4047 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _648 = ((((cbMtdParam._m0[10u].x - _595) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _640) + _595;
    float _649 = ((((cbMtdParam._m0[10u].y - _596) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _640) + _596;
    float _650 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _597)) * _640) + _597;
    float _655 = (((_419.z - _476) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _476;
    vec4 _669 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _676 = (_669.x * 2.0) + (-1.0);
    float _677 = (_669.y * 2.0) + (-1.0);
    float _678 = dot(vec2(_676, _677), vec2(_676, _677));
    float _4058 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _687 = (((_669.z - _655) * _569) * _591) + _655;
    float _690 = ((cbMtdParam._m0[23u].y - _687) * _640) + _687;
    vec4 _709 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _715 = (_709.x * 2.0) + (-1.0);
    float _716 = (_709.y * 2.0) + (-1.0);
    float _717 = dot(vec2(_715, _716), vec2(_715, _716));
    float _4069 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _737 = (((cbMtdParam._m0[21u].x * _489) + ((_676 - _489) * _569)) * _591) + _489;
    float _738 = (((cbMtdParam._m0[21u].x * _490) + ((_677 - _490) * _570)) * _591) + _490;
    float _739 = (((sqrt(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) - _486) * _571) * _591) + _486;
    float _750 = (((_715 - _737) + (_737 * cbMtdParam._m0[22u].z)) * _640) + _737;
    float _751 = (((_716 - _738) + (_738 * cbMtdParam._m0[22u].z)) * _640) + _738;
    float _752 = ((sqrt(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) - _739) * _640) + _739;
    float _754 = cbMtdParam._m0[22u].x + _519.w;
    float _757 = fma(_752, _245, fma(_751, _252, _750 * _238));
    float _760 = fma(_752, _246, fma(_751, _253, _750 * _239));
    float _763 = fma(_752, _247, fma(_751, _254, _750 * _240));
    float _767 = inversesqrt(dot(vec3(_757, _760, _763), vec3(_757, _760, _763)));
    float _768 = _767 * _757;
    float _769 = _767 * _760;
    float _770 = _767 * _763;
    float _4080 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _771 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4102 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4113 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4124 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _789 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _840 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _830);
    float _841 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _830);
    float _842 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _830);
    float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
    float _847 = _840 * _846;
    float _848 = _841 * _846;
    float _849 = _842 * _846;
    vec4 _854 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _856 = _854.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1010 = sqrt(((_840 * _840) + (_841 * _841)) + (_842 * _842));
        float _1016 = (cbMatDynParam._m0[5u].x * _1010) + cbMatDynParam._m0[5u].y;
        float _4135 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1021 = (cbMatDynParam._m0[5u].z * _1010) + cbMatDynParam._m0[5u].w;
        float _4146 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) - _1017)) + _1017) < ((_856 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _867 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _868 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _886 = fma(_770, cbSceneParam._m0[5u].z, fma(_769, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _768));
    float _889 = fma(_770, cbSceneParam._m0[6u].z, fma(_769, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _768));
    float _892 = fma(_770, cbSceneParam._m0[7u].z, fma(_769, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _768));
    uint _905 = _257 + 9u;
    uint _906 = _905 + uint(cbMatDynParam._m0[0u].w);
    float _912 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * cbInstanceData._m0[_906].x;
    float _913 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * cbInstanceData._m0[_906].y;
    float _914 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * cbInstanceData._m0[_906].z;
    float _4157 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _4168 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _4179 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    vec4 _926 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _867, cbSceneParam._m0[86u].y * _868));
    float _930 = ((isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * TEXCOORD_5.w) * _926.x;
    float _931 = dot(vec3(_768, _769, _770), vec3(_847, _848, _849));
    float _934 = _931 * 2.0;
    float _938 = (_934 * _768) - _847;
    float _939 = (_934 * _769) - _848;
    float _940 = (_934 * _770) - _849;
    float _944 = abs(dot(vec3(_847, _848, _849), vec3(_768, _769, _770)));
    float _4190 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _946 = sqrt(_771);
    float _959 = exp2((_946 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_946 * 3.0));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1328;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1053 = fma(_999, cbModelParam._m0[26u].z, fma(_995, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _991));
        float _1057 = fma(_999, cbModelParam._m0[27u].z, fma(_995, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _991));
        float _1061 = fma(_999, cbModelParam._m0[28u].z, fma(_995, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _991));
        float _1086 = _991 + _768;
        float _1087 = _995 + _769;
        float _1088 = _999 + _770;
        float _1098 = fma(_1088, cbModelParam._m0[26u].z, fma(_1087, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1086)) - _1053;
        float _1099 = fma(_1088, cbModelParam._m0[27u].z, fma(_1087, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1086)) - _1057;
        float _1100 = fma(_1088, cbModelParam._m0[28u].z, fma(_1087, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1086)) - _1061;
        float _1104 = inversesqrt(dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100)));
        float _1117 = ((_1104 * _1098) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1053 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1104 * _1099) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1057 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1104 * _1100) / cbModelParam._m0[34u].z) + ((((((_1061 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        float _1156 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1122.x + (-0.5));
        float _1158 = _1156 * (_1122.y + (-0.5));
        float _1159 = _1156 * (_1122.z + (-0.5));
        float _1166 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1129.x + (-0.5));
        float _1168 = _1166 * (_1129.y + (-0.5));
        float _1169 = _1166 * (_1129.z + (-0.5));
        float _1176 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1136.x + (-0.5));
        float _1178 = _1176 * (_1136.y + (-0.5));
        float _1179 = _1176 * (_1136.z + (-0.5));
        float _1186 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1143.x + (-0.5));
        float _1188 = _1186 * (_1143.y + (-0.5));
        float _1189 = _1186 * (_1143.z + (-0.5));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = _1157 * 0.5;
        float _1194 = _1167 * 0.5;
        float _1195 = _1177 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1210 = (dot(vec3(_768, _769, _770), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1220 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _4238 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1222 + 1.0))) + _1227) * _1190;
        float _1237 = _1158 * 0.5;
        float _1238 = _1168 * 0.5;
        float _1239 = _1178 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_768, _769, _770), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _4271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1264 + 1.0))) + _1269) * _1191;
        float _1279 = _1159 * 0.5;
        float _1280 = _1169 * 0.5;
        float _1281 = _1179 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_768, _769, _770), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4304 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1306 + 1.0))) + _1311) * _1192;
        _1328 = _1159;
        _1330 = _1158;
        _1331 = _1157;
        _1332 = _1169;
        _1333 = _1168;
        _1334 = _1167;
        _1335 = _1179;
        _1336 = _1178;
        _1337 = _1177;
        _1338 = _1192;
        _1339 = _1191;
        _1340 = _1190;
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
    }
    else
    {
        _1328 = _1329;
        _1330 = _1329;
        _1331 = _1329;
        _1332 = _1329;
        _1333 = _1329;
        _1334 = _1329;
        _1335 = _1329;
        _1336 = _1329;
        _1337 = _1329;
        _1338 = _1329;
        _1339 = _1329;
        _1340 = _1329;
        _1341 = 0.0;
        _1342 = 0.0;
        _1343 = 0.0;
    }
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1371 = fma(_999, cbModelParam._m0[30u].z, fma(_995, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _991));
        float _1375 = fma(_999, cbModelParam._m0[31u].z, fma(_995, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _991));
        float _1379 = fma(_999, cbModelParam._m0[32u].z, fma(_995, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _991));
        float _1402 = _991 + _768;
        float _1403 = _995 + _769;
        float _1404 = _999 + _770;
        float _1414 = fma(_1404, cbModelParam._m0[30u].z, fma(_1403, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1402)) - _1371;
        float _1415 = fma(_1404, cbModelParam._m0[31u].z, fma(_1403, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1402)) - _1375;
        float _1416 = fma(_1404, cbModelParam._m0[32u].z, fma(_1403, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1402)) - _1379;
        float _1420 = inversesqrt(dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416)));
        float _1433 = ((_1420 * _1414) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1371 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1434 = ((_1420 * _1415) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1375 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1435 = ((_1420 * _1416) / cbModelParam._m0[35u].z) + ((((((_1379 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        float _1470 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1437.x + (-0.5));
        float _1472 = _1470 * (_1437.y + (-0.5));
        float _1473 = _1470 * (_1437.z + (-0.5));
        float _1480 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1444.x + (-0.5));
        float _1482 = _1480 * (_1444.y + (-0.5));
        float _1483 = _1480 * (_1444.z + (-0.5));
        float _1490 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1451.x + (-0.5));
        float _1492 = _1490 * (_1451.y + (-0.5));
        float _1493 = _1490 * (_1451.z + (-0.5));
        float _1500 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1458.x + (-0.5));
        float _1502 = _1500 * (_1458.y + (-0.5));
        float _1503 = _1500 * (_1458.z + (-0.5));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = _1471 * 0.5;
        float _1508 = _1481 * 0.5;
        float _1509 = _1491 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_768, _769, _770), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4367 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1534 + 1.0))) + _1539) * _1504;
        float _1549 = _1472 * 0.5;
        float _1550 = _1482 * 0.5;
        float _1551 = _1492 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_768, _769, _770), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4378 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4389 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4400 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_1576 + 1.0))) + _1581) * _1505;
        float _1591 = _1473 * 0.5;
        float _1592 = _1483 * 0.5;
        float _1593 = _1493 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1607 = (dot(vec3(_768, _769, _770), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1616 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1618 = _1617 * 2.0;
        float _1622 = (1.0 - _1617) / (_1617 + 1.0);
        float _4433 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1632 = ((((1.0 - _1623) * (_1618 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1618 + 1.0))) + _1623) * _1506;
        _1640 = _1473;
        _1641 = _1472;
        _1642 = _1471;
        _1643 = _1483;
        _1644 = _1482;
        _1645 = _1481;
        _1646 = _1493;
        _1647 = _1492;
        _1648 = _1491;
        _1649 = _1506;
        _1650 = _1505;
        _1651 = _1504;
        _1652 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)));
    }
    else
    {
        _1640 = _1329;
        _1641 = _1329;
        _1642 = _1329;
        _1643 = _1329;
        _1644 = _1329;
        _1645 = _1329;
        _1646 = _1329;
        _1647 = _1329;
        _1648 = _1329;
        _1649 = _1329;
        _1650 = _1329;
        _1651 = _1329;
        _1652 = 0.0;
        _1653 = 0.0;
        _1654 = 0.0;
    }
    float _1664 = (cbModelParam._m0[1u].x * (_1652 - _1341)) + _1341;
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1342)) + _1342;
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1343)) + _1343;
    float _1687 = fma(_1666, cbSceneParam._m0[89u].z, fma(_1665, cbSceneParam._m0[89u].y, _1664 * cbSceneParam._m0[89u].x));
    float _1690 = fma(_1666, cbSceneParam._m0[90u].z, fma(_1665, cbSceneParam._m0[90u].y, _1664 * cbSceneParam._m0[90u].x));
    float _1693 = fma(_1666, cbSceneParam._m0[91u].z, fma(_1665, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1664));
    float _1708 = _938 * 0.5;
    float _1709 = _939 * 0.5;
    float _1710 = _940 * 0.5;
    float _1711 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1714 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1717 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1640, _1643, _1646, _1649));
    float _1751;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1724 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1328, _1332, _1335, _1338));
        float _1728 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1330, _1333, _1336, _1339));
        float _1732 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1331, _1334, _1337, _1340));
        float _1739 = dot(vec4(cbModelParam._m0[39u]), vec4(_1708, _1709, _1710, 1.0));
        _1751 = dot(vec3(isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1739) ? 0.0 : (isnan(0.0) ? _1739 : max(0.0, _1739))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1751 = 1.0;
    }
    float _1762;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1753 = dot(vec4(cbModelParam._m0[40u]), vec4(_1708, _1709, _1710, 1.0));
        _1762 = dot(vec3(isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1753) ? 0.0 : (isnan(0.0) ? _1753 : max(0.0, _1753))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1762 = 1.0;
    }
    float _1766 = (_1762 * cbModelParam._m0[1u].x) + (_1751 * (1.0 - cbModelParam._m0[1u].x));
    float _1776 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _771);
    float _1777 = isnan(_1776) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1776 : min(cbModelParam._m0[25u].z, _1776));
    float _1858;
    float _1860;
    float _1862;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1825 = fma(_999, cbModelParam._m0[13u].z, fma(_995, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _991)) + cbModelParam._m0[13u].w;
        float _1829 = fma(_999, cbModelParam._m0[14u].z, fma(_995, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _991)) + cbModelParam._m0[14u].w;
        float _1833 = fma(_999, cbModelParam._m0[15u].z, fma(_995, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _991)) + cbModelParam._m0[15u].w;
        float _1836 = fma(_940, cbModelParam._m0[13u].z, fma(_939, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _938));
        float _1839 = fma(_940, cbModelParam._m0[14u].z, fma(_939, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _938));
        float _1842 = fma(_940, cbModelParam._m0[15u].z, fma(_939, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _938));
        float _1870;
        if (_1836 > 0.0)
        {
            _1870 = abs((1.0 - _1825) / _1836);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1825 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1870 = frontier_phi_17_15_ladder;
        }
        float _2040;
        if (_1839 > 0.0)
        {
            _2040 = abs((1.0 - _1829) / _1839);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1829 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2040 = frontier_phi_26_22_ladder;
        }
        float _2335;
        if (_1842 > 0.0)
        {
            _2335 = abs((1.0 - _1833) / _1842);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1833 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2335 = frontier_phi_38_33_ladder;
        }
        float _2337 = isnan(_2040) ? _1870 : (isnan(_1870) ? _2040 : min(_1870, _2040));
        float _2338 = isnan(_2335) ? _2337 : (isnan(_2337) ? _2335 : min(_2337, _2335));
        float _2342 = (_2338 * _1836) + _1825;
        float _2343 = (_2338 * _1839) + _1829;
        float _2344 = (_2338 * _1842) + _1833;
        float _2345 = _2338 * 9.9999997473787516355514526367188e-05;
        float _2347 = (-1.0) - _2345;
        float _2349 = _2345 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2344 > _2349) || ((_2344 < _2347) || ((_2343 > _2349) || ((_2343 < _2347) || ((_2342 < _2347) || (_2342 > _2349))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2489 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2344, cbModelParam._m0[9u].z, fma(_2343, cbModelParam._m0[9u].y, _2342 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2344, cbModelParam._m0[10u].z, fma(_2343, cbModelParam._m0[10u].y, _2342 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2344, cbModelParam._m0[11u].z, fma(_2343, cbModelParam._m0[11u].y, _2342 * cbModelParam._m0[11u].x))), _1777);
            frontier_phi_16_38_ladder = _2489.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2489.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2489.x * cbModelParam._m0[1u].y;
        }
        _1858 = frontier_phi_16_38_ladder_2;
        _1860 = frontier_phi_16_38_ladder_1;
        _1862 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1846 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_938, _939, _940), _1777);
        _1858 = _1846.x * cbModelParam._m0[1u].y;
        _1860 = _1846.y * cbModelParam._m0[1u].y;
        _1862 = _1846.z * cbModelParam._m0[1u].y;
    }
    float _1866 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _771);
    float _1867 = isnan(_1866) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1866 : min(cbModelParam._m0[25u].w, _1866));
    float _1957;
    float _1959;
    float _1961;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1921 = fma(_999, cbModelParam._m0[21u].z, fma(_995, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _991)) + cbModelParam._m0[21u].w;
        float _1925 = fma(_999, cbModelParam._m0[22u].z, fma(_995, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _991)) + cbModelParam._m0[22u].w;
        float _1929 = fma(_999, cbModelParam._m0[23u].z, fma(_995, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _991)) + cbModelParam._m0[23u].w;
        float _1932 = fma(_940, cbModelParam._m0[21u].z, fma(_939, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _938));
        float _1935 = fma(_940, cbModelParam._m0[22u].z, fma(_939, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _938));
        float _1938 = fma(_940, cbModelParam._m0[23u].z, fma(_939, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _938));
        float _2045;
        if (_1932 > 0.0)
        {
            _2045 = abs((1.0 - _1921) / _1932);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1921 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2045 = frontier_phi_28_24_ladder;
        }
        float _2362;
        if (_1935 > 0.0)
        {
            _2362 = abs((1.0 - _1925) / _1935);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1925 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2362 = frontier_phi_40_35_ladder;
        }
        float _2689;
        if (_1938 > 0.0)
        {
            _2689 = abs((1.0 - _1929) / _1938);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1929 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2689 = frontier_phi_50_47_ladder;
        }
        float _2691 = isnan(_2362) ? _2045 : (isnan(_2045) ? _2362 : min(_2045, _2362));
        float _2692 = isnan(_2689) ? _2691 : (isnan(_2691) ? _2689 : min(_2691, _2689));
        float _2696 = (_2692 * _1932) + _1921;
        float _2697 = (_2692 * _1935) + _1925;
        float _2698 = (_2692 * _1938) + _1929;
        float _2699 = _2692 * 9.9999997473787516355514526367188e-05;
        float _2700 = (-1.0) - _2699;
        float _2702 = _2699 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2698 > _2702) || ((_2698 < _2700) || ((_2697 > _2702) || ((_2697 < _2700) || ((_2696 < _2700) || (_2696 > _2702))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2816 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2698, cbModelParam._m0[17u].z, fma(_2697, cbModelParam._m0[17u].y, _2696 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2698, cbModelParam._m0[18u].z, fma(_2697, cbModelParam._m0[18u].y, _2696 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2698, cbModelParam._m0[19u].z, fma(_2697, cbModelParam._m0[19u].y, _2696 * cbModelParam._m0[19u].x))), _1867);
            frontier_phi_25_50_ladder = _2816.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2816.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2816.x * cbModelParam._m0[1u].z;
        }
        _1957 = frontier_phi_25_50_ladder_2;
        _1959 = frontier_phi_25_50_ladder_1;
        _1961 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1941 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_938, _939, _940), _1867);
        _1957 = _1941.x * cbModelParam._m0[1u].z;
        _1959 = _1941.y * cbModelParam._m0[1u].z;
        _1961 = _1941.z * cbModelParam._m0[1u].z;
    }
    float _1973 = ((((1.0 - _959) * ((_946 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_959 * _946)) * _930;
    float _1974 = _1973 * ((cbModelParam._m0[1u].w * (_1957 - _1858)) + _1858);
    float _1975 = _1973 * ((cbModelParam._m0[1u].w * (_1959 - _1860)) + _1860);
    float _1976 = _1973 * ((cbModelParam._m0[1u].w * (_1961 - _1862)) + _1862);
    float _1979 = fma(_1976, cbSceneParam._m0[89u].z, fma(_1975, cbSceneParam._m0[89u].y, _1974 * cbSceneParam._m0[89u].x));
    float _1982 = fma(_1976, cbSceneParam._m0[90u].z, fma(_1975, cbSceneParam._m0[90u].y, _1974 * cbSceneParam._m0[90u].x));
    float _1985 = fma(_1976, cbSceneParam._m0[91u].z, fma(_1975, cbSceneParam._m0[91u].y, _1974 * cbSceneParam._m0[91u].x));
    float _2019 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2023 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2027 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2031 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2032 = _2019 / _2031;
    float _2033 = _2023 / _2031;
    float _2034 = _2027 / _2031;
    float _2181;
    float _2182;
    float _2183;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2061 = ((uint(_2034 > cbSceneParam._m0[59u].y) + uint(_2034 > cbSceneParam._m0[59u].x)) + uint(_2034 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2062 = _2061 + 43u;
        uint _2070 = _2061 + 44u;
        uint _2078 = _2061 + 45u;
        uint _2086 = _2061 + 46u;
        float _2097 = fma(_2031, cbSceneParam._m0[_2062].w, fma(_2027, cbSceneParam._m0[_2062].z, fma(_2023, cbSceneParam._m0[_2062].y, _2019 * cbSceneParam._m0[_2062].x)));
        float _2101 = fma(_2031, cbSceneParam._m0[_2070].w, fma(_2027, cbSceneParam._m0[_2070].z, fma(_2023, cbSceneParam._m0[_2070].y, _2019 * cbSceneParam._m0[_2070].x)));
        float _2109 = fma(_2031, cbSceneParam._m0[_2086].w, fma(_2027, cbSceneParam._m0[_2086].z, fma(_2023, cbSceneParam._m0[_2086].y, _2019 * cbSceneParam._m0[_2086].x)));
        float _2114 = cbSceneParam._m0[33u].z * _2109;
        float _2116 = cbSceneParam._m0[33u].w * _2109;
        float _2119 = fma(_2031, cbSceneParam._m0[_2078].w, fma(_2027, cbSceneParam._m0[_2078].z, fma(_2023, cbSceneParam._m0[_2078].y, _2019 * cbSceneParam._m0[_2078].x))) / _2109;
        float _2167 = (cbSceneParam._m0[33u].x - sqrt(((_2033 * _2033) + (_2032 * _2032)) + (_2034 * _2034))) * cbSceneParam._m0[33u].y;
        float _4559 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2174 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2114 + _2097) / _2109, (_2116 + _2101) / _2109), _2119), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2116 + _2097) / _2109, (_2101 - _2114) / _2109), _2119), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2097 - _2114) / _2109, (_2101 - _2116) / _2109), _2119), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2097 - _2116) / _2109, (_2114 + _2101) / _2109), _2119), 0.0)).x), vec4(0.25)));
        _2181 = 1.0 - (_2174 * cbSceneParam._m0[34u].x);
        _2182 = 1.0 - (_2174 * cbSceneParam._m0[34u].y);
        _2183 = 1.0 - (_2174 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2181 = 1.0;
        _2182 = 1.0;
        _2183 = 1.0;
    }
    float _2247;
    float _2249;
    float _2251;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2235 = fma(_2031, cbSceneParam._m0[63u].w, fma(_2027, cbSceneParam._m0[63u].z, fma(_2023, cbSceneParam._m0[63u].y, _2019 * cbSceneParam._m0[63u].x)));
        float _2236 = fma(_2031, cbSceneParam._m0[60u].w, fma(_2027, cbSceneParam._m0[60u].z, fma(_2023, cbSceneParam._m0[60u].y, _2019 * cbSceneParam._m0[60u].x))) / _2235;
        float _2237 = fma(_2031, cbSceneParam._m0[61u].w, fma(_2027, cbSceneParam._m0[61u].z, fma(_2023, cbSceneParam._m0[61u].y, _2019 * cbSceneParam._m0[61u].x))) / _2235;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2236 >= cbSceneParam._m0[64u].x) && (_2237 >= cbSceneParam._m0[64u].y)) && (_2236 <= cbSceneParam._m0[64u].z)) && (_2237 <= cbSceneParam._m0[64u].w))
        {
            float _2375 = fma(_2031, cbSceneParam._m0[62u].w, fma(_2027, cbSceneParam._m0[62u].z, fma(_2023, cbSceneParam._m0[62u].y, _2019 * cbSceneParam._m0[62u].x))) / _2235;
            float _2379 = isnan(cbSceneParam._m0[41u].w) ? _2375 : (isnan(_2375) ? cbSceneParam._m0[41u].w : max(_2375, cbSceneParam._m0[41u].w));
            float _2422 = (cbSceneParam._m0[33u].x - sqrt(((_2033 * _2033) + (_2032 * _2032)) + (_2034 * _2034))) * cbSceneParam._m0[33u].y;
            float _4575 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
            float _2429 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2236, cbSceneParam._m0[33u].w + _2237), _2379), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2236, _2237 - cbSceneParam._m0[33u].z), _2379), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2236 - cbSceneParam._m0[33u].z, _2237 - cbSceneParam._m0[33u].w), _2379), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2236 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2237), _2379), 0.0)).x), vec4(0.25)));
            float _2433 = 1.0 - (_2429 * cbSceneParam._m0[34u].x);
            float _2434 = 1.0 - (_2429 * cbSceneParam._m0[34u].y);
            float _2435 = 1.0 - (_2429 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2435) ? _2183 : (isnan(_2183) ? _2435 : min(_2183, _2435));
            frontier_phi_37_36_ladder_1 = isnan(_2434) ? _2182 : (isnan(_2182) ? _2434 : min(_2182, _2434));
            frontier_phi_37_36_ladder_2 = isnan(_2433) ? _2181 : (isnan(_2181) ? _2433 : min(_2181, _2433));
        }
        else
        {
            frontier_phi_37_36_ladder = _2183;
            frontier_phi_37_36_ladder_1 = _2182;
            frontier_phi_37_36_ladder_2 = _2181;
        }
        _2247 = frontier_phi_37_36_ladder_2;
        _2249 = frontier_phi_37_36_ladder_1;
        _2251 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2247 = _2181;
        _2249 = _2182;
        _2251 = _2183;
    }
    uvec4 _2256 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2258 = _2256.x * 14u;
    uint _2259 = _2258 + 13u;
    float _2266 = _930 + (-1.0);
    float _2271 = (cbLight._m0[_2259].x * _2266) + 1.0;
    float _2272 = (cbLight._m0[_2259].y * _2266) + 1.0;
    float _2273 = (cbLight._m0[_2259].z * _2266) + 1.0;
    float _2274 = (cbLight._m0[_2259].w * _2266) + 1.0;
    uint _2275 = _2258 + 5u;
    float _2281 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
    uint _2285 = _2258 + 4u;
    float _2294 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
    uint _2298 = _2258 | 1u;
    float _2309 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_768, _769, _770));
    float _2312 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_768, _769, _770));
    float _4611 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _4622 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2317 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * 0.3183098733425140380859375;
    float _2319 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * 0.3183098733425140380859375;
    float _2326 = ((cbLight._m0[_2275].x * _2281) * _2319) + (((cbLight._m0[_2285].x * _2247) * _2294) * _2317);
    float _2327 = ((_2281 * cbLight._m0[_2275].y) * _2319) + (((cbLight._m0[_2285].y * _2249) * _2294) * _2317);
    float _2328 = ((_2281 * cbLight._m0[_2275].z) * _2319) + (((cbLight._m0[_2285].z * _2251) * _2294) * _2317);
    uvec4 _2332 = floatBitsToUint(cbLight._m0[_2258 + 12u]);
    bool _2334 = _2332.x == 0u;
    float _2436;
    float _2438;
    float _2440;
    if (_2334)
    {
        _2436 = _2326;
        _2438 = _2327;
        _2440 = _2328;
    }
    else
    {
        uint _2444 = _2258 + 6u;
        float _2460 = (dot(vec3(cbLight._m0[_2258 + 2u].xyz), vec3(_768, _769, _770)) * 0.5) + 0.5;
        float _2461 = _2460 * _2460;
        float _4633 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2462 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2463 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2436 = (((cbLight._m0[_2444].x * 0.3183098733425140380859375) * _2462) * _2463) + _2326;
        _2438 = (((cbLight._m0[_2444].y * 0.3183098733425140380859375) * _2462) * _2463) + _2327;
        _2440 = (((cbLight._m0[_2444].z * 0.3183098733425140380859375) * _2462) * _2463) + _2328;
    }
    bool _2443 = _2332.y == 0u;
    float _2498;
    float _2500;
    float _2502;
    if (_2443)
    {
        _2498 = _2436;
        _2500 = _2438;
        _2502 = _2440;
    }
    else
    {
        uint _2660 = _2258 + 7u;
        float _2676 = (dot(vec3(cbLight._m0[_2258 + 3u].xyz), vec3(_768, _769, _770)) * 0.5) + 0.5;
        float _2677 = _2676 * _2676;
        float _4649 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2678 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2679 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2498 = (((cbLight._m0[_2660].x * 0.3183098733425140380859375) * _2678) * _2679) + _2436;
        _2500 = (((cbLight._m0[_2660].y * 0.3183098733425140380859375) * _2678) * _2679) + _2438;
        _2502 = (((cbLight._m0[_2660].z * 0.3183098733425140380859375) * _2678) * _2679) + _2440;
    }
    uint _2505 = _2258 + 8u;
    float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _771) * 0.949999988079071044921875);
    float _2519 = _2518 * _2518;
    float _2520 = cbLight._m0[_2258].x + _847;
    float _2521 = cbLight._m0[_2258].y + _848;
    float _2522 = cbLight._m0[_2258].z + _849;
    float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
    float _2527 = _2526 * _2520;
    float _2528 = _2526 * _2521;
    float _2529 = _2526 * _2522;
    float _2530 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2258].xyz));
    float _4665 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2533 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    float _4676 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _2534 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
    float _2535 = dot(vec3(_768, _769, _770), vec3(_2527, _2528, _2529));
    float _4687 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2538 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _2539 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2527, _2528, _2529));
    float _4698 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2543 = _2519 * _2519;
    float _2547 = ((_2538 * _2538) * (_2543 + (-1.0))) + 1.0;
    float _2558 = (exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2559 = 1.0 - _2519;
    float _2570 = (0.5 / (((_2534 * ((_2533 * _2559) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2559) + _2519) * _2533))) * _2533;
    float _4709 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2572 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2543 / ((_2547 * _2547) * 3.141590118408203125));
    uint _2586 = _2258 + 9u;
    float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2298].w)) * _771) * 0.949999988079071044921875);
    float _2598 = _2597 * _2597;
    float _2599 = cbLight._m0[_2298].x + _847;
    float _2600 = cbLight._m0[_2298].y + _848;
    float _2601 = cbLight._m0[_2298].z + _849;
    float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
    float _2606 = _2605 * _2599;
    float _2607 = _2605 * _2600;
    float _2608 = _2605 * _2601;
    float _2609 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2298].xyz));
    float _4720 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
    float _2613 = dot(vec3(_768, _769, _770), vec3(_2606, _2607, _2608));
    float _4731 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2616 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _2617 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_2606, _2607, _2608));
    float _4742 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2621 = _2598 * _2598;
    float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
    float _2634 = (exp2(log2(1.0 - (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2635 = 1.0 - _2598;
    float _2645 = (0.5 / (((_2534 * ((_2612 * _2635) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2635) + _2598) * _2612))) * _2612;
    float _4753 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2647 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
    float _2657 = (((_2634 * cbLight._m0[_2586].x) * _2647) * _2281) + ((((cbLight._m0[_2505].x * _2247) * _2558) * _2572) * _2294);
    float _2658 = (((_2634 * cbLight._m0[_2586].y) * _2647) * _2281) + ((((cbLight._m0[_2505].y * _2249) * _2558) * _2572) * _2294);
    float _2659 = (((_2634 * cbLight._m0[_2586].z) * _2647) * _2281) + ((((cbLight._m0[_2505].z * _2251) * _2558) * _2572) * _2294);
    float _2715;
    float _2717;
    float _2719;
    if (_2334)
    {
        _2715 = _2657;
        _2717 = _2658;
        _2719 = _2659;
    }
    else
    {
        uint _2721 = _2258 + 2u;
        uint _2725 = _2258 + 10u;
        float _2739 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2721].w)) * _771) * 0.949999988079071044921875);
        float _2740 = _2739 * _2739;
        float _2741 = cbLight._m0[_2721].x + _847;
        float _2742 = cbLight._m0[_2721].y + _848;
        float _2743 = cbLight._m0[_2721].z + _849;
        float _2747 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
        float _2748 = _2747 * _2741;
        float _2749 = _2747 * _2742;
        float _2750 = _2747 * _2743;
        float _2751 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2721].xyz));
        float _4764 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2754 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _2755 = dot(vec3(_768, _769, _770), vec3(_2748, _2749, _2750));
        float _4775 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2758 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _2759 = dot(vec3(cbLight._m0[_2721].xyz), vec3(_2748, _2749, _2750));
        float _4786 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2763 = _2740 * _2740;
        float _2767 = ((_2758 * _2758) * (_2763 + (-1.0))) + 1.0;
        float _2776 = (exp2(log2(1.0 - (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2777 = 1.0 - _2740;
        float _2787 = (0.5 / (((_2534 * ((_2754 * _2777) + _2740)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2777) + _2740) * _2754))) * _2754;
        float _4797 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2789 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2763 / ((_2767 * _2767) * 3.141590118408203125));
        float _2790 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2715 = (((_2776 * cbLight._m0[_2725].x) * _2789) * _2790) + _2657;
        _2717 = (((_2776 * cbLight._m0[_2725].y) * _2789) * _2790) + _2658;
        _2719 = (((_2776 * cbLight._m0[_2725].z) * _2789) * _2790) + _2659;
    }
    float _2821;
    float _2823;
    float _2825;
    if (_2443)
    {
        _2821 = _2715;
        _2823 = _2717;
        _2825 = _2719;
    }
    else
    {
        uint _2832 = _2258 + 3u;
        uint _2836 = _2258 + 11u;
        float _2850 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2832].w)) * _771) * 0.949999988079071044921875);
        float _2851 = _2850 * _2850;
        float _2852 = cbLight._m0[_2832].x + _847;
        float _2853 = cbLight._m0[_2832].y + _848;
        float _2854 = cbLight._m0[_2832].z + _849;
        float _2858 = inversesqrt(dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854)));
        float _2859 = _2858 * _2852;
        float _2860 = _2858 * _2853;
        float _2861 = _2858 * _2854;
        float _2862 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_2832].xyz));
        float _4813 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2865 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2866 = dot(vec3(_768, _769, _770), vec3(_2859, _2860, _2861));
        float _4824 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2869 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2870 = dot(vec3(cbLight._m0[_2832].xyz), vec3(_2859, _2860, _2861));
        float _4835 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2874 = _2851 * _2851;
        float _2878 = ((_2869 * _2869) * (_2874 + (-1.0))) + 1.0;
        float _2887 = (exp2(log2(1.0 - (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2888 = 1.0 - _2851;
        float _2898 = (0.5 / (((_2534 * ((_2865 * _2888) + _2851)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2888) + _2851) * _2865))) * _2865;
        float _4846 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2900 = (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2874 / ((_2878 * _2878) * 3.141590118408203125));
        float _2901 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2821 = (((_2887 * cbLight._m0[_2836].x) * _2900) * _2901) + _2715;
        _2823 = (((_2887 * cbLight._m0[_2836].y) * _2900) * _2901) + _2717;
        _2825 = (((_2887 * cbLight._m0[_2836].z) * _2900) * _2901) + _2719;
    }
    float _2967;
    float _2969;
    float _2971;
    float _2973;
    float _2975;
    float _2977;
    if (_2256.y == 0u)
    {
        uvec4 _2922 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2923 = _2922.x;
        uint _2934 = uint((float(_2922.y) * floor(float(uint(cbSceneParam._m0[85u].y * _868) / _2923))) + floor(float(uint(cbSceneParam._m0[85u].x * _867) / _2923)));
        float _2944 = (log2(_2034 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2945 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        uint _2948 = uint(isnan(14.0) ? _2945 : (isnan(_2945) ? 14.0 : min(_2945, 14.0)));
        uvec4 _2953 = texelFetch(g_lightClusterGridBuffer, int(((_2948 << 2u) + (_2934 << 6u)) >> 2u));
        uint _2954 = _2953.x;
        uint _2955 = _2922.z;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        if (((((1u << ((_2955 >> 4u) & 15u)) + 4294967295u) & _2954) == 0u) || ((_2955 & 240u) == 0u))
        {
            _3034 = 0.0;
            _3036 = 0.0;
            _3038 = 0.0;
            _3040 = 0.0;
            _3042 = 0.0;
            _3044 = 0.0;
        }
        else
        {
            float _3035;
            float _3037;
            float _3039;
            float _3041;
            float _3043;
            float _3045;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            float _3190 = 0.0;
            float _3191 = 0.0;
            uint _3192 = 0u;
            uint _3201;
            bool _3202;
            for (;;)
            {
                _3201 = texelFetch(g_lightClassification, int((((_2948 << 5u) + (_2934 << 9u)) + (_3192 << 2u)) >> 2u)).x;
                _3202 = _3201 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3202)
                {
                    frontier_phi_71_pred = _3191;
                    frontier_phi_71_pred_1 = _3190;
                    frontier_phi_71_pred_2 = _3189;
                    frontier_phi_71_pred_3 = _3188;
                    frontier_phi_71_pred_4 = _3187;
                    frontier_phi_71_pred_5 = _3186;
                }
                else
                {
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    uint _3337;
                    _3331 = _3186;
                    _3332 = _3187;
                    _3333 = _3188;
                    _3334 = _3189;
                    _3335 = _3190;
                    _3336 = _3191;
                    _3337 = _3201;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    for (;;)
                    {
                        uint _3341 = uint(findLSB(_3337)) + (_3192 << 5u);
                        uint _3338 = (_3337 + 4294967295u) & _3337;
                        uint _3343 = _3341 * 48u;
                        vec4 _3357 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3343)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 3u)).x));
                        uint _3363 = (_3341 * 48u) + 4u;
                        vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3363)).x, texelFetch(g_PointLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3363 + 3u)).x));
                        uint _3382 = (_3341 * 48u) + 8u;
                        vec3 _3393 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3382)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 2u)).x));
                        float _3397 = _3357.x - _2032;
                        float _3398 = _3357.y - _2033;
                        float _3399 = _3357.z - _2034;
                        float _3400 = dot(vec3(_3397, _3398, _3399), vec3(_3397, _3398, _3399));
                        float _3403 = inversesqrt(_3400);
                        float _3404 = _3403 * _3397;
                        float _3405 = _3403 * _3398;
                        float _3406 = _3403 * _3399;
                        float _3407 = dot(vec3(_886, _889, _892), vec3(_3404, _3405, _3406));
                        float _3412 = 1.0 - (_3400 * _3357.w);
                        float _4872 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3413 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                        float _3414 = sqrt(_3400) * _3376.w;
                        float _3417 = 1.39999997615814208984375 / (_3414 + 1.39999997615814208984375);
                        float _3418 = _3417 * _3417;
                        float _3421 = ((1.0 - _3418) * _3407) + _3418;
                        float _3424 = _3414 * _3414;
                        float _3428 = ((isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0))) * _3413) / ((_3424 * 0.699999988079071044921875) + 1.0);
                        float _3432 = (-0.0) - _2032;
                        float _3433 = (-0.0) - _2033;
                        float _3434 = (-0.0) - _2034;
                        float _3438 = inversesqrt(dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434)));
                        float _3439 = _3438 * _3432;
                        float _3440 = _3438 * _3433;
                        float _3441 = _3438 * _3434;
                        float _3448 = exp2(log2(1.0 / ((_3424 * 3.5) + 5.0)) * 0.25);
                        float _3449 = 1.0 - _946;
                        float _3456 = sqrt(1.0 - ((1.0 - (_3449 * _3449)) * (1.0 - (_3448 * _3448))));
                        float _3457 = _3456 * _3456;
                        float _3458 = _3457 * _3457;
                        float _3459 = _3439 + _3404;
                        float _3460 = _3440 + _3405;
                        float _3461 = _3441 + _3406;
                        float _3465 = inversesqrt(dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461)));
                        float _3469 = dot(vec3(_886, _889, _892), vec3(_3439, _3440, _3441));
                        float _4888 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3472 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                        float _3473 = dot(vec3(_886, _889, _892), vec3(_3465 * _3459, _3465 * _3460, _3465 * _3461));
                        float _4899 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3476 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                        float _3480 = ((_3476 * _3476) * (_3458 + (-1.0))) + 1.0;
                        float _3481 = _3417 * _3457;
                        float _3482 = _3481 * _3481;
                        float _3485 = ((1.0 - _3482) * _3407) + _3482;
                        float _4910 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3486 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                        float _3487 = 1.0 - _3457;
                        float _3497 = (0.5 / (((_3486 * ((_3472 * _3487) + _3457)) + 9.9999999392252902907785028219223e-09) + (((_3486 * _3487) + _3457) * _3472))) * _3486;
                        float _4921 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3508 = (((_3458 * 3.1415927410125732421875) * (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) / ((_3480 * _3480) * ((_3424 * 2.1991131305694580078125) + 3.141590118408203125))) * _3413;
                        _3261 = (_3428 * _3376.x) + _3334;
                        _3262 = (_3428 * _3376.y) + _3335;
                        _3263 = (_3428 * _3376.z) + _3336;
                        _3258 = (_3508 * _3393.x) + _3331;
                        _3259 = (_3508 * _3393.y) + _3332;
                        _3260 = (_3508 * _3393.z) + _3333;
                        if (_3338 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3331 = _3258;
                            _3332 = _3259;
                            _3333 = _3260;
                            _3334 = _3261;
                            _3335 = _3262;
                            _3336 = _3263;
                            _3337 = _3338;
                        }
                    }
                    frontier_phi_71_pred = _3263;
                    frontier_phi_71_pred_1 = _3262;
                    frontier_phi_71_pred_2 = _3261;
                    frontier_phi_71_pred_3 = _3260;
                    frontier_phi_71_pred_4 = _3259;
                    frontier_phi_71_pred_5 = _3258;
                }
                _3045 = frontier_phi_71_pred;
                _3043 = frontier_phi_71_pred_1;
                _3041 = frontier_phi_71_pred_2;
                _3039 = frontier_phi_71_pred_3;
                _3037 = frontier_phi_71_pred_4;
                _3035 = frontier_phi_71_pred_5;
                uint _3193 = _3192 + 1u;
                if (_3193 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3186 = _3035;
                    _3187 = _3037;
                    _3188 = _3039;
                    _3189 = _3041;
                    _3190 = _3043;
                    _3191 = _3045;
                    _3192 = _3193;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3034 = _3035;
            _3036 = _3037;
            _3038 = _3039;
            _3040 = _3041;
            _3042 = _3043;
            _3044 = _3045;
        }
        uvec4 _3048 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3049 = _3048.z;
        uint _3051 = (_3049 >> 8u) & 15u;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        if (((4294967295u << _3051) & _2954) == 0u)
        {
            _3154 = _3034;
            _3156 = _3036;
            _3158 = _3038;
            _3160 = _3040;
            _3162 = _3042;
            _3164 = _3044;
        }
        else
        {
            float _3179 = inversesqrt(dot(vec3(_2032, _2033, _2034), vec3(_2032, _2033, _2034)));
            float _3180 = _3179 * _2032;
            float _3181 = _3179 * _2033;
            float _3182 = _3179 * _2034;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3051 < ((_3049 >> 12u) & 15u))
            {
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3163;
                float _3165;
                float _3314 = _3034;
                float _3315 = _3036;
                float _3316 = _3038;
                float _3317 = _3040;
                float _3318 = _3042;
                float _3319 = _3044;
                uint _3320 = _3051;
                uint _3329;
                bool _3330;
                for (;;)
                {
                    _3329 = texelFetch(g_lightClassification, int((((_2948 << 5u) + (_2934 << 9u)) + (_3320 << 2u)) >> 2u)).x;
                    _3330 = _3329 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3330)
                    {
                        frontier_phi_82_pred = _3319;
                        frontier_phi_82_pred_1 = _3318;
                        frontier_phi_82_pred_2 = _3317;
                        frontier_phi_82_pred_3 = _3316;
                        frontier_phi_82_pred_4 = _3315;
                        frontier_phi_82_pred_5 = _3314;
                    }
                    else
                    {
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3819;
                        float _3820;
                        float _3535 = _3314;
                        float _3536 = _3315;
                        float _3537 = _3316;
                        float _3538 = _3317;
                        float _3539 = _3318;
                        float _3540 = _3319;
                        uint _3541 = _3329;
                        uint _3542;
                        vec4 _3567;
                        float _3568;
                        vec4 _3583;
                        vec3 _3595;
                        vec4 _3610;
                        vec4 _3625;
                        float _3671;
                        bool _3672;
                        for (;;)
                        {
                            uint _3552 = ((_3320 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3541));
                            _3542 = (_3541 + 4294967295u) & _3541;
                            uint _3554 = _3552 * 40u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            _3568 = _3567.w;
                            uint _3570 = (_3552 * 40u) + 4u;
                            _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3585 = (_3552 * 40u) + 8u;
                            _3595 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x));
                            uint _3597 = (_3552 * 40u) + 16u;
                            _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            uint _3612 = (_3552 * 40u) + 20u;
                            _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            uint _3627 = (_3552 * 40u) + 24u;
                            vec4 _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            uint _3646 = (_3552 * 40u) + 28u;
                            vec4 _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            _3671 = fma(_2034, _3659.z, fma(_2033, _3659.y, _3659.x * _2032)) + _3659.w;
                            _3672 = !((fma(_2034, _3640.z, fma(_2033, _3640.y, _3640.x * _2032)) + _3640.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3672)
                            {
                                float _3699 = _3567.x - _2032;
                                float _3700 = _3567.y - _2033;
                                float _3701 = _3567.z - _2034;
                                float _3702 = dot(vec3(_3699, _3700, _3701), vec3(_3699, _3700, _3701));
                                float _3705 = inversesqrt(_3702);
                                float _3706 = _3705 * _3699;
                                float _3707 = _3705 * _3700;
                                float _3708 = _3705 * _3701;
                                float _3712 = 1.0 - (_3702 / (_3568 * _3568));
                                float _4932 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3713 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                                float _3717 = sqrt(_3702) * _3583.w;
                                float _3719 = 1.39999997615814208984375 / (_3717 + 1.39999997615814208984375);
                                float _3720 = _3719 * _3719;
                                float _3723 = ((1.0 - _3720) * dot(vec3(_3706, _3707, _3708), vec3(_886, _889, _892))) + _3720;
                                float _3726 = _3717 * _3717;
                                float _3730 = (fma(_2034, _3610.z, fma(_2033, _3610.y, _3610.x * _2032)) + _3610.w) / _3671;
                                float _3731 = (fma(_2034, _3625.z, fma(_2033, _3625.y, _3625.x * _2032)) + _3625.w) / _3671;
                                float _3735 = 1.0 - dot(vec2(_3730, _3731), vec2(_3730, _3731));
                                float _4948 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3736 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3737 = _3736 * (((isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0))) * _3713) / ((_3726 * 0.699999988079071044921875) + 1.0));
                                float _3749 = exp2(log2(1.0 / ((_3726 * 3.5) + 5.0)) * 0.25);
                                float _3750 = 1.0 - _946;
                                float _3757 = sqrt(1.0 - ((1.0 - (_3750 * _3750)) * (1.0 - (_3749 * _3749))));
                                float _3758 = _3757 * _3757;
                                float _3759 = _3758 * _3758;
                                float _3760 = _3706 - _3180;
                                float _3761 = _3707 - _3181;
                                float _3762 = _3708 - _3182;
                                float _3766 = inversesqrt(dot(vec3(_3760, _3761, _3762), vec3(_3760, _3761, _3762)));
                                float _3770 = dot(vec3(_886, _889, _892), vec3((-0.0) - _3180, (-0.0) - _3181, (-0.0) - _3182));
                                float _4959 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3773 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                                float _3774 = dot(vec3(_886, _889, _892), vec3(_3766 * _3760, _3766 * _3761, _3766 * _3762));
                                float _4970 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3777 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3781 = ((_3777 * _3777) * (_3759 + (-1.0))) + 1.0;
                                float _3782 = _3719 * _3758;
                                float _3783 = _3782 * _3782;
                                float _3789 = ((1.0 - _3783) * dot(vec3(_886, _889, _892), vec3(_3706, _3707, _3708))) + _3783;
                                float _4981 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3790 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3791 = 1.0 - _3758;
                                float _3801 = (0.5 / (((_3790 * ((_3773 * _3791) + _3758)) + 9.9999999392252902907785028219223e-09) + (((_3790 * _3791) + _3758) * _3773))) * _3790;
                                float _4992 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                                float _3811 = (_3736 * _3713) * (((_3759 * 3.1415927410125732421875) * (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0)))) / ((_3781 * _3781) * ((_3726 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3737 * _3583.z;
                                frontier_phi_88_pred_1 = _3737 * _3583.y;
                                frontier_phi_88_pred_2 = _3737 * _3583.x;
                                frontier_phi_88_pred_3 = _3811 * _3595.z;
                                frontier_phi_88_pred_4 = _3811 * _3595.y;
                                frontier_phi_88_pred_5 = _3811 * _3595.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3820 = frontier_phi_88_pred;
                            _3819 = frontier_phi_88_pred_1;
                            _3818 = frontier_phi_88_pred_2;
                            _3817 = frontier_phi_88_pred_3;
                            _3816 = frontier_phi_88_pred_4;
                            _3815 = frontier_phi_88_pred_5;
                            _3525 = _3818 + _3538;
                            _3526 = _3819 + _3539;
                            _3527 = _3820 + _3540;
                            _3522 = _3815 + _3535;
                            _3523 = _3816 + _3536;
                            _3524 = _3817 + _3537;
                            if (_3542 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3526;
                                _3540 = _3527;
                                _3541 = _3542;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3527;
                        frontier_phi_82_pred_1 = _3526;
                        frontier_phi_82_pred_2 = _3525;
                        frontier_phi_82_pred_3 = _3524;
                        frontier_phi_82_pred_4 = _3523;
                        frontier_phi_82_pred_5 = _3522;
                    }
                    _3165 = frontier_phi_82_pred;
                    _3163 = frontier_phi_82_pred_1;
                    _3161 = frontier_phi_82_pred_2;
                    _3159 = frontier_phi_82_pred_3;
                    _3157 = frontier_phi_82_pred_4;
                    _3155 = frontier_phi_82_pred_5;
                    uint _3321 = _3320 + 1u;
                    if (_3321 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3314 = _3155;
                        _3315 = _3157;
                        _3316 = _3159;
                        _3317 = _3161;
                        _3318 = _3163;
                        _3319 = _3165;
                        _3320 = _3321;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3161;
                frontier_phi_63_64_ladder_1 = _3165;
                frontier_phi_63_64_ladder_2 = _3163;
                frontier_phi_63_64_ladder_3 = _3159;
                frontier_phi_63_64_ladder_4 = _3157;
                frontier_phi_63_64_ladder_5 = _3155;
            }
            else
            {
                frontier_phi_63_64_ladder = _3040;
                frontier_phi_63_64_ladder_1 = _3044;
                frontier_phi_63_64_ladder_2 = _3042;
                frontier_phi_63_64_ladder_3 = _3038;
                frontier_phi_63_64_ladder_4 = _3036;
                frontier_phi_63_64_ladder_5 = _3034;
            }
            _3154 = frontier_phi_63_64_ladder_5;
            _3156 = frontier_phi_63_64_ladder_4;
            _3158 = frontier_phi_63_64_ladder_3;
            _3160 = frontier_phi_63_64_ladder;
            _3162 = frontier_phi_63_64_ladder_2;
            _3164 = frontier_phi_63_64_ladder_1;
        }
        float _3169 = isnan(1.0) ? _930 : (isnan(_930) ? 1.0 : min(_930, 1.0));
        _2967 = (_3169 * _3160) + _2498;
        _2969 = (_3169 * _3162) + _2500;
        _2971 = (_3169 * _3164) + _2502;
        _2973 = ((_3154 * 0.039999999105930328369140625) * _3169) + _2821;
        _2975 = ((_3156 * 0.039999999105930328369140625) * _3169) + _2823;
        _2977 = ((_3158 * 0.039999999105930328369140625) * _3169) + _2825;
    }
    else
    {
        _2967 = _2498;
        _2969 = _2500;
        _2971 = _2502;
        _2973 = _2821;
        _2975 = _2823;
        _2977 = _2825;
    }
    float _5008 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _5019 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _5030 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _2994 = ((isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0))) * (_2967 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _930))) + ((_2973 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1766)) * cbPerFrame._m0[3u].x);
    float _2995 = ((isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0))) * (_2969 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _930))) + ((_2975 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1766)) * cbPerFrame._m0[3u].x);
    float _2996 = ((isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * (_2971 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _930))) + ((_2977 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1766)) * cbPerFrame._m0[3u].x);
    uint _2997 = _257 + 6u;
    float _3005 = _867 / cbSceneParam._m0[86u].x;
    float _3006 = _868 / cbSceneParam._m0[86u].y;
    vec4 _3020 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3005, _3006, (log2((isnan(cbSceneParam._m0[77u].w) ? _789 : (isnan(_789) ? cbSceneParam._m0[77u].w : min(_789, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3022 = _3020.x;
    float _3023 = _3020.y;
    float _3024 = _3020.z;
    float _3025 = _3020.w;
    float _3096;
    float _3098;
    float _3100;
    float _3102;
    if (_789 > cbSceneParam._m0[78u].w)
    {
        float _3059 = isnan(_789) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _789 : min(cbSceneParam._m0[80u].w, _789));
        float _3060 = _3059 / _789;
        float _3071 = _3060 * _840;
        float _3072 = _841 * _3060;
        float _3073 = (-0.0) - _3072;
        float _3074 = _3060 * _842;
        float _3076 = (cbSceneParam._m0[77u].w * _3073) / _3059;
        float _3077 = _3076 + cbSceneParam._m0[79u].w;
        float _3078 = cbSceneParam._m0[79u].w - _3072;
        float _3084 = sqrt(((_3071 * _3071) + (_3072 * _3072)) + (_3074 * _3074));
        float _3087 = (1.0 - (cbSceneParam._m0[77u].w / _3059)) * _3084;
        float _3092 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3094 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3271;
        if (abs((_3073 - _3076) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3271 = ((((_3077 > 0.0) ? exp2(_3092 * _3077) : (2.0 - exp2(_3094 * _3077))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3087;
        }
        else
        {
            float _3215 = 1.0 / cbSceneParam._m0[80u].x;
            float _3216 = isnan(_3078) ? _3077 : (isnan(_3077) ? _3078 : max(_3077, _3078));
            float _3217 = isnan(_3078) ? _3077 : (isnan(_3077) ? _3078 : min(_3077, _3078));
            float _3226 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : min(_3216, 0.0));
            float _3227 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : min(_3217, 0.0));
            _3271 = ((abs(_3084 / _3073) * cbSceneParam._m0[80u].y) * ((((_3226 - _3227) * 2.0) - ((exp2(_3092 * (isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0)))) - exp2(_3092 * (isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0))))) * _3215)) - ((exp2(_3094 * _3226) - exp2(_3094 * _3227)) * _3215))) + (_3087 * cbSceneParam._m0[80u].z);
        }
        vec4 _3273 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3005, _3006, 1.0), 0.0);
        float _3282 = exp2((_3271 * (-1.44269502162933349609375)) * (1.0 - _3273.w));
        float _3283 = log2(_3282);
        float _3299 = log2(_3025);
        _3096 = (exp2(_3299 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3283 * cbSceneParam._m0[78u].x)) * _3273.x) / cbSceneParam._m0[78u].x)) + _3022;
        _3098 = (exp2(_3299 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3283 * cbSceneParam._m0[78u].y)) * _3273.y) / cbSceneParam._m0[78u].y)) + _3023;
        _3100 = (exp2(_3299 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3283 * cbSceneParam._m0[78u].z)) * _3273.z) / cbSceneParam._m0[78u].z)) + _3024;
        _3102 = _3282 * _3025;
    }
    else
    {
        _3096 = _3022;
        _3098 = _3023;
        _3100 = _3024;
        _3102 = _3025;
    }
    bool _3309;
    vec4 _3112;
    vec4 _3134;
    float _3136;
    float _3140;
    float _3141;
    float _3142;
    float _3143;
    bool _3153;
    for (;;)
    {
        _3112 = cbMatDynParam._m0[0u];
        float _3114 = roundEven(_3112.y);
        bool _3115 = _3114 == 3.0;
        float _3116 = log2(_3102);
        float _3123 = exp2(_3116 * cbSceneParam._m0[78u].x) * _2994;
        float _3124 = exp2(_3116 * cbSceneParam._m0[78u].y) * _2995;
        float _3125 = exp2(_3116 * cbSceneParam._m0[78u].z) * _2996;
        float _3132 = _856 + (-0.5);
        _3134 = cbMtdParam._m0[1u];
        _3136 = _3134.y * _3132;
        float _3139 = (_3114 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3140 = _3139 * (_3115 ? _3123 : (_3123 + (cbSceneParam._m0[72u].w * _3096)));
        _3141 = _3139 * (_3115 ? _3124 : (_3124 + (cbSceneParam._m0[72u].w * _3098)));
        _3142 = _3139 * (_3115 ? _3125 : (_3125 + (cbSceneParam._m0[72u].w * _3100)));
        _3143 = _3132 * 0.999000012874603271484375;
        _3153 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3153)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _3143) < 0.5)
            {
                _3309 = true;
                break;
            }
        }
        uint _3250 = _905 + uint(_3112.w);
        if ((cbInstanceData._m0[_3250].w < 1.0) && ((cbInstanceData._m0[_3250].w + _3143) < 0.5))
        {
            _3309 = true;
            break;
        }
        if ((_3136 + 1.0) < _3134.x)
        {
            _3309 = true;
            break;
        }
        _3309 = false;
        break;
    }
    float _3513;
    if (_3309)
    {
        discard_state = true;
        _3513 = 0.0;
    }
    else
    {
        _3513 = cbInstanceData._m0[_2997].w;
    }
    SV_Target.x = _3140;
    SV_Target.y = _3141;
    SV_Target.z = _3142;
    SV_Target.w = _3513;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2997].w;
    discard_exit();
}


