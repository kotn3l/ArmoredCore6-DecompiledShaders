#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1025;
float _3672;
float _3673;
float _3674;
float _3675;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _292 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _296 = _292.z;
    float _301 = (_292.x * 2.0) + (-1.0);
    float _303 = (_292.y * 2.0) + (-1.0);
    float _304 = dot(vec2(_301, _303), vec2(_301, _303));
    float _3684 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _310 = sqrt(1.0 - (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))));
    float _313 = fma(_310, _214, fma(_303, _221, _301 * _207));
    float _316 = fma(_310, _215, fma(_303, _222, _301 * _208));
    float _319 = fma(_310, _216, fma(_303, _223, _301 * _209));
    float _323 = inversesqrt(dot(vec3(_313, _316, _319), vec3(_313, _316, _319)));
    vec4 _359 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _361 = _359.x;
    float _362 = 1.0 - _361;
    float _369 = ((_361 - _362) * cbMtdParam._m0[24u].z) + _362;
    float _371 = (cbMtdParam._m0[19u].x + dot(vec4(_323 * _313, _323 * _316, _323 * _319, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_369 * cbMtdParam._m0[21u].z);
    float _3695 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _387 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_369 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3706 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _392 = ((_372 * (cbMtdParam._m0[17u].x - _272)) * _388) + _272;
    float _393 = ((_372 * (cbMtdParam._m0[17u].y - _273)) * _388) + _273;
    float _394 = ((_372 * (cbMtdParam._m0[17u].z - _274)) * _388) + _274;
    vec4 _407 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _414 = (_407.x * 2.0) + (-1.0);
    float _415 = (_407.y * 2.0) + (-1.0);
    float _416 = dot(vec2(_414, _415), vec2(_414, _415));
    float _3717 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _425 = (((_407.z - _296) * _372) * _388) + _296;
    float _440 = (((cbMtdParam._m0[21u].x * _301) + ((_414 - _301) * _372)) * _388) + _301;
    float _441 = (((cbMtdParam._m0[21u].x * _303) + ((_415 - _303) * _372)) * _388) + _303;
    float _442 = (((sqrt(1.0 - (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) - _310) * _372) * _388) + _310;
    float _447 = cbMtdParam._m0[22u].x + _292.w;
    float _450 = fma(_442, _214, fma(_441, _221, _440 * _207));
    float _453 = fma(_442, _215, fma(_441, _222, _440 * _208));
    float _456 = fma(_442, _216, fma(_441, _223, _440 * _209));
    float _460 = inversesqrt(dot(vec3(_450, _453, _456), vec3(_450, _453, _456)));
    float _461 = _460 * _450;
    float _462 = _460 * _453;
    float _463 = _460 * _456;
    float _3728 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _464 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3750 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _3761 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _3772 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _482 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _533 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _523);
    float _534 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _523);
    float _535 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _523);
    float _539 = inversesqrt(dot(vec3(_533, _534, _535), vec3(_533, _534, _535)));
    float _540 = _533 * _539;
    float _541 = _534 * _539;
    float _542 = _535 * _539;
    vec4 _547 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _549 = _547.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _706 = sqrt(((_533 * _533) + (_534 * _534)) + (_535 * _535));
        float _712 = (cbMatDynParam._m0[5u].x * _706) + cbMatDynParam._m0[5u].y;
        float _3783 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _717 = (cbMatDynParam._m0[5u].z * _706) + cbMatDynParam._m0[5u].w;
        float _3794 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) - _713)) + _713) < ((_549 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _561 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _562 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _582 = fma(_463, cbSceneParam._m0[5u].z, fma(_462, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _461));
    float _585 = fma(_463, cbSceneParam._m0[6u].z, fma(_462, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _461));
    float _588 = fma(_463, cbSceneParam._m0[7u].z, fma(_462, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _461));
    uint _601 = _226 + 9u;
    uint _602 = _601 + uint(cbMatDynParam._m0[0u].w);
    float _608 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_602].x;
    float _609 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_602].y;
    float _610 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * cbInstanceData._m0[_602].z;
    float _3805 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _3827 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    vec4 _622 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _561, cbSceneParam._m0[86u].y * _562));
    float _626 = ((isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * TEXCOORD_5.w) * _622.x;
    float _627 = dot(vec3(_461, _462, _463), vec3(_540, _541, _542));
    float _630 = _627 * 2.0;
    float _634 = (_630 * _461) - _540;
    float _635 = (_630 * _462) - _541;
    float _636 = (_630 * _463) - _542;
    float _640 = abs(dot(vec3(_540, _541, _542), vec3(_461, _462, _463)));
    float _3838 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _642 = sqrt(_464);
    float _655 = exp2((_642 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_642 * 3.0));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1024;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _749 = fma(_695, cbModelParam._m0[26u].z, fma(_691, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _687));
        float _753 = fma(_695, cbModelParam._m0[27u].z, fma(_691, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _687));
        float _757 = fma(_695, cbModelParam._m0[28u].z, fma(_691, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _687));
        float _782 = _687 + _461;
        float _783 = _691 + _462;
        float _784 = _695 + _463;
        float _794 = fma(_784, cbModelParam._m0[26u].z, fma(_783, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _782)) - _749;
        float _795 = fma(_784, cbModelParam._m0[27u].z, fma(_783, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _782)) - _753;
        float _796 = fma(_784, cbModelParam._m0[28u].z, fma(_783, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _782)) - _757;
        float _800 = inversesqrt(dot(vec3(_794, _795, _796), vec3(_794, _795, _796)));
        float _813 = ((_800 * _794) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_749 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _814 = ((_800 * _795) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_753 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _815 = ((_800 * _796) / cbModelParam._m0[34u].z) + ((((((_757 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_813, _814, _815), 0.0);
        float _852 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_818.x + (-0.5));
        float _854 = _852 * (_818.y + (-0.5));
        float _855 = _852 * (_818.z + (-0.5));
        float _862 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_825.x + (-0.5));
        float _864 = _862 * (_825.y + (-0.5));
        float _865 = _862 * (_825.z + (-0.5));
        float _872 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_832.x + (-0.5));
        float _874 = _872 * (_832.y + (-0.5));
        float _875 = _872 * (_832.z + (-0.5));
        float _882 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_839.x + (-0.5));
        float _884 = _882 * (_839.y + (-0.5));
        float _885 = _882 * (_839.z + (-0.5));
        float _886 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = _853 * 0.5;
        float _890 = _863 * 0.5;
        float _891 = _873 * 0.5;
        float _892 = dot(vec3(_889, _890, _891), vec3(_889, _890, _891));
        float _897 = (_892 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_892);
        float _906 = (dot(vec3(_461, _462, _463), vec3(_897 * _889, _897 * _890, _897 * _891)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _916 = sqrt(((_890 * _890) + (_889 * _889)) + (_891 * _891)) / (_886 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _918 = _917 * 2.0;
        float _922 = (1.0 - _917) / (_917 + 1.0);
        float _3886 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _932 = ((((1.0 - _923) * (_918 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_918 + 1.0))) + _923) * _886;
        float _933 = _854 * 0.5;
        float _934 = _864 * 0.5;
        float _935 = _874 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _949 = (dot(vec3(_461, _462, _463), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _958 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3919 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_960 + 1.0))) + _965) * _887;
        float _975 = _855 * 0.5;
        float _976 = _865 * 0.5;
        float _977 = _875 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_461, _462, _463), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3952 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1002 + 1.0))) + _1007) * _888;
        _1024 = _855;
        _1026 = _854;
        _1027 = _853;
        _1028 = _865;
        _1029 = _864;
        _1030 = _863;
        _1031 = _875;
        _1032 = _874;
        _1033 = _873;
        _1034 = _888;
        _1035 = _887;
        _1036 = _886;
        _1037 = cbModelParam._m0[36u].z * (isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0)));
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
    }
    else
    {
        _1024 = _1025;
        _1026 = _1025;
        _1027 = _1025;
        _1028 = _1025;
        _1029 = _1025;
        _1030 = _1025;
        _1031 = _1025;
        _1032 = _1025;
        _1033 = _1025;
        _1034 = _1025;
        _1035 = _1025;
        _1036 = _1025;
        _1037 = 0.0;
        _1038 = 0.0;
        _1039 = 0.0;
    }
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1067 = fma(_695, cbModelParam._m0[30u].z, fma(_691, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _687));
        float _1071 = fma(_695, cbModelParam._m0[31u].z, fma(_691, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _687));
        float _1075 = fma(_695, cbModelParam._m0[32u].z, fma(_691, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _687));
        float _1098 = _687 + _461;
        float _1099 = _691 + _462;
        float _1100 = _695 + _463;
        float _1110 = fma(_1100, cbModelParam._m0[30u].z, fma(_1099, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1098)) - _1067;
        float _1111 = fma(_1100, cbModelParam._m0[31u].z, fma(_1099, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1098)) - _1071;
        float _1112 = fma(_1100, cbModelParam._m0[32u].z, fma(_1099, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1098)) - _1075;
        float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
        float _1129 = ((_1116 * _1110) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1067 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1116 * _1111) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1071 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1116 * _1112) / cbModelParam._m0[35u].z) + ((((((_1075 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        float _1166 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1133.x + (-0.5));
        float _1168 = _1166 * (_1133.y + (-0.5));
        float _1169 = _1166 * (_1133.z + (-0.5));
        float _1176 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1140.x + (-0.5));
        float _1178 = _1176 * (_1140.y + (-0.5));
        float _1179 = _1176 * (_1140.z + (-0.5));
        float _1186 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1147.x + (-0.5));
        float _1188 = _1186 * (_1147.y + (-0.5));
        float _1189 = _1186 * (_1147.z + (-0.5));
        float _1196 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1154.x + (-0.5));
        float _1198 = _1196 * (_1154.y + (-0.5));
        float _1199 = _1196 * (_1154.z + (-0.5));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = _1167 * 0.5;
        float _1204 = _1177 * 0.5;
        float _1205 = _1187 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_461, _462, _463), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _4015 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1230 + 1.0))) + _1235) * _1200;
        float _1245 = _1168 * 0.5;
        float _1246 = _1178 * 0.5;
        float _1247 = _1188 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_461, _462, _463), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4048 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1272 + 1.0))) + _1277) * _1201;
        float _1287 = _1169 * 0.5;
        float _1288 = _1179 * 0.5;
        float _1289 = _1189 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_461, _462, _463), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4081 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1314 + 1.0))) + _1319) * _1202;
        _1336 = _1169;
        _1337 = _1168;
        _1338 = _1167;
        _1339 = _1179;
        _1340 = _1178;
        _1341 = _1177;
        _1342 = _1189;
        _1343 = _1188;
        _1344 = _1187;
        _1345 = _1202;
        _1346 = _1201;
        _1347 = _1200;
        _1348 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1350 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
    }
    else
    {
        _1336 = _1025;
        _1337 = _1025;
        _1338 = _1025;
        _1339 = _1025;
        _1340 = _1025;
        _1341 = _1025;
        _1342 = _1025;
        _1343 = _1025;
        _1344 = _1025;
        _1345 = _1025;
        _1346 = _1025;
        _1347 = _1025;
        _1348 = 0.0;
        _1349 = 0.0;
        _1350 = 0.0;
    }
    float _1360 = (cbModelParam._m0[1u].x * (_1348 - _1037)) + _1037;
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1038)) + _1038;
    float _1362 = (cbModelParam._m0[1u].x * (_1350 - _1039)) + _1039;
    float _1383 = fma(_1362, cbSceneParam._m0[89u].z, fma(_1361, cbSceneParam._m0[89u].y, _1360 * cbSceneParam._m0[89u].x));
    float _1386 = fma(_1362, cbSceneParam._m0[90u].z, fma(_1361, cbSceneParam._m0[90u].y, _1360 * cbSceneParam._m0[90u].x));
    float _1389 = fma(_1362, cbSceneParam._m0[91u].z, fma(_1361, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1360));
    float _1404 = _634 * 0.5;
    float _1405 = _635 * 0.5;
    float _1406 = _636 * 0.5;
    float _1407 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1338, _1341, _1344, _1347));
    float _1410 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1413 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1336, _1339, _1342, _1345));
    float _1447;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1420 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1024, _1028, _1031, _1034));
        float _1424 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1026, _1029, _1032, _1035));
        float _1428 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1027, _1030, _1033, _1036));
        float _1435 = dot(vec4(cbModelParam._m0[39u]), vec4(_1404, _1405, _1406, 1.0));
        _1447 = dot(vec3(isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1435) ? 0.0 : (isnan(0.0) ? _1435 : max(0.0, _1435))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1447 = 1.0;
    }
    float _1458;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1449 = dot(vec4(cbModelParam._m0[40u]), vec4(_1404, _1405, _1406, 1.0));
        _1458 = dot(vec3(isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1449) ? 0.0 : (isnan(0.0) ? _1449 : max(0.0, _1449))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1458 = 1.0;
    }
    float _1462 = (_1458 * cbModelParam._m0[1u].x) + (_1447 * (1.0 - cbModelParam._m0[1u].x));
    float _1472 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _464);
    float _1473 = isnan(_1472) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1472 : min(cbModelParam._m0[25u].z, _1472));
    float _1554;
    float _1556;
    float _1558;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1521 = fma(_695, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687)) + cbModelParam._m0[13u].w;
        float _1525 = fma(_695, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687)) + cbModelParam._m0[14u].w;
        float _1529 = fma(_695, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687)) + cbModelParam._m0[15u].w;
        float _1532 = fma(_636, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634));
        float _1535 = fma(_636, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634));
        float _1538 = fma(_636, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634));
        float _1566;
        if (_1532 > 0.0)
        {
            _1566 = abs((1.0 - _1521) / _1532);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1521 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1566 = frontier_phi_17_15_ladder;
        }
        float _1737;
        if (_1535 > 0.0)
        {
            _1737 = abs((1.0 - _1525) / _1535);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1525 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1737 = frontier_phi_26_22_ladder;
        }
        float _2033;
        if (_1538 > 0.0)
        {
            _2033 = abs((1.0 - _1529) / _1538);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1529 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2033 = frontier_phi_38_33_ladder;
        }
        float _2035 = isnan(_1737) ? _1566 : (isnan(_1566) ? _1737 : min(_1566, _1737));
        float _2036 = isnan(_2033) ? _2035 : (isnan(_2035) ? _2033 : min(_2035, _2033));
        float _2040 = (_2036 * _1532) + _1521;
        float _2041 = (_2036 * _1535) + _1525;
        float _2042 = (_2036 * _1538) + _1529;
        float _2043 = _2036 * 9.9999997473787516355514526367188e-05;
        float _2045 = (-1.0) - _2043;
        float _2047 = _2043 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2042 > _2047) || ((_2042 < _2045) || ((_2041 > _2047) || ((_2041 < _2045) || ((_2040 < _2045) || (_2040 > _2047))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2187 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2042, cbModelParam._m0[9u].z, fma(_2041, cbModelParam._m0[9u].y, _2040 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2042, cbModelParam._m0[10u].z, fma(_2041, cbModelParam._m0[10u].y, _2040 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2042, cbModelParam._m0[11u].z, fma(_2041, cbModelParam._m0[11u].y, _2040 * cbModelParam._m0[11u].x))), _1473);
            frontier_phi_16_38_ladder = _2187.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2187.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2187.x * cbModelParam._m0[1u].y;
        }
        _1554 = frontier_phi_16_38_ladder_2;
        _1556 = frontier_phi_16_38_ladder_1;
        _1558 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_634, _635, _636), _1473);
        _1554 = _1542.x * cbModelParam._m0[1u].y;
        _1556 = _1542.y * cbModelParam._m0[1u].y;
        _1558 = _1542.z * cbModelParam._m0[1u].y;
    }
    float _1562 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _464);
    float _1563 = isnan(_1562) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1562 : min(cbModelParam._m0[25u].w, _1562));
    float _1653;
    float _1655;
    float _1657;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1617 = fma(_695, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687)) + cbModelParam._m0[21u].w;
        float _1621 = fma(_695, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687)) + cbModelParam._m0[22u].w;
        float _1625 = fma(_695, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687)) + cbModelParam._m0[23u].w;
        float _1628 = fma(_636, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634));
        float _1631 = fma(_636, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634));
        float _1634 = fma(_636, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634));
        float _1742;
        if (_1628 > 0.0)
        {
            _1742 = abs((1.0 - _1617) / _1628);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1617 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1742 = frontier_phi_28_24_ladder;
        }
        float _2060;
        if (_1631 > 0.0)
        {
            _2060 = abs((1.0 - _1621) / _1631);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1621 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2060 = frontier_phi_40_35_ladder;
        }
        float _2387;
        if (_1634 > 0.0)
        {
            _2387 = abs((1.0 - _1625) / _1634);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1625 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2387 = frontier_phi_50_47_ladder;
        }
        float _2389 = isnan(_2060) ? _1742 : (isnan(_1742) ? _2060 : min(_1742, _2060));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1628) + _1617;
        float _2395 = (_2390 * _1631) + _1621;
        float _2396 = (_2390 * _1634) + _1625;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2397;
        float _2400 = _2397 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2396 > _2400) || ((_2396 < _2398) || ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 < _2398) || (_2394 > _2400))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2514 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2396, cbModelParam._m0[17u].z, fma(_2395, cbModelParam._m0[17u].y, _2394 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2396, cbModelParam._m0[18u].z, fma(_2395, cbModelParam._m0[18u].y, _2394 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2396, cbModelParam._m0[19u].z, fma(_2395, cbModelParam._m0[19u].y, _2394 * cbModelParam._m0[19u].x))), _1563);
            frontier_phi_25_50_ladder = _2514.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2514.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2514.x * cbModelParam._m0[1u].z;
        }
        _1653 = frontier_phi_25_50_ladder_2;
        _1655 = frontier_phi_25_50_ladder_1;
        _1657 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1637 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_634, _635, _636), _1563);
        _1653 = _1637.x * cbModelParam._m0[1u].z;
        _1655 = _1637.y * cbModelParam._m0[1u].z;
        _1657 = _1637.z * cbModelParam._m0[1u].z;
    }
    float _1669 = ((((1.0 - _655) * ((_642 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_655 * _642)) * _626;
    float _1670 = _1669 * ((cbModelParam._m0[1u].w * (_1653 - _1554)) + _1554);
    float _1671 = _1669 * ((cbModelParam._m0[1u].w * (_1655 - _1556)) + _1556);
    float _1672 = _1669 * ((cbModelParam._m0[1u].w * (_1657 - _1558)) + _1558);
    float _1675 = fma(_1672, cbSceneParam._m0[89u].z, fma(_1671, cbSceneParam._m0[89u].y, _1670 * cbSceneParam._m0[89u].x));
    float _1678 = fma(_1672, cbSceneParam._m0[90u].z, fma(_1671, cbSceneParam._m0[90u].y, _1670 * cbSceneParam._m0[90u].x));
    float _1681 = fma(_1672, cbSceneParam._m0[91u].z, fma(_1671, cbSceneParam._m0[91u].y, _1670 * cbSceneParam._m0[91u].x));
    float _1716 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1720 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1724 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1728 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1729 = _1716 / _1728;
    float _1730 = _1720 / _1728;
    float _1731 = _1724 / _1728;
    float _1878;
    float _1879;
    float _1880;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1758 = ((uint(_1731 > cbSceneParam._m0[59u].y) + uint(_1731 > cbSceneParam._m0[59u].x)) + uint(_1731 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1759 = _1758 + 43u;
        uint _1767 = _1758 + 44u;
        uint _1775 = _1758 + 45u;
        uint _1783 = _1758 + 46u;
        float _1794 = fma(_1728, cbSceneParam._m0[_1759].w, fma(_1724, cbSceneParam._m0[_1759].z, fma(_1720, cbSceneParam._m0[_1759].y, _1716 * cbSceneParam._m0[_1759].x)));
        float _1798 = fma(_1728, cbSceneParam._m0[_1767].w, fma(_1724, cbSceneParam._m0[_1767].z, fma(_1720, cbSceneParam._m0[_1767].y, _1716 * cbSceneParam._m0[_1767].x)));
        float _1806 = fma(_1728, cbSceneParam._m0[_1783].w, fma(_1724, cbSceneParam._m0[_1783].z, fma(_1720, cbSceneParam._m0[_1783].y, _1716 * cbSceneParam._m0[_1783].x)));
        float _1811 = cbSceneParam._m0[33u].z * _1806;
        float _1813 = cbSceneParam._m0[33u].w * _1806;
        float _1816 = fma(_1728, cbSceneParam._m0[_1775].w, fma(_1724, cbSceneParam._m0[_1775].z, fma(_1720, cbSceneParam._m0[_1775].y, _1716 * cbSceneParam._m0[_1775].x))) / _1806;
        float _1864 = (cbSceneParam._m0[33u].x - sqrt(((_1730 * _1730) + (_1729 * _1729)) + (_1731 * _1731))) * cbSceneParam._m0[33u].y;
        float _4207 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1871 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1811 + _1794) / _1806, (_1813 + _1798) / _1806), _1816), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1813 + _1794) / _1806, (_1798 - _1811) / _1806), _1816), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1794 - _1811) / _1806, (_1798 - _1813) / _1806), _1816), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1794 - _1813) / _1806, (_1811 + _1798) / _1806), _1816), 0.0)).x), vec4(0.25)));
        _1878 = 1.0 - (_1871 * cbSceneParam._m0[34u].x);
        _1879 = 1.0 - (_1871 * cbSceneParam._m0[34u].y);
        _1880 = 1.0 - (_1871 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1878 = 1.0;
        _1879 = 1.0;
        _1880 = 1.0;
    }
    float _1944;
    float _1946;
    float _1948;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1932 = fma(_1728, cbSceneParam._m0[63u].w, fma(_1724, cbSceneParam._m0[63u].z, fma(_1720, cbSceneParam._m0[63u].y, _1716 * cbSceneParam._m0[63u].x)));
        float _1933 = fma(_1728, cbSceneParam._m0[60u].w, fma(_1724, cbSceneParam._m0[60u].z, fma(_1720, cbSceneParam._m0[60u].y, _1716 * cbSceneParam._m0[60u].x))) / _1932;
        float _1934 = fma(_1728, cbSceneParam._m0[61u].w, fma(_1724, cbSceneParam._m0[61u].z, fma(_1720, cbSceneParam._m0[61u].y, _1716 * cbSceneParam._m0[61u].x))) / _1932;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1933 >= cbSceneParam._m0[64u].x) && (_1934 >= cbSceneParam._m0[64u].y)) && (_1933 <= cbSceneParam._m0[64u].z)) && (_1934 <= cbSceneParam._m0[64u].w))
        {
            float _2073 = fma(_1728, cbSceneParam._m0[62u].w, fma(_1724, cbSceneParam._m0[62u].z, fma(_1720, cbSceneParam._m0[62u].y, _1716 * cbSceneParam._m0[62u].x))) / _1932;
            float _2077 = isnan(cbSceneParam._m0[41u].w) ? _2073 : (isnan(_2073) ? cbSceneParam._m0[41u].w : max(_2073, cbSceneParam._m0[41u].w));
            float _2120 = (cbSceneParam._m0[33u].x - sqrt(((_1730 * _1730) + (_1729 * _1729)) + (_1731 * _1731))) * cbSceneParam._m0[33u].y;
            float _4223 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
            float _2127 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1933, cbSceneParam._m0[33u].w + _1934), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1933, _1934 - cbSceneParam._m0[33u].z), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1933 - cbSceneParam._m0[33u].z, _1934 - cbSceneParam._m0[33u].w), _2077), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1933 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1934), _2077), 0.0)).x), vec4(0.25)));
            float _2131 = 1.0 - (_2127 * cbSceneParam._m0[34u].x);
            float _2132 = 1.0 - (_2127 * cbSceneParam._m0[34u].y);
            float _2133 = 1.0 - (_2127 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2133) ? _1880 : (isnan(_1880) ? _2133 : min(_1880, _2133));
            frontier_phi_37_36_ladder_1 = isnan(_2132) ? _1879 : (isnan(_1879) ? _2132 : min(_1879, _2132));
            frontier_phi_37_36_ladder_2 = isnan(_2131) ? _1878 : (isnan(_1878) ? _2131 : min(_1878, _2131));
        }
        else
        {
            frontier_phi_37_36_ladder = _1880;
            frontier_phi_37_36_ladder_1 = _1879;
            frontier_phi_37_36_ladder_2 = _1878;
        }
        _1944 = frontier_phi_37_36_ladder_2;
        _1946 = frontier_phi_37_36_ladder_1;
        _1948 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1944 = _1878;
        _1946 = _1879;
        _1948 = _1880;
    }
    uvec4 _1953 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1955 = _1953.x * 14u;
    uint _1956 = _1955 + 13u;
    float _1963 = _626 + (-1.0);
    float _1968 = (cbLight._m0[_1956].x * _1963) + 1.0;
    float _1969 = (cbLight._m0[_1956].y * _1963) + 1.0;
    float _1970 = (cbLight._m0[_1956].z * _1963) + 1.0;
    float _1971 = (cbLight._m0[_1956].w * _1963) + 1.0;
    uint _1972 = _1955 + 5u;
    float _1978 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
    uint _1982 = _1955 + 4u;
    float _1992 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    uint _1996 = _1955 | 1u;
    float _2007 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_461, _462, _463));
    float _2010 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_461, _462, _463));
    float _4259 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _4270 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2015 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * 0.3183098733425140380859375;
    float _2017 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * 0.3183098733425140380859375;
    float _2024 = ((cbLight._m0[_1972].x * _1978) * _2017) + (((cbLight._m0[_1982].x * _1944) * _1992) * _2015);
    float _2025 = ((_1978 * cbLight._m0[_1972].y) * _2017) + (((cbLight._m0[_1982].y * _1946) * _1992) * _2015);
    float _2026 = ((_1978 * cbLight._m0[_1972].z) * _2017) + (((cbLight._m0[_1982].z * _1948) * _1992) * _2015);
    uvec4 _2030 = floatBitsToUint(cbLight._m0[_1955 + 12u]);
    bool _2032 = _2030.x == 0u;
    float _2134;
    float _2136;
    float _2138;
    if (_2032)
    {
        _2134 = _2024;
        _2136 = _2025;
        _2138 = _2026;
    }
    else
    {
        uint _2142 = _1955 + 6u;
        float _2158 = (dot(vec3(cbLight._m0[_1955 + 2u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _2159 = _2158 * _2158;
        float _4281 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2160 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2161 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2134 = (((cbLight._m0[_2142].x * 0.3183098733425140380859375) * _2160) * _2161) + _2024;
        _2136 = (((cbLight._m0[_2142].y * 0.3183098733425140380859375) * _2160) * _2161) + _2025;
        _2138 = (((cbLight._m0[_2142].z * 0.3183098733425140380859375) * _2160) * _2161) + _2026;
    }
    bool _2141 = _2030.y == 0u;
    float _2196;
    float _2198;
    float _2200;
    if (_2141)
    {
        _2196 = _2134;
        _2198 = _2136;
        _2200 = _2138;
    }
    else
    {
        uint _2358 = _1955 + 7u;
        float _2374 = (dot(vec3(cbLight._m0[_1955 + 3u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _2375 = _2374 * _2374;
        float _4297 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2376 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2377 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2196 = (((cbLight._m0[_2358].x * 0.3183098733425140380859375) * _2376) * _2377) + _2134;
        _2198 = (((cbLight._m0[_2358].y * 0.3183098733425140380859375) * _2376) * _2377) + _2136;
        _2200 = (((cbLight._m0[_2358].z * 0.3183098733425140380859375) * _2376) * _2377) + _2138;
    }
    uint _2203 = _1955 + 8u;
    float _2216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _464) * 0.949999988079071044921875);
    float _2217 = _2216 * _2216;
    float _2218 = cbLight._m0[_1955].x + _540;
    float _2219 = cbLight._m0[_1955].y + _541;
    float _2220 = cbLight._m0[_1955].z + _542;
    float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
    float _2225 = _2224 * _2218;
    float _2226 = _2224 * _2219;
    float _2227 = _2224 * _2220;
    float _2228 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1955].xyz));
    float _4313 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _4324 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _2232 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _2233 = dot(vec3(_461, _462, _463), vec3(_2225, _2226, _2227));
    float _4335 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2236 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2237 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_2225, _2226, _2227));
    float _4346 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2241 = _2217 * _2217;
    float _2245 = ((_2236 * _2236) * (_2241 + (-1.0))) + 1.0;
    float _2256 = (exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2257 = 1.0 - _2217;
    float _2268 = (0.5 / (((_2232 * ((_2231 * _2257) + _2217)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2257) + _2217) * _2231))) * _2231;
    float _4357 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2270 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2241 / ((_2245 * _2245) * 3.141590118408203125));
    uint _2284 = _1955 + 9u;
    float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1996].w)) * _464) * 0.949999988079071044921875);
    float _2296 = _2295 * _2295;
    float _2297 = cbLight._m0[_1996].x + _540;
    float _2298 = cbLight._m0[_1996].y + _541;
    float _2299 = cbLight._m0[_1996].z + _542;
    float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
    float _2304 = _2303 * _2297;
    float _2305 = _2303 * _2298;
    float _2306 = _2303 * _2299;
    float _2307 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1996].xyz));
    float _4368 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _2311 = dot(vec3(_461, _462, _463), vec3(_2304, _2305, _2306));
    float _4379 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _2315 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_2304, _2305, _2306));
    float _4390 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2319 = _2296 * _2296;
    float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
    float _2332 = (exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2333 = 1.0 - _2296;
    float _2343 = (0.5 / (((_2232 * ((_2310 * _2333) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2333) + _2296) * _2310))) * _2310;
    float _4401 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2345 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
    float _2355 = (((_2332 * cbLight._m0[_2284].x) * _2345) * _1978) + ((((cbLight._m0[_2203].x * _1944) * _2256) * _2270) * _1992);
    float _2356 = (((_2332 * cbLight._m0[_2284].y) * _2345) * _1978) + ((((cbLight._m0[_2203].y * _1946) * _2256) * _2270) * _1992);
    float _2357 = (((_2332 * cbLight._m0[_2284].z) * _2345) * _1978) + ((((cbLight._m0[_2203].z * _1948) * _2256) * _2270) * _1992);
    float _2413;
    float _2415;
    float _2417;
    if (_2032)
    {
        _2413 = _2355;
        _2415 = _2356;
        _2417 = _2357;
    }
    else
    {
        uint _2419 = _1955 + 2u;
        uint _2423 = _1955 + 10u;
        float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _464) * 0.949999988079071044921875);
        float _2438 = _2437 * _2437;
        float _2439 = cbLight._m0[_2419].x + _540;
        float _2440 = cbLight._m0[_2419].y + _541;
        float _2441 = cbLight._m0[_2419].z + _542;
        float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
        float _2446 = _2445 * _2439;
        float _2447 = _2445 * _2440;
        float _2448 = _2445 * _2441;
        float _2449 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2419].xyz));
        float _4412 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2453 = dot(vec3(_461, _462, _463), vec3(_2446, _2447, _2448));
        float _4423 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2457 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2446, _2447, _2448));
        float _4434 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2461 = _2438 * _2438;
        float _2465 = ((_2456 * _2456) * (_2461 + (-1.0))) + 1.0;
        float _2474 = (exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2475 = 1.0 - _2438;
        float _2485 = (0.5 / (((_2232 * ((_2452 * _2475) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2475) + _2438) * _2452))) * _2452;
        float _4445 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2487 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2461 / ((_2465 * _2465) * 3.141590118408203125));
        float _2488 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2413 = (((_2474 * cbLight._m0[_2423].x) * _2487) * _2488) + _2355;
        _2415 = (((_2474 * cbLight._m0[_2423].y) * _2487) * _2488) + _2356;
        _2417 = (((_2474 * cbLight._m0[_2423].z) * _2487) * _2488) + _2357;
    }
    float _2519;
    float _2521;
    float _2523;
    if (_2141)
    {
        _2519 = _2413;
        _2521 = _2415;
        _2523 = _2417;
    }
    else
    {
        uint _2530 = _1955 + 3u;
        uint _2534 = _1955 + 11u;
        float _2548 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2530].w)) * _464) * 0.949999988079071044921875);
        float _2549 = _2548 * _2548;
        float _2550 = cbLight._m0[_2530].x + _540;
        float _2551 = cbLight._m0[_2530].y + _541;
        float _2552 = cbLight._m0[_2530].z + _542;
        float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
        float _2557 = _2556 * _2550;
        float _2558 = _2556 * _2551;
        float _2559 = _2556 * _2552;
        float _2560 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2530].xyz));
        float _4461 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2564 = dot(vec3(_461, _462, _463), vec3(_2557, _2558, _2559));
        float _4472 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2567 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2568 = dot(vec3(cbLight._m0[_2530].xyz), vec3(_2557, _2558, _2559));
        float _4483 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2572 = _2549 * _2549;
        float _2576 = ((_2567 * _2567) * (_2572 + (-1.0))) + 1.0;
        float _2585 = (exp2(log2(1.0 - (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2586 = 1.0 - _2549;
        float _2596 = (0.5 / (((_2232 * ((_2563 * _2586) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2232 * _2586) + _2549) * _2563))) * _2563;
        float _4494 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2598 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2572 / ((_2576 * _2576) * 3.141590118408203125));
        float _2599 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2519 = (((_2585 * cbLight._m0[_2534].x) * _2598) * _2599) + _2413;
        _2521 = (((_2585 * cbLight._m0[_2534].y) * _2598) * _2599) + _2415;
        _2523 = (((_2585 * cbLight._m0[_2534].z) * _2598) * _2599) + _2417;
    }
    float _2665;
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    if (_1953.y == 0u)
    {
        uvec4 _2620 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2621 = _2620.x;
        uint _2632 = uint((float(_2620.y) * floor(float(uint(cbSceneParam._m0[85u].y * _562) / _2621))) + floor(float(uint(cbSceneParam._m0[85u].x * _561) / _2621)));
        float _2642 = (log2(_1731 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2643 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        uint _2646 = uint(isnan(14.0) ? _2643 : (isnan(_2643) ? 14.0 : min(_2643, 14.0)));
        uvec4 _2651 = texelFetch(g_lightClusterGridBuffer, int(((_2646 << 2u) + (_2632 << 6u)) >> 2u));
        uint _2652 = _2651.x;
        uint _2653 = _2620.z;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        if (((((1u << ((_2653 >> 4u) & 15u)) + 4294967295u) & _2652) == 0u) || ((_2653 & 240u) == 0u))
        {
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
            _2742 = 0.0;
        }
        else
        {
            float _2733;
            float _2735;
            float _2737;
            float _2739;
            float _2741;
            float _2743;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            uint _2891 = 0u;
            uint _2900;
            bool _2901;
            for (;;)
            {
                _2900 = texelFetch(g_lightClassification, int((((_2646 << 5u) + (_2632 << 9u)) + (_2891 << 2u)) >> 2u)).x;
                _2901 = _2900 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2901)
                {
                    frontier_phi_71_pred = _2890;
                    frontier_phi_71_pred_1 = _2889;
                    frontier_phi_71_pred_2 = _2888;
                    frontier_phi_71_pred_3 = _2887;
                    frontier_phi_71_pred_4 = _2886;
                    frontier_phi_71_pred_5 = _2885;
                }
                else
                {
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    uint _3036;
                    _3030 = _2885;
                    _3031 = _2886;
                    _3032 = _2887;
                    _3033 = _2888;
                    _3034 = _2889;
                    _3035 = _2890;
                    _3036 = _2900;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    for (;;)
                    {
                        uint _3040 = uint(findLSB(_3036)) + (_2891 << 5u);
                        uint _3037 = (_3036 + 4294967295u) & _3036;
                        uint _3042 = _3040 * 48u;
                        vec4 _3056 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3042)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 3u)).x));
                        uint _3062 = (_3040 * 48u) + 4u;
                        vec4 _3075 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3062)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 3u)).x));
                        uint _3081 = (_3040 * 48u) + 8u;
                        vec3 _3092 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x));
                        float _3096 = _3056.x - _1729;
                        float _3097 = _3056.y - _1730;
                        float _3098 = _3056.z - _1731;
                        float _3099 = dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098));
                        float _3102 = inversesqrt(_3099);
                        float _3103 = _3102 * _3096;
                        float _3104 = _3102 * _3097;
                        float _3105 = _3102 * _3098;
                        float _3106 = dot(vec3(_582, _585, _588), vec3(_3103, _3104, _3105));
                        float _3111 = 1.0 - (_3099 * _3056.w);
                        float _4520 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3112 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3113 = sqrt(_3099) * _3075.w;
                        float _3116 = 1.39999997615814208984375 / (_3113 + 1.39999997615814208984375);
                        float _3117 = _3116 * _3116;
                        float _3120 = ((1.0 - _3117) * _3106) + _3117;
                        float _3123 = _3113 * _3113;
                        float _3127 = ((isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0))) * _3112) / ((_3123 * 0.699999988079071044921875) + 1.0);
                        float _3131 = (-0.0) - _1729;
                        float _3132 = (-0.0) - _1730;
                        float _3133 = (-0.0) - _1731;
                        float _3137 = inversesqrt(dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133)));
                        float _3138 = _3137 * _3131;
                        float _3139 = _3137 * _3132;
                        float _3140 = _3137 * _3133;
                        float _3147 = exp2(log2(1.0 / ((_3123 * 3.5) + 5.0)) * 0.25);
                        float _3148 = 1.0 - _642;
                        float _3155 = sqrt(1.0 - ((1.0 - (_3148 * _3148)) * (1.0 - (_3147 * _3147))));
                        float _3156 = _3155 * _3155;
                        float _3157 = _3156 * _3156;
                        float _3158 = _3138 + _3103;
                        float _3159 = _3139 + _3104;
                        float _3160 = _3140 + _3105;
                        float _3164 = inversesqrt(dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160)));
                        float _3168 = dot(vec3(_582, _585, _588), vec3(_3138, _3139, _3140));
                        float _4536 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3171 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                        float _3172 = dot(vec3(_582, _585, _588), vec3(_3164 * _3158, _3164 * _3159, _3164 * _3160));
                        float _4547 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3175 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                        float _3179 = ((_3175 * _3175) * (_3157 + (-1.0))) + 1.0;
                        float _3180 = _3116 * _3156;
                        float _3181 = _3180 * _3180;
                        float _3184 = ((1.0 - _3181) * _3106) + _3181;
                        float _4558 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3185 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3186 = 1.0 - _3156;
                        float _3196 = (0.5 / (((_3185 * ((_3171 * _3186) + _3156)) + 9.9999999392252902907785028219223e-09) + (((_3185 * _3186) + _3156) * _3171))) * _3185;
                        float _4569 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3207 = (((_3157 * 3.1415927410125732421875) * (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) / ((_3179 * _3179) * ((_3123 * 2.1991131305694580078125) + 3.141590118408203125))) * _3112;
                        _2960 = (_3127 * _3075.x) + _3033;
                        _2961 = (_3127 * _3075.y) + _3034;
                        _2962 = (_3127 * _3075.z) + _3035;
                        _2957 = (_3207 * _3092.x) + _3030;
                        _2958 = (_3207 * _3092.y) + _3031;
                        _2959 = (_3207 * _3092.z) + _3032;
                        if (_3037 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3030 = _2957;
                            _3031 = _2958;
                            _3032 = _2959;
                            _3033 = _2960;
                            _3034 = _2961;
                            _3035 = _2962;
                            _3036 = _3037;
                        }
                    }
                    frontier_phi_71_pred = _2962;
                    frontier_phi_71_pred_1 = _2961;
                    frontier_phi_71_pred_2 = _2960;
                    frontier_phi_71_pred_3 = _2959;
                    frontier_phi_71_pred_4 = _2958;
                    frontier_phi_71_pred_5 = _2957;
                }
                _2743 = frontier_phi_71_pred;
                _2741 = frontier_phi_71_pred_1;
                _2739 = frontier_phi_71_pred_2;
                _2737 = frontier_phi_71_pred_3;
                _2735 = frontier_phi_71_pred_4;
                _2733 = frontier_phi_71_pred_5;
                uint _2892 = _2891 + 1u;
                if (_2892 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2885 = _2733;
                    _2886 = _2735;
                    _2887 = _2737;
                    _2888 = _2739;
                    _2889 = _2741;
                    _2890 = _2743;
                    _2891 = _2892;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
            _2742 = _2743;
        }
        uvec4 _2746 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2747 = _2746.z;
        uint _2749 = (_2747 >> 8u) & 15u;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        if (((4294967295u << _2749) & _2652) == 0u)
        {
            _2853 = _2732;
            _2855 = _2734;
            _2857 = _2736;
            _2859 = _2738;
            _2861 = _2740;
            _2863 = _2742;
        }
        else
        {
            float _2878 = inversesqrt(dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731)));
            float _2879 = _2878 * _1729;
            float _2880 = _2878 * _1730;
            float _2881 = _2878 * _1731;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2749 < ((_2747 >> 12u) & 15u))
            {
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _2864;
                float _3013 = _2732;
                float _3014 = _2734;
                float _3015 = _2736;
                float _3016 = _2738;
                float _3017 = _2740;
                float _3018 = _2742;
                uint _3019 = _2749;
                uint _3028;
                bool _3029;
                for (;;)
                {
                    _3028 = texelFetch(g_lightClassification, int((((_2646 << 5u) + (_2632 << 9u)) + (_3019 << 2u)) >> 2u)).x;
                    _3029 = _3028 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3029)
                    {
                        frontier_phi_82_pred = _3018;
                        frontier_phi_82_pred_1 = _3017;
                        frontier_phi_82_pred_2 = _3016;
                        frontier_phi_82_pred_3 = _3015;
                        frontier_phi_82_pred_4 = _3014;
                        frontier_phi_82_pred_5 = _3013;
                    }
                    else
                    {
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3234 = _3013;
                        float _3235 = _3014;
                        float _3236 = _3015;
                        float _3237 = _3016;
                        float _3238 = _3017;
                        float _3239 = _3018;
                        uint _3240 = _3028;
                        uint _3241;
                        vec4 _3266;
                        float _3267;
                        vec4 _3282;
                        vec3 _3294;
                        vec4 _3310;
                        vec4 _3326;
                        float _3372;
                        bool _3373;
                        for (;;)
                        {
                            uint _3251 = ((_3019 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3240));
                            _3241 = (_3240 + 4294967295u) & _3240;
                            uint _3253 = _3251 * 40u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            _3267 = _3266.w;
                            uint _3269 = (_3251 * 40u) + 4u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3284 = (_3251 * 40u) + 8u;
                            _3294 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x));
                            uint _3297 = (_3251 * 40u) + 16u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3313 = (_3251 * 40u) + 20u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3251 * 40u) + 24u;
                            vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3347 = (_3251 * 40u) + 28u;
                            vec4 _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            _3372 = fma(_1731, _3360.z, fma(_1730, _3360.y, _3360.x * _1729)) + _3360.w;
                            _3373 = !((fma(_1731, _3341.z, fma(_1730, _3341.y, _3341.x * _1729)) + _3341.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3373)
                            {
                                float _3400 = _3266.x - _1729;
                                float _3401 = _3266.y - _1730;
                                float _3402 = _3266.z - _1731;
                                float _3403 = dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402));
                                float _3406 = inversesqrt(_3403);
                                float _3407 = _3406 * _3400;
                                float _3408 = _3406 * _3401;
                                float _3409 = _3406 * _3402;
                                float _3413 = 1.0 - (_3403 / (_3267 * _3267));
                                float _4580 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3414 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3418 = sqrt(_3403) * _3282.w;
                                float _3420 = 1.39999997615814208984375 / (_3418 + 1.39999997615814208984375);
                                float _3421 = _3420 * _3420;
                                float _3424 = ((1.0 - _3421) * dot(vec3(_3407, _3408, _3409), vec3(_582, _585, _588))) + _3421;
                                float _3427 = _3418 * _3418;
                                float _3431 = (fma(_1731, _3310.z, fma(_1730, _3310.y, _3310.x * _1729)) + _3310.w) / _3372;
                                float _3432 = (fma(_1731, _3326.z, fma(_1730, _3326.y, _3326.x * _1729)) + _3326.w) / _3372;
                                float _3436 = 1.0 - dot(vec2(_3431, _3432), vec2(_3431, _3432));
                                float _4596 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3437 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3438 = _3437 * (((isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0))) * _3414) / ((_3427 * 0.699999988079071044921875) + 1.0));
                                float _3450 = exp2(log2(1.0 / ((_3427 * 3.5) + 5.0)) * 0.25);
                                float _3451 = 1.0 - _642;
                                float _3458 = sqrt(1.0 - ((1.0 - (_3451 * _3451)) * (1.0 - (_3450 * _3450))));
                                float _3459 = _3458 * _3458;
                                float _3460 = _3459 * _3459;
                                float _3461 = _3407 - _2879;
                                float _3462 = _3408 - _2880;
                                float _3463 = _3409 - _2881;
                                float _3467 = inversesqrt(dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463)));
                                float _3471 = dot(vec3(_582, _585, _588), vec3((-0.0) - _2879, (-0.0) - _2880, (-0.0) - _2881));
                                float _4607 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3474 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3475 = dot(vec3(_582, _585, _588), vec3(_3467 * _3461, _3467 * _3462, _3467 * _3463));
                                float _4618 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3478 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3482 = ((_3478 * _3478) * (_3460 + (-1.0))) + 1.0;
                                float _3483 = _3420 * _3459;
                                float _3484 = _3483 * _3483;
                                float _3490 = ((1.0 - _3484) * dot(vec3(_582, _585, _588), vec3(_3407, _3408, _3409))) + _3484;
                                float _4629 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3491 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3492 = 1.0 - _3459;
                                float _3502 = (0.5 / (((_3491 * ((_3474 * _3492) + _3459)) + 9.9999999392252902907785028219223e-09) + (((_3491 * _3492) + _3459) * _3474))) * _3491;
                                float _4640 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3512 = (_3437 * _3414) * (((_3460 * 3.1415927410125732421875) * (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) / ((_3482 * _3482) * ((_3427 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3438 * _3282.z;
                                frontier_phi_88_pred_1 = _3438 * _3282.y;
                                frontier_phi_88_pred_2 = _3438 * _3282.x;
                                frontier_phi_88_pred_3 = _3512 * _3294.z;
                                frontier_phi_88_pred_4 = _3512 * _3294.y;
                                frontier_phi_88_pred_5 = _3512 * _3294.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3521 = frontier_phi_88_pred;
                            _3520 = frontier_phi_88_pred_1;
                            _3519 = frontier_phi_88_pred_2;
                            _3518 = frontier_phi_88_pred_3;
                            _3517 = frontier_phi_88_pred_4;
                            _3516 = frontier_phi_88_pred_5;
                            _3224 = _3519 + _3237;
                            _3225 = _3520 + _3238;
                            _3226 = _3521 + _3239;
                            _3221 = _3516 + _3234;
                            _3222 = _3517 + _3235;
                            _3223 = _3518 + _3236;
                            if (_3241 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3241;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3226;
                        frontier_phi_82_pred_1 = _3225;
                        frontier_phi_82_pred_2 = _3224;
                        frontier_phi_82_pred_3 = _3223;
                        frontier_phi_82_pred_4 = _3222;
                        frontier_phi_82_pred_5 = _3221;
                    }
                    _2864 = frontier_phi_82_pred;
                    _2862 = frontier_phi_82_pred_1;
                    _2860 = frontier_phi_82_pred_2;
                    _2858 = frontier_phi_82_pred_3;
                    _2856 = frontier_phi_82_pred_4;
                    _2854 = frontier_phi_82_pred_5;
                    uint _3020 = _3019 + 1u;
                    if (_3020 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3013 = _2854;
                        _3014 = _2856;
                        _3015 = _2858;
                        _3016 = _2860;
                        _3017 = _2862;
                        _3018 = _2864;
                        _3019 = _3020;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2860;
                frontier_phi_63_64_ladder_1 = _2864;
                frontier_phi_63_64_ladder_2 = _2862;
                frontier_phi_63_64_ladder_3 = _2858;
                frontier_phi_63_64_ladder_4 = _2856;
                frontier_phi_63_64_ladder_5 = _2854;
            }
            else
            {
                frontier_phi_63_64_ladder = _2738;
                frontier_phi_63_64_ladder_1 = _2742;
                frontier_phi_63_64_ladder_2 = _2740;
                frontier_phi_63_64_ladder_3 = _2736;
                frontier_phi_63_64_ladder_4 = _2734;
                frontier_phi_63_64_ladder_5 = _2732;
            }
            _2853 = frontier_phi_63_64_ladder_5;
            _2855 = frontier_phi_63_64_ladder_4;
            _2857 = frontier_phi_63_64_ladder_3;
            _2859 = frontier_phi_63_64_ladder;
            _2861 = frontier_phi_63_64_ladder_2;
            _2863 = frontier_phi_63_64_ladder_1;
        }
        float _2868 = isnan(1.0) ? _626 : (isnan(_626) ? 1.0 : min(_626, 1.0));
        _2665 = (_2868 * _2859) + _2196;
        _2667 = (_2868 * _2861) + _2198;
        _2669 = (_2868 * _2863) + _2200;
        _2671 = ((_2853 * 0.039999999105930328369140625) * _2868) + _2519;
        _2673 = ((_2855 * 0.039999999105930328369140625) * _2868) + _2521;
        _2675 = ((_2857 * 0.039999999105930328369140625) * _2868) + _2523;
    }
    else
    {
        _2665 = _2196;
        _2667 = _2198;
        _2669 = _2200;
        _2671 = _2519;
        _2673 = _2521;
        _2675 = _2523;
    }
    float _4656 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4667 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4678 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _2692 = ((isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2665 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _626))) + ((_2671 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1462)) * cbPerFrame._m0[3u].x);
    float _2693 = ((isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2667 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _626))) + ((_2673 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _1462)) * cbPerFrame._m0[3u].x);
    float _2694 = ((isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2669 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _626))) + ((_2675 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _1462)) * cbPerFrame._m0[3u].x);
    uint _2695 = _226 + 6u;
    float _2703 = _561 / cbSceneParam._m0[86u].x;
    float _2704 = _562 / cbSceneParam._m0[86u].y;
    vec4 _2718 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2703, _2704, (log2((isnan(cbSceneParam._m0[77u].w) ? _482 : (isnan(_482) ? cbSceneParam._m0[77u].w : min(_482, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2720 = _2718.x;
    float _2721 = _2718.y;
    float _2722 = _2718.z;
    float _2723 = _2718.w;
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    if (_482 > cbSceneParam._m0[78u].w)
    {
        float _2757 = isnan(_482) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _482 : min(cbSceneParam._m0[80u].w, _482));
        float _2758 = _2757 / _482;
        float _2769 = _2758 * _533;
        float _2770 = _534 * _2758;
        float _2771 = (-0.0) - _2770;
        float _2773 = _2758 * _535;
        float _2775 = (cbSceneParam._m0[77u].w * _2771) / _2757;
        float _2776 = _2775 + cbSceneParam._m0[79u].w;
        float _2777 = cbSceneParam._m0[79u].w - _2770;
        float _2783 = sqrt(((_2769 * _2769) + (_2770 * _2770)) + (_2773 * _2773));
        float _2786 = (1.0 - (cbSceneParam._m0[77u].w / _2757)) * _2783;
        float _2791 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2793 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2970;
        if (abs((_2771 - _2775) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2970 = ((((_2776 > 0.0) ? exp2(_2791 * _2776) : (2.0 - exp2(_2793 * _2776))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2786;
        }
        else
        {
            float _2914 = 1.0 / cbSceneParam._m0[80u].x;
            float _2915 = isnan(_2777) ? _2776 : (isnan(_2776) ? _2777 : max(_2776, _2777));
            float _2916 = isnan(_2777) ? _2776 : (isnan(_2776) ? _2777 : min(_2776, _2777));
            float _2925 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : min(_2915, 0.0));
            float _2926 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : min(_2916, 0.0));
            _2970 = ((abs(_2783 / _2771) * cbSceneParam._m0[80u].y) * ((((_2925 - _2926) * 2.0) - ((exp2(_2791 * (isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0)))) - exp2(_2791 * (isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0))))) * _2914)) - ((exp2(_2793 * _2925) - exp2(_2793 * _2926)) * _2914))) + (_2786 * cbSceneParam._m0[80u].z);
        }
        vec4 _2972 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2703, _2704, 1.0), 0.0);
        float _2981 = exp2((_2970 * (-1.44269502162933349609375)) * (1.0 - _2972.w));
        float _2982 = log2(_2981);
        float _2998 = log2(_2723);
        _2795 = (exp2(_2998 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].x)) * _2972.x) / cbSceneParam._m0[78u].x)) + _2720;
        _2797 = (exp2(_2998 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].y)) * _2972.y) / cbSceneParam._m0[78u].y)) + _2721;
        _2799 = (exp2(_2998 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2982 * cbSceneParam._m0[78u].z)) * _2972.z) / cbSceneParam._m0[78u].z)) + _2722;
        _2801 = _2981 * _2723;
    }
    else
    {
        _2795 = _2720;
        _2797 = _2721;
        _2799 = _2722;
        _2801 = _2723;
    }
    bool _3008;
    vec4 _2811;
    vec4 _2833;
    float _2835;
    float _2839;
    float _2840;
    float _2841;
    float _2842;
    bool _2852;
    for (;;)
    {
        _2811 = cbMatDynParam._m0[0u];
        float _2813 = roundEven(_2811.y);
        bool _2814 = _2813 == 3.0;
        float _2815 = log2(_2801);
        float _2822 = exp2(_2815 * cbSceneParam._m0[78u].x) * _2692;
        float _2823 = exp2(_2815 * cbSceneParam._m0[78u].y) * _2693;
        float _2824 = exp2(_2815 * cbSceneParam._m0[78u].z) * _2694;
        float _2831 = _549 + (-0.5);
        _2833 = cbMtdParam._m0[1u];
        _2835 = _2833.y * _2831;
        float _2838 = (_2813 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2839 = _2838 * (_2814 ? _2822 : (_2822 + (cbSceneParam._m0[72u].w * _2795)));
        _2840 = _2838 * (_2814 ? _2823 : (_2823 + (cbSceneParam._m0[72u].w * _2797)));
        _2841 = _2838 * (_2814 ? _2824 : (_2824 + (cbSceneParam._m0[72u].w * _2799)));
        _2842 = _2831 * 0.999000012874603271484375;
        _2852 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2852)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2842) < 0.5)
            {
                _3008 = true;
                break;
            }
        }
        uint _2949 = _601 + uint(_2811.w);
        if ((cbInstanceData._m0[_2949].w < 1.0) && ((cbInstanceData._m0[_2949].w + _2842) < 0.5))
        {
            _3008 = true;
            break;
        }
        if ((_2835 + 1.0) < _2833.x)
        {
            _3008 = true;
            break;
        }
        _3008 = false;
        break;
    }
    float _3212;
    if (_3008)
    {
        discard_state = true;
        _3212 = 0.0;
    }
    else
    {
        _3212 = cbInstanceData._m0[_2695].w;
    }
    SV_Target.x = _2839;
    SV_Target.y = _2840;
    SV_Target.z = _2841;
    SV_Target.w = _3212;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2695].w;
    discard_exit();
}


