#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1400;
float _3759;
float _3760;
float _3761;
float _3762;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _239 = _238 * _230;
    float _240 = _238 * _231;
    float _241 = _238 * _232;
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = _252 * TANGENT.x;
    float _254 = _252 * TANGENT.y;
    float _255 = _252 * TANGENT.z;
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3771 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3782 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3793 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _408 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _408) * cbMtdParam._m0[24u].x) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3804 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _433 = (_426 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _434 = (_426 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _435 = (_426 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _439 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _433;
    float _442 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _434;
    float _445 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _435;
    float _452 = ((_433 - _439) * (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) + _439;
    float _453 = ((_434 - _442) * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) + _442;
    float _454 = ((_435 - _445) * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) + _445;
    vec4 _472 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _518 = _516.x;
    float _519 = _516.y;
    float _520 = _516.z;
    float _529 = ((_499.z - _520) * _426) + _520;
    float _532 = ((((_499.x - _518) * _426) + _518) * 2.0) + (-1.0);
    float _533 = ((((_499.y - _519) * _426) + _519) * 2.0) + (-1.0);
    float _534 = dot(vec2(_532, _533), vec2(_532, _533));
    float _3815 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _539 = sqrt(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))));
    vec4 _559 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _571 = (_532 + ((((_472.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_559.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _572 = (_533 + ((((_472.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_559.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _575 = fma(_539, _246, fma(_572, _253, _571 * _239));
    float _578 = fma(_539, _247, fma(_572, _254, _571 * _240));
    float _581 = fma(_539, _248, fma(_572, _255, _571 * _241));
    float _585 = inversesqrt(dot(vec3(_575, _578, _581), vec3(_575, _578, _581)));
    vec4 _614 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _296) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _297) + cbTextureTilingScale._m0[11u].w));
    float _616 = _614.x;
    float _617 = 1.0 - _616;
    float _621 = ((_616 - _617) * cbMtdParam._m0[24u].z) + _617;
    float _623 = (cbMtdParam._m0[19u].x + dot(vec4(_585 * _575, _585 * _578, _585 * _581, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_621 * cbMtdParam._m0[21u].z);
    float _3826 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _624 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _626 = (-0.0) - cbMtdParam._m0[24u].y;
    float _628 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _628 : (isnan(_628) ? 1.0 : min(_628, 1.0));
    float _636 = _624 - ((_624 * TEXCOORD_8.x) * _629);
    float _637 = _624 - ((_624 * TEXCOORD_8.y) * _629);
    float _638 = _624 - ((_624 * TEXCOORD_8.z) * _629);
    float _645 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _649 = ((isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : min(_645, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _657 = (_649 - (((_621 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _649))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3857 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _658 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _662 = ((_636 * (cbMtdParam._m0[17u].x - _452)) * _658) + _452;
    float _663 = ((_637 * (cbMtdParam._m0[17u].y - _453)) * _658) + _453;
    float _664 = ((_638 * (cbMtdParam._m0[17u].z - _454)) * _658) + _454;
    vec4 _676 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _678 = _676.x;
    float _679 = 1.0 - _678;
    float _704 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_678 - _679) * cbMtdParam._m0[24u].w) + _679) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3868 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _705 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _713 = ((((cbMtdParam._m0[10u].x - _662) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _705) + _662;
    float _714 = ((((cbMtdParam._m0[10u].y - _663) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _705) + _663;
    float _715 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _664)) * _705) + _664;
    float _720 = (((_472.z - _529) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _529;
    float _724 = ((_559.z - _720) * cbMtdParam._m0[19u].w) + _720;
    vec4 _738 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _296) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _297) + cbTextureTilingScale._m0[15u].w));
    float _745 = (_738.x * 2.0) + (-1.0);
    float _746 = (_738.y * 2.0) + (-1.0);
    float _747 = dot(vec2(_745, _746), vec2(_745, _746));
    float _3879 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _756 = (((_738.z - _724) * _636) * _658) + _724;
    float _759 = ((cbMtdParam._m0[23u].y - _756) * _705) + _756;
    vec4 _778 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _784 = (_778.x * 2.0) + (-1.0);
    float _785 = (_778.y * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _3890 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _806 = (((cbMtdParam._m0[21u].x * _571) + ((_745 - _571) * _636)) * _658) + _571;
    float _807 = (((cbMtdParam._m0[21u].x * _572) + ((_746 - _572) * _637)) * _658) + _572;
    float _808 = (((sqrt(1.0 - (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) - _539) * _638) * _658) + _539;
    float _819 = (((_784 - _806) + (_806 * cbMtdParam._m0[22u].z)) * _705) + _806;
    float _820 = (((_785 - _807) + (_807 * cbMtdParam._m0[22u].z)) * _705) + _807;
    float _821 = ((sqrt(1.0 - (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) - _808) * _705) + _808;
    float _825 = cbMtdParam._m0[22u].x + _559.w;
    float _828 = fma(_821, _246, fma(_820, _253, _819 * _239));
    float _831 = fma(_821, _247, fma(_820, _254, _819 * _240));
    float _834 = fma(_821, _248, fma(_820, _255, _819 * _241));
    float _838 = inversesqrt(dot(vec3(_828, _831, _834), vec3(_828, _831, _834)));
    float _839 = _838 * _828;
    float _840 = _838 * _831;
    float _841 = _838 * _834;
    float _3901 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _842 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _3912 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _3923 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _3934 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _3945 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _860 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _911 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _901);
    float _912 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _901);
    float _913 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _901);
    float _917 = inversesqrt(dot(vec3(_911, _912, _913), vec3(_911, _912, _913)));
    float _918 = _911 * _917;
    float _919 = _912 * _917;
    float _920 = _913 * _917;
    vec4 _925 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _927 = _925.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1081 = sqrt(((_911 * _911) + (_912 * _912)) + (_913 * _913));
        float _1087 = (cbMatDynParam._m0[5u].x * _1081) + cbMatDynParam._m0[5u].y;
        float _3956 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1092 = (cbMatDynParam._m0[5u].z * _1081) + cbMatDynParam._m0[5u].w;
        float _3967 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) - _1088)) + _1088) < ((_927 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _938 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _939 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _957 = fma(_841, cbSceneParam._m0[5u].z, fma(_840, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _839));
    float _960 = fma(_841, cbSceneParam._m0[6u].z, fma(_840, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _839));
    float _963 = fma(_841, cbSceneParam._m0[7u].z, fma(_840, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _839));
    uint _976 = _277 + 9u;
    uint _977 = _976 + uint(cbMatDynParam._m0[0u].w);
    float _983 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_977].x;
    float _984 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * cbInstanceData._m0[_977].y;
    float _985 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * cbInstanceData._m0[_977].z;
    float _3978 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _986 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _3989 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _987 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _988 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    vec4 _997 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _938, cbSceneParam._m0[86u].y * _939));
    float _1001 = ((isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * TEXCOORD_5.w) * _997.x;
    float _1002 = dot(vec3(_839, _840, _841), vec3(_918, _919, _920));
    float _1005 = _1002 * 2.0;
    float _1009 = (_1005 * _839) - _918;
    float _1010 = (_1005 * _840) - _919;
    float _1011 = (_1005 * _841) - _920;
    float _1015 = abs(dot(vec3(_918, _919, _920), vec3(_839, _840, _841)));
    float _4011 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1017 = sqrt(_842);
    float _1030 = exp2((_1017 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1017 * 3.0));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1399;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1124 = fma(_1070, cbModelParam._m0[26u].z, fma(_1066, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1062));
        float _1128 = fma(_1070, cbModelParam._m0[27u].z, fma(_1066, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1062));
        float _1132 = fma(_1070, cbModelParam._m0[28u].z, fma(_1066, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1062));
        float _1157 = _1062 + _839;
        float _1158 = _1066 + _840;
        float _1159 = _1070 + _841;
        float _1169 = fma(_1159, cbModelParam._m0[26u].z, fma(_1158, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1157)) - _1124;
        float _1170 = fma(_1159, cbModelParam._m0[27u].z, fma(_1158, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1157)) - _1128;
        float _1171 = fma(_1159, cbModelParam._m0[28u].z, fma(_1158, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1157)) - _1132;
        float _1175 = inversesqrt(dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171)));
        float _1188 = ((_1175 * _1169) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1124 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1175 * _1170) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1128 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1175 * _1171) / cbModelParam._m0[34u].z) + ((((((_1132 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        float _1227 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1193.x + (-0.5));
        float _1229 = _1227 * (_1193.y + (-0.5));
        float _1230 = _1227 * (_1193.z + (-0.5));
        float _1237 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1200.x + (-0.5));
        float _1239 = _1237 * (_1200.y + (-0.5));
        float _1240 = _1237 * (_1200.z + (-0.5));
        float _1247 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1207.x + (-0.5));
        float _1249 = _1247 * (_1207.y + (-0.5));
        float _1250 = _1247 * (_1207.z + (-0.5));
        float _1257 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1214.x + (-0.5));
        float _1259 = _1257 * (_1214.y + (-0.5));
        float _1260 = _1257 * (_1214.z + (-0.5));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = _1228 * 0.5;
        float _1265 = _1238 * 0.5;
        float _1266 = _1248 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1281 = (dot(vec3(_839, _840, _841), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1291 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _4059 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1293 + 1.0))) + _1298) * _1261;
        float _1308 = _1229 * 0.5;
        float _1309 = _1239 * 0.5;
        float _1310 = _1249 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_839, _840, _841), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4092 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1335 + 1.0))) + _1340) * _1262;
        float _1350 = _1230 * 0.5;
        float _1351 = _1240 * 0.5;
        float _1352 = _1250 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_839, _840, _841), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4125 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1377 + 1.0))) + _1382) * _1263;
        _1399 = _1230;
        _1401 = _1229;
        _1402 = _1228;
        _1403 = _1240;
        _1404 = _1239;
        _1405 = _1238;
        _1406 = _1250;
        _1407 = _1249;
        _1408 = _1248;
        _1409 = _1263;
        _1410 = _1262;
        _1411 = _1261;
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
    }
    else
    {
        _1399 = _1400;
        _1401 = _1400;
        _1402 = _1400;
        _1403 = _1400;
        _1404 = _1400;
        _1405 = _1400;
        _1406 = _1400;
        _1407 = _1400;
        _1408 = _1400;
        _1409 = _1400;
        _1410 = _1400;
        _1411 = _1400;
        _1412 = 0.0;
        _1413 = 0.0;
        _1414 = 0.0;
    }
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1442 = fma(_1070, cbModelParam._m0[30u].z, fma(_1066, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1062));
        float _1446 = fma(_1070, cbModelParam._m0[31u].z, fma(_1066, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1062));
        float _1450 = fma(_1070, cbModelParam._m0[32u].z, fma(_1066, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1062));
        float _1473 = _1062 + _839;
        float _1474 = _1066 + _840;
        float _1475 = _1070 + _841;
        float _1485 = fma(_1475, cbModelParam._m0[30u].z, fma(_1474, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1473)) - _1442;
        float _1486 = fma(_1475, cbModelParam._m0[31u].z, fma(_1474, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1473)) - _1446;
        float _1487 = fma(_1475, cbModelParam._m0[32u].z, fma(_1474, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1473)) - _1450;
        float _1491 = inversesqrt(dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487)));
        float _1504 = ((_1491 * _1485) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1442 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1505 = ((_1491 * _1486) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1446 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1506 = ((_1491 * _1487) / cbModelParam._m0[35u].z) + ((((((_1450 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        float _1541 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1508.x + (-0.5));
        float _1543 = _1541 * (_1508.y + (-0.5));
        float _1544 = _1541 * (_1508.z + (-0.5));
        float _1551 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1515.x + (-0.5));
        float _1553 = _1551 * (_1515.y + (-0.5));
        float _1554 = _1551 * (_1515.z + (-0.5));
        float _1561 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1522.x + (-0.5));
        float _1563 = _1561 * (_1522.y + (-0.5));
        float _1564 = _1561 * (_1522.z + (-0.5));
        float _1571 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1529.x + (-0.5));
        float _1573 = _1571 * (_1529.y + (-0.5));
        float _1574 = _1571 * (_1529.z + (-0.5));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = _1542 * 0.5;
        float _1579 = _1552 * 0.5;
        float _1580 = _1562 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_839, _840, _841), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4188 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1605 + 1.0))) + _1610) * _1575;
        float _1620 = _1543 * 0.5;
        float _1621 = _1553 * 0.5;
        float _1622 = _1563 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_839, _840, _841), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4221 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1647 + 1.0))) + _1652) * _1576;
        float _1662 = _1544 * 0.5;
        float _1663 = _1554 * 0.5;
        float _1664 = _1564 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_839, _840, _841), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4254 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1689 + 1.0))) + _1694) * _1577;
        _1711 = _1544;
        _1712 = _1543;
        _1713 = _1542;
        _1714 = _1554;
        _1715 = _1553;
        _1716 = _1552;
        _1717 = _1564;
        _1718 = _1563;
        _1719 = _1562;
        _1720 = _1577;
        _1721 = _1576;
        _1722 = _1575;
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
    }
    else
    {
        _1711 = _1400;
        _1712 = _1400;
        _1713 = _1400;
        _1714 = _1400;
        _1715 = _1400;
        _1716 = _1400;
        _1717 = _1400;
        _1718 = _1400;
        _1719 = _1400;
        _1720 = _1400;
        _1721 = _1400;
        _1722 = _1400;
        _1723 = 0.0;
        _1724 = 0.0;
        _1725 = 0.0;
    }
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1412)) + _1412;
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1413)) + _1413;
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1414)) + _1414;
    float _1758 = fma(_1737, cbSceneParam._m0[89u].z, fma(_1736, cbSceneParam._m0[89u].y, _1735 * cbSceneParam._m0[89u].x));
    float _1761 = fma(_1737, cbSceneParam._m0[90u].z, fma(_1736, cbSceneParam._m0[90u].y, _1735 * cbSceneParam._m0[90u].x));
    float _1764 = fma(_1737, cbSceneParam._m0[91u].z, fma(_1736, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1735));
    float _1779 = _1009 * 0.5;
    float _1780 = _1010 * 0.5;
    float _1781 = _1011 * 0.5;
    float _1782 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1785 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1788 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1822;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1795 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1399, _1403, _1406, _1409));
        float _1799 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1401, _1404, _1407, _1410));
        float _1803 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1402, _1405, _1408, _1411));
        float _1810 = dot(vec4(cbModelParam._m0[39u]), vec4(_1779, _1780, _1781, 1.0));
        _1822 = dot(vec3(isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1810) ? 0.0 : (isnan(0.0) ? _1810 : max(0.0, _1810))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1822 = 1.0;
    }
    float _1833;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1824 = dot(vec4(cbModelParam._m0[40u]), vec4(_1779, _1780, _1781, 1.0));
        _1833 = dot(vec3(isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1824) ? 0.0 : (isnan(0.0) ? _1824 : max(0.0, _1824))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1833 = 1.0;
    }
    float _1837 = (_1833 * cbModelParam._m0[1u].x) + (_1822 * (1.0 - cbModelParam._m0[1u].x));
    float _1847 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _842);
    float _1848 = isnan(_1847) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1847 : min(cbModelParam._m0[25u].z, _1847));
    float _1929;
    float _1931;
    float _1933;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1896 = fma(_1070, cbModelParam._m0[13u].z, fma(_1066, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1062)) + cbModelParam._m0[13u].w;
        float _1900 = fma(_1070, cbModelParam._m0[14u].z, fma(_1066, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1062)) + cbModelParam._m0[14u].w;
        float _1904 = fma(_1070, cbModelParam._m0[15u].z, fma(_1066, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1062)) + cbModelParam._m0[15u].w;
        float _1907 = fma(_1011, cbModelParam._m0[13u].z, fma(_1010, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009));
        float _1910 = fma(_1011, cbModelParam._m0[14u].z, fma(_1010, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009));
        float _1913 = fma(_1011, cbModelParam._m0[15u].z, fma(_1010, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009));
        float _1941;
        if (_1907 > 0.0)
        {
            _1941 = abs((1.0 - _1896) / _1907);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1896 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1941 = frontier_phi_17_15_ladder;
        }
        float _2142;
        if (_1910 > 0.0)
        {
            _2142 = abs((1.0 - _1900) / _1910);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1900 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2142 = frontier_phi_26_22_ladder;
        }
        float _2385;
        if (_1913 > 0.0)
        {
            _2385 = abs((1.0 - _1904) / _1913);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1904 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2385 = frontier_phi_38_33_ladder;
        }
        float _2387 = isnan(_2142) ? _1941 : (isnan(_1941) ? _2142 : min(_1941, _2142));
        float _2388 = isnan(_2385) ? _2387 : (isnan(_2387) ? _2385 : min(_2387, _2385));
        float _2392 = (_2388 * _1907) + _1896;
        float _2393 = (_2388 * _1910) + _1900;
        float _2394 = (_2388 * _1913) + _1904;
        float _2395 = _2388 * 9.9999997473787516355514526367188e-05;
        float _2397 = (-1.0) - _2395;
        float _2399 = _2395 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2394 > _2399) || ((_2394 < _2397) || ((_2393 > _2399) || ((_2393 < _2397) || ((_2392 < _2397) || (_2392 > _2399))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2518 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2394, cbModelParam._m0[9u].z, fma(_2393, cbModelParam._m0[9u].y, _2392 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2394, cbModelParam._m0[10u].z, fma(_2393, cbModelParam._m0[10u].y, _2392 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2394, cbModelParam._m0[11u].z, fma(_2393, cbModelParam._m0[11u].y, _2392 * cbModelParam._m0[11u].x))), _1848);
            frontier_phi_16_38_ladder = _2518.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2518.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2518.x * cbModelParam._m0[1u].y;
        }
        _1929 = frontier_phi_16_38_ladder_2;
        _1931 = frontier_phi_16_38_ladder_1;
        _1933 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1917 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1009, _1010, _1011), _1848);
        _1929 = _1917.x * cbModelParam._m0[1u].y;
        _1931 = _1917.y * cbModelParam._m0[1u].y;
        _1933 = _1917.z * cbModelParam._m0[1u].y;
    }
    float _1937 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _842);
    float _1938 = isnan(_1937) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1937 : min(cbModelParam._m0[25u].w, _1937));
    float _2028;
    float _2030;
    float _2032;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1992 = fma(_1070, cbModelParam._m0[21u].z, fma(_1066, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1062)) + cbModelParam._m0[21u].w;
        float _1996 = fma(_1070, cbModelParam._m0[22u].z, fma(_1066, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1062)) + cbModelParam._m0[22u].w;
        float _2000 = fma(_1070, cbModelParam._m0[23u].z, fma(_1066, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1062)) + cbModelParam._m0[23u].w;
        float _2003 = fma(_1011, cbModelParam._m0[21u].z, fma(_1010, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009));
        float _2006 = fma(_1011, cbModelParam._m0[22u].z, fma(_1010, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009));
        float _2009 = fma(_1011, cbModelParam._m0[23u].z, fma(_1010, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009));
        float _2147;
        if (_2003 > 0.0)
        {
            _2147 = abs((1.0 - _1992) / _2003);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1992 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2147 = frontier_phi_28_24_ladder;
        }
        float _2412;
        if (_2006 > 0.0)
        {
            _2412 = abs((1.0 - _1996) / _2006);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1996 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2412 = frontier_phi_40_35_ladder;
        }
        float _2617;
        if (_2009 > 0.0)
        {
            _2617 = abs((1.0 - _2000) / _2009);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2000 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2617 = frontier_phi_49_46_ladder;
        }
        float _2619 = isnan(_2412) ? _2147 : (isnan(_2147) ? _2412 : min(_2147, _2412));
        float _2620 = isnan(_2617) ? _2619 : (isnan(_2619) ? _2617 : min(_2619, _2617));
        float _2624 = (_2620 * _2003) + _1992;
        float _2625 = (_2620 * _2006) + _1996;
        float _2626 = (_2620 * _2009) + _2000;
        float _2627 = _2620 * 9.9999997473787516355514526367188e-05;
        float _2628 = (-1.0) - _2627;
        float _2630 = _2627 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2626 > _2630) || ((_2626 < _2628) || ((_2625 > _2630) || ((_2625 < _2628) || ((_2624 < _2628) || (_2624 > _2630))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2825 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2626, cbModelParam._m0[17u].z, fma(_2625, cbModelParam._m0[17u].y, _2624 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2626, cbModelParam._m0[18u].z, fma(_2625, cbModelParam._m0[18u].y, _2624 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2626, cbModelParam._m0[19u].z, fma(_2625, cbModelParam._m0[19u].y, _2624 * cbModelParam._m0[19u].x))), _1938);
            frontier_phi_25_49_ladder = _2825.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2825.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2825.x * cbModelParam._m0[1u].z;
        }
        _2028 = frontier_phi_25_49_ladder_2;
        _2030 = frontier_phi_25_49_ladder_1;
        _2032 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2012 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1009, _1010, _1011), _1938);
        _2028 = _2012.x * cbModelParam._m0[1u].z;
        _2030 = _2012.y * cbModelParam._m0[1u].z;
        _2032 = _2012.z * cbModelParam._m0[1u].z;
    }
    float _2044 = ((((1.0 - _1030) * ((_1017 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1030 * _1017)) * _1001;
    float _2045 = _2044 * ((cbModelParam._m0[1u].w * (_2028 - _1929)) + _1929);
    float _2046 = _2044 * ((cbModelParam._m0[1u].w * (_2030 - _1931)) + _1931);
    float _2047 = _2044 * ((cbModelParam._m0[1u].w * (_2032 - _1933)) + _1933);
    float _2050 = fma(_2047, cbSceneParam._m0[89u].z, fma(_2046, cbSceneParam._m0[89u].y, _2045 * cbSceneParam._m0[89u].x));
    float _2053 = fma(_2047, cbSceneParam._m0[90u].z, fma(_2046, cbSceneParam._m0[90u].y, _2045 * cbSceneParam._m0[90u].x));
    float _2056 = fma(_2047, cbSceneParam._m0[91u].z, fma(_2046, cbSceneParam._m0[91u].y, _2045 * cbSceneParam._m0[91u].x));
    uvec4 _2066 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2068 = _2066.x * 14u;
    uint _2069 = _2068 + 13u;
    float _2076 = _1001 + (-1.0);
    float _2081 = (cbLight._m0[_2069].x * _2076) + 1.0;
    float _2082 = (cbLight._m0[_2069].y * _2076) + 1.0;
    float _2083 = (cbLight._m0[_2069].z * _2076) + 1.0;
    float _2084 = (cbLight._m0[_2069].w * _2076) + 1.0;
    uint _2085 = _2068 + 5u;
    float _2091 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
    uint _2095 = _2068 + 4u;
    float _2101 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
    uint _2105 = _2068 | 1u;
    float _2116 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_839, _840, _841));
    float _2119 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_839, _840, _841));
    float _4390 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _4401 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2124 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * 0.3183098733425140380859375;
    float _2126 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * 0.3183098733425140380859375;
    float _2133 = ((cbLight._m0[_2085].x * _2091) * _2126) + ((cbLight._m0[_2095].x * _2101) * _2124);
    float _2134 = ((_2091 * cbLight._m0[_2085].y) * _2126) + ((_2101 * cbLight._m0[_2095].y) * _2124);
    float _2135 = ((_2091 * cbLight._m0[_2085].z) * _2126) + ((_2101 * cbLight._m0[_2095].z) * _2124);
    uvec4 _2139 = floatBitsToUint(cbLight._m0[_2068 + 12u]);
    bool _2141 = _2139.x == 0u;
    float _2152;
    float _2154;
    float _2156;
    if (_2141)
    {
        _2152 = _2133;
        _2154 = _2134;
        _2156 = _2135;
    }
    else
    {
        uint _2160 = _2068 + 6u;
        float _2176 = (dot(vec3(cbLight._m0[_2068 + 2u].xyz), vec3(_839, _840, _841)) * 0.5) + 0.5;
        float _2177 = _2176 * _2176;
        float _4412 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2178 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2179 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2152 = (((cbLight._m0[_2160].x * 0.3183098733425140380859375) * _2178) * _2179) + _2133;
        _2154 = (((cbLight._m0[_2160].y * 0.3183098733425140380859375) * _2178) * _2179) + _2134;
        _2156 = (((cbLight._m0[_2160].z * 0.3183098733425140380859375) * _2178) * _2179) + _2135;
    }
    bool _2159 = _2139.y == 0u;
    float _2197;
    float _2199;
    float _2201;
    if (_2159)
    {
        _2197 = _2152;
        _2199 = _2154;
        _2201 = _2156;
    }
    else
    {
        uint _2356 = _2068 + 7u;
        float _2372 = (dot(vec3(cbLight._m0[_2068 + 3u].xyz), vec3(_839, _840, _841)) * 0.5) + 0.5;
        float _2373 = _2372 * _2372;
        float _4428 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2374 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2375 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2197 = (((cbLight._m0[_2356].x * 0.3183098733425140380859375) * _2374) * _2375) + _2152;
        _2199 = (((cbLight._m0[_2356].y * 0.3183098733425140380859375) * _2374) * _2375) + _2154;
        _2201 = (((cbLight._m0[_2356].z * 0.3183098733425140380859375) * _2374) * _2375) + _2156;
    }
    uint _2204 = _2068 + 8u;
    float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2068].w)) * _842) * 0.949999988079071044921875);
    float _2218 = _2217 * _2217;
    float _2219 = cbLight._m0[_2068].x + _918;
    float _2220 = cbLight._m0[_2068].y + _919;
    float _2221 = cbLight._m0[_2068].z + _920;
    float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
    float _2226 = _2225 * _2219;
    float _2227 = _2225 * _2220;
    float _2228 = _2225 * _2221;
    float _2229 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2068].xyz));
    float _4444 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _4455 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _2233 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2234 = dot(vec3(_839, _840, _841), vec3(_2226, _2227, _2228));
    float _4466 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2238 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_2226, _2227, _2228));
    float _4477 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2242 = _2218 * _2218;
    float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
    float _2257 = (exp2(log2(1.0 - (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2258 = 1.0 - _2218;
    float _2269 = (0.5 / (((_2233 * ((_2232 * _2258) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2258) + _2218) * _2232))) * _2232;
    float _4488 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2271 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
    uint _2282 = _2068 + 9u;
    float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2105].w)) * _842) * 0.949999988079071044921875);
    float _2294 = _2293 * _2293;
    float _2295 = cbLight._m0[_2105].x + _918;
    float _2296 = cbLight._m0[_2105].y + _919;
    float _2297 = cbLight._m0[_2105].z + _920;
    float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
    float _2302 = _2301 * _2295;
    float _2303 = _2301 * _2296;
    float _2304 = _2301 * _2297;
    float _2305 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2105].xyz));
    float _4499 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _2309 = dot(vec3(_839, _840, _841), vec3(_2302, _2303, _2304));
    float _4510 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2313 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_2302, _2303, _2304));
    float _4521 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2317 = _2294 * _2294;
    float _2321 = ((_2312 * _2312) * (_2317 + (-1.0))) + 1.0;
    float _2330 = (exp2(log2(1.0 - (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2331 = 1.0 - _2294;
    float _2341 = (0.5 / (((_2233 * ((_2308 * _2331) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2331) + _2294) * _2308))) * _2308;
    float _4532 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2343 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2317 / ((_2321 * _2321) * 3.141590118408203125));
    float _2353 = (((_2330 * cbLight._m0[_2282].x) * _2343) * _2091) + (((_2257 * cbLight._m0[_2204].x) * _2271) * _2101);
    float _2354 = (((_2330 * cbLight._m0[_2282].y) * _2343) * _2091) + (((_2257 * cbLight._m0[_2204].y) * _2271) * _2101);
    float _2355 = (((_2330 * cbLight._m0[_2282].z) * _2343) * _2091) + (((_2257 * cbLight._m0[_2204].z) * _2271) * _2101);
    float _2417;
    float _2419;
    float _2421;
    if (_2141)
    {
        _2417 = _2353;
        _2419 = _2354;
        _2421 = _2355;
    }
    else
    {
        uint _2423 = _2068 + 2u;
        uint _2427 = _2068 + 10u;
        float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2423].w)) * _842) * 0.949999988079071044921875);
        float _2442 = _2441 * _2441;
        float _2443 = cbLight._m0[_2423].x + _918;
        float _2444 = cbLight._m0[_2423].y + _919;
        float _2445 = cbLight._m0[_2423].z + _920;
        float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
        float _2450 = _2449 * _2443;
        float _2451 = _2449 * _2444;
        float _2452 = _2449 * _2445;
        float _2453 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2423].xyz));
        float _4543 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2457 = dot(vec3(_839, _840, _841), vec3(_2450, _2451, _2452));
        float _4554 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2461 = dot(vec3(cbLight._m0[_2423].xyz), vec3(_2450, _2451, _2452));
        float _4565 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2465 = _2442 * _2442;
        float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
        float _2478 = (exp2(log2(1.0 - (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2479 = 1.0 - _2442;
        float _2489 = (0.5 / (((_2233 * ((_2456 * _2479) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2479) + _2442) * _2456))) * _2456;
        float _4576 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2491 = (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
        float _2492 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2417 = (((_2478 * cbLight._m0[_2427].x) * _2491) * _2492) + _2353;
        _2419 = (((_2478 * cbLight._m0[_2427].y) * _2491) * _2492) + _2354;
        _2421 = (((_2478 * cbLight._m0[_2427].z) * _2491) * _2492) + _2355;
    }
    float _2527;
    float _2529;
    float _2531;
    if (_2159)
    {
        _2527 = _2417;
        _2529 = _2419;
        _2531 = _2421;
    }
    else
    {
        uint _2538 = _2068 + 3u;
        uint _2542 = _2068 + 11u;
        float _2556 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2538].w)) * _842) * 0.949999988079071044921875);
        float _2557 = _2556 * _2556;
        float _2558 = cbLight._m0[_2538].x + _918;
        float _2559 = cbLight._m0[_2538].y + _919;
        float _2560 = cbLight._m0[_2538].z + _920;
        float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
        float _2565 = _2564 * _2558;
        float _2566 = _2564 * _2559;
        float _2567 = _2564 * _2560;
        float _2568 = dot(vec3(_839, _840, _841), vec3(cbLight._m0[_2538].xyz));
        float _4592 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2571 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2572 = dot(vec3(_839, _840, _841), vec3(_2565, _2566, _2567));
        float _4603 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2576 = dot(vec3(cbLight._m0[_2538].xyz), vec3(_2565, _2566, _2567));
        float _4614 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2580 = _2557 * _2557;
        float _2584 = ((_2575 * _2575) * (_2580 + (-1.0))) + 1.0;
        float _2593 = (exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2594 = 1.0 - _2557;
        float _2604 = (0.5 / (((_2233 * ((_2571 * _2594) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2594) + _2557) * _2571))) * _2571;
        float _4625 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2606 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2580 / ((_2584 * _2584) * 3.141590118408203125));
        float _2607 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2527 = (((_2593 * cbLight._m0[_2542].x) * _2606) * _2607) + _2417;
        _2529 = (((_2593 * cbLight._m0[_2542].y) * _2606) * _2607) + _2419;
        _2531 = (((_2593 * cbLight._m0[_2542].z) * _2606) * _2607) + _2421;
    }
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    if (_2066.y == 0u)
    {
        float _2682 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2683 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2682;
        float _2684 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2682;
        float _2685 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2682;
        uvec4 _2697 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2698 = _2697.x;
        uint _2709 = uint((float(_2697.y) * floor(float(uint(cbSceneParam._m0[85u].y * _939) / _2698))) + floor(float(uint(cbSceneParam._m0[85u].x * _938) / _2698)));
        float _2719 = (log2(_2685 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2720 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        uint _2723 = uint(isnan(14.0) ? _2720 : (isnan(_2720) ? 14.0 : min(_2720, 14.0)));
        uvec4 _2728 = texelFetch(g_lightClusterGridBuffer, int(((_2723 << 2u) + (_2709 << 6u)) >> 2u));
        uint _2729 = _2728.x;
        uint _2730 = _2697.z;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        if (((((1u << ((_2730 >> 4u) & 15u)) + 4294967295u) & _2729) == 0u) || ((_2730 & 240u) == 0u))
        {
            _2830 = 0.0;
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
        }
        else
        {
            float _2831;
            float _2833;
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            uint _2988 = 0u;
            uint _2997;
            bool _2998;
            for (;;)
            {
                _2997 = texelFetch(g_lightClassification, int((((_2723 << 5u) + (_2709 << 9u)) + (_2988 << 2u)) >> 2u)).x;
                _2998 = _2997 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2998)
                {
                    frontier_phi_66_pred = _2982;
                    frontier_phi_66_pred_1 = _2987;
                    frontier_phi_66_pred_2 = _2986;
                    frontier_phi_66_pred_3 = _2985;
                    frontier_phi_66_pred_4 = _2984;
                    frontier_phi_66_pred_5 = _2983;
                }
                else
                {
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    uint _3133;
                    _3127 = _2982;
                    _3128 = _2983;
                    _3129 = _2984;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2997;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    for (;;)
                    {
                        uint _3137 = uint(findLSB(_3133)) + (_2988 << 5u);
                        uint _3134 = (_3133 + 4294967295u) & _3133;
                        uint _3139 = _3137 * 48u;
                        vec4 _3153 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3139)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 3u)).x));
                        uint _3159 = (_3137 * 48u) + 4u;
                        vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 3u)).x));
                        uint _3178 = (_3137 * 48u) + 8u;
                        vec3 _3189 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x));
                        float _3193 = _3153.x - _2683;
                        float _3194 = _3153.y - _2684;
                        float _3195 = _3153.z - _2685;
                        float _3196 = dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195));
                        float _3199 = inversesqrt(_3196);
                        float _3200 = _3199 * _3193;
                        float _3201 = _3199 * _3194;
                        float _3202 = _3199 * _3195;
                        float _3203 = dot(vec3(_957, _960, _963), vec3(_3200, _3201, _3202));
                        float _3208 = 1.0 - (_3196 * _3153.w);
                        float _4651 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3209 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3210 = sqrt(_3196) * _3172.w;
                        float _3213 = 1.39999997615814208984375 / (_3210 + 1.39999997615814208984375);
                        float _3214 = _3213 * _3213;
                        float _3217 = ((1.0 - _3214) * _3203) + _3214;
                        float _3220 = _3210 * _3210;
                        float _3224 = ((isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0))) * _3209) / ((_3220 * 0.699999988079071044921875) + 1.0);
                        float _3228 = (-0.0) - _2683;
                        float _3229 = (-0.0) - _2684;
                        float _3230 = (-0.0) - _2685;
                        float _3234 = inversesqrt(dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230)));
                        float _3235 = _3234 * _3228;
                        float _3236 = _3234 * _3229;
                        float _3237 = _3234 * _3230;
                        float _3245 = exp2(log2(1.0 / ((_3220 * 3.5) + 5.0)) * 0.25);
                        float _3246 = 1.0 - _1017;
                        float _3253 = sqrt(1.0 - ((1.0 - (_3246 * _3246)) * (1.0 - (_3245 * _3245))));
                        float _3254 = _3253 * _3253;
                        float _3255 = _3254 * _3254;
                        float _3256 = _3235 + _3200;
                        float _3257 = _3236 + _3201;
                        float _3258 = _3237 + _3202;
                        float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
                        float _3266 = dot(vec3(_957, _960, _963), vec3(_3235, _3236, _3237));
                        float _4667 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3269 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3270 = dot(vec3(_957, _960, _963), vec3(_3262 * _3256, _3262 * _3257, _3262 * _3258));
                        float _4678 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3273 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3277 = ((_3273 * _3273) * (_3255 + (-1.0))) + 1.0;
                        float _3278 = _3213 * _3254;
                        float _3279 = _3278 * _3278;
                        float _3282 = ((1.0 - _3279) * _3203) + _3279;
                        float _4689 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3283 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3284 = 1.0 - _3254;
                        float _3294 = (0.5 / (((_3283 * ((_3269 * _3284) + _3254)) + 9.9999999392252902907785028219223e-09) + (((_3283 * _3284) + _3254) * _3269))) * _3283;
                        float _4700 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3305 = (((_3255 * 3.1415927410125732421875) * (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) / ((_3277 * _3277) * ((_3220 * 2.1991131305694580078125) + 3.141590118408203125))) * _3209;
                        _3057 = (_3224 * _3172.x) + _3130;
                        _3058 = (_3224 * _3172.y) + _3131;
                        _3059 = (_3224 * _3172.z) + _3132;
                        _3054 = (_3305 * _3189.x) + _3127;
                        _3055 = (_3305 * _3189.y) + _3128;
                        _3056 = (_3305 * _3189.z) + _3129;
                        if (_3134 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3127 = _3054;
                            _3128 = _3055;
                            _3129 = _3056;
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3134;
                        }
                    }
                    frontier_phi_66_pred = _3054;
                    frontier_phi_66_pred_1 = _3059;
                    frontier_phi_66_pred_2 = _3058;
                    frontier_phi_66_pred_3 = _3057;
                    frontier_phi_66_pred_4 = _3056;
                    frontier_phi_66_pred_5 = _3055;
                }
                _2831 = frontier_phi_66_pred;
                _2841 = frontier_phi_66_pred_1;
                _2839 = frontier_phi_66_pred_2;
                _2837 = frontier_phi_66_pred_3;
                _2835 = frontier_phi_66_pred_4;
                _2833 = frontier_phi_66_pred_5;
                uint _2989 = _2988 + 1u;
                if (_2989 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2982 = _2831;
                    _2983 = _2833;
                    _2984 = _2835;
                    _2985 = _2837;
                    _2986 = _2839;
                    _2987 = _2841;
                    _2988 = _2989;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2830 = _2831;
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
        }
        uvec4 _2844 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2845 = _2844.z;
        uint _2847 = (_2845 >> 8u) & 15u;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        if (((4294967295u << _2847) & _2729) == 0u)
        {
            _2950 = _2830;
            _2952 = _2832;
            _2954 = _2834;
            _2956 = _2836;
            _2958 = _2838;
            _2960 = _2840;
        }
        else
        {
            float _2975 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
            float _2976 = _2975 * _2683;
            float _2977 = _2975 * _2684;
            float _2978 = _2975 * _2685;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2847 < ((_2845 >> 12u) & 15u))
            {
                float _2951;
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _3110 = _2830;
                float _3111 = _2832;
                float _3112 = _2834;
                float _3113 = _2836;
                float _3114 = _2838;
                float _3115 = _2840;
                uint _3116 = _2847;
                uint _3125;
                bool _3126;
                for (;;)
                {
                    _3125 = texelFetch(g_lightClassification, int((((_2723 << 5u) + (_2709 << 9u)) + (_3116 << 2u)) >> 2u)).x;
                    _3126 = _3125 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3126)
                    {
                        frontier_phi_77_pred = _3115;
                        frontier_phi_77_pred_1 = _3114;
                        frontier_phi_77_pred_2 = _3113;
                        frontier_phi_77_pred_3 = _3112;
                        frontier_phi_77_pred_4 = _3111;
                        frontier_phi_77_pred_5 = _3110;
                    }
                    else
                    {
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3332 = _3110;
                        float _3333 = _3111;
                        float _3334 = _3112;
                        float _3335 = _3113;
                        float _3336 = _3114;
                        float _3337 = _3115;
                        uint _3338 = _3125;
                        uint _3339;
                        vec4 _3364;
                        float _3365;
                        vec4 _3380;
                        vec3 _3392;
                        vec4 _3407;
                        vec4 _3422;
                        float _3468;
                        bool _3469;
                        for (;;)
                        {
                            uint _3349 = ((_3116 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3338));
                            _3339 = (_3338 + 4294967295u) & _3338;
                            uint _3351 = _3349 * 40u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            _3365 = _3364.w;
                            uint _3367 = (_3349 * 40u) + 4u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3382 = (_3349 * 40u) + 8u;
                            _3392 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x));
                            uint _3394 = (_3349 * 40u) + 16u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3409 = (_3349 * 40u) + 20u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3424 = (_3349 * 40u) + 24u;
                            vec4 _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3443 = (_3349 * 40u) + 28u;
                            vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            _3468 = fma(_2685, _3456.z, fma(_2684, _3456.y, _3456.x * _2683)) + _3456.w;
                            _3469 = !((fma(_2685, _3437.z, fma(_2684, _3437.y, _3437.x * _2683)) + _3437.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3469)
                            {
                                float _3496 = _3364.x - _2683;
                                float _3497 = _3364.y - _2684;
                                float _3498 = _3364.z - _2685;
                                float _3499 = dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498));
                                float _3502 = inversesqrt(_3499);
                                float _3503 = _3502 * _3496;
                                float _3504 = _3502 * _3497;
                                float _3505 = _3502 * _3498;
                                float _3509 = 1.0 - (_3499 / (_3365 * _3365));
                                float _4711 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3510 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3514 = sqrt(_3499) * _3380.w;
                                float _3516 = 1.39999997615814208984375 / (_3514 + 1.39999997615814208984375);
                                float _3517 = _3516 * _3516;
                                float _3520 = ((1.0 - _3517) * dot(vec3(_3503, _3504, _3505), vec3(_957, _960, _963))) + _3517;
                                float _3523 = _3514 * _3514;
                                float _3527 = (fma(_2685, _3407.z, fma(_2684, _3407.y, _3407.x * _2683)) + _3407.w) / _3468;
                                float _3528 = (fma(_2685, _3422.z, fma(_2684, _3422.y, _3422.x * _2683)) + _3422.w) / _3468;
                                float _3532 = 1.0 - dot(vec2(_3527, _3528), vec2(_3527, _3528));
                                float _4727 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3534 = _3533 * (((isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0))) * _3510) / ((_3523 * 0.699999988079071044921875) + 1.0));
                                float _3546 = exp2(log2(1.0 / ((_3523 * 3.5) + 5.0)) * 0.25);
                                float _3547 = 1.0 - _1017;
                                float _3554 = sqrt(1.0 - ((1.0 - (_3547 * _3547)) * (1.0 - (_3546 * _3546))));
                                float _3555 = _3554 * _3554;
                                float _3556 = _3555 * _3555;
                                float _3557 = _3503 - _2976;
                                float _3558 = _3504 - _2977;
                                float _3559 = _3505 - _2978;
                                float _3563 = inversesqrt(dot(vec3(_3557, _3558, _3559), vec3(_3557, _3558, _3559)));
                                float _3567 = dot(vec3(_957, _960, _963), vec3((-0.0) - _2976, (-0.0) - _2977, (-0.0) - _2978));
                                float _4738 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3570 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3571 = dot(vec3(_957, _960, _963), vec3(_3563 * _3557, _3563 * _3558, _3563 * _3559));
                                float _4749 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3574 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3578 = ((_3574 * _3574) * (_3556 + (-1.0))) + 1.0;
                                float _3579 = _3516 * _3555;
                                float _3580 = _3579 * _3579;
                                float _3586 = ((1.0 - _3580) * dot(vec3(_957, _960, _963), vec3(_3503, _3504, _3505))) + _3580;
                                float _4760 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3587 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3588 = 1.0 - _3555;
                                float _3598 = (0.5 / (((_3587 * ((_3570 * _3588) + _3555)) + 9.9999999392252902907785028219223e-09) + (((_3587 * _3588) + _3555) * _3570))) * _3587;
                                float _4771 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3608 = (_3533 * _3510) * (((_3556 * 3.1415927410125732421875) * (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) / ((_3578 * _3578) * ((_3523 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3534 * _3380.y;
                                frontier_phi_83_pred_1 = _3534 * _3380.x;
                                frontier_phi_83_pred_2 = _3608 * _3392.z;
                                frontier_phi_83_pred_3 = _3608 * _3392.y;
                                frontier_phi_83_pred_4 = _3608 * _3392.x;
                                frontier_phi_83_pred_5 = _3534 * _3380.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3616 = frontier_phi_83_pred;
                            _3615 = frontier_phi_83_pred_1;
                            _3614 = frontier_phi_83_pred_2;
                            _3613 = frontier_phi_83_pred_3;
                            _3612 = frontier_phi_83_pred_4;
                            _3617 = frontier_phi_83_pred_5;
                            _3322 = _3615 + _3335;
                            _3323 = _3616 + _3336;
                            _3324 = _3617 + _3337;
                            _3319 = _3612 + _3332;
                            _3320 = _3613 + _3333;
                            _3321 = _3614 + _3334;
                            if (_3339 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3339;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3324;
                        frontier_phi_77_pred_1 = _3323;
                        frontier_phi_77_pred_2 = _3322;
                        frontier_phi_77_pred_3 = _3321;
                        frontier_phi_77_pred_4 = _3320;
                        frontier_phi_77_pred_5 = _3319;
                    }
                    _2961 = frontier_phi_77_pred;
                    _2959 = frontier_phi_77_pred_1;
                    _2957 = frontier_phi_77_pred_2;
                    _2955 = frontier_phi_77_pred_3;
                    _2953 = frontier_phi_77_pred_4;
                    _2951 = frontier_phi_77_pred_5;
                    uint _3117 = _3116 + 1u;
                    if (_3117 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3110 = _2951;
                        _3111 = _2953;
                        _3112 = _2955;
                        _3113 = _2957;
                        _3114 = _2959;
                        _3115 = _2961;
                        _3116 = _3117;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2955;
                frontier_phi_58_59_ladder_1 = _2961;
                frontier_phi_58_59_ladder_2 = _2959;
                frontier_phi_58_59_ladder_3 = _2957;
                frontier_phi_58_59_ladder_4 = _2953;
                frontier_phi_58_59_ladder_5 = _2951;
            }
            else
            {
                frontier_phi_58_59_ladder = _2834;
                frontier_phi_58_59_ladder_1 = _2840;
                frontier_phi_58_59_ladder_2 = _2838;
                frontier_phi_58_59_ladder_3 = _2836;
                frontier_phi_58_59_ladder_4 = _2832;
                frontier_phi_58_59_ladder_5 = _2830;
            }
            _2950 = frontier_phi_58_59_ladder_5;
            _2952 = frontier_phi_58_59_ladder_4;
            _2954 = frontier_phi_58_59_ladder;
            _2956 = frontier_phi_58_59_ladder_3;
            _2958 = frontier_phi_58_59_ladder_2;
            _2960 = frontier_phi_58_59_ladder_1;
        }
        float _2965 = isnan(1.0) ? _1001 : (isnan(_1001) ? 1.0 : min(_1001, 1.0));
        _2742 = (_2965 * _2956) + _2197;
        _2744 = (_2965 * _2958) + _2199;
        _2746 = (_2965 * _2960) + _2201;
        _2748 = ((_2950 * 0.039999999105930328369140625) * _2965) + _2527;
        _2750 = ((_2952 * 0.039999999105930328369140625) * _2965) + _2529;
        _2752 = ((_2954 * 0.039999999105930328369140625) * _2965) + _2531;
    }
    else
    {
        _2742 = _2197;
        _2744 = _2199;
        _2746 = _2201;
        _2748 = _2527;
        _2750 = _2529;
        _2752 = _2531;
    }
    float _4787 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _4798 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _4809 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _2769 = ((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2742 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1001))) + ((_2748 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1837)) * cbPerFrame._m0[3u].x);
    float _2770 = ((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2744 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1001))) + ((_2750 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1837)) * cbPerFrame._m0[3u].x);
    float _2771 = ((isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2746 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1001))) + ((_2752 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1837)) * cbPerFrame._m0[3u].x);
    uint _2772 = _277 + 6u;
    float _2780 = _938 / cbSceneParam._m0[86u].x;
    float _2781 = _939 / cbSceneParam._m0[86u].y;
    vec4 _2795 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2780, _2781, (log2((isnan(cbSceneParam._m0[77u].w) ? _860 : (isnan(_860) ? cbSceneParam._m0[77u].w : min(_860, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2797 = _2795.x;
    float _2798 = _2795.y;
    float _2799 = _2795.z;
    float _2800 = _2795.w;
    float _2892;
    float _2894;
    float _2896;
    float _2898;
    if (_860 > cbSceneParam._m0[78u].w)
    {
        float _2855 = isnan(_860) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _860 : min(cbSceneParam._m0[80u].w, _860));
        float _2856 = _2855 / _860;
        float _2867 = _2856 * _911;
        float _2868 = _912 * _2856;
        float _2869 = (-0.0) - _2868;
        float _2870 = _2856 * _913;
        float _2872 = (cbSceneParam._m0[77u].w * _2869) / _2855;
        float _2873 = _2872 + cbSceneParam._m0[79u].w;
        float _2874 = cbSceneParam._m0[79u].w - _2868;
        float _2880 = sqrt(((_2867 * _2867) + (_2868 * _2868)) + (_2870 * _2870));
        float _2883 = (1.0 - (cbSceneParam._m0[77u].w / _2855)) * _2880;
        float _2888 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2890 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3067;
        if (abs((_2869 - _2872) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3067 = ((((_2873 > 0.0) ? exp2(_2888 * _2873) : (2.0 - exp2(_2890 * _2873))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2883;
        }
        else
        {
            float _3011 = 1.0 / cbSceneParam._m0[80u].x;
            float _3012 = isnan(_2874) ? _2873 : (isnan(_2873) ? _2874 : max(_2873, _2874));
            float _3013 = isnan(_2874) ? _2873 : (isnan(_2873) ? _2874 : min(_2873, _2874));
            float _3022 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : min(_3012, 0.0));
            float _3023 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : min(_3013, 0.0));
            _3067 = ((abs(_2880 / _2869) * cbSceneParam._m0[80u].y) * ((((_3022 - _3023) * 2.0) - ((exp2(_2888 * (isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0)))) - exp2(_2888 * (isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0))))) * _3011)) - ((exp2(_2890 * _3022) - exp2(_2890 * _3023)) * _3011))) + (_2883 * cbSceneParam._m0[80u].z);
        }
        vec4 _3069 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2780, _2781, 1.0), 0.0);
        float _3078 = exp2((_3067 * (-1.44269502162933349609375)) * (1.0 - _3069.w));
        float _3079 = log2(_3078);
        float _3095 = log2(_2800);
        _2892 = (exp2(_3095 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].x)) * _3069.x) / cbSceneParam._m0[78u].x)) + _2797;
        _2894 = (exp2(_3095 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].y)) * _3069.y) / cbSceneParam._m0[78u].y)) + _2798;
        _2896 = (exp2(_3095 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].z)) * _3069.z) / cbSceneParam._m0[78u].z)) + _2799;
        _2898 = _3078 * _2800;
    }
    else
    {
        _2892 = _2797;
        _2894 = _2798;
        _2896 = _2799;
        _2898 = _2800;
    }
    bool _3105;
    vec4 _2908;
    vec4 _2930;
    float _2932;
    float _2936;
    float _2937;
    float _2938;
    float _2939;
    bool _2949;
    for (;;)
    {
        _2908 = cbMatDynParam._m0[0u];
        float _2910 = roundEven(_2908.y);
        bool _2911 = _2910 == 3.0;
        float _2912 = log2(_2898);
        float _2919 = exp2(_2912 * cbSceneParam._m0[78u].x) * _2769;
        float _2920 = exp2(_2912 * cbSceneParam._m0[78u].y) * _2770;
        float _2921 = exp2(_2912 * cbSceneParam._m0[78u].z) * _2771;
        float _2928 = _927 + (-0.5);
        _2930 = cbMtdParam._m0[1u];
        _2932 = _2930.y * _2928;
        float _2935 = (_2910 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2936 = _2935 * (_2911 ? _2919 : (_2919 + (cbSceneParam._m0[72u].w * _2892)));
        _2937 = _2935 * (_2911 ? _2920 : (_2920 + (cbSceneParam._m0[72u].w * _2894)));
        _2938 = _2935 * (_2911 ? _2921 : (_2921 + (cbSceneParam._m0[72u].w * _2896)));
        _2939 = _2928 * 0.999000012874603271484375;
        _2949 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2949)
        {
            if ((cbInstanceData._m0[_277 + 7u].x + _2939) < 0.5)
            {
                _3105 = true;
                break;
            }
        }
        uint _3046 = _976 + uint(_2908.w);
        if ((cbInstanceData._m0[_3046].w < 1.0) && ((cbInstanceData._m0[_3046].w + _2939) < 0.5))
        {
            _3105 = true;
            break;
        }
        if ((_2932 + 1.0) < _2930.x)
        {
            _3105 = true;
            break;
        }
        _3105 = false;
        break;
    }
    float _3310;
    if (_3105)
    {
        discard_state = true;
        _3310 = 0.0;
    }
    else
    {
        _3310 = cbInstanceData._m0[_2772].w;
    }
    SV_Target.x = _2936;
    SV_Target.y = _2937;
    SV_Target.z = _2938;
    SV_Target.w = _3310;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2772].w;
    discard_exit();
}


