#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1000;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    uint _220 = uint(roundEven(NORMAL.w)) * 13u;
    uint _226 = _220 + 1u;
    uint _230 = _220 + 2u;
    float _239 = sqrt(((cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x) + (cbInstanceData._m0[_220].x * cbInstanceData._m0[_220].x)) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x));
    float _240 = _239 * TEXCOORD.z;
    float _241 = _239 * TEXCOORD.w;
    vec4 _260 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _266 = _260.x * cbMtdParam._m0[9u].x;
    float _267 = _260.y * cbMtdParam._m0[9u].y;
    float _268 = _260.z * cbMtdParam._m0[9u].z;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _240) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _241) + cbTextureTilingScale._m0[14u].w));
    vec4 _307 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _311 = _307.z;
    float _316 = (_307.x * 2.0) + (-1.0);
    float _318 = (_307.y * 2.0) + (-1.0);
    float _319 = dot(vec2(_316, _318), vec2(_316, _318));
    float _3308 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _325 = sqrt(1.0 - (isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0))));
    float _328 = fma(_325, _208, fma(_318, _215, _316 * _201));
    float _331 = fma(_325, _209, fma(_318, _216, _316 * _202));
    float _334 = fma(_325, _210, fma(_318, _217, _316 * _203));
    float _338 = inversesqrt(dot(vec3(_328, _331, _334), vec3(_328, _331, _334)));
    vec4 _374 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _240) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _241) + cbTextureTilingScale._m0[11u].w));
    float _376 = _374.x;
    float _377 = 1.0 - _376;
    float _384 = ((_376 - _377) * cbMtdParam._m0[24u].z) + _377;
    float _386 = (cbMtdParam._m0[19u].x + dot(vec4(_338 * _328, _338 * _331, _338 * _334, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_384 * cbMtdParam._m0[21u].z);
    float _3319 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
    float _402 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_384 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3330 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
    float _407 = ((_387 * ((_287.x * cbMtdParam._m0[18u].x) - _266)) * _403) + _266;
    float _408 = ((_387 * ((_287.y * cbMtdParam._m0[18u].y) - _267)) * _403) + _267;
    float _409 = ((_387 * ((_287.z * cbMtdParam._m0[18u].z) - _268)) * _403) + _268;
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _240) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _241) + cbTextureTilingScale._m0[15u].w));
    float _429 = (_422.x * 2.0) + (-1.0);
    float _430 = (_422.y * 2.0) + (-1.0);
    float _431 = dot(vec2(_429, _430), vec2(_429, _430));
    float _3341 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _440 = (((_422.z - _311) * _387) * _403) + _311;
    float _455 = (((cbMtdParam._m0[21u].x * _316) + ((_429 - _316) * _387)) * _403) + _316;
    float _456 = (((cbMtdParam._m0[21u].x * _318) + ((_430 - _318) * _387)) * _403) + _318;
    float _457 = (((sqrt(1.0 - (isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0)))) - _325) * _387) * _403) + _325;
    float _462 = cbMtdParam._m0[22u].x + _307.w;
    float _465 = fma(_457, _208, fma(_456, _215, _455 * _201));
    float _468 = fma(_457, _209, fma(_456, _216, _455 * _202));
    float _471 = fma(_457, _210, fma(_456, _217, _455 * _203));
    float _475 = inversesqrt(dot(vec3(_465, _468, _471), vec3(_465, _468, _471)));
    float _476 = _475 * _465;
    float _477 = _475 * _468;
    float _478 = _475 * _471;
    float _3352 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _479 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _3363 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3374 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _3385 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _3396 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _497 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _548 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _538);
    float _549 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _538);
    float _550 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _538);
    float _554 = inversesqrt(dot(vec3(_548, _549, _550), vec3(_548, _549, _550)));
    float _555 = _548 * _554;
    float _556 = _549 * _554;
    float _557 = _550 * _554;
    float _563 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _564 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _585 = fma(_478, cbSceneParam._m0[5u].z, fma(_477, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _476));
    float _588 = fma(_478, cbSceneParam._m0[6u].z, fma(_477, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _476));
    float _591 = fma(_478, cbSceneParam._m0[7u].z, fma(_477, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _476));
    uint _605 = (_220 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _611 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) * cbInstanceData._m0[_605].x;
    float _612 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)))) * cbInstanceData._m0[_605].y;
    float _613 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0)))) * cbInstanceData._m0[_605].z;
    float _3407 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _3418 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _3429 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    vec4 _625 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _563, cbSceneParam._m0[86u].y * _564));
    float _629 = ((isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * TEXCOORD_5.w) * _625.x;
    float _630 = dot(vec3(_476, _477, _478), vec3(_555, _556, _557));
    float _633 = _630 * 2.0;
    float _637 = (_633 * _476) - _555;
    float _638 = (_633 * _477) - _556;
    float _639 = (_633 * _478) - _557;
    float _643 = abs(dot(vec3(_555, _556, _557), vec3(_476, _477, _478)));
    float _3440 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _645 = sqrt(_479);
    float _658 = exp2((_645 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_645 * 3.0));
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _999;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _724 = fma(_698, cbModelParam._m0[26u].z, fma(_694, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _690));
        float _728 = fma(_698, cbModelParam._m0[27u].z, fma(_694, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _690));
        float _732 = fma(_698, cbModelParam._m0[28u].z, fma(_694, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _690));
        float _757 = _690 + _476;
        float _758 = _694 + _477;
        float _759 = _698 + _478;
        float _769 = fma(_759, cbModelParam._m0[26u].z, fma(_758, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _757)) - _724;
        float _770 = fma(_759, cbModelParam._m0[27u].z, fma(_758, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _757)) - _728;
        float _771 = fma(_759, cbModelParam._m0[28u].z, fma(_758, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _757)) - _732;
        float _775 = inversesqrt(dot(vec3(_769, _770, _771), vec3(_769, _770, _771)));
        float _788 = ((_775 * _769) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_724 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _789 = ((_775 * _770) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_728 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _790 = ((_775 * _771) / cbModelParam._m0[34u].z) + ((((((_732 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        float _827 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _828 = _827 * (_793.x + (-0.5));
        float _829 = _827 * (_793.y + (-0.5));
        float _830 = _827 * (_793.z + (-0.5));
        float _837 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_800.x + (-0.5));
        float _839 = _837 * (_800.y + (-0.5));
        float _840 = _837 * (_800.z + (-0.5));
        float _847 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_807.x + (-0.5));
        float _849 = _847 * (_807.y + (-0.5));
        float _850 = _847 * (_807.z + (-0.5));
        float _857 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_814.x + (-0.5));
        float _859 = _857 * (_814.y + (-0.5));
        float _860 = _857 * (_814.z + (-0.5));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = _828 * 0.5;
        float _865 = _838 * 0.5;
        float _866 = _848 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _881 = (dot(vec3(_476, _477, _478), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3466 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _891 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _3477 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3488 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * (_893 + 1.0))) + _898) * _861;
        float _908 = _829 * 0.5;
        float _909 = _839 * 0.5;
        float _910 = _849 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _924 = (dot(vec3(_476, _477, _478), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3499 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _933 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _3510 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3521 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * (_935 + 1.0))) + _940) * _862;
        float _950 = _830 * 0.5;
        float _951 = _840 * 0.5;
        float _952 = _850 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_476, _477, _478), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3554 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_977 + 1.0))) + _982) * _863;
        _999 = _830;
        _1001 = _829;
        _1002 = _828;
        _1003 = _840;
        _1004 = _839;
        _1005 = _838;
        _1006 = _850;
        _1007 = _849;
        _1008 = _848;
        _1009 = _863;
        _1010 = _862;
        _1011 = _861;
        _1012 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
        _1013 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
    }
    else
    {
        _999 = _1000;
        _1001 = _1000;
        _1002 = _1000;
        _1003 = _1000;
        _1004 = _1000;
        _1005 = _1000;
        _1006 = _1000;
        _1007 = _1000;
        _1008 = _1000;
        _1009 = _1000;
        _1010 = _1000;
        _1011 = _1000;
        _1012 = 0.0;
        _1013 = 0.0;
        _1014 = 0.0;
    }
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1039 = fma(_698, cbModelParam._m0[30u].z, fma(_694, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _690));
        float _1043 = fma(_698, cbModelParam._m0[31u].z, fma(_694, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _690));
        float _1047 = fma(_698, cbModelParam._m0[32u].z, fma(_694, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _690));
        float _1070 = _690 + _476;
        float _1071 = _694 + _477;
        float _1072 = _698 + _478;
        float _1082 = fma(_1072, cbModelParam._m0[30u].z, fma(_1071, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1070)) - _1039;
        float _1083 = fma(_1072, cbModelParam._m0[31u].z, fma(_1071, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1070)) - _1043;
        float _1084 = fma(_1072, cbModelParam._m0[32u].z, fma(_1071, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1070)) - _1047;
        float _1088 = inversesqrt(dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084)));
        float _1101 = ((_1088 * _1082) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1039 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1088 * _1083) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1043 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1088 * _1084) / cbModelParam._m0[35u].z) + ((((((_1047 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        float _1138 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1105.x + (-0.5));
        float _1140 = _1138 * (_1105.y + (-0.5));
        float _1141 = _1138 * (_1105.z + (-0.5));
        float _1148 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1112.x + (-0.5));
        float _1150 = _1148 * (_1112.y + (-0.5));
        float _1151 = _1148 * (_1112.z + (-0.5));
        float _1158 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1119.x + (-0.5));
        float _1160 = _1158 * (_1119.y + (-0.5));
        float _1161 = _1158 * (_1119.z + (-0.5));
        float _1168 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1126.x + (-0.5));
        float _1170 = _1168 * (_1126.y + (-0.5));
        float _1171 = _1168 * (_1126.z + (-0.5));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = _1139 * 0.5;
        float _1176 = _1149 * 0.5;
        float _1177 = _1159 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_476, _477, _478), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3617 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_1202 + 1.0))) + _1207) * _1172;
        float _1217 = _1140 * 0.5;
        float _1218 = _1150 * 0.5;
        float _1219 = _1160 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_476, _477, _478), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3650 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1244 + 1.0))) + _1249) * _1173;
        float _1259 = _1141 * 0.5;
        float _1260 = _1151 * 0.5;
        float _1261 = _1161 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_476, _477, _478), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3683 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1286 + 1.0))) + _1291) * _1174;
        _1308 = _1141;
        _1309 = _1140;
        _1310 = _1139;
        _1311 = _1151;
        _1312 = _1150;
        _1313 = _1149;
        _1314 = _1161;
        _1315 = _1160;
        _1316 = _1159;
        _1317 = _1174;
        _1318 = _1173;
        _1319 = _1172;
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1322 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
    }
    else
    {
        _1308 = _1000;
        _1309 = _1000;
        _1310 = _1000;
        _1311 = _1000;
        _1312 = _1000;
        _1313 = _1000;
        _1314 = _1000;
        _1315 = _1000;
        _1316 = _1000;
        _1317 = _1000;
        _1318 = _1000;
        _1319 = _1000;
        _1320 = 0.0;
        _1321 = 0.0;
        _1322 = 0.0;
    }
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1012)) + _1012;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1013)) + _1013;
    float _1334 = (cbModelParam._m0[1u].x * (_1322 - _1014)) + _1014;
    float _1355 = fma(_1334, cbSceneParam._m0[89u].z, fma(_1333, cbSceneParam._m0[89u].y, _1332 * cbSceneParam._m0[89u].x));
    float _1358 = fma(_1334, cbSceneParam._m0[90u].z, fma(_1333, cbSceneParam._m0[90u].y, _1332 * cbSceneParam._m0[90u].x));
    float _1361 = fma(_1334, cbSceneParam._m0[91u].z, fma(_1333, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1332));
    float _1376 = _637 * 0.5;
    float _1377 = _638 * 0.5;
    float _1378 = _639 * 0.5;
    float _1379 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1382 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1385 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1419;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1392 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_999, _1003, _1006, _1009));
        float _1396 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1001, _1004, _1007, _1010));
        float _1400 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1002, _1005, _1008, _1011));
        float _1407 = dot(vec4(cbModelParam._m0[39u]), vec4(_1376, _1377, _1378, 1.0));
        _1419 = dot(vec3(isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1407) ? 0.0 : (isnan(0.0) ? _1407 : max(0.0, _1407))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1419 = 1.0;
    }
    float _1430;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1421 = dot(vec4(cbModelParam._m0[40u]), vec4(_1376, _1377, _1378, 1.0));
        _1430 = dot(vec3(isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1421) ? 0.0 : (isnan(0.0) ? _1421 : max(0.0, _1421))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1430 = 1.0;
    }
    float _1434 = (_1430 * cbModelParam._m0[1u].x) + (_1419 * (1.0 - cbModelParam._m0[1u].x));
    float _1444 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _479);
    float _1445 = isnan(_1444) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1444 : min(cbModelParam._m0[25u].z, _1444));
    float _1525;
    float _1527;
    float _1529;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1492 = fma(_698, cbModelParam._m0[13u].z, fma(_694, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _690)) + cbModelParam._m0[13u].w;
        float _1496 = fma(_698, cbModelParam._m0[14u].z, fma(_694, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _690)) + cbModelParam._m0[14u].w;
        float _1500 = fma(_698, cbModelParam._m0[15u].z, fma(_694, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _690)) + cbModelParam._m0[15u].w;
        float _1503 = fma(_639, cbModelParam._m0[13u].z, fma(_638, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _637));
        float _1506 = fma(_639, cbModelParam._m0[14u].z, fma(_638, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _637));
        float _1509 = fma(_639, cbModelParam._m0[15u].z, fma(_638, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _637));
        float _1537;
        if (_1503 > 0.0)
        {
            _1537 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1537 = frontier_phi_14_12_ladder;
        }
        float _1739;
        if (_1506 > 0.0)
        {
            _1739 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1739 = frontier_phi_23_19_ladder;
        }
        float _1982;
        if (_1509 > 0.0)
        {
            _1982 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1982 = frontier_phi_35_30_ladder;
        }
        float _1984 = isnan(_1739) ? _1537 : (isnan(_1537) ? _1739 : min(_1537, _1739));
        float _1985 = isnan(_1982) ? _1984 : (isnan(_1984) ? _1982 : min(_1984, _1982));
        float _1989 = (_1985 * _1503) + _1492;
        float _1990 = (_1985 * _1506) + _1496;
        float _1991 = (_1985 * _1509) + _1500;
        float _1992 = _1985 * 9.9999997473787516355514526367188e-05;
        float _1994 = (-1.0) - _1992;
        float _1996 = _1992 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1991 > _1996) || ((_1991 < _1994) || ((_1990 > _1996) || ((_1990 < _1994) || ((_1989 < _1994) || (_1989 > _1996))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2115 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1991, cbModelParam._m0[9u].z, fma(_1990, cbModelParam._m0[9u].y, _1989 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1991, cbModelParam._m0[10u].z, fma(_1990, cbModelParam._m0[10u].y, _1989 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1991, cbModelParam._m0[11u].z, fma(_1990, cbModelParam._m0[11u].y, _1989 * cbModelParam._m0[11u].x))), _1445);
            frontier_phi_13_35_ladder = _2115.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2115.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2115.x * cbModelParam._m0[1u].y;
        }
        _1525 = frontier_phi_13_35_ladder_2;
        _1527 = frontier_phi_13_35_ladder_1;
        _1529 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_637, _638, _639), _1445);
        _1525 = _1513.x * cbModelParam._m0[1u].y;
        _1527 = _1513.y * cbModelParam._m0[1u].y;
        _1529 = _1513.z * cbModelParam._m0[1u].y;
    }
    float _1533 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _479);
    float _1534 = isnan(_1533) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1533 : min(cbModelParam._m0[25u].w, _1533));
    float _1623;
    float _1625;
    float _1627;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1587 = fma(_698, cbModelParam._m0[21u].z, fma(_694, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _690)) + cbModelParam._m0[21u].w;
        float _1591 = fma(_698, cbModelParam._m0[22u].z, fma(_694, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _690)) + cbModelParam._m0[22u].w;
        float _1595 = fma(_698, cbModelParam._m0[23u].z, fma(_694, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _690)) + cbModelParam._m0[23u].w;
        float _1598 = fma(_639, cbModelParam._m0[21u].z, fma(_638, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _637));
        float _1601 = fma(_639, cbModelParam._m0[22u].z, fma(_638, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _637));
        float _1604 = fma(_639, cbModelParam._m0[23u].z, fma(_638, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _637));
        float _1744;
        if (_1598 > 0.0)
        {
            _1744 = abs((1.0 - _1587) / _1598);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1587 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1744 = frontier_phi_25_21_ladder;
        }
        float _2009;
        if (_1601 > 0.0)
        {
            _2009 = abs((1.0 - _1591) / _1601);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1591 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2009 = frontier_phi_37_32_ladder;
        }
        float _2214;
        if (_1604 > 0.0)
        {
            _2214 = abs((1.0 - _1595) / _1604);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1595 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2214 = frontier_phi_46_43_ladder;
        }
        float _2216 = isnan(_2009) ? _1744 : (isnan(_1744) ? _2009 : min(_1744, _2009));
        float _2217 = isnan(_2214) ? _2216 : (isnan(_2216) ? _2214 : min(_2216, _2214));
        float _2221 = (_2217 * _1598) + _1587;
        float _2222 = (_2217 * _1601) + _1591;
        float _2223 = (_2217 * _1604) + _1595;
        float _2224 = _2217 * 9.9999997473787516355514526367188e-05;
        float _2225 = (-1.0) - _2224;
        float _2227 = _2224 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2223 > _2227) || ((_2223 < _2225) || ((_2222 > _2227) || ((_2222 < _2225) || ((_2221 < _2225) || (_2221 > _2227))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2422 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2223, cbModelParam._m0[17u].z, fma(_2222, cbModelParam._m0[17u].y, _2221 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2223, cbModelParam._m0[18u].z, fma(_2222, cbModelParam._m0[18u].y, _2221 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2223, cbModelParam._m0[19u].z, fma(_2222, cbModelParam._m0[19u].y, _2221 * cbModelParam._m0[19u].x))), _1534);
            frontier_phi_22_46_ladder = _2422.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2422.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2422.x * cbModelParam._m0[1u].z;
        }
        _1623 = frontier_phi_22_46_ladder_2;
        _1625 = frontier_phi_22_46_ladder_1;
        _1627 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1607 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_637, _638, _639), _1534);
        _1623 = _1607.x * cbModelParam._m0[1u].z;
        _1625 = _1607.y * cbModelParam._m0[1u].z;
        _1627 = _1607.z * cbModelParam._m0[1u].z;
    }
    float _1639 = ((((1.0 - _658) * ((_645 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_658 * _645)) * _629;
    float _1640 = _1639 * ((cbModelParam._m0[1u].w * (_1623 - _1525)) + _1525);
    float _1641 = _1639 * ((cbModelParam._m0[1u].w * (_1625 - _1527)) + _1527);
    float _1642 = _1639 * ((cbModelParam._m0[1u].w * (_1627 - _1529)) + _1529);
    float _1645 = fma(_1642, cbSceneParam._m0[89u].z, fma(_1641, cbSceneParam._m0[89u].y, _1640 * cbSceneParam._m0[89u].x));
    float _1648 = fma(_1642, cbSceneParam._m0[90u].z, fma(_1641, cbSceneParam._m0[90u].y, _1640 * cbSceneParam._m0[90u].x));
    float _1651 = fma(_1642, cbSceneParam._m0[91u].z, fma(_1641, cbSceneParam._m0[91u].y, _1640 * cbSceneParam._m0[91u].x));
    uvec4 _1661 = floatBitsToUint(cbInstanceData._m0[_220 + 5u]);
    uint _1663 = _1661.x * 14u;
    uint _1664 = _1663 + 13u;
    float _1671 = _629 + (-1.0);
    float _1676 = (cbLight._m0[_1664].x * _1671) + 1.0;
    float _1677 = (cbLight._m0[_1664].y * _1671) + 1.0;
    float _1678 = (cbLight._m0[_1664].z * _1671) + 1.0;
    float _1679 = (cbLight._m0[_1664].w * _1671) + 1.0;
    uint _1680 = _1663 + 5u;
    float _1686 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
    uint _1690 = _1663 + 4u;
    float _1697 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
    uint _1701 = _1663 | 1u;
    float _1712 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_476, _477, _478));
    float _1715 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_476, _477, _478));
    float _3819 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _3830 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1720 = (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * 0.3183098733425140380859375;
    float _1722 = (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.3183098733425140380859375;
    float _1729 = ((cbLight._m0[_1680].x * _1686) * _1722) + ((cbLight._m0[_1690].x * _1697) * _1720);
    float _1730 = ((_1686 * cbLight._m0[_1680].y) * _1722) + ((_1697 * cbLight._m0[_1690].y) * _1720);
    float _1731 = ((_1686 * cbLight._m0[_1680].z) * _1722) + ((_1697 * cbLight._m0[_1690].z) * _1720);
    uvec4 _1736 = floatBitsToUint(cbLight._m0[_1663 + 12u]);
    bool _1738 = _1736.x == 0u;
    float _1749;
    float _1751;
    float _1753;
    if (_1738)
    {
        _1749 = _1729;
        _1751 = _1730;
        _1753 = _1731;
    }
    else
    {
        uint _1757 = _1663 + 6u;
        float _1773 = (dot(vec3(cbLight._m0[_1663 + 2u].xyz), vec3(_476, _477, _478)) * 0.5) + 0.5;
        float _1774 = _1773 * _1773;
        float _3841 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1776 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _1749 = (((cbLight._m0[_1757].x * 0.3183098733425140380859375) * _1775) * _1776) + _1729;
        _1751 = (((cbLight._m0[_1757].y * 0.3183098733425140380859375) * _1775) * _1776) + _1730;
        _1753 = (((cbLight._m0[_1757].z * 0.3183098733425140380859375) * _1775) * _1776) + _1731;
    }
    bool _1756 = _1736.y == 0u;
    float _1794;
    float _1796;
    float _1798;
    if (_1756)
    {
        _1794 = _1749;
        _1796 = _1751;
        _1798 = _1753;
    }
    else
    {
        uint _1953 = _1663 + 7u;
        float _1969 = (dot(vec3(cbLight._m0[_1663 + 3u].xyz), vec3(_476, _477, _478)) * 0.5) + 0.5;
        float _1970 = _1969 * _1969;
        float _3857 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1972 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _1794 = (((cbLight._m0[_1953].x * 0.3183098733425140380859375) * _1971) * _1972) + _1749;
        _1796 = (((cbLight._m0[_1953].y * 0.3183098733425140380859375) * _1971) * _1972) + _1751;
        _1798 = (((cbLight._m0[_1953].z * 0.3183098733425140380859375) * _1971) * _1972) + _1753;
    }
    uint _1801 = _1663 + 8u;
    float _1814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1663].w)) * _479) * 0.949999988079071044921875);
    float _1815 = _1814 * _1814;
    float _1816 = cbLight._m0[_1663].x + _555;
    float _1817 = cbLight._m0[_1663].y + _556;
    float _1818 = cbLight._m0[_1663].z + _557;
    float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
    float _1823 = _1822 * _1816;
    float _1824 = _1822 * _1817;
    float _1825 = _1822 * _1818;
    float _1826 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_1663].xyz));
    float _3873 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _1830 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _1831 = dot(vec3(_476, _477, _478), vec3(_1823, _1824, _1825));
    float _3895 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1834 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _1835 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_1823, _1824, _1825));
    float _3906 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1839 = _1815 * _1815;
    float _1843 = ((_1834 * _1834) * (_1839 + (-1.0))) + 1.0;
    float _1854 = (exp2(log2(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1855 = 1.0 - _1815;
    float _1866 = (0.5 / (((_1830 * ((_1829 * _1855) + _1815)) + 9.9999999392252902907785028219223e-09) + (((_1830 * _1855) + _1815) * _1829))) * _1829;
    float _3917 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1868 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1839 / ((_1843 * _1843) * 3.141590118408203125));
    uint _1879 = _1663 + 9u;
    float _1890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1701].w)) * _479) * 0.949999988079071044921875);
    float _1891 = _1890 * _1890;
    float _1892 = cbLight._m0[_1701].x + _555;
    float _1893 = cbLight._m0[_1701].y + _556;
    float _1894 = cbLight._m0[_1701].z + _557;
    float _1898 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
    float _1899 = _1898 * _1892;
    float _1900 = _1898 * _1893;
    float _1901 = _1898 * _1894;
    float _1902 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_1701].xyz));
    float _3928 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _1906 = dot(vec3(_476, _477, _478), vec3(_1899, _1900, _1901));
    float _3939 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _1910 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_1899, _1900, _1901));
    float _3950 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1914 = _1891 * _1891;
    float _1918 = ((_1909 * _1909) * (_1914 + (-1.0))) + 1.0;
    float _1927 = (exp2(log2(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1928 = 1.0 - _1891;
    float _1938 = (0.5 / (((_1830 * ((_1905 * _1928) + _1891)) + 9.9999999392252902907785028219223e-09) + (((_1830 * _1928) + _1891) * _1905))) * _1905;
    float _3961 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1940 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1914 / ((_1918 * _1918) * 3.141590118408203125));
    float _1950 = (((_1927 * cbLight._m0[_1879].x) * _1940) * _1686) + (((_1854 * cbLight._m0[_1801].x) * _1868) * _1697);
    float _1951 = (((_1927 * cbLight._m0[_1879].y) * _1940) * _1686) + (((_1854 * cbLight._m0[_1801].y) * _1868) * _1697);
    float _1952 = (((_1927 * cbLight._m0[_1879].z) * _1940) * _1686) + (((_1854 * cbLight._m0[_1801].z) * _1868) * _1697);
    float _2014;
    float _2016;
    float _2018;
    if (_1738)
    {
        _2014 = _1950;
        _2016 = _1951;
        _2018 = _1952;
    }
    else
    {
        uint _2020 = _1663 + 2u;
        uint _2024 = _1663 + 10u;
        float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _479) * 0.949999988079071044921875);
        float _2039 = _2038 * _2038;
        float _2040 = cbLight._m0[_2020].x + _555;
        float _2041 = cbLight._m0[_2020].y + _556;
        float _2042 = cbLight._m0[_2020].z + _557;
        float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
        float _2047 = _2046 * _2040;
        float _2048 = _2046 * _2041;
        float _2049 = _2046 * _2042;
        float _2050 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_2020].xyz));
        float _3972 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2053 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _2054 = dot(vec3(_476, _477, _478), vec3(_2047, _2048, _2049));
        float _3983 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2057 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _2058 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2047, _2048, _2049));
        float _3994 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2062 = _2039 * _2039;
        float _2066 = ((_2057 * _2057) * (_2062 + (-1.0))) + 1.0;
        float _2075 = (exp2(log2(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2076 = 1.0 - _2039;
        float _2086 = (0.5 / (((_1830 * ((_2053 * _2076) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_1830 * _2076) + _2039) * _2053))) * _2053;
        float _4005 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2088 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_2062 / ((_2066 * _2066) * 3.141590118408203125));
        float _2089 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _2014 = (((_2075 * cbLight._m0[_2024].x) * _2088) * _2089) + _1950;
        _2016 = (((_2075 * cbLight._m0[_2024].y) * _2088) * _2089) + _1951;
        _2018 = (((_2075 * cbLight._m0[_2024].z) * _2088) * _2089) + _1952;
    }
    float _2124;
    float _2126;
    float _2128;
    if (_1756)
    {
        _2124 = _2014;
        _2126 = _2016;
        _2128 = _2018;
    }
    else
    {
        uint _2135 = _1663 + 3u;
        uint _2139 = _1663 + 11u;
        float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2135].w)) * _479) * 0.949999988079071044921875);
        float _2154 = _2153 * _2153;
        float _2155 = cbLight._m0[_2135].x + _555;
        float _2156 = cbLight._m0[_2135].y + _556;
        float _2157 = cbLight._m0[_2135].z + _557;
        float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
        float _2162 = _2161 * _2155;
        float _2163 = _2161 * _2156;
        float _2164 = _2161 * _2157;
        float _2165 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_2135].xyz));
        float _4021 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2168 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _2169 = dot(vec3(_476, _477, _478), vec3(_2162, _2163, _2164));
        float _4032 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2172 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2173 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2162, _2163, _2164));
        float _4043 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2177 = _2154 * _2154;
        float _2181 = ((_2172 * _2172) * (_2177 + (-1.0))) + 1.0;
        float _2190 = (exp2(log2(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2191 = 1.0 - _2154;
        float _2201 = (0.5 / (((_1830 * ((_2168 * _2191) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_1830 * _2191) + _2154) * _2168))) * _2168;
        float _4054 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2203 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_2177 / ((_2181 * _2181) * 3.141590118408203125));
        float _2204 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _2124 = (((_2190 * cbLight._m0[_2139].x) * _2203) * _2204) + _2014;
        _2126 = (((_2190 * cbLight._m0[_2139].y) * _2203) * _2204) + _2016;
        _2128 = (((_2190 * cbLight._m0[_2139].z) * _2203) * _2204) + _2018;
    }
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    if (_1661.y == 0u)
    {
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2279;
        float _2281 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2279;
        float _2282 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2279;
        uvec4 _2294 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2295 = _2294.x;
        uint _2306 = uint((float(_2294.y) * floor(float(uint(cbSceneParam._m0[85u].y * _564) / _2295))) + floor(float(uint(cbSceneParam._m0[85u].x * _563) / _2295)));
        float _2316 = (log2(_2282 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2317 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        uint _2320 = uint(isnan(14.0) ? _2317 : (isnan(_2317) ? 14.0 : min(_2317, 14.0)));
        uvec4 _2325 = texelFetch(g_lightClusterGridBuffer, int(((_2320 << 2u) + (_2306 << 6u)) >> 2u));
        uint _2326 = _2325.x;
        uint _2327 = _2294.z;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        if (((((1u << ((_2327 >> 4u) & 15u)) + 4294967295u) & _2326) == 0u) || ((_2327 & 240u) == 0u))
        {
            _2427 = 0.0;
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
        }
        else
        {
            float _2428;
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            uint _2578 = 0u;
            uint _2587;
            bool _2588;
            for (;;)
            {
                _2587 = texelFetch(g_lightClassification, int((((_2320 << 5u) + (_2306 << 9u)) + (_2578 << 2u)) >> 2u)).x;
                _2588 = _2587 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2588)
                {
                    frontier_phi_61_pred = _2572;
                    frontier_phi_61_pred_1 = _2577;
                    frontier_phi_61_pred_2 = _2576;
                    frontier_phi_61_pred_3 = _2575;
                    frontier_phi_61_pred_4 = _2574;
                    frontier_phi_61_pred_5 = _2573;
                }
                else
                {
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    uint _2702;
                    _2696 = _2572;
                    _2697 = _2573;
                    _2698 = _2574;
                    _2699 = _2575;
                    _2700 = _2576;
                    _2701 = _2577;
                    _2702 = _2587;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    for (;;)
                    {
                        uint _2706 = uint(findLSB(_2702)) + (_2578 << 5u);
                        uint _2703 = (_2702 + 4294967295u) & _2702;
                        uint _2708 = _2706 * 48u;
                        vec4 _2722 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2708)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 3u)).x));
                        uint _2728 = (_2706 * 48u) + 4u;
                        vec4 _2741 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 3u)).x));
                        uint _2747 = (_2706 * 48u) + 8u;
                        vec3 _2758 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2747)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 2u)).x));
                        float _2762 = _2722.x - _2280;
                        float _2763 = _2722.y - _2281;
                        float _2764 = _2722.z - _2282;
                        float _2765 = dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764));
                        float _2768 = inversesqrt(_2765);
                        float _2769 = _2768 * _2762;
                        float _2770 = _2768 * _2763;
                        float _2771 = _2768 * _2764;
                        float _2772 = dot(vec3(_585, _588, _591), vec3(_2769, _2770, _2771));
                        float _2777 = 1.0 - (_2765 * _2722.w);
                        float _4080 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2778 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                        float _2779 = sqrt(_2765) * _2741.w;
                        float _2782 = 1.39999997615814208984375 / (_2779 + 1.39999997615814208984375);
                        float _2783 = _2782 * _2782;
                        float _2786 = ((1.0 - _2783) * _2772) + _2783;
                        float _2789 = _2779 * _2779;
                        float _2793 = ((isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0))) * _2778) / ((_2789 * 0.699999988079071044921875) + 1.0);
                        float _2797 = (-0.0) - _2280;
                        float _2798 = (-0.0) - _2281;
                        float _2799 = (-0.0) - _2282;
                        float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
                        float _2804 = _2803 * _2797;
                        float _2805 = _2803 * _2798;
                        float _2806 = _2803 * _2799;
                        float _2814 = exp2(log2(1.0 / ((_2789 * 3.5) + 5.0)) * 0.25);
                        float _2815 = 1.0 - _645;
                        float _2822 = sqrt(1.0 - ((1.0 - (_2815 * _2815)) * (1.0 - (_2814 * _2814))));
                        float _2823 = _2822 * _2822;
                        float _2824 = _2823 * _2823;
                        float _2825 = _2804 + _2769;
                        float _2826 = _2805 + _2770;
                        float _2827 = _2806 + _2771;
                        float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
                        float _2835 = dot(vec3(_585, _588, _591), vec3(_2804, _2805, _2806));
                        float _4096 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2838 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2839 = dot(vec3(_585, _588, _591), vec3(_2831 * _2825, _2831 * _2826, _2831 * _2827));
                        float _4107 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2842 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                        float _2846 = ((_2842 * _2842) * (_2824 + (-1.0))) + 1.0;
                        float _2847 = _2782 * _2823;
                        float _2848 = _2847 * _2847;
                        float _2851 = ((1.0 - _2848) * _2772) + _2848;
                        float _4118 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2852 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                        float _2853 = 1.0 - _2823;
                        float _2863 = (0.5 / (((_2852 * ((_2838 * _2853) + _2823)) + 9.9999999392252902907785028219223e-09) + (((_2852 * _2853) + _2823) * _2838))) * _2852;
                        float _4129 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2874 = (((_2824 * 3.1415927410125732421875) * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) / ((_2846 * _2846) * ((_2789 * 2.1991131305694580078125) + 3.141590118408203125))) * _2778;
                        _2631 = (_2793 * _2741.x) + _2699;
                        _2632 = (_2793 * _2741.y) + _2700;
                        _2633 = (_2793 * _2741.z) + _2701;
                        _2628 = (_2874 * _2758.x) + _2696;
                        _2629 = (_2874 * _2758.y) + _2697;
                        _2630 = (_2874 * _2758.z) + _2698;
                        if (_2703 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2696 = _2628;
                            _2697 = _2629;
                            _2698 = _2630;
                            _2699 = _2631;
                            _2700 = _2632;
                            _2701 = _2633;
                            _2702 = _2703;
                        }
                    }
                    frontier_phi_61_pred = _2628;
                    frontier_phi_61_pred_1 = _2633;
                    frontier_phi_61_pred_2 = _2632;
                    frontier_phi_61_pred_3 = _2631;
                    frontier_phi_61_pred_4 = _2630;
                    frontier_phi_61_pred_5 = _2629;
                }
                _2428 = frontier_phi_61_pred;
                _2438 = frontier_phi_61_pred_1;
                _2436 = frontier_phi_61_pred_2;
                _2434 = frontier_phi_61_pred_3;
                _2432 = frontier_phi_61_pred_4;
                _2430 = frontier_phi_61_pred_5;
                uint _2579 = _2578 + 1u;
                if (_2579 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2572 = _2428;
                    _2573 = _2430;
                    _2574 = _2432;
                    _2575 = _2434;
                    _2576 = _2436;
                    _2577 = _2438;
                    _2578 = _2579;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2427 = _2428;
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
        }
        uvec4 _2441 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2442 = _2441.z;
        uint _2444 = (_2442 >> 8u) & 15u;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        if (((4294967295u << _2444) & _2326) == 0u)
        {
            _2540 = _2427;
            _2542 = _2429;
            _2544 = _2431;
            _2546 = _2433;
            _2548 = _2435;
            _2550 = _2437;
        }
        else
        {
            float _2565 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
            float _2566 = _2565 * _2280;
            float _2567 = _2565 * _2281;
            float _2568 = _2565 * _2282;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2444 < ((_2442 >> 12u) & 15u))
            {
                float _2541;
                float _2543;
                float _2545;
                float _2547;
                float _2549;
                float _2551;
                float _2679 = _2427;
                float _2680 = _2429;
                float _2681 = _2431;
                float _2682 = _2433;
                float _2683 = _2435;
                float _2684 = _2437;
                uint _2685 = _2444;
                uint _2694;
                bool _2695;
                for (;;)
                {
                    _2694 = texelFetch(g_lightClassification, int((((_2320 << 5u) + (_2306 << 9u)) + (_2685 << 2u)) >> 2u)).x;
                    _2695 = _2694 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2695)
                    {
                        frontier_phi_67_pred = _2682;
                        frontier_phi_67_pred_1 = _2683;
                        frontier_phi_67_pred_2 = _2684;
                        frontier_phi_67_pred_3 = _2681;
                        frontier_phi_67_pred_4 = _2680;
                        frontier_phi_67_pred_5 = _2679;
                    }
                    else
                    {
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _2884;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _2892 = _2679;
                        float _2893 = _2680;
                        float _2894 = _2681;
                        float _2895 = _2682;
                        float _2896 = _2683;
                        float _2897 = _2684;
                        uint _2898 = _2694;
                        uint _2899;
                        vec4 _2924;
                        float _2925;
                        vec4 _2940;
                        vec3 _2952;
                        vec4 _2968;
                        vec4 _2984;
                        float _3030;
                        bool _3031;
                        for (;;)
                        {
                            uint _2909 = ((_2685 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2898));
                            _2899 = (_2898 + 4294967295u) & _2898;
                            uint _2911 = _2909 * 40u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            _2925 = _2924.w;
                            uint _2927 = (_2909 * 40u) + 4u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2942 = (_2909 * 40u) + 8u;
                            _2952 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x));
                            uint _2955 = (_2909 * 40u) + 16u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2971 = (_2909 * 40u) + 20u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2986 = (_2909 * 40u) + 24u;
                            vec4 _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3005 = (_2909 * 40u) + 28u;
                            vec4 _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            _3030 = fma(_2282, _3018.z, fma(_2281, _3018.y, _3018.x * _2280)) + _3018.w;
                            _3031 = !((fma(_2282, _2999.z, fma(_2281, _2999.y, _2999.x * _2280)) + _2999.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3031)
                            {
                                float _3058 = _2924.x - _2280;
                                float _3059 = _2924.y - _2281;
                                float _3060 = _2924.z - _2282;
                                float _3061 = dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060));
                                float _3064 = inversesqrt(_3061);
                                float _3065 = _3064 * _3058;
                                float _3066 = _3064 * _3059;
                                float _3067 = _3064 * _3060;
                                float _3071 = 1.0 - (_3061 / (_2925 * _2925));
                                float _4140 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3072 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                                float _3076 = sqrt(_3061) * _2940.w;
                                float _3078 = 1.39999997615814208984375 / (_3076 + 1.39999997615814208984375);
                                float _3079 = _3078 * _3078;
                                float _3082 = ((1.0 - _3079) * dot(vec3(_3065, _3066, _3067), vec3(_585, _588, _591))) + _3079;
                                float _3085 = _3076 * _3076;
                                float _3089 = (fma(_2282, _2968.z, fma(_2281, _2968.y, _2968.x * _2280)) + _2968.w) / _3030;
                                float _3090 = (fma(_2282, _2984.z, fma(_2281, _2984.y, _2984.x * _2280)) + _2984.w) / _3030;
                                float _3094 = 1.0 - dot(vec2(_3089, _3090), vec2(_3089, _3090));
                                float _4156 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3096 = _3095 * (((isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0))) * _3072) / ((_3085 * 0.699999988079071044921875) + 1.0));
                                float _3108 = exp2(log2(1.0 / ((_3085 * 3.5) + 5.0)) * 0.25);
                                float _3109 = 1.0 - _645;
                                float _3116 = sqrt(1.0 - ((1.0 - (_3109 * _3109)) * (1.0 - (_3108 * _3108))));
                                float _3117 = _3116 * _3116;
                                float _3118 = _3117 * _3117;
                                float _3119 = _3065 - _2566;
                                float _3120 = _3066 - _2567;
                                float _3121 = _3067 - _2568;
                                float _3125 = inversesqrt(dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121)));
                                float _3129 = dot(vec3(_585, _588, _591), vec3((-0.0) - _2566, (-0.0) - _2567, (-0.0) - _2568));
                                float _4167 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3132 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3133 = dot(vec3(_585, _588, _591), vec3(_3125 * _3119, _3125 * _3120, _3125 * _3121));
                                float _4178 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                                float _3136 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3140 = ((_3136 * _3136) * (_3118 + (-1.0))) + 1.0;
                                float _3141 = _3078 * _3117;
                                float _3142 = _3141 * _3141;
                                float _3148 = ((1.0 - _3142) * dot(vec3(_585, _588, _591), vec3(_3065, _3066, _3067))) + _3142;
                                float _4189 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3149 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3150 = 1.0 - _3117;
                                float _3160 = (0.5 / (((_3149 * ((_3132 * _3150) + _3117)) + 9.9999999392252902907785028219223e-09) + (((_3149 * _3150) + _3117) * _3132))) * _3149;
                                float _4200 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3170 = (_3095 * _3072) * (((_3118 * 3.1415927410125732421875) * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) / ((_3140 * _3140) * ((_3085 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3170 * _2952.x;
                                frontier_phi_73_pred_1 = _3170 * _2952.y;
                                frontier_phi_73_pred_2 = _3096 * _2940.z;
                                frontier_phi_73_pred_3 = _3096 * _2940.y;
                                frontier_phi_73_pred_4 = _3096 * _2940.x;
                                frontier_phi_73_pred_5 = _3170 * _2952.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3174 = frontier_phi_73_pred;
                            _3175 = frontier_phi_73_pred_1;
                            _3179 = frontier_phi_73_pred_2;
                            _3178 = frontier_phi_73_pred_3;
                            _3177 = frontier_phi_73_pred_4;
                            _3176 = frontier_phi_73_pred_5;
                            _2882 = _3177 + _2895;
                            _2883 = _3178 + _2896;
                            _2884 = _3179 + _2897;
                            _2879 = _3174 + _2892;
                            _2880 = _3175 + _2893;
                            _2881 = _3176 + _2894;
                            if (_2899 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2899;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2882;
                        frontier_phi_67_pred_1 = _2883;
                        frontier_phi_67_pred_2 = _2884;
                        frontier_phi_67_pred_3 = _2881;
                        frontier_phi_67_pred_4 = _2880;
                        frontier_phi_67_pred_5 = _2879;
                    }
                    _2547 = frontier_phi_67_pred;
                    _2549 = frontier_phi_67_pred_1;
                    _2551 = frontier_phi_67_pred_2;
                    _2545 = frontier_phi_67_pred_3;
                    _2543 = frontier_phi_67_pred_4;
                    _2541 = frontier_phi_67_pred_5;
                    uint _2686 = _2685 + 1u;
                    if (_2686 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2679 = _2541;
                        _2680 = _2543;
                        _2681 = _2545;
                        _2682 = _2547;
                        _2683 = _2549;
                        _2684 = _2551;
                        _2685 = _2686;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2549;
                frontier_phi_55_56_ladder_1 = _2551;
                frontier_phi_55_56_ladder_2 = _2547;
                frontier_phi_55_56_ladder_3 = _2545;
                frontier_phi_55_56_ladder_4 = _2543;
                frontier_phi_55_56_ladder_5 = _2541;
            }
            else
            {
                frontier_phi_55_56_ladder = _2435;
                frontier_phi_55_56_ladder_1 = _2437;
                frontier_phi_55_56_ladder_2 = _2433;
                frontier_phi_55_56_ladder_3 = _2431;
                frontier_phi_55_56_ladder_4 = _2429;
                frontier_phi_55_56_ladder_5 = _2427;
            }
            _2540 = frontier_phi_55_56_ladder_5;
            _2542 = frontier_phi_55_56_ladder_4;
            _2544 = frontier_phi_55_56_ladder_3;
            _2546 = frontier_phi_55_56_ladder_2;
            _2548 = frontier_phi_55_56_ladder;
            _2550 = frontier_phi_55_56_ladder_1;
        }
        float _2555 = isnan(1.0) ? _629 : (isnan(_629) ? 1.0 : min(_629, 1.0));
        _2339 = (_2555 * _2546) + _1794;
        _2341 = (_2555 * _2548) + _1796;
        _2343 = (_2555 * _2550) + _1798;
        _2345 = ((_2540 * 0.039999999105930328369140625) * _2555) + _2124;
        _2347 = ((_2542 * 0.039999999105930328369140625) * _2555) + _2126;
        _2349 = ((_2544 * 0.039999999105930328369140625) * _2555) + _2128;
    }
    else
    {
        _2339 = _1794;
        _2341 = _1796;
        _2343 = _1798;
        _2345 = _2124;
        _2347 = _2126;
        _2349 = _2128;
    }
    float _4216 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4227 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4238 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    uint _2369 = _220 + 6u;
    float _2377 = _563 / cbSceneParam._m0[86u].x;
    float _2378 = _564 / cbSceneParam._m0[86u].y;
    vec4 _2392 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2377, _2378, (log2((isnan(cbSceneParam._m0[77u].w) ? _497 : (isnan(_497) ? cbSceneParam._m0[77u].w : min(_497, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2394 = _2392.x;
    float _2395 = _2392.y;
    float _2396 = _2392.z;
    float _2397 = _2392.w;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    if (_497 > cbSceneParam._m0[78u].w)
    {
        float _2452 = isnan(_497) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _497 : min(cbSceneParam._m0[80u].w, _497));
        float _2453 = _2452 / _497;
        float _2464 = _2453 * _548;
        float _2465 = _549 * _2453;
        float _2466 = (-0.0) - _2465;
        float _2468 = _2453 * _550;
        float _2470 = (cbSceneParam._m0[77u].w * _2466) / _2452;
        float _2471 = _2470 + cbSceneParam._m0[79u].w;
        float _2472 = cbSceneParam._m0[79u].w - _2465;
        float _2478 = sqrt(((_2464 * _2464) + (_2465 * _2465)) + (_2468 * _2468));
        float _2481 = (1.0 - (cbSceneParam._m0[77u].w / _2452)) * _2478;
        float _2486 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2488 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2641;
        if (abs((_2466 - _2470) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2641 = ((((_2471 > 0.0) ? exp2(_2486 * _2471) : (2.0 - exp2(_2488 * _2471))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2481;
        }
        else
        {
            float _2601 = 1.0 / cbSceneParam._m0[80u].x;
            float _2602 = isnan(_2472) ? _2471 : (isnan(_2471) ? _2472 : max(_2471, _2472));
            float _2603 = isnan(_2472) ? _2471 : (isnan(_2471) ? _2472 : min(_2471, _2472));
            float _2612 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : min(_2602, 0.0));
            float _2613 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : min(_2603, 0.0));
            _2641 = ((abs(_2478 / _2466) * cbSceneParam._m0[80u].y) * ((((_2612 - _2613) * 2.0) - ((exp2(_2486 * (isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0)))) - exp2(_2486 * (isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0))))) * _2601)) - ((exp2(_2488 * _2612) - exp2(_2488 * _2613)) * _2601))) + (_2481 * cbSceneParam._m0[80u].z);
        }
        vec4 _2643 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2377, _2378, 1.0), 0.0);
        float _2652 = exp2((_2641 * (-1.44269502162933349609375)) * (1.0 - _2643.w));
        float _2653 = log2(_2652);
        float _2669 = log2(_2397);
        _2490 = (exp2(_2669 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2653 * cbSceneParam._m0[78u].x)) * _2643.x) / cbSceneParam._m0[78u].x)) + _2394;
        _2492 = (exp2(_2669 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2653 * cbSceneParam._m0[78u].y)) * _2643.y) / cbSceneParam._m0[78u].y)) + _2395;
        _2494 = (exp2(_2669 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2653 * cbSceneParam._m0[78u].z)) * _2643.z) / cbSceneParam._m0[78u].z)) + _2396;
        _2496 = _2652 * _2397;
    }
    else
    {
        _2490 = _2394;
        _2492 = _2395;
        _2494 = _2396;
        _2496 = _2397;
    }
    float _2508 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2509 = _2508 == 3.0;
    float _2510 = log2(_2496);
    float _2517 = exp2(_2510 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2339 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _629))) + ((_2345 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _1434)) * cbPerFrame._m0[3u].x));
    float _2518 = exp2(_2510 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2341 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _629))) + ((_2347 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1434)) * cbPerFrame._m0[3u].x));
    float _2519 = exp2(_2510 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2343 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _629))) + ((_2349 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _1434)) * cbPerFrame._m0[3u].x));
    float _2528 = (_2508 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2528 * (_2509 ? _2517 : (_2517 + (cbSceneParam._m0[72u].w * _2490)));
    SV_Target.y = _2528 * (_2509 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2492)));
    SV_Target.z = _2528 * (_2509 ? _2519 : (_2519 + (cbSceneParam._m0[72u].w * _2494)));
    SV_Target.w = cbInstanceData._m0[_2369].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2369].w;
}


