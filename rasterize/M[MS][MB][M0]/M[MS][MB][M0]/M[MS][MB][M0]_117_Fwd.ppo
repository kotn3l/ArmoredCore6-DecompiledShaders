#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1240;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _224 = _223 * _215;
    float _225 = _223 * _216;
    float _226 = _223 * _217;
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = _237 * TANGENT.x;
    float _239 = _237 * TANGENT.y;
    float _240 = _237 * TANGENT.z;
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _360 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _360) * cbMtdParam._m0[24u].x) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3546 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _385 = (_378 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _386 = (_378 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _387 = (_378 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _405 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _424 = _422.x;
    float _425 = _422.y;
    float _426 = _422.z;
    float _435 = ((_405.z - _426) * _378) + _426;
    float _438 = ((((_405.x - _424) * _378) + _424) * 2.0) + (-1.0);
    float _440 = ((((_405.y - _425) * _378) + _425) * 2.0) + (-1.0);
    float _441 = dot(vec2(_438, _440), vec2(_438, _440));
    float _3557 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _446 = sqrt(1.0 - (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))));
    float _449 = fma(_446, _231, fma(_440, _238, _438 * _224));
    float _452 = fma(_446, _232, fma(_440, _239, _438 * _225));
    float _455 = fma(_446, _233, fma(_440, _240, _438 * _226));
    float _459 = inversesqrt(dot(vec3(_449, _452, _455), vec3(_449, _452, _455)));
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _505 = _503.x;
    float _506 = 1.0 - _505;
    float _510 = ((_505 - _506) * cbMtdParam._m0[24u].z) + _506;
    float _512 = (cbMtdParam._m0[19u].x + dot(vec4(_459 * _449, _459 * _452, _459 * _455, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_510 * cbMtdParam._m0[21u].z);
    float _3568 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _513 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _515 = (-0.0) - cbMtdParam._m0[24u].y;
    float _517 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _518 = isnan(1.0) ? _517 : (isnan(_517) ? 1.0 : min(_517, 1.0));
    float _525 = _513 - ((_513 * TEXCOORD_8.x) * _518);
    float _526 = _513 - ((_513 * TEXCOORD_8.y) * _518);
    float _527 = _513 - ((_513 * TEXCOORD_8.z) * _518);
    float _534 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _538 = ((isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : min(_534, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _546 = (_538 - (((_510 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _538))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3599 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _547 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _551 = ((_525 * (cbMtdParam._m0[17u].x - _385)) * _547) + _385;
    float _552 = ((_526 * (cbMtdParam._m0[17u].y - _386)) * _547) + _386;
    float _553 = ((_527 * (cbMtdParam._m0[17u].z - _387)) * _547) + _387;
    vec4 _565 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _567 = _565.x;
    float _568 = 1.0 - _567;
    float _595 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_567 - _568) * cbMtdParam._m0[24u].w) + _568) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3610 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _596 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _604 = ((((cbMtdParam._m0[10u].x - _551) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _596) + _551;
    float _605 = ((((cbMtdParam._m0[10u].y - _552) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _596) + _552;
    float _606 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _553)) * _596) + _553;
    vec4 _620 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _627 = (_620.x * 2.0) + (-1.0);
    float _628 = (_620.y * 2.0) + (-1.0);
    float _629 = dot(vec2(_627, _628), vec2(_627, _628));
    float _3621 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _638 = (((_620.z - _435) * _525) * _547) + _435;
    float _641 = ((cbMtdParam._m0[23u].y - _638) * _596) + _638;
    vec4 _660 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _666 = (_660.x * 2.0) + (-1.0);
    float _667 = (_660.y * 2.0) + (-1.0);
    float _668 = dot(vec2(_666, _667), vec2(_666, _667));
    float _3632 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _688 = (((cbMtdParam._m0[21u].x * _438) + ((_627 - _438) * _525)) * _547) + _438;
    float _689 = (((cbMtdParam._m0[21u].x * _440) + ((_628 - _440) * _526)) * _547) + _440;
    float _690 = (((sqrt(1.0 - (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) - _446) * _527) * _547) + _446;
    float _701 = (((_666 - _688) + (_688 * cbMtdParam._m0[22u].z)) * _596) + _688;
    float _702 = (((_667 - _689) + (_689 * cbMtdParam._m0[22u].z)) * _596) + _689;
    float _703 = ((sqrt(1.0 - (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) - _690) * _596) + _690;
    float _705 = cbMtdParam._m0[22u].x + _475.w;
    float _708 = fma(_703, _231, fma(_702, _238, _701 * _224));
    float _711 = fma(_703, _232, fma(_702, _239, _701 * _225));
    float _714 = fma(_703, _233, fma(_702, _240, _701 * _226));
    float _718 = inversesqrt(dot(vec3(_708, _711, _714), vec3(_708, _711, _714)));
    float _719 = _718 * _708;
    float _720 = _718 * _711;
    float _721 = _718 * _714;
    float _3643 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _722 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _3665 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3676 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _3687 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _740 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _791 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _781);
    float _792 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _781);
    float _793 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _781);
    float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
    float _798 = _791 * _797;
    float _799 = _792 * _797;
    float _800 = _793 * _797;
    float _806 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _807 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _825 = fma(_721, cbSceneParam._m0[5u].z, fma(_720, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _719));
    float _828 = fma(_721, cbSceneParam._m0[6u].z, fma(_720, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _719));
    float _831 = fma(_721, cbSceneParam._m0[7u].z, fma(_720, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _719));
    uint _845 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _851 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) * cbInstanceData._m0[_845].x;
    float _852 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) * cbInstanceData._m0[_845].y;
    float _853 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * cbInstanceData._m0[_845].z;
    float _3698 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _3720 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    vec4 _865 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _806, cbSceneParam._m0[86u].y * _807));
    float _869 = ((isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * TEXCOORD_5.w) * _865.x;
    float _870 = dot(vec3(_719, _720, _721), vec3(_798, _799, _800));
    float _873 = _870 * 2.0;
    float _877 = (_873 * _719) - _798;
    float _878 = (_873 * _720) - _799;
    float _879 = (_873 * _721) - _800;
    float _883 = abs(dot(vec3(_798, _799, _800), vec3(_719, _720, _721)));
    float _3731 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _885 = sqrt(_722);
    float _898 = exp2((_885 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_885 * 3.0));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1239;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _964 = fma(_938, cbModelParam._m0[26u].z, fma(_934, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _930));
        float _968 = fma(_938, cbModelParam._m0[27u].z, fma(_934, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _930));
        float _972 = fma(_938, cbModelParam._m0[28u].z, fma(_934, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _930));
        float _997 = _930 + _719;
        float _998 = _934 + _720;
        float _999 = _938 + _721;
        float _1009 = fma(_999, cbModelParam._m0[26u].z, fma(_998, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _997)) - _964;
        float _1010 = fma(_999, cbModelParam._m0[27u].z, fma(_998, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _997)) - _968;
        float _1011 = fma(_999, cbModelParam._m0[28u].z, fma(_998, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _997)) - _972;
        float _1015 = inversesqrt(dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011)));
        float _1028 = ((_1015 * _1009) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_964 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1015 * _1010) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_968 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1015 * _1011) / cbModelParam._m0[34u].z) + ((((((_972 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        float _1067 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1033.x + (-0.5));
        float _1069 = _1067 * (_1033.y + (-0.5));
        float _1070 = _1067 * (_1033.z + (-0.5));
        float _1077 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1040.x + (-0.5));
        float _1079 = _1077 * (_1040.y + (-0.5));
        float _1080 = _1077 * (_1040.z + (-0.5));
        float _1087 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1047.x + (-0.5));
        float _1089 = _1087 * (_1047.y + (-0.5));
        float _1090 = _1087 * (_1047.z + (-0.5));
        float _1097 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1054.x + (-0.5));
        float _1099 = _1097 * (_1054.y + (-0.5));
        float _1100 = _1097 * (_1054.z + (-0.5));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = _1068 * 0.5;
        float _1105 = _1078 * 0.5;
        float _1106 = _1088 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1121 = (dot(vec3(_719, _720, _721), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1131 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3779 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1133 + 1.0))) + _1138) * _1101;
        float _1148 = _1069 * 0.5;
        float _1149 = _1079 * 0.5;
        float _1150 = _1089 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_719, _720, _721), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3812 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1175 + 1.0))) + _1180) * _1102;
        float _1190 = _1070 * 0.5;
        float _1191 = _1080 * 0.5;
        float _1192 = _1090 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_719, _720, _721), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3845 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1217 + 1.0))) + _1222) * _1103;
        _1239 = _1070;
        _1241 = _1069;
        _1242 = _1068;
        _1243 = _1080;
        _1244 = _1079;
        _1245 = _1078;
        _1246 = _1090;
        _1247 = _1089;
        _1248 = _1088;
        _1249 = _1103;
        _1250 = _1102;
        _1251 = _1101;
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
    }
    else
    {
        _1239 = _1240;
        _1241 = _1240;
        _1242 = _1240;
        _1243 = _1240;
        _1244 = _1240;
        _1245 = _1240;
        _1246 = _1240;
        _1247 = _1240;
        _1248 = _1240;
        _1249 = _1240;
        _1250 = _1240;
        _1251 = _1240;
        _1252 = 0.0;
        _1253 = 0.0;
        _1254 = 0.0;
    }
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1279 = fma(_938, cbModelParam._m0[30u].z, fma(_934, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _930));
        float _1283 = fma(_938, cbModelParam._m0[31u].z, fma(_934, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _930));
        float _1287 = fma(_938, cbModelParam._m0[32u].z, fma(_934, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _930));
        float _1310 = _930 + _719;
        float _1311 = _934 + _720;
        float _1312 = _938 + _721;
        float _1322 = fma(_1312, cbModelParam._m0[30u].z, fma(_1311, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1310)) - _1279;
        float _1323 = fma(_1312, cbModelParam._m0[31u].z, fma(_1311, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1310)) - _1283;
        float _1324 = fma(_1312, cbModelParam._m0[32u].z, fma(_1311, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1310)) - _1287;
        float _1328 = inversesqrt(dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324)));
        float _1341 = ((_1328 * _1322) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1279 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1328 * _1323) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1283 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1328 * _1324) / cbModelParam._m0[35u].z) + ((((((_1287 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1341, _1342, _1343), 0.0);
        float _1378 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1345.x + (-0.5));
        float _1380 = _1378 * (_1345.y + (-0.5));
        float _1381 = _1378 * (_1345.z + (-0.5));
        float _1388 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1352.x + (-0.5));
        float _1390 = _1388 * (_1352.y + (-0.5));
        float _1391 = _1388 * (_1352.z + (-0.5));
        float _1398 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1359.x + (-0.5));
        float _1400 = _1398 * (_1359.y + (-0.5));
        float _1401 = _1398 * (_1359.z + (-0.5));
        float _1408 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1366.x + (-0.5));
        float _1410 = _1408 * (_1366.y + (-0.5));
        float _1411 = _1408 * (_1366.z + (-0.5));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = _1379 * 0.5;
        float _1416 = _1389 * 0.5;
        float _1417 = _1399 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_719, _720, _721), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _3908 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1442 + 1.0))) + _1447) * _1412;
        float _1457 = _1380 * 0.5;
        float _1458 = _1390 * 0.5;
        float _1459 = _1400 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_719, _720, _721), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _3941 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1484 + 1.0))) + _1489) * _1413;
        float _1499 = _1381 * 0.5;
        float _1500 = _1391 * 0.5;
        float _1501 = _1401 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_719, _720, _721), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _3974 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1526 + 1.0))) + _1531) * _1414;
        _1548 = _1381;
        _1549 = _1380;
        _1550 = _1379;
        _1551 = _1391;
        _1552 = _1390;
        _1553 = _1389;
        _1554 = _1401;
        _1555 = _1400;
        _1556 = _1399;
        _1557 = _1414;
        _1558 = _1413;
        _1559 = _1412;
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
    }
    else
    {
        _1548 = _1240;
        _1549 = _1240;
        _1550 = _1240;
        _1551 = _1240;
        _1552 = _1240;
        _1553 = _1240;
        _1554 = _1240;
        _1555 = _1240;
        _1556 = _1240;
        _1557 = _1240;
        _1558 = _1240;
        _1559 = _1240;
        _1560 = 0.0;
        _1561 = 0.0;
        _1562 = 0.0;
    }
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1252)) + _1252;
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1253)) + _1253;
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1254)) + _1254;
    float _1595 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1573, cbSceneParam._m0[89u].y, _1572 * cbSceneParam._m0[89u].x));
    float _1598 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1573, cbSceneParam._m0[90u].y, _1572 * cbSceneParam._m0[90u].x));
    float _1601 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1573, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1572));
    float _1616 = _877 * 0.5;
    float _1617 = _878 * 0.5;
    float _1618 = _879 * 0.5;
    float _1619 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1622 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1625 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1659;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1632 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1239, _1243, _1246, _1249));
        float _1636 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1640 = dot(vec4(_1616, _1617, _1618, 1.0), vec4(_1242, _1245, _1248, _1251));
        float _1647 = dot(vec4(cbModelParam._m0[39u]), vec4(_1616, _1617, _1618, 1.0));
        _1659 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1647) ? 0.0 : (isnan(0.0) ? _1647 : max(0.0, _1647))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1659 = 1.0;
    }
    float _1670;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1661 = dot(vec4(cbModelParam._m0[40u]), vec4(_1616, _1617, _1618, 1.0));
        _1670 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1670 = 1.0;
    }
    float _1674 = (_1670 * cbModelParam._m0[1u].x) + (_1659 * (1.0 - cbModelParam._m0[1u].x));
    float _1684 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _722);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1684 : min(cbModelParam._m0[25u].z, _1684));
    float _1766;
    float _1768;
    float _1770;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1733 = fma(_938, cbModelParam._m0[13u].z, fma(_934, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _930)) + cbModelParam._m0[13u].w;
        float _1737 = fma(_938, cbModelParam._m0[14u].z, fma(_934, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _930)) + cbModelParam._m0[14u].w;
        float _1741 = fma(_938, cbModelParam._m0[15u].z, fma(_934, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _930)) + cbModelParam._m0[15u].w;
        float _1744 = fma(_879, cbModelParam._m0[13u].z, fma(_878, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _877));
        float _1747 = fma(_879, cbModelParam._m0[14u].z, fma(_878, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _877));
        float _1750 = fma(_879, cbModelParam._m0[15u].z, fma(_878, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _877));
        float _1778;
        if (_1744 > 0.0)
        {
            _1778 = abs((1.0 - _1733) / _1744);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1733 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1778 = frontier_phi_14_12_ladder;
        }
        float _1979;
        if (_1747 > 0.0)
        {
            _1979 = abs((1.0 - _1737) / _1747);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1737 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1979 = frontier_phi_23_19_ladder;
        }
        float _2222;
        if (_1750 > 0.0)
        {
            _2222 = abs((1.0 - _1741) / _1750);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1741 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2222 = frontier_phi_35_30_ladder;
        }
        float _2224 = isnan(_1979) ? _1778 : (isnan(_1778) ? _1979 : min(_1778, _1979));
        float _2225 = isnan(_2222) ? _2224 : (isnan(_2224) ? _2222 : min(_2224, _2222));
        float _2229 = (_2225 * _1744) + _1733;
        float _2230 = (_2225 * _1747) + _1737;
        float _2231 = (_2225 * _1750) + _1741;
        float _2232 = _2225 * 9.9999997473787516355514526367188e-05;
        float _2234 = (-1.0) - _2232;
        float _2236 = _2232 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2231 > _2236) || ((_2231 < _2234) || ((_2230 > _2236) || ((_2230 < _2234) || ((_2229 < _2234) || (_2229 > _2236))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2355 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2231, cbModelParam._m0[9u].z, fma(_2230, cbModelParam._m0[9u].y, _2229 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2231, cbModelParam._m0[10u].z, fma(_2230, cbModelParam._m0[10u].y, _2229 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2231, cbModelParam._m0[11u].z, fma(_2230, cbModelParam._m0[11u].y, _2229 * cbModelParam._m0[11u].x))), _1685);
            frontier_phi_13_35_ladder = _2355.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2355.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2355.x * cbModelParam._m0[1u].y;
        }
        _1766 = frontier_phi_13_35_ladder_2;
        _1768 = frontier_phi_13_35_ladder_1;
        _1770 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1754 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_877, _878, _879), _1685);
        _1766 = _1754.x * cbModelParam._m0[1u].y;
        _1768 = _1754.y * cbModelParam._m0[1u].y;
        _1770 = _1754.z * cbModelParam._m0[1u].y;
    }
    float _1774 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _722);
    float _1775 = isnan(_1774) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1774 : min(cbModelParam._m0[25u].w, _1774));
    float _1865;
    float _1867;
    float _1869;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1829 = fma(_938, cbModelParam._m0[21u].z, fma(_934, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _930)) + cbModelParam._m0[21u].w;
        float _1833 = fma(_938, cbModelParam._m0[22u].z, fma(_934, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _930)) + cbModelParam._m0[22u].w;
        float _1837 = fma(_938, cbModelParam._m0[23u].z, fma(_934, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _930)) + cbModelParam._m0[23u].w;
        float _1840 = fma(_879, cbModelParam._m0[21u].z, fma(_878, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _877));
        float _1843 = fma(_879, cbModelParam._m0[22u].z, fma(_878, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _877));
        float _1846 = fma(_879, cbModelParam._m0[23u].z, fma(_878, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _877));
        float _1984;
        if (_1840 > 0.0)
        {
            _1984 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1984 = frontier_phi_25_21_ladder;
        }
        float _2249;
        if (_1843 > 0.0)
        {
            _2249 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2249 = frontier_phi_37_32_ladder;
        }
        float _2454;
        if (_1846 > 0.0)
        {
            _2454 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2454 = frontier_phi_46_43_ladder;
        }
        float _2456 = isnan(_2249) ? _1984 : (isnan(_1984) ? _2249 : min(_1984, _2249));
        float _2457 = isnan(_2454) ? _2456 : (isnan(_2456) ? _2454 : min(_2456, _2454));
        float _2461 = (_2457 * _1840) + _1829;
        float _2462 = (_2457 * _1843) + _1833;
        float _2463 = (_2457 * _1846) + _1837;
        float _2464 = _2457 * 9.9999997473787516355514526367188e-05;
        float _2465 = (-1.0) - _2464;
        float _2467 = _2464 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2463 > _2467) || ((_2463 < _2465) || ((_2462 > _2467) || ((_2462 < _2465) || ((_2461 < _2465) || (_2461 > _2467))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2662 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2463, cbModelParam._m0[17u].z, fma(_2462, cbModelParam._m0[17u].y, _2461 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2463, cbModelParam._m0[18u].z, fma(_2462, cbModelParam._m0[18u].y, _2461 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2463, cbModelParam._m0[19u].z, fma(_2462, cbModelParam._m0[19u].y, _2461 * cbModelParam._m0[19u].x))), _1775);
            frontier_phi_22_46_ladder = _2662.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2662.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2662.x * cbModelParam._m0[1u].z;
        }
        _1865 = frontier_phi_22_46_ladder_2;
        _1867 = frontier_phi_22_46_ladder_1;
        _1869 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_877, _878, _879), _1775);
        _1865 = _1849.x * cbModelParam._m0[1u].z;
        _1867 = _1849.y * cbModelParam._m0[1u].z;
        _1869 = _1849.z * cbModelParam._m0[1u].z;
    }
    float _1881 = ((((1.0 - _898) * ((_885 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_898 * _885)) * _869;
    float _1882 = _1881 * ((cbModelParam._m0[1u].w * (_1865 - _1766)) + _1766);
    float _1883 = _1881 * ((cbModelParam._m0[1u].w * (_1867 - _1768)) + _1768);
    float _1884 = _1881 * ((cbModelParam._m0[1u].w * (_1869 - _1770)) + _1770);
    float _1887 = fma(_1884, cbSceneParam._m0[89u].z, fma(_1883, cbSceneParam._m0[89u].y, _1882 * cbSceneParam._m0[89u].x));
    float _1890 = fma(_1884, cbSceneParam._m0[90u].z, fma(_1883, cbSceneParam._m0[90u].y, _1882 * cbSceneParam._m0[90u].x));
    float _1893 = fma(_1884, cbSceneParam._m0[91u].z, fma(_1883, cbSceneParam._m0[91u].y, _1882 * cbSceneParam._m0[91u].x));
    uvec4 _1903 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1905 = _1903.x * 14u;
    uint _1906 = _1905 + 13u;
    float _1913 = _869 + (-1.0);
    float _1918 = (cbLight._m0[_1906].x * _1913) + 1.0;
    float _1919 = (cbLight._m0[_1906].y * _1913) + 1.0;
    float _1920 = (cbLight._m0[_1906].z * _1913) + 1.0;
    float _1921 = (cbLight._m0[_1906].w * _1913) + 1.0;
    uint _1922 = _1905 + 5u;
    float _1928 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
    uint _1932 = _1905 + 4u;
    float _1938 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
    uint _1942 = _1905 | 1u;
    float _1953 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_719, _720, _721));
    float _1956 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_719, _720, _721));
    float _4110 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _4121 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1961 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * 0.3183098733425140380859375;
    float _1963 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * 0.3183098733425140380859375;
    float _1970 = ((cbLight._m0[_1922].x * _1928) * _1963) + ((cbLight._m0[_1932].x * _1938) * _1961);
    float _1971 = ((_1928 * cbLight._m0[_1922].y) * _1963) + ((_1938 * cbLight._m0[_1932].y) * _1961);
    float _1972 = ((_1928 * cbLight._m0[_1922].z) * _1963) + ((_1938 * cbLight._m0[_1932].z) * _1961);
    uvec4 _1976 = floatBitsToUint(cbLight._m0[_1905 + 12u]);
    bool _1978 = _1976.x == 0u;
    float _1989;
    float _1991;
    float _1993;
    if (_1978)
    {
        _1989 = _1970;
        _1991 = _1971;
        _1993 = _1972;
    }
    else
    {
        uint _1997 = _1905 + 6u;
        float _2013 = (dot(vec3(cbLight._m0[_1905 + 2u].xyz), vec3(_719, _720, _721)) * 0.5) + 0.5;
        float _2014 = _2013 * _2013;
        float _4132 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2015 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2016 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _1989 = (((cbLight._m0[_1997].x * 0.3183098733425140380859375) * _2015) * _2016) + _1970;
        _1991 = (((cbLight._m0[_1997].y * 0.3183098733425140380859375) * _2015) * _2016) + _1971;
        _1993 = (((cbLight._m0[_1997].z * 0.3183098733425140380859375) * _2015) * _2016) + _1972;
    }
    bool _1996 = _1976.y == 0u;
    float _2034;
    float _2036;
    float _2038;
    if (_1996)
    {
        _2034 = _1989;
        _2036 = _1991;
        _2038 = _1993;
    }
    else
    {
        uint _2193 = _1905 + 7u;
        float _2209 = (dot(vec3(cbLight._m0[_1905 + 3u].xyz), vec3(_719, _720, _721)) * 0.5) + 0.5;
        float _2210 = _2209 * _2209;
        float _4148 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2211 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2212 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2034 = (((cbLight._m0[_2193].x * 0.3183098733425140380859375) * _2211) * _2212) + _1989;
        _2036 = (((cbLight._m0[_2193].y * 0.3183098733425140380859375) * _2211) * _2212) + _1991;
        _2038 = (((cbLight._m0[_2193].z * 0.3183098733425140380859375) * _2211) * _2212) + _1993;
    }
    uint _2041 = _1905 + 8u;
    float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _722) * 0.949999988079071044921875);
    float _2055 = _2054 * _2054;
    float _2056 = cbLight._m0[_1905].x + _798;
    float _2057 = cbLight._m0[_1905].y + _799;
    float _2058 = cbLight._m0[_1905].z + _800;
    float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
    float _2063 = _2062 * _2056;
    float _2064 = _2062 * _2057;
    float _2065 = _2062 * _2058;
    float _2066 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_1905].xyz));
    float _4164 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _4175 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _2070 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2071 = dot(vec3(_719, _720, _721), vec3(_2063, _2064, _2065));
    float _4186 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _2075 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_2063, _2064, _2065));
    float _4197 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2079 = _2055 * _2055;
    float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
    float _2094 = (exp2(log2(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2095 = 1.0 - _2055;
    float _2106 = (0.5 / (((_2070 * ((_2069 * _2095) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2095) + _2055) * _2069))) * _2069;
    float _4208 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2108 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
    uint _2119 = _1905 + 9u;
    float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _722) * 0.949999988079071044921875);
    float _2131 = _2130 * _2130;
    float _2132 = cbLight._m0[_1942].x + _798;
    float _2133 = cbLight._m0[_1942].y + _799;
    float _2134 = cbLight._m0[_1942].z + _800;
    float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
    float _2139 = _2138 * _2132;
    float _2140 = _2138 * _2133;
    float _2141 = _2138 * _2134;
    float _2142 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_1942].xyz));
    float _4219 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2146 = dot(vec3(_719, _720, _721), vec3(_2139, _2140, _2141));
    float _4230 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _2150 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_2139, _2140, _2141));
    float _4241 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2154 = _2131 * _2131;
    float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
    float _2167 = (exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2168 = 1.0 - _2131;
    float _2178 = (0.5 / (((_2070 * ((_2145 * _2168) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2168) + _2131) * _2145))) * _2145;
    float _4252 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2180 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
    float _2190 = (((_2167 * cbLight._m0[_2119].x) * _2180) * _1928) + (((_2094 * cbLight._m0[_2041].x) * _2108) * _1938);
    float _2191 = (((_2167 * cbLight._m0[_2119].y) * _2180) * _1928) + (((_2094 * cbLight._m0[_2041].y) * _2108) * _1938);
    float _2192 = (((_2167 * cbLight._m0[_2119].z) * _2180) * _1928) + (((_2094 * cbLight._m0[_2041].z) * _2108) * _1938);
    float _2254;
    float _2256;
    float _2258;
    if (_1978)
    {
        _2254 = _2190;
        _2256 = _2191;
        _2258 = _2192;
    }
    else
    {
        uint _2260 = _1905 + 2u;
        uint _2264 = _1905 + 10u;
        float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2260].w)) * _722) * 0.949999988079071044921875);
        float _2279 = _2278 * _2278;
        float _2280 = cbLight._m0[_2260].x + _798;
        float _2281 = cbLight._m0[_2260].y + _799;
        float _2282 = cbLight._m0[_2260].z + _800;
        float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
        float _2287 = _2286 * _2280;
        float _2288 = _2286 * _2281;
        float _2289 = _2286 * _2282;
        float _2290 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2260].xyz));
        float _4263 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2293 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2294 = dot(vec3(_719, _720, _721), vec3(_2287, _2288, _2289));
        float _4274 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2297 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2298 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_2287, _2288, _2289));
        float _4285 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2302 = _2279 * _2279;
        float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
        float _2315 = (exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2316 = 1.0 - _2279;
        float _2326 = (0.5 / (((_2070 * ((_2293 * _2316) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2316) + _2279) * _2293))) * _2293;
        float _4296 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2328 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
        float _2329 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _2254 = (((_2315 * cbLight._m0[_2264].x) * _2328) * _2329) + _2190;
        _2256 = (((_2315 * cbLight._m0[_2264].y) * _2328) * _2329) + _2191;
        _2258 = (((_2315 * cbLight._m0[_2264].z) * _2328) * _2329) + _2192;
    }
    float _2364;
    float _2366;
    float _2368;
    if (_1996)
    {
        _2364 = _2254;
        _2366 = _2256;
        _2368 = _2258;
    }
    else
    {
        uint _2375 = _1905 + 3u;
        uint _2379 = _1905 + 11u;
        float _2393 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2375].w)) * _722) * 0.949999988079071044921875);
        float _2394 = _2393 * _2393;
        float _2395 = cbLight._m0[_2375].x + _798;
        float _2396 = cbLight._m0[_2375].y + _799;
        float _2397 = cbLight._m0[_2375].z + _800;
        float _2401 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
        float _2402 = _2401 * _2395;
        float _2403 = _2401 * _2396;
        float _2404 = _2401 * _2397;
        float _2405 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2375].xyz));
        float _4312 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2409 = dot(vec3(_719, _720, _721), vec3(_2402, _2403, _2404));
        float _4323 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2413 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_2402, _2403, _2404));
        float _4334 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2417 = _2394 * _2394;
        float _2421 = ((_2412 * _2412) * (_2417 + (-1.0))) + 1.0;
        float _2430 = (exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2431 = 1.0 - _2394;
        float _2441 = (0.5 / (((_2070 * ((_2408 * _2431) + _2394)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2431) + _2394) * _2408))) * _2408;
        float _4345 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2443 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2417 / ((_2421 * _2421) * 3.141590118408203125));
        float _2444 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2364 = (((_2430 * cbLight._m0[_2379].x) * _2443) * _2444) + _2254;
        _2366 = (((_2430 * cbLight._m0[_2379].y) * _2443) * _2444) + _2256;
        _2368 = (((_2430 * cbLight._m0[_2379].z) * _2443) * _2444) + _2258;
    }
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    if (_1903.y == 0u)
    {
        float _2519 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2520 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2519;
        float _2521 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2519;
        float _2522 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2519;
        uvec4 _2534 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2535 = _2534.x;
        uint _2546 = uint((float(_2534.y) * floor(float(uint(cbSceneParam._m0[85u].y * _807) / _2535))) + floor(float(uint(cbSceneParam._m0[85u].x * _806) / _2535)));
        float _2556 = (log2(_2522 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2557 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        uint _2560 = uint(isnan(14.0) ? _2557 : (isnan(_2557) ? 14.0 : min(_2557, 14.0)));
        uvec4 _2565 = texelFetch(g_lightClusterGridBuffer, int(((_2560 << 2u) + (_2546 << 6u)) >> 2u));
        uint _2566 = _2565.x;
        uint _2567 = _2534.z;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        if (((((1u << ((_2567 >> 4u) & 15u)) + 4294967295u) & _2566) == 0u) || ((_2567 & 240u) == 0u))
        {
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
        }
        else
        {
            float _2668;
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2678;
            float _2811 = 0.0;
            float _2812 = 0.0;
            float _2813 = 0.0;
            float _2814 = 0.0;
            float _2815 = 0.0;
            float _2816 = 0.0;
            uint _2817 = 0u;
            uint _2826;
            bool _2827;
            for (;;)
            {
                _2826 = texelFetch(g_lightClassification, int((((_2560 << 5u) + (_2546 << 9u)) + (_2817 << 2u)) >> 2u)).x;
                _2827 = _2826 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2827)
                {
                    frontier_phi_61_pred = _2811;
                    frontier_phi_61_pred_1 = _2816;
                    frontier_phi_61_pred_2 = _2815;
                    frontier_phi_61_pred_3 = _2814;
                    frontier_phi_61_pred_4 = _2813;
                    frontier_phi_61_pred_5 = _2812;
                }
                else
                {
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    uint _2941;
                    _2935 = _2811;
                    _2936 = _2812;
                    _2937 = _2813;
                    _2938 = _2814;
                    _2939 = _2815;
                    _2940 = _2816;
                    _2941 = _2826;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    for (;;)
                    {
                        uint _2945 = uint(findLSB(_2941)) + (_2817 << 5u);
                        uint _2942 = (_2941 + 4294967295u) & _2941;
                        uint _2947 = _2945 * 48u;
                        vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2947)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 3u)).x));
                        uint _2967 = (_2945 * 48u) + 4u;
                        vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 3u)).x));
                        uint _2986 = (_2945 * 48u) + 8u;
                        vec3 _2997 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2986)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 2u)).x));
                        float _3001 = _2961.x - _2520;
                        float _3002 = _2961.y - _2521;
                        float _3003 = _2961.z - _2522;
                        float _3004 = dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003));
                        float _3007 = inversesqrt(_3004);
                        float _3008 = _3007 * _3001;
                        float _3009 = _3007 * _3002;
                        float _3010 = _3007 * _3003;
                        float _3011 = dot(vec3(_825, _828, _831), vec3(_3008, _3009, _3010));
                        float _3016 = 1.0 - (_3004 * _2961.w);
                        float _4371 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3017 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                        float _3018 = sqrt(_3004) * _2980.w;
                        float _3021 = 1.39999997615814208984375 / (_3018 + 1.39999997615814208984375);
                        float _3022 = _3021 * _3021;
                        float _3025 = ((1.0 - _3022) * _3011) + _3022;
                        float _3028 = _3018 * _3018;
                        float _3032 = ((isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0))) * _3017) / ((_3028 * 0.699999988079071044921875) + 1.0);
                        float _3036 = (-0.0) - _2520;
                        float _3037 = (-0.0) - _2521;
                        float _3038 = (-0.0) - _2522;
                        float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
                        float _3043 = _3042 * _3036;
                        float _3044 = _3042 * _3037;
                        float _3045 = _3042 * _3038;
                        float _3053 = exp2(log2(1.0 / ((_3028 * 3.5) + 5.0)) * 0.25);
                        float _3054 = 1.0 - _885;
                        float _3061 = sqrt(1.0 - ((1.0 - (_3054 * _3054)) * (1.0 - (_3053 * _3053))));
                        float _3062 = _3061 * _3061;
                        float _3063 = _3062 * _3062;
                        float _3064 = _3043 + _3008;
                        float _3065 = _3044 + _3009;
                        float _3066 = _3045 + _3010;
                        float _3070 = inversesqrt(dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066)));
                        float _3074 = dot(vec3(_825, _828, _831), vec3(_3043, _3044, _3045));
                        float _4387 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3077 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                        float _3078 = dot(vec3(_825, _828, _831), vec3(_3070 * _3064, _3070 * _3065, _3070 * _3066));
                        float _4398 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3081 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                        float _3085 = ((_3081 * _3081) * (_3063 + (-1.0))) + 1.0;
                        float _3086 = _3021 * _3062;
                        float _3087 = _3086 * _3086;
                        float _3090 = ((1.0 - _3087) * _3011) + _3087;
                        float _4409 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3091 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3092 = 1.0 - _3062;
                        float _3102 = (0.5 / (((_3091 * ((_3077 * _3092) + _3062)) + 9.9999999392252902907785028219223e-09) + (((_3091 * _3092) + _3062) * _3077))) * _3091;
                        float _4420 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3113 = (((_3063 * 3.1415927410125732421875) * (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) / ((_3085 * _3085) * ((_3028 * 2.1991131305694580078125) + 3.141590118408203125))) * _3017;
                        _2870 = (_3032 * _2980.x) + _2938;
                        _2871 = (_3032 * _2980.y) + _2939;
                        _2872 = (_3032 * _2980.z) + _2940;
                        _2867 = (_3113 * _2997.x) + _2935;
                        _2868 = (_3113 * _2997.y) + _2936;
                        _2869 = (_3113 * _2997.z) + _2937;
                        if (_2942 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2935 = _2867;
                            _2936 = _2868;
                            _2937 = _2869;
                            _2938 = _2870;
                            _2939 = _2871;
                            _2940 = _2872;
                            _2941 = _2942;
                        }
                    }
                    frontier_phi_61_pred = _2867;
                    frontier_phi_61_pred_1 = _2872;
                    frontier_phi_61_pred_2 = _2871;
                    frontier_phi_61_pred_3 = _2870;
                    frontier_phi_61_pred_4 = _2869;
                    frontier_phi_61_pred_5 = _2868;
                }
                _2668 = frontier_phi_61_pred;
                _2678 = frontier_phi_61_pred_1;
                _2676 = frontier_phi_61_pred_2;
                _2674 = frontier_phi_61_pred_3;
                _2672 = frontier_phi_61_pred_4;
                _2670 = frontier_phi_61_pred_5;
                uint _2818 = _2817 + 1u;
                if (_2818 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2811 = _2668;
                    _2812 = _2670;
                    _2813 = _2672;
                    _2814 = _2674;
                    _2815 = _2676;
                    _2816 = _2678;
                    _2817 = _2818;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
        }
        uvec4 _2681 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2682 = _2681.z;
        uint _2684 = (_2682 >> 8u) & 15u;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        if (((4294967295u << _2684) & _2566) == 0u)
        {
            _2779 = _2667;
            _2781 = _2669;
            _2783 = _2671;
            _2785 = _2673;
            _2787 = _2675;
            _2789 = _2677;
        }
        else
        {
            float _2804 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
            float _2805 = _2804 * _2520;
            float _2806 = _2804 * _2521;
            float _2807 = _2804 * _2522;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2684 < ((_2682 >> 12u) & 15u))
            {
                float _2780;
                float _2782;
                float _2784;
                float _2786;
                float _2788;
                float _2790;
                float _2918 = _2667;
                float _2919 = _2669;
                float _2920 = _2671;
                float _2921 = _2673;
                float _2922 = _2675;
                float _2923 = _2677;
                uint _2924 = _2684;
                uint _2933;
                bool _2934;
                for (;;)
                {
                    _2933 = texelFetch(g_lightClassification, int((((_2560 << 5u) + (_2546 << 9u)) + (_2924 << 2u)) >> 2u)).x;
                    _2934 = _2933 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2934)
                    {
                        frontier_phi_67_pred = _2921;
                        frontier_phi_67_pred_1 = _2922;
                        frontier_phi_67_pred_2 = _2923;
                        frontier_phi_67_pred_3 = _2920;
                        frontier_phi_67_pred_4 = _2919;
                        frontier_phi_67_pred_5 = _2918;
                    }
                    else
                    {
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3131 = _2918;
                        float _3132 = _2919;
                        float _3133 = _2920;
                        float _3134 = _2921;
                        float _3135 = _2922;
                        float _3136 = _2923;
                        uint _3137 = _2933;
                        uint _3138;
                        vec4 _3163;
                        float _3164;
                        vec4 _3179;
                        vec3 _3191;
                        vec4 _3206;
                        vec4 _3222;
                        float _3268;
                        bool _3269;
                        for (;;)
                        {
                            uint _3148 = ((_2924 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3137));
                            _3138 = (_3137 + 4294967295u) & _3137;
                            uint _3150 = _3148 * 40u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            _3164 = _3163.w;
                            uint _3166 = (_3148 * 40u) + 4u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3181 = (_3148 * 40u) + 8u;
                            _3191 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x));
                            uint _3193 = (_3148 * 40u) + 16u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3209 = (_3148 * 40u) + 20u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3224 = (_3148 * 40u) + 24u;
                            vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            uint _3243 = (_3148 * 40u) + 28u;
                            vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            _3268 = fma(_2522, _3256.z, fma(_2521, _3256.y, _3256.x * _2520)) + _3256.w;
                            _3269 = !((fma(_2522, _3237.z, fma(_2521, _3237.y, _3237.x * _2520)) + _3237.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3269)
                            {
                                float _3296 = _3163.x - _2520;
                                float _3297 = _3163.y - _2521;
                                float _3298 = _3163.z - _2522;
                                float _3299 = dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298));
                                float _3302 = inversesqrt(_3299);
                                float _3303 = _3302 * _3296;
                                float _3304 = _3302 * _3297;
                                float _3305 = _3302 * _3298;
                                float _3309 = 1.0 - (_3299 / (_3164 * _3164));
                                float _4431 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3310 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3314 = sqrt(_3299) * _3179.w;
                                float _3316 = 1.39999997615814208984375 / (_3314 + 1.39999997615814208984375);
                                float _3317 = _3316 * _3316;
                                float _3320 = ((1.0 - _3317) * dot(vec3(_3303, _3304, _3305), vec3(_825, _828, _831))) + _3317;
                                float _3323 = _3314 * _3314;
                                float _3327 = (fma(_2522, _3206.z, fma(_2521, _3206.y, _3206.x * _2520)) + _3206.w) / _3268;
                                float _3328 = (fma(_2522, _3222.z, fma(_2521, _3222.y, _3222.x * _2520)) + _3222.w) / _3268;
                                float _3332 = 1.0 - dot(vec2(_3327, _3328), vec2(_3327, _3328));
                                float _4447 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3333 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3334 = _3333 * (((isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0))) * _3310) / ((_3323 * 0.699999988079071044921875) + 1.0));
                                float _3346 = exp2(log2(1.0 / ((_3323 * 3.5) + 5.0)) * 0.25);
                                float _3347 = 1.0 - _885;
                                float _3354 = sqrt(1.0 - ((1.0 - (_3347 * _3347)) * (1.0 - (_3346 * _3346))));
                                float _3355 = _3354 * _3354;
                                float _3356 = _3355 * _3355;
                                float _3357 = _3303 - _2805;
                                float _3358 = _3304 - _2806;
                                float _3359 = _3305 - _2807;
                                float _3363 = inversesqrt(dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359)));
                                float _3367 = dot(vec3(_825, _828, _831), vec3((-0.0) - _2805, (-0.0) - _2806, (-0.0) - _2807));
                                float _4458 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3370 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                                float _3371 = dot(vec3(_825, _828, _831), vec3(_3363 * _3357, _3363 * _3358, _3363 * _3359));
                                float _4469 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3374 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3378 = ((_3374 * _3374) * (_3356 + (-1.0))) + 1.0;
                                float _3379 = _3316 * _3355;
                                float _3380 = _3379 * _3379;
                                float _3386 = ((1.0 - _3380) * dot(vec3(_825, _828, _831), vec3(_3303, _3304, _3305))) + _3380;
                                float _4480 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3387 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3388 = 1.0 - _3355;
                                float _3398 = (0.5 / (((_3387 * ((_3370 * _3388) + _3355)) + 9.9999999392252902907785028219223e-09) + (((_3387 * _3388) + _3355) * _3370))) * _3387;
                                float _4491 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3408 = (_3333 * _3310) * (((_3356 * 3.1415927410125732421875) * (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) / ((_3378 * _3378) * ((_3323 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3408 * _3191.x;
                                frontier_phi_73_pred_1 = _3408 * _3191.y;
                                frontier_phi_73_pred_2 = _3334 * _3179.z;
                                frontier_phi_73_pred_3 = _3334 * _3179.y;
                                frontier_phi_73_pred_4 = _3334 * _3179.x;
                                frontier_phi_73_pred_5 = _3408 * _3191.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3412 = frontier_phi_73_pred;
                            _3413 = frontier_phi_73_pred_1;
                            _3417 = frontier_phi_73_pred_2;
                            _3416 = frontier_phi_73_pred_3;
                            _3415 = frontier_phi_73_pred_4;
                            _3414 = frontier_phi_73_pred_5;
                            _3121 = _3415 + _3134;
                            _3122 = _3416 + _3135;
                            _3123 = _3417 + _3136;
                            _3118 = _3412 + _3131;
                            _3119 = _3413 + _3132;
                            _3120 = _3414 + _3133;
                            if (_3138 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3138;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3121;
                        frontier_phi_67_pred_1 = _3122;
                        frontier_phi_67_pred_2 = _3123;
                        frontier_phi_67_pred_3 = _3120;
                        frontier_phi_67_pred_4 = _3119;
                        frontier_phi_67_pred_5 = _3118;
                    }
                    _2786 = frontier_phi_67_pred;
                    _2788 = frontier_phi_67_pred_1;
                    _2790 = frontier_phi_67_pred_2;
                    _2784 = frontier_phi_67_pred_3;
                    _2782 = frontier_phi_67_pred_4;
                    _2780 = frontier_phi_67_pred_5;
                    uint _2925 = _2924 + 1u;
                    if (_2925 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2918 = _2780;
                        _2919 = _2782;
                        _2920 = _2784;
                        _2921 = _2786;
                        _2922 = _2788;
                        _2923 = _2790;
                        _2924 = _2925;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2788;
                frontier_phi_55_56_ladder_1 = _2790;
                frontier_phi_55_56_ladder_2 = _2786;
                frontier_phi_55_56_ladder_3 = _2784;
                frontier_phi_55_56_ladder_4 = _2782;
                frontier_phi_55_56_ladder_5 = _2780;
            }
            else
            {
                frontier_phi_55_56_ladder = _2675;
                frontier_phi_55_56_ladder_1 = _2677;
                frontier_phi_55_56_ladder_2 = _2673;
                frontier_phi_55_56_ladder_3 = _2671;
                frontier_phi_55_56_ladder_4 = _2669;
                frontier_phi_55_56_ladder_5 = _2667;
            }
            _2779 = frontier_phi_55_56_ladder_5;
            _2781 = frontier_phi_55_56_ladder_4;
            _2783 = frontier_phi_55_56_ladder_3;
            _2785 = frontier_phi_55_56_ladder_2;
            _2787 = frontier_phi_55_56_ladder;
            _2789 = frontier_phi_55_56_ladder_1;
        }
        float _2794 = isnan(1.0) ? _869 : (isnan(_869) ? 1.0 : min(_869, 1.0));
        _2579 = (_2794 * _2785) + _2034;
        _2581 = (_2794 * _2787) + _2036;
        _2583 = (_2794 * _2789) + _2038;
        _2585 = ((_2779 * 0.039999999105930328369140625) * _2794) + _2364;
        _2587 = ((_2781 * 0.039999999105930328369140625) * _2794) + _2366;
        _2589 = ((_2783 * 0.039999999105930328369140625) * _2794) + _2368;
    }
    else
    {
        _2579 = _2034;
        _2581 = _2036;
        _2583 = _2038;
        _2585 = _2364;
        _2587 = _2366;
        _2589 = _2368;
    }
    float _4507 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4518 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4529 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    uint _2609 = _243 + 6u;
    float _2617 = _806 / cbSceneParam._m0[86u].x;
    float _2618 = _807 / cbSceneParam._m0[86u].y;
    vec4 _2632 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2617, _2618, (log2((isnan(cbSceneParam._m0[77u].w) ? _740 : (isnan(_740) ? cbSceneParam._m0[77u].w : min(_740, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2634 = _2632.x;
    float _2635 = _2632.y;
    float _2636 = _2632.z;
    float _2637 = _2632.w;
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    if (_740 > cbSceneParam._m0[78u].w)
    {
        float _2692 = isnan(_740) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _740 : min(cbSceneParam._m0[80u].w, _740));
        float _2693 = _2692 / _740;
        float _2704 = _2693 * _791;
        float _2705 = _792 * _2693;
        float _2706 = (-0.0) - _2705;
        float _2707 = _2693 * _793;
        float _2709 = (cbSceneParam._m0[77u].w * _2706) / _2692;
        float _2710 = _2709 + cbSceneParam._m0[79u].w;
        float _2711 = cbSceneParam._m0[79u].w - _2705;
        float _2717 = sqrt(((_2704 * _2704) + (_2705 * _2705)) + (_2707 * _2707));
        float _2720 = (1.0 - (cbSceneParam._m0[77u].w / _2692)) * _2717;
        float _2725 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2727 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2880;
        if (abs((_2706 - _2709) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2880 = ((((_2710 > 0.0) ? exp2(_2725 * _2710) : (2.0 - exp2(_2727 * _2710))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2720;
        }
        else
        {
            float _2840 = 1.0 / cbSceneParam._m0[80u].x;
            float _2841 = isnan(_2711) ? _2710 : (isnan(_2710) ? _2711 : max(_2710, _2711));
            float _2842 = isnan(_2711) ? _2710 : (isnan(_2710) ? _2711 : min(_2710, _2711));
            float _2851 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : min(_2841, 0.0));
            float _2852 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : min(_2842, 0.0));
            _2880 = ((abs(_2717 / _2706) * cbSceneParam._m0[80u].y) * ((((_2851 - _2852) * 2.0) - ((exp2(_2725 * (isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0)))) - exp2(_2725 * (isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0))))) * _2840)) - ((exp2(_2727 * _2851) - exp2(_2727 * _2852)) * _2840))) + (_2720 * cbSceneParam._m0[80u].z);
        }
        vec4 _2882 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2617, _2618, 1.0), 0.0);
        float _2891 = exp2((_2880 * (-1.44269502162933349609375)) * (1.0 - _2882.w));
        float _2892 = log2(_2891);
        float _2908 = log2(_2637);
        _2729 = (exp2(_2908 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].x)) * _2882.x) / cbSceneParam._m0[78u].x)) + _2634;
        _2731 = (exp2(_2908 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].y)) * _2882.y) / cbSceneParam._m0[78u].y)) + _2635;
        _2733 = (exp2(_2908 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].z)) * _2882.z) / cbSceneParam._m0[78u].z)) + _2636;
        _2735 = _2891 * _2637;
    }
    else
    {
        _2729 = _2634;
        _2731 = _2635;
        _2733 = _2636;
        _2735 = _2637;
    }
    float _2747 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2748 = _2747 == 3.0;
    float _2749 = log2(_2735);
    float _2756 = exp2(_2749 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2579 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _869))) + ((_2585 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1674)) * cbPerFrame._m0[3u].x));
    float _2757 = exp2(_2749 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2581 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _869))) + ((_2587 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1674)) * cbPerFrame._m0[3u].x));
    float _2758 = exp2(_2749 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2583 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _869))) + ((_2589 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1674)) * cbPerFrame._m0[3u].x));
    float _2767 = (_2747 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2767 * (_2748 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2729)));
    SV_Target.y = _2767 * (_2748 ? _2757 : (_2757 + (cbSceneParam._m0[72u].w * _2731)));
    SV_Target.z = _2767 * (_2748 ? _2758 : (_2758 + (cbSceneParam._m0[72u].w * _2733)));
    SV_Target.w = cbInstanceData._m0[_2609].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2609].w;
}


