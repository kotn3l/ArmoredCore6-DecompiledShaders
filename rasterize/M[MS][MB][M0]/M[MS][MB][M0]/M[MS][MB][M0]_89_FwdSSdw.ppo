#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1193;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _362 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _362) * cbMtdParam._m0[24u].x) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3524 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _387 = (_380 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _388 = (_380 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _389 = (_380 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _407 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _426 = _424.x;
    float _427 = _424.y;
    float _428 = _424.z;
    float _437 = ((_407.z - _428) * _380) + _428;
    float _440 = ((((_407.x - _426) * _380) + _426) * 2.0) + (-1.0);
    float _442 = ((((_407.y - _427) * _380) + _427) * 2.0) + (-1.0);
    float _443 = dot(vec2(_440, _442), vec2(_440, _442));
    float _3535 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _448 = sqrt(1.0 - (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))));
    vec4 _461 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _479 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _481 = _479.x;
    float _482 = 1.0 - _481;
    float _488 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _491 = ((isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : min(_488, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _500 = (_491 - ((((((_481 - _482) * cbMtdParam._m0[24u].z) + _482) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _491))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3556 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _508 = (_501 * (cbMtdParam._m0[17u].x - _387)) + _387;
    float _509 = (_501 * (cbMtdParam._m0[17u].y - _388)) + _388;
    float _510 = (_501 * (cbMtdParam._m0[17u].z - _389)) + _389;
    vec4 _522 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _524 = _522.x;
    float _525 = 1.0 - _524;
    float _552 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_524 - _525) * cbMtdParam._m0[24u].w) + _525) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3567 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _561 = ((((cbMtdParam._m0[10u].x - _508) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _553) + _508;
    float _562 = ((((cbMtdParam._m0[10u].y - _509) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _553) + _509;
    float _563 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _510)) * _553) + _510;
    vec4 _577 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _584 = (_577.x * 2.0) + (-1.0);
    float _585 = (_577.y * 2.0) + (-1.0);
    float _586 = dot(vec2(_584, _585), vec2(_584, _585));
    float _3578 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _594 = (_501 * (_577.z - _437)) + _437;
    float _597 = ((cbMtdParam._m0[23u].y - _594) * _553) + _594;
    vec4 _616 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _622 = (_616.x * 2.0) + (-1.0);
    float _623 = (_616.y * 2.0) + (-1.0);
    float _624 = dot(vec2(_622, _623), vec2(_622, _623));
    float _3589 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _641 = (((_584 - _440) + (cbMtdParam._m0[21u].x * _440)) * _501) + _440;
    float _642 = (((_585 - _442) + (cbMtdParam._m0[21u].x * _442)) * _501) + _442;
    float _643 = (_501 * (sqrt(1.0 - (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) - _448)) + _448;
    float _654 = (((_622 - _641) + (_641 * cbMtdParam._m0[22u].z)) * _553) + _641;
    float _655 = (((_623 - _642) + (_642 * cbMtdParam._m0[22u].z)) * _553) + _642;
    float _656 = ((sqrt(1.0 - (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) - _643) * _553) + _643;
    float _658 = cbMtdParam._m0[22u].x + _461.w;
    float _661 = fma(_656, _232 * NORMAL.x, fma(_655, _239 * TANGENT.x, (_225 * _217) * _654));
    float _664 = fma(_656, _232 * NORMAL.y, fma(_655, _239 * TANGENT.y, (_225 * _218) * _654));
    float _667 = fma(_656, _232 * NORMAL.z, fma(_655, _239 * TANGENT.z, (_225 * _219) * _654));
    float _671 = inversesqrt(dot(vec3(_661, _664, _667), vec3(_661, _664, _667)));
    float _672 = _671 * _661;
    float _673 = _671 * _664;
    float _674 = _671 * _667;
    float _3600 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _675 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _3611 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _3622 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3633 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3644 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _693 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _744 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _734);
    float _745 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _734);
    float _746 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _734);
    float _750 = inversesqrt(dot(vec3(_744, _745, _746), vec3(_744, _745, _746)));
    float _751 = _744 * _750;
    float _752 = _745 * _750;
    float _753 = _746 * _750;
    float _759 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _760 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _778 = fma(_674, cbSceneParam._m0[5u].z, fma(_673, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _672));
    float _781 = fma(_674, cbSceneParam._m0[6u].z, fma(_673, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _672));
    float _784 = fma(_674, cbSceneParam._m0[7u].z, fma(_673, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _672));
    uint _798 = (_245 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _804 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) * cbInstanceData._m0[_798].x;
    float _805 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) * cbInstanceData._m0[_798].y;
    float _806 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) * cbInstanceData._m0[_798].z;
    float _3655 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _3666 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _3677 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    vec4 _818 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _759, cbSceneParam._m0[86u].y * _760));
    float _822 = ((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * TEXCOORD_5.w) * _818.x;
    float _823 = dot(vec3(_672, _673, _674), vec3(_751, _752, _753));
    float _826 = _823 * 2.0;
    float _830 = (_826 * _672) - _751;
    float _831 = (_826 * _673) - _752;
    float _832 = (_826 * _674) - _753;
    float _836 = abs(dot(vec3(_751, _752, _753), vec3(_672, _673, _674)));
    float _3688 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _838 = sqrt(_675);
    float _851 = exp2((_838 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_838 * 3.0));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1192;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _917 = fma(_891, cbModelParam._m0[26u].z, fma(_887, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883));
        float _921 = fma(_891, cbModelParam._m0[27u].z, fma(_887, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883));
        float _925 = fma(_891, cbModelParam._m0[28u].z, fma(_887, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883));
        float _950 = _883 + _672;
        float _951 = _887 + _673;
        float _952 = _891 + _674;
        float _962 = fma(_952, cbModelParam._m0[26u].z, fma(_951, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _950)) - _917;
        float _963 = fma(_952, cbModelParam._m0[27u].z, fma(_951, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _950)) - _921;
        float _964 = fma(_952, cbModelParam._m0[28u].z, fma(_951, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _950)) - _925;
        float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
        float _981 = ((_968 * _962) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_917 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_968 * _963) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_921 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _983 = ((_968 * _964) / cbModelParam._m0[34u].z) + ((((((_925 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_981, _982, _983), 0.0);
        float _1020 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_986.x + (-0.5));
        float _1022 = _1020 * (_986.y + (-0.5));
        float _1023 = _1020 * (_986.z + (-0.5));
        float _1030 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_993.x + (-0.5));
        float _1032 = _1030 * (_993.y + (-0.5));
        float _1033 = _1030 * (_993.z + (-0.5));
        float _1040 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1000.x + (-0.5));
        float _1042 = _1040 * (_1000.y + (-0.5));
        float _1043 = _1040 * (_1000.z + (-0.5));
        float _1050 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1007.x + (-0.5));
        float _1052 = _1050 * (_1007.y + (-0.5));
        float _1053 = _1050 * (_1007.z + (-0.5));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = _1021 * 0.5;
        float _1058 = _1031 * 0.5;
        float _1059 = _1041 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1074 = (dot(vec3(_672, _673, _674), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1084 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3736 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1086 + 1.0))) + _1091) * _1054;
        float _1101 = _1022 * 0.5;
        float _1102 = _1032 * 0.5;
        float _1103 = _1042 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1117 = (dot(vec3(_672, _673, _674), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1126 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3769 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1128 + 1.0))) + _1133) * _1055;
        float _1143 = _1023 * 0.5;
        float _1144 = _1033 * 0.5;
        float _1145 = _1043 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_672, _673, _674), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3802 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1170 + 1.0))) + _1175) * _1056;
        _1192 = _1023;
        _1194 = _1022;
        _1195 = _1021;
        _1196 = _1033;
        _1197 = _1032;
        _1198 = _1031;
        _1199 = _1043;
        _1200 = _1042;
        _1201 = _1041;
        _1202 = _1056;
        _1203 = _1055;
        _1204 = _1054;
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
        _1206 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
    }
    else
    {
        _1192 = _1193;
        _1194 = _1193;
        _1195 = _1193;
        _1196 = _1193;
        _1197 = _1193;
        _1198 = _1193;
        _1199 = _1193;
        _1200 = _1193;
        _1201 = _1193;
        _1202 = _1193;
        _1203 = _1193;
        _1204 = _1193;
        _1205 = 0.0;
        _1206 = 0.0;
        _1207 = 0.0;
    }
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1232 = fma(_891, cbModelParam._m0[30u].z, fma(_887, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _883));
        float _1236 = fma(_891, cbModelParam._m0[31u].z, fma(_887, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _883));
        float _1240 = fma(_891, cbModelParam._m0[32u].z, fma(_887, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _883));
        float _1263 = _883 + _672;
        float _1264 = _887 + _673;
        float _1265 = _891 + _674;
        float _1275 = fma(_1265, cbModelParam._m0[30u].z, fma(_1264, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1263)) - _1232;
        float _1276 = fma(_1265, cbModelParam._m0[31u].z, fma(_1264, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1263)) - _1236;
        float _1277 = fma(_1265, cbModelParam._m0[32u].z, fma(_1264, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1263)) - _1240;
        float _1281 = inversesqrt(dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277)));
        float _1294 = ((_1281 * _1275) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1232 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1281 * _1276) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1236 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1281 * _1277) / cbModelParam._m0[35u].z) + ((((((_1240 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1294, _1295, _1296), 0.0);
        float _1331 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1298.x + (-0.5));
        float _1333 = _1331 * (_1298.y + (-0.5));
        float _1334 = _1331 * (_1298.z + (-0.5));
        float _1341 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1305.x + (-0.5));
        float _1343 = _1341 * (_1305.y + (-0.5));
        float _1344 = _1341 * (_1305.z + (-0.5));
        float _1351 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1312.x + (-0.5));
        float _1353 = _1351 * (_1312.y + (-0.5));
        float _1354 = _1351 * (_1312.z + (-0.5));
        float _1361 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1319.x + (-0.5));
        float _1363 = _1361 * (_1319.y + (-0.5));
        float _1364 = _1361 * (_1319.z + (-0.5));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = _1332 * 0.5;
        float _1369 = _1342 * 0.5;
        float _1370 = _1352 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_672, _673, _674), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _3865 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1395 + 1.0))) + _1400) * _1365;
        float _1410 = _1333 * 0.5;
        float _1411 = _1343 * 0.5;
        float _1412 = _1353 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_672, _673, _674), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _3898 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1437 + 1.0))) + _1442) * _1366;
        float _1452 = _1334 * 0.5;
        float _1453 = _1344 * 0.5;
        float _1454 = _1354 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_672, _673, _674), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _3931 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1479 + 1.0))) + _1484) * _1367;
        _1501 = _1334;
        _1502 = _1333;
        _1503 = _1332;
        _1504 = _1344;
        _1505 = _1343;
        _1506 = _1342;
        _1507 = _1354;
        _1508 = _1353;
        _1509 = _1352;
        _1510 = _1367;
        _1511 = _1366;
        _1512 = _1365;
        _1513 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
        _1514 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1515 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
    }
    else
    {
        _1501 = _1193;
        _1502 = _1193;
        _1503 = _1193;
        _1504 = _1193;
        _1505 = _1193;
        _1506 = _1193;
        _1507 = _1193;
        _1508 = _1193;
        _1509 = _1193;
        _1510 = _1193;
        _1511 = _1193;
        _1512 = _1193;
        _1513 = 0.0;
        _1514 = 0.0;
        _1515 = 0.0;
    }
    float _1525 = (cbModelParam._m0[1u].x * (_1513 - _1205)) + _1205;
    float _1526 = (cbModelParam._m0[1u].x * (_1514 - _1206)) + _1206;
    float _1527 = (cbModelParam._m0[1u].x * (_1515 - _1207)) + _1207;
    float _1548 = fma(_1527, cbSceneParam._m0[89u].z, fma(_1526, cbSceneParam._m0[89u].y, _1525 * cbSceneParam._m0[89u].x));
    float _1551 = fma(_1527, cbSceneParam._m0[90u].z, fma(_1526, cbSceneParam._m0[90u].y, _1525 * cbSceneParam._m0[90u].x));
    float _1554 = fma(_1527, cbSceneParam._m0[91u].z, fma(_1526, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1525));
    float _1569 = _830 * 0.5;
    float _1570 = _831 * 0.5;
    float _1571 = _832 * 0.5;
    float _1572 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1503, _1506, _1509, _1512));
    float _1575 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1502, _1505, _1508, _1511));
    float _1578 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1501, _1504, _1507, _1510));
    float _1612;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1585 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1192, _1196, _1199, _1202));
        float _1589 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1194, _1197, _1200, _1203));
        float _1593 = dot(vec4(_1569, _1570, _1571, 1.0), vec4(_1195, _1198, _1201, _1204));
        float _1600 = dot(vec4(cbModelParam._m0[39u]), vec4(_1569, _1570, _1571, 1.0));
        _1612 = dot(vec3(isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1600) ? 0.0 : (isnan(0.0) ? _1600 : max(0.0, _1600))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1612 = 1.0;
    }
    float _1623;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1614 = dot(vec4(cbModelParam._m0[40u]), vec4(_1569, _1570, _1571, 1.0));
        _1623 = dot(vec3(isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1614) ? 0.0 : (isnan(0.0) ? _1614 : max(0.0, _1614))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1623 = 1.0;
    }
    float _1627 = (_1623 * cbModelParam._m0[1u].x) + (_1612 * (1.0 - cbModelParam._m0[1u].x));
    float _1637 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _675);
    float _1638 = isnan(_1637) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1637 : min(cbModelParam._m0[25u].z, _1637));
    float _1719;
    float _1721;
    float _1723;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1686 = fma(_891, cbModelParam._m0[13u].z, fma(_887, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _883)) + cbModelParam._m0[13u].w;
        float _1690 = fma(_891, cbModelParam._m0[14u].z, fma(_887, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _883)) + cbModelParam._m0[14u].w;
        float _1694 = fma(_891, cbModelParam._m0[15u].z, fma(_887, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _883)) + cbModelParam._m0[15u].w;
        float _1697 = fma(_832, cbModelParam._m0[13u].z, fma(_831, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _830));
        float _1700 = fma(_832, cbModelParam._m0[14u].z, fma(_831, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _830));
        float _1703 = fma(_832, cbModelParam._m0[15u].z, fma(_831, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _830));
        float _1731;
        if (_1697 > 0.0)
        {
            _1731 = abs((1.0 - _1686) / _1697);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1686 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1731 = frontier_phi_14_12_ladder;
        }
        float _1953;
        if (_1700 > 0.0)
        {
            _1953 = abs((1.0 - _1690) / _1700);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1690 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1953 = frontier_phi_23_19_ladder;
        }
        float _2199;
        if (_1703 > 0.0)
        {
            _2199 = abs((1.0 - _1694) / _1703);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1694 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2199 = frontier_phi_35_30_ladder;
        }
        float _2201 = isnan(_1953) ? _1731 : (isnan(_1731) ? _1953 : min(_1731, _1953));
        float _2202 = isnan(_2199) ? _2201 : (isnan(_2201) ? _2199 : min(_2201, _2199));
        float _2206 = (_2202 * _1697) + _1686;
        float _2207 = (_2202 * _1700) + _1690;
        float _2208 = (_2202 * _1703) + _1694;
        float _2209 = _2202 * 9.9999997473787516355514526367188e-05;
        float _2211 = (-1.0) - _2209;
        float _2213 = _2209 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2208 > _2213) || ((_2208 < _2211) || ((_2207 > _2213) || ((_2207 < _2211) || ((_2206 < _2211) || (_2206 > _2213))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2332 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2208, cbModelParam._m0[9u].z, fma(_2207, cbModelParam._m0[9u].y, _2206 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2208, cbModelParam._m0[10u].z, fma(_2207, cbModelParam._m0[10u].y, _2206 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2208, cbModelParam._m0[11u].z, fma(_2207, cbModelParam._m0[11u].y, _2206 * cbModelParam._m0[11u].x))), _1638);
            frontier_phi_13_35_ladder = _2332.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2332.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2332.x * cbModelParam._m0[1u].y;
        }
        _1719 = frontier_phi_13_35_ladder_2;
        _1721 = frontier_phi_13_35_ladder_1;
        _1723 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1707 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_830, _831, _832), _1638);
        _1719 = _1707.x * cbModelParam._m0[1u].y;
        _1721 = _1707.y * cbModelParam._m0[1u].y;
        _1723 = _1707.z * cbModelParam._m0[1u].y;
    }
    float _1727 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _675);
    float _1728 = isnan(_1727) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1727 : min(cbModelParam._m0[25u].w, _1727));
    float _1818;
    float _1820;
    float _1822;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1782 = fma(_891, cbModelParam._m0[21u].z, fma(_887, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _883)) + cbModelParam._m0[21u].w;
        float _1786 = fma(_891, cbModelParam._m0[22u].z, fma(_887, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _883)) + cbModelParam._m0[22u].w;
        float _1790 = fma(_891, cbModelParam._m0[23u].z, fma(_887, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _883)) + cbModelParam._m0[23u].w;
        float _1793 = fma(_832, cbModelParam._m0[21u].z, fma(_831, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _830));
        float _1796 = fma(_832, cbModelParam._m0[22u].z, fma(_831, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _830));
        float _1799 = fma(_832, cbModelParam._m0[23u].z, fma(_831, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _830));
        float _1958;
        if (_1793 > 0.0)
        {
            _1958 = abs((1.0 - _1782) / _1793);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1782 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1958 = frontier_phi_25_21_ladder;
        }
        float _2226;
        if (_1796 > 0.0)
        {
            _2226 = abs((1.0 - _1786) / _1796);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1786 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2226 = frontier_phi_37_32_ladder;
        }
        float _2431;
        if (_1799 > 0.0)
        {
            _2431 = abs((1.0 - _1790) / _1799);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1790 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2431 = frontier_phi_46_43_ladder;
        }
        float _2433 = isnan(_2226) ? _1958 : (isnan(_1958) ? _2226 : min(_1958, _2226));
        float _2434 = isnan(_2431) ? _2433 : (isnan(_2433) ? _2431 : min(_2433, _2431));
        float _2438 = (_2434 * _1793) + _1782;
        float _2439 = (_2434 * _1796) + _1786;
        float _2440 = (_2434 * _1799) + _1790;
        float _2441 = _2434 * 9.9999997473787516355514526367188e-05;
        float _2442 = (-1.0) - _2441;
        float _2444 = _2441 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2440 > _2444) || ((_2440 < _2442) || ((_2439 > _2444) || ((_2439 < _2442) || ((_2438 < _2442) || (_2438 > _2444))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2639 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2440, cbModelParam._m0[17u].z, fma(_2439, cbModelParam._m0[17u].y, _2438 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2440, cbModelParam._m0[18u].z, fma(_2439, cbModelParam._m0[18u].y, _2438 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2440, cbModelParam._m0[19u].z, fma(_2439, cbModelParam._m0[19u].y, _2438 * cbModelParam._m0[19u].x))), _1728);
            frontier_phi_22_46_ladder = _2639.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2639.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2639.x * cbModelParam._m0[1u].z;
        }
        _1818 = frontier_phi_22_46_ladder_2;
        _1820 = frontier_phi_22_46_ladder_1;
        _1822 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1802 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_830, _831, _832), _1728);
        _1818 = _1802.x * cbModelParam._m0[1u].z;
        _1820 = _1802.y * cbModelParam._m0[1u].z;
        _1822 = _1802.z * cbModelParam._m0[1u].z;
    }
    float _1834 = ((((1.0 - _851) * ((_838 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_851 * _838)) * _822;
    float _1835 = _1834 * ((cbModelParam._m0[1u].w * (_1818 - _1719)) + _1719);
    float _1836 = _1834 * ((cbModelParam._m0[1u].w * (_1820 - _1721)) + _1721);
    float _1837 = _1834 * ((cbModelParam._m0[1u].w * (_1822 - _1723)) + _1723);
    float _1840 = fma(_1837, cbSceneParam._m0[89u].z, fma(_1836, cbSceneParam._m0[89u].y, _1835 * cbSceneParam._m0[89u].x));
    float _1843 = fma(_1837, cbSceneParam._m0[90u].z, fma(_1836, cbSceneParam._m0[90u].y, _1835 * cbSceneParam._m0[90u].x));
    float _1846 = fma(_1837, cbSceneParam._m0[91u].z, fma(_1836, cbSceneParam._m0[91u].y, _1835 * cbSceneParam._m0[91u].x));
    vec4 _1854 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_759, _760));
    float _1856 = _1854.w;
    float _1868 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1856);
    float _1869 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1856);
    float _1870 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1856);
    uvec4 _1874 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1876 = _1874.x * 14u;
    uint _1877 = _1876 + 13u;
    float _1884 = _822 + (-1.0);
    float _1889 = (cbLight._m0[_1877].x * _1884) + 1.0;
    float _1890 = (cbLight._m0[_1877].y * _1884) + 1.0;
    float _1891 = (cbLight._m0[_1877].z * _1884) + 1.0;
    float _1892 = (cbLight._m0[_1877].w * _1884) + 1.0;
    uint _1893 = _1876 + 5u;
    float _1899 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
    uint _1903 = _1876 + 4u;
    float _1912 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
    uint _1916 = _1876 | 1u;
    float _1927 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_672, _673, _674));
    float _1930 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_672, _673, _674));
    float _4067 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _4078 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1935 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * 0.3183098733425140380859375;
    float _1937 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.3183098733425140380859375;
    float _1944 = ((cbLight._m0[_1893].x * _1899) * _1937) + (((cbLight._m0[_1903].x * _1868) * _1912) * _1935);
    float _1945 = ((_1899 * cbLight._m0[_1893].y) * _1937) + (((cbLight._m0[_1903].y * _1869) * _1912) * _1935);
    float _1946 = ((_1899 * cbLight._m0[_1893].z) * _1937) + (((cbLight._m0[_1903].z * _1870) * _1912) * _1935);
    uvec4 _1950 = floatBitsToUint(cbLight._m0[_1876 + 12u]);
    bool _1952 = _1950.x == 0u;
    float _1963;
    float _1965;
    float _1967;
    if (_1952)
    {
        _1963 = _1944;
        _1965 = _1945;
        _1967 = _1946;
    }
    else
    {
        uint _1971 = _1876 + 6u;
        float _1987 = (dot(vec3(cbLight._m0[_1876 + 2u].xyz), vec3(_672, _673, _674)) * 0.5) + 0.5;
        float _1988 = _1987 * _1987;
        float _4089 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1989 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1990 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _1963 = (((cbLight._m0[_1971].x * 0.3183098733425140380859375) * _1989) * _1990) + _1944;
        _1965 = (((cbLight._m0[_1971].y * 0.3183098733425140380859375) * _1989) * _1990) + _1945;
        _1967 = (((cbLight._m0[_1971].z * 0.3183098733425140380859375) * _1989) * _1990) + _1946;
    }
    bool _1970 = _1950.y == 0u;
    float _2008;
    float _2010;
    float _2012;
    if (_1970)
    {
        _2008 = _1963;
        _2010 = _1965;
        _2012 = _1967;
    }
    else
    {
        uint _2170 = _1876 + 7u;
        float _2186 = (dot(vec3(cbLight._m0[_1876 + 3u].xyz), vec3(_672, _673, _674)) * 0.5) + 0.5;
        float _2187 = _2186 * _2186;
        float _4105 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2188 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2189 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
        _2008 = (((cbLight._m0[_2170].x * 0.3183098733425140380859375) * _2188) * _2189) + _1963;
        _2010 = (((cbLight._m0[_2170].y * 0.3183098733425140380859375) * _2188) * _2189) + _1965;
        _2012 = (((cbLight._m0[_2170].z * 0.3183098733425140380859375) * _2188) * _2189) + _1967;
    }
    uint _2015 = _1876 + 8u;
    float _2028 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1876].w)) * _675) * 0.949999988079071044921875);
    float _2029 = _2028 * _2028;
    float _2030 = cbLight._m0[_1876].x + _751;
    float _2031 = cbLight._m0[_1876].y + _752;
    float _2032 = cbLight._m0[_1876].z + _753;
    float _2036 = inversesqrt(dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032)));
    float _2037 = _2036 * _2030;
    float _2038 = _2036 * _2031;
    float _2039 = _2036 * _2032;
    float _2040 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_1876].xyz));
    float _4121 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2043 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _2044 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _2045 = dot(vec3(_672, _673, _674), vec3(_2037, _2038, _2039));
    float _4143 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _2049 = dot(vec3(cbLight._m0[_1876].xyz), vec3(_2037, _2038, _2039));
    float _4154 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2053 = _2029 * _2029;
    float _2057 = ((_2048 * _2048) * (_2053 + (-1.0))) + 1.0;
    float _2068 = (exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2069 = 1.0 - _2029;
    float _2080 = (0.5 / (((_2044 * ((_2043 * _2069) + _2029)) + 9.9999999392252902907785028219223e-09) + (((_2044 * _2069) + _2029) * _2043))) * _2043;
    float _4165 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2082 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2053 / ((_2057 * _2057) * 3.141590118408203125));
    uint _2096 = _1876 + 9u;
    float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1916].w)) * _675) * 0.949999988079071044921875);
    float _2108 = _2107 * _2107;
    float _2109 = cbLight._m0[_1916].x + _751;
    float _2110 = cbLight._m0[_1916].y + _752;
    float _2111 = cbLight._m0[_1916].z + _753;
    float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
    float _2116 = _2115 * _2109;
    float _2117 = _2115 * _2110;
    float _2118 = _2115 * _2111;
    float _2119 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_1916].xyz));
    float _4176 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2123 = dot(vec3(_672, _673, _674), vec3(_2116, _2117, _2118));
    float _4187 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2127 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_2116, _2117, _2118));
    float _4198 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2131 = _2108 * _2108;
    float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
    float _2144 = (exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2145 = 1.0 - _2108;
    float _2155 = (0.5 / (((_2044 * ((_2122 * _2145) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_2044 * _2145) + _2108) * _2122))) * _2122;
    float _4209 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2157 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
    float _2167 = (((_2144 * cbLight._m0[_2096].x) * _2157) * _1899) + ((((cbLight._m0[_2015].x * _1868) * _2068) * _2082) * _1912);
    float _2168 = (((_2144 * cbLight._m0[_2096].y) * _2157) * _1899) + ((((cbLight._m0[_2015].y * _1869) * _2068) * _2082) * _1912);
    float _2169 = (((_2144 * cbLight._m0[_2096].z) * _2157) * _1899) + ((((cbLight._m0[_2015].z * _1870) * _2068) * _2082) * _1912);
    float _2231;
    float _2233;
    float _2235;
    if (_1952)
    {
        _2231 = _2167;
        _2233 = _2168;
        _2235 = _2169;
    }
    else
    {
        uint _2237 = _1876 + 2u;
        uint _2241 = _1876 + 10u;
        float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _675) * 0.949999988079071044921875);
        float _2256 = _2255 * _2255;
        float _2257 = cbLight._m0[_2237].x + _751;
        float _2258 = cbLight._m0[_2237].y + _752;
        float _2259 = cbLight._m0[_2237].z + _753;
        float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
        float _2264 = _2263 * _2257;
        float _2265 = _2263 * _2258;
        float _2266 = _2263 * _2259;
        float _2267 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_2237].xyz));
        float _4220 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2270 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2271 = dot(vec3(_672, _673, _674), vec3(_2264, _2265, _2266));
        float _4231 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2274 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2275 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2264, _2265, _2266));
        float _4242 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2279 = _2256 * _2256;
        float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
        float _2292 = (exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2293 = 1.0 - _2256;
        float _2303 = (0.5 / (((_2044 * ((_2270 * _2293) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_2044 * _2293) + _2256) * _2270))) * _2270;
        float _4253 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2305 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
        float _2306 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
        _2231 = (((_2292 * cbLight._m0[_2241].x) * _2305) * _2306) + _2167;
        _2233 = (((_2292 * cbLight._m0[_2241].y) * _2305) * _2306) + _2168;
        _2235 = (((_2292 * cbLight._m0[_2241].z) * _2305) * _2306) + _2169;
    }
    float _2341;
    float _2343;
    float _2345;
    if (_1970)
    {
        _2341 = _2231;
        _2343 = _2233;
        _2345 = _2235;
    }
    else
    {
        uint _2352 = _1876 + 3u;
        uint _2356 = _1876 + 11u;
        float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _675) * 0.949999988079071044921875);
        float _2371 = _2370 * _2370;
        float _2372 = cbLight._m0[_2352].x + _751;
        float _2373 = cbLight._m0[_2352].y + _752;
        float _2374 = cbLight._m0[_2352].z + _753;
        float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
        float _2379 = _2378 * _2372;
        float _2380 = _2378 * _2373;
        float _2381 = _2378 * _2374;
        float _2382 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_2352].xyz));
        float _4269 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2386 = dot(vec3(_672, _673, _674), vec3(_2379, _2380, _2381));
        float _4280 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2389 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2390 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2379, _2380, _2381));
        float _4291 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2394 = _2371 * _2371;
        float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
        float _2407 = (exp2(log2(1.0 - (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2408 = 1.0 - _2371;
        float _2418 = (0.5 / (((_2044 * ((_2385 * _2408) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2044 * _2408) + _2371) * _2385))) * _2385;
        float _4302 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2420 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
        float _2421 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
        _2341 = (((_2407 * cbLight._m0[_2356].x) * _2420) * _2421) + _2231;
        _2343 = (((_2407 * cbLight._m0[_2356].y) * _2420) * _2421) + _2233;
        _2345 = (((_2407 * cbLight._m0[_2356].z) * _2420) * _2421) + _2235;
    }
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    if (_1874.y == 0u)
    {
        float _2496 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2497 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2496;
        float _2498 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2496;
        float _2499 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2496;
        uvec4 _2511 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2512 = _2511.x;
        uint _2523 = uint((float(_2511.y) * floor(float(uint(cbSceneParam._m0[85u].y * _760) / _2512))) + floor(float(uint(cbSceneParam._m0[85u].x * _759) / _2512)));
        float _2533 = (log2(_2499 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2534 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        uint _2537 = uint(isnan(14.0) ? _2534 : (isnan(_2534) ? 14.0 : min(_2534, 14.0)));
        uvec4 _2542 = texelFetch(g_lightClusterGridBuffer, int(((_2537 << 2u) + (_2523 << 6u)) >> 2u));
        uint _2543 = _2542.x;
        uint _2544 = _2511.z;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        if (((((1u << ((_2544 >> 4u) & 15u)) + 4294967295u) & _2543) == 0u) || ((_2544 & 240u) == 0u))
        {
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
            _2654 = 0.0;
        }
        else
        {
            float _2645;
            float _2647;
            float _2649;
            float _2651;
            float _2653;
            float _2655;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            uint _2795 = 0u;
            uint _2804;
            bool _2805;
            for (;;)
            {
                _2804 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2795 << 2u)) >> 2u)).x;
                _2805 = _2804 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2805)
                {
                    frontier_phi_61_pred = _2789;
                    frontier_phi_61_pred_1 = _2794;
                    frontier_phi_61_pred_2 = _2793;
                    frontier_phi_61_pred_3 = _2792;
                    frontier_phi_61_pred_4 = _2791;
                    frontier_phi_61_pred_5 = _2790;
                }
                else
                {
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    uint _2919;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2792;
                    _2917 = _2793;
                    _2918 = _2794;
                    _2919 = _2804;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    for (;;)
                    {
                        uint _2923 = uint(findLSB(_2919)) + (_2795 << 5u);
                        uint _2920 = (_2919 + 4294967295u) & _2919;
                        uint _2925 = _2923 * 48u;
                        vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 3u)).x));
                        uint _2945 = (_2923 * 48u) + 4u;
                        vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 3u)).x));
                        uint _2964 = (_2923 * 48u) + 8u;
                        vec3 _2975 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x));
                        float _2979 = _2939.x - _2497;
                        float _2980 = _2939.y - _2498;
                        float _2981 = _2939.z - _2499;
                        float _2982 = dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981));
                        float _2985 = inversesqrt(_2982);
                        float _2986 = _2985 * _2979;
                        float _2987 = _2985 * _2980;
                        float _2988 = _2985 * _2981;
                        float _2989 = dot(vec3(_778, _781, _784), vec3(_2986, _2987, _2988));
                        float _2994 = 1.0 - (_2982 * _2939.w);
                        float _4328 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2995 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _2996 = sqrt(_2982) * _2958.w;
                        float _2999 = 1.39999997615814208984375 / (_2996 + 1.39999997615814208984375);
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2989) + _3000;
                        float _3006 = _2996 * _2996;
                        float _3010 = ((isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0))) * _2995) / ((_3006 * 0.699999988079071044921875) + 1.0);
                        float _3014 = (-0.0) - _2497;
                        float _3015 = (-0.0) - _2498;
                        float _3016 = (-0.0) - _2499;
                        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                        float _3021 = _3020 * _3014;
                        float _3022 = _3020 * _3015;
                        float _3023 = _3020 * _3016;
                        float _3031 = exp2(log2(1.0 / ((_3006 * 3.5) + 5.0)) * 0.25);
                        float _3032 = 1.0 - _838;
                        float _3039 = sqrt(1.0 - ((1.0 - (_3032 * _3032)) * (1.0 - (_3031 * _3031))));
                        float _3040 = _3039 * _3039;
                        float _3041 = _3040 * _3040;
                        float _3042 = _3021 + _2986;
                        float _3043 = _3022 + _2987;
                        float _3044 = _3023 + _2988;
                        float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                        float _3052 = dot(vec3(_778, _781, _784), vec3(_3021, _3022, _3023));
                        float _4344 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3055 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3056 = dot(vec3(_778, _781, _784), vec3(_3048 * _3042, _3048 * _3043, _3048 * _3044));
                        float _4355 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3059 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _3063 = ((_3059 * _3059) * (_3041 + (-1.0))) + 1.0;
                        float _3064 = _2999 * _3040;
                        float _3065 = _3064 * _3064;
                        float _3068 = ((1.0 - _3065) * _2989) + _3065;
                        float _4366 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3069 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _3070 = 1.0 - _3040;
                        float _3080 = (0.5 / (((_3069 * ((_3055 * _3070) + _3040)) + 9.9999999392252902907785028219223e-09) + (((_3069 * _3070) + _3040) * _3055))) * _3069;
                        float _4377 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3091 = (((_3041 * 3.1415927410125732421875) * (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) / ((_3063 * _3063) * ((_3006 * 2.1991131305694580078125) + 3.141590118408203125))) * _2995;
                        _2848 = (_3010 * _2958.x) + _2916;
                        _2849 = (_3010 * _2958.y) + _2917;
                        _2850 = (_3010 * _2958.z) + _2918;
                        _2845 = (_3091 * _2975.x) + _2913;
                        _2846 = (_3091 * _2975.y) + _2914;
                        _2847 = (_3091 * _2975.z) + _2915;
                        if (_2920 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2848;
                            _2917 = _2849;
                            _2918 = _2850;
                            _2919 = _2920;
                        }
                    }
                    frontier_phi_61_pred = _2845;
                    frontier_phi_61_pred_1 = _2850;
                    frontier_phi_61_pred_2 = _2849;
                    frontier_phi_61_pred_3 = _2848;
                    frontier_phi_61_pred_4 = _2847;
                    frontier_phi_61_pred_5 = _2846;
                }
                _2645 = frontier_phi_61_pred;
                _2655 = frontier_phi_61_pred_1;
                _2653 = frontier_phi_61_pred_2;
                _2651 = frontier_phi_61_pred_3;
                _2649 = frontier_phi_61_pred_4;
                _2647 = frontier_phi_61_pred_5;
                uint _2796 = _2795 + 1u;
                if (_2796 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2789 = _2645;
                    _2790 = _2647;
                    _2791 = _2649;
                    _2792 = _2651;
                    _2793 = _2653;
                    _2794 = _2655;
                    _2795 = _2796;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
            _2654 = _2655;
        }
        uvec4 _2658 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2659 = _2658.z;
        uint _2661 = (_2659 >> 8u) & 15u;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        if (((4294967295u << _2661) & _2543) == 0u)
        {
            _2757 = _2644;
            _2759 = _2646;
            _2761 = _2648;
            _2763 = _2650;
            _2765 = _2652;
            _2767 = _2654;
        }
        else
        {
            float _2782 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
            float _2783 = _2782 * _2497;
            float _2784 = _2782 * _2498;
            float _2785 = _2782 * _2499;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2661 < ((_2659 >> 12u) & 15u))
            {
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2768;
                float _2896 = _2644;
                float _2897 = _2646;
                float _2898 = _2648;
                float _2899 = _2650;
                float _2900 = _2652;
                float _2901 = _2654;
                uint _2902 = _2661;
                uint _2911;
                bool _2912;
                for (;;)
                {
                    _2911 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2902 << 2u)) >> 2u)).x;
                    _2912 = _2911 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2912)
                    {
                        frontier_phi_67_pred = _2899;
                        frontier_phi_67_pred_1 = _2900;
                        frontier_phi_67_pred_2 = _2901;
                        frontier_phi_67_pred_3 = _2898;
                        frontier_phi_67_pred_4 = _2897;
                        frontier_phi_67_pred_5 = _2896;
                    }
                    else
                    {
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3109 = _2896;
                        float _3110 = _2897;
                        float _3111 = _2898;
                        float _3112 = _2899;
                        float _3113 = _2900;
                        float _3114 = _2901;
                        uint _3115 = _2911;
                        uint _3116;
                        vec4 _3141;
                        float _3142;
                        vec4 _3157;
                        vec3 _3169;
                        vec4 _3184;
                        vec4 _3200;
                        float _3246;
                        bool _3247;
                        for (;;)
                        {
                            uint _3126 = ((_2902 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3115));
                            _3116 = (_3115 + 4294967295u) & _3115;
                            uint _3128 = _3126 * 40u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            _3142 = _3141.w;
                            uint _3144 = (_3126 * 40u) + 4u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3159 = (_3126 * 40u) + 8u;
                            _3169 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x));
                            uint _3171 = (_3126 * 40u) + 16u;
                            _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3187 = (_3126 * 40u) + 20u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            uint _3202 = (_3126 * 40u) + 24u;
                            vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3221 = (_3126 * 40u) + 28u;
                            vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            _3246 = fma(_2499, _3234.z, fma(_2498, _3234.y, _3234.x * _2497)) + _3234.w;
                            _3247 = !((fma(_2499, _3215.z, fma(_2498, _3215.y, _3215.x * _2497)) + _3215.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3247)
                            {
                                float _3274 = _3141.x - _2497;
                                float _3275 = _3141.y - _2498;
                                float _3276 = _3141.z - _2499;
                                float _3277 = dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276));
                                float _3280 = inversesqrt(_3277);
                                float _3281 = _3280 * _3274;
                                float _3282 = _3280 * _3275;
                                float _3283 = _3280 * _3276;
                                float _3287 = 1.0 - (_3277 / (_3142 * _3142));
                                float _4388 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3292 = sqrt(_3277) * _3157.w;
                                float _3294 = 1.39999997615814208984375 / (_3292 + 1.39999997615814208984375);
                                float _3295 = _3294 * _3294;
                                float _3298 = ((1.0 - _3295) * dot(vec3(_3281, _3282, _3283), vec3(_778, _781, _784))) + _3295;
                                float _3301 = _3292 * _3292;
                                float _3305 = (fma(_2499, _3184.z, fma(_2498, _3184.y, _3184.x * _2497)) + _3184.w) / _3246;
                                float _3306 = (fma(_2499, _3200.z, fma(_2498, _3200.y, _3200.x * _2497)) + _3200.w) / _3246;
                                float _3310 = 1.0 - dot(vec2(_3305, _3306), vec2(_3305, _3306));
                                float _4404 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3312 = _3311 * (((isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0))) * _3288) / ((_3301 * 0.699999988079071044921875) + 1.0));
                                float _3324 = exp2(log2(1.0 / ((_3301 * 3.5) + 5.0)) * 0.25);
                                float _3325 = 1.0 - _838;
                                float _3332 = sqrt(1.0 - ((1.0 - (_3325 * _3325)) * (1.0 - (_3324 * _3324))));
                                float _3333 = _3332 * _3332;
                                float _3334 = _3333 * _3333;
                                float _3335 = _3281 - _2783;
                                float _3336 = _3282 - _2784;
                                float _3337 = _3283 - _2785;
                                float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                                float _3345 = dot(vec3(_778, _781, _784), vec3((-0.0) - _2783, (-0.0) - _2784, (-0.0) - _2785));
                                float _4415 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3348 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3349 = dot(vec3(_778, _781, _784), vec3(_3341 * _3335, _3341 * _3336, _3341 * _3337));
                                float _4426 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3352 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3356 = ((_3352 * _3352) * (_3334 + (-1.0))) + 1.0;
                                float _3357 = _3294 * _3333;
                                float _3358 = _3357 * _3357;
                                float _3364 = ((1.0 - _3358) * dot(vec3(_778, _781, _784), vec3(_3281, _3282, _3283))) + _3358;
                                float _4437 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3365 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3366 = 1.0 - _3333;
                                float _3376 = (0.5 / (((_3365 * ((_3348 * _3366) + _3333)) + 9.9999999392252902907785028219223e-09) + (((_3365 * _3366) + _3333) * _3348))) * _3365;
                                float _4448 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3386 = (_3311 * _3288) * (((_3334 * 3.1415927410125732421875) * (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) / ((_3356 * _3356) * ((_3301 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3386 * _3169.x;
                                frontier_phi_73_pred_1 = _3386 * _3169.y;
                                frontier_phi_73_pred_2 = _3312 * _3157.z;
                                frontier_phi_73_pred_3 = _3312 * _3157.y;
                                frontier_phi_73_pred_4 = _3312 * _3157.x;
                                frontier_phi_73_pred_5 = _3386 * _3169.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3390 = frontier_phi_73_pred;
                            _3391 = frontier_phi_73_pred_1;
                            _3395 = frontier_phi_73_pred_2;
                            _3394 = frontier_phi_73_pred_3;
                            _3393 = frontier_phi_73_pred_4;
                            _3392 = frontier_phi_73_pred_5;
                            _3099 = _3393 + _3112;
                            _3100 = _3394 + _3113;
                            _3101 = _3395 + _3114;
                            _3096 = _3390 + _3109;
                            _3097 = _3391 + _3110;
                            _3098 = _3392 + _3111;
                            if (_3116 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3116;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3099;
                        frontier_phi_67_pred_1 = _3100;
                        frontier_phi_67_pred_2 = _3101;
                        frontier_phi_67_pred_3 = _3098;
                        frontier_phi_67_pred_4 = _3097;
                        frontier_phi_67_pred_5 = _3096;
                    }
                    _2764 = frontier_phi_67_pred;
                    _2766 = frontier_phi_67_pred_1;
                    _2768 = frontier_phi_67_pred_2;
                    _2762 = frontier_phi_67_pred_3;
                    _2760 = frontier_phi_67_pred_4;
                    _2758 = frontier_phi_67_pred_5;
                    uint _2903 = _2902 + 1u;
                    if (_2903 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2896 = _2758;
                        _2897 = _2760;
                        _2898 = _2762;
                        _2899 = _2764;
                        _2900 = _2766;
                        _2901 = _2768;
                        _2902 = _2903;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2766;
                frontier_phi_55_56_ladder_1 = _2768;
                frontier_phi_55_56_ladder_2 = _2764;
                frontier_phi_55_56_ladder_3 = _2762;
                frontier_phi_55_56_ladder_4 = _2760;
                frontier_phi_55_56_ladder_5 = _2758;
            }
            else
            {
                frontier_phi_55_56_ladder = _2652;
                frontier_phi_55_56_ladder_1 = _2654;
                frontier_phi_55_56_ladder_2 = _2650;
                frontier_phi_55_56_ladder_3 = _2648;
                frontier_phi_55_56_ladder_4 = _2646;
                frontier_phi_55_56_ladder_5 = _2644;
            }
            _2757 = frontier_phi_55_56_ladder_5;
            _2759 = frontier_phi_55_56_ladder_4;
            _2761 = frontier_phi_55_56_ladder_3;
            _2763 = frontier_phi_55_56_ladder_2;
            _2765 = frontier_phi_55_56_ladder;
            _2767 = frontier_phi_55_56_ladder_1;
        }
        float _2772 = isnan(1.0) ? _822 : (isnan(_822) ? 1.0 : min(_822, 1.0));
        _2556 = (_2772 * _2763) + _2008;
        _2558 = (_2772 * _2765) + _2010;
        _2560 = (_2772 * _2767) + _2012;
        _2562 = ((_2757 * 0.039999999105930328369140625) * _2772) + _2341;
        _2564 = ((_2759 * 0.039999999105930328369140625) * _2772) + _2343;
        _2566 = ((_2761 * 0.039999999105930328369140625) * _2772) + _2345;
    }
    else
    {
        _2556 = _2008;
        _2558 = _2010;
        _2560 = _2012;
        _2562 = _2341;
        _2564 = _2343;
        _2566 = _2345;
    }
    float _4464 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _4475 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4486 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    uint _2586 = _245 + 6u;
    float _2594 = _759 / cbSceneParam._m0[86u].x;
    float _2595 = _760 / cbSceneParam._m0[86u].y;
    vec4 _2609 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2594, _2595, (log2((isnan(cbSceneParam._m0[77u].w) ? _693 : (isnan(_693) ? cbSceneParam._m0[77u].w : min(_693, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2611 = _2609.x;
    float _2612 = _2609.y;
    float _2613 = _2609.z;
    float _2614 = _2609.w;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    if (_693 > cbSceneParam._m0[78u].w)
    {
        float _2669 = isnan(_693) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _693 : min(cbSceneParam._m0[80u].w, _693));
        float _2670 = _2669 / _693;
        float _2681 = _2670 * _744;
        float _2682 = _745 * _2670;
        float _2683 = (-0.0) - _2682;
        float _2685 = _2670 * _746;
        float _2687 = (cbSceneParam._m0[77u].w * _2683) / _2669;
        float _2688 = _2687 + cbSceneParam._m0[79u].w;
        float _2689 = cbSceneParam._m0[79u].w - _2682;
        float _2695 = sqrt(((_2681 * _2681) + (_2682 * _2682)) + (_2685 * _2685));
        float _2698 = (1.0 - (cbSceneParam._m0[77u].w / _2669)) * _2695;
        float _2703 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2705 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2858;
        if (abs((_2683 - _2687) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2858 = ((((_2688 > 0.0) ? exp2(_2703 * _2688) : (2.0 - exp2(_2705 * _2688))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2698;
        }
        else
        {
            float _2818 = 1.0 / cbSceneParam._m0[80u].x;
            float _2819 = isnan(_2689) ? _2688 : (isnan(_2688) ? _2689 : max(_2688, _2689));
            float _2820 = isnan(_2689) ? _2688 : (isnan(_2688) ? _2689 : min(_2688, _2689));
            float _2829 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : min(_2819, 0.0));
            float _2830 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : min(_2820, 0.0));
            _2858 = ((abs(_2695 / _2683) * cbSceneParam._m0[80u].y) * ((((_2829 - _2830) * 2.0) - ((exp2(_2703 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0)))) - exp2(_2703 * (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))))) * _2818)) - ((exp2(_2705 * _2829) - exp2(_2705 * _2830)) * _2818))) + (_2698 * cbSceneParam._m0[80u].z);
        }
        vec4 _2860 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2594, _2595, 1.0), 0.0);
        float _2869 = exp2((_2858 * (-1.44269502162933349609375)) * (1.0 - _2860.w));
        float _2870 = log2(_2869);
        float _2886 = log2(_2614);
        _2707 = (exp2(_2886 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].x)) * _2860.x) / cbSceneParam._m0[78u].x)) + _2611;
        _2709 = (exp2(_2886 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].y)) * _2860.y) / cbSceneParam._m0[78u].y)) + _2612;
        _2711 = (exp2(_2886 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].z)) * _2860.z) / cbSceneParam._m0[78u].z)) + _2613;
        _2713 = _2869 * _2614;
    }
    else
    {
        _2707 = _2611;
        _2709 = _2612;
        _2711 = _2613;
        _2713 = _2614;
    }
    float _2725 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2726 = _2725 == 3.0;
    float _2727 = log2(_2713);
    float _2734 = exp2(_2727 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2556 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _822))) + ((_2562 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2735 = exp2(_2727 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2558 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _822))) + ((_2564 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2736 = exp2(_2727 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2560 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _822))) + ((_2566 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1627)) * cbPerFrame._m0[3u].x));
    float _2745 = (_2725 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2745 * (_2726 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2707)));
    SV_Target.y = _2745 * (_2726 ? _2735 : (_2735 + (cbSceneParam._m0[72u].w * _2709)));
    SV_Target.z = _2745 * (_2726 ? _2736 : (_2736 + (cbSceneParam._m0[72u].w * _2711)));
    SV_Target.w = cbInstanceData._m0[_2586].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2586].w;
}


