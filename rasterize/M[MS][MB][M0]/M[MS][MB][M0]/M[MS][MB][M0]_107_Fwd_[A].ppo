#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1321;
float _3680;
float _3681;
float _3682;
float _3683;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _368 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _368) * cbMtdParam._m0[24u].x) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3692 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _393 = (_386 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _394 = (_386 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _395 = (_386 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _413 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _440 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _457 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _459 = _457.x;
    float _460 = _457.y;
    float _461 = _457.z;
    float _470 = ((_440.z - _461) * _386) + _461;
    float _473 = ((((_440.x - _459) * _386) + _459) * 2.0) + (-1.0);
    float _474 = ((((_440.y - _460) * _386) + _460) * 2.0) + (-1.0);
    float _475 = dot(vec2(_473, _474), vec2(_473, _474));
    float _3703 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _480 = sqrt(1.0 - (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))));
    vec4 _500 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _512 = (_473 + ((((_413.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_500.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _513 = (_474 + ((((_413.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_500.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _516 = fma(_480, _239, fma(_513, _246, _512 * _232));
    float _519 = fma(_480, _240, fma(_513, _247, _512 * _233));
    float _522 = fma(_480, _241, fma(_513, _248, _512 * _234));
    float _526 = inversesqrt(dot(vec3(_516, _519, _522), vec3(_516, _519, _522)));
    vec4 _555 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _557 = _555.x;
    float _558 = 1.0 - _557;
    float _564 = (cbMtdParam._m0[19u].x + dot(vec4(_526 * _516, _526 * _519, _526 * _522, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_557 - _558) * cbMtdParam._m0[24u].z) + _558) * cbMtdParam._m0[21u].z);
    float _3714 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _567 = (-0.0) - cbMtdParam._m0[24u].y;
    float _569 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _570 = isnan(1.0) ? _569 : (isnan(_569) ? 1.0 : min(_569, 1.0));
    float _577 = _565 - ((_565 * TEXCOORD_8.x) * _570);
    float _578 = _565 - ((_565 * TEXCOORD_8.y) * _570);
    float _579 = _565 - ((_565 * TEXCOORD_8.z) * _570);
    float _586 = (_577 * (cbMtdParam._m0[17u].x - _393)) + _393;
    float _587 = (_578 * (cbMtdParam._m0[17u].y - _394)) + _394;
    float _588 = (_579 * (cbMtdParam._m0[17u].z - _395)) + _395;
    vec4 _600 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _602 = _600.x;
    float _603 = 1.0 - _602;
    float _631 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_602 - _603) * cbMtdParam._m0[24u].w) + _603) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3735 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _640 = ((((cbMtdParam._m0[10u].x - _586) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _632) + _586;
    float _641 = ((((cbMtdParam._m0[10u].y - _587) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _632) + _587;
    float _642 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _588)) * _632) + _588;
    float _647 = (((_413.z - _470) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _470;
    float _651 = ((_500.z - _647) * cbMtdParam._m0[19u].w) + _647;
    vec4 _665 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _672 = (_665.x * 2.0) + (-1.0);
    float _673 = (_665.y * 2.0) + (-1.0);
    float _674 = dot(vec2(_672, _673), vec2(_672, _673));
    float _3746 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _682 = ((_665.z - _651) * _577) + _651;
    float _685 = ((cbMtdParam._m0[23u].y - _682) * _632) + _682;
    vec4 _704 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _710 = (_704.x * 2.0) + (-1.0);
    float _711 = (_704.y * 2.0) + (-1.0);
    float _712 = dot(vec2(_710, _711), vec2(_710, _711));
    float _3757 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _727 = ((sqrt(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) - _480) * _579) + _480;
    float _730 = (((_672 - _512) * _577) + _512) + (cbMtdParam._m0[21u].x * _512);
    float _731 = (((_673 - _513) * _578) + _513) + (cbMtdParam._m0[21u].x * _513);
    float _742 = (((_710 - _730) + (_730 * cbMtdParam._m0[22u].z)) * _632) + _730;
    float _743 = (((_711 - _731) + (_731 * cbMtdParam._m0[22u].z)) * _632) + _731;
    float _744 = (_632 * (sqrt(1.0 - (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) - _727)) + _727;
    float _746 = cbMtdParam._m0[22u].x + _500.w;
    float _749 = fma(_744, _239, fma(_743, _246, _742 * _232));
    float _752 = fma(_744, _240, fma(_743, _247, _742 * _233));
    float _755 = fma(_744, _241, fma(_743, _248, _742 * _234));
    float _759 = inversesqrt(dot(vec3(_749, _752, _755), vec3(_749, _752, _755)));
    float _760 = _759 * _749;
    float _761 = _759 * _752;
    float _762 = _759 * _755;
    float _3768 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _763 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _3790 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3801 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3812 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _781 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _832 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _822);
    float _833 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _822);
    float _834 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _822);
    float _838 = inversesqrt(dot(vec3(_832, _833, _834), vec3(_832, _833, _834)));
    float _839 = _832 * _838;
    float _840 = _833 * _838;
    float _841 = _834 * _838;
    vec4 _846 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _848 = _846.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1002 = sqrt(((_832 * _832) + (_833 * _833)) + (_834 * _834));
        float _1008 = (cbMatDynParam._m0[5u].x * _1002) + cbMatDynParam._m0[5u].y;
        float _3823 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1013 = (cbMatDynParam._m0[5u].z * _1002) + cbMatDynParam._m0[5u].w;
        float _3834 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) - _1009)) + _1009) < ((_848 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _859 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _860 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _878 = fma(_762, cbSceneParam._m0[5u].z, fma(_761, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _760));
    float _881 = fma(_762, cbSceneParam._m0[6u].z, fma(_761, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _760));
    float _884 = fma(_762, cbSceneParam._m0[7u].z, fma(_761, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _760));
    uint _897 = _251 + 9u;
    uint _898 = _897 + uint(cbMatDynParam._m0[0u].w);
    float _904 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_898].x;
    float _905 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_898].y;
    float _906 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * cbInstanceData._m0[_898].z;
    float _3845 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _3856 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    vec4 _918 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _859, cbSceneParam._m0[86u].y * _860));
    float _922 = ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * TEXCOORD_5.w) * _918.x;
    float _923 = dot(vec3(_760, _761, _762), vec3(_839, _840, _841));
    float _926 = _923 * 2.0;
    float _930 = (_926 * _760) - _839;
    float _931 = (_926 * _761) - _840;
    float _932 = (_926 * _762) - _841;
    float _936 = abs(dot(vec3(_839, _840, _841), vec3(_760, _761, _762)));
    float _3878 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _938 = sqrt(_763);
    float _951 = exp2((_938 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_938 * 3.0));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1320;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1045 = fma(_991, cbModelParam._m0[26u].z, fma(_987, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _983));
        float _1049 = fma(_991, cbModelParam._m0[27u].z, fma(_987, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _983));
        float _1053 = fma(_991, cbModelParam._m0[28u].z, fma(_987, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _983));
        float _1078 = _983 + _760;
        float _1079 = _987 + _761;
        float _1080 = _991 + _762;
        float _1090 = fma(_1080, cbModelParam._m0[26u].z, fma(_1079, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1078)) - _1045;
        float _1091 = fma(_1080, cbModelParam._m0[27u].z, fma(_1079, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1078)) - _1049;
        float _1092 = fma(_1080, cbModelParam._m0[28u].z, fma(_1079, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1078)) - _1053;
        float _1096 = inversesqrt(dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092)));
        float _1109 = ((_1096 * _1090) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1045 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1096 * _1091) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1049 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1096 * _1092) / cbModelParam._m0[34u].z) + ((((((_1053 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        float _1148 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1114.x + (-0.5));
        float _1150 = _1148 * (_1114.y + (-0.5));
        float _1151 = _1148 * (_1114.z + (-0.5));
        float _1158 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1121.x + (-0.5));
        float _1160 = _1158 * (_1121.y + (-0.5));
        float _1161 = _1158 * (_1121.z + (-0.5));
        float _1168 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1128.x + (-0.5));
        float _1170 = _1168 * (_1128.y + (-0.5));
        float _1171 = _1168 * (_1128.z + (-0.5));
        float _1178 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1135.x + (-0.5));
        float _1180 = _1178 * (_1135.y + (-0.5));
        float _1181 = _1178 * (_1135.z + (-0.5));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = _1149 * 0.5;
        float _1186 = _1159 * 0.5;
        float _1187 = _1169 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1202 = (dot(vec3(_760, _761, _762), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1212 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3926 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1214 + 1.0))) + _1219) * _1182;
        float _1229 = _1150 * 0.5;
        float _1230 = _1160 * 0.5;
        float _1231 = _1170 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_760, _761, _762), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3959 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1256 + 1.0))) + _1261) * _1183;
        float _1271 = _1151 * 0.5;
        float _1272 = _1161 * 0.5;
        float _1273 = _1171 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_760, _761, _762), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3992 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1298 + 1.0))) + _1303) * _1184;
        _1320 = _1151;
        _1322 = _1150;
        _1323 = _1149;
        _1324 = _1161;
        _1325 = _1160;
        _1326 = _1159;
        _1327 = _1171;
        _1328 = _1170;
        _1329 = _1169;
        _1330 = _1184;
        _1331 = _1183;
        _1332 = _1182;
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1334 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1335 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
    }
    else
    {
        _1320 = _1321;
        _1322 = _1321;
        _1323 = _1321;
        _1324 = _1321;
        _1325 = _1321;
        _1326 = _1321;
        _1327 = _1321;
        _1328 = _1321;
        _1329 = _1321;
        _1330 = _1321;
        _1331 = _1321;
        _1332 = _1321;
        _1333 = 0.0;
        _1334 = 0.0;
        _1335 = 0.0;
    }
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1363 = fma(_991, cbModelParam._m0[30u].z, fma(_987, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _983));
        float _1367 = fma(_991, cbModelParam._m0[31u].z, fma(_987, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _983));
        float _1371 = fma(_991, cbModelParam._m0[32u].z, fma(_987, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _983));
        float _1394 = _983 + _760;
        float _1395 = _987 + _761;
        float _1396 = _991 + _762;
        float _1406 = fma(_1396, cbModelParam._m0[30u].z, fma(_1395, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1394)) - _1363;
        float _1407 = fma(_1396, cbModelParam._m0[31u].z, fma(_1395, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1394)) - _1367;
        float _1408 = fma(_1396, cbModelParam._m0[32u].z, fma(_1395, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1394)) - _1371;
        float _1412 = inversesqrt(dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408)));
        float _1425 = ((_1412 * _1406) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1363 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1426 = ((_1412 * _1407) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1367 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1427 = ((_1412 * _1408) / cbModelParam._m0[35u].z) + ((((((_1371 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        float _1462 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1429.x + (-0.5));
        float _1464 = _1462 * (_1429.y + (-0.5));
        float _1465 = _1462 * (_1429.z + (-0.5));
        float _1472 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1436.x + (-0.5));
        float _1474 = _1472 * (_1436.y + (-0.5));
        float _1475 = _1472 * (_1436.z + (-0.5));
        float _1482 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1443.x + (-0.5));
        float _1484 = _1482 * (_1443.y + (-0.5));
        float _1485 = _1482 * (_1443.z + (-0.5));
        float _1492 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1450.x + (-0.5));
        float _1494 = _1492 * (_1450.y + (-0.5));
        float _1495 = _1492 * (_1450.z + (-0.5));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = _1463 * 0.5;
        float _1500 = _1473 * 0.5;
        float _1501 = _1483 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_760, _761, _762), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4055 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1526 + 1.0))) + _1531) * _1496;
        float _1541 = _1464 * 0.5;
        float _1542 = _1474 * 0.5;
        float _1543 = _1484 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_760, _761, _762), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4088 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1568 + 1.0))) + _1573) * _1497;
        float _1583 = _1465 * 0.5;
        float _1584 = _1475 * 0.5;
        float _1585 = _1485 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_760, _761, _762), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4121 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1610 + 1.0))) + _1615) * _1498;
        _1632 = _1465;
        _1633 = _1464;
        _1634 = _1463;
        _1635 = _1475;
        _1636 = _1474;
        _1637 = _1473;
        _1638 = _1485;
        _1639 = _1484;
        _1640 = _1483;
        _1641 = _1498;
        _1642 = _1497;
        _1643 = _1496;
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
        _1645 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
    }
    else
    {
        _1632 = _1321;
        _1633 = _1321;
        _1634 = _1321;
        _1635 = _1321;
        _1636 = _1321;
        _1637 = _1321;
        _1638 = _1321;
        _1639 = _1321;
        _1640 = _1321;
        _1641 = _1321;
        _1642 = _1321;
        _1643 = _1321;
        _1644 = 0.0;
        _1645 = 0.0;
        _1646 = 0.0;
    }
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1333)) + _1333;
    float _1657 = (cbModelParam._m0[1u].x * (_1645 - _1334)) + _1334;
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1335)) + _1335;
    float _1679 = fma(_1658, cbSceneParam._m0[89u].z, fma(_1657, cbSceneParam._m0[89u].y, _1656 * cbSceneParam._m0[89u].x));
    float _1682 = fma(_1658, cbSceneParam._m0[90u].z, fma(_1657, cbSceneParam._m0[90u].y, _1656 * cbSceneParam._m0[90u].x));
    float _1685 = fma(_1658, cbSceneParam._m0[91u].z, fma(_1657, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1656));
    float _1700 = _930 * 0.5;
    float _1701 = _931 * 0.5;
    float _1702 = _932 * 0.5;
    float _1703 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1706 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1633, _1636, _1639, _1642));
    float _1709 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1743;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1716 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1320, _1324, _1327, _1330));
        float _1720 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1322, _1325, _1328, _1331));
        float _1724 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1323, _1326, _1329, _1332));
        float _1731 = dot(vec4(cbModelParam._m0[39u]), vec4(_1700, _1701, _1702, 1.0));
        _1743 = dot(vec3(isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1731) ? 0.0 : (isnan(0.0) ? _1731 : max(0.0, _1731))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1743 = 1.0;
    }
    float _1754;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1745 = dot(vec4(cbModelParam._m0[40u]), vec4(_1700, _1701, _1702, 1.0));
        _1754 = dot(vec3(isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1745) ? 0.0 : (isnan(0.0) ? _1745 : max(0.0, _1745))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1754 = 1.0;
    }
    float _1758 = (_1754 * cbModelParam._m0[1u].x) + (_1743 * (1.0 - cbModelParam._m0[1u].x));
    float _1768 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _763);
    float _1769 = isnan(_1768) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1768 : min(cbModelParam._m0[25u].z, _1768));
    float _1850;
    float _1852;
    float _1854;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1817 = fma(_991, cbModelParam._m0[13u].z, fma(_987, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _983)) + cbModelParam._m0[13u].w;
        float _1821 = fma(_991, cbModelParam._m0[14u].z, fma(_987, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _983)) + cbModelParam._m0[14u].w;
        float _1825 = fma(_991, cbModelParam._m0[15u].z, fma(_987, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _983)) + cbModelParam._m0[15u].w;
        float _1828 = fma(_932, cbModelParam._m0[13u].z, fma(_931, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _930));
        float _1831 = fma(_932, cbModelParam._m0[14u].z, fma(_931, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _930));
        float _1834 = fma(_932, cbModelParam._m0[15u].z, fma(_931, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _930));
        float _1862;
        if (_1828 > 0.0)
        {
            _1862 = abs((1.0 - _1817) / _1828);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1817 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1862 = frontier_phi_17_15_ladder;
        }
        float _2063;
        if (_1831 > 0.0)
        {
            _2063 = abs((1.0 - _1821) / _1831);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1821 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2063 = frontier_phi_26_22_ladder;
        }
        float _2306;
        if (_1834 > 0.0)
        {
            _2306 = abs((1.0 - _1825) / _1834);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1825 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2306 = frontier_phi_38_33_ladder;
        }
        float _2308 = isnan(_2063) ? _1862 : (isnan(_1862) ? _2063 : min(_1862, _2063));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1828) + _1817;
        float _2314 = (_2309 * _1831) + _1821;
        float _2315 = (_2309 * _1834) + _1825;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2318 = (-1.0) - _2316;
        float _2320 = _2316 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2315 > _2320) || ((_2315 < _2318) || ((_2314 > _2320) || ((_2314 < _2318) || ((_2313 < _2318) || (_2313 > _2320))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2439 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2315, cbModelParam._m0[9u].z, fma(_2314, cbModelParam._m0[9u].y, _2313 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2315, cbModelParam._m0[10u].z, fma(_2314, cbModelParam._m0[10u].y, _2313 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2315, cbModelParam._m0[11u].z, fma(_2314, cbModelParam._m0[11u].y, _2313 * cbModelParam._m0[11u].x))), _1769);
            frontier_phi_16_38_ladder = _2439.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2439.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2439.x * cbModelParam._m0[1u].y;
        }
        _1850 = frontier_phi_16_38_ladder_2;
        _1852 = frontier_phi_16_38_ladder_1;
        _1854 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1838 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_930, _931, _932), _1769);
        _1850 = _1838.x * cbModelParam._m0[1u].y;
        _1852 = _1838.y * cbModelParam._m0[1u].y;
        _1854 = _1838.z * cbModelParam._m0[1u].y;
    }
    float _1858 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _763);
    float _1859 = isnan(_1858) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1858 : min(cbModelParam._m0[25u].w, _1858));
    float _1949;
    float _1951;
    float _1953;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1913 = fma(_991, cbModelParam._m0[21u].z, fma(_987, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _983)) + cbModelParam._m0[21u].w;
        float _1917 = fma(_991, cbModelParam._m0[22u].z, fma(_987, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _983)) + cbModelParam._m0[22u].w;
        float _1921 = fma(_991, cbModelParam._m0[23u].z, fma(_987, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _983)) + cbModelParam._m0[23u].w;
        float _1924 = fma(_932, cbModelParam._m0[21u].z, fma(_931, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _930));
        float _1927 = fma(_932, cbModelParam._m0[22u].z, fma(_931, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _930));
        float _1930 = fma(_932, cbModelParam._m0[23u].z, fma(_931, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _930));
        float _2068;
        if (_1924 > 0.0)
        {
            _2068 = abs((1.0 - _1913) / _1924);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1913 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2068 = frontier_phi_28_24_ladder;
        }
        float _2333;
        if (_1927 > 0.0)
        {
            _2333 = abs((1.0 - _1917) / _1927);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1917 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2333 = frontier_phi_40_35_ladder;
        }
        float _2538;
        if (_1930 > 0.0)
        {
            _2538 = abs((1.0 - _1921) / _1930);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1921 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2538 = frontier_phi_49_46_ladder;
        }
        float _2540 = isnan(_2333) ? _2068 : (isnan(_2068) ? _2333 : min(_2068, _2333));
        float _2541 = isnan(_2538) ? _2540 : (isnan(_2540) ? _2538 : min(_2540, _2538));
        float _2545 = (_2541 * _1924) + _1913;
        float _2546 = (_2541 * _1927) + _1917;
        float _2547 = (_2541 * _1930) + _1921;
        float _2548 = _2541 * 9.9999997473787516355514526367188e-05;
        float _2549 = (-1.0) - _2548;
        float _2551 = _2548 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2547 > _2551) || ((_2547 < _2549) || ((_2546 > _2551) || ((_2546 < _2549) || ((_2545 < _2549) || (_2545 > _2551))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2746 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2547, cbModelParam._m0[17u].z, fma(_2546, cbModelParam._m0[17u].y, _2545 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2547, cbModelParam._m0[18u].z, fma(_2546, cbModelParam._m0[18u].y, _2545 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2547, cbModelParam._m0[19u].z, fma(_2546, cbModelParam._m0[19u].y, _2545 * cbModelParam._m0[19u].x))), _1859);
            frontier_phi_25_49_ladder = _2746.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2746.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2746.x * cbModelParam._m0[1u].z;
        }
        _1949 = frontier_phi_25_49_ladder_2;
        _1951 = frontier_phi_25_49_ladder_1;
        _1953 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1933 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_930, _931, _932), _1859);
        _1949 = _1933.x * cbModelParam._m0[1u].z;
        _1951 = _1933.y * cbModelParam._m0[1u].z;
        _1953 = _1933.z * cbModelParam._m0[1u].z;
    }
    float _1965 = ((((1.0 - _951) * ((_938 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_951 * _938)) * _922;
    float _1966 = _1965 * ((cbModelParam._m0[1u].w * (_1949 - _1850)) + _1850);
    float _1967 = _1965 * ((cbModelParam._m0[1u].w * (_1951 - _1852)) + _1852);
    float _1968 = _1965 * ((cbModelParam._m0[1u].w * (_1953 - _1854)) + _1854);
    float _1971 = fma(_1968, cbSceneParam._m0[89u].z, fma(_1967, cbSceneParam._m0[89u].y, _1966 * cbSceneParam._m0[89u].x));
    float _1974 = fma(_1968, cbSceneParam._m0[90u].z, fma(_1967, cbSceneParam._m0[90u].y, _1966 * cbSceneParam._m0[90u].x));
    float _1977 = fma(_1968, cbSceneParam._m0[91u].z, fma(_1967, cbSceneParam._m0[91u].y, _1966 * cbSceneParam._m0[91u].x));
    uvec4 _1987 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1989 = _1987.x * 14u;
    uint _1990 = _1989 + 13u;
    float _1997 = _922 + (-1.0);
    float _2002 = (cbLight._m0[_1990].x * _1997) + 1.0;
    float _2003 = (cbLight._m0[_1990].y * _1997) + 1.0;
    float _2004 = (cbLight._m0[_1990].z * _1997) + 1.0;
    float _2005 = (cbLight._m0[_1990].w * _1997) + 1.0;
    uint _2006 = _1989 + 5u;
    float _2012 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
    uint _2016 = _1989 + 4u;
    float _2022 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
    uint _2026 = _1989 | 1u;
    float _2037 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_760, _761, _762));
    float _2040 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_760, _761, _762));
    float _4257 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _4268 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2045 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * 0.3183098733425140380859375;
    float _2047 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * 0.3183098733425140380859375;
    float _2054 = ((cbLight._m0[_2006].x * _2012) * _2047) + ((cbLight._m0[_2016].x * _2022) * _2045);
    float _2055 = ((_2012 * cbLight._m0[_2006].y) * _2047) + ((_2022 * cbLight._m0[_2016].y) * _2045);
    float _2056 = ((_2012 * cbLight._m0[_2006].z) * _2047) + ((_2022 * cbLight._m0[_2016].z) * _2045);
    uvec4 _2060 = floatBitsToUint(cbLight._m0[_1989 + 12u]);
    bool _2062 = _2060.x == 0u;
    float _2073;
    float _2075;
    float _2077;
    if (_2062)
    {
        _2073 = _2054;
        _2075 = _2055;
        _2077 = _2056;
    }
    else
    {
        uint _2081 = _1989 + 6u;
        float _2097 = (dot(vec3(cbLight._m0[_1989 + 2u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2098 = _2097 * _2097;
        float _4279 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2099 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2100 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2073 = (((cbLight._m0[_2081].x * 0.3183098733425140380859375) * _2099) * _2100) + _2054;
        _2075 = (((cbLight._m0[_2081].y * 0.3183098733425140380859375) * _2099) * _2100) + _2055;
        _2077 = (((cbLight._m0[_2081].z * 0.3183098733425140380859375) * _2099) * _2100) + _2056;
    }
    bool _2080 = _2060.y == 0u;
    float _2118;
    float _2120;
    float _2122;
    if (_2080)
    {
        _2118 = _2073;
        _2120 = _2075;
        _2122 = _2077;
    }
    else
    {
        uint _2277 = _1989 + 7u;
        float _2293 = (dot(vec3(cbLight._m0[_1989 + 3u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2294 = _2293 * _2293;
        float _4295 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2295 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2296 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2118 = (((cbLight._m0[_2277].x * 0.3183098733425140380859375) * _2295) * _2296) + _2073;
        _2120 = (((cbLight._m0[_2277].y * 0.3183098733425140380859375) * _2295) * _2296) + _2075;
        _2122 = (((cbLight._m0[_2277].z * 0.3183098733425140380859375) * _2295) * _2296) + _2077;
    }
    uint _2125 = _1989 + 8u;
    float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _763) * 0.949999988079071044921875);
    float _2139 = _2138 * _2138;
    float _2140 = cbLight._m0[_1989].x + _839;
    float _2141 = cbLight._m0[_1989].y + _840;
    float _2142 = cbLight._m0[_1989].z + _841;
    float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
    float _2147 = _2146 * _2140;
    float _2148 = _2146 * _2141;
    float _2149 = _2146 * _2142;
    float _2150 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_1989].xyz));
    float _4311 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _4322 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _2154 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2155 = dot(vec3(_760, _761, _762), vec3(_2147, _2148, _2149));
    float _4333 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2158 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2159 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2147, _2148, _2149));
    float _4344 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2163 = _2139 * _2139;
    float _2167 = ((_2158 * _2158) * (_2163 + (-1.0))) + 1.0;
    float _2178 = (exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2179 = 1.0 - _2139;
    float _2190 = (0.5 / (((_2154 * ((_2153 * _2179) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2179) + _2139) * _2153))) * _2153;
    float _4355 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2192 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2163 / ((_2167 * _2167) * 3.141590118408203125));
    uint _2203 = _1989 + 9u;
    float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2026].w)) * _763) * 0.949999988079071044921875);
    float _2215 = _2214 * _2214;
    float _2216 = cbLight._m0[_2026].x + _839;
    float _2217 = cbLight._m0[_2026].y + _840;
    float _2218 = cbLight._m0[_2026].z + _841;
    float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
    float _2223 = _2222 * _2216;
    float _2224 = _2222 * _2217;
    float _2225 = _2222 * _2218;
    float _2226 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2026].xyz));
    float _4366 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2230 = dot(vec3(_760, _761, _762), vec3(_2223, _2224, _2225));
    float _4377 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2234 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_2223, _2224, _2225));
    float _4388 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2238 = _2215 * _2215;
    float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
    float _2251 = (exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2252 = 1.0 - _2215;
    float _2262 = (0.5 / (((_2154 * ((_2229 * _2252) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2252) + _2215) * _2229))) * _2229;
    float _4399 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2264 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
    float _2274 = (((_2251 * cbLight._m0[_2203].x) * _2264) * _2012) + (((_2178 * cbLight._m0[_2125].x) * _2192) * _2022);
    float _2275 = (((_2251 * cbLight._m0[_2203].y) * _2264) * _2012) + (((_2178 * cbLight._m0[_2125].y) * _2192) * _2022);
    float _2276 = (((_2251 * cbLight._m0[_2203].z) * _2264) * _2012) + (((_2178 * cbLight._m0[_2125].z) * _2192) * _2022);
    float _2338;
    float _2340;
    float _2342;
    if (_2062)
    {
        _2338 = _2274;
        _2340 = _2275;
        _2342 = _2276;
    }
    else
    {
        uint _2344 = _1989 + 2u;
        uint _2348 = _1989 + 10u;
        float _2362 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2344].w)) * _763) * 0.949999988079071044921875);
        float _2363 = _2362 * _2362;
        float _2364 = cbLight._m0[_2344].x + _839;
        float _2365 = cbLight._m0[_2344].y + _840;
        float _2366 = cbLight._m0[_2344].z + _841;
        float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
        float _2371 = _2370 * _2364;
        float _2372 = _2370 * _2365;
        float _2373 = _2370 * _2366;
        float _2374 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2344].xyz));
        float _4410 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2378 = dot(vec3(_760, _761, _762), vec3(_2371, _2372, _2373));
        float _4421 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2382 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_2371, _2372, _2373));
        float _4432 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2386 = _2363 * _2363;
        float _2390 = ((_2381 * _2381) * (_2386 + (-1.0))) + 1.0;
        float _2399 = (exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2400 = 1.0 - _2363;
        float _2410 = (0.5 / (((_2154 * ((_2377 * _2400) + _2363)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2400) + _2363) * _2377))) * _2377;
        float _4443 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2412 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2386 / ((_2390 * _2390) * 3.141590118408203125));
        float _2413 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2338 = (((_2399 * cbLight._m0[_2348].x) * _2412) * _2413) + _2274;
        _2340 = (((_2399 * cbLight._m0[_2348].y) * _2412) * _2413) + _2275;
        _2342 = (((_2399 * cbLight._m0[_2348].z) * _2412) * _2413) + _2276;
    }
    float _2448;
    float _2450;
    float _2452;
    if (_2080)
    {
        _2448 = _2338;
        _2450 = _2340;
        _2452 = _2342;
    }
    else
    {
        uint _2459 = _1989 + 3u;
        uint _2463 = _1989 + 11u;
        float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2459].w)) * _763) * 0.949999988079071044921875);
        float _2478 = _2477 * _2477;
        float _2479 = cbLight._m0[_2459].x + _839;
        float _2480 = cbLight._m0[_2459].y + _840;
        float _2481 = cbLight._m0[_2459].z + _841;
        float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
        float _2486 = _2485 * _2479;
        float _2487 = _2485 * _2480;
        float _2488 = _2485 * _2481;
        float _2489 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2459].xyz));
        float _4459 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2493 = dot(vec3(_760, _761, _762), vec3(_2486, _2487, _2488));
        float _4470 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2497 = dot(vec3(cbLight._m0[_2459].xyz), vec3(_2486, _2487, _2488));
        float _4481 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2501 = _2478 * _2478;
        float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
        float _2514 = (exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2515 = 1.0 - _2478;
        float _2525 = (0.5 / (((_2154 * ((_2492 * _2515) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2154 * _2515) + _2478) * _2492))) * _2492;
        float _4492 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2527 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
        float _2528 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2448 = (((_2514 * cbLight._m0[_2463].x) * _2527) * _2528) + _2338;
        _2450 = (((_2514 * cbLight._m0[_2463].y) * _2527) * _2528) + _2340;
        _2452 = (((_2514 * cbLight._m0[_2463].z) * _2527) * _2528) + _2342;
    }
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    if (_1987.y == 0u)
    {
        float _2603 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2604 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2603;
        float _2605 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2603;
        float _2606 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2603;
        uvec4 _2618 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2619 = _2618.x;
        uint _2630 = uint((float(_2618.y) * floor(float(uint(cbSceneParam._m0[85u].y * _860) / _2619))) + floor(float(uint(cbSceneParam._m0[85u].x * _859) / _2619)));
        float _2640 = (log2(_2606 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2641 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        uint _2644 = uint(isnan(14.0) ? _2641 : (isnan(_2641) ? 14.0 : min(_2641, 14.0)));
        uvec4 _2649 = texelFetch(g_lightClusterGridBuffer, int(((_2644 << 2u) + (_2630 << 6u)) >> 2u));
        uint _2650 = _2649.x;
        uint _2651 = _2618.z;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        if (((((1u << ((_2651 >> 4u) & 15u)) + 4294967295u) & _2650) == 0u) || ((_2651 & 240u) == 0u))
        {
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
        }
        else
        {
            float _2752;
            float _2754;
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            uint _2909 = 0u;
            uint _2918;
            bool _2919;
            for (;;)
            {
                _2918 = texelFetch(g_lightClassification, int((((_2644 << 5u) + (_2630 << 9u)) + (_2909 << 2u)) >> 2u)).x;
                _2919 = _2918 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2919)
                {
                    frontier_phi_66_pred = _2903;
                    frontier_phi_66_pred_1 = _2908;
                    frontier_phi_66_pred_2 = _2907;
                    frontier_phi_66_pred_3 = _2906;
                    frontier_phi_66_pred_4 = _2905;
                    frontier_phi_66_pred_5 = _2904;
                }
                else
                {
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    uint _3054;
                    _3048 = _2903;
                    _3049 = _2904;
                    _3050 = _2905;
                    _3051 = _2906;
                    _3052 = _2907;
                    _3053 = _2908;
                    _3054 = _2918;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    for (;;)
                    {
                        uint _3058 = uint(findLSB(_3054)) + (_2909 << 5u);
                        uint _3055 = (_3054 + 4294967295u) & _3054;
                        uint _3060 = _3058 * 48u;
                        vec4 _3074 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 3u)).x));
                        uint _3080 = (_3058 * 48u) + 4u;
                        vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 3u)).x));
                        uint _3099 = (_3058 * 48u) + 8u;
                        vec3 _3110 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x));
                        float _3114 = _3074.x - _2604;
                        float _3115 = _3074.y - _2605;
                        float _3116 = _3074.z - _2606;
                        float _3117 = dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116));
                        float _3120 = inversesqrt(_3117);
                        float _3121 = _3120 * _3114;
                        float _3122 = _3120 * _3115;
                        float _3123 = _3120 * _3116;
                        float _3124 = dot(vec3(_878, _881, _884), vec3(_3121, _3122, _3123));
                        float _3129 = 1.0 - (_3117 * _3074.w);
                        float _4518 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3130 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3131 = sqrt(_3117) * _3093.w;
                        float _3134 = 1.39999997615814208984375 / (_3131 + 1.39999997615814208984375);
                        float _3135 = _3134 * _3134;
                        float _3138 = ((1.0 - _3135) * _3124) + _3135;
                        float _3141 = _3131 * _3131;
                        float _3145 = ((isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0))) * _3130) / ((_3141 * 0.699999988079071044921875) + 1.0);
                        float _3149 = (-0.0) - _2604;
                        float _3150 = (-0.0) - _2605;
                        float _3151 = (-0.0) - _2606;
                        float _3155 = inversesqrt(dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151)));
                        float _3156 = _3155 * _3149;
                        float _3157 = _3155 * _3150;
                        float _3158 = _3155 * _3151;
                        float _3166 = exp2(log2(1.0 / ((_3141 * 3.5) + 5.0)) * 0.25);
                        float _3167 = 1.0 - _938;
                        float _3174 = sqrt(1.0 - ((1.0 - (_3167 * _3167)) * (1.0 - (_3166 * _3166))));
                        float _3175 = _3174 * _3174;
                        float _3176 = _3175 * _3175;
                        float _3177 = _3156 + _3121;
                        float _3178 = _3157 + _3122;
                        float _3179 = _3158 + _3123;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3187 = dot(vec3(_878, _881, _884), vec3(_3156, _3157, _3158));
                        float _4534 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3190 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3191 = dot(vec3(_878, _881, _884), vec3(_3183 * _3177, _3183 * _3178, _3183 * _3179));
                        float _4545 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                        float _3198 = ((_3194 * _3194) * (_3176 + (-1.0))) + 1.0;
                        float _3199 = _3134 * _3175;
                        float _3200 = _3199 * _3199;
                        float _3203 = ((1.0 - _3200) * _3124) + _3200;
                        float _4556 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3204 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3205 = 1.0 - _3175;
                        float _3215 = (0.5 / (((_3204 * ((_3190 * _3205) + _3175)) + 9.9999999392252902907785028219223e-09) + (((_3204 * _3205) + _3175) * _3190))) * _3204;
                        float _4567 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3226 = (((_3176 * 3.1415927410125732421875) * (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) / ((_3198 * _3198) * ((_3141 * 2.1991131305694580078125) + 3.141590118408203125))) * _3130;
                        _2978 = (_3145 * _3093.x) + _3051;
                        _2979 = (_3145 * _3093.y) + _3052;
                        _2980 = (_3145 * _3093.z) + _3053;
                        _2975 = (_3226 * _3110.x) + _3048;
                        _2976 = (_3226 * _3110.y) + _3049;
                        _2977 = (_3226 * _3110.z) + _3050;
                        if (_3055 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3048 = _2975;
                            _3049 = _2976;
                            _3050 = _2977;
                            _3051 = _2978;
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _3055;
                        }
                    }
                    frontier_phi_66_pred = _2975;
                    frontier_phi_66_pred_1 = _2980;
                    frontier_phi_66_pred_2 = _2979;
                    frontier_phi_66_pred_3 = _2978;
                    frontier_phi_66_pred_4 = _2977;
                    frontier_phi_66_pred_5 = _2976;
                }
                _2752 = frontier_phi_66_pred;
                _2762 = frontier_phi_66_pred_1;
                _2760 = frontier_phi_66_pred_2;
                _2758 = frontier_phi_66_pred_3;
                _2756 = frontier_phi_66_pred_4;
                _2754 = frontier_phi_66_pred_5;
                uint _2910 = _2909 + 1u;
                if (_2910 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2903 = _2752;
                    _2904 = _2754;
                    _2905 = _2756;
                    _2906 = _2758;
                    _2907 = _2760;
                    _2908 = _2762;
                    _2909 = _2910;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
        }
        uvec4 _2765 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2766 = _2765.z;
        uint _2768 = (_2766 >> 8u) & 15u;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        if (((4294967295u << _2768) & _2650) == 0u)
        {
            _2871 = _2751;
            _2873 = _2753;
            _2875 = _2755;
            _2877 = _2757;
            _2879 = _2759;
            _2881 = _2761;
        }
        else
        {
            float _2896 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
            float _2897 = _2896 * _2604;
            float _2898 = _2896 * _2605;
            float _2899 = _2896 * _2606;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2768 < ((_2766 >> 12u) & 15u))
            {
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _3031 = _2751;
                float _3032 = _2753;
                float _3033 = _2755;
                float _3034 = _2757;
                float _3035 = _2759;
                float _3036 = _2761;
                uint _3037 = _2768;
                uint _3046;
                bool _3047;
                for (;;)
                {
                    _3046 = texelFetch(g_lightClassification, int((((_2644 << 5u) + (_2630 << 9u)) + (_3037 << 2u)) >> 2u)).x;
                    _3047 = _3046 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3047)
                    {
                        frontier_phi_77_pred = _3036;
                        frontier_phi_77_pred_1 = _3035;
                        frontier_phi_77_pred_2 = _3034;
                        frontier_phi_77_pred_3 = _3033;
                        frontier_phi_77_pred_4 = _3032;
                        frontier_phi_77_pred_5 = _3031;
                    }
                    else
                    {
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3253 = _3031;
                        float _3254 = _3032;
                        float _3255 = _3033;
                        float _3256 = _3034;
                        float _3257 = _3035;
                        float _3258 = _3036;
                        uint _3259 = _3046;
                        uint _3260;
                        vec4 _3285;
                        float _3286;
                        vec4 _3301;
                        vec3 _3313;
                        vec4 _3328;
                        vec4 _3343;
                        float _3389;
                        bool _3390;
                        for (;;)
                        {
                            uint _3270 = ((_3037 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3259));
                            _3260 = (_3259 + 4294967295u) & _3259;
                            uint _3272 = _3270 * 40u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            _3286 = _3285.w;
                            uint _3288 = (_3270 * 40u) + 4u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3270 * 40u) + 8u;
                            _3313 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x));
                            uint _3315 = (_3270 * 40u) + 16u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3330 = (_3270 * 40u) + 20u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3345 = (_3270 * 40u) + 24u;
                            vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3364 = (_3270 * 40u) + 28u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            _3389 = fma(_2606, _3377.z, fma(_2605, _3377.y, _3377.x * _2604)) + _3377.w;
                            _3390 = !((fma(_2606, _3358.z, fma(_2605, _3358.y, _3358.x * _2604)) + _3358.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3390)
                            {
                                float _3417 = _3285.x - _2604;
                                float _3418 = _3285.y - _2605;
                                float _3419 = _3285.z - _2606;
                                float _3420 = dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419));
                                float _3423 = inversesqrt(_3420);
                                float _3424 = _3423 * _3417;
                                float _3425 = _3423 * _3418;
                                float _3426 = _3423 * _3419;
                                float _3430 = 1.0 - (_3420 / (_3286 * _3286));
                                float _4578 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3435 = sqrt(_3420) * _3301.w;
                                float _3437 = 1.39999997615814208984375 / (_3435 + 1.39999997615814208984375);
                                float _3438 = _3437 * _3437;
                                float _3441 = ((1.0 - _3438) * dot(vec3(_3424, _3425, _3426), vec3(_878, _881, _884))) + _3438;
                                float _3444 = _3435 * _3435;
                                float _3448 = (fma(_2606, _3328.z, fma(_2605, _3328.y, _3328.x * _2604)) + _3328.w) / _3389;
                                float _3449 = (fma(_2606, _3343.z, fma(_2605, _3343.y, _3343.x * _2604)) + _3343.w) / _3389;
                                float _3453 = 1.0 - dot(vec2(_3448, _3449), vec2(_3448, _3449));
                                float _4594 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3455 = _3454 * (((isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0))) * _3431) / ((_3444 * 0.699999988079071044921875) + 1.0));
                                float _3467 = exp2(log2(1.0 / ((_3444 * 3.5) + 5.0)) * 0.25);
                                float _3468 = 1.0 - _938;
                                float _3475 = sqrt(1.0 - ((1.0 - (_3468 * _3468)) * (1.0 - (_3467 * _3467))));
                                float _3476 = _3475 * _3475;
                                float _3477 = _3476 * _3476;
                                float _3478 = _3424 - _2897;
                                float _3479 = _3425 - _2898;
                                float _3480 = _3426 - _2899;
                                float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                                float _3488 = dot(vec3(_878, _881, _884), vec3((-0.0) - _2897, (-0.0) - _2898, (-0.0) - _2899));
                                float _4605 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3491 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3492 = dot(vec3(_878, _881, _884), vec3(_3484 * _3478, _3484 * _3479, _3484 * _3480));
                                float _4616 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3495 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3499 = ((_3495 * _3495) * (_3477 + (-1.0))) + 1.0;
                                float _3500 = _3437 * _3476;
                                float _3501 = _3500 * _3500;
                                float _3507 = ((1.0 - _3501) * dot(vec3(_878, _881, _884), vec3(_3424, _3425, _3426))) + _3501;
                                float _4627 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3509 = 1.0 - _3476;
                                float _3519 = (0.5 / (((_3508 * ((_3491 * _3509) + _3476)) + 9.9999999392252902907785028219223e-09) + (((_3508 * _3509) + _3476) * _3491))) * _3508;
                                float _4638 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3529 = (_3454 * _3431) * (((_3477 * 3.1415927410125732421875) * (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) / ((_3499 * _3499) * ((_3444 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3455 * _3301.y;
                                frontier_phi_83_pred_1 = _3455 * _3301.x;
                                frontier_phi_83_pred_2 = _3529 * _3313.z;
                                frontier_phi_83_pred_3 = _3529 * _3313.y;
                                frontier_phi_83_pred_4 = _3529 * _3313.x;
                                frontier_phi_83_pred_5 = _3455 * _3301.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3537 = frontier_phi_83_pred;
                            _3536 = frontier_phi_83_pred_1;
                            _3535 = frontier_phi_83_pred_2;
                            _3534 = frontier_phi_83_pred_3;
                            _3533 = frontier_phi_83_pred_4;
                            _3538 = frontier_phi_83_pred_5;
                            _3243 = _3536 + _3256;
                            _3244 = _3537 + _3257;
                            _3245 = _3538 + _3258;
                            _3240 = _3533 + _3253;
                            _3241 = _3534 + _3254;
                            _3242 = _3535 + _3255;
                            if (_3260 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3260;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3245;
                        frontier_phi_77_pred_1 = _3244;
                        frontier_phi_77_pred_2 = _3243;
                        frontier_phi_77_pred_3 = _3242;
                        frontier_phi_77_pred_4 = _3241;
                        frontier_phi_77_pred_5 = _3240;
                    }
                    _2882 = frontier_phi_77_pred;
                    _2880 = frontier_phi_77_pred_1;
                    _2878 = frontier_phi_77_pred_2;
                    _2876 = frontier_phi_77_pred_3;
                    _2874 = frontier_phi_77_pred_4;
                    _2872 = frontier_phi_77_pred_5;
                    uint _3038 = _3037 + 1u;
                    if (_3038 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3031 = _2872;
                        _3032 = _2874;
                        _3033 = _2876;
                        _3034 = _2878;
                        _3035 = _2880;
                        _3036 = _2882;
                        _3037 = _3038;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2876;
                frontier_phi_58_59_ladder_1 = _2882;
                frontier_phi_58_59_ladder_2 = _2880;
                frontier_phi_58_59_ladder_3 = _2878;
                frontier_phi_58_59_ladder_4 = _2874;
                frontier_phi_58_59_ladder_5 = _2872;
            }
            else
            {
                frontier_phi_58_59_ladder = _2755;
                frontier_phi_58_59_ladder_1 = _2761;
                frontier_phi_58_59_ladder_2 = _2759;
                frontier_phi_58_59_ladder_3 = _2757;
                frontier_phi_58_59_ladder_4 = _2753;
                frontier_phi_58_59_ladder_5 = _2751;
            }
            _2871 = frontier_phi_58_59_ladder_5;
            _2873 = frontier_phi_58_59_ladder_4;
            _2875 = frontier_phi_58_59_ladder;
            _2877 = frontier_phi_58_59_ladder_3;
            _2879 = frontier_phi_58_59_ladder_2;
            _2881 = frontier_phi_58_59_ladder_1;
        }
        float _2886 = isnan(1.0) ? _922 : (isnan(_922) ? 1.0 : min(_922, 1.0));
        _2663 = (_2886 * _2877) + _2118;
        _2665 = (_2886 * _2879) + _2120;
        _2667 = (_2886 * _2881) + _2122;
        _2669 = ((_2871 * 0.039999999105930328369140625) * _2886) + _2448;
        _2671 = ((_2873 * 0.039999999105930328369140625) * _2886) + _2450;
        _2673 = ((_2875 * 0.039999999105930328369140625) * _2886) + _2452;
    }
    else
    {
        _2663 = _2118;
        _2665 = _2120;
        _2667 = _2122;
        _2669 = _2448;
        _2671 = _2450;
        _2673 = _2452;
    }
    float _4654 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4665 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _4676 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _2690 = ((isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2663 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _922))) + ((_2669 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1758)) * cbPerFrame._m0[3u].x);
    float _2691 = ((isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2665 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _922))) + ((_2671 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1758)) * cbPerFrame._m0[3u].x);
    float _2692 = ((isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2667 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _922))) + ((_2673 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1758)) * cbPerFrame._m0[3u].x);
    uint _2693 = _251 + 6u;
    float _2701 = _859 / cbSceneParam._m0[86u].x;
    float _2702 = _860 / cbSceneParam._m0[86u].y;
    vec4 _2716 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2701, _2702, (log2((isnan(cbSceneParam._m0[77u].w) ? _781 : (isnan(_781) ? cbSceneParam._m0[77u].w : min(_781, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2718 = _2716.x;
    float _2719 = _2716.y;
    float _2720 = _2716.z;
    float _2721 = _2716.w;
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    if (_781 > cbSceneParam._m0[78u].w)
    {
        float _2776 = isnan(_781) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _781 : min(cbSceneParam._m0[80u].w, _781));
        float _2777 = _2776 / _781;
        float _2788 = _2777 * _832;
        float _2789 = _833 * _2777;
        float _2790 = (-0.0) - _2789;
        float _2791 = _2777 * _834;
        float _2793 = (cbSceneParam._m0[77u].w * _2790) / _2776;
        float _2794 = _2793 + cbSceneParam._m0[79u].w;
        float _2795 = cbSceneParam._m0[79u].w - _2789;
        float _2801 = sqrt(((_2788 * _2788) + (_2789 * _2789)) + (_2791 * _2791));
        float _2804 = (1.0 - (cbSceneParam._m0[77u].w / _2776)) * _2801;
        float _2809 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2811 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2988;
        if (abs((_2790 - _2793) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2988 = ((((_2794 > 0.0) ? exp2(_2809 * _2794) : (2.0 - exp2(_2811 * _2794))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2804;
        }
        else
        {
            float _2932 = 1.0 / cbSceneParam._m0[80u].x;
            float _2933 = isnan(_2795) ? _2794 : (isnan(_2794) ? _2795 : max(_2794, _2795));
            float _2934 = isnan(_2795) ? _2794 : (isnan(_2794) ? _2795 : min(_2794, _2795));
            float _2943 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : min(_2933, 0.0));
            float _2944 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : min(_2934, 0.0));
            _2988 = ((abs(_2801 / _2790) * cbSceneParam._m0[80u].y) * ((((_2943 - _2944) * 2.0) - ((exp2(_2809 * (isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0)))) - exp2(_2809 * (isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0))))) * _2932)) - ((exp2(_2811 * _2943) - exp2(_2811 * _2944)) * _2932))) + (_2804 * cbSceneParam._m0[80u].z);
        }
        vec4 _2990 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2701, _2702, 1.0), 0.0);
        float _2999 = exp2((_2988 * (-1.44269502162933349609375)) * (1.0 - _2990.w));
        float _3000 = log2(_2999);
        float _3016 = log2(_2721);
        _2813 = (exp2(_3016 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3000 * cbSceneParam._m0[78u].x)) * _2990.x) / cbSceneParam._m0[78u].x)) + _2718;
        _2815 = (exp2(_3016 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3000 * cbSceneParam._m0[78u].y)) * _2990.y) / cbSceneParam._m0[78u].y)) + _2719;
        _2817 = (exp2(_3016 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3000 * cbSceneParam._m0[78u].z)) * _2990.z) / cbSceneParam._m0[78u].z)) + _2720;
        _2819 = _2999 * _2721;
    }
    else
    {
        _2813 = _2718;
        _2815 = _2719;
        _2817 = _2720;
        _2819 = _2721;
    }
    bool _3026;
    vec4 _2829;
    vec4 _2851;
    float _2853;
    float _2857;
    float _2858;
    float _2859;
    float _2860;
    bool _2870;
    for (;;)
    {
        _2829 = cbMatDynParam._m0[0u];
        float _2831 = roundEven(_2829.y);
        bool _2832 = _2831 == 3.0;
        float _2833 = log2(_2819);
        float _2840 = exp2(_2833 * cbSceneParam._m0[78u].x) * _2690;
        float _2841 = exp2(_2833 * cbSceneParam._m0[78u].y) * _2691;
        float _2842 = exp2(_2833 * cbSceneParam._m0[78u].z) * _2692;
        float _2849 = _848 + (-0.5);
        _2851 = cbMtdParam._m0[1u];
        _2853 = _2851.y * _2849;
        float _2856 = (_2831 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2857 = _2856 * (_2832 ? _2840 : (_2840 + (cbSceneParam._m0[72u].w * _2813)));
        _2858 = _2856 * (_2832 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2815)));
        _2859 = _2856 * (_2832 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2817)));
        _2860 = _2849 * 0.999000012874603271484375;
        _2870 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2870)
        {
            if ((cbInstanceData._m0[_251 + 7u].x + _2860) < 0.5)
            {
                _3026 = true;
                break;
            }
        }
        uint _2967 = _897 + uint(_2829.w);
        if ((cbInstanceData._m0[_2967].w < 1.0) && ((cbInstanceData._m0[_2967].w + _2860) < 0.5))
        {
            _3026 = true;
            break;
        }
        if ((_2853 + 1.0) < _2851.x)
        {
            _3026 = true;
            break;
        }
        _3026 = false;
        break;
    }
    float _3231;
    if (_3026)
    {
        discard_state = true;
        _3231 = 0.0;
    }
    else
    {
        _3231 = cbInstanceData._m0[_2693].w;
    }
    SV_Target.x = _2857;
    SV_Target.y = _2858;
    SV_Target.z = _2859;
    SV_Target.w = _3231;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2693].w;
    discard_exit();
}


