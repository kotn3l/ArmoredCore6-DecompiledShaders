#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1376;
float _4017;
float _4018;
float _4019;
float _4020;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4029 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4040 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4051 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _414 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_404 - _414) * cbMtdParam._m0[24u].x) + _414) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4062 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _439 = (_432 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _440 = (_432 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _441 = (_432 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _445 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _439;
    float _448 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _440;
    float _451 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _441;
    float _458 = ((_439 - _445) * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) + _445;
    float _459 = ((_440 - _448) * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) + _448;
    float _460 = ((_441 - _451) * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) + _451;
    vec4 _479 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _302) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _303) + cbTextureTilingScale._m0[14u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _541 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _543 = _541.x;
    float _544 = _541.y;
    float _545 = _541.z;
    float _554 = ((_524.z - _545) * _432) + _545;
    float _557 = ((((_524.x - _543) * _432) + _543) * 2.0) + (-1.0);
    float _558 = ((((_524.y - _544) * _432) + _544) * 2.0) + (-1.0);
    float _559 = dot(vec2(_557, _558), vec2(_557, _558));
    float _4073 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _564 = sqrt(1.0 - (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))));
    vec4 _580 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _605 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _607 = _605.x;
    float _608 = 1.0 - _607;
    float _614 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _617 = ((isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : min(_614, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _626 = (_617 - ((((((_607 - _608) * cbMtdParam._m0[24u].z) + _608) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _617))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4094 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _627 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _634 = (_627 * ((_479.x * cbMtdParam._m0[18u].x) - _458)) + _458;
    float _635 = (_627 * ((_479.y * cbMtdParam._m0[18u].y) - _459)) + _459;
    float _636 = (_627 * ((_479.z * cbMtdParam._m0[18u].z) - _460)) + _460;
    vec4 _648 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _650 = _648.x;
    float _651 = 1.0 - _650;
    float _676 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_650 - _651) * cbMtdParam._m0[24u].w) + _651) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4105 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _677 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _685 = ((((cbMtdParam._m0[10u].x - _634) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _677) + _634;
    float _686 = ((((cbMtdParam._m0[10u].y - _635) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _677) + _635;
    float _687 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _636)) * _677) + _636;
    float _692 = (((_499.z - _554) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _554;
    float _696 = ((_580.z - _692) * cbMtdParam._m0[19u].w) + _692;
    vec4 _710 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _717 = (_710.x * 2.0) + (-1.0);
    float _718 = (_710.y * 2.0) + (-1.0);
    float _719 = dot(vec2(_717, _718), vec2(_717, _718));
    float _4116 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _727 = (_627 * (_710.z - _696)) + _696;
    float _730 = ((cbMtdParam._m0[23u].y - _727) * _677) + _727;
    vec4 _749 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _755 = (_749.x * 2.0) + (-1.0);
    float _756 = (_749.y * 2.0) + (-1.0);
    float _757 = dot(vec2(_755, _756), vec2(_755, _756));
    float _4127 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _771 = (_557 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_499.x * 2.0) + (-1.0)))) + (((_580.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _772 = (_558 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_499.y * 2.0) + (-1.0)))) + (((_580.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _784 = (((_717 - _771) + (cbMtdParam._m0[21u].x * _771)) * _627) + _771;
    float _785 = (((_718 - _772) + (cbMtdParam._m0[21u].x * _772)) * _627) + _772;
    float _786 = (_627 * (sqrt(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) - _564)) + _564;
    float _797 = (((_755 - _784) + (_784 * cbMtdParam._m0[22u].z)) * _677) + _784;
    float _798 = (((_756 - _785) + (_785 * cbMtdParam._m0[22u].z)) * _677) + _785;
    float _799 = ((sqrt(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) - _786) * _677) + _786;
    float _801 = cbMtdParam._m0[22u].x + _580.w;
    float _804 = fma(_799, _251 * NORMAL.x, fma(_798, _258 * TANGENT.x, (_244 * _236) * _797));
    float _807 = fma(_799, _251 * NORMAL.y, fma(_798, _258 * TANGENT.y, (_244 * _237) * _797));
    float _810 = fma(_799, _251 * NORMAL.z, fma(_798, _258 * TANGENT.z, (_244 * _238) * _797));
    float _814 = inversesqrt(dot(vec3(_804, _807, _810), vec3(_804, _807, _810)));
    float _815 = _814 * _804;
    float _816 = _814 * _807;
    float _817 = _814 * _810;
    float _4138 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _818 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _4149 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _4160 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _4171 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _4182 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _836 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _887 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _877);
    float _888 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _877);
    float _889 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _877);
    float _893 = inversesqrt(dot(vec3(_887, _888, _889), vec3(_887, _888, _889)));
    float _894 = _887 * _893;
    float _895 = _888 * _893;
    float _896 = _889 * _893;
    vec4 _901 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _903 = _901.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1057 = sqrt(((_887 * _887) + (_888 * _888)) + (_889 * _889));
        float _1063 = (cbMatDynParam._m0[5u].x * _1057) + cbMatDynParam._m0[5u].y;
        float _4193 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1068 = (cbMatDynParam._m0[5u].z * _1057) + cbMatDynParam._m0[5u].w;
        float _4204 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) - _1064)) + _1064) < ((_903 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _914 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _915 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _933 = fma(_817, cbSceneParam._m0[5u].z, fma(_816, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _815));
    float _936 = fma(_817, cbSceneParam._m0[6u].z, fma(_816, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _815));
    float _939 = fma(_817, cbSceneParam._m0[7u].z, fma(_816, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _815));
    uint _952 = _283 + 9u;
    uint _953 = _952 + uint(cbMatDynParam._m0[0u].w);
    float _959 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * cbInstanceData._m0[_953].x;
    float _960 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * cbInstanceData._m0[_953].y;
    float _961 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) * cbInstanceData._m0[_953].z;
    float _4215 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _962 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _4226 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _4237 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _964 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    vec4 _973 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _914, cbSceneParam._m0[86u].y * _915));
    float _977 = ((isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * TEXCOORD_5.w) * _973.x;
    float _978 = dot(vec3(_815, _816, _817), vec3(_894, _895, _896));
    float _981 = _978 * 2.0;
    float _985 = (_981 * _815) - _894;
    float _986 = (_981 * _816) - _895;
    float _987 = (_981 * _817) - _896;
    float _991 = abs(dot(vec3(_894, _895, _896), vec3(_815, _816, _817)));
    float _4248 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _993 = sqrt(_818);
    float _1006 = exp2((_993 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_993 * 3.0));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1375;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1100 = fma(_1046, cbModelParam._m0[26u].z, fma(_1042, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1038));
        float _1104 = fma(_1046, cbModelParam._m0[27u].z, fma(_1042, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1038));
        float _1108 = fma(_1046, cbModelParam._m0[28u].z, fma(_1042, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1038));
        float _1133 = _1038 + _815;
        float _1134 = _1042 + _816;
        float _1135 = _1046 + _817;
        float _1145 = fma(_1135, cbModelParam._m0[26u].z, fma(_1134, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1133)) - _1100;
        float _1146 = fma(_1135, cbModelParam._m0[27u].z, fma(_1134, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1133)) - _1104;
        float _1147 = fma(_1135, cbModelParam._m0[28u].z, fma(_1134, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1133)) - _1108;
        float _1151 = inversesqrt(dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147)));
        float _1164 = ((_1151 * _1145) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1100 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1151 * _1146) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1104 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1151 * _1147) / cbModelParam._m0[34u].z) + ((((((_1108 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1164, _1165, _1166), 0.0);
        float _1203 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1169.x + (-0.5));
        float _1205 = _1203 * (_1169.y + (-0.5));
        float _1206 = _1203 * (_1169.z + (-0.5));
        float _1213 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1176.x + (-0.5));
        float _1215 = _1213 * (_1176.y + (-0.5));
        float _1216 = _1213 * (_1176.z + (-0.5));
        float _1223 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1183.x + (-0.5));
        float _1225 = _1223 * (_1183.y + (-0.5));
        float _1226 = _1223 * (_1183.z + (-0.5));
        float _1233 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1190.x + (-0.5));
        float _1235 = _1233 * (_1190.y + (-0.5));
        float _1236 = _1233 * (_1190.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1257 = (dot(vec3(_815, _816, _817), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1267 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _4296 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1269 + 1.0))) + _1274) * _1237;
        float _1284 = _1205 * 0.5;
        float _1285 = _1215 * 0.5;
        float _1286 = _1225 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_815, _816, _817), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4329 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1311 + 1.0))) + _1316) * _1238;
        float _1326 = _1206 * 0.5;
        float _1327 = _1216 * 0.5;
        float _1328 = _1226 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_815, _816, _817), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4362 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1353 + 1.0))) + _1358) * _1239;
        _1375 = _1206;
        _1377 = _1205;
        _1378 = _1204;
        _1379 = _1216;
        _1380 = _1215;
        _1381 = _1214;
        _1382 = _1226;
        _1383 = _1225;
        _1384 = _1224;
        _1385 = _1239;
        _1386 = _1238;
        _1387 = _1237;
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1376;
        _1377 = _1376;
        _1378 = _1376;
        _1379 = _1376;
        _1380 = _1376;
        _1381 = _1376;
        _1382 = _1376;
        _1383 = _1376;
        _1384 = _1376;
        _1385 = _1376;
        _1386 = _1376;
        _1387 = _1376;
        _1388 = 0.0;
        _1389 = 0.0;
        _1390 = 0.0;
    }
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1418 = fma(_1046, cbModelParam._m0[30u].z, fma(_1042, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1038));
        float _1422 = fma(_1046, cbModelParam._m0[31u].z, fma(_1042, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1038));
        float _1426 = fma(_1046, cbModelParam._m0[32u].z, fma(_1042, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1038));
        float _1449 = _1038 + _815;
        float _1450 = _1042 + _816;
        float _1451 = _1046 + _817;
        float _1461 = fma(_1451, cbModelParam._m0[30u].z, fma(_1450, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1449)) - _1418;
        float _1462 = fma(_1451, cbModelParam._m0[31u].z, fma(_1450, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1449)) - _1422;
        float _1463 = fma(_1451, cbModelParam._m0[32u].z, fma(_1450, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1449)) - _1426;
        float _1467 = inversesqrt(dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463)));
        float _1480 = ((_1467 * _1461) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1418 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1467 * _1462) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1422 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1467 * _1463) / cbModelParam._m0[35u].z) + ((((((_1426 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        float _1517 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1484.x + (-0.5));
        float _1519 = _1517 * (_1484.y + (-0.5));
        float _1520 = _1517 * (_1484.z + (-0.5));
        float _1527 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1491.x + (-0.5));
        float _1529 = _1527 * (_1491.y + (-0.5));
        float _1530 = _1527 * (_1491.z + (-0.5));
        float _1537 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1498.x + (-0.5));
        float _1539 = _1537 * (_1498.y + (-0.5));
        float _1540 = _1537 * (_1498.z + (-0.5));
        float _1547 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1505.x + (-0.5));
        float _1549 = _1547 * (_1505.y + (-0.5));
        float _1550 = _1547 * (_1505.z + (-0.5));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = _1518 * 0.5;
        float _1555 = _1528 * 0.5;
        float _1556 = _1538 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_815, _816, _817), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4403 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4414 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4425 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_1581 + 1.0))) + _1586) * _1551;
        float _1596 = _1519 * 0.5;
        float _1597 = _1529 * 0.5;
        float _1598 = _1539 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_815, _816, _817), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4436 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4447 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4458 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_1623 + 1.0))) + _1628) * _1552;
        float _1638 = _1520 * 0.5;
        float _1639 = _1530 * 0.5;
        float _1640 = _1540 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_815, _816, _817), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4469 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4480 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4491 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_1665 + 1.0))) + _1670) * _1553;
        _1687 = _1520;
        _1688 = _1519;
        _1689 = _1518;
        _1690 = _1530;
        _1691 = _1529;
        _1692 = _1528;
        _1693 = _1540;
        _1694 = _1539;
        _1695 = _1538;
        _1696 = _1553;
        _1697 = _1552;
        _1698 = _1551;
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
    }
    else
    {
        _1687 = _1376;
        _1688 = _1376;
        _1689 = _1376;
        _1690 = _1376;
        _1691 = _1376;
        _1692 = _1376;
        _1693 = _1376;
        _1694 = _1376;
        _1695 = _1376;
        _1696 = _1376;
        _1697 = _1376;
        _1698 = _1376;
        _1699 = 0.0;
        _1700 = 0.0;
        _1701 = 0.0;
    }
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1388)) + _1388;
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1389)) + _1389;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1390)) + _1390;
    float _1734 = fma(_1713, cbSceneParam._m0[89u].z, fma(_1712, cbSceneParam._m0[89u].y, _1711 * cbSceneParam._m0[89u].x));
    float _1737 = fma(_1713, cbSceneParam._m0[90u].z, fma(_1712, cbSceneParam._m0[90u].y, _1711 * cbSceneParam._m0[90u].x));
    float _1740 = fma(_1713, cbSceneParam._m0[91u].z, fma(_1712, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1711));
    float _1755 = _985 * 0.5;
    float _1756 = _986 * 0.5;
    float _1757 = _987 * 0.5;
    float _1758 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1761 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1764 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1798;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1771 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1375, _1379, _1382, _1385));
        float _1775 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1779 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1378, _1381, _1384, _1387));
        float _1786 = dot(vec4(cbModelParam._m0[39u]), vec4(_1755, _1756, _1757, 1.0));
        _1798 = dot(vec3(isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1798 = 1.0;
    }
    float _1809;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1800 = dot(vec4(cbModelParam._m0[40u]), vec4(_1755, _1756, _1757, 1.0));
        _1809 = dot(vec3(isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1800) ? 0.0 : (isnan(0.0) ? _1800 : max(0.0, _1800))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1809 = 1.0;
    }
    float _1813 = (_1809 * cbModelParam._m0[1u].x) + (_1798 * (1.0 - cbModelParam._m0[1u].x));
    float _1823 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _818);
    float _1824 = isnan(_1823) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1823 : min(cbModelParam._m0[25u].z, _1823));
    float _1904;
    float _1906;
    float _1908;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1871 = fma(_1046, cbModelParam._m0[13u].z, fma(_1042, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1038)) + cbModelParam._m0[13u].w;
        float _1875 = fma(_1046, cbModelParam._m0[14u].z, fma(_1042, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1038)) + cbModelParam._m0[14u].w;
        float _1879 = fma(_1046, cbModelParam._m0[15u].z, fma(_1042, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1038)) + cbModelParam._m0[15u].w;
        float _1882 = fma(_987, cbModelParam._m0[13u].z, fma(_986, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _985));
        float _1885 = fma(_987, cbModelParam._m0[14u].z, fma(_986, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _985));
        float _1888 = fma(_987, cbModelParam._m0[15u].z, fma(_986, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _985));
        float _1916;
        if (_1882 > 0.0)
        {
            _1916 = abs((1.0 - _1871) / _1882);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1871 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1916 = frontier_phi_17_15_ladder;
        }
        float _2085;
        if (_1885 > 0.0)
        {
            _2085 = abs((1.0 - _1875) / _1885);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1875 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2085 = frontier_phi_26_22_ladder;
        }
        float _2380;
        if (_1888 > 0.0)
        {
            _2380 = abs((1.0 - _1879) / _1888);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1879 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2380 = frontier_phi_38_33_ladder;
        }
        float _2382 = isnan(_2085) ? _1916 : (isnan(_1916) ? _2085 : min(_1916, _2085));
        float _2383 = isnan(_2380) ? _2382 : (isnan(_2382) ? _2380 : min(_2382, _2380));
        float _2387 = (_2383 * _1882) + _1871;
        float _2388 = (_2383 * _1885) + _1875;
        float _2389 = (_2383 * _1888) + _1879;
        float _2390 = _2383 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2390;
        float _2394 = _2390 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 > _2394) || ((_2388 < _2392) || ((_2387 < _2392) || (_2387 > _2394))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2534 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2389, cbModelParam._m0[9u].z, fma(_2388, cbModelParam._m0[9u].y, _2387 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2389, cbModelParam._m0[10u].z, fma(_2388, cbModelParam._m0[10u].y, _2387 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2389, cbModelParam._m0[11u].z, fma(_2388, cbModelParam._m0[11u].y, _2387 * cbModelParam._m0[11u].x))), _1824);
            frontier_phi_16_38_ladder = _2534.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2534.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2534.x * cbModelParam._m0[1u].y;
        }
        _1904 = frontier_phi_16_38_ladder_2;
        _1906 = frontier_phi_16_38_ladder_1;
        _1908 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1892 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_985, _986, _987), _1824);
        _1904 = _1892.x * cbModelParam._m0[1u].y;
        _1906 = _1892.y * cbModelParam._m0[1u].y;
        _1908 = _1892.z * cbModelParam._m0[1u].y;
    }
    float _1912 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _818);
    float _1913 = isnan(_1912) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1912 : min(cbModelParam._m0[25u].w, _1912));
    float _2002;
    float _2004;
    float _2006;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1966 = fma(_1046, cbModelParam._m0[21u].z, fma(_1042, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1038)) + cbModelParam._m0[21u].w;
        float _1970 = fma(_1046, cbModelParam._m0[22u].z, fma(_1042, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1038)) + cbModelParam._m0[22u].w;
        float _1974 = fma(_1046, cbModelParam._m0[23u].z, fma(_1042, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1038)) + cbModelParam._m0[23u].w;
        float _1977 = fma(_987, cbModelParam._m0[21u].z, fma(_986, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _985));
        float _1980 = fma(_987, cbModelParam._m0[22u].z, fma(_986, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _985));
        float _1983 = fma(_987, cbModelParam._m0[23u].z, fma(_986, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _985));
        float _2090;
        if (_1977 > 0.0)
        {
            _2090 = abs((1.0 - _1966) / _1977);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1966 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2090 = frontier_phi_28_24_ladder;
        }
        float _2407;
        if (_1980 > 0.0)
        {
            _2407 = abs((1.0 - _1970) / _1980);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1970 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2407 = frontier_phi_40_35_ladder;
        }
        float _2734;
        if (_1983 > 0.0)
        {
            _2734 = abs((1.0 - _1974) / _1983);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1974 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2734 = frontier_phi_50_47_ladder;
        }
        float _2736 = isnan(_2407) ? _2090 : (isnan(_2090) ? _2407 : min(_2090, _2407));
        float _2737 = isnan(_2734) ? _2736 : (isnan(_2736) ? _2734 : min(_2736, _2734));
        float _2741 = (_2737 * _1977) + _1966;
        float _2742 = (_2737 * _1980) + _1970;
        float _2743 = (_2737 * _1983) + _1974;
        float _2744 = _2737 * 9.9999997473787516355514526367188e-05;
        float _2745 = (-1.0) - _2744;
        float _2747 = _2744 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2743 > _2747) || ((_2743 < _2745) || ((_2742 > _2747) || ((_2742 < _2745) || ((_2741 < _2745) || (_2741 > _2747))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2861 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2743, cbModelParam._m0[17u].z, fma(_2742, cbModelParam._m0[17u].y, _2741 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2743, cbModelParam._m0[18u].z, fma(_2742, cbModelParam._m0[18u].y, _2741 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2743, cbModelParam._m0[19u].z, fma(_2742, cbModelParam._m0[19u].y, _2741 * cbModelParam._m0[19u].x))), _1913);
            frontier_phi_25_50_ladder = _2861.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2861.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2861.x * cbModelParam._m0[1u].z;
        }
        _2002 = frontier_phi_25_50_ladder_2;
        _2004 = frontier_phi_25_50_ladder_1;
        _2006 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1986 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_985, _986, _987), _1913);
        _2002 = _1986.x * cbModelParam._m0[1u].z;
        _2004 = _1986.y * cbModelParam._m0[1u].z;
        _2006 = _1986.z * cbModelParam._m0[1u].z;
    }
    float _2018 = ((((1.0 - _1006) * ((_993 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1006 * _993)) * _977;
    float _2019 = _2018 * ((cbModelParam._m0[1u].w * (_2002 - _1904)) + _1904);
    float _2020 = _2018 * ((cbModelParam._m0[1u].w * (_2004 - _1906)) + _1906);
    float _2021 = _2018 * ((cbModelParam._m0[1u].w * (_2006 - _1908)) + _1908);
    float _2024 = fma(_2021, cbSceneParam._m0[89u].z, fma(_2020, cbSceneParam._m0[89u].y, _2019 * cbSceneParam._m0[89u].x));
    float _2027 = fma(_2021, cbSceneParam._m0[90u].z, fma(_2020, cbSceneParam._m0[90u].y, _2019 * cbSceneParam._m0[90u].x));
    float _2030 = fma(_2021, cbSceneParam._m0[91u].z, fma(_2020, cbSceneParam._m0[91u].y, _2019 * cbSceneParam._m0[91u].x));
    float _2064 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2068 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2077 = _2064 / _2076;
    float _2078 = _2068 / _2076;
    float _2079 = _2072 / _2076;
    float _2226;
    float _2227;
    float _2228;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2106 = ((uint(_2079 > cbSceneParam._m0[59u].y) + uint(_2079 > cbSceneParam._m0[59u].x)) + uint(_2079 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2107 = _2106 + 43u;
        uint _2115 = _2106 + 44u;
        uint _2123 = _2106 + 45u;
        uint _2131 = _2106 + 46u;
        float _2142 = fma(_2076, cbSceneParam._m0[_2107].w, fma(_2072, cbSceneParam._m0[_2107].z, fma(_2068, cbSceneParam._m0[_2107].y, _2064 * cbSceneParam._m0[_2107].x)));
        float _2146 = fma(_2076, cbSceneParam._m0[_2115].w, fma(_2072, cbSceneParam._m0[_2115].z, fma(_2068, cbSceneParam._m0[_2115].y, _2064 * cbSceneParam._m0[_2115].x)));
        float _2154 = fma(_2076, cbSceneParam._m0[_2131].w, fma(_2072, cbSceneParam._m0[_2131].z, fma(_2068, cbSceneParam._m0[_2131].y, _2064 * cbSceneParam._m0[_2131].x)));
        float _2159 = cbSceneParam._m0[33u].z * _2154;
        float _2161 = cbSceneParam._m0[33u].w * _2154;
        float _2164 = fma(_2076, cbSceneParam._m0[_2123].w, fma(_2072, cbSceneParam._m0[_2123].z, fma(_2068, cbSceneParam._m0[_2123].y, _2064 * cbSceneParam._m0[_2123].x))) / _2154;
        float _2212 = (cbSceneParam._m0[33u].x - sqrt(((_2078 * _2078) + (_2077 * _2077)) + (_2079 * _2079))) * cbSceneParam._m0[33u].y;
        float _4617 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2219 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2159 + _2142) / _2154, (_2161 + _2146) / _2154), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2161 + _2142) / _2154, (_2146 - _2159) / _2154), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2142 - _2159) / _2154, (_2146 - _2161) / _2154), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2142 - _2161) / _2154, (_2159 + _2146) / _2154), _2164), 0.0)).x), vec4(0.25)));
        _2226 = 1.0 - (_2219 * cbSceneParam._m0[34u].x);
        _2227 = 1.0 - (_2219 * cbSceneParam._m0[34u].y);
        _2228 = 1.0 - (_2219 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2226 = 1.0;
        _2227 = 1.0;
        _2228 = 1.0;
    }
    float _2292;
    float _2294;
    float _2296;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2280 = fma(_2076, cbSceneParam._m0[63u].w, fma(_2072, cbSceneParam._m0[63u].z, fma(_2068, cbSceneParam._m0[63u].y, _2064 * cbSceneParam._m0[63u].x)));
        float _2281 = fma(_2076, cbSceneParam._m0[60u].w, fma(_2072, cbSceneParam._m0[60u].z, fma(_2068, cbSceneParam._m0[60u].y, _2064 * cbSceneParam._m0[60u].x))) / _2280;
        float _2282 = fma(_2076, cbSceneParam._m0[61u].w, fma(_2072, cbSceneParam._m0[61u].z, fma(_2068, cbSceneParam._m0[61u].y, _2064 * cbSceneParam._m0[61u].x))) / _2280;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2281 >= cbSceneParam._m0[64u].x) && (_2282 >= cbSceneParam._m0[64u].y)) && (_2281 <= cbSceneParam._m0[64u].z)) && (_2282 <= cbSceneParam._m0[64u].w))
        {
            float _2420 = fma(_2076, cbSceneParam._m0[62u].w, fma(_2072, cbSceneParam._m0[62u].z, fma(_2068, cbSceneParam._m0[62u].y, _2064 * cbSceneParam._m0[62u].x))) / _2280;
            float _2424 = isnan(cbSceneParam._m0[41u].w) ? _2420 : (isnan(_2420) ? cbSceneParam._m0[41u].w : max(_2420, cbSceneParam._m0[41u].w));
            float _2467 = (cbSceneParam._m0[33u].x - sqrt(((_2078 * _2078) + (_2077 * _2077)) + (_2079 * _2079))) * cbSceneParam._m0[33u].y;
            float _4633 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
            float _2474 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2281, cbSceneParam._m0[33u].w + _2282), _2424), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2281, _2282 - cbSceneParam._m0[33u].z), _2424), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2281 - cbSceneParam._m0[33u].z, _2282 - cbSceneParam._m0[33u].w), _2424), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2281 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2282), _2424), 0.0)).x), vec4(0.25)));
            float _2478 = 1.0 - (_2474 * cbSceneParam._m0[34u].x);
            float _2479 = 1.0 - (_2474 * cbSceneParam._m0[34u].y);
            float _2480 = 1.0 - (_2474 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2480) ? _2228 : (isnan(_2228) ? _2480 : min(_2228, _2480));
            frontier_phi_37_36_ladder_1 = isnan(_2479) ? _2227 : (isnan(_2227) ? _2479 : min(_2227, _2479));
            frontier_phi_37_36_ladder_2 = isnan(_2478) ? _2226 : (isnan(_2226) ? _2478 : min(_2226, _2478));
        }
        else
        {
            frontier_phi_37_36_ladder = _2228;
            frontier_phi_37_36_ladder_1 = _2227;
            frontier_phi_37_36_ladder_2 = _2226;
        }
        _2292 = frontier_phi_37_36_ladder_2;
        _2294 = frontier_phi_37_36_ladder_1;
        _2296 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2292 = _2226;
        _2294 = _2227;
        _2296 = _2228;
    }
    uvec4 _2301 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2303 = _2301.x * 14u;
    uint _2304 = _2303 + 13u;
    float _2311 = _977 + (-1.0);
    float _2316 = (cbLight._m0[_2304].x * _2311) + 1.0;
    float _2317 = (cbLight._m0[_2304].y * _2311) + 1.0;
    float _2318 = (cbLight._m0[_2304].z * _2311) + 1.0;
    float _2319 = (cbLight._m0[_2304].w * _2311) + 1.0;
    uint _2320 = _2303 + 5u;
    float _2326 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
    uint _2330 = _2303 + 4u;
    float _2339 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
    uint _2343 = _2303 | 1u;
    float _2354 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_815, _816, _817));
    float _2357 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_815, _816, _817));
    float _4669 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _4680 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2362 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * 0.3183098733425140380859375;
    float _2364 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * 0.3183098733425140380859375;
    float _2371 = ((cbLight._m0[_2320].x * _2326) * _2364) + (((cbLight._m0[_2330].x * _2292) * _2339) * _2362);
    float _2372 = ((_2326 * cbLight._m0[_2320].y) * _2364) + (((cbLight._m0[_2330].y * _2294) * _2339) * _2362);
    float _2373 = ((_2326 * cbLight._m0[_2320].z) * _2364) + (((cbLight._m0[_2330].z * _2296) * _2339) * _2362);
    uvec4 _2377 = floatBitsToUint(cbLight._m0[_2303 + 12u]);
    bool _2379 = _2377.x == 0u;
    float _2481;
    float _2483;
    float _2485;
    if (_2379)
    {
        _2481 = _2371;
        _2483 = _2372;
        _2485 = _2373;
    }
    else
    {
        uint _2489 = _2303 + 6u;
        float _2505 = (dot(vec3(cbLight._m0[_2303 + 2u].xyz), vec3(_815, _816, _817)) * 0.5) + 0.5;
        float _2506 = _2505 * _2505;
        float _4691 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2507 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2508 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2481 = (((cbLight._m0[_2489].x * 0.3183098733425140380859375) * _2507) * _2508) + _2371;
        _2483 = (((cbLight._m0[_2489].y * 0.3183098733425140380859375) * _2507) * _2508) + _2372;
        _2485 = (((cbLight._m0[_2489].z * 0.3183098733425140380859375) * _2507) * _2508) + _2373;
    }
    bool _2488 = _2377.y == 0u;
    float _2543;
    float _2545;
    float _2547;
    if (_2488)
    {
        _2543 = _2481;
        _2545 = _2483;
        _2547 = _2485;
    }
    else
    {
        uint _2705 = _2303 + 7u;
        float _2721 = (dot(vec3(cbLight._m0[_2303 + 3u].xyz), vec3(_815, _816, _817)) * 0.5) + 0.5;
        float _2722 = _2721 * _2721;
        float _4707 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2723 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
        float _2724 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2543 = (((cbLight._m0[_2705].x * 0.3183098733425140380859375) * _2723) * _2724) + _2481;
        _2545 = (((cbLight._m0[_2705].y * 0.3183098733425140380859375) * _2723) * _2724) + _2483;
        _2547 = (((cbLight._m0[_2705].z * 0.3183098733425140380859375) * _2723) * _2724) + _2485;
    }
    uint _2550 = _2303 + 8u;
    float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2303].w)) * _818) * 0.949999988079071044921875);
    float _2564 = _2563 * _2563;
    float _2565 = cbLight._m0[_2303].x + _894;
    float _2566 = cbLight._m0[_2303].y + _895;
    float _2567 = cbLight._m0[_2303].z + _896;
    float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
    float _2572 = _2571 * _2565;
    float _2573 = _2571 * _2566;
    float _2574 = _2571 * _2567;
    float _2575 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2303].xyz));
    float _4723 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _4734 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _2579 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _2580 = dot(vec3(_815, _816, _817), vec3(_2572, _2573, _2574));
    float _4745 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
    float _2584 = dot(vec3(cbLight._m0[_2303].xyz), vec3(_2572, _2573, _2574));
    float _4756 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2588 = _2564 * _2564;
    float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
    float _2603 = (exp2(log2(1.0 - (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2604 = 1.0 - _2564;
    float _2615 = (0.5 / (((_2579 * ((_2578 * _2604) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2604) + _2564) * _2578))) * _2578;
    float _4767 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2617 = (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
    uint _2631 = _2303 + 9u;
    float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2343].w)) * _818) * 0.949999988079071044921875);
    float _2643 = _2642 * _2642;
    float _2644 = cbLight._m0[_2343].x + _894;
    float _2645 = cbLight._m0[_2343].y + _895;
    float _2646 = cbLight._m0[_2343].z + _896;
    float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
    float _2651 = _2650 * _2644;
    float _2652 = _2650 * _2645;
    float _2653 = _2650 * _2646;
    float _2654 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2343].xyz));
    float _4778 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2657 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
    float _2658 = dot(vec3(_815, _816, _817), vec3(_2651, _2652, _2653));
    float _4789 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2661 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
    float _2662 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_2651, _2652, _2653));
    float _4800 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2666 = _2643 * _2643;
    float _2670 = ((_2661 * _2661) * (_2666 + (-1.0))) + 1.0;
    float _2679 = (exp2(log2(1.0 - (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2680 = 1.0 - _2643;
    float _2690 = (0.5 / (((_2579 * ((_2657 * _2680) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2680) + _2643) * _2657))) * _2657;
    float _4811 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2692 = (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2666 / ((_2670 * _2670) * 3.141590118408203125));
    float _2702 = (((_2679 * cbLight._m0[_2631].x) * _2692) * _2326) + ((((cbLight._m0[_2550].x * _2292) * _2603) * _2617) * _2339);
    float _2703 = (((_2679 * cbLight._m0[_2631].y) * _2692) * _2326) + ((((cbLight._m0[_2550].y * _2294) * _2603) * _2617) * _2339);
    float _2704 = (((_2679 * cbLight._m0[_2631].z) * _2692) * _2326) + ((((cbLight._m0[_2550].z * _2296) * _2603) * _2617) * _2339);
    float _2760;
    float _2762;
    float _2764;
    if (_2379)
    {
        _2760 = _2702;
        _2762 = _2703;
        _2764 = _2704;
    }
    else
    {
        uint _2766 = _2303 + 2u;
        uint _2770 = _2303 + 10u;
        float _2784 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2766].w)) * _818) * 0.949999988079071044921875);
        float _2785 = _2784 * _2784;
        float _2786 = cbLight._m0[_2766].x + _894;
        float _2787 = cbLight._m0[_2766].y + _895;
        float _2788 = cbLight._m0[_2766].z + _896;
        float _2792 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
        float _2793 = _2792 * _2786;
        float _2794 = _2792 * _2787;
        float _2795 = _2792 * _2788;
        float _2796 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2766].xyz));
        float _4822 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2799 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2800 = dot(vec3(_815, _816, _817), vec3(_2793, _2794, _2795));
        float _4833 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2803 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2804 = dot(vec3(cbLight._m0[_2766].xyz), vec3(_2793, _2794, _2795));
        float _4844 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2808 = _2785 * _2785;
        float _2812 = ((_2803 * _2803) * (_2808 + (-1.0))) + 1.0;
        float _2821 = (exp2(log2(1.0 - (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2822 = 1.0 - _2785;
        float _2832 = (0.5 / (((_2579 * ((_2799 * _2822) + _2785)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2822) + _2785) * _2799))) * _2799;
        float _4855 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2834 = (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * (_2808 / ((_2812 * _2812) * 3.141590118408203125));
        float _2835 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2760 = (((_2821 * cbLight._m0[_2770].x) * _2834) * _2835) + _2702;
        _2762 = (((_2821 * cbLight._m0[_2770].y) * _2834) * _2835) + _2703;
        _2764 = (((_2821 * cbLight._m0[_2770].z) * _2834) * _2835) + _2704;
    }
    float _2866;
    float _2868;
    float _2870;
    if (_2488)
    {
        _2866 = _2760;
        _2868 = _2762;
        _2870 = _2764;
    }
    else
    {
        uint _2877 = _2303 + 3u;
        uint _2881 = _2303 + 11u;
        float _2895 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2877].w)) * _818) * 0.949999988079071044921875);
        float _2896 = _2895 * _2895;
        float _2897 = cbLight._m0[_2877].x + _894;
        float _2898 = cbLight._m0[_2877].y + _895;
        float _2899 = cbLight._m0[_2877].z + _896;
        float _2903 = inversesqrt(dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899)));
        float _2904 = _2903 * _2897;
        float _2905 = _2903 * _2898;
        float _2906 = _2903 * _2899;
        float _2907 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2877].xyz));
        float _4871 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2910 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
        float _2911 = dot(vec3(_815, _816, _817), vec3(_2904, _2905, _2906));
        float _4882 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2914 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
        float _2915 = dot(vec3(cbLight._m0[_2877].xyz), vec3(_2904, _2905, _2906));
        float _4893 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2919 = _2896 * _2896;
        float _2923 = ((_2914 * _2914) * (_2919 + (-1.0))) + 1.0;
        float _2932 = (exp2(log2(1.0 - (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2933 = 1.0 - _2896;
        float _2943 = (0.5 / (((_2579 * ((_2910 * _2933) + _2896)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2933) + _2896) * _2910))) * _2910;
        float _4904 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        float _2945 = (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2919 / ((_2923 * _2923) * 3.141590118408203125));
        float _2946 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
        _2866 = (((_2932 * cbLight._m0[_2881].x) * _2945) * _2946) + _2760;
        _2868 = (((_2932 * cbLight._m0[_2881].y) * _2945) * _2946) + _2762;
        _2870 = (((_2932 * cbLight._m0[_2881].z) * _2945) * _2946) + _2764;
    }
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    if (_2301.y == 0u)
    {
        uvec4 _2967 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2968 = _2967.x;
        uint _2979 = uint((float(_2967.y) * floor(float(uint(cbSceneParam._m0[85u].y * _915) / _2968))) + floor(float(uint(cbSceneParam._m0[85u].x * _914) / _2968)));
        float _2989 = (log2(_2079 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2990 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        uint _2993 = uint(isnan(14.0) ? _2990 : (isnan(_2990) ? 14.0 : min(_2990, 14.0)));
        uvec4 _2998 = texelFetch(g_lightClusterGridBuffer, int(((_2993 << 2u) + (_2979 << 6u)) >> 2u));
        uint _2999 = _2998.x;
        uint _3000 = _2967.z;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        if (((((1u << ((_3000 >> 4u) & 15u)) + 4294967295u) & _2999) == 0u) || ((_3000 & 240u) == 0u))
        {
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
        }
        else
        {
            float _3080;
            float _3082;
            float _3084;
            float _3086;
            float _3088;
            float _3090;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            float _3236 = 0.0;
            float _3237 = 0.0;
            uint _3238 = 0u;
            uint _3247;
            bool _3248;
            for (;;)
            {
                _3247 = texelFetch(g_lightClassification, int((((_2993 << 5u) + (_2979 << 9u)) + (_3238 << 2u)) >> 2u)).x;
                _3248 = _3247 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3248)
                {
                    frontier_phi_71_pred = _3237;
                    frontier_phi_71_pred_1 = _3236;
                    frontier_phi_71_pred_2 = _3235;
                    frontier_phi_71_pred_3 = _3234;
                    frontier_phi_71_pred_4 = _3233;
                    frontier_phi_71_pred_5 = _3232;
                }
                else
                {
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    float _3381;
                    float _3382;
                    uint _3383;
                    _3377 = _3232;
                    _3378 = _3233;
                    _3379 = _3234;
                    _3380 = _3235;
                    _3381 = _3236;
                    _3382 = _3237;
                    _3383 = _3247;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    for (;;)
                    {
                        uint _3387 = uint(findLSB(_3383)) + (_3238 << 5u);
                        uint _3384 = (_3383 + 4294967295u) & _3383;
                        uint _3389 = _3387 * 48u;
                        vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3389)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 3u)).x));
                        uint _3409 = (_3387 * 48u) + 4u;
                        vec4 _3422 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3409)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 3u)).x));
                        uint _3428 = (_3387 * 48u) + 8u;
                        vec3 _3439 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3428)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 2u)).x));
                        float _3443 = _3403.x - _2077;
                        float _3444 = _3403.y - _2078;
                        float _3445 = _3403.z - _2079;
                        float _3446 = dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445));
                        float _3449 = inversesqrt(_3446);
                        float _3450 = _3449 * _3443;
                        float _3451 = _3449 * _3444;
                        float _3452 = _3449 * _3445;
                        float _3453 = dot(vec3(_933, _936, _939), vec3(_3450, _3451, _3452));
                        float _3458 = 1.0 - (_3446 * _3403.w);
                        float _4930 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3459 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3460 = sqrt(_3446) * _3422.w;
                        float _3463 = 1.39999997615814208984375 / (_3460 + 1.39999997615814208984375);
                        float _3464 = _3463 * _3463;
                        float _3467 = ((1.0 - _3464) * _3453) + _3464;
                        float _3470 = _3460 * _3460;
                        float _3474 = ((isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0))) * _3459) / ((_3470 * 0.699999988079071044921875) + 1.0);
                        float _3478 = (-0.0) - _2077;
                        float _3479 = (-0.0) - _2078;
                        float _3480 = (-0.0) - _2079;
                        float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                        float _3485 = _3484 * _3478;
                        float _3486 = _3484 * _3479;
                        float _3487 = _3484 * _3480;
                        float _3494 = exp2(log2(1.0 / ((_3470 * 3.5) + 5.0)) * 0.25);
                        float _3495 = 1.0 - _993;
                        float _3502 = sqrt(1.0 - ((1.0 - (_3495 * _3495)) * (1.0 - (_3494 * _3494))));
                        float _3503 = _3502 * _3502;
                        float _3504 = _3503 * _3503;
                        float _3505 = _3485 + _3450;
                        float _3506 = _3486 + _3451;
                        float _3507 = _3487 + _3452;
                        float _3511 = inversesqrt(dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507)));
                        float _3515 = dot(vec3(_933, _936, _939), vec3(_3485, _3486, _3487));
                        float _4946 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3518 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                        float _3519 = dot(vec3(_933, _936, _939), vec3(_3511 * _3505, _3511 * _3506, _3511 * _3507));
                        float _4957 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                        float _3522 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                        float _3526 = ((_3522 * _3522) * (_3504 + (-1.0))) + 1.0;
                        float _3527 = _3463 * _3503;
                        float _3528 = _3527 * _3527;
                        float _3531 = ((1.0 - _3528) * _3453) + _3528;
                        float _4968 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3532 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                        float _3533 = 1.0 - _3503;
                        float _3543 = (0.5 / (((_3532 * ((_3518 * _3533) + _3503)) + 9.9999999392252902907785028219223e-09) + (((_3532 * _3533) + _3503) * _3518))) * _3532;
                        float _4979 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3554 = (((_3504 * 3.1415927410125732421875) * (isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0)))) / ((_3526 * _3526) * ((_3470 * 2.1991131305694580078125) + 3.141590118408203125))) * _3459;
                        _3307 = (_3474 * _3422.x) + _3380;
                        _3308 = (_3474 * _3422.y) + _3381;
                        _3309 = (_3474 * _3422.z) + _3382;
                        _3304 = (_3554 * _3439.x) + _3377;
                        _3305 = (_3554 * _3439.y) + _3378;
                        _3306 = (_3554 * _3439.z) + _3379;
                        if (_3384 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3377 = _3304;
                            _3378 = _3305;
                            _3379 = _3306;
                            _3380 = _3307;
                            _3381 = _3308;
                            _3382 = _3309;
                            _3383 = _3384;
                        }
                    }
                    frontier_phi_71_pred = _3309;
                    frontier_phi_71_pred_1 = _3308;
                    frontier_phi_71_pred_2 = _3307;
                    frontier_phi_71_pred_3 = _3306;
                    frontier_phi_71_pred_4 = _3305;
                    frontier_phi_71_pred_5 = _3304;
                }
                _3090 = frontier_phi_71_pred;
                _3088 = frontier_phi_71_pred_1;
                _3086 = frontier_phi_71_pred_2;
                _3084 = frontier_phi_71_pred_3;
                _3082 = frontier_phi_71_pred_4;
                _3080 = frontier_phi_71_pred_5;
                uint _3239 = _3238 + 1u;
                if (_3239 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3232 = _3080;
                    _3233 = _3082;
                    _3234 = _3084;
                    _3235 = _3086;
                    _3236 = _3088;
                    _3237 = _3090;
                    _3238 = _3239;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
        }
        uvec4 _3093 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3094 = _3093.z;
        uint _3096 = (_3094 >> 8u) & 15u;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        float _3208;
        float _3210;
        if (((4294967295u << _3096) & _2999) == 0u)
        {
            _3200 = _3079;
            _3202 = _3081;
            _3204 = _3083;
            _3206 = _3085;
            _3208 = _3087;
            _3210 = _3089;
        }
        else
        {
            float _3225 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
            float _3226 = _3225 * _2077;
            float _3227 = _3225 * _2078;
            float _3228 = _3225 * _2079;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3096 < ((_3094 >> 12u) & 15u))
            {
                float _3201;
                float _3203;
                float _3205;
                float _3207;
                float _3209;
                float _3211;
                float _3360 = _3079;
                float _3361 = _3081;
                float _3362 = _3083;
                float _3363 = _3085;
                float _3364 = _3087;
                float _3365 = _3089;
                uint _3366 = _3096;
                uint _3375;
                bool _3376;
                for (;;)
                {
                    _3375 = texelFetch(g_lightClassification, int((((_2993 << 5u) + (_2979 << 9u)) + (_3366 << 2u)) >> 2u)).x;
                    _3376 = _3375 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3376)
                    {
                        frontier_phi_82_pred = _3365;
                        frontier_phi_82_pred_1 = _3364;
                        frontier_phi_82_pred_2 = _3363;
                        frontier_phi_82_pred_3 = _3362;
                        frontier_phi_82_pred_4 = _3361;
                        frontier_phi_82_pred_5 = _3360;
                    }
                    else
                    {
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3581 = _3360;
                        float _3582 = _3361;
                        float _3583 = _3362;
                        float _3584 = _3363;
                        float _3585 = _3364;
                        float _3586 = _3365;
                        uint _3587 = _3375;
                        uint _3588;
                        vec4 _3613;
                        float _3614;
                        vec4 _3629;
                        vec3 _3641;
                        vec4 _3656;
                        vec4 _3671;
                        float _3717;
                        bool _3718;
                        for (;;)
                        {
                            uint _3598 = ((_3366 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3587));
                            _3588 = (_3587 + 4294967295u) & _3587;
                            uint _3600 = _3598 * 40u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            _3614 = _3613.w;
                            uint _3616 = (_3598 * 40u) + 4u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3598 * 40u) + 8u;
                            _3641 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x));
                            uint _3643 = (_3598 * 40u) + 16u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3658 = (_3598 * 40u) + 20u;
                            _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3673 = (_3598 * 40u) + 24u;
                            vec4 _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3692 = (_3598 * 40u) + 28u;
                            vec4 _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            _3717 = fma(_2079, _3705.z, fma(_2078, _3705.y, _3705.x * _2077)) + _3705.w;
                            _3718 = !((fma(_2079, _3686.z, fma(_2078, _3686.y, _3686.x * _2077)) + _3686.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3718)
                            {
                                float _3745 = _3613.x - _2077;
                                float _3746 = _3613.y - _2078;
                                float _3747 = _3613.z - _2079;
                                float _3748 = dot(vec3(_3745, _3746, _3747), vec3(_3745, _3746, _3747));
                                float _3751 = inversesqrt(_3748);
                                float _3752 = _3751 * _3745;
                                float _3753 = _3751 * _3746;
                                float _3754 = _3751 * _3747;
                                float _3758 = 1.0 - (_3748 / (_3614 * _3614));
                                float _4990 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3759 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3763 = sqrt(_3748) * _3629.w;
                                float _3765 = 1.39999997615814208984375 / (_3763 + 1.39999997615814208984375);
                                float _3766 = _3765 * _3765;
                                float _3769 = ((1.0 - _3766) * dot(vec3(_3752, _3753, _3754), vec3(_933, _936, _939))) + _3766;
                                float _3772 = _3763 * _3763;
                                float _3776 = (fma(_2079, _3656.z, fma(_2078, _3656.y, _3656.x * _2077)) + _3656.w) / _3717;
                                float _3777 = (fma(_2079, _3671.z, fma(_2078, _3671.y, _3671.x * _2077)) + _3671.w) / _3717;
                                float _3781 = 1.0 - dot(vec2(_3776, _3777), vec2(_3776, _3777));
                                float _5006 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3782 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                                float _3783 = _3782 * (((isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0))) * _3759) / ((_3772 * 0.699999988079071044921875) + 1.0));
                                float _3795 = exp2(log2(1.0 / ((_3772 * 3.5) + 5.0)) * 0.25);
                                float _3796 = 1.0 - _993;
                                float _3803 = sqrt(1.0 - ((1.0 - (_3796 * _3796)) * (1.0 - (_3795 * _3795))));
                                float _3804 = _3803 * _3803;
                                float _3805 = _3804 * _3804;
                                float _3806 = _3752 - _3226;
                                float _3807 = _3753 - _3227;
                                float _3808 = _3754 - _3228;
                                float _3812 = inversesqrt(dot(vec3(_3806, _3807, _3808), vec3(_3806, _3807, _3808)));
                                float _3816 = dot(vec3(_933, _936, _939), vec3((-0.0) - _3226, (-0.0) - _3227, (-0.0) - _3228));
                                float _5017 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3819 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                                float _3820 = dot(vec3(_933, _936, _939), vec3(_3812 * _3806, _3812 * _3807, _3812 * _3808));
                                float _5028 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3823 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
                                float _3827 = ((_3823 * _3823) * (_3805 + (-1.0))) + 1.0;
                                float _3828 = _3765 * _3804;
                                float _3829 = _3828 * _3828;
                                float _3835 = ((1.0 - _3829) * dot(vec3(_933, _936, _939), vec3(_3752, _3753, _3754))) + _3829;
                                float _5039 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3836 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
                                float _3837 = 1.0 - _3804;
                                float _3847 = (0.5 / (((_3836 * ((_3819 * _3837) + _3804)) + 9.9999999392252902907785028219223e-09) + (((_3836 * _3837) + _3804) * _3819))) * _3836;
                                float _5050 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3857 = (_3782 * _3759) * (((_3805 * 3.1415927410125732421875) * (isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0)))) / ((_3827 * _3827) * ((_3772 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3783 * _3629.z;
                                frontier_phi_88_pred_1 = _3783 * _3629.y;
                                frontier_phi_88_pred_2 = _3783 * _3629.x;
                                frontier_phi_88_pred_3 = _3857 * _3641.z;
                                frontier_phi_88_pred_4 = _3857 * _3641.y;
                                frontier_phi_88_pred_5 = _3857 * _3641.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3866 = frontier_phi_88_pred;
                            _3865 = frontier_phi_88_pred_1;
                            _3864 = frontier_phi_88_pred_2;
                            _3863 = frontier_phi_88_pred_3;
                            _3862 = frontier_phi_88_pred_4;
                            _3861 = frontier_phi_88_pred_5;
                            _3571 = _3864 + _3584;
                            _3572 = _3865 + _3585;
                            _3573 = _3866 + _3586;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            _3570 = _3863 + _3583;
                            if (_3588 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3588;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3573;
                        frontier_phi_82_pred_1 = _3572;
                        frontier_phi_82_pred_2 = _3571;
                        frontier_phi_82_pred_3 = _3570;
                        frontier_phi_82_pred_4 = _3569;
                        frontier_phi_82_pred_5 = _3568;
                    }
                    _3211 = frontier_phi_82_pred;
                    _3209 = frontier_phi_82_pred_1;
                    _3207 = frontier_phi_82_pred_2;
                    _3205 = frontier_phi_82_pred_3;
                    _3203 = frontier_phi_82_pred_4;
                    _3201 = frontier_phi_82_pred_5;
                    uint _3367 = _3366 + 1u;
                    if (_3367 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3360 = _3201;
                        _3361 = _3203;
                        _3362 = _3205;
                        _3363 = _3207;
                        _3364 = _3209;
                        _3365 = _3211;
                        _3366 = _3367;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3207;
                frontier_phi_63_64_ladder_1 = _3211;
                frontier_phi_63_64_ladder_2 = _3209;
                frontier_phi_63_64_ladder_3 = _3205;
                frontier_phi_63_64_ladder_4 = _3203;
                frontier_phi_63_64_ladder_5 = _3201;
            }
            else
            {
                frontier_phi_63_64_ladder = _3085;
                frontier_phi_63_64_ladder_1 = _3089;
                frontier_phi_63_64_ladder_2 = _3087;
                frontier_phi_63_64_ladder_3 = _3083;
                frontier_phi_63_64_ladder_4 = _3081;
                frontier_phi_63_64_ladder_5 = _3079;
            }
            _3200 = frontier_phi_63_64_ladder_5;
            _3202 = frontier_phi_63_64_ladder_4;
            _3204 = frontier_phi_63_64_ladder_3;
            _3206 = frontier_phi_63_64_ladder;
            _3208 = frontier_phi_63_64_ladder_2;
            _3210 = frontier_phi_63_64_ladder_1;
        }
        float _3215 = isnan(1.0) ? _977 : (isnan(_977) ? 1.0 : min(_977, 1.0));
        _3012 = (_3215 * _3206) + _2543;
        _3014 = (_3215 * _3208) + _2545;
        _3016 = (_3215 * _3210) + _2547;
        _3018 = ((_3200 * 0.039999999105930328369140625) * _3215) + _2866;
        _3020 = ((_3202 * 0.039999999105930328369140625) * _3215) + _2868;
        _3022 = ((_3204 * 0.039999999105930328369140625) * _3215) + _2870;
    }
    else
    {
        _3012 = _2543;
        _3014 = _2545;
        _3016 = _2547;
        _3018 = _2866;
        _3020 = _2868;
        _3022 = _2870;
    }
    float _5066 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _5077 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _5088 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _3039 = ((isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0))) * (_3012 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _977))) + ((_3018 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    float _3040 = ((isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0))) * (_3014 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _977))) + ((_3020 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    float _3041 = ((isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0))) * (_3016 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _977))) + ((_3022 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    uint _3042 = _283 + 6u;
    float _3050 = _914 / cbSceneParam._m0[86u].x;
    float _3051 = _915 / cbSceneParam._m0[86u].y;
    vec4 _3065 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3050, _3051, (log2((isnan(cbSceneParam._m0[77u].w) ? _836 : (isnan(_836) ? cbSceneParam._m0[77u].w : min(_836, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3067 = _3065.x;
    float _3068 = _3065.y;
    float _3069 = _3065.z;
    float _3070 = _3065.w;
    float _3142;
    float _3144;
    float _3146;
    float _3148;
    if (_836 > cbSceneParam._m0[78u].w)
    {
        float _3104 = isnan(_836) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _836 : min(cbSceneParam._m0[80u].w, _836));
        float _3105 = _3104 / _836;
        float _3116 = _3105 * _887;
        float _3117 = _888 * _3105;
        float _3118 = (-0.0) - _3117;
        float _3120 = _3105 * _889;
        float _3122 = (cbSceneParam._m0[77u].w * _3118) / _3104;
        float _3123 = _3122 + cbSceneParam._m0[79u].w;
        float _3124 = cbSceneParam._m0[79u].w - _3117;
        float _3130 = sqrt(((_3116 * _3116) + (_3117 * _3117)) + (_3120 * _3120));
        float _3133 = (1.0 - (cbSceneParam._m0[77u].w / _3104)) * _3130;
        float _3138 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3140 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3317;
        if (abs((_3118 - _3122) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3317 = ((((_3123 > 0.0) ? exp2(_3138 * _3123) : (2.0 - exp2(_3140 * _3123))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3133;
        }
        else
        {
            float _3261 = 1.0 / cbSceneParam._m0[80u].x;
            float _3262 = isnan(_3124) ? _3123 : (isnan(_3123) ? _3124 : max(_3123, _3124));
            float _3263 = isnan(_3124) ? _3123 : (isnan(_3123) ? _3124 : min(_3123, _3124));
            float _3272 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : min(_3262, 0.0));
            float _3273 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : min(_3263, 0.0));
            _3317 = ((abs(_3130 / _3118) * cbSceneParam._m0[80u].y) * ((((_3272 - _3273) * 2.0) - ((exp2(_3138 * (isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0)))) - exp2(_3138 * (isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0))))) * _3261)) - ((exp2(_3140 * _3272) - exp2(_3140 * _3273)) * _3261))) + (_3133 * cbSceneParam._m0[80u].z);
        }
        vec4 _3319 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3050, _3051, 1.0), 0.0);
        float _3328 = exp2((_3317 * (-1.44269502162933349609375)) * (1.0 - _3319.w));
        float _3329 = log2(_3328);
        float _3345 = log2(_3070);
        _3142 = (exp2(_3345 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3329 * cbSceneParam._m0[78u].x)) * _3319.x) / cbSceneParam._m0[78u].x)) + _3067;
        _3144 = (exp2(_3345 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3329 * cbSceneParam._m0[78u].y)) * _3319.y) / cbSceneParam._m0[78u].y)) + _3068;
        _3146 = (exp2(_3345 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3329 * cbSceneParam._m0[78u].z)) * _3319.z) / cbSceneParam._m0[78u].z)) + _3069;
        _3148 = _3328 * _3070;
    }
    else
    {
        _3142 = _3067;
        _3144 = _3068;
        _3146 = _3069;
        _3148 = _3070;
    }
    bool _3355;
    vec4 _3158;
    vec4 _3180;
    float _3182;
    float _3186;
    float _3187;
    float _3188;
    float _3189;
    bool _3199;
    for (;;)
    {
        _3158 = cbMatDynParam._m0[0u];
        float _3160 = roundEven(_3158.y);
        bool _3161 = _3160 == 3.0;
        float _3162 = log2(_3148);
        float _3169 = exp2(_3162 * cbSceneParam._m0[78u].x) * _3039;
        float _3170 = exp2(_3162 * cbSceneParam._m0[78u].y) * _3040;
        float _3171 = exp2(_3162 * cbSceneParam._m0[78u].z) * _3041;
        float _3178 = _903 + (-0.5);
        _3180 = cbMtdParam._m0[1u];
        _3182 = _3180.y * _3178;
        float _3185 = (_3160 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3186 = _3185 * (_3161 ? _3169 : (_3169 + (cbSceneParam._m0[72u].w * _3142)));
        _3187 = _3185 * (_3161 ? _3170 : (_3170 + (cbSceneParam._m0[72u].w * _3144)));
        _3188 = _3185 * (_3161 ? _3171 : (_3171 + (cbSceneParam._m0[72u].w * _3146)));
        _3189 = _3178 * 0.999000012874603271484375;
        _3199 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3199)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _3189) < 0.5)
            {
                _3355 = true;
                break;
            }
        }
        uint _3296 = _952 + uint(_3158.w);
        if ((cbInstanceData._m0[_3296].w < 1.0) && ((cbInstanceData._m0[_3296].w + _3189) < 0.5))
        {
            _3355 = true;
            break;
        }
        if ((_3182 + 1.0) < _3180.x)
        {
            _3355 = true;
            break;
        }
        _3355 = false;
        break;
    }
    float _3559;
    if (_3355)
    {
        discard_state = true;
        _3559 = 0.0;
    }
    else
    {
        _3559 = cbInstanceData._m0[_3042].w;
    }
    SV_Target.x = _3186;
    SV_Target.y = _3187;
    SV_Target.z = _3188;
    SV_Target.w = _3559;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3042].w;
    discard_exit();
}


