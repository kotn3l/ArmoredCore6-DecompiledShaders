#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1044;
float _3690;
float _3691;
float _3692;
float _3693;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _338 = _336.x;
    float _348 = dot(vec4(_338, _336.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _365 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_338 - _348) * cbMtdParam._m0[24u].x) + _348) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3702 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _373 = (_366 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _374 = (_366 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _375 = (_366 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _388 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _405 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _407 = _405.x;
    float _408 = _405.y;
    float _409 = _405.z;
    float _418 = ((_388.z - _409) * _366) + _409;
    float _421 = ((((_388.x - _407) * _366) + _407) * 2.0) + (-1.0);
    float _423 = ((((_388.y - _408) * _366) + _408) * 2.0) + (-1.0);
    float _424 = dot(vec2(_421, _423), vec2(_421, _423));
    float _3713 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _429 = sqrt(1.0 - (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))));
    vec4 _445 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _457 = (((_445.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _421;
    float _458 = (((_445.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _423;
    float _462 = (cbMtdParam._m0[19u].w * (_445.z - _418)) + _418;
    float _467 = cbMtdParam._m0[22u].x + _445.w;
    float _470 = fma(_429, _217 * NORMAL.x, fma(_458, _224 * TANGENT.x, (_210 * _202) * _457));
    float _473 = fma(_429, _217 * NORMAL.y, fma(_458, _224 * TANGENT.y, (_210 * _203) * _457));
    float _476 = fma(_429, _217 * NORMAL.z, fma(_458, _224 * TANGENT.z, (_210 * _204) * _457));
    float _480 = inversesqrt(dot(vec3(_470, _473, _476), vec3(_470, _473, _476)));
    float _481 = _480 * _470;
    float _482 = _480 * _473;
    float _483 = _480 * _476;
    float _3724 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _484 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _3746 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3757 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3768 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _502 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _554 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _544);
    float _555 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _544);
    float _556 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _544);
    float _560 = inversesqrt(dot(vec3(_554, _555, _556), vec3(_554, _555, _556)));
    float _561 = _554 * _560;
    float _562 = _555 * _560;
    float _563 = _556 * _560;
    vec4 _568 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _570 = _568.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _724 = sqrt(((_554 * _554) + (_555 * _555)) + (_556 * _556));
        float _730 = (cbMatDynParam._m0[5u].x * _724) + cbMatDynParam._m0[5u].y;
        float _3779 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _735 = (cbMatDynParam._m0[5u].z * _724) + cbMatDynParam._m0[5u].w;
        float _3790 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) - _731)) + _731) < ((_570 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _581 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _582 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _600 = fma(_483, cbSceneParam._m0[5u].z, fma(_482, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _481));
    float _603 = fma(_483, cbSceneParam._m0[6u].z, fma(_482, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _481));
    float _606 = fma(_483, cbSceneParam._m0[7u].z, fma(_482, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _481));
    uint _619 = _230 + 9u;
    uint _620 = _619 + uint(cbMatDynParam._m0[0u].w);
    float _626 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * cbInstanceData._m0[_620].x;
    float _627 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) * cbInstanceData._m0[_620].y;
    float _628 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * cbInstanceData._m0[_620].z;
    float _3801 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    vec4 _640 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _581, cbSceneParam._m0[86u].y * _582));
    float _644 = ((isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * TEXCOORD_5.w) * _640.x;
    float _645 = dot(vec3(_481, _482, _483), vec3(_561, _562, _563));
    float _648 = _645 * 2.0;
    float _652 = (_648 * _481) - _561;
    float _653 = (_648 * _482) - _562;
    float _654 = (_648 * _483) - _563;
    float _658 = abs(dot(vec3(_561, _562, _563), vec3(_481, _482, _483)));
    float _3834 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _660 = sqrt(_484);
    float _673 = exp2((_660 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_660 * 3.0));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1043;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _768 = fma(_713, cbModelParam._m0[26u].z, fma(_709, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _705));
        float _772 = fma(_713, cbModelParam._m0[27u].z, fma(_709, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _705));
        float _776 = fma(_713, cbModelParam._m0[28u].z, fma(_709, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _705));
        float _801 = _705 + _481;
        float _802 = _709 + _482;
        float _803 = _713 + _483;
        float _813 = fma(_803, cbModelParam._m0[26u].z, fma(_802, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _801)) - _768;
        float _814 = fma(_803, cbModelParam._m0[27u].z, fma(_802, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _801)) - _772;
        float _815 = fma(_803, cbModelParam._m0[28u].z, fma(_802, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _801)) - _776;
        float _819 = inversesqrt(dot(vec3(_813, _814, _815), vec3(_813, _814, _815)));
        float _832 = ((_819 * _813) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_768 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_819 * _814) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_772 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_819 * _815) / cbModelParam._m0[34u].z) + ((((((_776 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        float _871 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_837.x + (-0.5));
        float _873 = _871 * (_837.y + (-0.5));
        float _874 = _871 * (_837.z + (-0.5));
        float _881 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_844.x + (-0.5));
        float _883 = _881 * (_844.y + (-0.5));
        float _884 = _881 * (_844.z + (-0.5));
        float _891 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_851.x + (-0.5));
        float _893 = _891 * (_851.y + (-0.5));
        float _894 = _891 * (_851.z + (-0.5));
        float _901 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_858.x + (-0.5));
        float _903 = _901 * (_858.y + (-0.5));
        float _904 = _901 * (_858.z + (-0.5));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = _872 * 0.5;
        float _909 = _882 * 0.5;
        float _910 = _892 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _925 = (dot(vec3(_481, _482, _483), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _935 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3882 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_937 + 1.0))) + _942) * _905;
        float _952 = _873 * 0.5;
        float _953 = _883 * 0.5;
        float _954 = _893 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_481, _482, _483), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3915 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_979 + 1.0))) + _984) * _906;
        float _994 = _874 * 0.5;
        float _995 = _884 * 0.5;
        float _996 = _894 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_481, _482, _483), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3948 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1021 + 1.0))) + _1026) * _907;
        _1043 = _874;
        _1045 = _873;
        _1046 = _872;
        _1047 = _884;
        _1048 = _883;
        _1049 = _882;
        _1050 = _894;
        _1051 = _893;
        _1052 = _892;
        _1053 = _907;
        _1054 = _906;
        _1055 = _905;
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
    }
    else
    {
        _1043 = _1044;
        _1045 = _1044;
        _1046 = _1044;
        _1047 = _1044;
        _1048 = _1044;
        _1049 = _1044;
        _1050 = _1044;
        _1051 = _1044;
        _1052 = _1044;
        _1053 = _1044;
        _1054 = _1044;
        _1055 = _1044;
        _1056 = 0.0;
        _1057 = 0.0;
        _1058 = 0.0;
    }
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1086 = fma(_713, cbModelParam._m0[30u].z, fma(_709, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _705));
        float _1090 = fma(_713, cbModelParam._m0[31u].z, fma(_709, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _705));
        float _1094 = fma(_713, cbModelParam._m0[32u].z, fma(_709, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _705));
        float _1117 = _705 + _481;
        float _1118 = _709 + _482;
        float _1119 = _713 + _483;
        float _1129 = fma(_1119, cbModelParam._m0[30u].z, fma(_1118, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1117)) - _1086;
        float _1130 = fma(_1119, cbModelParam._m0[31u].z, fma(_1118, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1117)) - _1090;
        float _1131 = fma(_1119, cbModelParam._m0[32u].z, fma(_1118, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1117)) - _1094;
        float _1135 = inversesqrt(dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131)));
        float _1148 = ((_1135 * _1129) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1086 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1135 * _1130) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1090 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1135 * _1131) / cbModelParam._m0[35u].z) + ((((((_1094 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        float _1185 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1152.x + (-0.5));
        float _1187 = _1185 * (_1152.y + (-0.5));
        float _1188 = _1185 * (_1152.z + (-0.5));
        float _1195 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1159.x + (-0.5));
        float _1197 = _1195 * (_1159.y + (-0.5));
        float _1198 = _1195 * (_1159.z + (-0.5));
        float _1205 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1166.x + (-0.5));
        float _1207 = _1205 * (_1166.y + (-0.5));
        float _1208 = _1205 * (_1166.z + (-0.5));
        float _1215 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1173.x + (-0.5));
        float _1217 = _1215 * (_1173.y + (-0.5));
        float _1218 = _1215 * (_1173.z + (-0.5));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = _1186 * 0.5;
        float _1223 = _1196 * 0.5;
        float _1224 = _1206 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_481, _482, _483), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _4011 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1249 + 1.0))) + _1254) * _1219;
        float _1264 = _1187 * 0.5;
        float _1265 = _1197 * 0.5;
        float _1266 = _1207 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_481, _482, _483), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4044 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1291 + 1.0))) + _1296) * _1220;
        float _1306 = _1188 * 0.5;
        float _1307 = _1198 * 0.5;
        float _1308 = _1208 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_481, _482, _483), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4077 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1333 + 1.0))) + _1338) * _1221;
        _1355 = _1188;
        _1356 = _1187;
        _1357 = _1186;
        _1358 = _1198;
        _1359 = _1197;
        _1360 = _1196;
        _1361 = _1208;
        _1362 = _1207;
        _1363 = _1206;
        _1364 = _1221;
        _1365 = _1220;
        _1366 = _1219;
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
    }
    else
    {
        _1355 = _1044;
        _1356 = _1044;
        _1357 = _1044;
        _1358 = _1044;
        _1359 = _1044;
        _1360 = _1044;
        _1361 = _1044;
        _1362 = _1044;
        _1363 = _1044;
        _1364 = _1044;
        _1365 = _1044;
        _1366 = _1044;
        _1367 = 0.0;
        _1368 = 0.0;
        _1369 = 0.0;
    }
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1056)) + _1056;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1057)) + _1057;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1058)) + _1058;
    float _1402 = fma(_1381, cbSceneParam._m0[89u].z, fma(_1380, cbSceneParam._m0[89u].y, _1379 * cbSceneParam._m0[89u].x));
    float _1405 = fma(_1381, cbSceneParam._m0[90u].z, fma(_1380, cbSceneParam._m0[90u].y, _1379 * cbSceneParam._m0[90u].x));
    float _1408 = fma(_1381, cbSceneParam._m0[91u].z, fma(_1380, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1379));
    float _1423 = _652 * 0.5;
    float _1424 = _653 * 0.5;
    float _1425 = _654 * 0.5;
    float _1426 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1429 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1432 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1466;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1439 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1043, _1047, _1050, _1053));
        float _1443 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1447 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1454 = dot(vec4(cbModelParam._m0[39u]), vec4(_1423, _1424, _1425, 1.0));
        _1466 = dot(vec3(isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1454) ? 0.0 : (isnan(0.0) ? _1454 : max(0.0, _1454))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1466 = 1.0;
    }
    float _1477;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1468 = dot(vec4(cbModelParam._m0[40u]), vec4(_1423, _1424, _1425, 1.0));
        _1477 = dot(vec3(isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1468) ? 0.0 : (isnan(0.0) ? _1468 : max(0.0, _1468))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1477 = 1.0;
    }
    float _1481 = (_1477 * cbModelParam._m0[1u].x) + (_1466 * (1.0 - cbModelParam._m0[1u].x));
    float _1491 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _484);
    float _1492 = isnan(_1491) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1491 : min(cbModelParam._m0[25u].z, _1491));
    float _1574;
    float _1576;
    float _1578;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1541 = fma(_713, cbModelParam._m0[13u].z, fma(_709, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _705)) + cbModelParam._m0[13u].w;
        float _1545 = fma(_713, cbModelParam._m0[14u].z, fma(_709, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _705)) + cbModelParam._m0[14u].w;
        float _1549 = fma(_713, cbModelParam._m0[15u].z, fma(_709, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _705)) + cbModelParam._m0[15u].w;
        float _1552 = fma(_654, cbModelParam._m0[13u].z, fma(_653, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _652));
        float _1555 = fma(_654, cbModelParam._m0[14u].z, fma(_653, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _652));
        float _1558 = fma(_654, cbModelParam._m0[15u].z, fma(_653, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _652));
        float _1586;
        if (_1552 > 0.0)
        {
            _1586 = abs((1.0 - _1541) / _1552);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1541 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1586 = frontier_phi_17_15_ladder;
        }
        float _1757;
        if (_1555 > 0.0)
        {
            _1757 = abs((1.0 - _1545) / _1555);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1545 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1757 = frontier_phi_26_22_ladder;
        }
        float _2052;
        if (_1558 > 0.0)
        {
            _2052 = abs((1.0 - _1549) / _1558);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1549 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2052 = frontier_phi_38_33_ladder;
        }
        float _2054 = isnan(_1757) ? _1586 : (isnan(_1586) ? _1757 : min(_1586, _1757));
        float _2055 = isnan(_2052) ? _2054 : (isnan(_2054) ? _2052 : min(_2054, _2052));
        float _2059 = (_2055 * _1552) + _1541;
        float _2060 = (_2055 * _1555) + _1545;
        float _2061 = (_2055 * _1558) + _1549;
        float _2062 = _2055 * 9.9999997473787516355514526367188e-05;
        float _2064 = (-1.0) - _2062;
        float _2066 = _2062 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2061 > _2066) || ((_2061 < _2064) || ((_2060 > _2066) || ((_2060 < _2064) || ((_2059 < _2064) || (_2059 > _2066))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2206 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2061, cbModelParam._m0[9u].z, fma(_2060, cbModelParam._m0[9u].y, _2059 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2061, cbModelParam._m0[10u].z, fma(_2060, cbModelParam._m0[10u].y, _2059 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2061, cbModelParam._m0[11u].z, fma(_2060, cbModelParam._m0[11u].y, _2059 * cbModelParam._m0[11u].x))), _1492);
            frontier_phi_16_38_ladder = _2206.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2206.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2206.x * cbModelParam._m0[1u].y;
        }
        _1574 = frontier_phi_16_38_ladder_2;
        _1576 = frontier_phi_16_38_ladder_1;
        _1578 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1562 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_652, _653, _654), _1492);
        _1574 = _1562.x * cbModelParam._m0[1u].y;
        _1576 = _1562.y * cbModelParam._m0[1u].y;
        _1578 = _1562.z * cbModelParam._m0[1u].y;
    }
    float _1582 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _484);
    float _1583 = isnan(_1582) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1582 : min(cbModelParam._m0[25u].w, _1582));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1638 = fma(_713, cbModelParam._m0[21u].z, fma(_709, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _705)) + cbModelParam._m0[21u].w;
        float _1642 = fma(_713, cbModelParam._m0[22u].z, fma(_709, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _705)) + cbModelParam._m0[22u].w;
        float _1646 = fma(_713, cbModelParam._m0[23u].z, fma(_709, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _705)) + cbModelParam._m0[23u].w;
        float _1649 = fma(_654, cbModelParam._m0[21u].z, fma(_653, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _652));
        float _1652 = fma(_654, cbModelParam._m0[22u].z, fma(_653, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _652));
        float _1655 = fma(_654, cbModelParam._m0[23u].z, fma(_653, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _652));
        float _1762;
        if (_1649 > 0.0)
        {
            _1762 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1762 = frontier_phi_28_24_ladder;
        }
        float _2079;
        if (_1652 > 0.0)
        {
            _2079 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2079 = frontier_phi_40_35_ladder;
        }
        float _2406;
        if (_1655 > 0.0)
        {
            _2406 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2406 = frontier_phi_50_47_ladder;
        }
        float _2408 = isnan(_2079) ? _1762 : (isnan(_1762) ? _2079 : min(_1762, _2079));
        float _2409 = isnan(_2406) ? _2408 : (isnan(_2408) ? _2406 : min(_2408, _2406));
        float _2413 = (_2409 * _1649) + _1638;
        float _2414 = (_2409 * _1652) + _1642;
        float _2415 = (_2409 * _1655) + _1646;
        float _2416 = _2409 * 9.9999997473787516355514526367188e-05;
        float _2417 = (-1.0) - _2416;
        float _2419 = _2416 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2415 > _2419) || ((_2415 < _2417) || ((_2414 > _2419) || ((_2414 < _2417) || ((_2413 < _2417) || (_2413 > _2419))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2533 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2415, cbModelParam._m0[17u].z, fma(_2414, cbModelParam._m0[17u].y, _2413 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2415, cbModelParam._m0[18u].z, fma(_2414, cbModelParam._m0[18u].y, _2413 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2415, cbModelParam._m0[19u].z, fma(_2414, cbModelParam._m0[19u].y, _2413 * cbModelParam._m0[19u].x))), _1583);
            frontier_phi_25_50_ladder = _2533.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2533.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2533.x * cbModelParam._m0[1u].z;
        }
        _1674 = frontier_phi_25_50_ladder_2;
        _1676 = frontier_phi_25_50_ladder_1;
        _1678 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1658 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_652, _653, _654), _1583);
        _1674 = _1658.x * cbModelParam._m0[1u].z;
        _1676 = _1658.y * cbModelParam._m0[1u].z;
        _1678 = _1658.z * cbModelParam._m0[1u].z;
    }
    float _1690 = ((((1.0 - _673) * ((_660 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_673 * _660)) * _644;
    float _1691 = _1690 * ((cbModelParam._m0[1u].w * (_1674 - _1574)) + _1574);
    float _1692 = _1690 * ((cbModelParam._m0[1u].w * (_1676 - _1576)) + _1576);
    float _1693 = _1690 * ((cbModelParam._m0[1u].w * (_1678 - _1578)) + _1578);
    float _1696 = fma(_1693, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1699 = fma(_1693, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1702 = fma(_1693, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, _1691 * cbSceneParam._m0[91u].x));
    float _1736 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1740 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1744 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1748 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1749 = _1736 / _1748;
    float _1750 = _1740 / _1748;
    float _1751 = _1744 / _1748;
    float _1898;
    float _1899;
    float _1900;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1778 = ((uint(_1751 > cbSceneParam._m0[59u].y) + uint(_1751 > cbSceneParam._m0[59u].x)) + uint(_1751 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1779 = _1778 + 43u;
        uint _1787 = _1778 + 44u;
        uint _1795 = _1778 + 45u;
        uint _1803 = _1778 + 46u;
        float _1814 = fma(_1748, cbSceneParam._m0[_1779].w, fma(_1744, cbSceneParam._m0[_1779].z, fma(_1740, cbSceneParam._m0[_1779].y, _1736 * cbSceneParam._m0[_1779].x)));
        float _1818 = fma(_1748, cbSceneParam._m0[_1787].w, fma(_1744, cbSceneParam._m0[_1787].z, fma(_1740, cbSceneParam._m0[_1787].y, _1736 * cbSceneParam._m0[_1787].x)));
        float _1826 = fma(_1748, cbSceneParam._m0[_1803].w, fma(_1744, cbSceneParam._m0[_1803].z, fma(_1740, cbSceneParam._m0[_1803].y, _1736 * cbSceneParam._m0[_1803].x)));
        float _1831 = cbSceneParam._m0[33u].z * _1826;
        float _1833 = cbSceneParam._m0[33u].w * _1826;
        float _1836 = fma(_1748, cbSceneParam._m0[_1795].w, fma(_1744, cbSceneParam._m0[_1795].z, fma(_1740, cbSceneParam._m0[_1795].y, _1736 * cbSceneParam._m0[_1795].x))) / _1826;
        float _1884 = (cbSceneParam._m0[33u].x - sqrt(((_1750 * _1750) + (_1749 * _1749)) + (_1751 * _1751))) * cbSceneParam._m0[33u].y;
        float _4203 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1891 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1831 + _1814) / _1826, (_1833 + _1818) / _1826), _1836), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1833 + _1814) / _1826, (_1818 - _1831) / _1826), _1836), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1814 - _1831) / _1826, (_1818 - _1833) / _1826), _1836), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1814 - _1833) / _1826, (_1831 + _1818) / _1826), _1836), 0.0)).x), vec4(0.25)));
        _1898 = 1.0 - (_1891 * cbSceneParam._m0[34u].x);
        _1899 = 1.0 - (_1891 * cbSceneParam._m0[34u].y);
        _1900 = 1.0 - (_1891 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1898 = 1.0;
        _1899 = 1.0;
        _1900 = 1.0;
    }
    float _1964;
    float _1966;
    float _1968;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1952 = fma(_1748, cbSceneParam._m0[63u].w, fma(_1744, cbSceneParam._m0[63u].z, fma(_1740, cbSceneParam._m0[63u].y, _1736 * cbSceneParam._m0[63u].x)));
        float _1953 = fma(_1748, cbSceneParam._m0[60u].w, fma(_1744, cbSceneParam._m0[60u].z, fma(_1740, cbSceneParam._m0[60u].y, _1736 * cbSceneParam._m0[60u].x))) / _1952;
        float _1954 = fma(_1748, cbSceneParam._m0[61u].w, fma(_1744, cbSceneParam._m0[61u].z, fma(_1740, cbSceneParam._m0[61u].y, _1736 * cbSceneParam._m0[61u].x))) / _1952;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1953 >= cbSceneParam._m0[64u].x) && (_1954 >= cbSceneParam._m0[64u].y)) && (_1953 <= cbSceneParam._m0[64u].z)) && (_1954 <= cbSceneParam._m0[64u].w))
        {
            float _2092 = fma(_1748, cbSceneParam._m0[62u].w, fma(_1744, cbSceneParam._m0[62u].z, fma(_1740, cbSceneParam._m0[62u].y, _1736 * cbSceneParam._m0[62u].x))) / _1952;
            float _2096 = isnan(cbSceneParam._m0[41u].w) ? _2092 : (isnan(_2092) ? cbSceneParam._m0[41u].w : max(_2092, cbSceneParam._m0[41u].w));
            float _2139 = (cbSceneParam._m0[33u].x - sqrt(((_1750 * _1750) + (_1749 * _1749)) + (_1751 * _1751))) * cbSceneParam._m0[33u].y;
            float _4219 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
            float _2146 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1953, cbSceneParam._m0[33u].w + _1954), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1953, _1954 - cbSceneParam._m0[33u].z), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1953 - cbSceneParam._m0[33u].z, _1954 - cbSceneParam._m0[33u].w), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1953 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1954), _2096), 0.0)).x), vec4(0.25)));
            float _2150 = 1.0 - (_2146 * cbSceneParam._m0[34u].x);
            float _2151 = 1.0 - (_2146 * cbSceneParam._m0[34u].y);
            float _2152 = 1.0 - (_2146 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2152) ? _1900 : (isnan(_1900) ? _2152 : min(_1900, _2152));
            frontier_phi_37_36_ladder_1 = isnan(_2151) ? _1899 : (isnan(_1899) ? _2151 : min(_1899, _2151));
            frontier_phi_37_36_ladder_2 = isnan(_2150) ? _1898 : (isnan(_1898) ? _2150 : min(_1898, _2150));
        }
        else
        {
            frontier_phi_37_36_ladder = _1900;
            frontier_phi_37_36_ladder_1 = _1899;
            frontier_phi_37_36_ladder_2 = _1898;
        }
        _1964 = frontier_phi_37_36_ladder_2;
        _1966 = frontier_phi_37_36_ladder_1;
        _1968 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1964 = _1898;
        _1966 = _1899;
        _1968 = _1900;
    }
    uvec4 _1973 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1975 = _1973.x * 14u;
    uint _1976 = _1975 + 13u;
    float _1983 = _644 + (-1.0);
    float _1988 = (cbLight._m0[_1976].x * _1983) + 1.0;
    float _1989 = (cbLight._m0[_1976].y * _1983) + 1.0;
    float _1990 = (cbLight._m0[_1976].z * _1983) + 1.0;
    float _1991 = (cbLight._m0[_1976].w * _1983) + 1.0;
    uint _1992 = _1975 + 5u;
    float _1998 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
    uint _2002 = _1975 + 4u;
    float _2011 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
    uint _2015 = _1975 | 1u;
    float _2026 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_481, _482, _483));
    float _2029 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_481, _482, _483));
    float _4255 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _4266 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2034 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * 0.3183098733425140380859375;
    float _2036 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * 0.3183098733425140380859375;
    float _2043 = ((cbLight._m0[_1992].x * _1998) * _2036) + (((cbLight._m0[_2002].x * _1964) * _2011) * _2034);
    float _2044 = ((_1998 * cbLight._m0[_1992].y) * _2036) + (((cbLight._m0[_2002].y * _1966) * _2011) * _2034);
    float _2045 = ((_1998 * cbLight._m0[_1992].z) * _2036) + (((cbLight._m0[_2002].z * _1968) * _2011) * _2034);
    uvec4 _2049 = floatBitsToUint(cbLight._m0[_1975 + 12u]);
    bool _2051 = _2049.x == 0u;
    float _2153;
    float _2155;
    float _2157;
    if (_2051)
    {
        _2153 = _2043;
        _2155 = _2044;
        _2157 = _2045;
    }
    else
    {
        uint _2161 = _1975 + 6u;
        float _2177 = (dot(vec3(cbLight._m0[_1975 + 2u].xyz), vec3(_481, _482, _483)) * 0.5) + 0.5;
        float _2178 = _2177 * _2177;
        float _4277 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2179 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2180 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
        _2153 = (((cbLight._m0[_2161].x * 0.3183098733425140380859375) * _2179) * _2180) + _2043;
        _2155 = (((cbLight._m0[_2161].y * 0.3183098733425140380859375) * _2179) * _2180) + _2044;
        _2157 = (((cbLight._m0[_2161].z * 0.3183098733425140380859375) * _2179) * _2180) + _2045;
    }
    bool _2160 = _2049.y == 0u;
    float _2215;
    float _2217;
    float _2219;
    if (_2160)
    {
        _2215 = _2153;
        _2217 = _2155;
        _2219 = _2157;
    }
    else
    {
        uint _2377 = _1975 + 7u;
        float _2393 = (dot(vec3(cbLight._m0[_1975 + 3u].xyz), vec3(_481, _482, _483)) * 0.5) + 0.5;
        float _2394 = _2393 * _2393;
        float _4293 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2395 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2396 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2215 = (((cbLight._m0[_2377].x * 0.3183098733425140380859375) * _2395) * _2396) + _2153;
        _2217 = (((cbLight._m0[_2377].y * 0.3183098733425140380859375) * _2395) * _2396) + _2155;
        _2219 = (((cbLight._m0[_2377].z * 0.3183098733425140380859375) * _2395) * _2396) + _2157;
    }
    uint _2222 = _1975 + 8u;
    float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1975].w)) * _484) * 0.949999988079071044921875);
    float _2236 = _2235 * _2235;
    float _2237 = cbLight._m0[_1975].x + _561;
    float _2238 = cbLight._m0[_1975].y + _562;
    float _2239 = cbLight._m0[_1975].z + _563;
    float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
    float _2244 = _2243 * _2237;
    float _2245 = _2243 * _2238;
    float _2246 = _2243 * _2239;
    float _2247 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_1975].xyz));
    float _4309 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _4320 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _2251 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2252 = dot(vec3(_481, _482, _483), vec3(_2244, _2245, _2246));
    float _4331 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2256 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_2244, _2245, _2246));
    float _4342 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2260 = _2236 * _2236;
    float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
    float _2275 = (exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2276 = 1.0 - _2236;
    float _2287 = (0.5 / (((_2251 * ((_2250 * _2276) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2276) + _2236) * _2250))) * _2250;
    float _4353 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2289 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
    uint _2303 = _1975 + 9u;
    float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2015].w)) * _484) * 0.949999988079071044921875);
    float _2315 = _2314 * _2314;
    float _2316 = cbLight._m0[_2015].x + _561;
    float _2317 = cbLight._m0[_2015].y + _562;
    float _2318 = cbLight._m0[_2015].z + _563;
    float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
    float _2323 = _2322 * _2316;
    float _2324 = _2322 * _2317;
    float _2325 = _2322 * _2318;
    float _2326 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_2015].xyz));
    float _4364 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2330 = dot(vec3(_481, _482, _483), vec3(_2323, _2324, _2325));
    float _4375 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _2334 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_2323, _2324, _2325));
    float _4386 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2338 = _2315 * _2315;
    float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
    float _2351 = (exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2352 = 1.0 - _2315;
    float _2362 = (0.5 / (((_2251 * ((_2329 * _2352) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2352) + _2315) * _2329))) * _2329;
    float _4397 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2364 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
    float _2374 = (((_2351 * cbLight._m0[_2303].x) * _2364) * _1998) + ((((cbLight._m0[_2222].x * _1964) * _2275) * _2289) * _2011);
    float _2375 = (((_2351 * cbLight._m0[_2303].y) * _2364) * _1998) + ((((cbLight._m0[_2222].y * _1966) * _2275) * _2289) * _2011);
    float _2376 = (((_2351 * cbLight._m0[_2303].z) * _2364) * _1998) + ((((cbLight._m0[_2222].z * _1968) * _2275) * _2289) * _2011);
    float _2432;
    float _2434;
    float _2436;
    if (_2051)
    {
        _2432 = _2374;
        _2434 = _2375;
        _2436 = _2376;
    }
    else
    {
        uint _2438 = _1975 + 2u;
        uint _2442 = _1975 + 10u;
        float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2438].w)) * _484) * 0.949999988079071044921875);
        float _2457 = _2456 * _2456;
        float _2458 = cbLight._m0[_2438].x + _561;
        float _2459 = cbLight._m0[_2438].y + _562;
        float _2460 = cbLight._m0[_2438].z + _563;
        float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
        float _2465 = _2464 * _2458;
        float _2466 = _2464 * _2459;
        float _2467 = _2464 * _2460;
        float _2468 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_2438].xyz));
        float _4408 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2472 = dot(vec3(_481, _482, _483), vec3(_2465, _2466, _2467));
        float _4419 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2476 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_2465, _2466, _2467));
        float _4430 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2480 = _2457 * _2457;
        float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
        float _2493 = (exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2494 = 1.0 - _2457;
        float _2504 = (0.5 / (((_2251 * ((_2471 * _2494) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2494) + _2457) * _2471))) * _2471;
        float _4441 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2506 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
        float _2507 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
        _2432 = (((_2493 * cbLight._m0[_2442].x) * _2506) * _2507) + _2374;
        _2434 = (((_2493 * cbLight._m0[_2442].y) * _2506) * _2507) + _2375;
        _2436 = (((_2493 * cbLight._m0[_2442].z) * _2506) * _2507) + _2376;
    }
    float _2538;
    float _2540;
    float _2542;
    if (_2160)
    {
        _2538 = _2432;
        _2540 = _2434;
        _2542 = _2436;
    }
    else
    {
        uint _2549 = _1975 + 3u;
        uint _2553 = _1975 + 11u;
        float _2567 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2549].w)) * _484) * 0.949999988079071044921875);
        float _2568 = _2567 * _2567;
        float _2569 = cbLight._m0[_2549].x + _561;
        float _2570 = cbLight._m0[_2549].y + _562;
        float _2571 = cbLight._m0[_2549].z + _563;
        float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
        float _2576 = _2575 * _2569;
        float _2577 = _2575 * _2570;
        float _2578 = _2575 * _2571;
        float _2579 = dot(vec3(_481, _482, _483), vec3(cbLight._m0[_2549].xyz));
        float _4457 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2582 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2583 = dot(vec3(_481, _482, _483), vec3(_2576, _2577, _2578));
        float _4468 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2587 = dot(vec3(cbLight._m0[_2549].xyz), vec3(_2576, _2577, _2578));
        float _4479 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2591 = _2568 * _2568;
        float _2595 = ((_2586 * _2586) * (_2591 + (-1.0))) + 1.0;
        float _2604 = (exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2605 = 1.0 - _2568;
        float _2615 = (0.5 / (((_2251 * ((_2582 * _2605) + _2568)) + 9.9999999392252902907785028219223e-09) + (((_2251 * _2605) + _2568) * _2582))) * _2582;
        float _4490 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2617 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2591 / ((_2595 * _2595) * 3.141590118408203125));
        float _2618 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2538 = (((_2604 * cbLight._m0[_2553].x) * _2617) * _2618) + _2432;
        _2540 = (((_2604 * cbLight._m0[_2553].y) * _2617) * _2618) + _2434;
        _2542 = (((_2604 * cbLight._m0[_2553].z) * _2617) * _2618) + _2436;
    }
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    if (_1973.y == 0u)
    {
        uvec4 _2639 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2640 = _2639.x;
        uint _2651 = uint((float(_2639.y) * floor(float(uint(cbSceneParam._m0[85u].y * _582) / _2640))) + floor(float(uint(cbSceneParam._m0[85u].x * _581) / _2640)));
        float _2661 = (log2(_1751 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2662 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        uint _2665 = uint(isnan(14.0) ? _2662 : (isnan(_2662) ? 14.0 : min(_2662, 14.0)));
        uvec4 _2670 = texelFetch(g_lightClusterGridBuffer, int(((_2665 << 2u) + (_2651 << 6u)) >> 2u));
        uint _2671 = _2670.x;
        uint _2672 = _2639.z;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        if (((((1u << ((_2672 >> 4u) & 15u)) + 4294967295u) & _2671) == 0u) || ((_2672 & 240u) == 0u))
        {
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
        }
        else
        {
            float _2752;
            float _2754;
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            uint _2910 = 0u;
            uint _2919;
            bool _2920;
            for (;;)
            {
                _2919 = texelFetch(g_lightClassification, int((((_2665 << 5u) + (_2651 << 9u)) + (_2910 << 2u)) >> 2u)).x;
                _2920 = _2919 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2920)
                {
                    frontier_phi_71_pred = _2909;
                    frontier_phi_71_pred_1 = _2908;
                    frontier_phi_71_pred_2 = _2907;
                    frontier_phi_71_pred_3 = _2906;
                    frontier_phi_71_pred_4 = _2905;
                    frontier_phi_71_pred_5 = _2904;
                }
                else
                {
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    uint _3055;
                    _3049 = _2904;
                    _3050 = _2905;
                    _3051 = _2906;
                    _3052 = _2907;
                    _3053 = _2908;
                    _3054 = _2909;
                    _3055 = _2919;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    for (;;)
                    {
                        uint _3059 = uint(findLSB(_3055)) + (_2910 << 5u);
                        uint _3056 = (_3055 + 4294967295u) & _3055;
                        uint _3061 = _3059 * 48u;
                        vec4 _3075 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 3u)).x));
                        uint _3081 = (_3059 * 48u) + 4u;
                        vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 3u)).x));
                        uint _3100 = (_3059 * 48u) + 8u;
                        vec3 _3111 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x));
                        float _3115 = _3075.x - _1749;
                        float _3116 = _3075.y - _1750;
                        float _3117 = _3075.z - _1751;
                        float _3118 = dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117));
                        float _3121 = inversesqrt(_3118);
                        float _3122 = _3121 * _3115;
                        float _3123 = _3121 * _3116;
                        float _3124 = _3121 * _3117;
                        float _3125 = dot(vec3(_600, _603, _606), vec3(_3122, _3123, _3124));
                        float _3130 = 1.0 - (_3118 * _3075.w);
                        float _4516 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3131 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3132 = sqrt(_3118) * _3094.w;
                        float _3135 = 1.39999997615814208984375 / (_3132 + 1.39999997615814208984375);
                        float _3136 = _3135 * _3135;
                        float _3139 = ((1.0 - _3136) * _3125) + _3136;
                        float _3142 = _3132 * _3132;
                        float _3146 = ((isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0))) * _3131) / ((_3142 * 0.699999988079071044921875) + 1.0);
                        float _3150 = (-0.0) - _1749;
                        float _3151 = (-0.0) - _1750;
                        float _3152 = (-0.0) - _1751;
                        float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
                        float _3157 = _3156 * _3150;
                        float _3158 = _3156 * _3151;
                        float _3159 = _3156 * _3152;
                        float _3166 = exp2(log2(1.0 / ((_3142 * 3.5) + 5.0)) * 0.25);
                        float _3167 = 1.0 - _660;
                        float _3174 = sqrt(1.0 - ((1.0 - (_3167 * _3167)) * (1.0 - (_3166 * _3166))));
                        float _3175 = _3174 * _3174;
                        float _3176 = _3175 * _3175;
                        float _3177 = _3157 + _3122;
                        float _3178 = _3158 + _3123;
                        float _3179 = _3159 + _3124;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3187 = dot(vec3(_600, _603, _606), vec3(_3157, _3158, _3159));
                        float _4532 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3190 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3191 = dot(vec3(_600, _603, _606), vec3(_3183 * _3177, _3183 * _3178, _3183 * _3179));
                        float _4543 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3198 = ((_3194 * _3194) * (_3176 + (-1.0))) + 1.0;
                        float _3199 = _3135 * _3175;
                        float _3200 = _3199 * _3199;
                        float _3203 = ((1.0 - _3200) * _3125) + _3200;
                        float _4554 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3204 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                        float _3205 = 1.0 - _3175;
                        float _3215 = (0.5 / (((_3204 * ((_3190 * _3205) + _3175)) + 9.9999999392252902907785028219223e-09) + (((_3204 * _3205) + _3175) * _3190))) * _3204;
                        float _4565 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3226 = (((_3176 * 3.1415927410125732421875) * (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) / ((_3198 * _3198) * ((_3142 * 2.1991131305694580078125) + 3.141590118408203125))) * _3131;
                        _2979 = (_3146 * _3094.x) + _3052;
                        _2980 = (_3146 * _3094.y) + _3053;
                        _2981 = (_3146 * _3094.z) + _3054;
                        _2976 = (_3226 * _3111.x) + _3049;
                        _2977 = (_3226 * _3111.y) + _3050;
                        _2978 = (_3226 * _3111.z) + _3051;
                        if (_3056 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3049 = _2976;
                            _3050 = _2977;
                            _3051 = _2978;
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _2981;
                            _3055 = _3056;
                        }
                    }
                    frontier_phi_71_pred = _2981;
                    frontier_phi_71_pred_1 = _2980;
                    frontier_phi_71_pred_2 = _2979;
                    frontier_phi_71_pred_3 = _2978;
                    frontier_phi_71_pred_4 = _2977;
                    frontier_phi_71_pred_5 = _2976;
                }
                _2762 = frontier_phi_71_pred;
                _2760 = frontier_phi_71_pred_1;
                _2758 = frontier_phi_71_pred_2;
                _2756 = frontier_phi_71_pred_3;
                _2754 = frontier_phi_71_pred_4;
                _2752 = frontier_phi_71_pred_5;
                uint _2911 = _2910 + 1u;
                if (_2911 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2904 = _2752;
                    _2905 = _2754;
                    _2906 = _2756;
                    _2907 = _2758;
                    _2908 = _2760;
                    _2909 = _2762;
                    _2910 = _2911;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
        }
        uvec4 _2765 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2766 = _2765.z;
        uint _2768 = (_2766 >> 8u) & 15u;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        if (((4294967295u << _2768) & _2671) == 0u)
        {
            _2872 = _2751;
            _2874 = _2753;
            _2876 = _2755;
            _2878 = _2757;
            _2880 = _2759;
            _2882 = _2761;
        }
        else
        {
            float _2897 = inversesqrt(dot(vec3(_1749, _1750, _1751), vec3(_1749, _1750, _1751)));
            float _2898 = _2897 * _1749;
            float _2899 = _2897 * _1750;
            float _2900 = _2897 * _1751;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2768 < ((_2766 >> 12u) & 15u))
            {
                float _2873;
                float _2875;
                float _2877;
                float _2879;
                float _2881;
                float _2883;
                float _3032 = _2751;
                float _3033 = _2753;
                float _3034 = _2755;
                float _3035 = _2757;
                float _3036 = _2759;
                float _3037 = _2761;
                uint _3038 = _2768;
                uint _3047;
                bool _3048;
                for (;;)
                {
                    _3047 = texelFetch(g_lightClassification, int((((_2665 << 5u) + (_2651 << 9u)) + (_3038 << 2u)) >> 2u)).x;
                    _3048 = _3047 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3048)
                    {
                        frontier_phi_82_pred = _3037;
                        frontier_phi_82_pred_1 = _3036;
                        frontier_phi_82_pred_2 = _3035;
                        frontier_phi_82_pred_3 = _3034;
                        frontier_phi_82_pred_4 = _3033;
                        frontier_phi_82_pred_5 = _3032;
                    }
                    else
                    {
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3253 = _3032;
                        float _3254 = _3033;
                        float _3255 = _3034;
                        float _3256 = _3035;
                        float _3257 = _3036;
                        float _3258 = _3037;
                        uint _3259 = _3047;
                        uint _3260;
                        vec4 _3285;
                        float _3286;
                        vec4 _3301;
                        vec3 _3313;
                        vec4 _3328;
                        vec4 _3344;
                        float _3390;
                        bool _3391;
                        for (;;)
                        {
                            uint _3270 = ((_3038 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3259));
                            _3260 = (_3259 + 4294967295u) & _3259;
                            uint _3272 = _3270 * 40u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            _3286 = _3285.w;
                            uint _3288 = (_3270 * 40u) + 4u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3270 * 40u) + 8u;
                            _3313 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x));
                            uint _3315 = (_3270 * 40u) + 16u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3331 = (_3270 * 40u) + 20u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3346 = (_3270 * 40u) + 24u;
                            vec4 _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            uint _3365 = (_3270 * 40u) + 28u;
                            vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            _3390 = fma(_1751, _3378.z, fma(_1750, _3378.y, _3378.x * _1749)) + _3378.w;
                            _3391 = !((fma(_1751, _3359.z, fma(_1750, _3359.y, _3359.x * _1749)) + _3359.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3391)
                            {
                                float _3418 = _3285.x - _1749;
                                float _3419 = _3285.y - _1750;
                                float _3420 = _3285.z - _1751;
                                float _3421 = dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420));
                                float _3424 = inversesqrt(_3421);
                                float _3425 = _3424 * _3418;
                                float _3426 = _3424 * _3419;
                                float _3427 = _3424 * _3420;
                                float _3431 = 1.0 - (_3421 / (_3286 * _3286));
                                float _4576 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3432 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3436 = sqrt(_3421) * _3301.w;
                                float _3438 = 1.39999997615814208984375 / (_3436 + 1.39999997615814208984375);
                                float _3439 = _3438 * _3438;
                                float _3442 = ((1.0 - _3439) * dot(vec3(_3425, _3426, _3427), vec3(_600, _603, _606))) + _3439;
                                float _3445 = _3436 * _3436;
                                float _3449 = (fma(_1751, _3328.z, fma(_1750, _3328.y, _3328.x * _1749)) + _3328.w) / _3390;
                                float _3450 = (fma(_1751, _3344.z, fma(_1750, _3344.y, _3344.x * _1749)) + _3344.w) / _3390;
                                float _3454 = 1.0 - dot(vec2(_3449, _3450), vec2(_3449, _3450));
                                float _4592 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3455 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3456 = _3455 * (((isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0))) * _3432) / ((_3445 * 0.699999988079071044921875) + 1.0));
                                float _3468 = exp2(log2(1.0 / ((_3445 * 3.5) + 5.0)) * 0.25);
                                float _3469 = 1.0 - _660;
                                float _3476 = sqrt(1.0 - ((1.0 - (_3469 * _3469)) * (1.0 - (_3468 * _3468))));
                                float _3477 = _3476 * _3476;
                                float _3478 = _3477 * _3477;
                                float _3479 = _3425 - _2898;
                                float _3480 = _3426 - _2899;
                                float _3481 = _3427 - _2900;
                                float _3485 = inversesqrt(dot(vec3(_3479, _3480, _3481), vec3(_3479, _3480, _3481)));
                                float _3489 = dot(vec3(_600, _603, _606), vec3((-0.0) - _2898, (-0.0) - _2899, (-0.0) - _2900));
                                float _4603 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3492 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3493 = dot(vec3(_600, _603, _606), vec3(_3485 * _3479, _3485 * _3480, _3485 * _3481));
                                float _4614 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3496 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3500 = ((_3496 * _3496) * (_3478 + (-1.0))) + 1.0;
                                float _3501 = _3438 * _3477;
                                float _3502 = _3501 * _3501;
                                float _3508 = ((1.0 - _3502) * dot(vec3(_600, _603, _606), vec3(_3425, _3426, _3427))) + _3502;
                                float _4625 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3509 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3510 = 1.0 - _3477;
                                float _3520 = (0.5 / (((_3509 * ((_3492 * _3510) + _3477)) + 9.9999999392252902907785028219223e-09) + (((_3509 * _3510) + _3477) * _3492))) * _3509;
                                float _4636 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3530 = (_3455 * _3432) * (((_3478 * 3.1415927410125732421875) * (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) / ((_3500 * _3500) * ((_3445 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3456 * _3301.z;
                                frontier_phi_88_pred_1 = _3456 * _3301.y;
                                frontier_phi_88_pred_2 = _3456 * _3301.x;
                                frontier_phi_88_pred_3 = _3530 * _3313.z;
                                frontier_phi_88_pred_4 = _3530 * _3313.y;
                                frontier_phi_88_pred_5 = _3530 * _3313.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3539 = frontier_phi_88_pred;
                            _3538 = frontier_phi_88_pred_1;
                            _3537 = frontier_phi_88_pred_2;
                            _3536 = frontier_phi_88_pred_3;
                            _3535 = frontier_phi_88_pred_4;
                            _3534 = frontier_phi_88_pred_5;
                            _3243 = _3537 + _3256;
                            _3244 = _3538 + _3257;
                            _3245 = _3539 + _3258;
                            _3240 = _3534 + _3253;
                            _3241 = _3535 + _3254;
                            _3242 = _3536 + _3255;
                            if (_3260 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3260;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3245;
                        frontier_phi_82_pred_1 = _3244;
                        frontier_phi_82_pred_2 = _3243;
                        frontier_phi_82_pred_3 = _3242;
                        frontier_phi_82_pred_4 = _3241;
                        frontier_phi_82_pred_5 = _3240;
                    }
                    _2883 = frontier_phi_82_pred;
                    _2881 = frontier_phi_82_pred_1;
                    _2879 = frontier_phi_82_pred_2;
                    _2877 = frontier_phi_82_pred_3;
                    _2875 = frontier_phi_82_pred_4;
                    _2873 = frontier_phi_82_pred_5;
                    uint _3039 = _3038 + 1u;
                    if (_3039 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3032 = _2873;
                        _3033 = _2875;
                        _3034 = _2877;
                        _3035 = _2879;
                        _3036 = _2881;
                        _3037 = _2883;
                        _3038 = _3039;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2879;
                frontier_phi_63_64_ladder_1 = _2883;
                frontier_phi_63_64_ladder_2 = _2881;
                frontier_phi_63_64_ladder_3 = _2877;
                frontier_phi_63_64_ladder_4 = _2875;
                frontier_phi_63_64_ladder_5 = _2873;
            }
            else
            {
                frontier_phi_63_64_ladder = _2757;
                frontier_phi_63_64_ladder_1 = _2761;
                frontier_phi_63_64_ladder_2 = _2759;
                frontier_phi_63_64_ladder_3 = _2755;
                frontier_phi_63_64_ladder_4 = _2753;
                frontier_phi_63_64_ladder_5 = _2751;
            }
            _2872 = frontier_phi_63_64_ladder_5;
            _2874 = frontier_phi_63_64_ladder_4;
            _2876 = frontier_phi_63_64_ladder_3;
            _2878 = frontier_phi_63_64_ladder;
            _2880 = frontier_phi_63_64_ladder_2;
            _2882 = frontier_phi_63_64_ladder_1;
        }
        float _2887 = isnan(1.0) ? _644 : (isnan(_644) ? 1.0 : min(_644, 1.0));
        _2684 = (_2887 * _2878) + _2215;
        _2686 = (_2887 * _2880) + _2217;
        _2688 = (_2887 * _2882) + _2219;
        _2690 = ((_2872 * 0.039999999105930328369140625) * _2887) + _2538;
        _2692 = ((_2874 * 0.039999999105930328369140625) * _2887) + _2540;
        _2694 = ((_2876 * 0.039999999105930328369140625) * _2887) + _2542;
    }
    else
    {
        _2684 = _2215;
        _2686 = _2217;
        _2688 = _2219;
        _2690 = _2538;
        _2692 = _2540;
        _2694 = _2542;
    }
    float _4652 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _4663 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _4674 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _2711 = ((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2684 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _644))) + ((_2690 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1481)) * cbPerFrame._m0[3u].x);
    float _2712 = ((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2686 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _644))) + ((_2692 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1481)) * cbPerFrame._m0[3u].x);
    float _2713 = ((isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2688 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _644))) + ((_2694 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1481)) * cbPerFrame._m0[3u].x);
    uint _2714 = _230 + 6u;
    float _2722 = _581 / cbSceneParam._m0[86u].x;
    float _2723 = _582 / cbSceneParam._m0[86u].y;
    vec4 _2737 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2722, _2723, (log2((isnan(cbSceneParam._m0[77u].w) ? _502 : (isnan(_502) ? cbSceneParam._m0[77u].w : min(_502, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2739 = _2737.x;
    float _2740 = _2737.y;
    float _2741 = _2737.z;
    float _2742 = _2737.w;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    if (_502 > cbSceneParam._m0[78u].w)
    {
        float _2776 = isnan(_502) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _502 : min(cbSceneParam._m0[80u].w, _502));
        float _2777 = _2776 / _502;
        float _2788 = _2777 * _554;
        float _2789 = _555 * _2777;
        float _2790 = (-0.0) - _2789;
        float _2792 = _2777 * _556;
        float _2794 = (cbSceneParam._m0[77u].w * _2790) / _2776;
        float _2795 = _2794 + cbSceneParam._m0[79u].w;
        float _2796 = cbSceneParam._m0[79u].w - _2789;
        float _2802 = sqrt(((_2788 * _2788) + (_2789 * _2789)) + (_2792 * _2792));
        float _2805 = (1.0 - (cbSceneParam._m0[77u].w / _2776)) * _2802;
        float _2810 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2812 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2989;
        if (abs((_2790 - _2794) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2989 = ((((_2795 > 0.0) ? exp2(_2810 * _2795) : (2.0 - exp2(_2812 * _2795))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2805;
        }
        else
        {
            float _2933 = 1.0 / cbSceneParam._m0[80u].x;
            float _2934 = isnan(_2796) ? _2795 : (isnan(_2795) ? _2796 : max(_2795, _2796));
            float _2935 = isnan(_2796) ? _2795 : (isnan(_2795) ? _2796 : min(_2795, _2796));
            float _2944 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : min(_2934, 0.0));
            float _2945 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : min(_2935, 0.0));
            _2989 = ((abs(_2802 / _2790) * cbSceneParam._m0[80u].y) * ((((_2944 - _2945) * 2.0) - ((exp2(_2810 * (isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0)))) - exp2(_2810 * (isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0))))) * _2933)) - ((exp2(_2812 * _2944) - exp2(_2812 * _2945)) * _2933))) + (_2805 * cbSceneParam._m0[80u].z);
        }
        vec4 _2991 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2722, _2723, 1.0), 0.0);
        float _3000 = exp2((_2989 * (-1.44269502162933349609375)) * (1.0 - _2991.w));
        float _3001 = log2(_3000);
        float _3017 = log2(_2742);
        _2814 = (exp2(_3017 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3001 * cbSceneParam._m0[78u].x)) * _2991.x) / cbSceneParam._m0[78u].x)) + _2739;
        _2816 = (exp2(_3017 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3001 * cbSceneParam._m0[78u].y)) * _2991.y) / cbSceneParam._m0[78u].y)) + _2740;
        _2818 = (exp2(_3017 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3001 * cbSceneParam._m0[78u].z)) * _2991.z) / cbSceneParam._m0[78u].z)) + _2741;
        _2820 = _3000 * _2742;
    }
    else
    {
        _2814 = _2739;
        _2816 = _2740;
        _2818 = _2741;
        _2820 = _2742;
    }
    bool _3027;
    vec4 _2830;
    vec4 _2852;
    float _2854;
    float _2858;
    float _2859;
    float _2860;
    float _2861;
    bool _2871;
    for (;;)
    {
        _2830 = cbMatDynParam._m0[0u];
        float _2832 = roundEven(_2830.y);
        bool _2833 = _2832 == 3.0;
        float _2834 = log2(_2820);
        float _2841 = exp2(_2834 * cbSceneParam._m0[78u].x) * _2711;
        float _2842 = exp2(_2834 * cbSceneParam._m0[78u].y) * _2712;
        float _2843 = exp2(_2834 * cbSceneParam._m0[78u].z) * _2713;
        float _2850 = _570 + (-0.5);
        _2852 = cbMtdParam._m0[1u];
        _2854 = _2852.y * _2850;
        float _2857 = (_2832 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2858 = _2857 * (_2833 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2814)));
        _2859 = _2857 * (_2833 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2816)));
        _2860 = _2857 * (_2833 ? _2843 : (_2843 + (cbSceneParam._m0[72u].w * _2818)));
        _2861 = _2850 * 0.999000012874603271484375;
        _2871 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2871)
        {
            if ((cbInstanceData._m0[_230 + 7u].x + _2861) < 0.5)
            {
                _3027 = true;
                break;
            }
        }
        uint _2968 = _619 + uint(_2830.w);
        if ((cbInstanceData._m0[_2968].w < 1.0) && ((cbInstanceData._m0[_2968].w + _2861) < 0.5))
        {
            _3027 = true;
            break;
        }
        if ((_2854 + 1.0) < _2852.x)
        {
            _3027 = true;
            break;
        }
        _3027 = false;
        break;
    }
    float _3231;
    if (_3027)
    {
        discard_state = true;
        _3231 = 0.0;
    }
    else
    {
        _3231 = cbInstanceData._m0[_2714].w;
    }
    SV_Target.x = _2858;
    SV_Target.y = _2859;
    SV_Target.z = _2860;
    SV_Target.w = _3231;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2714].w;
    discard_exit();
}


