#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1125;
float _3509;
float _3510;
float _3511;
float _3512;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3521 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3532 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3543 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _261 = _256 + 1u;
    uint _265 = _256 + 2u;
    float _274 = sqrt(((cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x));
    float _275 = _274 * TEXCOORD.z;
    float _276 = _274 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _275) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _276) + cbTextureTilingScale._m0[13u].w));
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _317 = _312.x * cbMtdParam._m0[9u].x;
    float _318 = _312.y * cbMtdParam._m0[9u].y;
    float _319 = _312.z * cbMtdParam._m0[9u].z;
    float _323 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _289.x) * _317;
    float _326 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _289.y) * _318;
    float _329 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _289.z) * _319;
    float _336 = ((_317 - _323) * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) + _323;
    float _337 = ((_318 - _326) * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) + _326;
    float _338 = ((_319 - _329) * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) + _329;
    vec4 _357 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _275) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _276) + cbTextureTilingScale._m0[14u].w));
    vec4 _377 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _275) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _276) + cbTextureTilingScale._m0[20u].w));
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _407 = _403.z;
    float _411 = (_403.x * 2.0) + (-1.0);
    float _412 = (_403.y * 2.0) + (-1.0);
    float _413 = dot(vec2(_411, _412), vec2(_411, _412));
    float _3554 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _418 = sqrt(1.0 - (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))));
    float _423 = _411 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_377.x * 2.0) + (-1.0)));
    float _424 = _412 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_377.y * 2.0) + (-1.0)));
    float _427 = fma(_418, _223, fma(_424, _230, _423 * _216));
    float _430 = fma(_418, _224, fma(_424, _231, _423 * _217));
    float _433 = fma(_418, _225, fma(_424, _232, _423 * _218));
    float _437 = inversesqrt(dot(vec3(_427, _430, _433), vec3(_427, _430, _433)));
    vec4 _473 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _275) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _276) + cbTextureTilingScale._m0[11u].w));
    float _475 = _473.x;
    float _476 = 1.0 - _475;
    float _485 = (cbMtdParam._m0[19u].x + dot(vec4(_437 * _427, _437 * _430, _437 * _433, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_475 - _476) * cbMtdParam._m0[24u].z) + _476) * cbMtdParam._m0[21u].z);
    float _3565 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _493 = (_486 * ((_357.x * cbMtdParam._m0[18u].x) - _336)) + _336;
    float _494 = (_486 * ((_357.y * cbMtdParam._m0[18u].y) - _337)) + _337;
    float _495 = (_486 * ((_357.z * cbMtdParam._m0[18u].z) - _338)) + _338;
    float _500 = (((_377.z - _407) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _407;
    vec4 _513 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _275) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _276) + cbTextureTilingScale._m0[15u].w));
    float _520 = (_513.x * 2.0) + (-1.0);
    float _521 = (_513.y * 2.0) + (-1.0);
    float _522 = dot(vec2(_520, _521), vec2(_520, _521));
    float _3576 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _530 = ((_513.z - _500) * _486) + _500;
    float _540 = ((sqrt(1.0 - (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)))) - _418) * _486) + _418;
    float _543 = (((_520 - _423) * _486) + _423) + (cbMtdParam._m0[21u].x * _423);
    float _544 = (((_521 - _424) * _486) + _424) + (cbMtdParam._m0[21u].x * _424);
    float _546 = cbMtdParam._m0[22u].x + _403.w;
    float _549 = fma(_540, _223, fma(_544, _230, _543 * _216));
    float _552 = fma(_540, _224, fma(_544, _231, _543 * _217));
    float _555 = fma(_540, _225, fma(_544, _232, _543 * _218));
    float _559 = inversesqrt(dot(vec3(_549, _552, _555), vec3(_549, _552, _555)));
    float _560 = _559 * _549;
    float _561 = _559 * _552;
    float _562 = _559 * _555;
    float _3587 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _563 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3609 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3620 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3631 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _581 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _632 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _622);
    float _633 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _622);
    float _634 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _622);
    float _638 = inversesqrt(dot(vec3(_632, _633, _634), vec3(_632, _633, _634)));
    float _639 = _632 * _638;
    float _640 = _633 * _638;
    float _641 = _634 * _638;
    vec4 _646 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _648 = _646.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _805 = sqrt(((_632 * _632) + (_633 * _633)) + (_634 * _634));
        float _811 = (cbMatDynParam._m0[5u].x * _805) + cbMatDynParam._m0[5u].y;
        float _3642 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _816 = (cbMatDynParam._m0[5u].z * _805) + cbMatDynParam._m0[5u].w;
        float _3653 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) - _812)) + _812) < ((_648 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _660 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _661 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _681 = fma(_562, cbSceneParam._m0[5u].z, fma(_561, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _560));
    float _684 = fma(_562, cbSceneParam._m0[6u].z, fma(_561, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _560));
    float _687 = fma(_562, cbSceneParam._m0[7u].z, fma(_561, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _560));
    uint _700 = _256 + 9u;
    uint _701 = _700 + uint(cbMatDynParam._m0[0u].w);
    float _707 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * cbInstanceData._m0[_701].x;
    float _708 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * cbInstanceData._m0[_701].y;
    float _709 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * cbInstanceData._m0[_701].z;
    float _3664 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    vec4 _721 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _660, cbSceneParam._m0[86u].y * _661));
    float _725 = ((isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * TEXCOORD_5.w) * _721.x;
    float _726 = dot(vec3(_560, _561, _562), vec3(_639, _640, _641));
    float _729 = _726 * 2.0;
    float _733 = (_729 * _560) - _639;
    float _734 = (_729 * _561) - _640;
    float _735 = (_729 * _562) - _641;
    float _739 = abs(dot(vec3(_639, _640, _641), vec3(_560, _561, _562)));
    float _3697 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _741 = sqrt(_563);
    float _754 = exp2((_741 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_741 * 3.0));
    float _786 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _790 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1124;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _849 = fma(_794, cbModelParam._m0[26u].z, fma(_790, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _786));
        float _853 = fma(_794, cbModelParam._m0[27u].z, fma(_790, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _786));
        float _857 = fma(_794, cbModelParam._m0[28u].z, fma(_790, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _786));
        float _882 = _786 + _560;
        float _883 = _790 + _561;
        float _884 = _794 + _562;
        float _894 = fma(_884, cbModelParam._m0[26u].z, fma(_883, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _882)) - _849;
        float _895 = fma(_884, cbModelParam._m0[27u].z, fma(_883, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _882)) - _853;
        float _896 = fma(_884, cbModelParam._m0[28u].z, fma(_883, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _882)) - _857;
        float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
        float _913 = ((_900 * _894) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_849 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_900 * _895) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_853 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_900 * _896) / cbModelParam._m0[34u].z) + ((((((_857 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        float _952 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_918.x + (-0.5));
        float _954 = _952 * (_918.y + (-0.5));
        float _955 = _952 * (_918.z + (-0.5));
        float _962 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_925.x + (-0.5));
        float _964 = _962 * (_925.y + (-0.5));
        float _965 = _962 * (_925.z + (-0.5));
        float _972 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_932.x + (-0.5));
        float _974 = _972 * (_932.y + (-0.5));
        float _975 = _972 * (_932.z + (-0.5));
        float _982 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_939.x + (-0.5));
        float _984 = _982 * (_939.y + (-0.5));
        float _985 = _982 * (_939.z + (-0.5));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = _953 * 0.5;
        float _990 = _963 * 0.5;
        float _991 = _973 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1006 = (dot(vec3(_560, _561, _562), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1016 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3745 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1018 + 1.0))) + _1023) * _986;
        float _1033 = _954 * 0.5;
        float _1034 = _964 * 0.5;
        float _1035 = _974 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_560, _561, _562), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3778 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1060 + 1.0))) + _1065) * _987;
        float _1075 = _955 * 0.5;
        float _1076 = _965 * 0.5;
        float _1077 = _975 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_560, _561, _562), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3811 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1102 + 1.0))) + _1107) * _988;
        _1124 = _955;
        _1126 = _954;
        _1127 = _953;
        _1128 = _965;
        _1129 = _964;
        _1130 = _963;
        _1131 = _975;
        _1132 = _974;
        _1133 = _973;
        _1134 = _988;
        _1135 = _987;
        _1136 = _986;
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
    }
    else
    {
        _1124 = _1125;
        _1126 = _1125;
        _1127 = _1125;
        _1128 = _1125;
        _1129 = _1125;
        _1130 = _1125;
        _1131 = _1125;
        _1132 = _1125;
        _1133 = _1125;
        _1134 = _1125;
        _1135 = _1125;
        _1136 = _1125;
        _1137 = 0.0;
        _1138 = 0.0;
        _1139 = 0.0;
    }
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1167 = fma(_794, cbModelParam._m0[30u].z, fma(_790, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _786));
        float _1171 = fma(_794, cbModelParam._m0[31u].z, fma(_790, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _786));
        float _1175 = fma(_794, cbModelParam._m0[32u].z, fma(_790, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _786));
        float _1198 = _786 + _560;
        float _1199 = _790 + _561;
        float _1200 = _794 + _562;
        float _1210 = fma(_1200, cbModelParam._m0[30u].z, fma(_1199, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1198)) - _1167;
        float _1211 = fma(_1200, cbModelParam._m0[31u].z, fma(_1199, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1198)) - _1171;
        float _1212 = fma(_1200, cbModelParam._m0[32u].z, fma(_1199, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1198)) - _1175;
        float _1216 = inversesqrt(dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212)));
        float _1229 = ((_1216 * _1210) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1167 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1216 * _1211) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1171 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1216 * _1212) / cbModelParam._m0[35u].z) + ((((((_1175 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        float _1266 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1233.x + (-0.5));
        float _1268 = _1266 * (_1233.y + (-0.5));
        float _1269 = _1266 * (_1233.z + (-0.5));
        float _1276 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1240.x + (-0.5));
        float _1278 = _1276 * (_1240.y + (-0.5));
        float _1279 = _1276 * (_1240.z + (-0.5));
        float _1286 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1247.x + (-0.5));
        float _1288 = _1286 * (_1247.y + (-0.5));
        float _1289 = _1286 * (_1247.z + (-0.5));
        float _1296 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1254.x + (-0.5));
        float _1298 = _1296 * (_1254.y + (-0.5));
        float _1299 = _1296 * (_1254.z + (-0.5));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = _1267 * 0.5;
        float _1304 = _1277 * 0.5;
        float _1305 = _1287 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_560, _561, _562), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3874 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1330 + 1.0))) + _1335) * _1300;
        float _1345 = _1268 * 0.5;
        float _1346 = _1278 * 0.5;
        float _1347 = _1288 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_560, _561, _562), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _3907 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1372 + 1.0))) + _1377) * _1301;
        float _1387 = _1269 * 0.5;
        float _1388 = _1279 * 0.5;
        float _1389 = _1289 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_560, _561, _562), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _3940 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1414 + 1.0))) + _1419) * _1302;
        _1436 = _1269;
        _1437 = _1268;
        _1438 = _1267;
        _1439 = _1279;
        _1440 = _1278;
        _1441 = _1277;
        _1442 = _1289;
        _1443 = _1288;
        _1444 = _1287;
        _1445 = _1302;
        _1446 = _1301;
        _1447 = _1300;
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
    }
    else
    {
        _1436 = _1125;
        _1437 = _1125;
        _1438 = _1125;
        _1439 = _1125;
        _1440 = _1125;
        _1441 = _1125;
        _1442 = _1125;
        _1443 = _1125;
        _1444 = _1125;
        _1445 = _1125;
        _1446 = _1125;
        _1447 = _1125;
        _1448 = 0.0;
        _1449 = 0.0;
        _1450 = 0.0;
    }
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1137)) + _1137;
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1138)) + _1138;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1139)) + _1139;
    float _1483 = fma(_1462, cbSceneParam._m0[89u].z, fma(_1461, cbSceneParam._m0[89u].y, _1460 * cbSceneParam._m0[89u].x));
    float _1486 = fma(_1462, cbSceneParam._m0[90u].z, fma(_1461, cbSceneParam._m0[90u].y, _1460 * cbSceneParam._m0[90u].x));
    float _1489 = fma(_1462, cbSceneParam._m0[91u].z, fma(_1461, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1460));
    float _1504 = _733 * 0.5;
    float _1505 = _734 * 0.5;
    float _1506 = _735 * 0.5;
    float _1507 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1510 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1513 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1547;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1520 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1124, _1128, _1131, _1134));
        float _1524 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1126, _1129, _1132, _1135));
        float _1528 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1127, _1130, _1133, _1136));
        float _1535 = dot(vec4(cbModelParam._m0[39u]), vec4(_1504, _1505, _1506, 1.0));
        _1547 = dot(vec3(isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1535) ? 0.0 : (isnan(0.0) ? _1535 : max(0.0, _1535))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1547 = 1.0;
    }
    float _1558;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1549 = dot(vec4(cbModelParam._m0[40u]), vec4(_1504, _1505, _1506, 1.0));
        _1558 = dot(vec3(isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1549) ? 0.0 : (isnan(0.0) ? _1549 : max(0.0, _1549))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1558 = 1.0;
    }
    float _1562 = (_1558 * cbModelParam._m0[1u].x) + (_1547 * (1.0 - cbModelParam._m0[1u].x));
    float _1572 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _563);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1572 : min(cbModelParam._m0[25u].z, _1572));
    float _1653;
    float _1655;
    float _1657;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1620 = fma(_794, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _786)) + cbModelParam._m0[13u].w;
        float _1624 = fma(_794, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _786)) + cbModelParam._m0[14u].w;
        float _1628 = fma(_794, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _786)) + cbModelParam._m0[15u].w;
        float _1631 = fma(_735, cbModelParam._m0[13u].z, fma(_734, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _733));
        float _1634 = fma(_735, cbModelParam._m0[14u].z, fma(_734, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _733));
        float _1637 = fma(_735, cbModelParam._m0[15u].z, fma(_734, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _733));
        float _1665;
        if (_1631 > 0.0)
        {
            _1665 = abs((1.0 - _1620) / _1631);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1620 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1665 = frontier_phi_17_15_ladder;
        }
        float _1888;
        if (_1634 > 0.0)
        {
            _1888 = abs((1.0 - _1624) / _1634);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1624 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1888 = frontier_phi_26_22_ladder;
        }
        float _2134;
        if (_1637 > 0.0)
        {
            _2134 = abs((1.0 - _1628) / _1637);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1628 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2134 = frontier_phi_38_33_ladder;
        }
        float _2136 = isnan(_1888) ? _1665 : (isnan(_1665) ? _1888 : min(_1665, _1888));
        float _2137 = isnan(_2134) ? _2136 : (isnan(_2136) ? _2134 : min(_2136, _2134));
        float _2141 = (_2137 * _1631) + _1620;
        float _2142 = (_2137 * _1634) + _1624;
        float _2143 = (_2137 * _1637) + _1628;
        float _2144 = _2137 * 9.9999997473787516355514526367188e-05;
        float _2146 = (-1.0) - _2144;
        float _2148 = _2144 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2143 > _2148) || ((_2143 < _2146) || ((_2142 > _2148) || ((_2142 < _2146) || ((_2141 < _2146) || (_2141 > _2148))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2267 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2143, cbModelParam._m0[9u].z, fma(_2142, cbModelParam._m0[9u].y, _2141 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2143, cbModelParam._m0[10u].z, fma(_2142, cbModelParam._m0[10u].y, _2141 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2143, cbModelParam._m0[11u].z, fma(_2142, cbModelParam._m0[11u].y, _2141 * cbModelParam._m0[11u].x))), _1573);
            frontier_phi_16_38_ladder = _2267.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2267.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2267.x * cbModelParam._m0[1u].y;
        }
        _1653 = frontier_phi_16_38_ladder_2;
        _1655 = frontier_phi_16_38_ladder_1;
        _1657 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1641 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_733, _734, _735), _1573);
        _1653 = _1641.x * cbModelParam._m0[1u].y;
        _1655 = _1641.y * cbModelParam._m0[1u].y;
        _1657 = _1641.z * cbModelParam._m0[1u].y;
    }
    float _1661 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _563);
    float _1662 = isnan(_1661) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1661 : min(cbModelParam._m0[25u].w, _1661));
    float _1751;
    float _1753;
    float _1755;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1715 = fma(_794, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _786)) + cbModelParam._m0[21u].w;
        float _1719 = fma(_794, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _786)) + cbModelParam._m0[22u].w;
        float _1723 = fma(_794, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _786)) + cbModelParam._m0[23u].w;
        float _1726 = fma(_735, cbModelParam._m0[21u].z, fma(_734, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _733));
        float _1729 = fma(_735, cbModelParam._m0[22u].z, fma(_734, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _733));
        float _1732 = fma(_735, cbModelParam._m0[23u].z, fma(_734, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _733));
        float _1893;
        if (_1726 > 0.0)
        {
            _1893 = abs((1.0 - _1715) / _1726);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1715 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1893 = frontier_phi_28_24_ladder;
        }
        float _2161;
        if (_1729 > 0.0)
        {
            _2161 = abs((1.0 - _1719) / _1729);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1719 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2161 = frontier_phi_40_35_ladder;
        }
        float _2366;
        if (_1732 > 0.0)
        {
            _2366 = abs((1.0 - _1723) / _1732);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1723 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2366 = frontier_phi_49_46_ladder;
        }
        float _2368 = isnan(_2161) ? _1893 : (isnan(_1893) ? _2161 : min(_1893, _2161));
        float _2369 = isnan(_2366) ? _2368 : (isnan(_2368) ? _2366 : min(_2368, _2366));
        float _2373 = (_2369 * _1726) + _1715;
        float _2374 = (_2369 * _1729) + _1719;
        float _2375 = (_2369 * _1732) + _1723;
        float _2376 = _2369 * 9.9999997473787516355514526367188e-05;
        float _2377 = (-1.0) - _2376;
        float _2379 = _2376 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2375 > _2379) || ((_2375 < _2377) || ((_2374 > _2379) || ((_2374 < _2377) || ((_2373 < _2377) || (_2373 > _2379))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2574 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2375, cbModelParam._m0[17u].z, fma(_2374, cbModelParam._m0[17u].y, _2373 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2375, cbModelParam._m0[18u].z, fma(_2374, cbModelParam._m0[18u].y, _2373 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2375, cbModelParam._m0[19u].z, fma(_2374, cbModelParam._m0[19u].y, _2373 * cbModelParam._m0[19u].x))), _1662);
            frontier_phi_25_49_ladder = _2574.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2574.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2574.x * cbModelParam._m0[1u].z;
        }
        _1751 = frontier_phi_25_49_ladder_2;
        _1753 = frontier_phi_25_49_ladder_1;
        _1755 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1735 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_733, _734, _735), _1662);
        _1751 = _1735.x * cbModelParam._m0[1u].z;
        _1753 = _1735.y * cbModelParam._m0[1u].z;
        _1755 = _1735.z * cbModelParam._m0[1u].z;
    }
    float _1767 = ((((1.0 - _754) * ((_741 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_754 * _741)) * _725;
    float _1768 = _1767 * ((cbModelParam._m0[1u].w * (_1751 - _1653)) + _1653);
    float _1769 = _1767 * ((cbModelParam._m0[1u].w * (_1753 - _1655)) + _1655);
    float _1770 = _1767 * ((cbModelParam._m0[1u].w * (_1755 - _1657)) + _1657);
    float _1773 = fma(_1770, cbSceneParam._m0[89u].z, fma(_1769, cbSceneParam._m0[89u].y, _1768 * cbSceneParam._m0[89u].x));
    float _1776 = fma(_1770, cbSceneParam._m0[90u].z, fma(_1769, cbSceneParam._m0[90u].y, _1768 * cbSceneParam._m0[90u].x));
    float _1779 = fma(_1770, cbSceneParam._m0[91u].z, fma(_1769, cbSceneParam._m0[91u].y, _1768 * cbSceneParam._m0[91u].x));
    vec4 _1787 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_660, _661));
    float _1789 = _1787.w;
    float _1801 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1789);
    float _1802 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1789);
    float _1803 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1789);
    uvec4 _1807 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _1809 = _1807.x * 14u;
    uint _1810 = _1809 + 13u;
    float _1817 = _725 + (-1.0);
    float _1822 = (cbLight._m0[_1810].x * _1817) + 1.0;
    float _1823 = (cbLight._m0[_1810].y * _1817) + 1.0;
    float _1824 = (cbLight._m0[_1810].z * _1817) + 1.0;
    float _1825 = (cbLight._m0[_1810].w * _1817) + 1.0;
    uint _1826 = _1809 + 5u;
    float _1832 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
    uint _1836 = _1809 + 4u;
    float _1846 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
    uint _1850 = _1809 | 1u;
    float _1861 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_560, _561, _562));
    float _1864 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_560, _561, _562));
    float _4076 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _4087 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1869 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.3183098733425140380859375;
    float _1871 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.3183098733425140380859375;
    float _1878 = ((cbLight._m0[_1826].x * _1832) * _1871) + (((cbLight._m0[_1836].x * _1801) * _1846) * _1869);
    float _1879 = ((_1832 * cbLight._m0[_1826].y) * _1871) + (((cbLight._m0[_1836].y * _1802) * _1846) * _1869);
    float _1880 = ((_1832 * cbLight._m0[_1826].z) * _1871) + (((cbLight._m0[_1836].z * _1803) * _1846) * _1869);
    uvec4 _1885 = floatBitsToUint(cbLight._m0[_1809 + 12u]);
    bool _1887 = _1885.x == 0u;
    float _1898;
    float _1900;
    float _1902;
    if (_1887)
    {
        _1898 = _1878;
        _1900 = _1879;
        _1902 = _1880;
    }
    else
    {
        uint _1906 = _1809 + 6u;
        float _1922 = (dot(vec3(cbLight._m0[_1809 + 2u].xyz), vec3(_560, _561, _562)) * 0.5) + 0.5;
        float _1923 = _1922 * _1922;
        float _4098 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1924 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1925 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _1898 = (((cbLight._m0[_1906].x * 0.3183098733425140380859375) * _1924) * _1925) + _1878;
        _1900 = (((cbLight._m0[_1906].y * 0.3183098733425140380859375) * _1924) * _1925) + _1879;
        _1902 = (((cbLight._m0[_1906].z * 0.3183098733425140380859375) * _1924) * _1925) + _1880;
    }
    bool _1905 = _1885.y == 0u;
    float _1943;
    float _1945;
    float _1947;
    if (_1905)
    {
        _1943 = _1898;
        _1945 = _1900;
        _1947 = _1902;
    }
    else
    {
        uint _2105 = _1809 + 7u;
        float _2121 = (dot(vec3(cbLight._m0[_1809 + 3u].xyz), vec3(_560, _561, _562)) * 0.5) + 0.5;
        float _2122 = _2121 * _2121;
        float _4114 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2123 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2124 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
        _1943 = (((cbLight._m0[_2105].x * 0.3183098733425140380859375) * _2123) * _2124) + _1898;
        _1945 = (((cbLight._m0[_2105].y * 0.3183098733425140380859375) * _2123) * _2124) + _1900;
        _1947 = (((cbLight._m0[_2105].z * 0.3183098733425140380859375) * _2123) * _2124) + _1902;
    }
    uint _1950 = _1809 + 8u;
    float _1963 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1809].w)) * _563) * 0.949999988079071044921875);
    float _1964 = _1963 * _1963;
    float _1965 = cbLight._m0[_1809].x + _639;
    float _1966 = cbLight._m0[_1809].y + _640;
    float _1967 = cbLight._m0[_1809].z + _641;
    float _1971 = inversesqrt(dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967)));
    float _1972 = _1971 * _1965;
    float _1973 = _1971 * _1966;
    float _1974 = _1971 * _1967;
    float _1975 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_1809].xyz));
    float _4130 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _1979 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _1980 = dot(vec3(_560, _561, _562), vec3(_1972, _1973, _1974));
    float _4152 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _1984 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_1972, _1973, _1974));
    float _4163 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1988 = _1964 * _1964;
    float _1992 = ((_1983 * _1983) * (_1988 + (-1.0))) + 1.0;
    float _2003 = (exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2004 = 1.0 - _1964;
    float _2015 = (0.5 / (((_1979 * ((_1978 * _2004) + _1964)) + 9.9999999392252902907785028219223e-09) + (((_1979 * _2004) + _1964) * _1978))) * _1978;
    float _4174 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1988 / ((_1992 * _1992) * 3.141590118408203125));
    uint _2031 = _1809 + 9u;
    float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1850].w)) * _563) * 0.949999988079071044921875);
    float _2043 = _2042 * _2042;
    float _2044 = cbLight._m0[_1850].x + _639;
    float _2045 = cbLight._m0[_1850].y + _640;
    float _2046 = cbLight._m0[_1850].z + _641;
    float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
    float _2051 = _2050 * _2044;
    float _2052 = _2050 * _2045;
    float _2053 = _2050 * _2046;
    float _2054 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_1850].xyz));
    float _4185 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _2058 = dot(vec3(_560, _561, _562), vec3(_2051, _2052, _2053));
    float _4196 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2061 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _2062 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_2051, _2052, _2053));
    float _4207 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2066 = _2043 * _2043;
    float _2070 = ((_2061 * _2061) * (_2066 + (-1.0))) + 1.0;
    float _2079 = (exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2080 = 1.0 - _2043;
    float _2090 = (0.5 / (((_1979 * ((_2057 * _2080) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_1979 * _2080) + _2043) * _2057))) * _2057;
    float _4218 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2092 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2066 / ((_2070 * _2070) * 3.141590118408203125));
    float _2102 = (((_2079 * cbLight._m0[_2031].x) * _2092) * _1832) + ((((cbLight._m0[_1950].x * _1801) * _2003) * _2017) * _1846);
    float _2103 = (((_2079 * cbLight._m0[_2031].y) * _2092) * _1832) + ((((cbLight._m0[_1950].y * _1802) * _2003) * _2017) * _1846);
    float _2104 = (((_2079 * cbLight._m0[_2031].z) * _2092) * _1832) + ((((cbLight._m0[_1950].z * _1803) * _2003) * _2017) * _1846);
    float _2166;
    float _2168;
    float _2170;
    if (_1887)
    {
        _2166 = _2102;
        _2168 = _2103;
        _2170 = _2104;
    }
    else
    {
        uint _2172 = _1809 + 2u;
        uint _2176 = _1809 + 10u;
        float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _563) * 0.949999988079071044921875);
        float _2191 = _2190 * _2190;
        float _2192 = cbLight._m0[_2172].x + _639;
        float _2193 = cbLight._m0[_2172].y + _640;
        float _2194 = cbLight._m0[_2172].z + _641;
        float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
        float _2199 = _2198 * _2192;
        float _2200 = _2198 * _2193;
        float _2201 = _2198 * _2194;
        float _2202 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_2172].xyz));
        float _4229 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2205 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2206 = dot(vec3(_560, _561, _562), vec3(_2199, _2200, _2201));
        float _4240 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2209 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2210 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2199, _2200, _2201));
        float _4251 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2214 = _2191 * _2191;
        float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
        float _2227 = (exp2(log2(1.0 - (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2228 = 1.0 - _2191;
        float _2238 = (0.5 / (((_1979 * ((_2205 * _2228) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_1979 * _2228) + _2191) * _2205))) * _2205;
        float _4262 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2240 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
        float _2241 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
        _2166 = (((_2227 * cbLight._m0[_2176].x) * _2240) * _2241) + _2102;
        _2168 = (((_2227 * cbLight._m0[_2176].y) * _2240) * _2241) + _2103;
        _2170 = (((_2227 * cbLight._m0[_2176].z) * _2240) * _2241) + _2104;
    }
    float _2276;
    float _2278;
    float _2280;
    if (_1905)
    {
        _2276 = _2166;
        _2278 = _2168;
        _2280 = _2170;
    }
    else
    {
        uint _2287 = _1809 + 3u;
        uint _2291 = _1809 + 11u;
        float _2305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2287].w)) * _563) * 0.949999988079071044921875);
        float _2306 = _2305 * _2305;
        float _2307 = cbLight._m0[_2287].x + _639;
        float _2308 = cbLight._m0[_2287].y + _640;
        float _2309 = cbLight._m0[_2287].z + _641;
        float _2313 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
        float _2314 = _2313 * _2307;
        float _2315 = _2313 * _2308;
        float _2316 = _2313 * _2309;
        float _2317 = dot(vec3(_560, _561, _562), vec3(cbLight._m0[_2287].xyz));
        float _4278 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2320 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2321 = dot(vec3(_560, _561, _562), vec3(_2314, _2315, _2316));
        float _4289 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2324 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2325 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_2314, _2315, _2316));
        float _4300 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2329 = _2306 * _2306;
        float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
        float _2342 = (exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2343 = 1.0 - _2306;
        float _2353 = (0.5 / (((_1979 * ((_2320 * _2343) + _2306)) + 9.9999999392252902907785028219223e-09) + (((_1979 * _2343) + _2306) * _2320))) * _2320;
        float _4311 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2355 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
        float _2356 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
        _2276 = (((_2342 * cbLight._m0[_2291].x) * _2355) * _2356) + _2166;
        _2278 = (((_2342 * cbLight._m0[_2291].y) * _2355) * _2356) + _2168;
        _2280 = (((_2342 * cbLight._m0[_2291].z) * _2355) * _2356) + _2170;
    }
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    if (_1807.y == 0u)
    {
        float _2431 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2432 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2431;
        float _2433 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2431;
        float _2434 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2431;
        uvec4 _2446 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2447 = _2446.x;
        uint _2458 = uint((float(_2446.y) * floor(float(uint(cbSceneParam._m0[85u].y * _661) / _2447))) + floor(float(uint(cbSceneParam._m0[85u].x * _660) / _2447)));
        float _2468 = (log2(_2434 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2469 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        uint _2472 = uint(isnan(14.0) ? _2469 : (isnan(_2469) ? 14.0 : min(_2469, 14.0)));
        uvec4 _2477 = texelFetch(g_lightClusterGridBuffer, int(((_2472 << 2u) + (_2458 << 6u)) >> 2u));
        uint _2478 = _2477.x;
        uint _2479 = _2446.z;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        if (((((1u << ((_2479 >> 4u) & 15u)) + 4294967295u) & _2478) == 0u) || ((_2479 & 240u) == 0u))
        {
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
            _2589 = 0.0;
        }
        else
        {
            float _2580;
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2590;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            uint _2738 = 0u;
            uint _2747;
            bool _2748;
            for (;;)
            {
                _2747 = texelFetch(g_lightClassification, int((((_2472 << 5u) + (_2458 << 9u)) + (_2738 << 2u)) >> 2u)).x;
                _2748 = _2747 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2748)
                {
                    frontier_phi_66_pred = _2732;
                    frontier_phi_66_pred_1 = _2737;
                    frontier_phi_66_pred_2 = _2736;
                    frontier_phi_66_pred_3 = _2735;
                    frontier_phi_66_pred_4 = _2734;
                    frontier_phi_66_pred_5 = _2733;
                }
                else
                {
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    uint _2883;
                    _2877 = _2732;
                    _2878 = _2733;
                    _2879 = _2734;
                    _2880 = _2735;
                    _2881 = _2736;
                    _2882 = _2737;
                    _2883 = _2747;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    for (;;)
                    {
                        uint _2887 = uint(findLSB(_2883)) + (_2738 << 5u);
                        uint _2884 = (_2883 + 4294967295u) & _2883;
                        uint _2889 = _2887 * 48u;
                        vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2889)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 3u)).x));
                        uint _2909 = (_2887 * 48u) + 4u;
                        vec4 _2922 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2909)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 3u)).x));
                        uint _2928 = (_2887 * 48u) + 8u;
                        vec3 _2939 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x));
                        float _2943 = _2903.x - _2432;
                        float _2944 = _2903.y - _2433;
                        float _2945 = _2903.z - _2434;
                        float _2946 = dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945));
                        float _2949 = inversesqrt(_2946);
                        float _2950 = _2949 * _2943;
                        float _2951 = _2949 * _2944;
                        float _2952 = _2949 * _2945;
                        float _2953 = dot(vec3(_681, _684, _687), vec3(_2950, _2951, _2952));
                        float _2958 = 1.0 - (_2946 * _2903.w);
                        float _4337 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2959 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _2960 = sqrt(_2946) * _2922.w;
                        float _2963 = 1.39999997615814208984375 / (_2960 + 1.39999997615814208984375);
                        float _2964 = _2963 * _2963;
                        float _2967 = ((1.0 - _2964) * _2953) + _2964;
                        float _2970 = _2960 * _2960;
                        float _2974 = ((isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0))) * _2959) / ((_2970 * 0.699999988079071044921875) + 1.0);
                        float _2978 = (-0.0) - _2432;
                        float _2979 = (-0.0) - _2433;
                        float _2980 = (-0.0) - _2434;
                        float _2984 = inversesqrt(dot(vec3(_2978, _2979, _2980), vec3(_2978, _2979, _2980)));
                        float _2985 = _2984 * _2978;
                        float _2986 = _2984 * _2979;
                        float _2987 = _2984 * _2980;
                        float _2995 = exp2(log2(1.0 / ((_2970 * 3.5) + 5.0)) * 0.25);
                        float _2996 = 1.0 - _741;
                        float _3003 = sqrt(1.0 - ((1.0 - (_2996 * _2996)) * (1.0 - (_2995 * _2995))));
                        float _3004 = _3003 * _3003;
                        float _3005 = _3004 * _3004;
                        float _3006 = _2985 + _2950;
                        float _3007 = _2986 + _2951;
                        float _3008 = _2987 + _2952;
                        float _3012 = inversesqrt(dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008)));
                        float _3016 = dot(vec3(_681, _684, _687), vec3(_2985, _2986, _2987));
                        float _4353 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3019 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _3020 = dot(vec3(_681, _684, _687), vec3(_3012 * _3006, _3012 * _3007, _3012 * _3008));
                        float _4364 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3023 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3027 = ((_3023 * _3023) * (_3005 + (-1.0))) + 1.0;
                        float _3028 = _2963 * _3004;
                        float _3029 = _3028 * _3028;
                        float _3032 = ((1.0 - _3029) * _2953) + _3029;
                        float _4375 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3033 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _3034 = 1.0 - _3004;
                        float _3044 = (0.5 / (((_3033 * ((_3019 * _3034) + _3004)) + 9.9999999392252902907785028219223e-09) + (((_3033 * _3034) + _3004) * _3019))) * _3033;
                        float _4386 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3055 = (((_3005 * 3.1415927410125732421875) * (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) / ((_3027 * _3027) * ((_2970 * 2.1991131305694580078125) + 3.141590118408203125))) * _2959;
                        _2807 = (_2974 * _2922.x) + _2880;
                        _2808 = (_2974 * _2922.y) + _2881;
                        _2809 = (_2974 * _2922.z) + _2882;
                        _2804 = (_3055 * _2939.x) + _2877;
                        _2805 = (_3055 * _2939.y) + _2878;
                        _2806 = (_3055 * _2939.z) + _2879;
                        if (_2884 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2877 = _2804;
                            _2878 = _2805;
                            _2879 = _2806;
                            _2880 = _2807;
                            _2881 = _2808;
                            _2882 = _2809;
                            _2883 = _2884;
                        }
                    }
                    frontier_phi_66_pred = _2804;
                    frontier_phi_66_pred_1 = _2809;
                    frontier_phi_66_pred_2 = _2808;
                    frontier_phi_66_pred_3 = _2807;
                    frontier_phi_66_pred_4 = _2806;
                    frontier_phi_66_pred_5 = _2805;
                }
                _2580 = frontier_phi_66_pred;
                _2590 = frontier_phi_66_pred_1;
                _2588 = frontier_phi_66_pred_2;
                _2586 = frontier_phi_66_pred_3;
                _2584 = frontier_phi_66_pred_4;
                _2582 = frontier_phi_66_pred_5;
                uint _2739 = _2738 + 1u;
                if (_2739 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2732 = _2580;
                    _2733 = _2582;
                    _2734 = _2584;
                    _2735 = _2586;
                    _2736 = _2588;
                    _2737 = _2590;
                    _2738 = _2739;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
            _2589 = _2590;
        }
        uvec4 _2593 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2594 = _2593.z;
        uint _2596 = (_2594 >> 8u) & 15u;
        float _2700;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        if (((4294967295u << _2596) & _2478) == 0u)
        {
            _2700 = _2579;
            _2702 = _2581;
            _2704 = _2583;
            _2706 = _2585;
            _2708 = _2587;
            _2710 = _2589;
        }
        else
        {
            float _2725 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
            float _2726 = _2725 * _2432;
            float _2727 = _2725 * _2433;
            float _2728 = _2725 * _2434;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2596 < ((_2594 >> 12u) & 15u))
            {
                float _2701;
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2711;
                float _2860 = _2579;
                float _2861 = _2581;
                float _2862 = _2583;
                float _2863 = _2585;
                float _2864 = _2587;
                float _2865 = _2589;
                uint _2866 = _2596;
                uint _2875;
                bool _2876;
                for (;;)
                {
                    _2875 = texelFetch(g_lightClassification, int((((_2472 << 5u) + (_2458 << 9u)) + (_2866 << 2u)) >> 2u)).x;
                    _2876 = _2875 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2876)
                    {
                        frontier_phi_77_pred = _2865;
                        frontier_phi_77_pred_1 = _2864;
                        frontier_phi_77_pred_2 = _2863;
                        frontier_phi_77_pred_3 = _2862;
                        frontier_phi_77_pred_4 = _2861;
                        frontier_phi_77_pred_5 = _2860;
                    }
                    else
                    {
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3082 = _2860;
                        float _3083 = _2861;
                        float _3084 = _2862;
                        float _3085 = _2863;
                        float _3086 = _2864;
                        float _3087 = _2865;
                        uint _3088 = _2875;
                        uint _3089;
                        vec4 _3114;
                        float _3115;
                        vec4 _3130;
                        vec3 _3142;
                        vec4 _3157;
                        vec4 _3172;
                        float _3218;
                        bool _3219;
                        for (;;)
                        {
                            uint _3099 = ((_2866 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3088));
                            _3089 = (_3088 + 4294967295u) & _3088;
                            uint _3101 = _3099 * 40u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            _3115 = _3114.w;
                            uint _3117 = (_3099 * 40u) + 4u;
                            _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            uint _3132 = (_3099 * 40u) + 8u;
                            _3142 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x));
                            uint _3144 = (_3099 * 40u) + 16u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3159 = (_3099 * 40u) + 20u;
                            _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3174 = (_3099 * 40u) + 24u;
                            vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3193 = (_3099 * 40u) + 28u;
                            vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            _3218 = fma(_2434, _3206.z, fma(_2433, _3206.y, _3206.x * _2432)) + _3206.w;
                            _3219 = !((fma(_2434, _3187.z, fma(_2433, _3187.y, _3187.x * _2432)) + _3187.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3219)
                            {
                                float _3246 = _3114.x - _2432;
                                float _3247 = _3114.y - _2433;
                                float _3248 = _3114.z - _2434;
                                float _3249 = dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248));
                                float _3252 = inversesqrt(_3249);
                                float _3253 = _3252 * _3246;
                                float _3254 = _3252 * _3247;
                                float _3255 = _3252 * _3248;
                                float _3259 = 1.0 - (_3249 / (_3115 * _3115));
                                float _4397 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3260 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3264 = sqrt(_3249) * _3130.w;
                                float _3266 = 1.39999997615814208984375 / (_3264 + 1.39999997615814208984375);
                                float _3267 = _3266 * _3266;
                                float _3270 = ((1.0 - _3267) * dot(vec3(_3253, _3254, _3255), vec3(_681, _684, _687))) + _3267;
                                float _3273 = _3264 * _3264;
                                float _3277 = (fma(_2434, _3157.z, fma(_2433, _3157.y, _3157.x * _2432)) + _3157.w) / _3218;
                                float _3278 = (fma(_2434, _3172.z, fma(_2433, _3172.y, _3172.x * _2432)) + _3172.w) / _3218;
                                float _3282 = 1.0 - dot(vec2(_3277, _3278), vec2(_3277, _3278));
                                float _4413 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3284 = _3283 * (((isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))) * _3260) / ((_3273 * 0.699999988079071044921875) + 1.0));
                                float _3296 = exp2(log2(1.0 / ((_3273 * 3.5) + 5.0)) * 0.25);
                                float _3297 = 1.0 - _741;
                                float _3304 = sqrt(1.0 - ((1.0 - (_3297 * _3297)) * (1.0 - (_3296 * _3296))));
                                float _3305 = _3304 * _3304;
                                float _3306 = _3305 * _3305;
                                float _3307 = _3253 - _2726;
                                float _3308 = _3254 - _2727;
                                float _3309 = _3255 - _2728;
                                float _3313 = inversesqrt(dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309)));
                                float _3317 = dot(vec3(_681, _684, _687), vec3((-0.0) - _2726, (-0.0) - _2727, (-0.0) - _2728));
                                float _4424 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3320 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3321 = dot(vec3(_681, _684, _687), vec3(_3313 * _3307, _3313 * _3308, _3313 * _3309));
                                float _4435 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3324 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3328 = ((_3324 * _3324) * (_3306 + (-1.0))) + 1.0;
                                float _3329 = _3266 * _3305;
                                float _3330 = _3329 * _3329;
                                float _3336 = ((1.0 - _3330) * dot(vec3(_681, _684, _687), vec3(_3253, _3254, _3255))) + _3330;
                                float _4446 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3337 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3338 = 1.0 - _3305;
                                float _3348 = (0.5 / (((_3337 * ((_3320 * _3338) + _3305)) + 9.9999999392252902907785028219223e-09) + (((_3337 * _3338) + _3305) * _3320))) * _3337;
                                float _4457 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3358 = (_3283 * _3260) * (((_3306 * 3.1415927410125732421875) * (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) / ((_3328 * _3328) * ((_3273 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3284 * _3130.y;
                                frontier_phi_83_pred_1 = _3284 * _3130.x;
                                frontier_phi_83_pred_2 = _3358 * _3142.z;
                                frontier_phi_83_pred_3 = _3358 * _3142.y;
                                frontier_phi_83_pred_4 = _3358 * _3142.x;
                                frontier_phi_83_pred_5 = _3284 * _3130.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3366 = frontier_phi_83_pred;
                            _3365 = frontier_phi_83_pred_1;
                            _3364 = frontier_phi_83_pred_2;
                            _3363 = frontier_phi_83_pred_3;
                            _3362 = frontier_phi_83_pred_4;
                            _3367 = frontier_phi_83_pred_5;
                            _3072 = _3365 + _3085;
                            _3073 = _3366 + _3086;
                            _3074 = _3367 + _3087;
                            _3069 = _3362 + _3082;
                            _3070 = _3363 + _3083;
                            _3071 = _3364 + _3084;
                            if (_3089 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3089;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3074;
                        frontier_phi_77_pred_1 = _3073;
                        frontier_phi_77_pred_2 = _3072;
                        frontier_phi_77_pred_3 = _3071;
                        frontier_phi_77_pred_4 = _3070;
                        frontier_phi_77_pred_5 = _3069;
                    }
                    _2711 = frontier_phi_77_pred;
                    _2709 = frontier_phi_77_pred_1;
                    _2707 = frontier_phi_77_pred_2;
                    _2705 = frontier_phi_77_pred_3;
                    _2703 = frontier_phi_77_pred_4;
                    _2701 = frontier_phi_77_pred_5;
                    uint _2867 = _2866 + 1u;
                    if (_2867 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2860 = _2701;
                        _2861 = _2703;
                        _2862 = _2705;
                        _2863 = _2707;
                        _2864 = _2709;
                        _2865 = _2711;
                        _2866 = _2867;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2705;
                frontier_phi_58_59_ladder_1 = _2711;
                frontier_phi_58_59_ladder_2 = _2709;
                frontier_phi_58_59_ladder_3 = _2707;
                frontier_phi_58_59_ladder_4 = _2703;
                frontier_phi_58_59_ladder_5 = _2701;
            }
            else
            {
                frontier_phi_58_59_ladder = _2583;
                frontier_phi_58_59_ladder_1 = _2589;
                frontier_phi_58_59_ladder_2 = _2587;
                frontier_phi_58_59_ladder_3 = _2585;
                frontier_phi_58_59_ladder_4 = _2581;
                frontier_phi_58_59_ladder_5 = _2579;
            }
            _2700 = frontier_phi_58_59_ladder_5;
            _2702 = frontier_phi_58_59_ladder_4;
            _2704 = frontier_phi_58_59_ladder;
            _2706 = frontier_phi_58_59_ladder_3;
            _2708 = frontier_phi_58_59_ladder_2;
            _2710 = frontier_phi_58_59_ladder_1;
        }
        float _2715 = isnan(1.0) ? _725 : (isnan(_725) ? 1.0 : min(_725, 1.0));
        _2491 = (_2715 * _2706) + _1943;
        _2493 = (_2715 * _2708) + _1945;
        _2495 = (_2715 * _2710) + _1947;
        _2497 = ((_2700 * 0.039999999105930328369140625) * _2715) + _2276;
        _2499 = ((_2702 * 0.039999999105930328369140625) * _2715) + _2278;
        _2501 = ((_2704 * 0.039999999105930328369140625) * _2715) + _2280;
    }
    else
    {
        _2491 = _1943;
        _2493 = _1945;
        _2495 = _1947;
        _2497 = _2276;
        _2499 = _2278;
        _2501 = _2280;
    }
    float _4473 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4484 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4495 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _2518 = ((isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2491 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _725))) + ((_2497 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1562)) * cbPerFrame._m0[3u].x);
    float _2519 = ((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2493 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _725))) + ((_2499 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1562)) * cbPerFrame._m0[3u].x);
    float _2520 = ((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2495 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _725))) + ((_2501 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1562)) * cbPerFrame._m0[3u].x);
    uint _2521 = _256 + 6u;
    float _2529 = _660 / cbSceneParam._m0[86u].x;
    float _2530 = _661 / cbSceneParam._m0[86u].y;
    vec4 _2544 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2529, _2530, (log2((isnan(cbSceneParam._m0[77u].w) ? _581 : (isnan(_581) ? cbSceneParam._m0[77u].w : min(_581, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2546 = _2544.x;
    float _2547 = _2544.y;
    float _2548 = _2544.z;
    float _2549 = _2544.w;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    if (_581 > cbSceneParam._m0[78u].w)
    {
        float _2604 = isnan(_581) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _581 : min(cbSceneParam._m0[80u].w, _581));
        float _2605 = _2604 / _581;
        float _2616 = _2605 * _632;
        float _2617 = _633 * _2605;
        float _2618 = (-0.0) - _2617;
        float _2620 = _2605 * _634;
        float _2622 = (cbSceneParam._m0[77u].w * _2618) / _2604;
        float _2623 = _2622 + cbSceneParam._m0[79u].w;
        float _2624 = cbSceneParam._m0[79u].w - _2617;
        float _2630 = sqrt(((_2616 * _2616) + (_2617 * _2617)) + (_2620 * _2620));
        float _2633 = (1.0 - (cbSceneParam._m0[77u].w / _2604)) * _2630;
        float _2638 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2640 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2817;
        if (abs((_2618 - _2622) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2817 = ((((_2623 > 0.0) ? exp2(_2638 * _2623) : (2.0 - exp2(_2640 * _2623))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2633;
        }
        else
        {
            float _2761 = 1.0 / cbSceneParam._m0[80u].x;
            float _2762 = isnan(_2624) ? _2623 : (isnan(_2623) ? _2624 : max(_2623, _2624));
            float _2763 = isnan(_2624) ? _2623 : (isnan(_2623) ? _2624 : min(_2623, _2624));
            float _2772 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : min(_2762, 0.0));
            float _2773 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : min(_2763, 0.0));
            _2817 = ((abs(_2630 / _2618) * cbSceneParam._m0[80u].y) * ((((_2772 - _2773) * 2.0) - ((exp2(_2638 * (isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0)))) - exp2(_2638 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0))))) * _2761)) - ((exp2(_2640 * _2772) - exp2(_2640 * _2773)) * _2761))) + (_2633 * cbSceneParam._m0[80u].z);
        }
        vec4 _2819 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2529, _2530, 1.0), 0.0);
        float _2828 = exp2((_2817 * (-1.44269502162933349609375)) * (1.0 - _2819.w));
        float _2829 = log2(_2828);
        float _2845 = log2(_2549);
        _2642 = (exp2(_2845 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].x)) * _2819.x) / cbSceneParam._m0[78u].x)) + _2546;
        _2644 = (exp2(_2845 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].y)) * _2819.y) / cbSceneParam._m0[78u].y)) + _2547;
        _2646 = (exp2(_2845 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2829 * cbSceneParam._m0[78u].z)) * _2819.z) / cbSceneParam._m0[78u].z)) + _2548;
        _2648 = _2828 * _2549;
    }
    else
    {
        _2642 = _2546;
        _2644 = _2547;
        _2646 = _2548;
        _2648 = _2549;
    }
    bool _2855;
    vec4 _2658;
    vec4 _2680;
    float _2682;
    float _2686;
    float _2687;
    float _2688;
    float _2689;
    bool _2699;
    for (;;)
    {
        _2658 = cbMatDynParam._m0[0u];
        float _2660 = roundEven(_2658.y);
        bool _2661 = _2660 == 3.0;
        float _2662 = log2(_2648);
        float _2669 = exp2(_2662 * cbSceneParam._m0[78u].x) * _2518;
        float _2670 = exp2(_2662 * cbSceneParam._m0[78u].y) * _2519;
        float _2671 = exp2(_2662 * cbSceneParam._m0[78u].z) * _2520;
        float _2678 = _648 + (-0.5);
        _2680 = cbMtdParam._m0[1u];
        _2682 = _2680.y * _2678;
        float _2685 = (_2660 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2686 = _2685 * (_2661 ? _2669 : (_2669 + (cbSceneParam._m0[72u].w * _2642)));
        _2687 = _2685 * (_2661 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2644)));
        _2688 = _2685 * (_2661 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2646)));
        _2689 = _2678 * 0.999000012874603271484375;
        _2699 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2699)
        {
            if ((cbInstanceData._m0[_256 + 7u].x + _2689) < 0.5)
            {
                _2855 = true;
                break;
            }
        }
        uint _2796 = _700 + uint(_2658.w);
        if ((cbInstanceData._m0[_2796].w < 1.0) && ((cbInstanceData._m0[_2796].w + _2689) < 0.5))
        {
            _2855 = true;
            break;
        }
        if ((_2682 + 1.0) < _2680.x)
        {
            _2855 = true;
            break;
        }
        _2855 = false;
        break;
    }
    float _3060;
    if (_2855)
    {
        discard_state = true;
        _3060 = 0.0;
    }
    else
    {
        _3060 = cbInstanceData._m0[_2521].w;
    }
    SV_Target.x = _2686;
    SV_Target.y = _2687;
    SV_Target.z = _2688;
    SV_Target.w = _3060;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2521].w;
    discard_exit();
}


