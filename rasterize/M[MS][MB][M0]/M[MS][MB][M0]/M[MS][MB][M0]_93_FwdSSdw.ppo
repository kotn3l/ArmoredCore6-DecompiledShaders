#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1252;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _368 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _368) * cbMtdParam._m0[24u].x) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3582 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _393 = (_386 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _394 = (_386 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _395 = (_386 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _413 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _455 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _457 = _455.x;
    float _458 = _455.y;
    float _459 = _455.z;
    float _468 = ((_438.z - _459) * _386) + _459;
    float _471 = ((((_438.x - _457) * _386) + _457) * 2.0) + (-1.0);
    float _472 = ((((_438.y - _458) * _386) + _458) * 2.0) + (-1.0);
    float _473 = dot(vec2(_471, _472), vec2(_471, _472));
    float _3593 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _478 = sqrt(1.0 - (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))));
    vec4 _494 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _519 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _521 = _519.x;
    float _522 = 1.0 - _521;
    float _528 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _531 = ((isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : min(_528, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _540 = (_531 - ((((((_521 - _522) * cbMtdParam._m0[24u].z) + _522) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _531))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3614 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _548 = (_541 * (cbMtdParam._m0[17u].x - _393)) + _393;
    float _549 = (_541 * (cbMtdParam._m0[17u].y - _394)) + _394;
    float _550 = (_541 * (cbMtdParam._m0[17u].z - _395)) + _395;
    vec4 _562 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _564 = _562.x;
    float _565 = 1.0 - _564;
    float _592 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_564 - _565) * cbMtdParam._m0[24u].w) + _565) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3625 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _601 = ((((cbMtdParam._m0[10u].x - _548) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _593) + _548;
    float _602 = ((((cbMtdParam._m0[10u].y - _549) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _593) + _549;
    float _603 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _550)) * _593) + _550;
    float _608 = (((_413.z - _468) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _468;
    float _612 = ((_494.z - _608) * cbMtdParam._m0[19u].w) + _608;
    vec4 _626 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _633 = (_626.x * 2.0) + (-1.0);
    float _634 = (_626.y * 2.0) + (-1.0);
    float _635 = dot(vec2(_633, _634), vec2(_633, _634));
    float _3636 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _643 = (_541 * (_626.z - _612)) + _612;
    float _646 = ((cbMtdParam._m0[23u].y - _643) * _593) + _643;
    vec4 _665 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _671 = (_665.x * 2.0) + (-1.0);
    float _672 = (_665.y * 2.0) + (-1.0);
    float _673 = dot(vec2(_671, _672), vec2(_671, _672));
    float _3647 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _687 = (_471 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_413.x * 2.0) + (-1.0)))) + (((_494.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _688 = (_472 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_413.y * 2.0) + (-1.0)))) + (((_494.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _700 = (((_633 - _687) + (cbMtdParam._m0[21u].x * _687)) * _541) + _687;
    float _701 = (((_634 - _688) + (cbMtdParam._m0[21u].x * _688)) * _541) + _688;
    float _702 = (_541 * (sqrt(1.0 - (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) - _478)) + _478;
    float _713 = (((_671 - _700) + (_700 * cbMtdParam._m0[22u].z)) * _593) + _700;
    float _714 = (((_672 - _701) + (_701 * cbMtdParam._m0[22u].z)) * _593) + _701;
    float _715 = ((sqrt(1.0 - (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) - _702) * _593) + _702;
    float _717 = cbMtdParam._m0[22u].x + _494.w;
    float _720 = fma(_715, _238 * NORMAL.x, fma(_714, _245 * TANGENT.x, (_231 * _223) * _713));
    float _723 = fma(_715, _238 * NORMAL.y, fma(_714, _245 * TANGENT.y, (_231 * _224) * _713));
    float _726 = fma(_715, _238 * NORMAL.z, fma(_714, _245 * TANGENT.z, (_231 * _225) * _713));
    float _730 = inversesqrt(dot(vec3(_720, _723, _726), vec3(_720, _723, _726)));
    float _731 = _730 * _720;
    float _732 = _730 * _723;
    float _733 = _730 * _726;
    float _3658 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _734 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _3680 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3691 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3702 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _752 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _803 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _793);
    float _804 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _793);
    float _805 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _793);
    float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
    float _810 = _803 * _809;
    float _811 = _804 * _809;
    float _812 = _805 * _809;
    float _818 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _819 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _837 = fma(_733, cbSceneParam._m0[5u].z, fma(_732, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _731));
    float _840 = fma(_733, cbSceneParam._m0[6u].z, fma(_732, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _731));
    float _843 = fma(_733, cbSceneParam._m0[7u].z, fma(_732, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _731));
    uint _857 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _863 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * cbInstanceData._m0[_857].x;
    float _864 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * cbInstanceData._m0[_857].y;
    float _865 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * cbInstanceData._m0[_857].z;
    float _3713 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    vec4 _877 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _818, cbSceneParam._m0[86u].y * _819));
    float _881 = ((isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * TEXCOORD_5.w) * _877.x;
    float _882 = dot(vec3(_731, _732, _733), vec3(_810, _811, _812));
    float _885 = _882 * 2.0;
    float _889 = (_885 * _731) - _810;
    float _890 = (_885 * _732) - _811;
    float _891 = (_885 * _733) - _812;
    float _895 = abs(dot(vec3(_810, _811, _812), vec3(_731, _732, _733)));
    float _3746 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _897 = sqrt(_734);
    float _910 = exp2((_897 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_897 * 3.0));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1251;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _976 = fma(_950, cbModelParam._m0[26u].z, fma(_946, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _942));
        float _980 = fma(_950, cbModelParam._m0[27u].z, fma(_946, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _942));
        float _984 = fma(_950, cbModelParam._m0[28u].z, fma(_946, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _942));
        float _1009 = _942 + _731;
        float _1010 = _946 + _732;
        float _1011 = _950 + _733;
        float _1021 = fma(_1011, cbModelParam._m0[26u].z, fma(_1010, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009)) - _976;
        float _1022 = fma(_1011, cbModelParam._m0[27u].z, fma(_1010, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009)) - _980;
        float _1023 = fma(_1011, cbModelParam._m0[28u].z, fma(_1010, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009)) - _984;
        float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
        float _1040 = ((_1027 * _1021) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_976 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1027 * _1022) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_980 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1027 * _1023) / cbModelParam._m0[34u].z) + ((((((_984 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        float _1079 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1045.x + (-0.5));
        float _1081 = _1079 * (_1045.y + (-0.5));
        float _1082 = _1079 * (_1045.z + (-0.5));
        float _1089 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1052.x + (-0.5));
        float _1091 = _1089 * (_1052.y + (-0.5));
        float _1092 = _1089 * (_1052.z + (-0.5));
        float _1099 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1059.x + (-0.5));
        float _1101 = _1099 * (_1059.y + (-0.5));
        float _1102 = _1099 * (_1059.z + (-0.5));
        float _1109 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1066.x + (-0.5));
        float _1111 = _1109 * (_1066.y + (-0.5));
        float _1112 = _1109 * (_1066.z + (-0.5));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = _1080 * 0.5;
        float _1117 = _1090 * 0.5;
        float _1118 = _1100 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1133 = (dot(vec3(_731, _732, _733), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1143 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3794 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1145 + 1.0))) + _1150) * _1113;
        float _1160 = _1081 * 0.5;
        float _1161 = _1091 * 0.5;
        float _1162 = _1101 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_731, _732, _733), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3827 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1187 + 1.0))) + _1192) * _1114;
        float _1202 = _1082 * 0.5;
        float _1203 = _1092 * 0.5;
        float _1204 = _1102 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_731, _732, _733), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3860 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1229 + 1.0))) + _1234) * _1115;
        _1251 = _1082;
        _1253 = _1081;
        _1254 = _1080;
        _1255 = _1092;
        _1256 = _1091;
        _1257 = _1090;
        _1258 = _1102;
        _1259 = _1101;
        _1260 = _1100;
        _1261 = _1115;
        _1262 = _1114;
        _1263 = _1113;
        _1264 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
    }
    else
    {
        _1251 = _1252;
        _1253 = _1252;
        _1254 = _1252;
        _1255 = _1252;
        _1256 = _1252;
        _1257 = _1252;
        _1258 = _1252;
        _1259 = _1252;
        _1260 = _1252;
        _1261 = _1252;
        _1262 = _1252;
        _1263 = _1252;
        _1264 = 0.0;
        _1265 = 0.0;
        _1266 = 0.0;
    }
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1291 = fma(_950, cbModelParam._m0[30u].z, fma(_946, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _942));
        float _1295 = fma(_950, cbModelParam._m0[31u].z, fma(_946, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _942));
        float _1299 = fma(_950, cbModelParam._m0[32u].z, fma(_946, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _942));
        float _1322 = _942 + _731;
        float _1323 = _946 + _732;
        float _1324 = _950 + _733;
        float _1334 = fma(_1324, cbModelParam._m0[30u].z, fma(_1323, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1322)) - _1291;
        float _1335 = fma(_1324, cbModelParam._m0[31u].z, fma(_1323, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1322)) - _1295;
        float _1336 = fma(_1324, cbModelParam._m0[32u].z, fma(_1323, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1322)) - _1299;
        float _1340 = inversesqrt(dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336)));
        float _1353 = ((_1340 * _1334) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1291 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1354 = ((_1340 * _1335) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1295 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1355 = ((_1340 * _1336) / cbModelParam._m0[35u].z) + ((((((_1299 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1353, _1354, _1355), 0.0);
        float _1390 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1357.x + (-0.5));
        float _1392 = _1390 * (_1357.y + (-0.5));
        float _1393 = _1390 * (_1357.z + (-0.5));
        float _1400 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1364.x + (-0.5));
        float _1402 = _1400 * (_1364.y + (-0.5));
        float _1403 = _1400 * (_1364.z + (-0.5));
        float _1410 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1371.x + (-0.5));
        float _1412 = _1410 * (_1371.y + (-0.5));
        float _1413 = _1410 * (_1371.z + (-0.5));
        float _1420 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1378.x + (-0.5));
        float _1422 = _1420 * (_1378.y + (-0.5));
        float _1423 = _1420 * (_1378.z + (-0.5));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = _1391 * 0.5;
        float _1428 = _1401 * 0.5;
        float _1429 = _1411 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_731, _732, _733), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _3923 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1454 + 1.0))) + _1459) * _1424;
        float _1469 = _1392 * 0.5;
        float _1470 = _1402 * 0.5;
        float _1471 = _1412 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_731, _732, _733), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _3956 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1496 + 1.0))) + _1501) * _1425;
        float _1511 = _1393 * 0.5;
        float _1512 = _1403 * 0.5;
        float _1513 = _1413 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_731, _732, _733), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _3989 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1538 + 1.0))) + _1543) * _1426;
        _1560 = _1393;
        _1561 = _1392;
        _1562 = _1391;
        _1563 = _1403;
        _1564 = _1402;
        _1565 = _1401;
        _1566 = _1413;
        _1567 = _1412;
        _1568 = _1411;
        _1569 = _1426;
        _1570 = _1425;
        _1571 = _1424;
        _1572 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
        _1573 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
    }
    else
    {
        _1560 = _1252;
        _1561 = _1252;
        _1562 = _1252;
        _1563 = _1252;
        _1564 = _1252;
        _1565 = _1252;
        _1566 = _1252;
        _1567 = _1252;
        _1568 = _1252;
        _1569 = _1252;
        _1570 = _1252;
        _1571 = _1252;
        _1572 = 0.0;
        _1573 = 0.0;
        _1574 = 0.0;
    }
    float _1584 = (cbModelParam._m0[1u].x * (_1572 - _1264)) + _1264;
    float _1585 = (cbModelParam._m0[1u].x * (_1573 - _1265)) + _1265;
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1266)) + _1266;
    float _1607 = fma(_1586, cbSceneParam._m0[89u].z, fma(_1585, cbSceneParam._m0[89u].y, _1584 * cbSceneParam._m0[89u].x));
    float _1610 = fma(_1586, cbSceneParam._m0[90u].z, fma(_1585, cbSceneParam._m0[90u].y, _1584 * cbSceneParam._m0[90u].x));
    float _1613 = fma(_1586, cbSceneParam._m0[91u].z, fma(_1585, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1584));
    float _1628 = _889 * 0.5;
    float _1629 = _890 * 0.5;
    float _1630 = _891 * 0.5;
    float _1631 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1634 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1561, _1564, _1567, _1570));
    float _1637 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1560, _1563, _1566, _1569));
    float _1671;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1644 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1251, _1255, _1258, _1261));
        float _1648 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1253, _1256, _1259, _1262));
        float _1652 = dot(vec4(_1628, _1629, _1630, 1.0), vec4(_1254, _1257, _1260, _1263));
        float _1659 = dot(vec4(cbModelParam._m0[39u]), vec4(_1628, _1629, _1630, 1.0));
        _1671 = dot(vec3(isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1659) ? 0.0 : (isnan(0.0) ? _1659 : max(0.0, _1659))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1671 = 1.0;
    }
    float _1682;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1673 = dot(vec4(cbModelParam._m0[40u]), vec4(_1628, _1629, _1630, 1.0));
        _1682 = dot(vec3(isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1673) ? 0.0 : (isnan(0.0) ? _1673 : max(0.0, _1673))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1682 = 1.0;
    }
    float _1686 = (_1682 * cbModelParam._m0[1u].x) + (_1671 * (1.0 - cbModelParam._m0[1u].x));
    float _1696 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _734);
    float _1697 = isnan(_1696) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1696 : min(cbModelParam._m0[25u].z, _1696));
    float _1778;
    float _1780;
    float _1782;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1745 = fma(_950, cbModelParam._m0[13u].z, fma(_946, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _942)) + cbModelParam._m0[13u].w;
        float _1749 = fma(_950, cbModelParam._m0[14u].z, fma(_946, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _942)) + cbModelParam._m0[14u].w;
        float _1753 = fma(_950, cbModelParam._m0[15u].z, fma(_946, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _942)) + cbModelParam._m0[15u].w;
        float _1756 = fma(_891, cbModelParam._m0[13u].z, fma(_890, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _889));
        float _1759 = fma(_891, cbModelParam._m0[14u].z, fma(_890, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _889));
        float _1762 = fma(_891, cbModelParam._m0[15u].z, fma(_890, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _889));
        float _1790;
        if (_1756 > 0.0)
        {
            _1790 = abs((1.0 - _1745) / _1756);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1745 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1790 = frontier_phi_14_12_ladder;
        }
        float _2012;
        if (_1759 > 0.0)
        {
            _2012 = abs((1.0 - _1749) / _1759);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1749 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2012 = frontier_phi_23_19_ladder;
        }
        float _2258;
        if (_1762 > 0.0)
        {
            _2258 = abs((1.0 - _1753) / _1762);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1753 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2258 = frontier_phi_35_30_ladder;
        }
        float _2260 = isnan(_2012) ? _1790 : (isnan(_1790) ? _2012 : min(_1790, _2012));
        float _2261 = isnan(_2258) ? _2260 : (isnan(_2260) ? _2258 : min(_2260, _2258));
        float _2265 = (_2261 * _1756) + _1745;
        float _2266 = (_2261 * _1759) + _1749;
        float _2267 = (_2261 * _1762) + _1753;
        float _2268 = _2261 * 9.9999997473787516355514526367188e-05;
        float _2270 = (-1.0) - _2268;
        float _2272 = _2268 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2267 > _2272) || ((_2267 < _2270) || ((_2266 > _2272) || ((_2266 < _2270) || ((_2265 < _2270) || (_2265 > _2272))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2267, cbModelParam._m0[9u].z, fma(_2266, cbModelParam._m0[9u].y, _2265 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2267, cbModelParam._m0[10u].z, fma(_2266, cbModelParam._m0[10u].y, _2265 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2267, cbModelParam._m0[11u].z, fma(_2266, cbModelParam._m0[11u].y, _2265 * cbModelParam._m0[11u].x))), _1697);
            frontier_phi_13_35_ladder = _2391.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2391.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2391.x * cbModelParam._m0[1u].y;
        }
        _1778 = frontier_phi_13_35_ladder_2;
        _1780 = frontier_phi_13_35_ladder_1;
        _1782 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1766 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_889, _890, _891), _1697);
        _1778 = _1766.x * cbModelParam._m0[1u].y;
        _1780 = _1766.y * cbModelParam._m0[1u].y;
        _1782 = _1766.z * cbModelParam._m0[1u].y;
    }
    float _1786 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _734);
    float _1787 = isnan(_1786) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1786 : min(cbModelParam._m0[25u].w, _1786));
    float _1877;
    float _1879;
    float _1881;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1841 = fma(_950, cbModelParam._m0[21u].z, fma(_946, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _942)) + cbModelParam._m0[21u].w;
        float _1845 = fma(_950, cbModelParam._m0[22u].z, fma(_946, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _942)) + cbModelParam._m0[22u].w;
        float _1849 = fma(_950, cbModelParam._m0[23u].z, fma(_946, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _942)) + cbModelParam._m0[23u].w;
        float _1852 = fma(_891, cbModelParam._m0[21u].z, fma(_890, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _889));
        float _1855 = fma(_891, cbModelParam._m0[22u].z, fma(_890, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _889));
        float _1858 = fma(_891, cbModelParam._m0[23u].z, fma(_890, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _889));
        float _2017;
        if (_1852 > 0.0)
        {
            _2017 = abs((1.0 - _1841) / _1852);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1841 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2017 = frontier_phi_25_21_ladder;
        }
        float _2285;
        if (_1855 > 0.0)
        {
            _2285 = abs((1.0 - _1845) / _1855);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1845 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2285 = frontier_phi_37_32_ladder;
        }
        float _2490;
        if (_1858 > 0.0)
        {
            _2490 = abs((1.0 - _1849) / _1858);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1849 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2490 = frontier_phi_46_43_ladder;
        }
        float _2492 = isnan(_2285) ? _2017 : (isnan(_2017) ? _2285 : min(_2017, _2285));
        float _2493 = isnan(_2490) ? _2492 : (isnan(_2492) ? _2490 : min(_2492, _2490));
        float _2497 = (_2493 * _1852) + _1841;
        float _2498 = (_2493 * _1855) + _1845;
        float _2499 = (_2493 * _1858) + _1849;
        float _2500 = _2493 * 9.9999997473787516355514526367188e-05;
        float _2501 = (-1.0) - _2500;
        float _2503 = _2500 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2499 > _2503) || ((_2499 < _2501) || ((_2498 > _2503) || ((_2498 < _2501) || ((_2497 < _2501) || (_2497 > _2503))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2698 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2499, cbModelParam._m0[17u].z, fma(_2498, cbModelParam._m0[17u].y, _2497 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2499, cbModelParam._m0[18u].z, fma(_2498, cbModelParam._m0[18u].y, _2497 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2499, cbModelParam._m0[19u].z, fma(_2498, cbModelParam._m0[19u].y, _2497 * cbModelParam._m0[19u].x))), _1787);
            frontier_phi_22_46_ladder = _2698.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2698.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2698.x * cbModelParam._m0[1u].z;
        }
        _1877 = frontier_phi_22_46_ladder_2;
        _1879 = frontier_phi_22_46_ladder_1;
        _1881 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1861 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_889, _890, _891), _1787);
        _1877 = _1861.x * cbModelParam._m0[1u].z;
        _1879 = _1861.y * cbModelParam._m0[1u].z;
        _1881 = _1861.z * cbModelParam._m0[1u].z;
    }
    float _1893 = ((((1.0 - _910) * ((_897 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_910 * _897)) * _881;
    float _1894 = _1893 * ((cbModelParam._m0[1u].w * (_1877 - _1778)) + _1778);
    float _1895 = _1893 * ((cbModelParam._m0[1u].w * (_1879 - _1780)) + _1780);
    float _1896 = _1893 * ((cbModelParam._m0[1u].w * (_1881 - _1782)) + _1782);
    float _1899 = fma(_1896, cbSceneParam._m0[89u].z, fma(_1895, cbSceneParam._m0[89u].y, _1894 * cbSceneParam._m0[89u].x));
    float _1902 = fma(_1896, cbSceneParam._m0[90u].z, fma(_1895, cbSceneParam._m0[90u].y, _1894 * cbSceneParam._m0[90u].x));
    float _1905 = fma(_1896, cbSceneParam._m0[91u].z, fma(_1895, cbSceneParam._m0[91u].y, _1894 * cbSceneParam._m0[91u].x));
    vec4 _1913 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_818, _819));
    float _1915 = _1913.w;
    float _1927 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1915);
    float _1928 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1915);
    float _1929 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1915);
    uvec4 _1933 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1935 = _1933.x * 14u;
    uint _1936 = _1935 + 13u;
    float _1943 = _881 + (-1.0);
    float _1948 = (cbLight._m0[_1936].x * _1943) + 1.0;
    float _1949 = (cbLight._m0[_1936].y * _1943) + 1.0;
    float _1950 = (cbLight._m0[_1936].z * _1943) + 1.0;
    float _1951 = (cbLight._m0[_1936].w * _1943) + 1.0;
    uint _1952 = _1935 + 5u;
    float _1958 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
    uint _1962 = _1935 + 4u;
    float _1971 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
    uint _1975 = _1935 | 1u;
    float _1986 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_731, _732, _733));
    float _1989 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_731, _732, _733));
    float _4125 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _4136 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1994 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 0.3183098733425140380859375;
    float _1996 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * 0.3183098733425140380859375;
    float _2003 = ((cbLight._m0[_1952].x * _1958) * _1996) + (((cbLight._m0[_1962].x * _1927) * _1971) * _1994);
    float _2004 = ((_1958 * cbLight._m0[_1952].y) * _1996) + (((cbLight._m0[_1962].y * _1928) * _1971) * _1994);
    float _2005 = ((_1958 * cbLight._m0[_1952].z) * _1996) + (((cbLight._m0[_1962].z * _1929) * _1971) * _1994);
    uvec4 _2009 = floatBitsToUint(cbLight._m0[_1935 + 12u]);
    bool _2011 = _2009.x == 0u;
    float _2022;
    float _2024;
    float _2026;
    if (_2011)
    {
        _2022 = _2003;
        _2024 = _2004;
        _2026 = _2005;
    }
    else
    {
        uint _2030 = _1935 + 6u;
        float _2046 = (dot(vec3(cbLight._m0[_1935 + 2u].xyz), vec3(_731, _732, _733)) * 0.5) + 0.5;
        float _2047 = _2046 * _2046;
        float _4147 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2048 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2049 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2022 = (((cbLight._m0[_2030].x * 0.3183098733425140380859375) * _2048) * _2049) + _2003;
        _2024 = (((cbLight._m0[_2030].y * 0.3183098733425140380859375) * _2048) * _2049) + _2004;
        _2026 = (((cbLight._m0[_2030].z * 0.3183098733425140380859375) * _2048) * _2049) + _2005;
    }
    bool _2029 = _2009.y == 0u;
    float _2067;
    float _2069;
    float _2071;
    if (_2029)
    {
        _2067 = _2022;
        _2069 = _2024;
        _2071 = _2026;
    }
    else
    {
        uint _2229 = _1935 + 7u;
        float _2245 = (dot(vec3(cbLight._m0[_1935 + 3u].xyz), vec3(_731, _732, _733)) * 0.5) + 0.5;
        float _2246 = _2245 * _2245;
        float _4163 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2247 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2248 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2067 = (((cbLight._m0[_2229].x * 0.3183098733425140380859375) * _2247) * _2248) + _2022;
        _2069 = (((cbLight._m0[_2229].y * 0.3183098733425140380859375) * _2247) * _2248) + _2024;
        _2071 = (((cbLight._m0[_2229].z * 0.3183098733425140380859375) * _2247) * _2248) + _2026;
    }
    uint _2074 = _1935 + 8u;
    float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1935].w)) * _734) * 0.949999988079071044921875);
    float _2088 = _2087 * _2087;
    float _2089 = cbLight._m0[_1935].x + _810;
    float _2090 = cbLight._m0[_1935].y + _811;
    float _2091 = cbLight._m0[_1935].z + _812;
    float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
    float _2096 = _2095 * _2089;
    float _2097 = _2095 * _2090;
    float _2098 = _2095 * _2091;
    float _2099 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_1935].xyz));
    float _4179 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _2103 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2104 = dot(vec3(_731, _732, _733), vec3(_2096, _2097, _2098));
    float _4201 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _2108 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_2096, _2097, _2098));
    float _4212 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2112 = _2088 * _2088;
    float _2116 = ((_2107 * _2107) * (_2112 + (-1.0))) + 1.0;
    float _2127 = (exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2128 = 1.0 - _2088;
    float _2139 = (0.5 / (((_2103 * ((_2102 * _2128) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2128) + _2088) * _2102))) * _2102;
    float _4223 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2141 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2112 / ((_2116 * _2116) * 3.141590118408203125));
    uint _2155 = _1935 + 9u;
    float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1975].w)) * _734) * 0.949999988079071044921875);
    float _2167 = _2166 * _2166;
    float _2168 = cbLight._m0[_1975].x + _810;
    float _2169 = cbLight._m0[_1975].y + _811;
    float _2170 = cbLight._m0[_1975].z + _812;
    float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
    float _2175 = _2174 * _2168;
    float _2176 = _2174 * _2169;
    float _2177 = _2174 * _2170;
    float _2178 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_1975].xyz));
    float _4234 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2182 = dot(vec3(_731, _732, _733), vec3(_2175, _2176, _2177));
    float _4245 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _2186 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_2175, _2176, _2177));
    float _4256 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2190 = _2167 * _2167;
    float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
    float _2203 = (exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2204 = 1.0 - _2167;
    float _2214 = (0.5 / (((_2103 * ((_2181 * _2204) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2204) + _2167) * _2181))) * _2181;
    float _4267 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2216 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
    float _2226 = (((_2203 * cbLight._m0[_2155].x) * _2216) * _1958) + ((((cbLight._m0[_2074].x * _1927) * _2127) * _2141) * _1971);
    float _2227 = (((_2203 * cbLight._m0[_2155].y) * _2216) * _1958) + ((((cbLight._m0[_2074].y * _1928) * _2127) * _2141) * _1971);
    float _2228 = (((_2203 * cbLight._m0[_2155].z) * _2216) * _1958) + ((((cbLight._m0[_2074].z * _1929) * _2127) * _2141) * _1971);
    float _2290;
    float _2292;
    float _2294;
    if (_2011)
    {
        _2290 = _2226;
        _2292 = _2227;
        _2294 = _2228;
    }
    else
    {
        uint _2296 = _1935 + 2u;
        uint _2300 = _1935 + 10u;
        float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _734) * 0.949999988079071044921875);
        float _2315 = _2314 * _2314;
        float _2316 = cbLight._m0[_2296].x + _810;
        float _2317 = cbLight._m0[_2296].y + _811;
        float _2318 = cbLight._m0[_2296].z + _812;
        float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
        float _2323 = _2322 * _2316;
        float _2324 = _2322 * _2317;
        float _2325 = _2322 * _2318;
        float _2326 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2296].xyz));
        float _4278 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2330 = dot(vec3(_731, _732, _733), vec3(_2323, _2324, _2325));
        float _4289 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2334 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2323, _2324, _2325));
        float _4300 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2338 = _2315 * _2315;
        float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
        float _2351 = (exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2352 = 1.0 - _2315;
        float _2362 = (0.5 / (((_2103 * ((_2329 * _2352) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2352) + _2315) * _2329))) * _2329;
        float _4311 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2364 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
        float _2365 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2290 = (((_2351 * cbLight._m0[_2300].x) * _2364) * _2365) + _2226;
        _2292 = (((_2351 * cbLight._m0[_2300].y) * _2364) * _2365) + _2227;
        _2294 = (((_2351 * cbLight._m0[_2300].z) * _2364) * _2365) + _2228;
    }
    float _2400;
    float _2402;
    float _2404;
    if (_2029)
    {
        _2400 = _2290;
        _2402 = _2292;
        _2404 = _2294;
    }
    else
    {
        uint _2411 = _1935 + 3u;
        uint _2415 = _1935 + 11u;
        float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2411].w)) * _734) * 0.949999988079071044921875);
        float _2430 = _2429 * _2429;
        float _2431 = cbLight._m0[_2411].x + _810;
        float _2432 = cbLight._m0[_2411].y + _811;
        float _2433 = cbLight._m0[_2411].z + _812;
        float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
        float _2438 = _2437 * _2431;
        float _2439 = _2437 * _2432;
        float _2440 = _2437 * _2433;
        float _2441 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2411].xyz));
        float _4327 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _2445 = dot(vec3(_731, _732, _733), vec3(_2438, _2439, _2440));
        float _4338 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2449 = dot(vec3(cbLight._m0[_2411].xyz), vec3(_2438, _2439, _2440));
        float _4349 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2453 = _2430 * _2430;
        float _2457 = ((_2448 * _2448) * (_2453 + (-1.0))) + 1.0;
        float _2466 = (exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2467 = 1.0 - _2430;
        float _2477 = (0.5 / (((_2103 * ((_2444 * _2467) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2103 * _2467) + _2430) * _2444))) * _2444;
        float _4360 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2479 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2453 / ((_2457 * _2457) * 3.141590118408203125));
        float _2480 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2400 = (((_2466 * cbLight._m0[_2415].x) * _2479) * _2480) + _2290;
        _2402 = (((_2466 * cbLight._m0[_2415].y) * _2479) * _2480) + _2292;
        _2404 = (((_2466 * cbLight._m0[_2415].z) * _2479) * _2480) + _2294;
    }
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    if (_1933.y == 0u)
    {
        float _2555 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2556 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2555;
        float _2557 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2555;
        float _2558 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2555;
        uvec4 _2570 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2571 = _2570.x;
        uint _2582 = uint((float(_2570.y) * floor(float(uint(cbSceneParam._m0[85u].y * _819) / _2571))) + floor(float(uint(cbSceneParam._m0[85u].x * _818) / _2571)));
        float _2592 = (log2(_2558 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2593 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        uint _2596 = uint(isnan(14.0) ? _2593 : (isnan(_2593) ? 14.0 : min(_2593, 14.0)));
        uvec4 _2601 = texelFetch(g_lightClusterGridBuffer, int(((_2596 << 2u) + (_2582 << 6u)) >> 2u));
        uint _2602 = _2601.x;
        uint _2603 = _2570.z;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        if (((((1u << ((_2603 >> 4u) & 15u)) + 4294967295u) & _2602) == 0u) || ((_2603 & 240u) == 0u))
        {
            _2703 = 0.0;
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
        }
        else
        {
            float _2704;
            float _2706;
            float _2708;
            float _2710;
            float _2712;
            float _2714;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            uint _2854 = 0u;
            uint _2863;
            bool _2864;
            for (;;)
            {
                _2863 = texelFetch(g_lightClassification, int((((_2596 << 5u) + (_2582 << 9u)) + (_2854 << 2u)) >> 2u)).x;
                _2864 = _2863 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2864)
                {
                    frontier_phi_61_pred = _2848;
                    frontier_phi_61_pred_1 = _2853;
                    frontier_phi_61_pred_2 = _2852;
                    frontier_phi_61_pred_3 = _2851;
                    frontier_phi_61_pred_4 = _2850;
                    frontier_phi_61_pred_5 = _2849;
                }
                else
                {
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    uint _2978;
                    _2972 = _2848;
                    _2973 = _2849;
                    _2974 = _2850;
                    _2975 = _2851;
                    _2976 = _2852;
                    _2977 = _2853;
                    _2978 = _2863;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    for (;;)
                    {
                        uint _2982 = uint(findLSB(_2978)) + (_2854 << 5u);
                        uint _2979 = (_2978 + 4294967295u) & _2978;
                        uint _2984 = _2982 * 48u;
                        vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        uint _3004 = (_2982 * 48u) + 4u;
                        vec4 _3017 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 3u)).x));
                        uint _3023 = (_2982 * 48u) + 8u;
                        vec3 _3034 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x));
                        float _3038 = _2998.x - _2556;
                        float _3039 = _2998.y - _2557;
                        float _3040 = _2998.z - _2558;
                        float _3041 = dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040));
                        float _3044 = inversesqrt(_3041);
                        float _3045 = _3044 * _3038;
                        float _3046 = _3044 * _3039;
                        float _3047 = _3044 * _3040;
                        float _3048 = dot(vec3(_837, _840, _843), vec3(_3045, _3046, _3047));
                        float _3053 = 1.0 - (_3041 * _2998.w);
                        float _4386 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3054 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3055 = sqrt(_3041) * _3017.w;
                        float _3058 = 1.39999997615814208984375 / (_3055 + 1.39999997615814208984375);
                        float _3059 = _3058 * _3058;
                        float _3062 = ((1.0 - _3059) * _3048) + _3059;
                        float _3065 = _3055 * _3055;
                        float _3069 = ((isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))) * _3054) / ((_3065 * 0.699999988079071044921875) + 1.0);
                        float _3073 = (-0.0) - _2556;
                        float _3074 = (-0.0) - _2557;
                        float _3075 = (-0.0) - _2558;
                        float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                        float _3080 = _3079 * _3073;
                        float _3081 = _3079 * _3074;
                        float _3082 = _3079 * _3075;
                        float _3090 = exp2(log2(1.0 / ((_3065 * 3.5) + 5.0)) * 0.25);
                        float _3091 = 1.0 - _897;
                        float _3098 = sqrt(1.0 - ((1.0 - (_3091 * _3091)) * (1.0 - (_3090 * _3090))));
                        float _3099 = _3098 * _3098;
                        float _3100 = _3099 * _3099;
                        float _3101 = _3080 + _3045;
                        float _3102 = _3081 + _3046;
                        float _3103 = _3082 + _3047;
                        float _3107 = inversesqrt(dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103)));
                        float _3111 = dot(vec3(_837, _840, _843), vec3(_3080, _3081, _3082));
                        float _4402 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3114 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                        float _3115 = dot(vec3(_837, _840, _843), vec3(_3107 * _3101, _3107 * _3102, _3107 * _3103));
                        float _4413 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3118 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                        float _3122 = ((_3118 * _3118) * (_3100 + (-1.0))) + 1.0;
                        float _3123 = _3058 * _3099;
                        float _3124 = _3123 * _3123;
                        float _3127 = ((1.0 - _3124) * _3048) + _3124;
                        float _4424 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3128 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                        float _3129 = 1.0 - _3099;
                        float _3139 = (0.5 / (((_3128 * ((_3114 * _3129) + _3099)) + 9.9999999392252902907785028219223e-09) + (((_3128 * _3129) + _3099) * _3114))) * _3128;
                        float _4435 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3150 = (((_3100 * 3.1415927410125732421875) * (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) / ((_3122 * _3122) * ((_3065 * 2.1991131305694580078125) + 3.141590118408203125))) * _3054;
                        _2907 = (_3069 * _3017.x) + _2975;
                        _2908 = (_3069 * _3017.y) + _2976;
                        _2909 = (_3069 * _3017.z) + _2977;
                        _2904 = (_3150 * _3034.x) + _2972;
                        _2905 = (_3150 * _3034.y) + _2973;
                        _2906 = (_3150 * _3034.z) + _2974;
                        if (_2979 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2972 = _2904;
                            _2973 = _2905;
                            _2974 = _2906;
                            _2975 = _2907;
                            _2976 = _2908;
                            _2977 = _2909;
                            _2978 = _2979;
                        }
                    }
                    frontier_phi_61_pred = _2904;
                    frontier_phi_61_pred_1 = _2909;
                    frontier_phi_61_pred_2 = _2908;
                    frontier_phi_61_pred_3 = _2907;
                    frontier_phi_61_pred_4 = _2906;
                    frontier_phi_61_pred_5 = _2905;
                }
                _2704 = frontier_phi_61_pred;
                _2714 = frontier_phi_61_pred_1;
                _2712 = frontier_phi_61_pred_2;
                _2710 = frontier_phi_61_pred_3;
                _2708 = frontier_phi_61_pred_4;
                _2706 = frontier_phi_61_pred_5;
                uint _2855 = _2854 + 1u;
                if (_2855 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2848 = _2704;
                    _2849 = _2706;
                    _2850 = _2708;
                    _2851 = _2710;
                    _2852 = _2712;
                    _2853 = _2714;
                    _2854 = _2855;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2703 = _2704;
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
        }
        uvec4 _2717 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2718 = _2717.z;
        uint _2720 = (_2718 >> 8u) & 15u;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        if (((4294967295u << _2720) & _2602) == 0u)
        {
            _2816 = _2703;
            _2818 = _2705;
            _2820 = _2707;
            _2822 = _2709;
            _2824 = _2711;
            _2826 = _2713;
        }
        else
        {
            float _2841 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
            float _2842 = _2841 * _2556;
            float _2843 = _2841 * _2557;
            float _2844 = _2841 * _2558;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2720 < ((_2718 >> 12u) & 15u))
            {
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2955 = _2703;
                float _2956 = _2705;
                float _2957 = _2707;
                float _2958 = _2709;
                float _2959 = _2711;
                float _2960 = _2713;
                uint _2961 = _2720;
                uint _2970;
                bool _2971;
                for (;;)
                {
                    _2970 = texelFetch(g_lightClassification, int((((_2596 << 5u) + (_2582 << 9u)) + (_2961 << 2u)) >> 2u)).x;
                    _2971 = _2970 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2971)
                    {
                        frontier_phi_67_pred = _2958;
                        frontier_phi_67_pred_1 = _2959;
                        frontier_phi_67_pred_2 = _2960;
                        frontier_phi_67_pred_3 = _2957;
                        frontier_phi_67_pred_4 = _2956;
                        frontier_phi_67_pred_5 = _2955;
                    }
                    else
                    {
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3168 = _2955;
                        float _3169 = _2956;
                        float _3170 = _2957;
                        float _3171 = _2958;
                        float _3172 = _2959;
                        float _3173 = _2960;
                        uint _3174 = _2970;
                        uint _3175;
                        vec4 _3200;
                        float _3201;
                        vec4 _3216;
                        vec3 _3228;
                        vec4 _3243;
                        vec4 _3258;
                        float _3304;
                        bool _3305;
                        for (;;)
                        {
                            uint _3185 = ((_2961 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3174));
                            _3175 = (_3174 + 4294967295u) & _3174;
                            uint _3187 = _3185 * 40u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            _3201 = _3200.w;
                            uint _3203 = (_3185 * 40u) + 4u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3218 = (_3185 * 40u) + 8u;
                            _3228 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x));
                            uint _3230 = (_3185 * 40u) + 16u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3245 = (_3185 * 40u) + 20u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3260 = (_3185 * 40u) + 24u;
                            vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3279 = (_3185 * 40u) + 28u;
                            vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            _3304 = fma(_2558, _3292.z, fma(_2557, _3292.y, _3292.x * _2556)) + _3292.w;
                            _3305 = !((fma(_2558, _3273.z, fma(_2557, _3273.y, _3273.x * _2556)) + _3273.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3305)
                            {
                                float _3332 = _3200.x - _2556;
                                float _3333 = _3200.y - _2557;
                                float _3334 = _3200.z - _2558;
                                float _3335 = dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334));
                                float _3338 = inversesqrt(_3335);
                                float _3339 = _3338 * _3332;
                                float _3340 = _3338 * _3333;
                                float _3341 = _3338 * _3334;
                                float _3345 = 1.0 - (_3335 / (_3201 * _3201));
                                float _4446 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3350 = sqrt(_3335) * _3216.w;
                                float _3352 = 1.39999997615814208984375 / (_3350 + 1.39999997615814208984375);
                                float _3353 = _3352 * _3352;
                                float _3356 = ((1.0 - _3353) * dot(vec3(_3339, _3340, _3341), vec3(_837, _840, _843))) + _3353;
                                float _3359 = _3350 * _3350;
                                float _3363 = (fma(_2558, _3243.z, fma(_2557, _3243.y, _3243.x * _2556)) + _3243.w) / _3304;
                                float _3364 = (fma(_2558, _3258.z, fma(_2557, _3258.y, _3258.x * _2556)) + _3258.w) / _3304;
                                float _3368 = 1.0 - dot(vec2(_3363, _3364), vec2(_3363, _3364));
                                float _4462 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3370 = _3369 * (((isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0))) * _3346) / ((_3359 * 0.699999988079071044921875) + 1.0));
                                float _3382 = exp2(log2(1.0 / ((_3359 * 3.5) + 5.0)) * 0.25);
                                float _3383 = 1.0 - _897;
                                float _3390 = sqrt(1.0 - ((1.0 - (_3383 * _3383)) * (1.0 - (_3382 * _3382))));
                                float _3391 = _3390 * _3390;
                                float _3392 = _3391 * _3391;
                                float _3393 = _3339 - _2842;
                                float _3394 = _3340 - _2843;
                                float _3395 = _3341 - _2844;
                                float _3399 = inversesqrt(dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395)));
                                float _3403 = dot(vec3(_837, _840, _843), vec3((-0.0) - _2842, (-0.0) - _2843, (-0.0) - _2844));
                                float _4473 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3406 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3407 = dot(vec3(_837, _840, _843), vec3(_3399 * _3393, _3399 * _3394, _3399 * _3395));
                                float _4484 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3410 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3414 = ((_3410 * _3410) * (_3392 + (-1.0))) + 1.0;
                                float _3415 = _3352 * _3391;
                                float _3416 = _3415 * _3415;
                                float _3422 = ((1.0 - _3416) * dot(vec3(_837, _840, _843), vec3(_3339, _3340, _3341))) + _3416;
                                float _4495 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3424 = 1.0 - _3391;
                                float _3434 = (0.5 / (((_3423 * ((_3406 * _3424) + _3391)) + 9.9999999392252902907785028219223e-09) + (((_3423 * _3424) + _3391) * _3406))) * _3423;
                                float _4506 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3444 = (_3369 * _3346) * (((_3392 * 3.1415927410125732421875) * (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) / ((_3414 * _3414) * ((_3359 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3444 * _3228.x;
                                frontier_phi_73_pred_1 = _3444 * _3228.y;
                                frontier_phi_73_pred_2 = _3370 * _3216.z;
                                frontier_phi_73_pred_3 = _3370 * _3216.y;
                                frontier_phi_73_pred_4 = _3370 * _3216.x;
                                frontier_phi_73_pred_5 = _3444 * _3228.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3448 = frontier_phi_73_pred;
                            _3449 = frontier_phi_73_pred_1;
                            _3453 = frontier_phi_73_pred_2;
                            _3452 = frontier_phi_73_pred_3;
                            _3451 = frontier_phi_73_pred_4;
                            _3450 = frontier_phi_73_pred_5;
                            _3158 = _3451 + _3171;
                            _3159 = _3452 + _3172;
                            _3160 = _3453 + _3173;
                            _3155 = _3448 + _3168;
                            _3156 = _3449 + _3169;
                            _3157 = _3450 + _3170;
                            if (_3175 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3175;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3158;
                        frontier_phi_67_pred_1 = _3159;
                        frontier_phi_67_pred_2 = _3160;
                        frontier_phi_67_pred_3 = _3157;
                        frontier_phi_67_pred_4 = _3156;
                        frontier_phi_67_pred_5 = _3155;
                    }
                    _2823 = frontier_phi_67_pred;
                    _2825 = frontier_phi_67_pred_1;
                    _2827 = frontier_phi_67_pred_2;
                    _2821 = frontier_phi_67_pred_3;
                    _2819 = frontier_phi_67_pred_4;
                    _2817 = frontier_phi_67_pred_5;
                    uint _2962 = _2961 + 1u;
                    if (_2962 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2955 = _2817;
                        _2956 = _2819;
                        _2957 = _2821;
                        _2958 = _2823;
                        _2959 = _2825;
                        _2960 = _2827;
                        _2961 = _2962;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2825;
                frontier_phi_55_56_ladder_1 = _2827;
                frontier_phi_55_56_ladder_2 = _2823;
                frontier_phi_55_56_ladder_3 = _2821;
                frontier_phi_55_56_ladder_4 = _2819;
                frontier_phi_55_56_ladder_5 = _2817;
            }
            else
            {
                frontier_phi_55_56_ladder = _2711;
                frontier_phi_55_56_ladder_1 = _2713;
                frontier_phi_55_56_ladder_2 = _2709;
                frontier_phi_55_56_ladder_3 = _2707;
                frontier_phi_55_56_ladder_4 = _2705;
                frontier_phi_55_56_ladder_5 = _2703;
            }
            _2816 = frontier_phi_55_56_ladder_5;
            _2818 = frontier_phi_55_56_ladder_4;
            _2820 = frontier_phi_55_56_ladder_3;
            _2822 = frontier_phi_55_56_ladder_2;
            _2824 = frontier_phi_55_56_ladder;
            _2826 = frontier_phi_55_56_ladder_1;
        }
        float _2831 = isnan(1.0) ? _881 : (isnan(_881) ? 1.0 : min(_881, 1.0));
        _2615 = (_2831 * _2822) + _2067;
        _2617 = (_2831 * _2824) + _2069;
        _2619 = (_2831 * _2826) + _2071;
        _2621 = ((_2816 * 0.039999999105930328369140625) * _2831) + _2400;
        _2623 = ((_2818 * 0.039999999105930328369140625) * _2831) + _2402;
        _2625 = ((_2820 * 0.039999999105930328369140625) * _2831) + _2404;
    }
    else
    {
        _2615 = _2067;
        _2617 = _2069;
        _2619 = _2071;
        _2621 = _2400;
        _2623 = _2402;
        _2625 = _2404;
    }
    float _4522 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4533 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4544 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    uint _2645 = _251 + 6u;
    float _2653 = _818 / cbSceneParam._m0[86u].x;
    float _2654 = _819 / cbSceneParam._m0[86u].y;
    vec4 _2668 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2653, _2654, (log2((isnan(cbSceneParam._m0[77u].w) ? _752 : (isnan(_752) ? cbSceneParam._m0[77u].w : min(_752, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2670 = _2668.x;
    float _2671 = _2668.y;
    float _2672 = _2668.z;
    float _2673 = _2668.w;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    if (_752 > cbSceneParam._m0[78u].w)
    {
        float _2728 = isnan(_752) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _752 : min(cbSceneParam._m0[80u].w, _752));
        float _2729 = _2728 / _752;
        float _2740 = _2729 * _803;
        float _2741 = _804 * _2729;
        float _2742 = (-0.0) - _2741;
        float _2744 = _2729 * _805;
        float _2746 = (cbSceneParam._m0[77u].w * _2742) / _2728;
        float _2747 = _2746 + cbSceneParam._m0[79u].w;
        float _2748 = cbSceneParam._m0[79u].w - _2741;
        float _2754 = sqrt(((_2740 * _2740) + (_2741 * _2741)) + (_2744 * _2744));
        float _2757 = (1.0 - (cbSceneParam._m0[77u].w / _2728)) * _2754;
        float _2762 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2764 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2917;
        if (abs((_2742 - _2746) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2917 = ((((_2747 > 0.0) ? exp2(_2762 * _2747) : (2.0 - exp2(_2764 * _2747))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2757;
        }
        else
        {
            float _2877 = 1.0 / cbSceneParam._m0[80u].x;
            float _2878 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : max(_2747, _2748));
            float _2879 = isnan(_2748) ? _2747 : (isnan(_2747) ? _2748 : min(_2747, _2748));
            float _2888 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : min(_2878, 0.0));
            float _2889 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : min(_2879, 0.0));
            _2917 = ((abs(_2754 / _2742) * cbSceneParam._m0[80u].y) * ((((_2888 - _2889) * 2.0) - ((exp2(_2762 * (isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0)))) - exp2(_2762 * (isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0))))) * _2877)) - ((exp2(_2764 * _2888) - exp2(_2764 * _2889)) * _2877))) + (_2757 * cbSceneParam._m0[80u].z);
        }
        vec4 _2919 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2653, _2654, 1.0), 0.0);
        float _2928 = exp2((_2917 * (-1.44269502162933349609375)) * (1.0 - _2919.w));
        float _2929 = log2(_2928);
        float _2945 = log2(_2673);
        _2766 = (exp2(_2945 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].x)) * _2919.x) / cbSceneParam._m0[78u].x)) + _2670;
        _2768 = (exp2(_2945 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].y)) * _2919.y) / cbSceneParam._m0[78u].y)) + _2671;
        _2770 = (exp2(_2945 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2929 * cbSceneParam._m0[78u].z)) * _2919.z) / cbSceneParam._m0[78u].z)) + _2672;
        _2772 = _2928 * _2673;
    }
    else
    {
        _2766 = _2670;
        _2768 = _2671;
        _2770 = _2672;
        _2772 = _2673;
    }
    float _2784 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2785 = _2784 == 3.0;
    float _2786 = log2(_2772);
    float _2793 = exp2(_2786 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2615 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _881))) + ((_2621 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1686)) * cbPerFrame._m0[3u].x));
    float _2794 = exp2(_2786 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2617 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _881))) + ((_2623 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1686)) * cbPerFrame._m0[3u].x));
    float _2795 = exp2(_2786 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2619 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _881))) + ((_2625 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1686)) * cbPerFrame._m0[3u].x));
    float _2804 = (_2784 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2804 * (_2785 ? _2793 : (_2793 + (cbSceneParam._m0[72u].w * _2766)));
    SV_Target.y = _2804 * (_2785 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2768)));
    SV_Target.z = _2804 * (_2785 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2770)));
    SV_Target.w = cbInstanceData._m0[_2645].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2645].w;
}


