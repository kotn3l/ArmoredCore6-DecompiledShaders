#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1026;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _248) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _249) + cbTextureTilingScale._m0[14u].w));
    vec4 _315 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _248) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _249) + cbTextureTilingScale._m0[20u].w));
    vec4 _341 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _345 = _341.z;
    float _349 = (_341.x * 2.0) + (-1.0);
    float _350 = (_341.y * 2.0) + (-1.0);
    float _351 = dot(vec2(_349, _350), vec2(_349, _350));
    float _3616 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _357 = sqrt(1.0 - (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))));
    float _362 = _349 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_315.x * 2.0) + (-1.0)));
    float _363 = _350 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_315.y * 2.0) + (-1.0)));
    float _366 = fma(_357, _216, fma(_363, _223, _362 * _209));
    float _369 = fma(_357, _217, fma(_363, _224, _362 * _210));
    float _372 = fma(_357, _218, fma(_363, _225, _362 * _211));
    float _376 = inversesqrt(dot(vec3(_366, _369, _372), vec3(_366, _369, _372)));
    vec4 _412 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _414 = _412.x;
    float _415 = 1.0 - _414;
    float _424 = (cbMtdParam._m0[19u].x + dot(vec4(_376 * _366, _376 * _369, _376 * _372, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_414 - _415) * cbMtdParam._m0[24u].z) + _415) * cbMtdParam._m0[21u].z);
    float _3627 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _432 = (_425 * ((_295.x * cbMtdParam._m0[18u].x) - _274)) + _274;
    float _433 = (_425 * ((_295.y * cbMtdParam._m0[18u].y) - _275)) + _275;
    float _434 = (_425 * ((_295.z * cbMtdParam._m0[18u].z) - _276)) + _276;
    float _439 = (((_315.z - _345) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _345;
    vec4 _452 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _459 = (_452.x * 2.0) + (-1.0);
    float _460 = (_452.y * 2.0) + (-1.0);
    float _461 = dot(vec2(_459, _460), vec2(_459, _460));
    float _3638 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _469 = ((_452.z - _439) * _425) + _439;
    float _479 = ((sqrt(1.0 - (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)))) - _357) * _425) + _357;
    float _482 = (((_459 - _362) * _425) + _362) + (cbMtdParam._m0[21u].x * _362);
    float _483 = (((_460 - _363) * _425) + _363) + (cbMtdParam._m0[21u].x * _363);
    float _488 = cbMtdParam._m0[22u].x + _341.w;
    float _491 = fma(_479, _216, fma(_483, _223, _482 * _209));
    float _494 = fma(_479, _217, fma(_483, _224, _482 * _210));
    float _497 = fma(_479, _218, fma(_483, _225, _482 * _211));
    float _501 = inversesqrt(dot(vec3(_491, _494, _497), vec3(_491, _494, _497)));
    float _502 = _501 * _491;
    float _503 = _501 * _494;
    float _504 = _501 * _497;
    float _3649 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _505 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3671 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3682 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3693 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _523 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _574 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _564);
    float _575 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _564);
    float _576 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _564);
    float _580 = inversesqrt(dot(vec3(_574, _575, _576), vec3(_574, _575, _576)));
    float _581 = _574 * _580;
    float _582 = _575 * _580;
    float _583 = _576 * _580;
    float _589 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _590 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _611 = fma(_504, cbSceneParam._m0[5u].z, fma(_503, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _502));
    float _614 = fma(_504, cbSceneParam._m0[6u].z, fma(_503, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _502));
    float _617 = fma(_504, cbSceneParam._m0[7u].z, fma(_503, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _502));
    uint _631 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _637 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) * cbInstanceData._m0[_631].x;
    float _638 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) * cbInstanceData._m0[_631].y;
    float _639 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) * cbInstanceData._m0[_631].z;
    float _3704 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _3715 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _3726 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    vec4 _651 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _589, cbSceneParam._m0[86u].y * _590));
    float _655 = ((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * TEXCOORD_5.w) * _651.x;
    float _656 = dot(vec3(_502, _503, _504), vec3(_581, _582, _583));
    float _659 = _656 * 2.0;
    float _663 = (_659 * _502) - _581;
    float _664 = (_659 * _503) - _582;
    float _665 = (_659 * _504) - _583;
    float _669 = abs(dot(vec3(_581, _582, _583), vec3(_502, _503, _504)));
    float _3737 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _671 = sqrt(_505);
    float _684 = exp2((_671 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_671 * 3.0));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1025;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _750 = fma(_724, cbModelParam._m0[26u].z, fma(_720, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _716));
        float _754 = fma(_724, cbModelParam._m0[27u].z, fma(_720, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _716));
        float _758 = fma(_724, cbModelParam._m0[28u].z, fma(_720, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _716));
        float _783 = _716 + _502;
        float _784 = _720 + _503;
        float _785 = _724 + _504;
        float _795 = fma(_785, cbModelParam._m0[26u].z, fma(_784, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _783)) - _750;
        float _796 = fma(_785, cbModelParam._m0[27u].z, fma(_784, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _783)) - _754;
        float _797 = fma(_785, cbModelParam._m0[28u].z, fma(_784, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _783)) - _758;
        float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
        float _814 = ((_801 * _795) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_750 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _815 = ((_801 * _796) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_754 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _816 = ((_801 * _797) / cbModelParam._m0[34u].z) + ((((((_758 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        float _853 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_819.x + (-0.5));
        float _855 = _853 * (_819.y + (-0.5));
        float _856 = _853 * (_819.z + (-0.5));
        float _863 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_826.x + (-0.5));
        float _865 = _863 * (_826.y + (-0.5));
        float _866 = _863 * (_826.z + (-0.5));
        float _873 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_833.x + (-0.5));
        float _875 = _873 * (_833.y + (-0.5));
        float _876 = _873 * (_833.z + (-0.5));
        float _883 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_840.x + (-0.5));
        float _885 = _883 * (_840.y + (-0.5));
        float _886 = _883 * (_840.z + (-0.5));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = _854 * 0.5;
        float _891 = _864 * 0.5;
        float _892 = _874 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _907 = (dot(vec3(_502, _503, _504), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _917 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3785 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_919 + 1.0))) + _924) * _887;
        float _934 = _855 * 0.5;
        float _935 = _865 * 0.5;
        float _936 = _875 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _950 = (dot(vec3(_502, _503, _504), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _959 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3818 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_961 + 1.0))) + _966) * _888;
        float _976 = _856 * 0.5;
        float _977 = _866 * 0.5;
        float _978 = _876 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_502, _503, _504), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3851 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1003 + 1.0))) + _1008) * _889;
        _1025 = _856;
        _1027 = _855;
        _1028 = _854;
        _1029 = _866;
        _1030 = _865;
        _1031 = _864;
        _1032 = _876;
        _1033 = _875;
        _1034 = _874;
        _1035 = _889;
        _1036 = _888;
        _1037 = _887;
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
    }
    else
    {
        _1025 = _1026;
        _1027 = _1026;
        _1028 = _1026;
        _1029 = _1026;
        _1030 = _1026;
        _1031 = _1026;
        _1032 = _1026;
        _1033 = _1026;
        _1034 = _1026;
        _1035 = _1026;
        _1036 = _1026;
        _1037 = _1026;
        _1038 = 0.0;
        _1039 = 0.0;
        _1040 = 0.0;
    }
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1065 = fma(_724, cbModelParam._m0[30u].z, fma(_720, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _716));
        float _1069 = fma(_724, cbModelParam._m0[31u].z, fma(_720, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _716));
        float _1073 = fma(_724, cbModelParam._m0[32u].z, fma(_720, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _716));
        float _1096 = _716 + _502;
        float _1097 = _720 + _503;
        float _1098 = _724 + _504;
        float _1108 = fma(_1098, cbModelParam._m0[30u].z, fma(_1097, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1096)) - _1065;
        float _1109 = fma(_1098, cbModelParam._m0[31u].z, fma(_1097, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1096)) - _1069;
        float _1110 = fma(_1098, cbModelParam._m0[32u].z, fma(_1097, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1096)) - _1073;
        float _1114 = inversesqrt(dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110)));
        float _1127 = ((_1114 * _1108) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1065 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1114 * _1109) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1069 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1114 * _1110) / cbModelParam._m0[35u].z) + ((((((_1073 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        float _1164 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1131.x + (-0.5));
        float _1166 = _1164 * (_1131.y + (-0.5));
        float _1167 = _1164 * (_1131.z + (-0.5));
        float _1174 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1138.x + (-0.5));
        float _1176 = _1174 * (_1138.y + (-0.5));
        float _1177 = _1174 * (_1138.z + (-0.5));
        float _1184 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1145.x + (-0.5));
        float _1186 = _1184 * (_1145.y + (-0.5));
        float _1187 = _1184 * (_1145.z + (-0.5));
        float _1194 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1152.x + (-0.5));
        float _1196 = _1194 * (_1152.y + (-0.5));
        float _1197 = _1194 * (_1152.z + (-0.5));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = _1165 * 0.5;
        float _1202 = _1175 * 0.5;
        float _1203 = _1185 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_502, _503, _504), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _3914 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1228 + 1.0))) + _1233) * _1198;
        float _1243 = _1166 * 0.5;
        float _1244 = _1176 * 0.5;
        float _1245 = _1186 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_502, _503, _504), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _3947 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1270 + 1.0))) + _1275) * _1199;
        float _1285 = _1167 * 0.5;
        float _1286 = _1177 * 0.5;
        float _1287 = _1187 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_502, _503, _504), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _3980 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1312 + 1.0))) + _1317) * _1200;
        _1334 = _1167;
        _1335 = _1166;
        _1336 = _1165;
        _1337 = _1177;
        _1338 = _1176;
        _1339 = _1175;
        _1340 = _1187;
        _1341 = _1186;
        _1342 = _1185;
        _1343 = _1200;
        _1344 = _1199;
        _1345 = _1198;
        _1346 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1347 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1348 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
    }
    else
    {
        _1334 = _1026;
        _1335 = _1026;
        _1336 = _1026;
        _1337 = _1026;
        _1338 = _1026;
        _1339 = _1026;
        _1340 = _1026;
        _1341 = _1026;
        _1342 = _1026;
        _1343 = _1026;
        _1344 = _1026;
        _1345 = _1026;
        _1346 = 0.0;
        _1347 = 0.0;
        _1348 = 0.0;
    }
    float _1358 = (cbModelParam._m0[1u].x * (_1346 - _1038)) + _1038;
    float _1359 = (cbModelParam._m0[1u].x * (_1347 - _1039)) + _1039;
    float _1360 = (cbModelParam._m0[1u].x * (_1348 - _1040)) + _1040;
    float _1381 = fma(_1360, cbSceneParam._m0[89u].z, fma(_1359, cbSceneParam._m0[89u].y, _1358 * cbSceneParam._m0[89u].x));
    float _1384 = fma(_1360, cbSceneParam._m0[90u].z, fma(_1359, cbSceneParam._m0[90u].y, _1358 * cbSceneParam._m0[90u].x));
    float _1387 = fma(_1360, cbSceneParam._m0[91u].z, fma(_1359, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1358));
    float _1402 = _663 * 0.5;
    float _1403 = _664 * 0.5;
    float _1404 = _665 * 0.5;
    float _1405 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1336, _1339, _1342, _1345));
    float _1408 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1335, _1338, _1341, _1344));
    float _1411 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1334, _1337, _1340, _1343));
    float _1445;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1418 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1025, _1029, _1032, _1035));
        float _1422 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1027, _1030, _1033, _1036));
        float _1426 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1028, _1031, _1034, _1037));
        float _1433 = dot(vec4(cbModelParam._m0[39u]), vec4(_1402, _1403, _1404, 1.0));
        _1445 = dot(vec3(isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1433) ? 0.0 : (isnan(0.0) ? _1433 : max(0.0, _1433))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1445 = 1.0;
    }
    float _1456;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1447 = dot(vec4(cbModelParam._m0[40u]), vec4(_1402, _1403, _1404, 1.0));
        _1456 = dot(vec3(isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1447) ? 0.0 : (isnan(0.0) ? _1447 : max(0.0, _1447))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1456 = 1.0;
    }
    float _1460 = (_1456 * cbModelParam._m0[1u].x) + (_1445 * (1.0 - cbModelParam._m0[1u].x));
    float _1470 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _505);
    float _1471 = isnan(_1470) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1470 : min(cbModelParam._m0[25u].z, _1470));
    float _1551;
    float _1553;
    float _1555;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1518 = fma(_724, cbModelParam._m0[13u].z, fma(_720, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _716)) + cbModelParam._m0[13u].w;
        float _1522 = fma(_724, cbModelParam._m0[14u].z, fma(_720, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _716)) + cbModelParam._m0[14u].w;
        float _1526 = fma(_724, cbModelParam._m0[15u].z, fma(_720, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _716)) + cbModelParam._m0[15u].w;
        float _1529 = fma(_665, cbModelParam._m0[13u].z, fma(_664, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _663));
        float _1532 = fma(_665, cbModelParam._m0[14u].z, fma(_664, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _663));
        float _1535 = fma(_665, cbModelParam._m0[15u].z, fma(_664, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _663));
        float _1563;
        if (_1529 > 0.0)
        {
            _1563 = abs((1.0 - _1518) / _1529);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1518 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1563 = frontier_phi_14_12_ladder;
        }
        float _1733;
        if (_1532 > 0.0)
        {
            _1733 = abs((1.0 - _1522) / _1532);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1522 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1733 = frontier_phi_23_19_ladder;
        }
        float _2029;
        if (_1535 > 0.0)
        {
            _2029 = abs((1.0 - _1526) / _1535);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1526 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2029 = frontier_phi_35_30_ladder;
        }
        float _2031 = isnan(_1733) ? _1563 : (isnan(_1563) ? _1733 : min(_1563, _1733));
        float _2032 = isnan(_2029) ? _2031 : (isnan(_2031) ? _2029 : min(_2031, _2029));
        float _2036 = (_2032 * _1529) + _1518;
        float _2037 = (_2032 * _1532) + _1522;
        float _2038 = (_2032 * _1535) + _1526;
        float _2039 = _2032 * 9.9999997473787516355514526367188e-05;
        float _2041 = (-1.0) - _2039;
        float _2043 = _2039 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2038 > _2043) || ((_2038 < _2041) || ((_2037 > _2043) || ((_2037 < _2041) || ((_2036 < _2041) || (_2036 > _2043))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2183 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2038, cbModelParam._m0[9u].z, fma(_2037, cbModelParam._m0[9u].y, _2036 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2038, cbModelParam._m0[10u].z, fma(_2037, cbModelParam._m0[10u].y, _2036 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2038, cbModelParam._m0[11u].z, fma(_2037, cbModelParam._m0[11u].y, _2036 * cbModelParam._m0[11u].x))), _1471);
            frontier_phi_13_35_ladder = _2183.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2183.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2183.x * cbModelParam._m0[1u].y;
        }
        _1551 = frontier_phi_13_35_ladder_2;
        _1553 = frontier_phi_13_35_ladder_1;
        _1555 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1539 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_663, _664, _665), _1471);
        _1551 = _1539.x * cbModelParam._m0[1u].y;
        _1553 = _1539.y * cbModelParam._m0[1u].y;
        _1555 = _1539.z * cbModelParam._m0[1u].y;
    }
    float _1559 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _505);
    float _1560 = isnan(_1559) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1559 : min(cbModelParam._m0[25u].w, _1559));
    float _1649;
    float _1651;
    float _1653;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1613 = fma(_724, cbModelParam._m0[21u].z, fma(_720, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _716)) + cbModelParam._m0[21u].w;
        float _1617 = fma(_724, cbModelParam._m0[22u].z, fma(_720, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _716)) + cbModelParam._m0[22u].w;
        float _1621 = fma(_724, cbModelParam._m0[23u].z, fma(_720, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _716)) + cbModelParam._m0[23u].w;
        float _1624 = fma(_665, cbModelParam._m0[21u].z, fma(_664, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _663));
        float _1627 = fma(_665, cbModelParam._m0[22u].z, fma(_664, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _663));
        float _1630 = fma(_665, cbModelParam._m0[23u].z, fma(_664, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _663));
        float _1738;
        if (_1624 > 0.0)
        {
            _1738 = abs((1.0 - _1613) / _1624);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1613 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1738 = frontier_phi_25_21_ladder;
        }
        float _2056;
        if (_1627 > 0.0)
        {
            _2056 = abs((1.0 - _1617) / _1627);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1617 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2056 = frontier_phi_37_32_ladder;
        }
        float _2383;
        if (_1630 > 0.0)
        {
            _2383 = abs((1.0 - _1621) / _1630);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1621 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2383 = frontier_phi_47_44_ladder;
        }
        float _2385 = isnan(_2056) ? _1738 : (isnan(_1738) ? _2056 : min(_1738, _2056));
        float _2386 = isnan(_2383) ? _2385 : (isnan(_2385) ? _2383 : min(_2385, _2383));
        float _2390 = (_2386 * _1624) + _1613;
        float _2391 = (_2386 * _1627) + _1617;
        float _2392 = (_2386 * _1630) + _1621;
        float _2393 = _2386 * 9.9999997473787516355514526367188e-05;
        float _2394 = (-1.0) - _2393;
        float _2396 = _2393 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2392 > _2396) || ((_2392 < _2394) || ((_2391 > _2396) || ((_2391 < _2394) || ((_2390 < _2394) || (_2390 > _2396))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2510 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2392, cbModelParam._m0[17u].z, fma(_2391, cbModelParam._m0[17u].y, _2390 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2392, cbModelParam._m0[18u].z, fma(_2391, cbModelParam._m0[18u].y, _2390 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2392, cbModelParam._m0[19u].z, fma(_2391, cbModelParam._m0[19u].y, _2390 * cbModelParam._m0[19u].x))), _1560);
            frontier_phi_22_47_ladder = _2510.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2510.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2510.x * cbModelParam._m0[1u].z;
        }
        _1649 = frontier_phi_22_47_ladder_2;
        _1651 = frontier_phi_22_47_ladder_1;
        _1653 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1633 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_663, _664, _665), _1560);
        _1649 = _1633.x * cbModelParam._m0[1u].z;
        _1651 = _1633.y * cbModelParam._m0[1u].z;
        _1653 = _1633.z * cbModelParam._m0[1u].z;
    }
    float _1665 = ((((1.0 - _684) * ((_671 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_684 * _671)) * _655;
    float _1666 = _1665 * ((cbModelParam._m0[1u].w * (_1649 - _1551)) + _1551);
    float _1667 = _1665 * ((cbModelParam._m0[1u].w * (_1651 - _1553)) + _1553);
    float _1668 = _1665 * ((cbModelParam._m0[1u].w * (_1653 - _1555)) + _1555);
    float _1671 = fma(_1668, cbSceneParam._m0[89u].z, fma(_1667, cbSceneParam._m0[89u].y, _1666 * cbSceneParam._m0[89u].x));
    float _1674 = fma(_1668, cbSceneParam._m0[90u].z, fma(_1667, cbSceneParam._m0[90u].y, _1666 * cbSceneParam._m0[90u].x));
    float _1677 = fma(_1668, cbSceneParam._m0[91u].z, fma(_1667, cbSceneParam._m0[91u].y, _1666 * cbSceneParam._m0[91u].x));
    float _1712 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1716 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1720 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1724 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1725 = _1712 / _1724;
    float _1726 = _1716 / _1724;
    float _1727 = _1720 / _1724;
    float _1874;
    float _1875;
    float _1876;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1754 = ((uint(_1727 > cbSceneParam._m0[59u].y) + uint(_1727 > cbSceneParam._m0[59u].x)) + uint(_1727 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1755 = _1754 + 43u;
        uint _1763 = _1754 + 44u;
        uint _1771 = _1754 + 45u;
        uint _1779 = _1754 + 46u;
        float _1790 = fma(_1724, cbSceneParam._m0[_1755].w, fma(_1720, cbSceneParam._m0[_1755].z, fma(_1716, cbSceneParam._m0[_1755].y, _1712 * cbSceneParam._m0[_1755].x)));
        float _1794 = fma(_1724, cbSceneParam._m0[_1763].w, fma(_1720, cbSceneParam._m0[_1763].z, fma(_1716, cbSceneParam._m0[_1763].y, _1712 * cbSceneParam._m0[_1763].x)));
        float _1802 = fma(_1724, cbSceneParam._m0[_1779].w, fma(_1720, cbSceneParam._m0[_1779].z, fma(_1716, cbSceneParam._m0[_1779].y, _1712 * cbSceneParam._m0[_1779].x)));
        float _1807 = cbSceneParam._m0[33u].z * _1802;
        float _1809 = cbSceneParam._m0[33u].w * _1802;
        float _1812 = fma(_1724, cbSceneParam._m0[_1771].w, fma(_1720, cbSceneParam._m0[_1771].z, fma(_1716, cbSceneParam._m0[_1771].y, _1712 * cbSceneParam._m0[_1771].x))) / _1802;
        float _1860 = (cbSceneParam._m0[33u].x - sqrt(((_1726 * _1726) + (_1725 * _1725)) + (_1727 * _1727))) * cbSceneParam._m0[33u].y;
        float _4106 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1867 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1807 + _1790) / _1802, (_1809 + _1794) / _1802), _1812), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1809 + _1790) / _1802, (_1794 - _1807) / _1802), _1812), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1790 - _1807) / _1802, (_1794 - _1809) / _1802), _1812), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1790 - _1809) / _1802, (_1807 + _1794) / _1802), _1812), 0.0)).x), vec4(0.25)));
        _1874 = 1.0 - (_1867 * cbSceneParam._m0[34u].x);
        _1875 = 1.0 - (_1867 * cbSceneParam._m0[34u].y);
        _1876 = 1.0 - (_1867 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1874 = 1.0;
        _1875 = 1.0;
        _1876 = 1.0;
    }
    float _1940;
    float _1942;
    float _1944;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1928 = fma(_1724, cbSceneParam._m0[63u].w, fma(_1720, cbSceneParam._m0[63u].z, fma(_1716, cbSceneParam._m0[63u].y, _1712 * cbSceneParam._m0[63u].x)));
        float _1929 = fma(_1724, cbSceneParam._m0[60u].w, fma(_1720, cbSceneParam._m0[60u].z, fma(_1716, cbSceneParam._m0[60u].y, _1712 * cbSceneParam._m0[60u].x))) / _1928;
        float _1930 = fma(_1724, cbSceneParam._m0[61u].w, fma(_1720, cbSceneParam._m0[61u].z, fma(_1716, cbSceneParam._m0[61u].y, _1712 * cbSceneParam._m0[61u].x))) / _1928;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1929 >= cbSceneParam._m0[64u].x) && (_1930 >= cbSceneParam._m0[64u].y)) && (_1929 <= cbSceneParam._m0[64u].z)) && (_1930 <= cbSceneParam._m0[64u].w))
        {
            float _2069 = fma(_1724, cbSceneParam._m0[62u].w, fma(_1720, cbSceneParam._m0[62u].z, fma(_1716, cbSceneParam._m0[62u].y, _1712 * cbSceneParam._m0[62u].x))) / _1928;
            float _2073 = isnan(cbSceneParam._m0[41u].w) ? _2069 : (isnan(_2069) ? cbSceneParam._m0[41u].w : max(_2069, cbSceneParam._m0[41u].w));
            float _2116 = (cbSceneParam._m0[33u].x - sqrt(((_1726 * _1726) + (_1725 * _1725)) + (_1727 * _1727))) * cbSceneParam._m0[33u].y;
            float _4122 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
            float _2123 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1929, cbSceneParam._m0[33u].w + _1930), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1929, _1930 - cbSceneParam._m0[33u].z), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1929 - cbSceneParam._m0[33u].z, _1930 - cbSceneParam._m0[33u].w), _2073), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1929 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1930), _2073), 0.0)).x), vec4(0.25)));
            float _2127 = 1.0 - (_2123 * cbSceneParam._m0[34u].x);
            float _2128 = 1.0 - (_2123 * cbSceneParam._m0[34u].y);
            float _2129 = 1.0 - (_2123 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2129) ? _1876 : (isnan(_1876) ? _2129 : min(_1876, _2129));
            frontier_phi_34_33_ladder_1 = isnan(_2128) ? _1875 : (isnan(_1875) ? _2128 : min(_1875, _2128));
            frontier_phi_34_33_ladder_2 = isnan(_2127) ? _1874 : (isnan(_1874) ? _2127 : min(_1874, _2127));
        }
        else
        {
            frontier_phi_34_33_ladder = _1876;
            frontier_phi_34_33_ladder_1 = _1875;
            frontier_phi_34_33_ladder_2 = _1874;
        }
        _1940 = frontier_phi_34_33_ladder_2;
        _1942 = frontier_phi_34_33_ladder_1;
        _1944 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1940 = _1874;
        _1942 = _1875;
        _1944 = _1876;
    }
    uvec4 _1949 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1951 = _1949.x * 14u;
    uint _1952 = _1951 + 13u;
    float _1959 = _655 + (-1.0);
    float _1964 = (cbLight._m0[_1952].x * _1959) + 1.0;
    float _1965 = (cbLight._m0[_1952].y * _1959) + 1.0;
    float _1966 = (cbLight._m0[_1952].z * _1959) + 1.0;
    float _1967 = (cbLight._m0[_1952].w * _1959) + 1.0;
    uint _1968 = _1951 + 5u;
    float _1974 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
    uint _1978 = _1951 + 4u;
    float _1988 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
    uint _1992 = _1951 | 1u;
    float _2003 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_502, _503, _504));
    float _2006 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_502, _503, _504));
    float _4158 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _4169 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2011 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * 0.3183098733425140380859375;
    float _2013 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * 0.3183098733425140380859375;
    float _2020 = ((cbLight._m0[_1968].x * _1974) * _2013) + (((cbLight._m0[_1978].x * _1940) * _1988) * _2011);
    float _2021 = ((_1974 * cbLight._m0[_1968].y) * _2013) + (((cbLight._m0[_1978].y * _1942) * _1988) * _2011);
    float _2022 = ((_1974 * cbLight._m0[_1968].z) * _2013) + (((cbLight._m0[_1978].z * _1944) * _1988) * _2011);
    uvec4 _2026 = floatBitsToUint(cbLight._m0[_1951 + 12u]);
    bool _2028 = _2026.x == 0u;
    float _2130;
    float _2132;
    float _2134;
    if (_2028)
    {
        _2130 = _2020;
        _2132 = _2021;
        _2134 = _2022;
    }
    else
    {
        uint _2138 = _1951 + 6u;
        float _2154 = (dot(vec3(cbLight._m0[_1951 + 2u].xyz), vec3(_502, _503, _504)) * 0.5) + 0.5;
        float _2155 = _2154 * _2154;
        float _4180 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2156 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2157 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
        _2130 = (((cbLight._m0[_2138].x * 0.3183098733425140380859375) * _2156) * _2157) + _2020;
        _2132 = (((cbLight._m0[_2138].y * 0.3183098733425140380859375) * _2156) * _2157) + _2021;
        _2134 = (((cbLight._m0[_2138].z * 0.3183098733425140380859375) * _2156) * _2157) + _2022;
    }
    bool _2137 = _2026.y == 0u;
    float _2192;
    float _2194;
    float _2196;
    if (_2137)
    {
        _2192 = _2130;
        _2194 = _2132;
        _2196 = _2134;
    }
    else
    {
        uint _2354 = _1951 + 7u;
        float _2370 = (dot(vec3(cbLight._m0[_1951 + 3u].xyz), vec3(_502, _503, _504)) * 0.5) + 0.5;
        float _2371 = _2370 * _2370;
        float _4196 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2372 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2373 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
        _2192 = (((cbLight._m0[_2354].x * 0.3183098733425140380859375) * _2372) * _2373) + _2130;
        _2194 = (((cbLight._m0[_2354].y * 0.3183098733425140380859375) * _2372) * _2373) + _2132;
        _2196 = (((cbLight._m0[_2354].z * 0.3183098733425140380859375) * _2372) * _2373) + _2134;
    }
    uint _2199 = _1951 + 8u;
    float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1951].w)) * _505) * 0.949999988079071044921875);
    float _2213 = _2212 * _2212;
    float _2214 = cbLight._m0[_1951].x + _581;
    float _2215 = cbLight._m0[_1951].y + _582;
    float _2216 = cbLight._m0[_1951].z + _583;
    float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
    float _2221 = _2220 * _2214;
    float _2222 = _2220 * _2215;
    float _2223 = _2220 * _2216;
    float _2224 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_1951].xyz));
    float _4212 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _4223 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _2228 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _2229 = dot(vec3(_502, _503, _504), vec3(_2221, _2222, _2223));
    float _4234 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2233 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_2221, _2222, _2223));
    float _4245 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2237 = _2213 * _2213;
    float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
    float _2252 = (exp2(log2(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2253 = 1.0 - _2213;
    float _2264 = (0.5 / (((_2228 * ((_2227 * _2253) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2253) + _2213) * _2227))) * _2227;
    float _4256 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2266 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
    uint _2280 = _1951 + 9u;
    float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1992].w)) * _505) * 0.949999988079071044921875);
    float _2292 = _2291 * _2291;
    float _2293 = cbLight._m0[_1992].x + _581;
    float _2294 = cbLight._m0[_1992].y + _582;
    float _2295 = cbLight._m0[_1992].z + _583;
    float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
    float _2300 = _2299 * _2293;
    float _2301 = _2299 * _2294;
    float _2302 = _2299 * _2295;
    float _2303 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_1992].xyz));
    float _4267 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2307 = dot(vec3(_502, _503, _504), vec3(_2300, _2301, _2302));
    float _4278 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2311 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_2300, _2301, _2302));
    float _4289 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2315 = _2292 * _2292;
    float _2319 = ((_2310 * _2310) * (_2315 + (-1.0))) + 1.0;
    float _2328 = (exp2(log2(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2329 = 1.0 - _2292;
    float _2339 = (0.5 / (((_2228 * ((_2306 * _2329) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2329) + _2292) * _2306))) * _2306;
    float _4300 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2341 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2315 / ((_2319 * _2319) * 3.141590118408203125));
    float _2351 = (((_2328 * cbLight._m0[_2280].x) * _2341) * _1974) + ((((cbLight._m0[_2199].x * _1940) * _2252) * _2266) * _1988);
    float _2352 = (((_2328 * cbLight._m0[_2280].y) * _2341) * _1974) + ((((cbLight._m0[_2199].y * _1942) * _2252) * _2266) * _1988);
    float _2353 = (((_2328 * cbLight._m0[_2280].z) * _2341) * _1974) + ((((cbLight._m0[_2199].z * _1944) * _2252) * _2266) * _1988);
    float _2409;
    float _2411;
    float _2413;
    if (_2028)
    {
        _2409 = _2351;
        _2411 = _2352;
        _2413 = _2353;
    }
    else
    {
        uint _2415 = _1951 + 2u;
        uint _2419 = _1951 + 10u;
        float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2415].w)) * _505) * 0.949999988079071044921875);
        float _2434 = _2433 * _2433;
        float _2435 = cbLight._m0[_2415].x + _581;
        float _2436 = cbLight._m0[_2415].y + _582;
        float _2437 = cbLight._m0[_2415].z + _583;
        float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
        float _2442 = _2441 * _2435;
        float _2443 = _2441 * _2436;
        float _2444 = _2441 * _2437;
        float _2445 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2415].xyz));
        float _4311 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2449 = dot(vec3(_502, _503, _504), vec3(_2442, _2443, _2444));
        float _4322 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2453 = dot(vec3(cbLight._m0[_2415].xyz), vec3(_2442, _2443, _2444));
        float _4333 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2457 = _2434 * _2434;
        float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
        float _2470 = (exp2(log2(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2471 = 1.0 - _2434;
        float _2481 = (0.5 / (((_2228 * ((_2448 * _2471) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2471) + _2434) * _2448))) * _2448;
        float _4344 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2483 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
        float _2484 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
        _2409 = (((_2470 * cbLight._m0[_2419].x) * _2483) * _2484) + _2351;
        _2411 = (((_2470 * cbLight._m0[_2419].y) * _2483) * _2484) + _2352;
        _2413 = (((_2470 * cbLight._m0[_2419].z) * _2483) * _2484) + _2353;
    }
    float _2515;
    float _2517;
    float _2519;
    if (_2137)
    {
        _2515 = _2409;
        _2517 = _2411;
        _2519 = _2413;
    }
    else
    {
        uint _2526 = _1951 + 3u;
        uint _2530 = _1951 + 11u;
        float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2526].w)) * _505) * 0.949999988079071044921875);
        float _2545 = _2544 * _2544;
        float _2546 = cbLight._m0[_2526].x + _581;
        float _2547 = cbLight._m0[_2526].y + _582;
        float _2548 = cbLight._m0[_2526].z + _583;
        float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
        float _2553 = _2552 * _2546;
        float _2554 = _2552 * _2547;
        float _2555 = _2552 * _2548;
        float _2556 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2526].xyz));
        float _4360 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2560 = dot(vec3(_502, _503, _504), vec3(_2553, _2554, _2555));
        float _4371 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2564 = dot(vec3(cbLight._m0[_2526].xyz), vec3(_2553, _2554, _2555));
        float _4382 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2568 = _2545 * _2545;
        float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
        float _2581 = (exp2(log2(1.0 - (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2582 = 1.0 - _2545;
        float _2592 = (0.5 / (((_2228 * ((_2559 * _2582) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2228 * _2582) + _2545) * _2559))) * _2559;
        float _4393 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2594 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
        float _2595 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
        _2515 = (((_2581 * cbLight._m0[_2530].x) * _2594) * _2595) + _2409;
        _2517 = (((_2581 * cbLight._m0[_2530].y) * _2594) * _2595) + _2411;
        _2519 = (((_2581 * cbLight._m0[_2530].z) * _2594) * _2595) + _2413;
    }
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    float _2671;
    if (_1949.y == 0u)
    {
        uvec4 _2616 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2617 = _2616.x;
        uint _2628 = uint((float(_2616.y) * floor(float(uint(cbSceneParam._m0[85u].y * _590) / _2617))) + floor(float(uint(cbSceneParam._m0[85u].x * _589) / _2617)));
        float _2638 = (log2(_1727 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2639 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        uint _2642 = uint(isnan(14.0) ? _2639 : (isnan(_2639) ? 14.0 : min(_2639, 14.0)));
        uvec4 _2647 = texelFetch(g_lightClusterGridBuffer, int(((_2642 << 2u) + (_2628 << 6u)) >> 2u));
        uint _2648 = _2647.x;
        uint _2649 = _2616.z;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        if (((((1u << ((_2649 >> 4u) & 15u)) + 4294967295u) & _2648) == 0u) || ((_2649 & 240u) == 0u))
        {
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
        }
        else
        {
            float _2729;
            float _2731;
            float _2733;
            float _2735;
            float _2737;
            float _2739;
            float _2873 = 0.0;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            float _2877 = 0.0;
            float _2878 = 0.0;
            uint _2879 = 0u;
            uint _2888;
            bool _2889;
            for (;;)
            {
                _2888 = texelFetch(g_lightClassification, int((((_2642 << 5u) + (_2628 << 9u)) + (_2879 << 2u)) >> 2u)).x;
                _2889 = _2888 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2889)
                {
                    frontier_phi_66_pred = _2878;
                    frontier_phi_66_pred_1 = _2877;
                    frontier_phi_66_pred_2 = _2876;
                    frontier_phi_66_pred_3 = _2875;
                    frontier_phi_66_pred_4 = _2874;
                    frontier_phi_66_pred_5 = _2873;
                }
                else
                {
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    uint _3003;
                    _2997 = _2873;
                    _2998 = _2874;
                    _2999 = _2875;
                    _3000 = _2876;
                    _3001 = _2877;
                    _3002 = _2878;
                    _3003 = _2888;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    for (;;)
                    {
                        uint _3007 = uint(findLSB(_3003)) + (_2879 << 5u);
                        uint _3004 = (_3003 + 4294967295u) & _3003;
                        uint _3009 = _3007 * 48u;
                        vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3009)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 3u)).x));
                        uint _3029 = (_3007 * 48u) + 4u;
                        vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3029)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 3u)).x));
                        uint _3048 = (_3007 * 48u) + 8u;
                        vec3 _3059 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3048)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 2u)).x));
                        float _3063 = _3023.x - _1725;
                        float _3064 = _3023.y - _1726;
                        float _3065 = _3023.z - _1727;
                        float _3066 = dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065));
                        float _3069 = inversesqrt(_3066);
                        float _3070 = _3069 * _3063;
                        float _3071 = _3069 * _3064;
                        float _3072 = _3069 * _3065;
                        float _3073 = dot(vec3(_611, _614, _617), vec3(_3070, _3071, _3072));
                        float _3078 = 1.0 - (_3066 * _3023.w);
                        float _4419 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3079 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                        float _3080 = sqrt(_3066) * _3042.w;
                        float _3083 = 1.39999997615814208984375 / (_3080 + 1.39999997615814208984375);
                        float _3084 = _3083 * _3083;
                        float _3087 = ((1.0 - _3084) * _3073) + _3084;
                        float _3090 = _3080 * _3080;
                        float _3094 = ((isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))) * _3079) / ((_3090 * 0.699999988079071044921875) + 1.0);
                        float _3098 = (-0.0) - _1725;
                        float _3099 = (-0.0) - _1726;
                        float _3100 = (-0.0) - _1727;
                        float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                        float _3105 = _3104 * _3098;
                        float _3106 = _3104 * _3099;
                        float _3107 = _3104 * _3100;
                        float _3114 = exp2(log2(1.0 / ((_3090 * 3.5) + 5.0)) * 0.25);
                        float _3115 = 1.0 - _671;
                        float _3122 = sqrt(1.0 - ((1.0 - (_3115 * _3115)) * (1.0 - (_3114 * _3114))));
                        float _3123 = _3122 * _3122;
                        float _3124 = _3123 * _3123;
                        float _3125 = _3105 + _3070;
                        float _3126 = _3106 + _3071;
                        float _3127 = _3107 + _3072;
                        float _3131 = inversesqrt(dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127)));
                        float _3135 = dot(vec3(_611, _614, _617), vec3(_3105, _3106, _3107));
                        float _4435 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3138 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                        float _3139 = dot(vec3(_611, _614, _617), vec3(_3131 * _3125, _3131 * _3126, _3131 * _3127));
                        float _4446 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3142 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3146 = ((_3142 * _3142) * (_3124 + (-1.0))) + 1.0;
                        float _3147 = _3083 * _3123;
                        float _3148 = _3147 * _3147;
                        float _3151 = ((1.0 - _3148) * _3073) + _3148;
                        float _4457 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3152 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                        float _3153 = 1.0 - _3123;
                        float _3163 = (0.5 / (((_3152 * ((_3138 * _3153) + _3123)) + 9.9999999392252902907785028219223e-09) + (((_3152 * _3153) + _3123) * _3138))) * _3152;
                        float _4468 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3174 = (((_3124 * 3.1415927410125732421875) * (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) / ((_3146 * _3146) * ((_3090 * 2.1991131305694580078125) + 3.141590118408203125))) * _3079;
                        _2932 = (_3094 * _3042.x) + _3000;
                        _2933 = (_3094 * _3042.y) + _3001;
                        _2934 = (_3094 * _3042.z) + _3002;
                        _2929 = (_3174 * _3059.x) + _2997;
                        _2930 = (_3174 * _3059.y) + _2998;
                        _2931 = (_3174 * _3059.z) + _2999;
                        if (_3004 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2997 = _2929;
                            _2998 = _2930;
                            _2999 = _2931;
                            _3000 = _2932;
                            _3001 = _2933;
                            _3002 = _2934;
                            _3003 = _3004;
                        }
                    }
                    frontier_phi_66_pred = _2934;
                    frontier_phi_66_pred_1 = _2933;
                    frontier_phi_66_pred_2 = _2932;
                    frontier_phi_66_pred_3 = _2931;
                    frontier_phi_66_pred_4 = _2930;
                    frontier_phi_66_pred_5 = _2929;
                }
                _2739 = frontier_phi_66_pred;
                _2737 = frontier_phi_66_pred_1;
                _2735 = frontier_phi_66_pred_2;
                _2733 = frontier_phi_66_pred_3;
                _2731 = frontier_phi_66_pred_4;
                _2729 = frontier_phi_66_pred_5;
                uint _2880 = _2879 + 1u;
                if (_2880 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2873 = _2729;
                    _2874 = _2731;
                    _2875 = _2733;
                    _2876 = _2735;
                    _2877 = _2737;
                    _2878 = _2739;
                    _2879 = _2880;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
        }
        uvec4 _2742 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2743 = _2742.z;
        uint _2745 = (_2743 >> 8u) & 15u;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        if (((4294967295u << _2745) & _2648) == 0u)
        {
            _2841 = _2728;
            _2843 = _2730;
            _2845 = _2732;
            _2847 = _2734;
            _2849 = _2736;
            _2851 = _2738;
        }
        else
        {
            float _2866 = inversesqrt(dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727)));
            float _2867 = _2866 * _1725;
            float _2868 = _2866 * _1726;
            float _2869 = _2866 * _1727;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2745 < ((_2743 >> 12u) & 15u))
            {
                float _2842;
                float _2844;
                float _2846;
                float _2848;
                float _2850;
                float _2852;
                float _2980 = _2728;
                float _2981 = _2730;
                float _2982 = _2732;
                float _2983 = _2734;
                float _2984 = _2736;
                float _2985 = _2738;
                uint _2986 = _2745;
                uint _2995;
                bool _2996;
                for (;;)
                {
                    _2995 = texelFetch(g_lightClassification, int((((_2642 << 5u) + (_2628 << 9u)) + (_2986 << 2u)) >> 2u)).x;
                    _2996 = _2995 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2996)
                    {
                        frontier_phi_72_pred = _2985;
                        frontier_phi_72_pred_1 = _2984;
                        frontier_phi_72_pred_2 = _2983;
                        frontier_phi_72_pred_3 = _2982;
                        frontier_phi_72_pred_4 = _2981;
                        frontier_phi_72_pred_5 = _2980;
                    }
                    else
                    {
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3192 = _2980;
                        float _3193 = _2981;
                        float _3194 = _2982;
                        float _3195 = _2983;
                        float _3196 = _2984;
                        float _3197 = _2985;
                        uint _3198 = _2995;
                        uint _3199;
                        vec4 _3224;
                        float _3225;
                        vec4 _3240;
                        vec3 _3252;
                        vec4 _3268;
                        vec4 _3283;
                        float _3329;
                        bool _3330;
                        for (;;)
                        {
                            uint _3209 = ((_2986 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3198));
                            _3199 = (_3198 + 4294967295u) & _3198;
                            uint _3211 = _3209 * 40u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            _3225 = _3224.w;
                            uint _3227 = (_3209 * 40u) + 4u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3242 = (_3209 * 40u) + 8u;
                            _3252 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x));
                            uint _3255 = (_3209 * 40u) + 16u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3270 = (_3209 * 40u) + 20u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3285 = (_3209 * 40u) + 24u;
                            vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3304 = (_3209 * 40u) + 28u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3329 = fma(_1727, _3317.z, fma(_1726, _3317.y, _3317.x * _1725)) + _3317.w;
                            _3330 = !((fma(_1727, _3298.z, fma(_1726, _3298.y, _3298.x * _1725)) + _3298.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3330)
                            {
                                float _3357 = _3224.x - _1725;
                                float _3358 = _3224.y - _1726;
                                float _3359 = _3224.z - _1727;
                                float _3360 = dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359));
                                float _3363 = inversesqrt(_3360);
                                float _3364 = _3363 * _3357;
                                float _3365 = _3363 * _3358;
                                float _3366 = _3363 * _3359;
                                float _3370 = 1.0 - (_3360 / (_3225 * _3225));
                                float _4479 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                                float _3375 = sqrt(_3360) * _3240.w;
                                float _3377 = 1.39999997615814208984375 / (_3375 + 1.39999997615814208984375);
                                float _3378 = _3377 * _3377;
                                float _3381 = ((1.0 - _3378) * dot(vec3(_3364, _3365, _3366), vec3(_611, _614, _617))) + _3378;
                                float _3384 = _3375 * _3375;
                                float _3388 = (fma(_1727, _3268.z, fma(_1726, _3268.y, _3268.x * _1725)) + _3268.w) / _3329;
                                float _3389 = (fma(_1727, _3283.z, fma(_1726, _3283.y, _3283.x * _1725)) + _3283.w) / _3329;
                                float _3393 = 1.0 - dot(vec2(_3388, _3389), vec2(_3388, _3389));
                                float _4495 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                                float _3395 = _3394 * (((isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))) * _3371) / ((_3384 * 0.699999988079071044921875) + 1.0));
                                float _3407 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                                float _3408 = 1.0 - _671;
                                float _3415 = sqrt(1.0 - ((1.0 - (_3408 * _3408)) * (1.0 - (_3407 * _3407))));
                                float _3416 = _3415 * _3415;
                                float _3417 = _3416 * _3416;
                                float _3418 = _3364 - _2867;
                                float _3419 = _3365 - _2868;
                                float _3420 = _3366 - _2869;
                                float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                                float _3428 = dot(vec3(_611, _614, _617), vec3((-0.0) - _2867, (-0.0) - _2868, (-0.0) - _2869));
                                float _4506 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3431 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3432 = dot(vec3(_611, _614, _617), vec3(_3424 * _3418, _3424 * _3419, _3424 * _3420));
                                float _4517 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3435 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                                float _3439 = ((_3435 * _3435) * (_3417 + (-1.0))) + 1.0;
                                float _3440 = _3377 * _3416;
                                float _3441 = _3440 * _3440;
                                float _3447 = ((1.0 - _3441) * dot(vec3(_611, _614, _617), vec3(_3364, _3365, _3366))) + _3441;
                                float _4528 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3449 = 1.0 - _3416;
                                float _3459 = (0.5 / (((_3448 * ((_3431 * _3449) + _3416)) + 9.9999999392252902907785028219223e-09) + (((_3448 * _3449) + _3416) * _3431))) * _3448;
                                float _4539 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3469 = (_3394 * _3371) * (((_3417 * 3.1415927410125732421875) * (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) / ((_3439 * _3439) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3395 * _3240.y;
                                frontier_phi_78_pred_1 = _3395 * _3240.x;
                                frontier_phi_78_pred_2 = _3469 * _3252.z;
                                frontier_phi_78_pred_3 = _3469 * _3252.y;
                                frontier_phi_78_pred_4 = _3469 * _3252.x;
                                frontier_phi_78_pred_5 = _3395 * _3240.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3477 = frontier_phi_78_pred;
                            _3476 = frontier_phi_78_pred_1;
                            _3475 = frontier_phi_78_pred_2;
                            _3474 = frontier_phi_78_pred_3;
                            _3473 = frontier_phi_78_pred_4;
                            _3478 = frontier_phi_78_pred_5;
                            _3182 = _3476 + _3195;
                            _3183 = _3477 + _3196;
                            _3184 = _3478 + _3197;
                            _3179 = _3473 + _3192;
                            _3180 = _3474 + _3193;
                            _3181 = _3475 + _3194;
                            if (_3199 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3199;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3184;
                        frontier_phi_72_pred_1 = _3183;
                        frontier_phi_72_pred_2 = _3182;
                        frontier_phi_72_pred_3 = _3181;
                        frontier_phi_72_pred_4 = _3180;
                        frontier_phi_72_pred_5 = _3179;
                    }
                    _2852 = frontier_phi_72_pred;
                    _2850 = frontier_phi_72_pred_1;
                    _2848 = frontier_phi_72_pred_2;
                    _2846 = frontier_phi_72_pred_3;
                    _2844 = frontier_phi_72_pred_4;
                    _2842 = frontier_phi_72_pred_5;
                    uint _2987 = _2986 + 1u;
                    if (_2987 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2980 = _2842;
                        _2981 = _2844;
                        _2982 = _2846;
                        _2983 = _2848;
                        _2984 = _2850;
                        _2985 = _2852;
                        _2986 = _2987;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2852;
                frontier_phi_60_61_ladder_1 = _2850;
                frontier_phi_60_61_ladder_2 = _2846;
                frontier_phi_60_61_ladder_3 = _2844;
                frontier_phi_60_61_ladder_4 = _2842;
                frontier_phi_60_61_ladder_5 = _2848;
            }
            else
            {
                frontier_phi_60_61_ladder = _2738;
                frontier_phi_60_61_ladder_1 = _2736;
                frontier_phi_60_61_ladder_2 = _2732;
                frontier_phi_60_61_ladder_3 = _2730;
                frontier_phi_60_61_ladder_4 = _2728;
                frontier_phi_60_61_ladder_5 = _2734;
            }
            _2841 = frontier_phi_60_61_ladder_4;
            _2843 = frontier_phi_60_61_ladder_3;
            _2845 = frontier_phi_60_61_ladder_2;
            _2847 = frontier_phi_60_61_ladder_5;
            _2849 = frontier_phi_60_61_ladder_1;
            _2851 = frontier_phi_60_61_ladder;
        }
        float _2856 = isnan(1.0) ? _655 : (isnan(_655) ? 1.0 : min(_655, 1.0));
        _2661 = (_2856 * _2847) + _2192;
        _2663 = (_2856 * _2849) + _2194;
        _2665 = (_2856 * _2851) + _2196;
        _2667 = ((_2841 * 0.039999999105930328369140625) * _2856) + _2515;
        _2669 = ((_2843 * 0.039999999105930328369140625) * _2856) + _2517;
        _2671 = ((_2845 * 0.039999999105930328369140625) * _2856) + _2519;
    }
    else
    {
        _2661 = _2192;
        _2663 = _2194;
        _2665 = _2196;
        _2667 = _2515;
        _2669 = _2517;
        _2671 = _2519;
    }
    float _4555 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4566 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4577 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    uint _2691 = _228 + 6u;
    float _2699 = _589 / cbSceneParam._m0[86u].x;
    float _2700 = _590 / cbSceneParam._m0[86u].y;
    vec4 _2714 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2699, _2700, (log2((isnan(cbSceneParam._m0[77u].w) ? _523 : (isnan(_523) ? cbSceneParam._m0[77u].w : min(_523, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2716 = _2714.x;
    float _2717 = _2714.y;
    float _2718 = _2714.z;
    float _2719 = _2714.w;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    if (_523 > cbSceneParam._m0[78u].w)
    {
        float _2753 = isnan(_523) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _523 : min(cbSceneParam._m0[80u].w, _523));
        float _2754 = _2753 / _523;
        float _2765 = _2754 * _574;
        float _2766 = _575 * _2754;
        float _2767 = (-0.0) - _2766;
        float _2769 = _2754 * _576;
        float _2771 = (cbSceneParam._m0[77u].w * _2767) / _2753;
        float _2772 = _2771 + cbSceneParam._m0[79u].w;
        float _2773 = cbSceneParam._m0[79u].w - _2766;
        float _2779 = sqrt(((_2765 * _2765) + (_2766 * _2766)) + (_2769 * _2769));
        float _2782 = (1.0 - (cbSceneParam._m0[77u].w / _2753)) * _2779;
        float _2787 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2789 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2942;
        if (abs((_2767 - _2771) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2942 = ((((_2772 > 0.0) ? exp2(_2787 * _2772) : (2.0 - exp2(_2789 * _2772))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2782;
        }
        else
        {
            float _2902 = 1.0 / cbSceneParam._m0[80u].x;
            float _2903 = isnan(_2773) ? _2772 : (isnan(_2772) ? _2773 : max(_2772, _2773));
            float _2904 = isnan(_2773) ? _2772 : (isnan(_2772) ? _2773 : min(_2772, _2773));
            float _2913 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : min(_2903, 0.0));
            float _2914 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : min(_2904, 0.0));
            _2942 = ((abs(_2779 / _2767) * cbSceneParam._m0[80u].y) * ((((_2913 - _2914) * 2.0) - ((exp2(_2787 * (isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0)))) - exp2(_2787 * (isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0))))) * _2902)) - ((exp2(_2789 * _2913) - exp2(_2789 * _2914)) * _2902))) + (_2782 * cbSceneParam._m0[80u].z);
        }
        vec4 _2944 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2699, _2700, 1.0), 0.0);
        float _2953 = exp2((_2942 * (-1.44269502162933349609375)) * (1.0 - _2944.w));
        float _2954 = log2(_2953);
        float _2970 = log2(_2719);
        _2791 = (exp2(_2970 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].x)) * _2944.x) / cbSceneParam._m0[78u].x)) + _2716;
        _2793 = (exp2(_2970 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].y)) * _2944.y) / cbSceneParam._m0[78u].y)) + _2717;
        _2795 = (exp2(_2970 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].z)) * _2944.z) / cbSceneParam._m0[78u].z)) + _2718;
        _2797 = _2953 * _2719;
    }
    else
    {
        _2791 = _2716;
        _2793 = _2717;
        _2795 = _2718;
        _2797 = _2719;
    }
    float _2809 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2810 = _2809 == 3.0;
    float _2811 = log2(_2797);
    float _2818 = exp2(_2811 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2661 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _655))) + ((_2667 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1460)) * cbPerFrame._m0[3u].x));
    float _2819 = exp2(_2811 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2663 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _655))) + ((_2669 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1460)) * cbPerFrame._m0[3u].x));
    float _2820 = exp2(_2811 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2665 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _655))) + ((_2671 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1460)) * cbPerFrame._m0[3u].x));
    float _2829 = (_2809 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2829 * (_2810 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2791)));
    SV_Target.y = _2829 * (_2810 ? _2819 : (_2819 + (cbSceneParam._m0[72u].w * _2793)));
    SV_Target.z = _2829 * (_2810 ? _2820 : (_2820 + (cbSceneParam._m0[72u].w * _2795)));
    SV_Target.w = cbInstanceData._m0[_2691].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2691].w;
}


