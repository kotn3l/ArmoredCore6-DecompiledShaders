#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _981;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _294 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _248) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _249) + cbTextureTilingScale._m0[20u].w));
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _324 = _320.z;
    float _328 = (_320.x * 2.0) + (-1.0);
    float _329 = (_320.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_328, _329), vec2(_328, _329));
    float _3574 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _336 = sqrt(1.0 - (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))));
    float _341 = _328 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_294.x * 2.0) + (-1.0)));
    float _342 = _329 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_294.y * 2.0) + (-1.0)));
    vec4 _359 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _361 = _359.x;
    float _362 = 1.0 - _361;
    float _378 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_361 - _362) * cbMtdParam._m0[24u].z) + _362) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3585 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _379 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _386 = (_379 * (cbMtdParam._m0[17u].x - _274)) + _274;
    float _387 = (_379 * (cbMtdParam._m0[17u].y - _275)) + _275;
    float _388 = (_379 * (cbMtdParam._m0[17u].z - _276)) + _276;
    float _393 = (((_294.z - _324) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _324;
    vec4 _406 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _413 = (_406.x * 2.0) + (-1.0);
    float _414 = (_406.y * 2.0) + (-1.0);
    float _415 = dot(vec2(_413, _414), vec2(_413, _414));
    float _3596 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _423 = (_379 * (_406.z - _393)) + _393;
    float _435 = (((_413 - _341) + (cbMtdParam._m0[21u].x * _341)) * _379) + _341;
    float _436 = (((_414 - _342) + (cbMtdParam._m0[21u].x * _342)) * _379) + _342;
    float _437 = (_379 * (sqrt(1.0 - (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) - _336)) + _336;
    float _442 = cbMtdParam._m0[22u].x + _320.w;
    float _445 = fma(_437, _215 * NORMAL.x, fma(_436, _222 * TANGENT.x, (_208 * _200) * _435));
    float _448 = fma(_437, _215 * NORMAL.y, fma(_436, _222 * TANGENT.y, (_208 * _201) * _435));
    float _451 = fma(_437, _215 * NORMAL.z, fma(_436, _222 * TANGENT.z, (_208 * _202) * _435));
    float _455 = inversesqrt(dot(vec3(_445, _448, _451), vec3(_445, _448, _451)));
    float _456 = _455 * _445;
    float _457 = _455 * _448;
    float _458 = _455 * _451;
    float _3607 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _459 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _3618 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3629 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3640 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _3651 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _477 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _528 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _518);
    float _529 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _518);
    float _530 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _518);
    float _534 = inversesqrt(dot(vec3(_528, _529, _530), vec3(_528, _529, _530)));
    float _535 = _528 * _534;
    float _536 = _529 * _534;
    float _537 = _530 * _534;
    float _543 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _544 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _565 = fma(_458, cbSceneParam._m0[5u].z, fma(_457, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _456));
    float _568 = fma(_458, cbSceneParam._m0[6u].z, fma(_457, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _456));
    float _571 = fma(_458, cbSceneParam._m0[7u].z, fma(_457, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _456));
    uint _585 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _591 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) * cbInstanceData._m0[_585].x;
    float _592 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) * cbInstanceData._m0[_585].y;
    float _593 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_585].z;
    float _3662 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _594 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _3673 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _595 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _596 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    vec4 _605 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _543, cbSceneParam._m0[86u].y * _544));
    float _609 = ((isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * TEXCOORD_5.w) * _605.x;
    float _610 = dot(vec3(_456, _457, _458), vec3(_535, _536, _537));
    float _613 = _610 * 2.0;
    float _617 = (_613 * _456) - _535;
    float _618 = (_613 * _457) - _536;
    float _619 = (_613 * _458) - _537;
    float _623 = abs(dot(vec3(_535, _536, _537), vec3(_456, _457, _458)));
    float _3695 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _625 = sqrt(_459);
    float _638 = exp2((_625 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_625 * 3.0));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _980;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _705 = fma(_678, cbModelParam._m0[26u].z, fma(_674, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _670));
        float _709 = fma(_678, cbModelParam._m0[27u].z, fma(_674, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _670));
        float _713 = fma(_678, cbModelParam._m0[28u].z, fma(_674, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _670));
        float _738 = _670 + _456;
        float _739 = _674 + _457;
        float _740 = _678 + _458;
        float _750 = fma(_740, cbModelParam._m0[26u].z, fma(_739, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _738)) - _705;
        float _751 = fma(_740, cbModelParam._m0[27u].z, fma(_739, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _738)) - _709;
        float _752 = fma(_740, cbModelParam._m0[28u].z, fma(_739, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _738)) - _713;
        float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
        float _769 = ((_756 * _750) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_705 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _770 = ((_756 * _751) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_709 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _771 = ((_756 * _752) / cbModelParam._m0[34u].z) + ((((((_713 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        float _808 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_774.x + (-0.5));
        float _810 = _808 * (_774.y + (-0.5));
        float _811 = _808 * (_774.z + (-0.5));
        float _818 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_781.x + (-0.5));
        float _820 = _818 * (_781.y + (-0.5));
        float _821 = _818 * (_781.z + (-0.5));
        float _828 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_788.x + (-0.5));
        float _830 = _828 * (_788.y + (-0.5));
        float _831 = _828 * (_788.z + (-0.5));
        float _838 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_795.x + (-0.5));
        float _840 = _838 * (_795.y + (-0.5));
        float _841 = _838 * (_795.z + (-0.5));
        float _842 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _843 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = _809 * 0.5;
        float _846 = _819 * 0.5;
        float _847 = _829 * 0.5;
        float _848 = dot(vec3(_845, _846, _847), vec3(_845, _846, _847));
        float _853 = (_848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_848);
        float _862 = (dot(vec3(_456, _457, _458), vec3(_853 * _845, _853 * _846, _853 * _847)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _872 = sqrt(((_846 * _846) + (_845 * _845)) + (_847 * _847)) / (_842 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _874 = _873 * 2.0;
        float _878 = (1.0 - _873) / (_873 + 1.0);
        float _3743 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _888 = ((((1.0 - _879) * (_874 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_874 + 1.0))) + _879) * _842;
        float _889 = _810 * 0.5;
        float _890 = _820 * 0.5;
        float _891 = _830 * 0.5;
        float _892 = dot(vec3(_889, _890, _891), vec3(_889, _890, _891));
        float _897 = (_892 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_892);
        float _905 = (dot(vec3(_456, _457, _458), vec3(_897 * _889, _897 * _890, _897 * _891)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _914 = sqrt(((_890 * _890) + (_889 * _889)) + (_891 * _891)) / (_843 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _916 = _915 * 2.0;
        float _920 = (1.0 - _915) / (_915 + 1.0);
        float _3776 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _930 = ((((1.0 - _921) * (_916 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_916 + 1.0))) + _921) * _843;
        float _931 = _811 * 0.5;
        float _932 = _821 * 0.5;
        float _933 = _831 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _947 = (dot(vec3(_456, _457, _458), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _956 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3809 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_958 + 1.0))) + _963) * _844;
        _980 = _811;
        _982 = _810;
        _983 = _809;
        _984 = _821;
        _985 = _820;
        _986 = _819;
        _987 = _831;
        _988 = _830;
        _989 = _829;
        _990 = _844;
        _991 = _843;
        _992 = _842;
        _993 = cbModelParam._m0[36u].z * (isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0)));
        _994 = cbModelParam._m0[36u].z * (isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0)));
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
    }
    else
    {
        _980 = _981;
        _982 = _981;
        _983 = _981;
        _984 = _981;
        _985 = _981;
        _986 = _981;
        _987 = _981;
        _988 = _981;
        _989 = _981;
        _990 = _981;
        _991 = _981;
        _992 = _981;
        _993 = 0.0;
        _994 = 0.0;
        _995 = 0.0;
    }
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1020 = fma(_678, cbModelParam._m0[30u].z, fma(_674, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _670));
        float _1024 = fma(_678, cbModelParam._m0[31u].z, fma(_674, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _670));
        float _1028 = fma(_678, cbModelParam._m0[32u].z, fma(_674, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _670));
        float _1051 = _670 + _456;
        float _1052 = _674 + _457;
        float _1053 = _678 + _458;
        float _1063 = fma(_1053, cbModelParam._m0[30u].z, fma(_1052, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1051)) - _1020;
        float _1064 = fma(_1053, cbModelParam._m0[31u].z, fma(_1052, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1051)) - _1024;
        float _1065 = fma(_1053, cbModelParam._m0[32u].z, fma(_1052, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1051)) - _1028;
        float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
        float _1082 = ((_1069 * _1063) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1020 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1069 * _1064) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1024 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1069 * _1065) / cbModelParam._m0[35u].z) + ((((((_1028 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        float _1119 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1086.x + (-0.5));
        float _1121 = _1119 * (_1086.y + (-0.5));
        float _1122 = _1119 * (_1086.z + (-0.5));
        float _1129 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1093.x + (-0.5));
        float _1131 = _1129 * (_1093.y + (-0.5));
        float _1132 = _1129 * (_1093.z + (-0.5));
        float _1139 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1100.x + (-0.5));
        float _1141 = _1139 * (_1100.y + (-0.5));
        float _1142 = _1139 * (_1100.z + (-0.5));
        float _1149 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1107.x + (-0.5));
        float _1151 = _1149 * (_1107.y + (-0.5));
        float _1152 = _1149 * (_1107.z + (-0.5));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = _1120 * 0.5;
        float _1157 = _1130 * 0.5;
        float _1158 = _1140 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_456, _457, _458), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3872 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1183 + 1.0))) + _1188) * _1153;
        float _1198 = _1121 * 0.5;
        float _1199 = _1131 * 0.5;
        float _1200 = _1141 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_456, _457, _458), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3905 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1225 + 1.0))) + _1230) * _1154;
        float _1240 = _1122 * 0.5;
        float _1241 = _1132 * 0.5;
        float _1242 = _1142 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_456, _457, _458), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3938 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1267 + 1.0))) + _1272) * _1155;
        _1289 = _1122;
        _1290 = _1121;
        _1291 = _1120;
        _1292 = _1132;
        _1293 = _1131;
        _1294 = _1130;
        _1295 = _1142;
        _1296 = _1141;
        _1297 = _1140;
        _1298 = _1155;
        _1299 = _1154;
        _1300 = _1153;
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1302 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _981;
        _1290 = _981;
        _1291 = _981;
        _1292 = _981;
        _1293 = _981;
        _1294 = _981;
        _1295 = _981;
        _1296 = _981;
        _1297 = _981;
        _1298 = _981;
        _1299 = _981;
        _1300 = _981;
        _1301 = 0.0;
        _1302 = 0.0;
        _1303 = 0.0;
    }
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _993)) + _993;
    float _1314 = (cbModelParam._m0[1u].x * (_1302 - _994)) + _994;
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _995)) + _995;
    float _1336 = fma(_1315, cbSceneParam._m0[89u].z, fma(_1314, cbSceneParam._m0[89u].y, _1313 * cbSceneParam._m0[89u].x));
    float _1339 = fma(_1315, cbSceneParam._m0[90u].z, fma(_1314, cbSceneParam._m0[90u].y, _1313 * cbSceneParam._m0[90u].x));
    float _1342 = fma(_1315, cbSceneParam._m0[91u].z, fma(_1314, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1313));
    float _1357 = _617 * 0.5;
    float _1358 = _618 * 0.5;
    float _1359 = _619 * 0.5;
    float _1360 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1363 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1290, _1293, _1296, _1299));
    float _1366 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1400;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1373 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_980, _984, _987, _990));
        float _1377 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_982, _985, _988, _991));
        float _1381 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_983, _986, _989, _992));
        float _1388 = dot(vec4(cbModelParam._m0[39u]), vec4(_1357, _1358, _1359, 1.0));
        _1400 = dot(vec3(isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1388) ? 0.0 : (isnan(0.0) ? _1388 : max(0.0, _1388))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1400 = 1.0;
    }
    float _1411;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1402 = dot(vec4(cbModelParam._m0[40u]), vec4(_1357, _1358, _1359, 1.0));
        _1411 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1402) ? 0.0 : (isnan(0.0) ? _1402 : max(0.0, _1402))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1411 = 1.0;
    }
    float _1415 = (_1411 * cbModelParam._m0[1u].x) + (_1400 * (1.0 - cbModelParam._m0[1u].x));
    float _1425 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _459);
    float _1426 = isnan(_1425) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1425 : min(cbModelParam._m0[25u].z, _1425));
    float _1507;
    float _1509;
    float _1511;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1474 = fma(_678, cbModelParam._m0[13u].z, fma(_674, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _670)) + cbModelParam._m0[13u].w;
        float _1478 = fma(_678, cbModelParam._m0[14u].z, fma(_674, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _670)) + cbModelParam._m0[14u].w;
        float _1482 = fma(_678, cbModelParam._m0[15u].z, fma(_674, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _670)) + cbModelParam._m0[15u].w;
        float _1485 = fma(_619, cbModelParam._m0[13u].z, fma(_618, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _617));
        float _1488 = fma(_619, cbModelParam._m0[14u].z, fma(_618, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _617));
        float _1491 = fma(_619, cbModelParam._m0[15u].z, fma(_618, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _617));
        float _1519;
        if (_1485 > 0.0)
        {
            _1519 = abs((1.0 - _1474) / _1485);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1474 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1519 = frontier_phi_14_12_ladder;
        }
        float _1691;
        if (_1488 > 0.0)
        {
            _1691 = abs((1.0 - _1478) / _1488);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1478 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1691 = frontier_phi_23_19_ladder;
        }
        float _1987;
        if (_1491 > 0.0)
        {
            _1987 = abs((1.0 - _1482) / _1491);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1482 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1987 = frontier_phi_35_30_ladder;
        }
        float _1989 = isnan(_1691) ? _1519 : (isnan(_1519) ? _1691 : min(_1519, _1691));
        float _1990 = isnan(_1987) ? _1989 : (isnan(_1989) ? _1987 : min(_1989, _1987));
        float _1994 = (_1990 * _1485) + _1474;
        float _1995 = (_1990 * _1488) + _1478;
        float _1996 = (_1990 * _1491) + _1482;
        float _1997 = _1990 * 9.9999997473787516355514526367188e-05;
        float _1999 = (-1.0) - _1997;
        float _2001 = _1997 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1996 > _2001) || ((_1996 < _1999) || ((_1995 > _2001) || ((_1995 < _1999) || ((_1994 < _1999) || (_1994 > _2001))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2141 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1996, cbModelParam._m0[9u].z, fma(_1995, cbModelParam._m0[9u].y, _1994 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1996, cbModelParam._m0[10u].z, fma(_1995, cbModelParam._m0[10u].y, _1994 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1996, cbModelParam._m0[11u].z, fma(_1995, cbModelParam._m0[11u].y, _1994 * cbModelParam._m0[11u].x))), _1426);
            frontier_phi_13_35_ladder = _2141.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2141.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2141.x * cbModelParam._m0[1u].y;
        }
        _1507 = frontier_phi_13_35_ladder_2;
        _1509 = frontier_phi_13_35_ladder_1;
        _1511 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1495 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_617, _618, _619), _1426);
        _1507 = _1495.x * cbModelParam._m0[1u].y;
        _1509 = _1495.y * cbModelParam._m0[1u].y;
        _1511 = _1495.z * cbModelParam._m0[1u].y;
    }
    float _1515 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _459);
    float _1516 = isnan(_1515) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1515 : min(cbModelParam._m0[25u].w, _1515));
    float _1607;
    float _1609;
    float _1611;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1571 = fma(_678, cbModelParam._m0[21u].z, fma(_674, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _670)) + cbModelParam._m0[21u].w;
        float _1575 = fma(_678, cbModelParam._m0[22u].z, fma(_674, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _670)) + cbModelParam._m0[22u].w;
        float _1579 = fma(_678, cbModelParam._m0[23u].z, fma(_674, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _670)) + cbModelParam._m0[23u].w;
        float _1582 = fma(_619, cbModelParam._m0[21u].z, fma(_618, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _617));
        float _1585 = fma(_619, cbModelParam._m0[22u].z, fma(_618, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _617));
        float _1588 = fma(_619, cbModelParam._m0[23u].z, fma(_618, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _617));
        float _1696;
        if (_1582 > 0.0)
        {
            _1696 = abs((1.0 - _1571) / _1582);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1571 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1696 = frontier_phi_25_21_ladder;
        }
        float _2014;
        if (_1585 > 0.0)
        {
            _2014 = abs((1.0 - _1575) / _1585);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1575 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2014 = frontier_phi_37_32_ladder;
        }
        float _2341;
        if (_1588 > 0.0)
        {
            _2341 = abs((1.0 - _1579) / _1588);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1579 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2341 = frontier_phi_47_44_ladder;
        }
        float _2343 = isnan(_2014) ? _1696 : (isnan(_1696) ? _2014 : min(_1696, _2014));
        float _2344 = isnan(_2341) ? _2343 : (isnan(_2343) ? _2341 : min(_2343, _2341));
        float _2348 = (_2344 * _1582) + _1571;
        float _2349 = (_2344 * _1585) + _1575;
        float _2350 = (_2344 * _1588) + _1579;
        float _2351 = _2344 * 9.9999997473787516355514526367188e-05;
        float _2352 = (-1.0) - _2351;
        float _2354 = _2351 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2350 > _2354) || ((_2350 < _2352) || ((_2349 > _2354) || ((_2349 < _2352) || ((_2348 < _2352) || (_2348 > _2354))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2468 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2350, cbModelParam._m0[17u].z, fma(_2349, cbModelParam._m0[17u].y, _2348 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2350, cbModelParam._m0[18u].z, fma(_2349, cbModelParam._m0[18u].y, _2348 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2350, cbModelParam._m0[19u].z, fma(_2349, cbModelParam._m0[19u].y, _2348 * cbModelParam._m0[19u].x))), _1516);
            frontier_phi_22_47_ladder = _2468.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2468.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2468.x * cbModelParam._m0[1u].z;
        }
        _1607 = frontier_phi_22_47_ladder_2;
        _1609 = frontier_phi_22_47_ladder_1;
        _1611 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1591 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_617, _618, _619), _1516);
        _1607 = _1591.x * cbModelParam._m0[1u].z;
        _1609 = _1591.y * cbModelParam._m0[1u].z;
        _1611 = _1591.z * cbModelParam._m0[1u].z;
    }
    float _1623 = ((((1.0 - _638) * ((_625 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_638 * _625)) * _609;
    float _1624 = _1623 * ((cbModelParam._m0[1u].w * (_1607 - _1507)) + _1507);
    float _1625 = _1623 * ((cbModelParam._m0[1u].w * (_1609 - _1509)) + _1509);
    float _1626 = _1623 * ((cbModelParam._m0[1u].w * (_1611 - _1511)) + _1511);
    float _1629 = fma(_1626, cbSceneParam._m0[89u].z, fma(_1625, cbSceneParam._m0[89u].y, _1624 * cbSceneParam._m0[89u].x));
    float _1632 = fma(_1626, cbSceneParam._m0[90u].z, fma(_1625, cbSceneParam._m0[90u].y, _1624 * cbSceneParam._m0[90u].x));
    float _1635 = fma(_1626, cbSceneParam._m0[91u].z, fma(_1625, cbSceneParam._m0[91u].y, _1624 * cbSceneParam._m0[91u].x));
    float _1670 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1674 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1678 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1682 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1683 = _1670 / _1682;
    float _1684 = _1674 / _1682;
    float _1685 = _1678 / _1682;
    float _1832;
    float _1833;
    float _1834;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1712 = ((uint(_1685 > cbSceneParam._m0[59u].y) + uint(_1685 > cbSceneParam._m0[59u].x)) + uint(_1685 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1713 = _1712 + 43u;
        uint _1721 = _1712 + 44u;
        uint _1729 = _1712 + 45u;
        uint _1737 = _1712 + 46u;
        float _1748 = fma(_1682, cbSceneParam._m0[_1713].w, fma(_1678, cbSceneParam._m0[_1713].z, fma(_1674, cbSceneParam._m0[_1713].y, _1670 * cbSceneParam._m0[_1713].x)));
        float _1752 = fma(_1682, cbSceneParam._m0[_1721].w, fma(_1678, cbSceneParam._m0[_1721].z, fma(_1674, cbSceneParam._m0[_1721].y, _1670 * cbSceneParam._m0[_1721].x)));
        float _1760 = fma(_1682, cbSceneParam._m0[_1737].w, fma(_1678, cbSceneParam._m0[_1737].z, fma(_1674, cbSceneParam._m0[_1737].y, _1670 * cbSceneParam._m0[_1737].x)));
        float _1765 = cbSceneParam._m0[33u].z * _1760;
        float _1767 = cbSceneParam._m0[33u].w * _1760;
        float _1770 = fma(_1682, cbSceneParam._m0[_1729].w, fma(_1678, cbSceneParam._m0[_1729].z, fma(_1674, cbSceneParam._m0[_1729].y, _1670 * cbSceneParam._m0[_1729].x))) / _1760;
        float _1818 = (cbSceneParam._m0[33u].x - sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685))) * cbSceneParam._m0[33u].y;
        float _4064 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1825 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1765 + _1748) / _1760, (_1767 + _1752) / _1760), _1770), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1767 + _1748) / _1760, (_1752 - _1765) / _1760), _1770), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1748 - _1765) / _1760, (_1752 - _1767) / _1760), _1770), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1748 - _1767) / _1760, (_1765 + _1752) / _1760), _1770), 0.0)).x), vec4(0.25)));
        _1832 = 1.0 - (_1825 * cbSceneParam._m0[34u].x);
        _1833 = 1.0 - (_1825 * cbSceneParam._m0[34u].y);
        _1834 = 1.0 - (_1825 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1832 = 1.0;
        _1833 = 1.0;
        _1834 = 1.0;
    }
    float _1898;
    float _1900;
    float _1902;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1886 = fma(_1682, cbSceneParam._m0[63u].w, fma(_1678, cbSceneParam._m0[63u].z, fma(_1674, cbSceneParam._m0[63u].y, _1670 * cbSceneParam._m0[63u].x)));
        float _1887 = fma(_1682, cbSceneParam._m0[60u].w, fma(_1678, cbSceneParam._m0[60u].z, fma(_1674, cbSceneParam._m0[60u].y, _1670 * cbSceneParam._m0[60u].x))) / _1886;
        float _1888 = fma(_1682, cbSceneParam._m0[61u].w, fma(_1678, cbSceneParam._m0[61u].z, fma(_1674, cbSceneParam._m0[61u].y, _1670 * cbSceneParam._m0[61u].x))) / _1886;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1887 >= cbSceneParam._m0[64u].x) && (_1888 >= cbSceneParam._m0[64u].y)) && (_1887 <= cbSceneParam._m0[64u].z)) && (_1888 <= cbSceneParam._m0[64u].w))
        {
            float _2027 = fma(_1682, cbSceneParam._m0[62u].w, fma(_1678, cbSceneParam._m0[62u].z, fma(_1674, cbSceneParam._m0[62u].y, _1670 * cbSceneParam._m0[62u].x))) / _1886;
            float _2031 = isnan(cbSceneParam._m0[41u].w) ? _2027 : (isnan(_2027) ? cbSceneParam._m0[41u].w : max(_2027, cbSceneParam._m0[41u].w));
            float _2074 = (cbSceneParam._m0[33u].x - sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685))) * cbSceneParam._m0[33u].y;
            float _4080 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
            float _2081 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1887, cbSceneParam._m0[33u].w + _1888), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1887, _1888 - cbSceneParam._m0[33u].z), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1887 - cbSceneParam._m0[33u].z, _1888 - cbSceneParam._m0[33u].w), _2031), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1887 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1888), _2031), 0.0)).x), vec4(0.25)));
            float _2085 = 1.0 - (_2081 * cbSceneParam._m0[34u].x);
            float _2086 = 1.0 - (_2081 * cbSceneParam._m0[34u].y);
            float _2087 = 1.0 - (_2081 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2087) ? _1834 : (isnan(_1834) ? _2087 : min(_1834, _2087));
            frontier_phi_34_33_ladder_1 = isnan(_2086) ? _1833 : (isnan(_1833) ? _2086 : min(_1833, _2086));
            frontier_phi_34_33_ladder_2 = isnan(_2085) ? _1832 : (isnan(_1832) ? _2085 : min(_1832, _2085));
        }
        else
        {
            frontier_phi_34_33_ladder = _1834;
            frontier_phi_34_33_ladder_1 = _1833;
            frontier_phi_34_33_ladder_2 = _1832;
        }
        _1898 = frontier_phi_34_33_ladder_2;
        _1900 = frontier_phi_34_33_ladder_1;
        _1902 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1898 = _1832;
        _1900 = _1833;
        _1902 = _1834;
    }
    uvec4 _1907 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1909 = _1907.x * 14u;
    uint _1910 = _1909 + 13u;
    float _1917 = _609 + (-1.0);
    float _1922 = (cbLight._m0[_1910].x * _1917) + 1.0;
    float _1923 = (cbLight._m0[_1910].y * _1917) + 1.0;
    float _1924 = (cbLight._m0[_1910].z * _1917) + 1.0;
    float _1925 = (cbLight._m0[_1910].w * _1917) + 1.0;
    uint _1926 = _1909 + 5u;
    float _1932 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
    uint _1936 = _1909 + 4u;
    float _1946 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
    uint _1950 = _1909 | 1u;
    float _1961 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_456, _457, _458));
    float _1964 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_456, _457, _458));
    float _4116 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _4127 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1969 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * 0.3183098733425140380859375;
    float _1971 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * 0.3183098733425140380859375;
    float _1978 = ((cbLight._m0[_1926].x * _1932) * _1971) + (((cbLight._m0[_1936].x * _1898) * _1946) * _1969);
    float _1979 = ((_1932 * cbLight._m0[_1926].y) * _1971) + (((cbLight._m0[_1936].y * _1900) * _1946) * _1969);
    float _1980 = ((_1932 * cbLight._m0[_1926].z) * _1971) + (((cbLight._m0[_1936].z * _1902) * _1946) * _1969);
    uvec4 _1984 = floatBitsToUint(cbLight._m0[_1909 + 12u]);
    bool _1986 = _1984.x == 0u;
    float _2088;
    float _2090;
    float _2092;
    if (_1986)
    {
        _2088 = _1978;
        _2090 = _1979;
        _2092 = _1980;
    }
    else
    {
        uint _2096 = _1909 + 6u;
        float _2112 = (dot(vec3(cbLight._m0[_1909 + 2u].xyz), vec3(_456, _457, _458)) * 0.5) + 0.5;
        float _2113 = _2112 * _2112;
        float _4138 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2114 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2115 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _2088 = (((cbLight._m0[_2096].x * 0.3183098733425140380859375) * _2114) * _2115) + _1978;
        _2090 = (((cbLight._m0[_2096].y * 0.3183098733425140380859375) * _2114) * _2115) + _1979;
        _2092 = (((cbLight._m0[_2096].z * 0.3183098733425140380859375) * _2114) * _2115) + _1980;
    }
    bool _2095 = _1984.y == 0u;
    float _2150;
    float _2152;
    float _2154;
    if (_2095)
    {
        _2150 = _2088;
        _2152 = _2090;
        _2154 = _2092;
    }
    else
    {
        uint _2312 = _1909 + 7u;
        float _2328 = (dot(vec3(cbLight._m0[_1909 + 3u].xyz), vec3(_456, _457, _458)) * 0.5) + 0.5;
        float _2329 = _2328 * _2328;
        float _4154 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2330 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2331 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
        _2150 = (((cbLight._m0[_2312].x * 0.3183098733425140380859375) * _2330) * _2331) + _2088;
        _2152 = (((cbLight._m0[_2312].y * 0.3183098733425140380859375) * _2330) * _2331) + _2090;
        _2154 = (((cbLight._m0[_2312].z * 0.3183098733425140380859375) * _2330) * _2331) + _2092;
    }
    uint _2157 = _1909 + 8u;
    float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1909].w)) * _459) * 0.949999988079071044921875);
    float _2171 = _2170 * _2170;
    float _2172 = cbLight._m0[_1909].x + _535;
    float _2173 = cbLight._m0[_1909].y + _536;
    float _2174 = cbLight._m0[_1909].z + _537;
    float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
    float _2179 = _2178 * _2172;
    float _2180 = _2178 * _2173;
    float _2181 = _2178 * _2174;
    float _2182 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_1909].xyz));
    float _4170 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _4181 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _2186 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _2187 = dot(vec3(_456, _457, _458), vec3(_2179, _2180, _2181));
    float _4192 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _2191 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_2179, _2180, _2181));
    float _4203 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2195 = _2171 * _2171;
    float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
    float _2210 = (exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2211 = 1.0 - _2171;
    float _2222 = (0.5 / (((_2186 * ((_2185 * _2211) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2211) + _2171) * _2185))) * _2185;
    float _4214 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2224 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
    uint _2238 = _1909 + 9u;
    float _2249 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1950].w)) * _459) * 0.949999988079071044921875);
    float _2250 = _2249 * _2249;
    float _2251 = cbLight._m0[_1950].x + _535;
    float _2252 = cbLight._m0[_1950].y + _536;
    float _2253 = cbLight._m0[_1950].z + _537;
    float _2257 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
    float _2258 = _2257 * _2251;
    float _2259 = _2257 * _2252;
    float _2260 = _2257 * _2253;
    float _2261 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_1950].xyz));
    float _4225 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2264 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _2265 = dot(vec3(_456, _457, _458), vec3(_2258, _2259, _2260));
    float _4236 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2268 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2269 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_2258, _2259, _2260));
    float _4247 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2273 = _2250 * _2250;
    float _2277 = ((_2268 * _2268) * (_2273 + (-1.0))) + 1.0;
    float _2286 = (exp2(log2(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2287 = 1.0 - _2250;
    float _2297 = (0.5 / (((_2186 * ((_2264 * _2287) + _2250)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2287) + _2250) * _2264))) * _2264;
    float _4258 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2299 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2273 / ((_2277 * _2277) * 3.141590118408203125));
    float _2309 = (((_2286 * cbLight._m0[_2238].x) * _2299) * _1932) + ((((cbLight._m0[_2157].x * _1898) * _2210) * _2224) * _1946);
    float _2310 = (((_2286 * cbLight._m0[_2238].y) * _2299) * _1932) + ((((cbLight._m0[_2157].y * _1900) * _2210) * _2224) * _1946);
    float _2311 = (((_2286 * cbLight._m0[_2238].z) * _2299) * _1932) + ((((cbLight._m0[_2157].z * _1902) * _2210) * _2224) * _1946);
    float _2367;
    float _2369;
    float _2371;
    if (_1986)
    {
        _2367 = _2309;
        _2369 = _2310;
        _2371 = _2311;
    }
    else
    {
        uint _2373 = _1909 + 2u;
        uint _2377 = _1909 + 10u;
        float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2373].w)) * _459) * 0.949999988079071044921875);
        float _2392 = _2391 * _2391;
        float _2393 = cbLight._m0[_2373].x + _535;
        float _2394 = cbLight._m0[_2373].y + _536;
        float _2395 = cbLight._m0[_2373].z + _537;
        float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
        float _2400 = _2399 * _2393;
        float _2401 = _2399 * _2394;
        float _2402 = _2399 * _2395;
        float _2403 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_2373].xyz));
        float _4269 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2406 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2407 = dot(vec3(_456, _457, _458), vec3(_2400, _2401, _2402));
        float _4280 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2410 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2411 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_2400, _2401, _2402));
        float _4291 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2415 = _2392 * _2392;
        float _2419 = ((_2410 * _2410) * (_2415 + (-1.0))) + 1.0;
        float _2428 = (exp2(log2(1.0 - (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2429 = 1.0 - _2392;
        float _2439 = (0.5 / (((_2186 * ((_2406 * _2429) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2429) + _2392) * _2406))) * _2406;
        float _4302 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2441 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2415 / ((_2419 * _2419) * 3.141590118408203125));
        float _2442 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _2367 = (((_2428 * cbLight._m0[_2377].x) * _2441) * _2442) + _2309;
        _2369 = (((_2428 * cbLight._m0[_2377].y) * _2441) * _2442) + _2310;
        _2371 = (((_2428 * cbLight._m0[_2377].z) * _2441) * _2442) + _2311;
    }
    float _2473;
    float _2475;
    float _2477;
    if (_2095)
    {
        _2473 = _2367;
        _2475 = _2369;
        _2477 = _2371;
    }
    else
    {
        uint _2484 = _1909 + 3u;
        uint _2488 = _1909 + 11u;
        float _2502 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2484].w)) * _459) * 0.949999988079071044921875);
        float _2503 = _2502 * _2502;
        float _2504 = cbLight._m0[_2484].x + _535;
        float _2505 = cbLight._m0[_2484].y + _536;
        float _2506 = cbLight._m0[_2484].z + _537;
        float _2510 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
        float _2511 = _2510 * _2504;
        float _2512 = _2510 * _2505;
        float _2513 = _2510 * _2506;
        float _2514 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_2484].xyz));
        float _4318 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2517 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2518 = dot(vec3(_456, _457, _458), vec3(_2511, _2512, _2513));
        float _4329 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2521 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2522 = dot(vec3(cbLight._m0[_2484].xyz), vec3(_2511, _2512, _2513));
        float _4340 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2526 = _2503 * _2503;
        float _2530 = ((_2521 * _2521) * (_2526 + (-1.0))) + 1.0;
        float _2539 = (exp2(log2(1.0 - (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2540 = 1.0 - _2503;
        float _2550 = (0.5 / (((_2186 * ((_2517 * _2540) + _2503)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2540) + _2503) * _2517))) * _2517;
        float _4351 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2552 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2526 / ((_2530 * _2530) * 3.141590118408203125));
        float _2553 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
        _2473 = (((_2539 * cbLight._m0[_2488].x) * _2552) * _2553) + _2367;
        _2475 = (((_2539 * cbLight._m0[_2488].y) * _2552) * _2553) + _2369;
        _2477 = (((_2539 * cbLight._m0[_2488].z) * _2552) * _2553) + _2371;
    }
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    if (_1907.y == 0u)
    {
        uvec4 _2574 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2575 = _2574.x;
        uint _2586 = uint((float(_2574.y) * floor(float(uint(cbSceneParam._m0[85u].y * _544) / _2575))) + floor(float(uint(cbSceneParam._m0[85u].x * _543) / _2575)));
        float _2596 = (log2(_1685 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2597 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        uint _2600 = uint(isnan(14.0) ? _2597 : (isnan(_2597) ? 14.0 : min(_2597, 14.0)));
        uvec4 _2605 = texelFetch(g_lightClusterGridBuffer, int(((_2600 << 2u) + (_2586 << 6u)) >> 2u));
        uint _2606 = _2605.x;
        uint _2607 = _2574.z;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        if (((((1u << ((_2607 >> 4u) & 15u)) + 4294967295u) & _2606) == 0u) || ((_2607 & 240u) == 0u))
        {
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
        }
        else
        {
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            uint _2837 = 0u;
            uint _2846;
            bool _2847;
            for (;;)
            {
                _2846 = texelFetch(g_lightClassification, int((((_2600 << 5u) + (_2586 << 9u)) + (_2837 << 2u)) >> 2u)).x;
                _2847 = _2846 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2847)
                {
                    frontier_phi_66_pred = _2836;
                    frontier_phi_66_pred_1 = _2835;
                    frontier_phi_66_pred_2 = _2834;
                    frontier_phi_66_pred_3 = _2833;
                    frontier_phi_66_pred_4 = _2832;
                    frontier_phi_66_pred_5 = _2831;
                }
                else
                {
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    uint _2961;
                    _2955 = _2831;
                    _2956 = _2832;
                    _2957 = _2833;
                    _2958 = _2834;
                    _2959 = _2835;
                    _2960 = _2836;
                    _2961 = _2846;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    for (;;)
                    {
                        uint _2965 = uint(findLSB(_2961)) + (_2837 << 5u);
                        uint _2962 = (_2961 + 4294967295u) & _2961;
                        uint _2967 = _2965 * 48u;
                        vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 3u)).x));
                        uint _2987 = (_2965 * 48u) + 4u;
                        vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2987)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 3u)).x));
                        uint _3006 = (_2965 * 48u) + 8u;
                        vec3 _3017 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3006)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 2u)).x));
                        float _3021 = _2981.x - _1683;
                        float _3022 = _2981.y - _1684;
                        float _3023 = _2981.z - _1685;
                        float _3024 = dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023));
                        float _3027 = inversesqrt(_3024);
                        float _3028 = _3027 * _3021;
                        float _3029 = _3027 * _3022;
                        float _3030 = _3027 * _3023;
                        float _3031 = dot(vec3(_565, _568, _571), vec3(_3028, _3029, _3030));
                        float _3036 = 1.0 - (_3024 * _2981.w);
                        float _4377 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3037 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                        float _3038 = sqrt(_3024) * _3000.w;
                        float _3041 = 1.39999997615814208984375 / (_3038 + 1.39999997615814208984375);
                        float _3042 = _3041 * _3041;
                        float _3045 = ((1.0 - _3042) * _3031) + _3042;
                        float _3048 = _3038 * _3038;
                        float _3052 = ((isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0))) * _3037) / ((_3048 * 0.699999988079071044921875) + 1.0);
                        float _3056 = (-0.0) - _1683;
                        float _3057 = (-0.0) - _1684;
                        float _3058 = (-0.0) - _1685;
                        float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                        float _3063 = _3062 * _3056;
                        float _3064 = _3062 * _3057;
                        float _3065 = _3062 * _3058;
                        float _3072 = exp2(log2(1.0 / ((_3048 * 3.5) + 5.0)) * 0.25);
                        float _3073 = 1.0 - _625;
                        float _3080 = sqrt(1.0 - ((1.0 - (_3073 * _3073)) * (1.0 - (_3072 * _3072))));
                        float _3081 = _3080 * _3080;
                        float _3082 = _3081 * _3081;
                        float _3083 = _3063 + _3028;
                        float _3084 = _3064 + _3029;
                        float _3085 = _3065 + _3030;
                        float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
                        float _3093 = dot(vec3(_565, _568, _571), vec3(_3063, _3064, _3065));
                        float _4393 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3096 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                        float _3097 = dot(vec3(_565, _568, _571), vec3(_3089 * _3083, _3089 * _3084, _3089 * _3085));
                        float _4404 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3100 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                        float _3104 = ((_3100 * _3100) * (_3082 + (-1.0))) + 1.0;
                        float _3105 = _3041 * _3081;
                        float _3106 = _3105 * _3105;
                        float _3109 = ((1.0 - _3106) * _3031) + _3106;
                        float _4415 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3110 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                        float _3111 = 1.0 - _3081;
                        float _3121 = (0.5 / (((_3110 * ((_3096 * _3111) + _3081)) + 9.9999999392252902907785028219223e-09) + (((_3110 * _3111) + _3081) * _3096))) * _3110;
                        float _4426 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3132 = (((_3082 * 3.1415927410125732421875) * (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) / ((_3104 * _3104) * ((_3048 * 2.1991131305694580078125) + 3.141590118408203125))) * _3037;
                        _2890 = (_3052 * _3000.x) + _2958;
                        _2891 = (_3052 * _3000.y) + _2959;
                        _2892 = (_3052 * _3000.z) + _2960;
                        _2887 = (_3132 * _3017.x) + _2955;
                        _2888 = (_3132 * _3017.y) + _2956;
                        _2889 = (_3132 * _3017.z) + _2957;
                        if (_2962 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2955 = _2887;
                            _2956 = _2888;
                            _2957 = _2889;
                            _2958 = _2890;
                            _2959 = _2891;
                            _2960 = _2892;
                            _2961 = _2962;
                        }
                    }
                    frontier_phi_66_pred = _2892;
                    frontier_phi_66_pred_1 = _2891;
                    frontier_phi_66_pred_2 = _2890;
                    frontier_phi_66_pred_3 = _2889;
                    frontier_phi_66_pred_4 = _2888;
                    frontier_phi_66_pred_5 = _2887;
                }
                _2697 = frontier_phi_66_pred;
                _2695 = frontier_phi_66_pred_1;
                _2693 = frontier_phi_66_pred_2;
                _2691 = frontier_phi_66_pred_3;
                _2689 = frontier_phi_66_pred_4;
                _2687 = frontier_phi_66_pred_5;
                uint _2838 = _2837 + 1u;
                if (_2838 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2831 = _2687;
                    _2832 = _2689;
                    _2833 = _2691;
                    _2834 = _2693;
                    _2835 = _2695;
                    _2836 = _2697;
                    _2837 = _2838;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
        }
        uvec4 _2700 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2701 = _2700.z;
        uint _2703 = (_2701 >> 8u) & 15u;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        if (((4294967295u << _2703) & _2606) == 0u)
        {
            _2799 = _2686;
            _2801 = _2688;
            _2803 = _2690;
            _2805 = _2692;
            _2807 = _2694;
            _2809 = _2696;
        }
        else
        {
            float _2824 = inversesqrt(dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685)));
            float _2825 = _2824 * _1683;
            float _2826 = _2824 * _1684;
            float _2827 = _2824 * _1685;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2703 < ((_2701 >> 12u) & 15u))
            {
                float _2800;
                float _2802;
                float _2804;
                float _2806;
                float _2808;
                float _2810;
                float _2938 = _2686;
                float _2939 = _2688;
                float _2940 = _2690;
                float _2941 = _2692;
                float _2942 = _2694;
                float _2943 = _2696;
                uint _2944 = _2703;
                uint _2953;
                bool _2954;
                for (;;)
                {
                    _2953 = texelFetch(g_lightClassification, int((((_2600 << 5u) + (_2586 << 9u)) + (_2944 << 2u)) >> 2u)).x;
                    _2954 = _2953 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2954)
                    {
                        frontier_phi_72_pred = _2943;
                        frontier_phi_72_pred_1 = _2942;
                        frontier_phi_72_pred_2 = _2941;
                        frontier_phi_72_pred_3 = _2940;
                        frontier_phi_72_pred_4 = _2939;
                        frontier_phi_72_pred_5 = _2938;
                    }
                    else
                    {
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3150 = _2938;
                        float _3151 = _2939;
                        float _3152 = _2940;
                        float _3153 = _2941;
                        float _3154 = _2942;
                        float _3155 = _2943;
                        uint _3156 = _2953;
                        uint _3157;
                        vec4 _3182;
                        float _3183;
                        vec4 _3198;
                        vec3 _3210;
                        vec4 _3226;
                        vec4 _3241;
                        float _3287;
                        bool _3288;
                        for (;;)
                        {
                            uint _3167 = ((_2944 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3156));
                            _3157 = (_3156 + 4294967295u) & _3156;
                            uint _3169 = _3167 * 40u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            _3183 = _3182.w;
                            uint _3185 = (_3167 * 40u) + 4u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3200 = (_3167 * 40u) + 8u;
                            _3210 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x));
                            uint _3213 = (_3167 * 40u) + 16u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3228 = (_3167 * 40u) + 20u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3243 = (_3167 * 40u) + 24u;
                            vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3262 = (_3167 * 40u) + 28u;
                            vec4 _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            _3287 = fma(_1685, _3275.z, fma(_1684, _3275.y, _3275.x * _1683)) + _3275.w;
                            _3288 = !((fma(_1685, _3256.z, fma(_1684, _3256.y, _3256.x * _1683)) + _3256.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3288)
                            {
                                float _3315 = _3182.x - _1683;
                                float _3316 = _3182.y - _1684;
                                float _3317 = _3182.z - _1685;
                                float _3318 = dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317));
                                float _3321 = inversesqrt(_3318);
                                float _3322 = _3321 * _3315;
                                float _3323 = _3321 * _3316;
                                float _3324 = _3321 * _3317;
                                float _3328 = 1.0 - (_3318 / (_3183 * _3183));
                                float _4437 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3329 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3333 = sqrt(_3318) * _3198.w;
                                float _3335 = 1.39999997615814208984375 / (_3333 + 1.39999997615814208984375);
                                float _3336 = _3335 * _3335;
                                float _3339 = ((1.0 - _3336) * dot(vec3(_3322, _3323, _3324), vec3(_565, _568, _571))) + _3336;
                                float _3342 = _3333 * _3333;
                                float _3346 = (fma(_1685, _3226.z, fma(_1684, _3226.y, _3226.x * _1683)) + _3226.w) / _3287;
                                float _3347 = (fma(_1685, _3241.z, fma(_1684, _3241.y, _3241.x * _1683)) + _3241.w) / _3287;
                                float _3351 = 1.0 - dot(vec2(_3346, _3347), vec2(_3346, _3347));
                                float _4453 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3352 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                                float _3353 = _3352 * (((isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0))) * _3329) / ((_3342 * 0.699999988079071044921875) + 1.0));
                                float _3365 = exp2(log2(1.0 / ((_3342 * 3.5) + 5.0)) * 0.25);
                                float _3366 = 1.0 - _625;
                                float _3373 = sqrt(1.0 - ((1.0 - (_3366 * _3366)) * (1.0 - (_3365 * _3365))));
                                float _3374 = _3373 * _3373;
                                float _3375 = _3374 * _3374;
                                float _3376 = _3322 - _2825;
                                float _3377 = _3323 - _2826;
                                float _3378 = _3324 - _2827;
                                float _3382 = inversesqrt(dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378)));
                                float _3386 = dot(vec3(_565, _568, _571), vec3((-0.0) - _2825, (-0.0) - _2826, (-0.0) - _2827));
                                float _4464 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3389 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3390 = dot(vec3(_565, _568, _571), vec3(_3382 * _3376, _3382 * _3377, _3382 * _3378));
                                float _4475 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3393 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3397 = ((_3393 * _3393) * (_3375 + (-1.0))) + 1.0;
                                float _3398 = _3335 * _3374;
                                float _3399 = _3398 * _3398;
                                float _3405 = ((1.0 - _3399) * dot(vec3(_565, _568, _571), vec3(_3322, _3323, _3324))) + _3399;
                                float _4486 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3407 = 1.0 - _3374;
                                float _3417 = (0.5 / (((_3406 * ((_3389 * _3407) + _3374)) + 9.9999999392252902907785028219223e-09) + (((_3406 * _3407) + _3374) * _3389))) * _3406;
                                float _4497 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3427 = (_3352 * _3329) * (((_3375 * 3.1415927410125732421875) * (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) / ((_3397 * _3397) * ((_3342 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3353 * _3198.y;
                                frontier_phi_78_pred_1 = _3353 * _3198.x;
                                frontier_phi_78_pred_2 = _3427 * _3210.z;
                                frontier_phi_78_pred_3 = _3427 * _3210.y;
                                frontier_phi_78_pred_4 = _3427 * _3210.x;
                                frontier_phi_78_pred_5 = _3353 * _3198.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3435 = frontier_phi_78_pred;
                            _3434 = frontier_phi_78_pred_1;
                            _3433 = frontier_phi_78_pred_2;
                            _3432 = frontier_phi_78_pred_3;
                            _3431 = frontier_phi_78_pred_4;
                            _3436 = frontier_phi_78_pred_5;
                            _3140 = _3434 + _3153;
                            _3141 = _3435 + _3154;
                            _3142 = _3436 + _3155;
                            _3137 = _3431 + _3150;
                            _3138 = _3432 + _3151;
                            _3139 = _3433 + _3152;
                            if (_3157 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3157;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3142;
                        frontier_phi_72_pred_1 = _3141;
                        frontier_phi_72_pred_2 = _3140;
                        frontier_phi_72_pred_3 = _3139;
                        frontier_phi_72_pred_4 = _3138;
                        frontier_phi_72_pred_5 = _3137;
                    }
                    _2810 = frontier_phi_72_pred;
                    _2808 = frontier_phi_72_pred_1;
                    _2806 = frontier_phi_72_pred_2;
                    _2804 = frontier_phi_72_pred_3;
                    _2802 = frontier_phi_72_pred_4;
                    _2800 = frontier_phi_72_pred_5;
                    uint _2945 = _2944 + 1u;
                    if (_2945 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2938 = _2800;
                        _2939 = _2802;
                        _2940 = _2804;
                        _2941 = _2806;
                        _2942 = _2808;
                        _2943 = _2810;
                        _2944 = _2945;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2810;
                frontier_phi_60_61_ladder_1 = _2808;
                frontier_phi_60_61_ladder_2 = _2804;
                frontier_phi_60_61_ladder_3 = _2802;
                frontier_phi_60_61_ladder_4 = _2800;
                frontier_phi_60_61_ladder_5 = _2806;
            }
            else
            {
                frontier_phi_60_61_ladder = _2696;
                frontier_phi_60_61_ladder_1 = _2694;
                frontier_phi_60_61_ladder_2 = _2690;
                frontier_phi_60_61_ladder_3 = _2688;
                frontier_phi_60_61_ladder_4 = _2686;
                frontier_phi_60_61_ladder_5 = _2692;
            }
            _2799 = frontier_phi_60_61_ladder_4;
            _2801 = frontier_phi_60_61_ladder_3;
            _2803 = frontier_phi_60_61_ladder_2;
            _2805 = frontier_phi_60_61_ladder_5;
            _2807 = frontier_phi_60_61_ladder_1;
            _2809 = frontier_phi_60_61_ladder;
        }
        float _2814 = isnan(1.0) ? _609 : (isnan(_609) ? 1.0 : min(_609, 1.0));
        _2619 = (_2814 * _2805) + _2150;
        _2621 = (_2814 * _2807) + _2152;
        _2623 = (_2814 * _2809) + _2154;
        _2625 = ((_2799 * 0.039999999105930328369140625) * _2814) + _2473;
        _2627 = ((_2801 * 0.039999999105930328369140625) * _2814) + _2475;
        _2629 = ((_2803 * 0.039999999105930328369140625) * _2814) + _2477;
    }
    else
    {
        _2619 = _2150;
        _2621 = _2152;
        _2623 = _2154;
        _2625 = _2473;
        _2627 = _2475;
        _2629 = _2477;
    }
    float _4513 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _4524 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _4535 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    uint _2649 = _228 + 6u;
    float _2657 = _543 / cbSceneParam._m0[86u].x;
    float _2658 = _544 / cbSceneParam._m0[86u].y;
    vec4 _2672 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2657, _2658, (log2((isnan(cbSceneParam._m0[77u].w) ? _477 : (isnan(_477) ? cbSceneParam._m0[77u].w : min(_477, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2674 = _2672.x;
    float _2675 = _2672.y;
    float _2676 = _2672.z;
    float _2677 = _2672.w;
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    if (_477 > cbSceneParam._m0[78u].w)
    {
        float _2711 = isnan(_477) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _477 : min(cbSceneParam._m0[80u].w, _477));
        float _2712 = _2711 / _477;
        float _2723 = _2712 * _528;
        float _2724 = _529 * _2712;
        float _2725 = (-0.0) - _2724;
        float _2727 = _2712 * _530;
        float _2729 = (cbSceneParam._m0[77u].w * _2725) / _2711;
        float _2730 = _2729 + cbSceneParam._m0[79u].w;
        float _2731 = cbSceneParam._m0[79u].w - _2724;
        float _2737 = sqrt(((_2723 * _2723) + (_2724 * _2724)) + (_2727 * _2727));
        float _2740 = (1.0 - (cbSceneParam._m0[77u].w / _2711)) * _2737;
        float _2745 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2747 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2900;
        if (abs((_2725 - _2729) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2900 = ((((_2730 > 0.0) ? exp2(_2745 * _2730) : (2.0 - exp2(_2747 * _2730))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2740;
        }
        else
        {
            float _2860 = 1.0 / cbSceneParam._m0[80u].x;
            float _2861 = isnan(_2731) ? _2730 : (isnan(_2730) ? _2731 : max(_2730, _2731));
            float _2862 = isnan(_2731) ? _2730 : (isnan(_2730) ? _2731 : min(_2730, _2731));
            float _2871 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : min(_2861, 0.0));
            float _2872 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : min(_2862, 0.0));
            _2900 = ((abs(_2737 / _2725) * cbSceneParam._m0[80u].y) * ((((_2871 - _2872) * 2.0) - ((exp2(_2745 * (isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0)))) - exp2(_2745 * (isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0))))) * _2860)) - ((exp2(_2747 * _2871) - exp2(_2747 * _2872)) * _2860))) + (_2740 * cbSceneParam._m0[80u].z);
        }
        vec4 _2902 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2657, _2658, 1.0), 0.0);
        float _2911 = exp2((_2900 * (-1.44269502162933349609375)) * (1.0 - _2902.w));
        float _2912 = log2(_2911);
        float _2928 = log2(_2677);
        _2749 = (exp2(_2928 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2912 * cbSceneParam._m0[78u].x)) * _2902.x) / cbSceneParam._m0[78u].x)) + _2674;
        _2751 = (exp2(_2928 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2912 * cbSceneParam._m0[78u].y)) * _2902.y) / cbSceneParam._m0[78u].y)) + _2675;
        _2753 = (exp2(_2928 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2912 * cbSceneParam._m0[78u].z)) * _2902.z) / cbSceneParam._m0[78u].z)) + _2676;
        _2755 = _2911 * _2677;
    }
    else
    {
        _2749 = _2674;
        _2751 = _2675;
        _2753 = _2676;
        _2755 = _2677;
    }
    float _2767 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2768 = _2767 == 3.0;
    float _2769 = log2(_2755);
    float _2776 = exp2(_2769 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2619 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _609))) + ((_2625 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _1415)) * cbPerFrame._m0[3u].x));
    float _2777 = exp2(_2769 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2621 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _609))) + ((_2627 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _1415)) * cbPerFrame._m0[3u].x));
    float _2778 = exp2(_2769 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2623 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _609))) + ((_2629 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _1415)) * cbPerFrame._m0[3u].x));
    float _2787 = (_2767 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2787 * (_2768 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2749)));
    SV_Target.y = _2787 * (_2768 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2751)));
    SV_Target.z = _2787 * (_2768 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2753)));
    SV_Target.w = cbInstanceData._m0[_2649].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2649].w;
}


