#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1370;
float _4010;
float _4011;
float _4012;
float _4013;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _376 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _376) * cbMtdParam._m0[24u].x) + _376) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4022 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _401 = (_394 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _402 = (_394 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _403 = (_394 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _442 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _469 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _488 = _486.x;
    float _489 = _486.y;
    float _490 = _486.z;
    float _499 = ((_469.z - _490) * _394) + _490;
    float _502 = ((((_469.x - _488) * _394) + _488) * 2.0) + (-1.0);
    float _503 = ((((_469.y - _489) * _394) + _489) * 2.0) + (-1.0);
    float _504 = dot(vec2(_502, _503), vec2(_502, _503));
    float _4033 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _509 = sqrt(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))));
    vec4 _529 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _541 = (_502 + ((((_442.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_529.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _542 = (_503 + ((((_442.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_529.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _545 = fma(_509, _247, fma(_542, _254, _541 * _240));
    float _548 = fma(_509, _248, fma(_542, _255, _541 * _241));
    float _551 = fma(_509, _249, fma(_542, _256, _541 * _242));
    float _555 = inversesqrt(dot(vec3(_545, _548, _551), vec3(_545, _548, _551)));
    vec4 _584 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _586 = _584.x;
    float _587 = 1.0 - _586;
    float _591 = ((_586 - _587) * cbMtdParam._m0[24u].z) + _587;
    float _593 = (cbMtdParam._m0[19u].x + dot(vec4(_555 * _545, _555 * _548, _555 * _551, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_591 * cbMtdParam._m0[21u].z);
    float _4044 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _596 = (-0.0) - cbMtdParam._m0[24u].y;
    float _598 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _598 : (isnan(_598) ? 1.0 : min(_598, 1.0));
    float _606 = _594 - ((_594 * TEXCOORD_8.x) * _599);
    float _607 = _594 - ((_594 * TEXCOORD_8.y) * _599);
    float _608 = _594 - ((_594 * TEXCOORD_8.z) * _599);
    float _615 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _619 = ((isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : min(_615, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _627 = (_619 - (((_591 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _619))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4075 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _632 = ((_606 * ((_422.x * cbMtdParam._m0[18u].x) - _401)) * _628) + _401;
    float _633 = ((_607 * ((_422.y * cbMtdParam._m0[18u].y) - _402)) * _628) + _402;
    float _634 = ((_608 * ((_422.z * cbMtdParam._m0[18u].z) - _403)) * _628) + _403;
    vec4 _646 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _648 = _646.x;
    float _649 = 1.0 - _648;
    float _676 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_648 - _649) * cbMtdParam._m0[24u].w) + _649) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4086 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _677 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _685 = ((((cbMtdParam._m0[10u].x - _632) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _677) + _632;
    float _686 = ((((cbMtdParam._m0[10u].y - _633) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _677) + _633;
    float _687 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _634)) * _677) + _634;
    float _692 = (((_442.z - _499) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _499;
    float _696 = ((_529.z - _692) * cbMtdParam._m0[19u].w) + _692;
    vec4 _710 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _717 = (_710.x * 2.0) + (-1.0);
    float _718 = (_710.y * 2.0) + (-1.0);
    float _719 = dot(vec2(_717, _718), vec2(_717, _718));
    float _4097 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _728 = (((_710.z - _696) * _606) * _628) + _696;
    float _731 = ((cbMtdParam._m0[23u].y - _728) * _677) + _728;
    vec4 _750 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _756 = (_750.x * 2.0) + (-1.0);
    float _757 = (_750.y * 2.0) + (-1.0);
    float _758 = dot(vec2(_756, _757), vec2(_756, _757));
    float _4108 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _778 = (((cbMtdParam._m0[21u].x * _541) + ((_717 - _541) * _606)) * _628) + _541;
    float _779 = (((cbMtdParam._m0[21u].x * _542) + ((_718 - _542) * _607)) * _628) + _542;
    float _780 = (((sqrt(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) - _509) * _608) * _628) + _509;
    float _791 = (((_756 - _778) + (_778 * cbMtdParam._m0[22u].z)) * _677) + _778;
    float _792 = (((_757 - _779) + (_779 * cbMtdParam._m0[22u].z)) * _677) + _779;
    float _793 = ((sqrt(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) - _780) * _677) + _780;
    float _795 = cbMtdParam._m0[22u].x + _529.w;
    float _798 = fma(_793, _247, fma(_792, _254, _791 * _240));
    float _801 = fma(_793, _248, fma(_792, _255, _791 * _241));
    float _804 = fma(_793, _249, fma(_792, _256, _791 * _242));
    float _808 = inversesqrt(dot(vec3(_798, _801, _804), vec3(_798, _801, _804)));
    float _809 = _808 * _798;
    float _810 = _808 * _801;
    float _811 = _808 * _804;
    float _4119 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _812 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4141 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _4152 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _4163 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _830 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _881 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _871);
    float _882 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _871);
    float _883 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _871);
    float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
    float _888 = _881 * _887;
    float _889 = _882 * _887;
    float _890 = _883 * _887;
    vec4 _895 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _897 = _895.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1051 = sqrt(((_881 * _881) + (_882 * _882)) + (_883 * _883));
        float _1057 = (cbMatDynParam._m0[5u].x * _1051) + cbMatDynParam._m0[5u].y;
        float _4174 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1062 = (cbMatDynParam._m0[5u].z * _1051) + cbMatDynParam._m0[5u].w;
        float _4185 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) - _1058)) + _1058) < ((_897 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _908 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _909 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _927 = fma(_811, cbSceneParam._m0[5u].z, fma(_810, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _809));
    float _930 = fma(_811, cbSceneParam._m0[6u].z, fma(_810, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _809));
    float _933 = fma(_811, cbSceneParam._m0[7u].z, fma(_810, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _809));
    uint _946 = _259 + 9u;
    uint _947 = _946 + uint(cbMatDynParam._m0[0u].w);
    float _953 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * cbInstanceData._m0[_947].x;
    float _954 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * cbInstanceData._m0[_947].y;
    float _955 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * cbInstanceData._m0[_947].z;
    float _4196 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _4207 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _4218 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    vec4 _967 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _908, cbSceneParam._m0[86u].y * _909));
    float _971 = ((isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * TEXCOORD_5.w) * _967.x;
    float _972 = dot(vec3(_809, _810, _811), vec3(_888, _889, _890));
    float _975 = _972 * 2.0;
    float _979 = (_975 * _809) - _888;
    float _980 = (_975 * _810) - _889;
    float _981 = (_975 * _811) - _890;
    float _985 = abs(dot(vec3(_888, _889, _890), vec3(_809, _810, _811)));
    float _4229 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _987 = sqrt(_812);
    float _1000 = exp2((_987 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_987 * 3.0));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1369;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1094 = fma(_1040, cbModelParam._m0[26u].z, fma(_1036, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1032));
        float _1098 = fma(_1040, cbModelParam._m0[27u].z, fma(_1036, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1032));
        float _1102 = fma(_1040, cbModelParam._m0[28u].z, fma(_1036, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1032));
        float _1127 = _1032 + _809;
        float _1128 = _1036 + _810;
        float _1129 = _1040 + _811;
        float _1139 = fma(_1129, cbModelParam._m0[26u].z, fma(_1128, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1127)) - _1094;
        float _1140 = fma(_1129, cbModelParam._m0[27u].z, fma(_1128, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1127)) - _1098;
        float _1141 = fma(_1129, cbModelParam._m0[28u].z, fma(_1128, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1127)) - _1102;
        float _1145 = inversesqrt(dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141)));
        float _1158 = ((_1145 * _1139) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1094 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1145 * _1140) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1098 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1145 * _1141) / cbModelParam._m0[34u].z) + ((((((_1102 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        float _1197 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1163.x + (-0.5));
        float _1199 = _1197 * (_1163.y + (-0.5));
        float _1200 = _1197 * (_1163.z + (-0.5));
        float _1207 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1170.x + (-0.5));
        float _1209 = _1207 * (_1170.y + (-0.5));
        float _1210 = _1207 * (_1170.z + (-0.5));
        float _1217 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1177.x + (-0.5));
        float _1219 = _1217 * (_1177.y + (-0.5));
        float _1220 = _1217 * (_1177.z + (-0.5));
        float _1227 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1184.x + (-0.5));
        float _1229 = _1227 * (_1184.y + (-0.5));
        float _1230 = _1227 * (_1184.z + (-0.5));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = _1198 * 0.5;
        float _1235 = _1208 * 0.5;
        float _1236 = _1218 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1251 = (dot(vec3(_809, _810, _811), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1261 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4277 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1263 + 1.0))) + _1268) * _1231;
        float _1278 = _1199 * 0.5;
        float _1279 = _1209 * 0.5;
        float _1280 = _1219 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_809, _810, _811), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _4310 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1305 + 1.0))) + _1310) * _1232;
        float _1320 = _1200 * 0.5;
        float _1321 = _1210 * 0.5;
        float _1322 = _1220 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_809, _810, _811), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4343 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1347 + 1.0))) + _1352) * _1233;
        _1369 = _1200;
        _1371 = _1199;
        _1372 = _1198;
        _1373 = _1210;
        _1374 = _1209;
        _1375 = _1208;
        _1376 = _1220;
        _1377 = _1219;
        _1378 = _1218;
        _1379 = _1233;
        _1380 = _1232;
        _1381 = _1231;
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
    }
    else
    {
        _1369 = _1370;
        _1371 = _1370;
        _1372 = _1370;
        _1373 = _1370;
        _1374 = _1370;
        _1375 = _1370;
        _1376 = _1370;
        _1377 = _1370;
        _1378 = _1370;
        _1379 = _1370;
        _1380 = _1370;
        _1381 = _1370;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1412 = fma(_1040, cbModelParam._m0[30u].z, fma(_1036, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1032));
        float _1416 = fma(_1040, cbModelParam._m0[31u].z, fma(_1036, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1032));
        float _1420 = fma(_1040, cbModelParam._m0[32u].z, fma(_1036, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1032));
        float _1443 = _1032 + _809;
        float _1444 = _1036 + _810;
        float _1445 = _1040 + _811;
        float _1455 = fma(_1445, cbModelParam._m0[30u].z, fma(_1444, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1443)) - _1412;
        float _1456 = fma(_1445, cbModelParam._m0[31u].z, fma(_1444, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1443)) - _1416;
        float _1457 = fma(_1445, cbModelParam._m0[32u].z, fma(_1444, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1443)) - _1420;
        float _1461 = inversesqrt(dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457)));
        float _1474 = ((_1461 * _1455) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1412 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1475 = ((_1461 * _1456) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1416 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1476 = ((_1461 * _1457) / cbModelParam._m0[35u].z) + ((((((_1420 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1474, _1475, _1476), 0.0);
        float _1511 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1478.x + (-0.5));
        float _1513 = _1511 * (_1478.y + (-0.5));
        float _1514 = _1511 * (_1478.z + (-0.5));
        float _1521 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1485.x + (-0.5));
        float _1523 = _1521 * (_1485.y + (-0.5));
        float _1524 = _1521 * (_1485.z + (-0.5));
        float _1531 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1492.x + (-0.5));
        float _1533 = _1531 * (_1492.y + (-0.5));
        float _1534 = _1531 * (_1492.z + (-0.5));
        float _1541 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1499.x + (-0.5));
        float _1543 = _1541 * (_1499.y + (-0.5));
        float _1544 = _1541 * (_1499.z + (-0.5));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = _1512 * 0.5;
        float _1549 = _1522 * 0.5;
        float _1550 = _1532 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_809, _810, _811), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4384 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4395 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4406 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_1575 + 1.0))) + _1580) * _1545;
        float _1590 = _1513 * 0.5;
        float _1591 = _1523 * 0.5;
        float _1592 = _1533 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_809, _810, _811), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4417 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4428 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4439 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_1617 + 1.0))) + _1622) * _1546;
        float _1632 = _1514 * 0.5;
        float _1633 = _1524 * 0.5;
        float _1634 = _1534 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_809, _810, _811), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4450 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4461 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4472 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_1659 + 1.0))) + _1664) * _1547;
        _1681 = _1514;
        _1682 = _1513;
        _1683 = _1512;
        _1684 = _1524;
        _1685 = _1523;
        _1686 = _1522;
        _1687 = _1534;
        _1688 = _1533;
        _1689 = _1532;
        _1690 = _1547;
        _1691 = _1546;
        _1692 = _1545;
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
    }
    else
    {
        _1681 = _1370;
        _1682 = _1370;
        _1683 = _1370;
        _1684 = _1370;
        _1685 = _1370;
        _1686 = _1370;
        _1687 = _1370;
        _1688 = _1370;
        _1689 = _1370;
        _1690 = _1370;
        _1691 = _1370;
        _1692 = _1370;
        _1693 = 0.0;
        _1694 = 0.0;
        _1695 = 0.0;
    }
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1382)) + _1382;
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1383)) + _1383;
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1384)) + _1384;
    float _1728 = fma(_1707, cbSceneParam._m0[89u].z, fma(_1706, cbSceneParam._m0[89u].y, _1705 * cbSceneParam._m0[89u].x));
    float _1731 = fma(_1707, cbSceneParam._m0[90u].z, fma(_1706, cbSceneParam._m0[90u].y, _1705 * cbSceneParam._m0[90u].x));
    float _1734 = fma(_1707, cbSceneParam._m0[91u].z, fma(_1706, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1705));
    float _1749 = _979 * 0.5;
    float _1750 = _980 * 0.5;
    float _1751 = _981 * 0.5;
    float _1752 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1755 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1758 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1792;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1765 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1369, _1373, _1376, _1379));
        float _1769 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1371, _1374, _1377, _1380));
        float _1773 = dot(vec4(_1749, _1750, _1751, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1780 = dot(vec4(cbModelParam._m0[39u]), vec4(_1749, _1750, _1751, 1.0));
        _1792 = dot(vec3(isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1780) ? 0.0 : (isnan(0.0) ? _1780 : max(0.0, _1780))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1792 = 1.0;
    }
    float _1803;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1794 = dot(vec4(cbModelParam._m0[40u]), vec4(_1749, _1750, _1751, 1.0));
        _1803 = dot(vec3(isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1794) ? 0.0 : (isnan(0.0) ? _1794 : max(0.0, _1794))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1803 = 1.0;
    }
    float _1807 = (_1803 * cbModelParam._m0[1u].x) + (_1792 * (1.0 - cbModelParam._m0[1u].x));
    float _1817 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _812);
    float _1818 = isnan(_1817) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1817 : min(cbModelParam._m0[25u].z, _1817));
    float _1898;
    float _1900;
    float _1902;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1865 = fma(_1040, cbModelParam._m0[13u].z, fma(_1036, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032)) + cbModelParam._m0[13u].w;
        float _1869 = fma(_1040, cbModelParam._m0[14u].z, fma(_1036, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032)) + cbModelParam._m0[14u].w;
        float _1873 = fma(_1040, cbModelParam._m0[15u].z, fma(_1036, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032)) + cbModelParam._m0[15u].w;
        float _1876 = fma(_981, cbModelParam._m0[13u].z, fma(_980, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _979));
        float _1879 = fma(_981, cbModelParam._m0[14u].z, fma(_980, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _979));
        float _1882 = fma(_981, cbModelParam._m0[15u].z, fma(_980, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _979));
        float _1910;
        if (_1876 > 0.0)
        {
            _1910 = abs((1.0 - _1865) / _1876);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1865 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1910 = frontier_phi_17_15_ladder;
        }
        float _2079;
        if (_1879 > 0.0)
        {
            _2079 = abs((1.0 - _1869) / _1879);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1869 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2079 = frontier_phi_26_22_ladder;
        }
        float _2374;
        if (_1882 > 0.0)
        {
            _2374 = abs((1.0 - _1873) / _1882);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1873 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2374 = frontier_phi_38_33_ladder;
        }
        float _2376 = isnan(_2079) ? _1910 : (isnan(_1910) ? _2079 : min(_1910, _2079));
        float _2377 = isnan(_2374) ? _2376 : (isnan(_2376) ? _2374 : min(_2376, _2374));
        float _2381 = (_2377 * _1876) + _1865;
        float _2382 = (_2377 * _1879) + _1869;
        float _2383 = (_2377 * _1882) + _1873;
        float _2384 = _2377 * 9.9999997473787516355514526367188e-05;
        float _2386 = (-1.0) - _2384;
        float _2388 = _2384 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2383 > _2388) || ((_2383 < _2386) || ((_2382 > _2388) || ((_2382 < _2386) || ((_2381 < _2386) || (_2381 > _2388))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2528 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2383, cbModelParam._m0[9u].z, fma(_2382, cbModelParam._m0[9u].y, _2381 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2383, cbModelParam._m0[10u].z, fma(_2382, cbModelParam._m0[10u].y, _2381 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2383, cbModelParam._m0[11u].z, fma(_2382, cbModelParam._m0[11u].y, _2381 * cbModelParam._m0[11u].x))), _1818);
            frontier_phi_16_38_ladder = _2528.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2528.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2528.x * cbModelParam._m0[1u].y;
        }
        _1898 = frontier_phi_16_38_ladder_2;
        _1900 = frontier_phi_16_38_ladder_1;
        _1902 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1886 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_979, _980, _981), _1818);
        _1898 = _1886.x * cbModelParam._m0[1u].y;
        _1900 = _1886.y * cbModelParam._m0[1u].y;
        _1902 = _1886.z * cbModelParam._m0[1u].y;
    }
    float _1906 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _812);
    float _1907 = isnan(_1906) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1906 : min(cbModelParam._m0[25u].w, _1906));
    float _1996;
    float _1998;
    float _2000;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1960 = fma(_1040, cbModelParam._m0[21u].z, fma(_1036, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032)) + cbModelParam._m0[21u].w;
        float _1964 = fma(_1040, cbModelParam._m0[22u].z, fma(_1036, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032)) + cbModelParam._m0[22u].w;
        float _1968 = fma(_1040, cbModelParam._m0[23u].z, fma(_1036, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032)) + cbModelParam._m0[23u].w;
        float _1971 = fma(_981, cbModelParam._m0[21u].z, fma(_980, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _979));
        float _1974 = fma(_981, cbModelParam._m0[22u].z, fma(_980, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _979));
        float _1977 = fma(_981, cbModelParam._m0[23u].z, fma(_980, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _979));
        float _2084;
        if (_1971 > 0.0)
        {
            _2084 = abs((1.0 - _1960) / _1971);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1960 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2084 = frontier_phi_28_24_ladder;
        }
        float _2401;
        if (_1974 > 0.0)
        {
            _2401 = abs((1.0 - _1964) / _1974);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1964 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2401 = frontier_phi_40_35_ladder;
        }
        float _2728;
        if (_1977 > 0.0)
        {
            _2728 = abs((1.0 - _1968) / _1977);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1968 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2728 = frontier_phi_50_47_ladder;
        }
        float _2730 = isnan(_2401) ? _2084 : (isnan(_2084) ? _2401 : min(_2084, _2401));
        float _2731 = isnan(_2728) ? _2730 : (isnan(_2730) ? _2728 : min(_2730, _2728));
        float _2735 = (_2731 * _1971) + _1960;
        float _2736 = (_2731 * _1974) + _1964;
        float _2737 = (_2731 * _1977) + _1968;
        float _2738 = _2731 * 9.9999997473787516355514526367188e-05;
        float _2739 = (-1.0) - _2738;
        float _2741 = _2738 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2737 > _2741) || ((_2737 < _2739) || ((_2736 > _2741) || ((_2736 < _2739) || ((_2735 < _2739) || (_2735 > _2741))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2855 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2737, cbModelParam._m0[17u].z, fma(_2736, cbModelParam._m0[17u].y, _2735 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2737, cbModelParam._m0[18u].z, fma(_2736, cbModelParam._m0[18u].y, _2735 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2737, cbModelParam._m0[19u].z, fma(_2736, cbModelParam._m0[19u].y, _2735 * cbModelParam._m0[19u].x))), _1907);
            frontier_phi_25_50_ladder = _2855.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2855.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2855.x * cbModelParam._m0[1u].z;
        }
        _1996 = frontier_phi_25_50_ladder_2;
        _1998 = frontier_phi_25_50_ladder_1;
        _2000 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1980 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_979, _980, _981), _1907);
        _1996 = _1980.x * cbModelParam._m0[1u].z;
        _1998 = _1980.y * cbModelParam._m0[1u].z;
        _2000 = _1980.z * cbModelParam._m0[1u].z;
    }
    float _2012 = ((((1.0 - _1000) * ((_987 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1000 * _987)) * _971;
    float _2013 = _2012 * ((cbModelParam._m0[1u].w * (_1996 - _1898)) + _1898);
    float _2014 = _2012 * ((cbModelParam._m0[1u].w * (_1998 - _1900)) + _1900);
    float _2015 = _2012 * ((cbModelParam._m0[1u].w * (_2000 - _1902)) + _1902);
    float _2018 = fma(_2015, cbSceneParam._m0[89u].z, fma(_2014, cbSceneParam._m0[89u].y, _2013 * cbSceneParam._m0[89u].x));
    float _2021 = fma(_2015, cbSceneParam._m0[90u].z, fma(_2014, cbSceneParam._m0[90u].y, _2013 * cbSceneParam._m0[90u].x));
    float _2024 = fma(_2015, cbSceneParam._m0[91u].z, fma(_2014, cbSceneParam._m0[91u].y, _2013 * cbSceneParam._m0[91u].x));
    float _2058 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2062 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2066 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2070 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2071 = _2058 / _2070;
    float _2072 = _2062 / _2070;
    float _2073 = _2066 / _2070;
    float _2220;
    float _2221;
    float _2222;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2100 = ((uint(_2073 > cbSceneParam._m0[59u].y) + uint(_2073 > cbSceneParam._m0[59u].x)) + uint(_2073 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2101 = _2100 + 43u;
        uint _2109 = _2100 + 44u;
        uint _2117 = _2100 + 45u;
        uint _2125 = _2100 + 46u;
        float _2136 = fma(_2070, cbSceneParam._m0[_2101].w, fma(_2066, cbSceneParam._m0[_2101].z, fma(_2062, cbSceneParam._m0[_2101].y, _2058 * cbSceneParam._m0[_2101].x)));
        float _2140 = fma(_2070, cbSceneParam._m0[_2109].w, fma(_2066, cbSceneParam._m0[_2109].z, fma(_2062, cbSceneParam._m0[_2109].y, _2058 * cbSceneParam._m0[_2109].x)));
        float _2148 = fma(_2070, cbSceneParam._m0[_2125].w, fma(_2066, cbSceneParam._m0[_2125].z, fma(_2062, cbSceneParam._m0[_2125].y, _2058 * cbSceneParam._m0[_2125].x)));
        float _2153 = cbSceneParam._m0[33u].z * _2148;
        float _2155 = cbSceneParam._m0[33u].w * _2148;
        float _2158 = fma(_2070, cbSceneParam._m0[_2117].w, fma(_2066, cbSceneParam._m0[_2117].z, fma(_2062, cbSceneParam._m0[_2117].y, _2058 * cbSceneParam._m0[_2117].x))) / _2148;
        float _2206 = (cbSceneParam._m0[33u].x - sqrt(((_2072 * _2072) + (_2071 * _2071)) + (_2073 * _2073))) * cbSceneParam._m0[33u].y;
        float _4598 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2213 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2153 + _2136) / _2148, (_2155 + _2140) / _2148), _2158), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2155 + _2136) / _2148, (_2140 - _2153) / _2148), _2158), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2136 - _2153) / _2148, (_2140 - _2155) / _2148), _2158), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2136 - _2155) / _2148, (_2153 + _2140) / _2148), _2158), 0.0)).x), vec4(0.25)));
        _2220 = 1.0 - (_2213 * cbSceneParam._m0[34u].x);
        _2221 = 1.0 - (_2213 * cbSceneParam._m0[34u].y);
        _2222 = 1.0 - (_2213 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2220 = 1.0;
        _2221 = 1.0;
        _2222 = 1.0;
    }
    float _2286;
    float _2288;
    float _2290;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2274 = fma(_2070, cbSceneParam._m0[63u].w, fma(_2066, cbSceneParam._m0[63u].z, fma(_2062, cbSceneParam._m0[63u].y, _2058 * cbSceneParam._m0[63u].x)));
        float _2275 = fma(_2070, cbSceneParam._m0[60u].w, fma(_2066, cbSceneParam._m0[60u].z, fma(_2062, cbSceneParam._m0[60u].y, _2058 * cbSceneParam._m0[60u].x))) / _2274;
        float _2276 = fma(_2070, cbSceneParam._m0[61u].w, fma(_2066, cbSceneParam._m0[61u].z, fma(_2062, cbSceneParam._m0[61u].y, _2058 * cbSceneParam._m0[61u].x))) / _2274;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2275 >= cbSceneParam._m0[64u].x) && (_2276 >= cbSceneParam._m0[64u].y)) && (_2275 <= cbSceneParam._m0[64u].z)) && (_2276 <= cbSceneParam._m0[64u].w))
        {
            float _2414 = fma(_2070, cbSceneParam._m0[62u].w, fma(_2066, cbSceneParam._m0[62u].z, fma(_2062, cbSceneParam._m0[62u].y, _2058 * cbSceneParam._m0[62u].x))) / _2274;
            float _2418 = isnan(cbSceneParam._m0[41u].w) ? _2414 : (isnan(_2414) ? cbSceneParam._m0[41u].w : max(_2414, cbSceneParam._m0[41u].w));
            float _2461 = (cbSceneParam._m0[33u].x - sqrt(((_2072 * _2072) + (_2071 * _2071)) + (_2073 * _2073))) * cbSceneParam._m0[33u].y;
            float _4614 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
            float _2468 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2275, cbSceneParam._m0[33u].w + _2276), _2418), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2275, _2276 - cbSceneParam._m0[33u].z), _2418), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2275 - cbSceneParam._m0[33u].z, _2276 - cbSceneParam._m0[33u].w), _2418), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2275 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2276), _2418), 0.0)).x), vec4(0.25)));
            float _2472 = 1.0 - (_2468 * cbSceneParam._m0[34u].x);
            float _2473 = 1.0 - (_2468 * cbSceneParam._m0[34u].y);
            float _2474 = 1.0 - (_2468 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2474) ? _2222 : (isnan(_2222) ? _2474 : min(_2222, _2474));
            frontier_phi_37_36_ladder_1 = isnan(_2473) ? _2221 : (isnan(_2221) ? _2473 : min(_2221, _2473));
            frontier_phi_37_36_ladder_2 = isnan(_2472) ? _2220 : (isnan(_2220) ? _2472 : min(_2220, _2472));
        }
        else
        {
            frontier_phi_37_36_ladder = _2222;
            frontier_phi_37_36_ladder_1 = _2221;
            frontier_phi_37_36_ladder_2 = _2220;
        }
        _2286 = frontier_phi_37_36_ladder_2;
        _2288 = frontier_phi_37_36_ladder_1;
        _2290 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2286 = _2220;
        _2288 = _2221;
        _2290 = _2222;
    }
    uvec4 _2295 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2297 = _2295.x * 14u;
    uint _2298 = _2297 + 13u;
    float _2305 = _971 + (-1.0);
    float _2310 = (cbLight._m0[_2298].x * _2305) + 1.0;
    float _2311 = (cbLight._m0[_2298].y * _2305) + 1.0;
    float _2312 = (cbLight._m0[_2298].z * _2305) + 1.0;
    float _2313 = (cbLight._m0[_2298].w * _2305) + 1.0;
    uint _2314 = _2297 + 5u;
    float _2320 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
    uint _2324 = _2297 + 4u;
    float _2333 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
    uint _2337 = _2297 | 1u;
    float _2348 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_809, _810, _811));
    float _2351 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_809, _810, _811));
    float _4650 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _4661 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2356 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * 0.3183098733425140380859375;
    float _2358 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * 0.3183098733425140380859375;
    float _2365 = ((cbLight._m0[_2314].x * _2320) * _2358) + (((cbLight._m0[_2324].x * _2286) * _2333) * _2356);
    float _2366 = ((_2320 * cbLight._m0[_2314].y) * _2358) + (((cbLight._m0[_2324].y * _2288) * _2333) * _2356);
    float _2367 = ((_2320 * cbLight._m0[_2314].z) * _2358) + (((cbLight._m0[_2324].z * _2290) * _2333) * _2356);
    uvec4 _2371 = floatBitsToUint(cbLight._m0[_2297 + 12u]);
    bool _2373 = _2371.x == 0u;
    float _2475;
    float _2477;
    float _2479;
    if (_2373)
    {
        _2475 = _2365;
        _2477 = _2366;
        _2479 = _2367;
    }
    else
    {
        uint _2483 = _2297 + 6u;
        float _2499 = (dot(vec3(cbLight._m0[_2297 + 2u].xyz), vec3(_809, _810, _811)) * 0.5) + 0.5;
        float _2500 = _2499 * _2499;
        float _4672 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2501 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2502 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2475 = (((cbLight._m0[_2483].x * 0.3183098733425140380859375) * _2501) * _2502) + _2365;
        _2477 = (((cbLight._m0[_2483].y * 0.3183098733425140380859375) * _2501) * _2502) + _2366;
        _2479 = (((cbLight._m0[_2483].z * 0.3183098733425140380859375) * _2501) * _2502) + _2367;
    }
    bool _2482 = _2371.y == 0u;
    float _2537;
    float _2539;
    float _2541;
    if (_2482)
    {
        _2537 = _2475;
        _2539 = _2477;
        _2541 = _2479;
    }
    else
    {
        uint _2699 = _2297 + 7u;
        float _2715 = (dot(vec3(cbLight._m0[_2297 + 3u].xyz), vec3(_809, _810, _811)) * 0.5) + 0.5;
        float _2716 = _2715 * _2715;
        float _4688 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2717 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2718 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
        _2537 = (((cbLight._m0[_2699].x * 0.3183098733425140380859375) * _2717) * _2718) + _2475;
        _2539 = (((cbLight._m0[_2699].y * 0.3183098733425140380859375) * _2717) * _2718) + _2477;
        _2541 = (((cbLight._m0[_2699].z * 0.3183098733425140380859375) * _2717) * _2718) + _2479;
    }
    uint _2544 = _2297 + 8u;
    float _2557 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _812) * 0.949999988079071044921875);
    float _2558 = _2557 * _2557;
    float _2559 = cbLight._m0[_2297].x + _888;
    float _2560 = cbLight._m0[_2297].y + _889;
    float _2561 = cbLight._m0[_2297].z + _890;
    float _2565 = inversesqrt(dot(vec3(_2559, _2560, _2561), vec3(_2559, _2560, _2561)));
    float _2566 = _2565 * _2559;
    float _2567 = _2565 * _2560;
    float _2568 = _2565 * _2561;
    float _2569 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2297].xyz));
    float _4704 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2572 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
    float _4715 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _2573 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    float _2574 = dot(vec3(_809, _810, _811), vec3(_2566, _2567, _2568));
    float _4726 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2577 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _2578 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2566, _2567, _2568));
    float _4737 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2582 = _2558 * _2558;
    float _2586 = ((_2577 * _2577) * (_2582 + (-1.0))) + 1.0;
    float _2597 = (exp2(log2(1.0 - (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2598 = 1.0 - _2558;
    float _2609 = (0.5 / (((_2573 * ((_2572 * _2598) + _2558)) + 9.9999999392252902907785028219223e-09) + (((_2573 * _2598) + _2558) * _2572))) * _2572;
    float _4748 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2611 = (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2582 / ((_2586 * _2586) * 3.141590118408203125));
    uint _2625 = _2297 + 9u;
    float _2636 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _812) * 0.949999988079071044921875);
    float _2637 = _2636 * _2636;
    float _2638 = cbLight._m0[_2337].x + _888;
    float _2639 = cbLight._m0[_2337].y + _889;
    float _2640 = cbLight._m0[_2337].z + _890;
    float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
    float _2645 = _2644 * _2638;
    float _2646 = _2644 * _2639;
    float _2647 = _2644 * _2640;
    float _2648 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2337].xyz));
    float _4759 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2651 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
    float _2652 = dot(vec3(_809, _810, _811), vec3(_2645, _2646, _2647));
    float _4770 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2655 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
    float _2656 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2645, _2646, _2647));
    float _4781 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2660 = _2637 * _2637;
    float _2664 = ((_2655 * _2655) * (_2660 + (-1.0))) + 1.0;
    float _2673 = (exp2(log2(1.0 - (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2674 = 1.0 - _2637;
    float _2684 = (0.5 / (((_2573 * ((_2651 * _2674) + _2637)) + 9.9999999392252902907785028219223e-09) + (((_2573 * _2674) + _2637) * _2651))) * _2651;
    float _4792 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2686 = (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (_2660 / ((_2664 * _2664) * 3.141590118408203125));
    float _2696 = (((_2673 * cbLight._m0[_2625].x) * _2686) * _2320) + ((((cbLight._m0[_2544].x * _2286) * _2597) * _2611) * _2333);
    float _2697 = (((_2673 * cbLight._m0[_2625].y) * _2686) * _2320) + ((((cbLight._m0[_2544].y * _2288) * _2597) * _2611) * _2333);
    float _2698 = (((_2673 * cbLight._m0[_2625].z) * _2686) * _2320) + ((((cbLight._m0[_2544].z * _2290) * _2597) * _2611) * _2333);
    float _2754;
    float _2756;
    float _2758;
    if (_2373)
    {
        _2754 = _2696;
        _2756 = _2697;
        _2758 = _2698;
    }
    else
    {
        uint _2760 = _2297 + 2u;
        uint _2764 = _2297 + 10u;
        float _2778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2760].w)) * _812) * 0.949999988079071044921875);
        float _2779 = _2778 * _2778;
        float _2780 = cbLight._m0[_2760].x + _888;
        float _2781 = cbLight._m0[_2760].y + _889;
        float _2782 = cbLight._m0[_2760].z + _890;
        float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
        float _2787 = _2786 * _2780;
        float _2788 = _2786 * _2781;
        float _2789 = _2786 * _2782;
        float _2790 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2760].xyz));
        float _4803 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2794 = dot(vec3(_809, _810, _811), vec3(_2787, _2788, _2789));
        float _4814 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2797 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
        float _2798 = dot(vec3(cbLight._m0[_2760].xyz), vec3(_2787, _2788, _2789));
        float _4825 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2802 = _2779 * _2779;
        float _2806 = ((_2797 * _2797) * (_2802 + (-1.0))) + 1.0;
        float _2815 = (exp2(log2(1.0 - (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2816 = 1.0 - _2779;
        float _2826 = (0.5 / (((_2573 * ((_2793 * _2816) + _2779)) + 9.9999999392252902907785028219223e-09) + (((_2573 * _2816) + _2779) * _2793))) * _2793;
        float _4836 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2828 = (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2802 / ((_2806 * _2806) * 3.141590118408203125));
        float _2829 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2754 = (((_2815 * cbLight._m0[_2764].x) * _2828) * _2829) + _2696;
        _2756 = (((_2815 * cbLight._m0[_2764].y) * _2828) * _2829) + _2697;
        _2758 = (((_2815 * cbLight._m0[_2764].z) * _2828) * _2829) + _2698;
    }
    float _2860;
    float _2862;
    float _2864;
    if (_2482)
    {
        _2860 = _2754;
        _2862 = _2756;
        _2864 = _2758;
    }
    else
    {
        uint _2871 = _2297 + 3u;
        uint _2875 = _2297 + 11u;
        float _2889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2871].w)) * _812) * 0.949999988079071044921875);
        float _2890 = _2889 * _2889;
        float _2891 = cbLight._m0[_2871].x + _888;
        float _2892 = cbLight._m0[_2871].y + _889;
        float _2893 = cbLight._m0[_2871].z + _890;
        float _2897 = inversesqrt(dot(vec3(_2891, _2892, _2893), vec3(_2891, _2892, _2893)));
        float _2898 = _2897 * _2891;
        float _2899 = _2897 * _2892;
        float _2900 = _2897 * _2893;
        float _2901 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2871].xyz));
        float _4852 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2904 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _2905 = dot(vec3(_809, _810, _811), vec3(_2898, _2899, _2900));
        float _4863 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2908 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
        float _2909 = dot(vec3(cbLight._m0[_2871].xyz), vec3(_2898, _2899, _2900));
        float _4874 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        float _2913 = _2890 * _2890;
        float _2917 = ((_2908 * _2908) * (_2913 + (-1.0))) + 1.0;
        float _2926 = (exp2(log2(1.0 - (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2927 = 1.0 - _2890;
        float _2937 = (0.5 / (((_2573 * ((_2904 * _2927) + _2890)) + 9.9999999392252902907785028219223e-09) + (((_2573 * _2927) + _2890) * _2904))) * _2904;
        float _4885 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2939 = (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2913 / ((_2917 * _2917) * 3.141590118408203125));
        float _2940 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
        _2860 = (((_2926 * cbLight._m0[_2875].x) * _2939) * _2940) + _2754;
        _2862 = (((_2926 * cbLight._m0[_2875].y) * _2939) * _2940) + _2756;
        _2864 = (((_2926 * cbLight._m0[_2875].z) * _2939) * _2940) + _2758;
    }
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    if (_2295.y == 0u)
    {
        uvec4 _2961 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2962 = _2961.x;
        uint _2973 = uint((float(_2961.y) * floor(float(uint(cbSceneParam._m0[85u].y * _909) / _2962))) + floor(float(uint(cbSceneParam._m0[85u].x * _908) / _2962)));
        float _2983 = (log2(_2073 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2984 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
        uint _2987 = uint(isnan(14.0) ? _2984 : (isnan(_2984) ? 14.0 : min(_2984, 14.0)));
        uvec4 _2992 = texelFetch(g_lightClusterGridBuffer, int(((_2987 << 2u) + (_2973 << 6u)) >> 2u));
        uint _2993 = _2992.x;
        uint _2994 = _2961.z;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        if (((((1u << ((_2994 >> 4u) & 15u)) + 4294967295u) & _2993) == 0u) || ((_2994 & 240u) == 0u))
        {
            _3073 = 0.0;
            _3075 = 0.0;
            _3077 = 0.0;
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
        }
        else
        {
            float _3074;
            float _3076;
            float _3078;
            float _3080;
            float _3082;
            float _3084;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            uint _3231 = 0u;
            uint _3240;
            bool _3241;
            for (;;)
            {
                _3240 = texelFetch(g_lightClassification, int((((_2987 << 5u) + (_2973 << 9u)) + (_3231 << 2u)) >> 2u)).x;
                _3241 = _3240 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3241)
                {
                    frontier_phi_71_pred = _3230;
                    frontier_phi_71_pred_1 = _3229;
                    frontier_phi_71_pred_2 = _3228;
                    frontier_phi_71_pred_3 = _3227;
                    frontier_phi_71_pred_4 = _3226;
                    frontier_phi_71_pred_5 = _3225;
                }
                else
                {
                    float _3370;
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    float _3375;
                    uint _3376;
                    _3370 = _3225;
                    _3371 = _3226;
                    _3372 = _3227;
                    _3373 = _3228;
                    _3374 = _3229;
                    _3375 = _3230;
                    _3376 = _3240;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    for (;;)
                    {
                        uint _3380 = uint(findLSB(_3376)) + (_3231 << 5u);
                        uint _3377 = (_3376 + 4294967295u) & _3376;
                        uint _3382 = _3380 * 48u;
                        vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3382)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 3u)).x));
                        uint _3402 = (_3380 * 48u) + 4u;
                        vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3402)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 3u)).x));
                        uint _3421 = (_3380 * 48u) + 8u;
                        vec3 _3432 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3421)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 2u)).x));
                        float _3436 = _3396.x - _2071;
                        float _3437 = _3396.y - _2072;
                        float _3438 = _3396.z - _2073;
                        float _3439 = dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438));
                        float _3442 = inversesqrt(_3439);
                        float _3443 = _3442 * _3436;
                        float _3444 = _3442 * _3437;
                        float _3445 = _3442 * _3438;
                        float _3446 = dot(vec3(_927, _930, _933), vec3(_3443, _3444, _3445));
                        float _3451 = 1.0 - (_3439 * _3396.w);
                        float _4911 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                        float _3452 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                        float _3453 = sqrt(_3439) * _3415.w;
                        float _3456 = 1.39999997615814208984375 / (_3453 + 1.39999997615814208984375);
                        float _3457 = _3456 * _3456;
                        float _3460 = ((1.0 - _3457) * _3446) + _3457;
                        float _3463 = _3453 * _3453;
                        float _3467 = ((isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0))) * _3452) / ((_3463 * 0.699999988079071044921875) + 1.0);
                        float _3471 = (-0.0) - _2071;
                        float _3472 = (-0.0) - _2072;
                        float _3473 = (-0.0) - _2073;
                        float _3477 = inversesqrt(dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473)));
                        float _3478 = _3477 * _3471;
                        float _3479 = _3477 * _3472;
                        float _3480 = _3477 * _3473;
                        float _3487 = exp2(log2(1.0 / ((_3463 * 3.5) + 5.0)) * 0.25);
                        float _3488 = 1.0 - _987;
                        float _3495 = sqrt(1.0 - ((1.0 - (_3488 * _3488)) * (1.0 - (_3487 * _3487))));
                        float _3496 = _3495 * _3495;
                        float _3497 = _3496 * _3496;
                        float _3498 = _3478 + _3443;
                        float _3499 = _3479 + _3444;
                        float _3500 = _3480 + _3445;
                        float _3504 = inversesqrt(dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500)));
                        float _3508 = dot(vec3(_927, _930, _933), vec3(_3478, _3479, _3480));
                        float _4927 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                        float _3511 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                        float _3512 = dot(vec3(_927, _930, _933), vec3(_3504 * _3498, _3504 * _3499, _3504 * _3500));
                        float _4938 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                        float _3515 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3519 = ((_3515 * _3515) * (_3497 + (-1.0))) + 1.0;
                        float _3520 = _3456 * _3496;
                        float _3521 = _3520 * _3520;
                        float _3524 = ((1.0 - _3521) * _3446) + _3521;
                        float _4949 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                        float _3525 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                        float _3526 = 1.0 - _3496;
                        float _3536 = (0.5 / (((_3525 * ((_3511 * _3526) + _3496)) + 9.9999999392252902907785028219223e-09) + (((_3525 * _3526) + _3496) * _3511))) * _3525;
                        float _4960 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3547 = (((_3497 * 3.1415927410125732421875) * (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0)))) / ((_3519 * _3519) * ((_3463 * 2.1991131305694580078125) + 3.141590118408203125))) * _3452;
                        _3300 = (_3467 * _3415.x) + _3373;
                        _3301 = (_3467 * _3415.y) + _3374;
                        _3302 = (_3467 * _3415.z) + _3375;
                        _3297 = (_3547 * _3432.x) + _3370;
                        _3298 = (_3547 * _3432.y) + _3371;
                        _3299 = (_3547 * _3432.z) + _3372;
                        if (_3377 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3370 = _3297;
                            _3371 = _3298;
                            _3372 = _3299;
                            _3373 = _3300;
                            _3374 = _3301;
                            _3375 = _3302;
                            _3376 = _3377;
                        }
                    }
                    frontier_phi_71_pred = _3302;
                    frontier_phi_71_pred_1 = _3301;
                    frontier_phi_71_pred_2 = _3300;
                    frontier_phi_71_pred_3 = _3299;
                    frontier_phi_71_pred_4 = _3298;
                    frontier_phi_71_pred_5 = _3297;
                }
                _3084 = frontier_phi_71_pred;
                _3082 = frontier_phi_71_pred_1;
                _3080 = frontier_phi_71_pred_2;
                _3078 = frontier_phi_71_pred_3;
                _3076 = frontier_phi_71_pred_4;
                _3074 = frontier_phi_71_pred_5;
                uint _3232 = _3231 + 1u;
                if (_3232 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3225 = _3074;
                    _3226 = _3076;
                    _3227 = _3078;
                    _3228 = _3080;
                    _3229 = _3082;
                    _3230 = _3084;
                    _3231 = _3232;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3073 = _3074;
            _3075 = _3076;
            _3077 = _3078;
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
        }
        uvec4 _3087 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3088 = _3087.z;
        uint _3090 = (_3088 >> 8u) & 15u;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        if (((4294967295u << _3090) & _2993) == 0u)
        {
            _3193 = _3073;
            _3195 = _3075;
            _3197 = _3077;
            _3199 = _3079;
            _3201 = _3081;
            _3203 = _3083;
        }
        else
        {
            float _3218 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
            float _3219 = _3218 * _2071;
            float _3220 = _3218 * _2072;
            float _3221 = _3218 * _2073;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3090 < ((_3088 >> 12u) & 15u))
            {
                float _3194;
                float _3196;
                float _3198;
                float _3200;
                float _3202;
                float _3204;
                float _3353 = _3073;
                float _3354 = _3075;
                float _3355 = _3077;
                float _3356 = _3079;
                float _3357 = _3081;
                float _3358 = _3083;
                uint _3359 = _3090;
                uint _3368;
                bool _3369;
                for (;;)
                {
                    _3368 = texelFetch(g_lightClassification, int((((_2987 << 5u) + (_2973 << 9u)) + (_3359 << 2u)) >> 2u)).x;
                    _3369 = _3368 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3369)
                    {
                        frontier_phi_82_pred = _3358;
                        frontier_phi_82_pred_1 = _3357;
                        frontier_phi_82_pred_2 = _3356;
                        frontier_phi_82_pred_3 = _3355;
                        frontier_phi_82_pred_4 = _3354;
                        frontier_phi_82_pred_5 = _3353;
                    }
                    else
                    {
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3854;
                        float _3855;
                        float _3856;
                        float _3857;
                        float _3858;
                        float _3859;
                        float _3574 = _3353;
                        float _3575 = _3354;
                        float _3576 = _3355;
                        float _3577 = _3356;
                        float _3578 = _3357;
                        float _3579 = _3358;
                        uint _3580 = _3368;
                        uint _3581;
                        vec4 _3606;
                        float _3607;
                        vec4 _3622;
                        vec3 _3634;
                        vec4 _3649;
                        vec4 _3664;
                        float _3710;
                        bool _3711;
                        for (;;)
                        {
                            uint _3591 = ((_3359 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3580));
                            _3581 = (_3580 + 4294967295u) & _3580;
                            uint _3593 = _3591 * 40u;
                            _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            _3607 = _3606.w;
                            uint _3609 = (_3591 * 40u) + 4u;
                            _3622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 3u)).x));
                            uint _3624 = (_3591 * 40u) + 8u;
                            _3634 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x));
                            uint _3636 = (_3591 * 40u) + 16u;
                            _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            uint _3651 = (_3591 * 40u) + 20u;
                            _3664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 3u)).x));
                            uint _3666 = (_3591 * 40u) + 24u;
                            vec4 _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            uint _3685 = (_3591 * 40u) + 28u;
                            vec4 _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            _3710 = fma(_2073, _3698.z, fma(_2072, _3698.y, _3698.x * _2071)) + _3698.w;
                            _3711 = !((fma(_2073, _3679.z, fma(_2072, _3679.y, _3679.x * _2071)) + _3679.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3711)
                            {
                                float _3738 = _3606.x - _2071;
                                float _3739 = _3606.y - _2072;
                                float _3740 = _3606.z - _2073;
                                float _3741 = dot(vec3(_3738, _3739, _3740), vec3(_3738, _3739, _3740));
                                float _3744 = inversesqrt(_3741);
                                float _3745 = _3744 * _3738;
                                float _3746 = _3744 * _3739;
                                float _3747 = _3744 * _3740;
                                float _3751 = 1.0 - (_3741 / (_3607 * _3607));
                                float _4971 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3752 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                                float _3756 = sqrt(_3741) * _3622.w;
                                float _3758 = 1.39999997615814208984375 / (_3756 + 1.39999997615814208984375);
                                float _3759 = _3758 * _3758;
                                float _3762 = ((1.0 - _3759) * dot(vec3(_3745, _3746, _3747), vec3(_927, _930, _933))) + _3759;
                                float _3765 = _3756 * _3756;
                                float _3769 = (fma(_2073, _3649.z, fma(_2072, _3649.y, _3649.x * _2071)) + _3649.w) / _3710;
                                float _3770 = (fma(_2073, _3664.z, fma(_2072, _3664.y, _3664.x * _2071)) + _3664.w) / _3710;
                                float _3774 = 1.0 - dot(vec2(_3769, _3770), vec2(_3769, _3770));
                                float _4987 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3775 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3776 = _3775 * (((isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0))) * _3752) / ((_3765 * 0.699999988079071044921875) + 1.0));
                                float _3788 = exp2(log2(1.0 / ((_3765 * 3.5) + 5.0)) * 0.25);
                                float _3789 = 1.0 - _987;
                                float _3796 = sqrt(1.0 - ((1.0 - (_3789 * _3789)) * (1.0 - (_3788 * _3788))));
                                float _3797 = _3796 * _3796;
                                float _3798 = _3797 * _3797;
                                float _3799 = _3745 - _3219;
                                float _3800 = _3746 - _3220;
                                float _3801 = _3747 - _3221;
                                float _3805 = inversesqrt(dot(vec3(_3799, _3800, _3801), vec3(_3799, _3800, _3801)));
                                float _3809 = dot(vec3(_927, _930, _933), vec3((-0.0) - _3219, (-0.0) - _3220, (-0.0) - _3221));
                                float _4998 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3812 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3813 = dot(vec3(_927, _930, _933), vec3(_3805 * _3799, _3805 * _3800, _3805 * _3801));
                                float _5009 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                                float _3816 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                                float _3820 = ((_3816 * _3816) * (_3798 + (-1.0))) + 1.0;
                                float _3821 = _3758 * _3797;
                                float _3822 = _3821 * _3821;
                                float _3828 = ((1.0 - _3822) * dot(vec3(_927, _930, _933), vec3(_3745, _3746, _3747))) + _3822;
                                float _5020 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3829 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3830 = 1.0 - _3797;
                                float _3840 = (0.5 / (((_3829 * ((_3812 * _3830) + _3797)) + 9.9999999392252902907785028219223e-09) + (((_3829 * _3830) + _3797) * _3812))) * _3829;
                                float _5031 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3850 = (_3775 * _3752) * (((_3798 * 3.1415927410125732421875) * (isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0)))) / ((_3820 * _3820) * ((_3765 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3776 * _3622.z;
                                frontier_phi_88_pred_1 = _3776 * _3622.y;
                                frontier_phi_88_pred_2 = _3776 * _3622.x;
                                frontier_phi_88_pred_3 = _3850 * _3634.z;
                                frontier_phi_88_pred_4 = _3850 * _3634.y;
                                frontier_phi_88_pred_5 = _3850 * _3634.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3859 = frontier_phi_88_pred;
                            _3858 = frontier_phi_88_pred_1;
                            _3857 = frontier_phi_88_pred_2;
                            _3856 = frontier_phi_88_pred_3;
                            _3855 = frontier_phi_88_pred_4;
                            _3854 = frontier_phi_88_pred_5;
                            _3564 = _3857 + _3577;
                            _3565 = _3858 + _3578;
                            _3566 = _3859 + _3579;
                            _3561 = _3854 + _3574;
                            _3562 = _3855 + _3575;
                            _3563 = _3856 + _3576;
                            if (_3581 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3581;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3566;
                        frontier_phi_82_pred_1 = _3565;
                        frontier_phi_82_pred_2 = _3564;
                        frontier_phi_82_pred_3 = _3563;
                        frontier_phi_82_pred_4 = _3562;
                        frontier_phi_82_pred_5 = _3561;
                    }
                    _3204 = frontier_phi_82_pred;
                    _3202 = frontier_phi_82_pred_1;
                    _3200 = frontier_phi_82_pred_2;
                    _3198 = frontier_phi_82_pred_3;
                    _3196 = frontier_phi_82_pred_4;
                    _3194 = frontier_phi_82_pred_5;
                    uint _3360 = _3359 + 1u;
                    if (_3360 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3353 = _3194;
                        _3354 = _3196;
                        _3355 = _3198;
                        _3356 = _3200;
                        _3357 = _3202;
                        _3358 = _3204;
                        _3359 = _3360;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3200;
                frontier_phi_63_64_ladder_1 = _3204;
                frontier_phi_63_64_ladder_2 = _3202;
                frontier_phi_63_64_ladder_3 = _3198;
                frontier_phi_63_64_ladder_4 = _3196;
                frontier_phi_63_64_ladder_5 = _3194;
            }
            else
            {
                frontier_phi_63_64_ladder = _3079;
                frontier_phi_63_64_ladder_1 = _3083;
                frontier_phi_63_64_ladder_2 = _3081;
                frontier_phi_63_64_ladder_3 = _3077;
                frontier_phi_63_64_ladder_4 = _3075;
                frontier_phi_63_64_ladder_5 = _3073;
            }
            _3193 = frontier_phi_63_64_ladder_5;
            _3195 = frontier_phi_63_64_ladder_4;
            _3197 = frontier_phi_63_64_ladder_3;
            _3199 = frontier_phi_63_64_ladder;
            _3201 = frontier_phi_63_64_ladder_2;
            _3203 = frontier_phi_63_64_ladder_1;
        }
        float _3208 = isnan(1.0) ? _971 : (isnan(_971) ? 1.0 : min(_971, 1.0));
        _3006 = (_3208 * _3199) + _2537;
        _3008 = (_3208 * _3201) + _2539;
        _3010 = (_3208 * _3203) + _2541;
        _3012 = ((_3193 * 0.039999999105930328369140625) * _3208) + _2860;
        _3014 = ((_3195 * 0.039999999105930328369140625) * _3208) + _2862;
        _3016 = ((_3197 * 0.039999999105930328369140625) * _3208) + _2864;
    }
    else
    {
        _3006 = _2537;
        _3008 = _2539;
        _3010 = _2541;
        _3012 = _2860;
        _3014 = _2862;
        _3016 = _2864;
    }
    float _5047 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _5058 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _5069 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _3033 = ((isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0))) * (_3006 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _971))) + ((_3012 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    float _3034 = ((isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0))) * (_3008 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _971))) + ((_3014 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    float _3035 = ((isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (_3010 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _971))) + ((_3016 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1807)) * cbPerFrame._m0[3u].x);
    uint _3036 = _259 + 6u;
    float _3044 = _908 / cbSceneParam._m0[86u].x;
    float _3045 = _909 / cbSceneParam._m0[86u].y;
    vec4 _3059 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3044, _3045, (log2((isnan(cbSceneParam._m0[77u].w) ? _830 : (isnan(_830) ? cbSceneParam._m0[77u].w : min(_830, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3061 = _3059.x;
    float _3062 = _3059.y;
    float _3063 = _3059.z;
    float _3064 = _3059.w;
    float _3135;
    float _3137;
    float _3139;
    float _3141;
    if (_830 > cbSceneParam._m0[78u].w)
    {
        float _3098 = isnan(_830) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _830 : min(cbSceneParam._m0[80u].w, _830));
        float _3099 = _3098 / _830;
        float _3110 = _3099 * _881;
        float _3111 = _882 * _3099;
        float _3112 = (-0.0) - _3111;
        float _3113 = _3099 * _883;
        float _3115 = (cbSceneParam._m0[77u].w * _3112) / _3098;
        float _3116 = _3115 + cbSceneParam._m0[79u].w;
        float _3117 = cbSceneParam._m0[79u].w - _3111;
        float _3123 = sqrt(((_3110 * _3110) + (_3111 * _3111)) + (_3113 * _3113));
        float _3126 = (1.0 - (cbSceneParam._m0[77u].w / _3098)) * _3123;
        float _3131 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3133 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3310;
        if (abs((_3112 - _3115) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3310 = ((((_3116 > 0.0) ? exp2(_3131 * _3116) : (2.0 - exp2(_3133 * _3116))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3126;
        }
        else
        {
            float _3254 = 1.0 / cbSceneParam._m0[80u].x;
            float _3255 = isnan(_3117) ? _3116 : (isnan(_3116) ? _3117 : max(_3116, _3117));
            float _3256 = isnan(_3117) ? _3116 : (isnan(_3116) ? _3117 : min(_3116, _3117));
            float _3265 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : min(_3255, 0.0));
            float _3266 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : min(_3256, 0.0));
            _3310 = ((abs(_3123 / _3112) * cbSceneParam._m0[80u].y) * ((((_3265 - _3266) * 2.0) - ((exp2(_3131 * (isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0)))) - exp2(_3131 * (isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))))) * _3254)) - ((exp2(_3133 * _3265) - exp2(_3133 * _3266)) * _3254))) + (_3126 * cbSceneParam._m0[80u].z);
        }
        vec4 _3312 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3044, _3045, 1.0), 0.0);
        float _3321 = exp2((_3310 * (-1.44269502162933349609375)) * (1.0 - _3312.w));
        float _3322 = log2(_3321);
        float _3338 = log2(_3064);
        _3135 = (exp2(_3338 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].x)) * _3312.x) / cbSceneParam._m0[78u].x)) + _3061;
        _3137 = (exp2(_3338 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].y)) * _3312.y) / cbSceneParam._m0[78u].y)) + _3062;
        _3139 = (exp2(_3338 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].z)) * _3312.z) / cbSceneParam._m0[78u].z)) + _3063;
        _3141 = _3321 * _3064;
    }
    else
    {
        _3135 = _3061;
        _3137 = _3062;
        _3139 = _3063;
        _3141 = _3064;
    }
    bool _3348;
    vec4 _3151;
    vec4 _3173;
    float _3175;
    float _3179;
    float _3180;
    float _3181;
    float _3182;
    bool _3192;
    for (;;)
    {
        _3151 = cbMatDynParam._m0[0u];
        float _3153 = roundEven(_3151.y);
        bool _3154 = _3153 == 3.0;
        float _3155 = log2(_3141);
        float _3162 = exp2(_3155 * cbSceneParam._m0[78u].x) * _3033;
        float _3163 = exp2(_3155 * cbSceneParam._m0[78u].y) * _3034;
        float _3164 = exp2(_3155 * cbSceneParam._m0[78u].z) * _3035;
        float _3171 = _897 + (-0.5);
        _3173 = cbMtdParam._m0[1u];
        _3175 = _3173.y * _3171;
        float _3178 = (_3153 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3179 = _3178 * (_3154 ? _3162 : (_3162 + (cbSceneParam._m0[72u].w * _3135)));
        _3180 = _3178 * (_3154 ? _3163 : (_3163 + (cbSceneParam._m0[72u].w * _3137)));
        _3181 = _3178 * (_3154 ? _3164 : (_3164 + (cbSceneParam._m0[72u].w * _3139)));
        _3182 = _3171 * 0.999000012874603271484375;
        _3192 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3192)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _3182) < 0.5)
            {
                _3348 = true;
                break;
            }
        }
        uint _3289 = _946 + uint(_3151.w);
        if ((cbInstanceData._m0[_3289].w < 1.0) && ((cbInstanceData._m0[_3289].w + _3182) < 0.5))
        {
            _3348 = true;
            break;
        }
        if ((_3175 + 1.0) < _3173.x)
        {
            _3348 = true;
            break;
        }
        _3348 = false;
        break;
    }
    float _3552;
    if (_3348)
    {
        discard_state = true;
        _3552 = 0.0;
    }
    else
    {
        _3552 = cbInstanceData._m0[_3036].w;
    }
    SV_Target.x = _3179;
    SV_Target.y = _3180;
    SV_Target.z = _3181;
    SV_Target.w = _3552;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3036].w;
    discard_exit();
}


