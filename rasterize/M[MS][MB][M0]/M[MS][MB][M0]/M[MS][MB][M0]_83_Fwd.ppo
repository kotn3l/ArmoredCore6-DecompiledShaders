#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1115;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _352 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _369 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _352) * cbMtdParam._m0[24u].x) + _352) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3421 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _377 = (_370 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _378 = (_370 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _379 = (_370 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _397 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _254) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _255) + cbTextureTilingScale._m0[20u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _443 = _439.z;
    float _452 = ((_422.z - _443) * _370) + _443;
    float _455 = ((((_422.x - _441) * _370) + _441) * 2.0) + (-1.0);
    float _456 = ((((_422.y - _442) * _370) + _442) * 2.0) + (-1.0);
    float _457 = dot(vec2(_455, _456), vec2(_455, _456));
    float _3432 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _462 = sqrt(1.0 - (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))));
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _493 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _495 = _493.x;
    float _496 = 1.0 - _495;
    float _509 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_495 - _496) * cbMtdParam._m0[24u].z) + _496) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3443 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
    float _517 = (_510 * (cbMtdParam._m0[17u].x - _377)) + _377;
    float _518 = (_510 * (cbMtdParam._m0[17u].y - _378)) + _378;
    float _519 = (_510 * (cbMtdParam._m0[17u].z - _379)) + _379;
    float _524 = (((_397.z - _452) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _452;
    vec4 _537 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _544 = (_537.x * 2.0) + (-1.0);
    float _545 = (_537.y * 2.0) + (-1.0);
    float _546 = dot(vec2(_544, _545), vec2(_544, _545));
    float _3454 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _554 = (_510 * (_537.z - _524)) + _524;
    float _559 = _455 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_397.x * 2.0) + (-1.0)));
    float _560 = _456 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_397.y * 2.0) + (-1.0)));
    float _572 = (((_544 - _559) + (cbMtdParam._m0[21u].x * _559)) * _510) + _559;
    float _573 = (((_545 - _560) + (cbMtdParam._m0[21u].x * _560)) * _510) + _560;
    float _574 = (_510 * (sqrt(1.0 - (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0)))) - _462)) + _462;
    float _579 = cbMtdParam._m0[22u].x + _475.w;
    float _582 = fma(_574, _221 * NORMAL.x, fma(_573, _228 * TANGENT.x, (_214 * _206) * _572));
    float _585 = fma(_574, _221 * NORMAL.y, fma(_573, _228 * TANGENT.y, (_214 * _207) * _572));
    float _588 = fma(_574, _221 * NORMAL.z, fma(_573, _228 * TANGENT.z, (_214 * _208) * _572));
    float _592 = inversesqrt(dot(vec3(_582, _585, _588), vec3(_582, _585, _588)));
    float _593 = _592 * _582;
    float _594 = _592 * _585;
    float _595 = _592 * _588;
    float _3465 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _596 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _3476 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _3487 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3498 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3509 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _614 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _656 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _666 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _656);
    float _667 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _656);
    float _668 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _656);
    float _672 = inversesqrt(dot(vec3(_666, _667, _668), vec3(_666, _667, _668)));
    float _673 = _666 * _672;
    float _674 = _667 * _672;
    float _675 = _668 * _672;
    float _681 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _682 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _700 = fma(_595, cbSceneParam._m0[5u].z, fma(_594, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _593));
    float _703 = fma(_595, cbSceneParam._m0[6u].z, fma(_594, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _593));
    float _706 = fma(_595, cbSceneParam._m0[7u].z, fma(_594, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _593));
    uint _720 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _726 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) * cbInstanceData._m0[_720].x;
    float _727 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) * cbInstanceData._m0[_720].y;
    float _728 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) * cbInstanceData._m0[_720].z;
    float _3520 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _3531 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _3542 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    vec4 _740 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _681, cbSceneParam._m0[86u].y * _682));
    float _744 = ((isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * TEXCOORD_5.w) * _740.x;
    float _745 = dot(vec3(_593, _594, _595), vec3(_673, _674, _675));
    float _748 = _745 * 2.0;
    float _752 = (_748 * _593) - _673;
    float _753 = (_748 * _594) - _674;
    float _754 = (_748 * _595) - _675;
    float _758 = abs(dot(vec3(_673, _674, _675), vec3(_593, _594, _595)));
    float _3553 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _760 = sqrt(_596);
    float _773 = exp2((_760 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_760 * 3.0));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1114;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _839 = fma(_813, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _805));
        float _843 = fma(_813, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _805));
        float _847 = fma(_813, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _805));
        float _872 = _805 + _593;
        float _873 = _809 + _594;
        float _874 = _813 + _595;
        float _884 = fma(_874, cbModelParam._m0[26u].z, fma(_873, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _872)) - _839;
        float _885 = fma(_874, cbModelParam._m0[27u].z, fma(_873, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _872)) - _843;
        float _886 = fma(_874, cbModelParam._m0[28u].z, fma(_873, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _872)) - _847;
        float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
        float _903 = ((_890 * _884) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_839 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_890 * _885) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_843 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_890 * _886) / cbModelParam._m0[34u].z) + ((((((_847 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_903, _904, _905), 0.0);
        float _942 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_908.x + (-0.5));
        float _944 = _942 * (_908.y + (-0.5));
        float _945 = _942 * (_908.z + (-0.5));
        float _952 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_915.x + (-0.5));
        float _954 = _952 * (_915.y + (-0.5));
        float _955 = _952 * (_915.z + (-0.5));
        float _962 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_922.x + (-0.5));
        float _964 = _962 * (_922.y + (-0.5));
        float _965 = _962 * (_922.z + (-0.5));
        float _972 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_929.x + (-0.5));
        float _974 = _972 * (_929.y + (-0.5));
        float _975 = _972 * (_929.z + (-0.5));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = _943 * 0.5;
        float _980 = _953 * 0.5;
        float _981 = _963 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _996 = (dot(vec3(_593, _594, _595), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1006 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3601 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_1008 + 1.0))) + _1013) * _976;
        float _1023 = _944 * 0.5;
        float _1024 = _954 * 0.5;
        float _1025 = _964 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_593, _594, _595), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3612 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3623 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3634 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (_1050 + 1.0))) + _1055) * _977;
        float _1065 = _945 * 0.5;
        float _1066 = _955 * 0.5;
        float _1067 = _965 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_593, _594, _595), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3645 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3656 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3667 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * (_1092 + 1.0))) + _1097) * _978;
        _1114 = _945;
        _1116 = _944;
        _1117 = _943;
        _1118 = _955;
        _1119 = _954;
        _1120 = _953;
        _1121 = _965;
        _1122 = _964;
        _1123 = _963;
        _1124 = _978;
        _1125 = _977;
        _1126 = _976;
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
    }
    else
    {
        _1114 = _1115;
        _1116 = _1115;
        _1117 = _1115;
        _1118 = _1115;
        _1119 = _1115;
        _1120 = _1115;
        _1121 = _1115;
        _1122 = _1115;
        _1123 = _1115;
        _1124 = _1115;
        _1125 = _1115;
        _1126 = _1115;
        _1127 = 0.0;
        _1128 = 0.0;
        _1129 = 0.0;
    }
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1154 = fma(_813, cbModelParam._m0[30u].z, fma(_809, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _805));
        float _1158 = fma(_813, cbModelParam._m0[31u].z, fma(_809, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _805));
        float _1162 = fma(_813, cbModelParam._m0[32u].z, fma(_809, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _805));
        float _1185 = _805 + _593;
        float _1186 = _809 + _594;
        float _1187 = _813 + _595;
        float _1197 = fma(_1187, cbModelParam._m0[30u].z, fma(_1186, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1185)) - _1154;
        float _1198 = fma(_1187, cbModelParam._m0[31u].z, fma(_1186, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1185)) - _1158;
        float _1199 = fma(_1187, cbModelParam._m0[32u].z, fma(_1186, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1185)) - _1162;
        float _1203 = inversesqrt(dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199)));
        float _1216 = ((_1203 * _1197) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1154 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1203 * _1198) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1158 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1203 * _1199) / cbModelParam._m0[35u].z) + ((((((_1162 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        float _1253 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1220.x + (-0.5));
        float _1255 = _1253 * (_1220.y + (-0.5));
        float _1256 = _1253 * (_1220.z + (-0.5));
        float _1263 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1227.x + (-0.5));
        float _1265 = _1263 * (_1227.y + (-0.5));
        float _1266 = _1263 * (_1227.z + (-0.5));
        float _1273 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1234.x + (-0.5));
        float _1275 = _1273 * (_1234.y + (-0.5));
        float _1276 = _1273 * (_1234.z + (-0.5));
        float _1283 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1241.x + (-0.5));
        float _1285 = _1283 * (_1241.y + (-0.5));
        float _1286 = _1283 * (_1241.z + (-0.5));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = _1254 * 0.5;
        float _1291 = _1264 * 0.5;
        float _1292 = _1274 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_593, _594, _595), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _3730 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1317 + 1.0))) + _1322) * _1287;
        float _1332 = _1255 * 0.5;
        float _1333 = _1265 * 0.5;
        float _1334 = _1275 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_593, _594, _595), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _3763 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1359 + 1.0))) + _1364) * _1288;
        float _1374 = _1256 * 0.5;
        float _1375 = _1266 * 0.5;
        float _1376 = _1276 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_593, _594, _595), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _3774 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _3785 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _3796 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1401 + 1.0))) + _1406) * _1289;
        _1423 = _1256;
        _1424 = _1255;
        _1425 = _1254;
        _1426 = _1266;
        _1427 = _1265;
        _1428 = _1264;
        _1429 = _1276;
        _1430 = _1275;
        _1431 = _1274;
        _1432 = _1289;
        _1433 = _1288;
        _1434 = _1287;
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1437 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
    }
    else
    {
        _1423 = _1115;
        _1424 = _1115;
        _1425 = _1115;
        _1426 = _1115;
        _1427 = _1115;
        _1428 = _1115;
        _1429 = _1115;
        _1430 = _1115;
        _1431 = _1115;
        _1432 = _1115;
        _1433 = _1115;
        _1434 = _1115;
        _1435 = 0.0;
        _1436 = 0.0;
        _1437 = 0.0;
    }
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1127)) + _1127;
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1128)) + _1128;
    float _1449 = (cbModelParam._m0[1u].x * (_1437 - _1129)) + _1129;
    float _1470 = fma(_1449, cbSceneParam._m0[89u].z, fma(_1448, cbSceneParam._m0[89u].y, _1447 * cbSceneParam._m0[89u].x));
    float _1473 = fma(_1449, cbSceneParam._m0[90u].z, fma(_1448, cbSceneParam._m0[90u].y, _1447 * cbSceneParam._m0[90u].x));
    float _1476 = fma(_1449, cbSceneParam._m0[91u].z, fma(_1448, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1447));
    float _1491 = _752 * 0.5;
    float _1492 = _753 * 0.5;
    float _1493 = _754 * 0.5;
    float _1494 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1425, _1428, _1431, _1434));
    float _1497 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1500 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1534;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1507 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1114, _1118, _1121, _1124));
        float _1511 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1116, _1119, _1122, _1125));
        float _1515 = dot(vec4(_1491, _1492, _1493, 1.0), vec4(_1117, _1120, _1123, _1126));
        float _1522 = dot(vec4(cbModelParam._m0[39u]), vec4(_1491, _1492, _1493, 1.0));
        _1534 = dot(vec3(isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1522) ? 0.0 : (isnan(0.0) ? _1522 : max(0.0, _1522))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1534 = 1.0;
    }
    float _1545;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1536 = dot(vec4(cbModelParam._m0[40u]), vec4(_1491, _1492, _1493, 1.0));
        _1545 = dot(vec3(isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1536) ? 0.0 : (isnan(0.0) ? _1536 : max(0.0, _1536))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1545 = 1.0;
    }
    float _1549 = (_1545 * cbModelParam._m0[1u].x) + (_1534 * (1.0 - cbModelParam._m0[1u].x));
    float _1559 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _596);
    float _1560 = isnan(_1559) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1559 : min(cbModelParam._m0[25u].z, _1559));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1608 = fma(_813, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805)) + cbModelParam._m0[13u].w;
        float _1612 = fma(_813, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805)) + cbModelParam._m0[14u].w;
        float _1616 = fma(_813, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805)) + cbModelParam._m0[15u].w;
        float _1619 = fma(_754, cbModelParam._m0[13u].z, fma(_753, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _752));
        float _1622 = fma(_754, cbModelParam._m0[14u].z, fma(_753, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _752));
        float _1625 = fma(_754, cbModelParam._m0[15u].z, fma(_753, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _752));
        float _1653;
        if (_1619 > 0.0)
        {
            _1653 = abs((1.0 - _1608) / _1619);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1608 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1653 = frontier_phi_14_12_ladder;
        }
        float _1854;
        if (_1622 > 0.0)
        {
            _1854 = abs((1.0 - _1612) / _1622);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1612 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1854 = frontier_phi_23_19_ladder;
        }
        float _2097;
        if (_1625 > 0.0)
        {
            _2097 = abs((1.0 - _1616) / _1625);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1616 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2097 = frontier_phi_35_30_ladder;
        }
        float _2099 = isnan(_1854) ? _1653 : (isnan(_1653) ? _1854 : min(_1653, _1854));
        float _2100 = isnan(_2097) ? _2099 : (isnan(_2099) ? _2097 : min(_2099, _2097));
        float _2104 = (_2100 * _1619) + _1608;
        float _2105 = (_2100 * _1622) + _1612;
        float _2106 = (_2100 * _1625) + _1616;
        float _2107 = _2100 * 9.9999997473787516355514526367188e-05;
        float _2109 = (-1.0) - _2107;
        float _2111 = _2107 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2106 > _2111) || ((_2106 < _2109) || ((_2105 > _2111) || ((_2105 < _2109) || ((_2104 < _2109) || (_2104 > _2111))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2230 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2106, cbModelParam._m0[9u].z, fma(_2105, cbModelParam._m0[9u].y, _2104 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2106, cbModelParam._m0[10u].z, fma(_2105, cbModelParam._m0[10u].y, _2104 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2106, cbModelParam._m0[11u].z, fma(_2105, cbModelParam._m0[11u].y, _2104 * cbModelParam._m0[11u].x))), _1560);
            frontier_phi_13_35_ladder = _2230.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2230.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2230.x * cbModelParam._m0[1u].y;
        }
        _1641 = frontier_phi_13_35_ladder_2;
        _1643 = frontier_phi_13_35_ladder_1;
        _1645 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_752, _753, _754), _1560);
        _1641 = _1629.x * cbModelParam._m0[1u].y;
        _1643 = _1629.y * cbModelParam._m0[1u].y;
        _1645 = _1629.z * cbModelParam._m0[1u].y;
    }
    float _1649 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _596);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1649 : min(cbModelParam._m0[25u].w, _1649));
    float _1740;
    float _1742;
    float _1744;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1704 = fma(_813, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805)) + cbModelParam._m0[21u].w;
        float _1708 = fma(_813, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805)) + cbModelParam._m0[22u].w;
        float _1712 = fma(_813, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805)) + cbModelParam._m0[23u].w;
        float _1715 = fma(_754, cbModelParam._m0[21u].z, fma(_753, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _752));
        float _1718 = fma(_754, cbModelParam._m0[22u].z, fma(_753, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _752));
        float _1721 = fma(_754, cbModelParam._m0[23u].z, fma(_753, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _752));
        float _1859;
        if (_1715 > 0.0)
        {
            _1859 = abs((1.0 - _1704) / _1715);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1704 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1859 = frontier_phi_25_21_ladder;
        }
        float _2124;
        if (_1718 > 0.0)
        {
            _2124 = abs((1.0 - _1708) / _1718);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1708 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2124 = frontier_phi_37_32_ladder;
        }
        float _2329;
        if (_1721 > 0.0)
        {
            _2329 = abs((1.0 - _1712) / _1721);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1712 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2329 = frontier_phi_46_43_ladder;
        }
        float _2331 = isnan(_2124) ? _1859 : (isnan(_1859) ? _2124 : min(_1859, _2124));
        float _2332 = isnan(_2329) ? _2331 : (isnan(_2331) ? _2329 : min(_2331, _2329));
        float _2336 = (_2332 * _1715) + _1704;
        float _2337 = (_2332 * _1718) + _1708;
        float _2338 = (_2332 * _1721) + _1712;
        float _2339 = _2332 * 9.9999997473787516355514526367188e-05;
        float _2340 = (-1.0) - _2339;
        float _2342 = _2339 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2338 > _2342) || ((_2338 < _2340) || ((_2337 > _2342) || ((_2337 < _2340) || ((_2336 < _2340) || (_2336 > _2342))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2338, cbModelParam._m0[17u].z, fma(_2337, cbModelParam._m0[17u].y, _2336 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2338, cbModelParam._m0[18u].z, fma(_2337, cbModelParam._m0[18u].y, _2336 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2338, cbModelParam._m0[19u].z, fma(_2337, cbModelParam._m0[19u].y, _2336 * cbModelParam._m0[19u].x))), _1650);
            frontier_phi_22_46_ladder = _2537.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2537.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2537.x * cbModelParam._m0[1u].z;
        }
        _1740 = frontier_phi_22_46_ladder_2;
        _1742 = frontier_phi_22_46_ladder_1;
        _1744 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_752, _753, _754), _1650);
        _1740 = _1724.x * cbModelParam._m0[1u].z;
        _1742 = _1724.y * cbModelParam._m0[1u].z;
        _1744 = _1724.z * cbModelParam._m0[1u].z;
    }
    float _1756 = ((((1.0 - _773) * ((_760 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_773 * _760)) * _744;
    float _1757 = _1756 * ((cbModelParam._m0[1u].w * (_1740 - _1641)) + _1641);
    float _1758 = _1756 * ((cbModelParam._m0[1u].w * (_1742 - _1643)) + _1643);
    float _1759 = _1756 * ((cbModelParam._m0[1u].w * (_1744 - _1645)) + _1645);
    float _1762 = fma(_1759, cbSceneParam._m0[89u].z, fma(_1758, cbSceneParam._m0[89u].y, _1757 * cbSceneParam._m0[89u].x));
    float _1765 = fma(_1759, cbSceneParam._m0[90u].z, fma(_1758, cbSceneParam._m0[90u].y, _1757 * cbSceneParam._m0[90u].x));
    float _1768 = fma(_1759, cbSceneParam._m0[91u].z, fma(_1758, cbSceneParam._m0[91u].y, _1757 * cbSceneParam._m0[91u].x));
    uvec4 _1778 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1780 = _1778.x * 14u;
    uint _1781 = _1780 + 13u;
    float _1788 = _744 + (-1.0);
    float _1793 = (cbLight._m0[_1781].x * _1788) + 1.0;
    float _1794 = (cbLight._m0[_1781].y * _1788) + 1.0;
    float _1795 = (cbLight._m0[_1781].z * _1788) + 1.0;
    float _1796 = (cbLight._m0[_1781].w * _1788) + 1.0;
    uint _1797 = _1780 + 5u;
    float _1803 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
    uint _1807 = _1780 + 4u;
    float _1813 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
    uint _1817 = _1780 | 1u;
    float _1828 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_593, _594, _595));
    float _1831 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_593, _594, _595));
    float _3932 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _3943 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _1836 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.3183098733425140380859375;
    float _1838 = (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * 0.3183098733425140380859375;
    float _1845 = ((cbLight._m0[_1797].x * _1803) * _1838) + ((cbLight._m0[_1807].x * _1813) * _1836);
    float _1846 = ((_1803 * cbLight._m0[_1797].y) * _1838) + ((_1813 * cbLight._m0[_1807].y) * _1836);
    float _1847 = ((_1803 * cbLight._m0[_1797].z) * _1838) + ((_1813 * cbLight._m0[_1807].z) * _1836);
    uvec4 _1851 = floatBitsToUint(cbLight._m0[_1780 + 12u]);
    bool _1853 = _1851.x == 0u;
    float _1864;
    float _1866;
    float _1868;
    if (_1853)
    {
        _1864 = _1845;
        _1866 = _1846;
        _1868 = _1847;
    }
    else
    {
        uint _1872 = _1780 + 6u;
        float _1888 = (dot(vec3(cbLight._m0[_1780 + 2u].xyz), vec3(_593, _594, _595)) * 0.5) + 0.5;
        float _1889 = _1888 * _1888;
        float _3954 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1891 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
        _1864 = (((cbLight._m0[_1872].x * 0.3183098733425140380859375) * _1890) * _1891) + _1845;
        _1866 = (((cbLight._m0[_1872].y * 0.3183098733425140380859375) * _1890) * _1891) + _1846;
        _1868 = (((cbLight._m0[_1872].z * 0.3183098733425140380859375) * _1890) * _1891) + _1847;
    }
    bool _1871 = _1851.y == 0u;
    float _1909;
    float _1911;
    float _1913;
    if (_1871)
    {
        _1909 = _1864;
        _1911 = _1866;
        _1913 = _1868;
    }
    else
    {
        uint _2068 = _1780 + 7u;
        float _2084 = (dot(vec3(cbLight._m0[_1780 + 3u].xyz), vec3(_593, _594, _595)) * 0.5) + 0.5;
        float _2085 = _2084 * _2084;
        float _3970 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2086 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _2087 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _1909 = (((cbLight._m0[_2068].x * 0.3183098733425140380859375) * _2086) * _2087) + _1864;
        _1911 = (((cbLight._m0[_2068].y * 0.3183098733425140380859375) * _2086) * _2087) + _1866;
        _1913 = (((cbLight._m0[_2068].z * 0.3183098733425140380859375) * _2086) * _2087) + _1868;
    }
    uint _1916 = _1780 + 8u;
    float _1929 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1780].w)) * _596) * 0.949999988079071044921875);
    float _1930 = _1929 * _1929;
    float _1931 = cbLight._m0[_1780].x + _673;
    float _1932 = cbLight._m0[_1780].y + _674;
    float _1933 = cbLight._m0[_1780].z + _675;
    float _1937 = inversesqrt(dot(vec3(_1931, _1932, _1933), vec3(_1931, _1932, _1933)));
    float _1938 = _1937 * _1931;
    float _1939 = _1937 * _1932;
    float _1940 = _1937 * _1933;
    float _1941 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_1780].xyz));
    float _3986 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _1945 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _1946 = dot(vec3(_593, _594, _595), vec3(_1938, _1939, _1940));
    float _4008 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1949 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _1950 = dot(vec3(cbLight._m0[_1780].xyz), vec3(_1938, _1939, _1940));
    float _4019 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1954 = _1930 * _1930;
    float _1958 = ((_1949 * _1949) * (_1954 + (-1.0))) + 1.0;
    float _1969 = (exp2(log2(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1970 = 1.0 - _1930;
    float _1981 = (0.5 / (((_1945 * ((_1944 * _1970) + _1930)) + 9.9999999392252902907785028219223e-09) + (((_1945 * _1970) + _1930) * _1944))) * _1944;
    float _4030 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1983 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1954 / ((_1958 * _1958) * 3.141590118408203125));
    uint _1994 = _1780 + 9u;
    float _2005 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1817].w)) * _596) * 0.949999988079071044921875);
    float _2006 = _2005 * _2005;
    float _2007 = cbLight._m0[_1817].x + _673;
    float _2008 = cbLight._m0[_1817].y + _674;
    float _2009 = cbLight._m0[_1817].z + _675;
    float _2013 = inversesqrt(dot(vec3(_2007, _2008, _2009), vec3(_2007, _2008, _2009)));
    float _2014 = _2013 * _2007;
    float _2015 = _2013 * _2008;
    float _2016 = _2013 * _2009;
    float _2017 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_1817].xyz));
    float _4041 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _2021 = dot(vec3(_593, _594, _595), vec3(_2014, _2015, _2016));
    float _4052 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _2025 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_2014, _2015, _2016));
    float _4063 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2029 = _2006 * _2006;
    float _2033 = ((_2024 * _2024) * (_2029 + (-1.0))) + 1.0;
    float _2042 = (exp2(log2(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2043 = 1.0 - _2006;
    float _2053 = (0.5 / (((_1945 * ((_2020 * _2043) + _2006)) + 9.9999999392252902907785028219223e-09) + (((_1945 * _2043) + _2006) * _2020))) * _2020;
    float _4074 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2055 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_2029 / ((_2033 * _2033) * 3.141590118408203125));
    float _2065 = (((_2042 * cbLight._m0[_1994].x) * _2055) * _1803) + (((_1969 * cbLight._m0[_1916].x) * _1983) * _1813);
    float _2066 = (((_2042 * cbLight._m0[_1994].y) * _2055) * _1803) + (((_1969 * cbLight._m0[_1916].y) * _1983) * _1813);
    float _2067 = (((_2042 * cbLight._m0[_1994].z) * _2055) * _1803) + (((_1969 * cbLight._m0[_1916].z) * _1983) * _1813);
    float _2129;
    float _2131;
    float _2133;
    if (_1853)
    {
        _2129 = _2065;
        _2131 = _2066;
        _2133 = _2067;
    }
    else
    {
        uint _2135 = _1780 + 2u;
        uint _2139 = _1780 + 10u;
        float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2135].w)) * _596) * 0.949999988079071044921875);
        float _2154 = _2153 * _2153;
        float _2155 = cbLight._m0[_2135].x + _673;
        float _2156 = cbLight._m0[_2135].y + _674;
        float _2157 = cbLight._m0[_2135].z + _675;
        float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
        float _2162 = _2161 * _2155;
        float _2163 = _2161 * _2156;
        float _2164 = _2161 * _2157;
        float _2165 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_2135].xyz));
        float _4085 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2168 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2169 = dot(vec3(_593, _594, _595), vec3(_2162, _2163, _2164));
        float _4096 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2172 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _2173 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2162, _2163, _2164));
        float _4107 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2177 = _2154 * _2154;
        float _2181 = ((_2172 * _2172) * (_2177 + (-1.0))) + 1.0;
        float _2190 = (exp2(log2(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2191 = 1.0 - _2154;
        float _2201 = (0.5 / (((_1945 * ((_2168 * _2191) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_1945 * _2191) + _2154) * _2168))) * _2168;
        float _4118 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2203 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2177 / ((_2181 * _2181) * 3.141590118408203125));
        float _2204 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
        _2129 = (((_2190 * cbLight._m0[_2139].x) * _2203) * _2204) + _2065;
        _2131 = (((_2190 * cbLight._m0[_2139].y) * _2203) * _2204) + _2066;
        _2133 = (((_2190 * cbLight._m0[_2139].z) * _2203) * _2204) + _2067;
    }
    float _2239;
    float _2241;
    float _2243;
    if (_1871)
    {
        _2239 = _2129;
        _2241 = _2131;
        _2243 = _2133;
    }
    else
    {
        uint _2250 = _1780 + 3u;
        uint _2254 = _1780 + 11u;
        float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2250].w)) * _596) * 0.949999988079071044921875);
        float _2269 = _2268 * _2268;
        float _2270 = cbLight._m0[_2250].x + _673;
        float _2271 = cbLight._m0[_2250].y + _674;
        float _2272 = cbLight._m0[_2250].z + _675;
        float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
        float _2277 = _2276 * _2270;
        float _2278 = _2276 * _2271;
        float _2279 = _2276 * _2272;
        float _2280 = dot(vec3(_593, _594, _595), vec3(cbLight._m0[_2250].xyz));
        float _4134 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2283 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2284 = dot(vec3(_593, _594, _595), vec3(_2277, _2278, _2279));
        float _4145 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2287 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _2288 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_2277, _2278, _2279));
        float _4156 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2292 = _2269 * _2269;
        float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
        float _2305 = (exp2(log2(1.0 - (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2306 = 1.0 - _2269;
        float _2316 = (0.5 / (((_1945 * ((_2283 * _2306) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_1945 * _2306) + _2269) * _2283))) * _2283;
        float _4167 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2318 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
        float _2319 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _2239 = (((_2305 * cbLight._m0[_2254].x) * _2318) * _2319) + _2129;
        _2241 = (((_2305 * cbLight._m0[_2254].y) * _2318) * _2319) + _2131;
        _2243 = (((_2305 * cbLight._m0[_2254].z) * _2318) * _2319) + _2133;
    }
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    float _2464;
    if (_1778.y == 0u)
    {
        float _2394 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2395 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2394;
        float _2396 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2394;
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2394;
        uvec4 _2409 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2410 = _2409.x;
        uint _2421 = uint((float(_2409.y) * floor(float(uint(cbSceneParam._m0[85u].y * _682) / _2410))) + floor(float(uint(cbSceneParam._m0[85u].x * _681) / _2410)));
        float _2431 = (log2(_2397 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2432 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        uint _2435 = uint(isnan(14.0) ? _2432 : (isnan(_2432) ? 14.0 : min(_2432, 14.0)));
        uvec4 _2440 = texelFetch(g_lightClusterGridBuffer, int(((_2435 << 2u) + (_2421 << 6u)) >> 2u));
        uint _2441 = _2440.x;
        uint _2442 = _2409.z;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        if (((((1u << ((_2442 >> 4u) & 15u)) + 4294967295u) & _2441) == 0u) || ((_2442 & 240u) == 0u))
        {
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
        }
        else
        {
            float _2543;
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2687 = 0.0;
            float _2688 = 0.0;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            uint _2693 = 0u;
            uint _2702;
            bool _2703;
            for (;;)
            {
                _2702 = texelFetch(g_lightClassification, int((((_2435 << 5u) + (_2421 << 9u)) + (_2693 << 2u)) >> 2u)).x;
                _2703 = _2702 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2703)
                {
                    frontier_phi_61_pred = _2687;
                    frontier_phi_61_pred_1 = _2692;
                    frontier_phi_61_pred_2 = _2691;
                    frontier_phi_61_pred_3 = _2690;
                    frontier_phi_61_pred_4 = _2689;
                    frontier_phi_61_pred_5 = _2688;
                }
                else
                {
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    uint _2817;
                    _2811 = _2687;
                    _2812 = _2688;
                    _2813 = _2689;
                    _2814 = _2690;
                    _2815 = _2691;
                    _2816 = _2692;
                    _2817 = _2702;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    for (;;)
                    {
                        uint _2821 = uint(findLSB(_2817)) + (_2693 << 5u);
                        uint _2818 = (_2817 + 4294967295u) & _2817;
                        uint _2823 = _2821 * 48u;
                        vec4 _2837 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2823)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 3u)).x));
                        uint _2843 = (_2821 * 48u) + 4u;
                        vec4 _2856 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 3u)).x));
                        uint _2862 = (_2821 * 48u) + 8u;
                        vec3 _2873 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2862)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 2u)).x));
                        float _2877 = _2837.x - _2395;
                        float _2878 = _2837.y - _2396;
                        float _2879 = _2837.z - _2397;
                        float _2880 = dot(vec3(_2877, _2878, _2879), vec3(_2877, _2878, _2879));
                        float _2883 = inversesqrt(_2880);
                        float _2884 = _2883 * _2877;
                        float _2885 = _2883 * _2878;
                        float _2886 = _2883 * _2879;
                        float _2887 = dot(vec3(_700, _703, _706), vec3(_2884, _2885, _2886));
                        float _2892 = 1.0 - (_2880 * _2837.w);
                        float _4193 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2893 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                        float _2894 = sqrt(_2880) * _2856.w;
                        float _2897 = 1.39999997615814208984375 / (_2894 + 1.39999997615814208984375);
                        float _2898 = _2897 * _2897;
                        float _2901 = ((1.0 - _2898) * _2887) + _2898;
                        float _2904 = _2894 * _2894;
                        float _2908 = ((isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0))) * _2893) / ((_2904 * 0.699999988079071044921875) + 1.0);
                        float _2912 = (-0.0) - _2395;
                        float _2913 = (-0.0) - _2396;
                        float _2914 = (-0.0) - _2397;
                        float _2918 = inversesqrt(dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914)));
                        float _2919 = _2918 * _2912;
                        float _2920 = _2918 * _2913;
                        float _2921 = _2918 * _2914;
                        float _2929 = exp2(log2(1.0 / ((_2904 * 3.5) + 5.0)) * 0.25);
                        float _2930 = 1.0 - _760;
                        float _2937 = sqrt(1.0 - ((1.0 - (_2930 * _2930)) * (1.0 - (_2929 * _2929))));
                        float _2938 = _2937 * _2937;
                        float _2939 = _2938 * _2938;
                        float _2940 = _2919 + _2884;
                        float _2941 = _2920 + _2885;
                        float _2942 = _2921 + _2886;
                        float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
                        float _2950 = dot(vec3(_700, _703, _706), vec3(_2919, _2920, _2921));
                        float _4209 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2953 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2954 = dot(vec3(_700, _703, _706), vec3(_2946 * _2940, _2946 * _2941, _2946 * _2942));
                        float _4220 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2957 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                        float _2961 = ((_2957 * _2957) * (_2939 + (-1.0))) + 1.0;
                        float _2962 = _2897 * _2938;
                        float _2963 = _2962 * _2962;
                        float _2966 = ((1.0 - _2963) * _2887) + _2963;
                        float _4231 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2967 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                        float _2968 = 1.0 - _2938;
                        float _2978 = (0.5 / (((_2967 * ((_2953 * _2968) + _2938)) + 9.9999999392252902907785028219223e-09) + (((_2967 * _2968) + _2938) * _2953))) * _2967;
                        float _4242 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2989 = (((_2939 * 3.1415927410125732421875) * (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) / ((_2961 * _2961) * ((_2904 * 2.1991131305694580078125) + 3.141590118408203125))) * _2893;
                        _2746 = (_2908 * _2856.x) + _2814;
                        _2747 = (_2908 * _2856.y) + _2815;
                        _2748 = (_2908 * _2856.z) + _2816;
                        _2743 = (_2989 * _2873.x) + _2811;
                        _2744 = (_2989 * _2873.y) + _2812;
                        _2745 = (_2989 * _2873.z) + _2813;
                        if (_2818 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2811 = _2743;
                            _2812 = _2744;
                            _2813 = _2745;
                            _2814 = _2746;
                            _2815 = _2747;
                            _2816 = _2748;
                            _2817 = _2818;
                        }
                    }
                    frontier_phi_61_pred = _2743;
                    frontier_phi_61_pred_1 = _2748;
                    frontier_phi_61_pred_2 = _2747;
                    frontier_phi_61_pred_3 = _2746;
                    frontier_phi_61_pred_4 = _2745;
                    frontier_phi_61_pred_5 = _2744;
                }
                _2543 = frontier_phi_61_pred;
                _2553 = frontier_phi_61_pred_1;
                _2551 = frontier_phi_61_pred_2;
                _2549 = frontier_phi_61_pred_3;
                _2547 = frontier_phi_61_pred_4;
                _2545 = frontier_phi_61_pred_5;
                uint _2694 = _2693 + 1u;
                if (_2694 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2687 = _2543;
                    _2688 = _2545;
                    _2689 = _2547;
                    _2690 = _2549;
                    _2691 = _2551;
                    _2692 = _2553;
                    _2693 = _2694;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
        }
        uvec4 _2556 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2557 = _2556.z;
        uint _2559 = (_2557 >> 8u) & 15u;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        if (((4294967295u << _2559) & _2441) == 0u)
        {
            _2655 = _2542;
            _2657 = _2544;
            _2659 = _2546;
            _2661 = _2548;
            _2663 = _2550;
            _2665 = _2552;
        }
        else
        {
            float _2680 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
            float _2681 = _2680 * _2395;
            float _2682 = _2680 * _2396;
            float _2683 = _2680 * _2397;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2559 < ((_2557 >> 12u) & 15u))
            {
                float _2656;
                float _2658;
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2794 = _2542;
                float _2795 = _2544;
                float _2796 = _2546;
                float _2797 = _2548;
                float _2798 = _2550;
                float _2799 = _2552;
                uint _2800 = _2559;
                uint _2809;
                bool _2810;
                for (;;)
                {
                    _2809 = texelFetch(g_lightClassification, int((((_2435 << 5u) + (_2421 << 9u)) + (_2800 << 2u)) >> 2u)).x;
                    _2810 = _2809 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2810)
                    {
                        frontier_phi_67_pred = _2797;
                        frontier_phi_67_pred_1 = _2798;
                        frontier_phi_67_pred_2 = _2799;
                        frontier_phi_67_pred_3 = _2796;
                        frontier_phi_67_pred_4 = _2795;
                        frontier_phi_67_pred_5 = _2794;
                    }
                    else
                    {
                        float _2994;
                        float _2995;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3007 = _2794;
                        float _3008 = _2795;
                        float _3009 = _2796;
                        float _3010 = _2797;
                        float _3011 = _2798;
                        float _3012 = _2799;
                        uint _3013 = _2809;
                        uint _3014;
                        vec4 _3039;
                        float _3040;
                        vec4 _3055;
                        vec3 _3067;
                        vec4 _3082;
                        vec4 _3097;
                        float _3143;
                        bool _3144;
                        for (;;)
                        {
                            uint _3024 = ((_2800 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3013));
                            _3014 = (_3013 + 4294967295u) & _3013;
                            uint _3026 = _3024 * 40u;
                            _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            _3040 = _3039.w;
                            uint _3042 = (_3024 * 40u) + 4u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            uint _3057 = (_3024 * 40u) + 8u;
                            _3067 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x));
                            uint _3069 = (_3024 * 40u) + 16u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3084 = (_3024 * 40u) + 20u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3099 = (_3024 * 40u) + 24u;
                            vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3118 = (_3024 * 40u) + 28u;
                            vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            _3143 = fma(_2397, _3131.z, fma(_2396, _3131.y, _3131.x * _2395)) + _3131.w;
                            _3144 = !((fma(_2397, _3112.z, fma(_2396, _3112.y, _3112.x * _2395)) + _3112.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3144)
                            {
                                float _3171 = _3039.x - _2395;
                                float _3172 = _3039.y - _2396;
                                float _3173 = _3039.z - _2397;
                                float _3174 = dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173));
                                float _3177 = inversesqrt(_3174);
                                float _3178 = _3177 * _3171;
                                float _3179 = _3177 * _3172;
                                float _3180 = _3177 * _3173;
                                float _3184 = 1.0 - (_3174 / (_3040 * _3040));
                                float _4253 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3185 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                                float _3189 = sqrt(_3174) * _3055.w;
                                float _3191 = 1.39999997615814208984375 / (_3189 + 1.39999997615814208984375);
                                float _3192 = _3191 * _3191;
                                float _3195 = ((1.0 - _3192) * dot(vec3(_3178, _3179, _3180), vec3(_700, _703, _706))) + _3192;
                                float _3198 = _3189 * _3189;
                                float _3202 = (fma(_2397, _3082.z, fma(_2396, _3082.y, _3082.x * _2395)) + _3082.w) / _3143;
                                float _3203 = (fma(_2397, _3097.z, fma(_2396, _3097.y, _3097.x * _2395)) + _3097.w) / _3143;
                                float _3207 = 1.0 - dot(vec2(_3202, _3203), vec2(_3202, _3203));
                                float _4269 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3208 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3209 = _3208 * (((isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0))) * _3185) / ((_3198 * 0.699999988079071044921875) + 1.0));
                                float _3221 = exp2(log2(1.0 / ((_3198 * 3.5) + 5.0)) * 0.25);
                                float _3222 = 1.0 - _760;
                                float _3229 = sqrt(1.0 - ((1.0 - (_3222 * _3222)) * (1.0 - (_3221 * _3221))));
                                float _3230 = _3229 * _3229;
                                float _3231 = _3230 * _3230;
                                float _3232 = _3178 - _2681;
                                float _3233 = _3179 - _2682;
                                float _3234 = _3180 - _2683;
                                float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                                float _3242 = dot(vec3(_700, _703, _706), vec3((-0.0) - _2681, (-0.0) - _2682, (-0.0) - _2683));
                                float _4280 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3245 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3246 = dot(vec3(_700, _703, _706), vec3(_3238 * _3232, _3238 * _3233, _3238 * _3234));
                                float _4291 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3249 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3253 = ((_3249 * _3249) * (_3231 + (-1.0))) + 1.0;
                                float _3254 = _3191 * _3230;
                                float _3255 = _3254 * _3254;
                                float _3261 = ((1.0 - _3255) * dot(vec3(_700, _703, _706), vec3(_3178, _3179, _3180))) + _3255;
                                float _4302 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                                float _3263 = 1.0 - _3230;
                                float _3273 = (0.5 / (((_3262 * ((_3245 * _3263) + _3230)) + 9.9999999392252902907785028219223e-09) + (((_3262 * _3263) + _3230) * _3245))) * _3262;
                                float _4313 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3283 = (_3208 * _3185) * (((_3231 * 3.1415927410125732421875) * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) / ((_3253 * _3253) * ((_3198 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3283 * _3067.x;
                                frontier_phi_73_pred_1 = _3283 * _3067.y;
                                frontier_phi_73_pred_2 = _3209 * _3055.z;
                                frontier_phi_73_pred_3 = _3209 * _3055.y;
                                frontier_phi_73_pred_4 = _3209 * _3055.x;
                                frontier_phi_73_pred_5 = _3283 * _3067.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3287 = frontier_phi_73_pred;
                            _3288 = frontier_phi_73_pred_1;
                            _3292 = frontier_phi_73_pred_2;
                            _3291 = frontier_phi_73_pred_3;
                            _3290 = frontier_phi_73_pred_4;
                            _3289 = frontier_phi_73_pred_5;
                            _2997 = _3290 + _3010;
                            _2998 = _3291 + _3011;
                            _2999 = _3292 + _3012;
                            _2994 = _3287 + _3007;
                            _2995 = _3288 + _3008;
                            _2996 = _3289 + _3009;
                            if (_3014 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3014;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2997;
                        frontier_phi_67_pred_1 = _2998;
                        frontier_phi_67_pred_2 = _2999;
                        frontier_phi_67_pred_3 = _2996;
                        frontier_phi_67_pred_4 = _2995;
                        frontier_phi_67_pred_5 = _2994;
                    }
                    _2662 = frontier_phi_67_pred;
                    _2664 = frontier_phi_67_pred_1;
                    _2666 = frontier_phi_67_pred_2;
                    _2660 = frontier_phi_67_pred_3;
                    _2658 = frontier_phi_67_pred_4;
                    _2656 = frontier_phi_67_pred_5;
                    uint _2801 = _2800 + 1u;
                    if (_2801 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2794 = _2656;
                        _2795 = _2658;
                        _2796 = _2660;
                        _2797 = _2662;
                        _2798 = _2664;
                        _2799 = _2666;
                        _2800 = _2801;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2664;
                frontier_phi_55_56_ladder_1 = _2666;
                frontier_phi_55_56_ladder_2 = _2662;
                frontier_phi_55_56_ladder_3 = _2660;
                frontier_phi_55_56_ladder_4 = _2658;
                frontier_phi_55_56_ladder_5 = _2656;
            }
            else
            {
                frontier_phi_55_56_ladder = _2550;
                frontier_phi_55_56_ladder_1 = _2552;
                frontier_phi_55_56_ladder_2 = _2548;
                frontier_phi_55_56_ladder_3 = _2546;
                frontier_phi_55_56_ladder_4 = _2544;
                frontier_phi_55_56_ladder_5 = _2542;
            }
            _2655 = frontier_phi_55_56_ladder_5;
            _2657 = frontier_phi_55_56_ladder_4;
            _2659 = frontier_phi_55_56_ladder_3;
            _2661 = frontier_phi_55_56_ladder_2;
            _2663 = frontier_phi_55_56_ladder;
            _2665 = frontier_phi_55_56_ladder_1;
        }
        float _2670 = isnan(1.0) ? _744 : (isnan(_744) ? 1.0 : min(_744, 1.0));
        _2454 = (_2670 * _2661) + _1909;
        _2456 = (_2670 * _2663) + _1911;
        _2458 = (_2670 * _2665) + _1913;
        _2460 = ((_2655 * 0.039999999105930328369140625) * _2670) + _2239;
        _2462 = ((_2657 * 0.039999999105930328369140625) * _2670) + _2241;
        _2464 = ((_2659 * 0.039999999105930328369140625) * _2670) + _2243;
    }
    else
    {
        _2454 = _1909;
        _2456 = _1911;
        _2458 = _1913;
        _2460 = _2239;
        _2462 = _2241;
        _2464 = _2243;
    }
    float _4329 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4340 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4351 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    uint _2484 = _234 + 6u;
    float _2492 = _681 / cbSceneParam._m0[86u].x;
    float _2493 = _682 / cbSceneParam._m0[86u].y;
    vec4 _2507 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2492, _2493, (log2((isnan(cbSceneParam._m0[77u].w) ? _614 : (isnan(_614) ? cbSceneParam._m0[77u].w : min(_614, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2509 = _2507.x;
    float _2510 = _2507.y;
    float _2511 = _2507.z;
    float _2512 = _2507.w;
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    if (_614 > cbSceneParam._m0[78u].w)
    {
        float _2567 = isnan(_614) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _614 : min(cbSceneParam._m0[80u].w, _614));
        float _2568 = _2567 / _614;
        float _2579 = _2568 * _666;
        float _2580 = _667 * _2568;
        float _2581 = (-0.0) - _2580;
        float _2583 = _2568 * _668;
        float _2585 = (cbSceneParam._m0[77u].w * _2581) / _2567;
        float _2586 = _2585 + cbSceneParam._m0[79u].w;
        float _2587 = cbSceneParam._m0[79u].w - _2580;
        float _2593 = sqrt(((_2579 * _2579) + (_2580 * _2580)) + (_2583 * _2583));
        float _2596 = (1.0 - (cbSceneParam._m0[77u].w / _2567)) * _2593;
        float _2601 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2603 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2756;
        if (abs((_2581 - _2585) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2756 = ((((_2586 > 0.0) ? exp2(_2601 * _2586) : (2.0 - exp2(_2603 * _2586))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2596;
        }
        else
        {
            float _2716 = 1.0 / cbSceneParam._m0[80u].x;
            float _2717 = isnan(_2587) ? _2586 : (isnan(_2586) ? _2587 : max(_2586, _2587));
            float _2718 = isnan(_2587) ? _2586 : (isnan(_2586) ? _2587 : min(_2586, _2587));
            float _2727 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : min(_2717, 0.0));
            float _2728 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : min(_2718, 0.0));
            _2756 = ((abs(_2593 / _2581) * cbSceneParam._m0[80u].y) * ((((_2727 - _2728) * 2.0) - ((exp2(_2601 * (isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0)))) - exp2(_2601 * (isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0))))) * _2716)) - ((exp2(_2603 * _2727) - exp2(_2603 * _2728)) * _2716))) + (_2596 * cbSceneParam._m0[80u].z);
        }
        vec4 _2758 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2492, _2493, 1.0), 0.0);
        float _2767 = exp2((_2756 * (-1.44269502162933349609375)) * (1.0 - _2758.w));
        float _2768 = log2(_2767);
        float _2784 = log2(_2512);
        _2605 = (exp2(_2784 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2768 * cbSceneParam._m0[78u].x)) * _2758.x) / cbSceneParam._m0[78u].x)) + _2509;
        _2607 = (exp2(_2784 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2768 * cbSceneParam._m0[78u].y)) * _2758.y) / cbSceneParam._m0[78u].y)) + _2510;
        _2609 = (exp2(_2784 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2768 * cbSceneParam._m0[78u].z)) * _2758.z) / cbSceneParam._m0[78u].z)) + _2511;
        _2611 = _2767 * _2512;
    }
    else
    {
        _2605 = _2509;
        _2607 = _2510;
        _2609 = _2511;
        _2611 = _2512;
    }
    float _2623 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2624 = _2623 == 3.0;
    float _2625 = log2(_2611);
    float _2632 = exp2(_2625 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2454 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _744))) + ((_2460 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1549)) * cbPerFrame._m0[3u].x));
    float _2633 = exp2(_2625 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2456 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _744))) + ((_2462 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1549)) * cbPerFrame._m0[3u].x));
    float _2634 = exp2(_2625 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2458 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _744))) + ((_2464 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1549)) * cbPerFrame._m0[3u].x));
    float _2643 = (_2623 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2643 * (_2624 ? _2632 : (_2632 + (cbSceneParam._m0[72u].w * _2605)));
    SV_Target.y = _2643 * (_2624 ? _2633 : (_2633 + (cbSceneParam._m0[72u].w * _2607)));
    SV_Target.z = _2643 * (_2624 ? _2634 : (_2634 + (cbSceneParam._m0[72u].w * _2609)));
    SV_Target.w = cbInstanceData._m0[_2484].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2484].w;
}


