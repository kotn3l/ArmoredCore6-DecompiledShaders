#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1302;
float _3662;
float _3663;
float _3664;
float _3665;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _364 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _364) * cbMtdParam._m0[24u].x) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3674 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _389 = (_382 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _390 = (_382 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _391 = (_382 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _409 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _426 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _428 = _426.x;
    float _429 = _426.y;
    float _430 = _426.z;
    float _439 = ((_409.z - _430) * _382) + _430;
    float _442 = ((((_409.x - _428) * _382) + _428) * 2.0) + (-1.0);
    float _444 = ((((_409.y - _429) * _382) + _429) * 2.0) + (-1.0);
    float _445 = dot(vec2(_442, _444), vec2(_442, _444));
    float _3685 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _450 = sqrt(1.0 - (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))));
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _478 = (((_466.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _442;
    float _479 = (((_466.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _444;
    float _482 = fma(_450, _235, fma(_479, _242, _478 * _228));
    float _485 = fma(_450, _236, fma(_479, _243, _478 * _229));
    float _488 = fma(_450, _237, fma(_479, _244, _478 * _230));
    float _492 = inversesqrt(dot(vec3(_482, _485, _488), vec3(_482, _485, _488)));
    vec4 _521 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _523 = _521.x;
    float _524 = 1.0 - _523;
    float _528 = ((_523 - _524) * cbMtdParam._m0[24u].z) + _524;
    float _530 = (cbMtdParam._m0[19u].x + dot(vec4(_492 * _482, _492 * _485, _492 * _488, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_528 * cbMtdParam._m0[21u].z);
    float _3696 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _531 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _533 = (-0.0) - cbMtdParam._m0[24u].y;
    float _535 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _536 = isnan(1.0) ? _535 : (isnan(_535) ? 1.0 : min(_535, 1.0));
    float _543 = _531 - ((_531 * TEXCOORD_8.x) * _536);
    float _544 = _531 - ((_531 * TEXCOORD_8.y) * _536);
    float _545 = _531 - ((_531 * TEXCOORD_8.z) * _536);
    float _552 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _556 = ((isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : min(_552, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _564 = (_556 - (((_528 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _556))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3727 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _569 = ((_543 * (cbMtdParam._m0[17u].x - _389)) * _565) + _389;
    float _570 = ((_544 * (cbMtdParam._m0[17u].y - _390)) * _565) + _390;
    float _571 = ((_545 * (cbMtdParam._m0[17u].z - _391)) * _565) + _391;
    vec4 _583 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _585 = _583.x;
    float _586 = 1.0 - _585;
    float _613 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_585 - _586) * cbMtdParam._m0[24u].w) + _586) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3738 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _614 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _622 = ((((cbMtdParam._m0[10u].x - _569) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _614) + _569;
    float _623 = ((((cbMtdParam._m0[10u].y - _570) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _614) + _570;
    float _624 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _571)) * _614) + _571;
    float _628 = (cbMtdParam._m0[19u].w * (_466.z - _439)) + _439;
    vec4 _642 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _649 = (_642.x * 2.0) + (-1.0);
    float _650 = (_642.y * 2.0) + (-1.0);
    float _651 = dot(vec2(_649, _650), vec2(_649, _650));
    float _3749 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _660 = (((_642.z - _628) * _543) * _565) + _628;
    float _663 = ((cbMtdParam._m0[23u].y - _660) * _614) + _660;
    vec4 _682 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _688 = (_682.x * 2.0) + (-1.0);
    float _689 = (_682.y * 2.0) + (-1.0);
    float _690 = dot(vec2(_688, _689), vec2(_688, _689));
    float _3760 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _710 = (((cbMtdParam._m0[21u].x * _478) + ((_649 - _478) * _543)) * _565) + _478;
    float _711 = (((cbMtdParam._m0[21u].x * _479) + ((_650 - _479) * _544)) * _565) + _479;
    float _712 = (((sqrt(1.0 - (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) - _450) * _545) * _565) + _450;
    float _723 = (((_688 - _710) + (_710 * cbMtdParam._m0[22u].z)) * _614) + _710;
    float _724 = (((_689 - _711) + (_711 * cbMtdParam._m0[22u].z)) * _614) + _711;
    float _725 = ((sqrt(1.0 - (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0)))) - _712) * _614) + _712;
    float _727 = cbMtdParam._m0[22u].x + _466.w;
    float _730 = fma(_725, _235, fma(_724, _242, _723 * _228));
    float _733 = fma(_725, _236, fma(_724, _243, _723 * _229));
    float _736 = fma(_725, _237, fma(_724, _244, _723 * _230));
    float _740 = inversesqrt(dot(vec3(_730, _733, _736), vec3(_730, _733, _736)));
    float _741 = _740 * _730;
    float _742 = _740 * _733;
    float _743 = _740 * _736;
    float _3771 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _744 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _3782 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _3793 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3804 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3815 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _762 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _813 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _803);
    float _814 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _803);
    float _815 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _803);
    float _819 = inversesqrt(dot(vec3(_813, _814, _815), vec3(_813, _814, _815)));
    float _820 = _813 * _819;
    float _821 = _814 * _819;
    float _822 = _815 * _819;
    vec4 _827 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _829 = _827.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _983 = sqrt(((_813 * _813) + (_814 * _814)) + (_815 * _815));
        float _989 = (cbMatDynParam._m0[5u].x * _983) + cbMatDynParam._m0[5u].y;
        float _3826 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _994 = (cbMatDynParam._m0[5u].z * _983) + cbMatDynParam._m0[5u].w;
        float _3837 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) - _990)) + _990) < ((_829 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _840 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _841 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _859 = fma(_743, cbSceneParam._m0[5u].z, fma(_742, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _741));
    float _862 = fma(_743, cbSceneParam._m0[6u].z, fma(_742, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _741));
    float _865 = fma(_743, cbSceneParam._m0[7u].z, fma(_742, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _741));
    uint _878 = _247 + 9u;
    uint _879 = _878 + uint(cbMatDynParam._m0[0u].w);
    float _885 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * cbInstanceData._m0[_879].x;
    float _886 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * cbInstanceData._m0[_879].y;
    float _887 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * cbInstanceData._m0[_879].z;
    float _3848 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _890 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    vec4 _899 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _840, cbSceneParam._m0[86u].y * _841));
    float _903 = ((isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * TEXCOORD_5.w) * _899.x;
    float _904 = dot(vec3(_741, _742, _743), vec3(_820, _821, _822));
    float _907 = _904 * 2.0;
    float _911 = (_907 * _741) - _820;
    float _912 = (_907 * _742) - _821;
    float _913 = (_907 * _743) - _822;
    float _917 = abs(dot(vec3(_820, _821, _822), vec3(_741, _742, _743)));
    float _3881 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _919 = sqrt(_744);
    float _932 = exp2((_919 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_919 * 3.0));
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1301;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1026 = fma(_972, cbModelParam._m0[26u].z, fma(_968, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _964));
        float _1030 = fma(_972, cbModelParam._m0[27u].z, fma(_968, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _964));
        float _1034 = fma(_972, cbModelParam._m0[28u].z, fma(_968, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _964));
        float _1059 = _964 + _741;
        float _1060 = _968 + _742;
        float _1061 = _972 + _743;
        float _1071 = fma(_1061, cbModelParam._m0[26u].z, fma(_1060, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1059)) - _1026;
        float _1072 = fma(_1061, cbModelParam._m0[27u].z, fma(_1060, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1059)) - _1030;
        float _1073 = fma(_1061, cbModelParam._m0[28u].z, fma(_1060, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1059)) - _1034;
        float _1077 = inversesqrt(dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073)));
        float _1090 = ((_1077 * _1071) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1026 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1077 * _1072) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1030 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1077 * _1073) / cbModelParam._m0[34u].z) + ((((((_1034 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        float _1129 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1095.x + (-0.5));
        float _1131 = _1129 * (_1095.y + (-0.5));
        float _1132 = _1129 * (_1095.z + (-0.5));
        float _1139 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1102.x + (-0.5));
        float _1141 = _1139 * (_1102.y + (-0.5));
        float _1142 = _1139 * (_1102.z + (-0.5));
        float _1149 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1109.x + (-0.5));
        float _1151 = _1149 * (_1109.y + (-0.5));
        float _1152 = _1149 * (_1109.z + (-0.5));
        float _1159 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1116.x + (-0.5));
        float _1161 = _1159 * (_1116.y + (-0.5));
        float _1162 = _1159 * (_1116.z + (-0.5));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = _1130 * 0.5;
        float _1167 = _1140 * 0.5;
        float _1168 = _1150 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1183 = (dot(vec3(_741, _742, _743), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1193 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3929 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1195 + 1.0))) + _1200) * _1163;
        float _1210 = _1131 * 0.5;
        float _1211 = _1141 * 0.5;
        float _1212 = _1151 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_741, _742, _743), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3962 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1237 + 1.0))) + _1242) * _1164;
        float _1252 = _1132 * 0.5;
        float _1253 = _1142 * 0.5;
        float _1254 = _1152 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_741, _742, _743), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3995 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1279 + 1.0))) + _1284) * _1165;
        _1301 = _1132;
        _1303 = _1131;
        _1304 = _1130;
        _1305 = _1142;
        _1306 = _1141;
        _1307 = _1140;
        _1308 = _1152;
        _1309 = _1151;
        _1310 = _1150;
        _1311 = _1165;
        _1312 = _1164;
        _1313 = _1163;
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
    }
    else
    {
        _1301 = _1302;
        _1303 = _1302;
        _1304 = _1302;
        _1305 = _1302;
        _1306 = _1302;
        _1307 = _1302;
        _1308 = _1302;
        _1309 = _1302;
        _1310 = _1302;
        _1311 = _1302;
        _1312 = _1302;
        _1313 = _1302;
        _1314 = 0.0;
        _1315 = 0.0;
        _1316 = 0.0;
    }
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1344 = fma(_972, cbModelParam._m0[30u].z, fma(_968, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _964));
        float _1348 = fma(_972, cbModelParam._m0[31u].z, fma(_968, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _964));
        float _1352 = fma(_972, cbModelParam._m0[32u].z, fma(_968, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _964));
        float _1375 = _964 + _741;
        float _1376 = _968 + _742;
        float _1377 = _972 + _743;
        float _1387 = fma(_1377, cbModelParam._m0[30u].z, fma(_1376, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1375)) - _1344;
        float _1388 = fma(_1377, cbModelParam._m0[31u].z, fma(_1376, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1375)) - _1348;
        float _1389 = fma(_1377, cbModelParam._m0[32u].z, fma(_1376, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1375)) - _1352;
        float _1393 = inversesqrt(dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389)));
        float _1406 = ((_1393 * _1387) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1344 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1393 * _1388) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1348 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1393 * _1389) / cbModelParam._m0[35u].z) + ((((((_1352 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        float _1443 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1410.x + (-0.5));
        float _1445 = _1443 * (_1410.y + (-0.5));
        float _1446 = _1443 * (_1410.z + (-0.5));
        float _1453 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1417.x + (-0.5));
        float _1455 = _1453 * (_1417.y + (-0.5));
        float _1456 = _1453 * (_1417.z + (-0.5));
        float _1463 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1424.x + (-0.5));
        float _1465 = _1463 * (_1424.y + (-0.5));
        float _1466 = _1463 * (_1424.z + (-0.5));
        float _1473 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1431.x + (-0.5));
        float _1475 = _1473 * (_1431.y + (-0.5));
        float _1476 = _1473 * (_1431.z + (-0.5));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = _1444 * 0.5;
        float _1481 = _1454 * 0.5;
        float _1482 = _1464 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_741, _742, _743), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4058 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1507 + 1.0))) + _1512) * _1477;
        float _1522 = _1445 * 0.5;
        float _1523 = _1455 * 0.5;
        float _1524 = _1465 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_741, _742, _743), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4091 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1549 + 1.0))) + _1554) * _1478;
        float _1564 = _1446 * 0.5;
        float _1565 = _1456 * 0.5;
        float _1566 = _1466 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_741, _742, _743), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4124 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1591 + 1.0))) + _1596) * _1479;
        _1613 = _1446;
        _1614 = _1445;
        _1615 = _1444;
        _1616 = _1456;
        _1617 = _1455;
        _1618 = _1454;
        _1619 = _1466;
        _1620 = _1465;
        _1621 = _1464;
        _1622 = _1479;
        _1623 = _1478;
        _1624 = _1477;
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
    }
    else
    {
        _1613 = _1302;
        _1614 = _1302;
        _1615 = _1302;
        _1616 = _1302;
        _1617 = _1302;
        _1618 = _1302;
        _1619 = _1302;
        _1620 = _1302;
        _1621 = _1302;
        _1622 = _1302;
        _1623 = _1302;
        _1624 = _1302;
        _1625 = 0.0;
        _1626 = 0.0;
        _1627 = 0.0;
    }
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1314)) + _1314;
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1315)) + _1315;
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1316)) + _1316;
    float _1660 = fma(_1639, cbSceneParam._m0[89u].z, fma(_1638, cbSceneParam._m0[89u].y, _1637 * cbSceneParam._m0[89u].x));
    float _1663 = fma(_1639, cbSceneParam._m0[90u].z, fma(_1638, cbSceneParam._m0[90u].y, _1637 * cbSceneParam._m0[90u].x));
    float _1666 = fma(_1639, cbSceneParam._m0[91u].z, fma(_1638, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1637));
    float _1681 = _911 * 0.5;
    float _1682 = _912 * 0.5;
    float _1683 = _913 * 0.5;
    float _1684 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1687 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1690 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1724;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1697 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1301, _1305, _1308, _1311));
        float _1701 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1303, _1306, _1309, _1312));
        float _1705 = dot(vec4(_1681, _1682, _1683, 1.0), vec4(_1304, _1307, _1310, _1313));
        float _1712 = dot(vec4(cbModelParam._m0[39u]), vec4(_1681, _1682, _1683, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1712) ? 0.0 : (isnan(0.0) ? _1712 : max(0.0, _1712))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1735;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1726 = dot(vec4(cbModelParam._m0[40u]), vec4(_1681, _1682, _1683, 1.0));
        _1735 = dot(vec3(isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1726) ? 0.0 : (isnan(0.0) ? _1726 : max(0.0, _1726))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1735 = 1.0;
    }
    float _1739 = (_1735 * cbModelParam._m0[1u].x) + (_1724 * (1.0 - cbModelParam._m0[1u].x));
    float _1749 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _744);
    float _1750 = isnan(_1749) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1749 : min(cbModelParam._m0[25u].z, _1749));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1798 = fma(_972, cbModelParam._m0[13u].z, fma(_968, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _964)) + cbModelParam._m0[13u].w;
        float _1802 = fma(_972, cbModelParam._m0[14u].z, fma(_968, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _964)) + cbModelParam._m0[14u].w;
        float _1806 = fma(_972, cbModelParam._m0[15u].z, fma(_968, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _964)) + cbModelParam._m0[15u].w;
        float _1809 = fma(_913, cbModelParam._m0[13u].z, fma(_912, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _911));
        float _1812 = fma(_913, cbModelParam._m0[14u].z, fma(_912, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _911));
        float _1815 = fma(_913, cbModelParam._m0[15u].z, fma(_912, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _911));
        float _1843;
        if (_1809 > 0.0)
        {
            _1843 = abs((1.0 - _1798) / _1809);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1798 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1843 = frontier_phi_17_15_ladder;
        }
        float _2044;
        if (_1812 > 0.0)
        {
            _2044 = abs((1.0 - _1802) / _1812);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1802 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2044 = frontier_phi_26_22_ladder;
        }
        float _2287;
        if (_1815 > 0.0)
        {
            _2287 = abs((1.0 - _1806) / _1815);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1806 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2287 = frontier_phi_38_33_ladder;
        }
        float _2289 = isnan(_2044) ? _1843 : (isnan(_1843) ? _2044 : min(_1843, _2044));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1809) + _1798;
        float _2295 = (_2290 * _1812) + _1802;
        float _2296 = (_2290 * _1815) + _1806;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2299 = (-1.0) - _2297;
        float _2301 = _2297 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2296 > _2301) || ((_2296 < _2299) || ((_2295 > _2301) || ((_2295 < _2299) || ((_2294 < _2299) || (_2294 > _2301))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2296, cbModelParam._m0[9u].z, fma(_2295, cbModelParam._m0[9u].y, _2294 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2296, cbModelParam._m0[10u].z, fma(_2295, cbModelParam._m0[10u].y, _2294 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2296, cbModelParam._m0[11u].z, fma(_2295, cbModelParam._m0[11u].y, _2294 * cbModelParam._m0[11u].x))), _1750);
            frontier_phi_16_38_ladder = _2420.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2420.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2420.x * cbModelParam._m0[1u].y;
        }
        _1831 = frontier_phi_16_38_ladder_2;
        _1833 = frontier_phi_16_38_ladder_1;
        _1835 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1819 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_911, _912, _913), _1750);
        _1831 = _1819.x * cbModelParam._m0[1u].y;
        _1833 = _1819.y * cbModelParam._m0[1u].y;
        _1835 = _1819.z * cbModelParam._m0[1u].y;
    }
    float _1839 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _744);
    float _1840 = isnan(_1839) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1839 : min(cbModelParam._m0[25u].w, _1839));
    float _1930;
    float _1932;
    float _1934;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1894 = fma(_972, cbModelParam._m0[21u].z, fma(_968, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _964)) + cbModelParam._m0[21u].w;
        float _1898 = fma(_972, cbModelParam._m0[22u].z, fma(_968, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _964)) + cbModelParam._m0[22u].w;
        float _1902 = fma(_972, cbModelParam._m0[23u].z, fma(_968, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _964)) + cbModelParam._m0[23u].w;
        float _1905 = fma(_913, cbModelParam._m0[21u].z, fma(_912, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _911));
        float _1908 = fma(_913, cbModelParam._m0[22u].z, fma(_912, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _911));
        float _1911 = fma(_913, cbModelParam._m0[23u].z, fma(_912, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _911));
        float _2049;
        if (_1905 > 0.0)
        {
            _2049 = abs((1.0 - _1894) / _1905);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1894 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2049 = frontier_phi_28_24_ladder;
        }
        float _2314;
        if (_1908 > 0.0)
        {
            _2314 = abs((1.0 - _1898) / _1908);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1898 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2314 = frontier_phi_40_35_ladder;
        }
        float _2519;
        if (_1911 > 0.0)
        {
            _2519 = abs((1.0 - _1902) / _1911);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1902 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2519 = frontier_phi_49_46_ladder;
        }
        float _2521 = isnan(_2314) ? _2049 : (isnan(_2049) ? _2314 : min(_2049, _2314));
        float _2522 = isnan(_2519) ? _2521 : (isnan(_2521) ? _2519 : min(_2521, _2519));
        float _2526 = (_2522 * _1905) + _1894;
        float _2527 = (_2522 * _1908) + _1898;
        float _2528 = (_2522 * _1911) + _1902;
        float _2529 = _2522 * 9.9999997473787516355514526367188e-05;
        float _2530 = (-1.0) - _2529;
        float _2532 = _2529 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2528 > _2532) || ((_2528 < _2530) || ((_2527 > _2532) || ((_2527 < _2530) || ((_2526 < _2530) || (_2526 > _2532))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2727 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2528, cbModelParam._m0[17u].z, fma(_2527, cbModelParam._m0[17u].y, _2526 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2528, cbModelParam._m0[18u].z, fma(_2527, cbModelParam._m0[18u].y, _2526 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2528, cbModelParam._m0[19u].z, fma(_2527, cbModelParam._m0[19u].y, _2526 * cbModelParam._m0[19u].x))), _1840);
            frontier_phi_25_49_ladder = _2727.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2727.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2727.x * cbModelParam._m0[1u].z;
        }
        _1930 = frontier_phi_25_49_ladder_2;
        _1932 = frontier_phi_25_49_ladder_1;
        _1934 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1914 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_911, _912, _913), _1840);
        _1930 = _1914.x * cbModelParam._m0[1u].z;
        _1932 = _1914.y * cbModelParam._m0[1u].z;
        _1934 = _1914.z * cbModelParam._m0[1u].z;
    }
    float _1946 = ((((1.0 - _932) * ((_919 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_932 * _919)) * _903;
    float _1947 = _1946 * ((cbModelParam._m0[1u].w * (_1930 - _1831)) + _1831);
    float _1948 = _1946 * ((cbModelParam._m0[1u].w * (_1932 - _1833)) + _1833);
    float _1949 = _1946 * ((cbModelParam._m0[1u].w * (_1934 - _1835)) + _1835);
    float _1952 = fma(_1949, cbSceneParam._m0[89u].z, fma(_1948, cbSceneParam._m0[89u].y, _1947 * cbSceneParam._m0[89u].x));
    float _1955 = fma(_1949, cbSceneParam._m0[90u].z, fma(_1948, cbSceneParam._m0[90u].y, _1947 * cbSceneParam._m0[90u].x));
    float _1958 = fma(_1949, cbSceneParam._m0[91u].z, fma(_1948, cbSceneParam._m0[91u].y, _1947 * cbSceneParam._m0[91u].x));
    uvec4 _1968 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1970 = _1968.x * 14u;
    uint _1971 = _1970 + 13u;
    float _1978 = _903 + (-1.0);
    float _1983 = (cbLight._m0[_1971].x * _1978) + 1.0;
    float _1984 = (cbLight._m0[_1971].y * _1978) + 1.0;
    float _1985 = (cbLight._m0[_1971].z * _1978) + 1.0;
    float _1986 = (cbLight._m0[_1971].w * _1978) + 1.0;
    uint _1987 = _1970 + 5u;
    float _1993 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
    uint _1997 = _1970 + 4u;
    float _2003 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
    uint _2007 = _1970 | 1u;
    float _2018 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_741, _742, _743));
    float _2021 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_741, _742, _743));
    float _4260 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _4271 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2026 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * 0.3183098733425140380859375;
    float _2028 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * 0.3183098733425140380859375;
    float _2035 = ((cbLight._m0[_1987].x * _1993) * _2028) + ((cbLight._m0[_1997].x * _2003) * _2026);
    float _2036 = ((_1993 * cbLight._m0[_1987].y) * _2028) + ((_2003 * cbLight._m0[_1997].y) * _2026);
    float _2037 = ((_1993 * cbLight._m0[_1987].z) * _2028) + ((_2003 * cbLight._m0[_1997].z) * _2026);
    uvec4 _2041 = floatBitsToUint(cbLight._m0[_1970 + 12u]);
    bool _2043 = _2041.x == 0u;
    float _2054;
    float _2056;
    float _2058;
    if (_2043)
    {
        _2054 = _2035;
        _2056 = _2036;
        _2058 = _2037;
    }
    else
    {
        uint _2062 = _1970 + 6u;
        float _2078 = (dot(vec3(cbLight._m0[_1970 + 2u].xyz), vec3(_741, _742, _743)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _4282 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2081 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2054 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _2035;
        _2056 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _2036;
        _2058 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _2037;
    }
    bool _2061 = _2041.y == 0u;
    float _2099;
    float _2101;
    float _2103;
    if (_2061)
    {
        _2099 = _2054;
        _2101 = _2056;
        _2103 = _2058;
    }
    else
    {
        uint _2258 = _1970 + 7u;
        float _2274 = (dot(vec3(cbLight._m0[_1970 + 3u].xyz), vec3(_741, _742, _743)) * 0.5) + 0.5;
        float _2275 = _2274 * _2274;
        float _4298 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2276 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2277 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2099 = (((cbLight._m0[_2258].x * 0.3183098733425140380859375) * _2276) * _2277) + _2054;
        _2101 = (((cbLight._m0[_2258].y * 0.3183098733425140380859375) * _2276) * _2277) + _2056;
        _2103 = (((cbLight._m0[_2258].z * 0.3183098733425140380859375) * _2276) * _2277) + _2058;
    }
    uint _2106 = _1970 + 8u;
    float _2119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _744) * 0.949999988079071044921875);
    float _2120 = _2119 * _2119;
    float _2121 = cbLight._m0[_1970].x + _820;
    float _2122 = cbLight._m0[_1970].y + _821;
    float _2123 = cbLight._m0[_1970].z + _822;
    float _2127 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
    float _2128 = _2127 * _2121;
    float _2129 = _2127 * _2122;
    float _2130 = _2127 * _2123;
    float _2131 = dot(vec3(_741, _742, _743), vec3(cbLight._m0[_1970].xyz));
    float _4314 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _4325 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _2135 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _2136 = dot(vec3(_741, _742, _743), vec3(_2128, _2129, _2130));
    float _4336 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2140 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2128, _2129, _2130));
    float _4347 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2144 = _2120 * _2120;
    float _2148 = ((_2139 * _2139) * (_2144 + (-1.0))) + 1.0;
    float _2159 = (exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2160 = 1.0 - _2120;
    float _2171 = (0.5 / (((_2135 * ((_2134 * _2160) + _2120)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2160) + _2120) * _2134))) * _2134;
    float _4358 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2173 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2144 / ((_2148 * _2148) * 3.141590118408203125));
    uint _2184 = _1970 + 9u;
    float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2007].w)) * _744) * 0.949999988079071044921875);
    float _2196 = _2195 * _2195;
    float _2197 = cbLight._m0[_2007].x + _820;
    float _2198 = cbLight._m0[_2007].y + _821;
    float _2199 = cbLight._m0[_2007].z + _822;
    float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
    float _2204 = _2203 * _2197;
    float _2205 = _2203 * _2198;
    float _2206 = _2203 * _2199;
    float _2207 = dot(vec3(_741, _742, _743), vec3(cbLight._m0[_2007].xyz));
    float _4369 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2211 = dot(vec3(_741, _742, _743), vec3(_2204, _2205, _2206));
    float _4380 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2215 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_2204, _2205, _2206));
    float _4391 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2219 = _2196 * _2196;
    float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
    float _2232 = (exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2233 = 1.0 - _2196;
    float _2243 = (0.5 / (((_2135 * ((_2210 * _2233) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2233) + _2196) * _2210))) * _2210;
    float _4402 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2245 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
    float _2255 = (((_2232 * cbLight._m0[_2184].x) * _2245) * _1993) + (((_2159 * cbLight._m0[_2106].x) * _2173) * _2003);
    float _2256 = (((_2232 * cbLight._m0[_2184].y) * _2245) * _1993) + (((_2159 * cbLight._m0[_2106].y) * _2173) * _2003);
    float _2257 = (((_2232 * cbLight._m0[_2184].z) * _2245) * _1993) + (((_2159 * cbLight._m0[_2106].z) * _2173) * _2003);
    float _2319;
    float _2321;
    float _2323;
    if (_2043)
    {
        _2319 = _2255;
        _2321 = _2256;
        _2323 = _2257;
    }
    else
    {
        uint _2325 = _1970 + 2u;
        uint _2329 = _1970 + 10u;
        float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2325].w)) * _744) * 0.949999988079071044921875);
        float _2344 = _2343 * _2343;
        float _2345 = cbLight._m0[_2325].x + _820;
        float _2346 = cbLight._m0[_2325].y + _821;
        float _2347 = cbLight._m0[_2325].z + _822;
        float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
        float _2352 = _2351 * _2345;
        float _2353 = _2351 * _2346;
        float _2354 = _2351 * _2347;
        float _2355 = dot(vec3(_741, _742, _743), vec3(cbLight._m0[_2325].xyz));
        float _4413 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2359 = dot(vec3(_741, _742, _743), vec3(_2352, _2353, _2354));
        float _4424 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2362 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2363 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_2352, _2353, _2354));
        float _4435 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2367 = _2344 * _2344;
        float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
        float _2380 = (exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2381 = 1.0 - _2344;
        float _2391 = (0.5 / (((_2135 * ((_2358 * _2381) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2381) + _2344) * _2358))) * _2358;
        float _4446 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2393 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
        float _2394 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2319 = (((_2380 * cbLight._m0[_2329].x) * _2393) * _2394) + _2255;
        _2321 = (((_2380 * cbLight._m0[_2329].y) * _2393) * _2394) + _2256;
        _2323 = (((_2380 * cbLight._m0[_2329].z) * _2393) * _2394) + _2257;
    }
    float _2429;
    float _2431;
    float _2433;
    if (_2061)
    {
        _2429 = _2319;
        _2431 = _2321;
        _2433 = _2323;
    }
    else
    {
        uint _2440 = _1970 + 3u;
        uint _2444 = _1970 + 11u;
        float _2458 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2440].w)) * _744) * 0.949999988079071044921875);
        float _2459 = _2458 * _2458;
        float _2460 = cbLight._m0[_2440].x + _820;
        float _2461 = cbLight._m0[_2440].y + _821;
        float _2462 = cbLight._m0[_2440].z + _822;
        float _2466 = inversesqrt(dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462)));
        float _2467 = _2466 * _2460;
        float _2468 = _2466 * _2461;
        float _2469 = _2466 * _2462;
        float _2470 = dot(vec3(_741, _742, _743), vec3(cbLight._m0[_2440].xyz));
        float _4462 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2474 = dot(vec3(_741, _742, _743), vec3(_2467, _2468, _2469));
        float _4473 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2478 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_2467, _2468, _2469));
        float _4484 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2482 = _2459 * _2459;
        float _2486 = ((_2477 * _2477) * (_2482 + (-1.0))) + 1.0;
        float _2495 = (exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2496 = 1.0 - _2459;
        float _2506 = (0.5 / (((_2135 * ((_2473 * _2496) + _2459)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2496) + _2459) * _2473))) * _2473;
        float _4495 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2508 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2482 / ((_2486 * _2486) * 3.141590118408203125));
        float _2509 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2429 = (((_2495 * cbLight._m0[_2444].x) * _2508) * _2509) + _2319;
        _2431 = (((_2495 * cbLight._m0[_2444].y) * _2508) * _2509) + _2321;
        _2433 = (((_2495 * cbLight._m0[_2444].z) * _2508) * _2509) + _2323;
    }
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    if (_1968.y == 0u)
    {
        float _2584 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2585 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2584;
        float _2586 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2584;
        float _2587 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2584;
        uvec4 _2599 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2600 = _2599.x;
        uint _2611 = uint((float(_2599.y) * floor(float(uint(cbSceneParam._m0[85u].y * _841) / _2600))) + floor(float(uint(cbSceneParam._m0[85u].x * _840) / _2600)));
        float _2621 = (log2(_2587 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2622 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        uint _2625 = uint(isnan(14.0) ? _2622 : (isnan(_2622) ? 14.0 : min(_2622, 14.0)));
        uvec4 _2630 = texelFetch(g_lightClusterGridBuffer, int(((_2625 << 2u) + (_2611 << 6u)) >> 2u));
        uint _2631 = _2630.x;
        uint _2632 = _2599.z;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        if (((((1u << ((_2632 >> 4u) & 15u)) + 4294967295u) & _2631) == 0u) || ((_2632 & 240u) == 0u))
        {
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
            _2742 = 0.0;
        }
        else
        {
            float _2733;
            float _2735;
            float _2737;
            float _2739;
            float _2741;
            float _2743;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            uint _2890 = 0u;
            uint _2899;
            bool _2900;
            for (;;)
            {
                _2899 = texelFetch(g_lightClassification, int((((_2625 << 5u) + (_2611 << 9u)) + (_2890 << 2u)) >> 2u)).x;
                _2900 = _2899 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2900)
                {
                    frontier_phi_66_pred = _2884;
                    frontier_phi_66_pred_1 = _2889;
                    frontier_phi_66_pred_2 = _2888;
                    frontier_phi_66_pred_3 = _2887;
                    frontier_phi_66_pred_4 = _2886;
                    frontier_phi_66_pred_5 = _2885;
                }
                else
                {
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    uint _3035;
                    _3029 = _2884;
                    _3030 = _2885;
                    _3031 = _2886;
                    _3032 = _2887;
                    _3033 = _2888;
                    _3034 = _2889;
                    _3035 = _2899;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    for (;;)
                    {
                        uint _3039 = uint(findLSB(_3035)) + (_2890 << 5u);
                        uint _3036 = (_3035 + 4294967295u) & _3035;
                        uint _3041 = _3039 * 48u;
                        vec4 _3055 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 3u)).x));
                        uint _3061 = (_3039 * 48u) + 4u;
                        vec4 _3074 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 3u)).x));
                        uint _3080 = (_3039 * 48u) + 8u;
                        vec3 _3091 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x));
                        float _3095 = _3055.x - _2585;
                        float _3096 = _3055.y - _2586;
                        float _3097 = _3055.z - _2587;
                        float _3098 = dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097));
                        float _3101 = inversesqrt(_3098);
                        float _3102 = _3101 * _3095;
                        float _3103 = _3101 * _3096;
                        float _3104 = _3101 * _3097;
                        float _3105 = dot(vec3(_859, _862, _865), vec3(_3102, _3103, _3104));
                        float _3110 = 1.0 - (_3098 * _3055.w);
                        float _4521 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3111 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3112 = sqrt(_3098) * _3074.w;
                        float _3115 = 1.39999997615814208984375 / (_3112 + 1.39999997615814208984375);
                        float _3116 = _3115 * _3115;
                        float _3119 = ((1.0 - _3116) * _3105) + _3116;
                        float _3122 = _3112 * _3112;
                        float _3126 = ((isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0))) * _3111) / ((_3122 * 0.699999988079071044921875) + 1.0);
                        float _3130 = (-0.0) - _2585;
                        float _3131 = (-0.0) - _2586;
                        float _3132 = (-0.0) - _2587;
                        float _3136 = inversesqrt(dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132)));
                        float _3137 = _3136 * _3130;
                        float _3138 = _3136 * _3131;
                        float _3139 = _3136 * _3132;
                        float _3147 = exp2(log2(1.0 / ((_3122 * 3.5) + 5.0)) * 0.25);
                        float _3148 = 1.0 - _919;
                        float _3155 = sqrt(1.0 - ((1.0 - (_3148 * _3148)) * (1.0 - (_3147 * _3147))));
                        float _3156 = _3155 * _3155;
                        float _3157 = _3156 * _3156;
                        float _3158 = _3137 + _3102;
                        float _3159 = _3138 + _3103;
                        float _3160 = _3139 + _3104;
                        float _3164 = inversesqrt(dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160)));
                        float _3168 = dot(vec3(_859, _862, _865), vec3(_3137, _3138, _3139));
                        float _4537 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3171 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                        float _3172 = dot(vec3(_859, _862, _865), vec3(_3164 * _3158, _3164 * _3159, _3164 * _3160));
                        float _4548 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3175 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                        float _3179 = ((_3175 * _3175) * (_3157 + (-1.0))) + 1.0;
                        float _3180 = _3115 * _3156;
                        float _3181 = _3180 * _3180;
                        float _3184 = ((1.0 - _3181) * _3105) + _3181;
                        float _4559 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3185 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3186 = 1.0 - _3156;
                        float _3196 = (0.5 / (((_3185 * ((_3171 * _3186) + _3156)) + 9.9999999392252902907785028219223e-09) + (((_3185 * _3186) + _3156) * _3171))) * _3185;
                        float _4570 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3207 = (((_3157 * 3.1415927410125732421875) * (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) / ((_3179 * _3179) * ((_3122 * 2.1991131305694580078125) + 3.141590118408203125))) * _3111;
                        _2959 = (_3126 * _3074.x) + _3032;
                        _2960 = (_3126 * _3074.y) + _3033;
                        _2961 = (_3126 * _3074.z) + _3034;
                        _2956 = (_3207 * _3091.x) + _3029;
                        _2957 = (_3207 * _3091.y) + _3030;
                        _2958 = (_3207 * _3091.z) + _3031;
                        if (_3036 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3029 = _2956;
                            _3030 = _2957;
                            _3031 = _2958;
                            _3032 = _2959;
                            _3033 = _2960;
                            _3034 = _2961;
                            _3035 = _3036;
                        }
                    }
                    frontier_phi_66_pred = _2956;
                    frontier_phi_66_pred_1 = _2961;
                    frontier_phi_66_pred_2 = _2960;
                    frontier_phi_66_pred_3 = _2959;
                    frontier_phi_66_pred_4 = _2958;
                    frontier_phi_66_pred_5 = _2957;
                }
                _2733 = frontier_phi_66_pred;
                _2743 = frontier_phi_66_pred_1;
                _2741 = frontier_phi_66_pred_2;
                _2739 = frontier_phi_66_pred_3;
                _2737 = frontier_phi_66_pred_4;
                _2735 = frontier_phi_66_pred_5;
                uint _2891 = _2890 + 1u;
                if (_2891 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2884 = _2733;
                    _2885 = _2735;
                    _2886 = _2737;
                    _2887 = _2739;
                    _2888 = _2741;
                    _2889 = _2743;
                    _2890 = _2891;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
            _2742 = _2743;
        }
        uvec4 _2746 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2747 = _2746.z;
        uint _2749 = (_2747 >> 8u) & 15u;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        if (((4294967295u << _2749) & _2631) == 0u)
        {
            _2852 = _2732;
            _2854 = _2734;
            _2856 = _2736;
            _2858 = _2738;
            _2860 = _2740;
            _2862 = _2742;
        }
        else
        {
            float _2877 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
            float _2878 = _2877 * _2585;
            float _2879 = _2877 * _2586;
            float _2880 = _2877 * _2587;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2749 < ((_2747 >> 12u) & 15u))
            {
                float _2853;
                float _2855;
                float _2857;
                float _2859;
                float _2861;
                float _2863;
                float _3012 = _2732;
                float _3013 = _2734;
                float _3014 = _2736;
                float _3015 = _2738;
                float _3016 = _2740;
                float _3017 = _2742;
                uint _3018 = _2749;
                uint _3027;
                bool _3028;
                for (;;)
                {
                    _3027 = texelFetch(g_lightClassification, int((((_2625 << 5u) + (_2611 << 9u)) + (_3018 << 2u)) >> 2u)).x;
                    _3028 = _3027 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3028)
                    {
                        frontier_phi_77_pred = _3017;
                        frontier_phi_77_pred_1 = _3016;
                        frontier_phi_77_pred_2 = _3015;
                        frontier_phi_77_pred_3 = _3014;
                        frontier_phi_77_pred_4 = _3013;
                        frontier_phi_77_pred_5 = _3012;
                    }
                    else
                    {
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3234 = _3012;
                        float _3235 = _3013;
                        float _3236 = _3014;
                        float _3237 = _3015;
                        float _3238 = _3016;
                        float _3239 = _3017;
                        uint _3240 = _3027;
                        uint _3241;
                        vec4 _3266;
                        float _3267;
                        vec4 _3282;
                        vec3 _3294;
                        vec4 _3309;
                        vec4 _3325;
                        float _3371;
                        bool _3372;
                        for (;;)
                        {
                            uint _3251 = ((_3018 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3240));
                            _3241 = (_3240 + 4294967295u) & _3240;
                            uint _3253 = _3251 * 40u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            _3267 = _3266.w;
                            uint _3269 = (_3251 * 40u) + 4u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3284 = (_3251 * 40u) + 8u;
                            _3294 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x));
                            uint _3296 = (_3251 * 40u) + 16u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            uint _3312 = (_3251 * 40u) + 20u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3327 = (_3251 * 40u) + 24u;
                            vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3346 = (_3251 * 40u) + 28u;
                            vec4 _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            _3371 = fma(_2587, _3359.z, fma(_2586, _3359.y, _3359.x * _2585)) + _3359.w;
                            _3372 = !((fma(_2587, _3340.z, fma(_2586, _3340.y, _3340.x * _2585)) + _3340.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3372)
                            {
                                float _3399 = _3266.x - _2585;
                                float _3400 = _3266.y - _2586;
                                float _3401 = _3266.z - _2587;
                                float _3402 = dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401));
                                float _3405 = inversesqrt(_3402);
                                float _3406 = _3405 * _3399;
                                float _3407 = _3405 * _3400;
                                float _3408 = _3405 * _3401;
                                float _3412 = 1.0 - (_3402 / (_3267 * _3267));
                                float _4581 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3413 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3417 = sqrt(_3402) * _3282.w;
                                float _3419 = 1.39999997615814208984375 / (_3417 + 1.39999997615814208984375);
                                float _3420 = _3419 * _3419;
                                float _3423 = ((1.0 - _3420) * dot(vec3(_3406, _3407, _3408), vec3(_859, _862, _865))) + _3420;
                                float _3426 = _3417 * _3417;
                                float _3430 = (fma(_2587, _3309.z, fma(_2586, _3309.y, _3309.x * _2585)) + _3309.w) / _3371;
                                float _3431 = (fma(_2587, _3325.z, fma(_2586, _3325.y, _3325.x * _2585)) + _3325.w) / _3371;
                                float _3435 = 1.0 - dot(vec2(_3430, _3431), vec2(_3430, _3431));
                                float _4597 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                                float _3437 = _3436 * (((isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0))) * _3413) / ((_3426 * 0.699999988079071044921875) + 1.0));
                                float _3449 = exp2(log2(1.0 / ((_3426 * 3.5) + 5.0)) * 0.25);
                                float _3450 = 1.0 - _919;
                                float _3457 = sqrt(1.0 - ((1.0 - (_3450 * _3450)) * (1.0 - (_3449 * _3449))));
                                float _3458 = _3457 * _3457;
                                float _3459 = _3458 * _3458;
                                float _3460 = _3406 - _2878;
                                float _3461 = _3407 - _2879;
                                float _3462 = _3408 - _2880;
                                float _3466 = inversesqrt(dot(vec3(_3460, _3461, _3462), vec3(_3460, _3461, _3462)));
                                float _3470 = dot(vec3(_859, _862, _865), vec3((-0.0) - _2878, (-0.0) - _2879, (-0.0) - _2880));
                                float _4608 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3473 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3474 = dot(vec3(_859, _862, _865), vec3(_3466 * _3460, _3466 * _3461, _3466 * _3462));
                                float _4619 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3477 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3481 = ((_3477 * _3477) * (_3459 + (-1.0))) + 1.0;
                                float _3482 = _3419 * _3458;
                                float _3483 = _3482 * _3482;
                                float _3489 = ((1.0 - _3483) * dot(vec3(_859, _862, _865), vec3(_3406, _3407, _3408))) + _3483;
                                float _4630 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3490 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3491 = 1.0 - _3458;
                                float _3501 = (0.5 / (((_3490 * ((_3473 * _3491) + _3458)) + 9.9999999392252902907785028219223e-09) + (((_3490 * _3491) + _3458) * _3473))) * _3490;
                                float _4641 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3511 = (_3436 * _3413) * (((_3459 * 3.1415927410125732421875) * (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) / ((_3481 * _3481) * ((_3426 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3437 * _3282.y;
                                frontier_phi_83_pred_1 = _3437 * _3282.x;
                                frontier_phi_83_pred_2 = _3511 * _3294.z;
                                frontier_phi_83_pred_3 = _3511 * _3294.y;
                                frontier_phi_83_pred_4 = _3511 * _3294.x;
                                frontier_phi_83_pred_5 = _3437 * _3282.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3519 = frontier_phi_83_pred;
                            _3518 = frontier_phi_83_pred_1;
                            _3517 = frontier_phi_83_pred_2;
                            _3516 = frontier_phi_83_pred_3;
                            _3515 = frontier_phi_83_pred_4;
                            _3520 = frontier_phi_83_pred_5;
                            _3224 = _3518 + _3237;
                            _3225 = _3519 + _3238;
                            _3226 = _3520 + _3239;
                            _3221 = _3515 + _3234;
                            _3222 = _3516 + _3235;
                            _3223 = _3517 + _3236;
                            if (_3241 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3241;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3226;
                        frontier_phi_77_pred_1 = _3225;
                        frontier_phi_77_pred_2 = _3224;
                        frontier_phi_77_pred_3 = _3223;
                        frontier_phi_77_pred_4 = _3222;
                        frontier_phi_77_pred_5 = _3221;
                    }
                    _2863 = frontier_phi_77_pred;
                    _2861 = frontier_phi_77_pred_1;
                    _2859 = frontier_phi_77_pred_2;
                    _2857 = frontier_phi_77_pred_3;
                    _2855 = frontier_phi_77_pred_4;
                    _2853 = frontier_phi_77_pred_5;
                    uint _3019 = _3018 + 1u;
                    if (_3019 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3012 = _2853;
                        _3013 = _2855;
                        _3014 = _2857;
                        _3015 = _2859;
                        _3016 = _2861;
                        _3017 = _2863;
                        _3018 = _3019;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2857;
                frontier_phi_58_59_ladder_1 = _2863;
                frontier_phi_58_59_ladder_2 = _2861;
                frontier_phi_58_59_ladder_3 = _2859;
                frontier_phi_58_59_ladder_4 = _2855;
                frontier_phi_58_59_ladder_5 = _2853;
            }
            else
            {
                frontier_phi_58_59_ladder = _2736;
                frontier_phi_58_59_ladder_1 = _2742;
                frontier_phi_58_59_ladder_2 = _2740;
                frontier_phi_58_59_ladder_3 = _2738;
                frontier_phi_58_59_ladder_4 = _2734;
                frontier_phi_58_59_ladder_5 = _2732;
            }
            _2852 = frontier_phi_58_59_ladder_5;
            _2854 = frontier_phi_58_59_ladder_4;
            _2856 = frontier_phi_58_59_ladder;
            _2858 = frontier_phi_58_59_ladder_3;
            _2860 = frontier_phi_58_59_ladder_2;
            _2862 = frontier_phi_58_59_ladder_1;
        }
        float _2867 = isnan(1.0) ? _903 : (isnan(_903) ? 1.0 : min(_903, 1.0));
        _2644 = (_2867 * _2858) + _2099;
        _2646 = (_2867 * _2860) + _2101;
        _2648 = (_2867 * _2862) + _2103;
        _2650 = ((_2852 * 0.039999999105930328369140625) * _2867) + _2429;
        _2652 = ((_2854 * 0.039999999105930328369140625) * _2867) + _2431;
        _2654 = ((_2856 * 0.039999999105930328369140625) * _2867) + _2433;
    }
    else
    {
        _2644 = _2099;
        _2646 = _2101;
        _2648 = _2103;
        _2650 = _2429;
        _2652 = _2431;
        _2654 = _2433;
    }
    float _4657 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4668 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _4679 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _2671 = ((isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2644 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _903))) + ((_2650 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1739)) * cbPerFrame._m0[3u].x);
    float _2672 = ((isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2646 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _903))) + ((_2652 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1739)) * cbPerFrame._m0[3u].x);
    float _2673 = ((isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2648 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _903))) + ((_2654 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1739)) * cbPerFrame._m0[3u].x);
    uint _2674 = _247 + 6u;
    float _2682 = _840 / cbSceneParam._m0[86u].x;
    float _2683 = _841 / cbSceneParam._m0[86u].y;
    vec4 _2697 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2682, _2683, (log2((isnan(cbSceneParam._m0[77u].w) ? _762 : (isnan(_762) ? cbSceneParam._m0[77u].w : min(_762, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2699 = _2697.x;
    float _2700 = _2697.y;
    float _2701 = _2697.z;
    float _2702 = _2697.w;
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    if (_762 > cbSceneParam._m0[78u].w)
    {
        float _2757 = isnan(_762) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _762 : min(cbSceneParam._m0[80u].w, _762));
        float _2758 = _2757 / _762;
        float _2769 = _2758 * _813;
        float _2770 = _814 * _2758;
        float _2771 = (-0.0) - _2770;
        float _2772 = _2758 * _815;
        float _2774 = (cbSceneParam._m0[77u].w * _2771) / _2757;
        float _2775 = _2774 + cbSceneParam._m0[79u].w;
        float _2776 = cbSceneParam._m0[79u].w - _2770;
        float _2782 = sqrt(((_2769 * _2769) + (_2770 * _2770)) + (_2772 * _2772));
        float _2785 = (1.0 - (cbSceneParam._m0[77u].w / _2757)) * _2782;
        float _2790 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2792 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2969;
        if (abs((_2771 - _2774) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2969 = ((((_2775 > 0.0) ? exp2(_2790 * _2775) : (2.0 - exp2(_2792 * _2775))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2785;
        }
        else
        {
            float _2913 = 1.0 / cbSceneParam._m0[80u].x;
            float _2914 = isnan(_2776) ? _2775 : (isnan(_2775) ? _2776 : max(_2775, _2776));
            float _2915 = isnan(_2776) ? _2775 : (isnan(_2775) ? _2776 : min(_2775, _2776));
            float _2924 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : min(_2914, 0.0));
            float _2925 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : min(_2915, 0.0));
            _2969 = ((abs(_2782 / _2771) * cbSceneParam._m0[80u].y) * ((((_2924 - _2925) * 2.0) - ((exp2(_2790 * (isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0)))) - exp2(_2790 * (isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0))))) * _2913)) - ((exp2(_2792 * _2924) - exp2(_2792 * _2925)) * _2913))) + (_2785 * cbSceneParam._m0[80u].z);
        }
        vec4 _2971 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2682, _2683, 1.0), 0.0);
        float _2980 = exp2((_2969 * (-1.44269502162933349609375)) * (1.0 - _2971.w));
        float _2981 = log2(_2980);
        float _2997 = log2(_2702);
        _2794 = (exp2(_2997 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2981 * cbSceneParam._m0[78u].x)) * _2971.x) / cbSceneParam._m0[78u].x)) + _2699;
        _2796 = (exp2(_2997 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2981 * cbSceneParam._m0[78u].y)) * _2971.y) / cbSceneParam._m0[78u].y)) + _2700;
        _2798 = (exp2(_2997 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2981 * cbSceneParam._m0[78u].z)) * _2971.z) / cbSceneParam._m0[78u].z)) + _2701;
        _2800 = _2980 * _2702;
    }
    else
    {
        _2794 = _2699;
        _2796 = _2700;
        _2798 = _2701;
        _2800 = _2702;
    }
    bool _3007;
    vec4 _2810;
    vec4 _2832;
    float _2834;
    float _2838;
    float _2839;
    float _2840;
    float _2841;
    bool _2851;
    for (;;)
    {
        _2810 = cbMatDynParam._m0[0u];
        float _2812 = roundEven(_2810.y);
        bool _2813 = _2812 == 3.0;
        float _2814 = log2(_2800);
        float _2821 = exp2(_2814 * cbSceneParam._m0[78u].x) * _2671;
        float _2822 = exp2(_2814 * cbSceneParam._m0[78u].y) * _2672;
        float _2823 = exp2(_2814 * cbSceneParam._m0[78u].z) * _2673;
        float _2830 = _829 + (-0.5);
        _2832 = cbMtdParam._m0[1u];
        _2834 = _2832.y * _2830;
        float _2837 = (_2812 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2838 = _2837 * (_2813 ? _2821 : (_2821 + (cbSceneParam._m0[72u].w * _2794)));
        _2839 = _2837 * (_2813 ? _2822 : (_2822 + (cbSceneParam._m0[72u].w * _2796)));
        _2840 = _2837 * (_2813 ? _2823 : (_2823 + (cbSceneParam._m0[72u].w * _2798)));
        _2841 = _2830 * 0.999000012874603271484375;
        _2851 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2851)
        {
            if ((cbInstanceData._m0[_247 + 7u].x + _2841) < 0.5)
            {
                _3007 = true;
                break;
            }
        }
        uint _2948 = _878 + uint(_2810.w);
        if ((cbInstanceData._m0[_2948].w < 1.0) && ((cbInstanceData._m0[_2948].w + _2841) < 0.5))
        {
            _3007 = true;
            break;
        }
        if ((_2834 + 1.0) < _2832.x)
        {
            _3007 = true;
            break;
        }
        _3007 = false;
        break;
    }
    float _3212;
    if (_3007)
    {
        discard_state = true;
        _3212 = 0.0;
    }
    else
    {
        _3212 = cbInstanceData._m0[_2674].w;
    }
    SV_Target.x = _2838;
    SV_Target.y = _2839;
    SV_Target.z = _2840;
    SV_Target.w = _3212;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2674].w;
    discard_exit();
}


