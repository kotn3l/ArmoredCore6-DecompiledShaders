#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1114;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _269 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _275 = _269.x * cbMtdParam._m0[11u].x;
    float _276 = _269.y * cbMtdParam._m0[11u].y;
    float _277 = _269.z * cbMtdParam._m0[11u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _248) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _249) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _336 = _334.x;
    float _346 = dot(vec4(_336, _334.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _363 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_336 - _346) * cbMtdParam._m0[24u].x) + _346) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3419 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _371 = (_364 * ((_296.x * cbMtdParam._m0[12u].x) - _275)) + _275;
    float _372 = (_364 * ((_296.y * cbMtdParam._m0[12u].y) - _276)) + _276;
    float _373 = (_364 * ((_296.z * cbMtdParam._m0[12u].z) - _277)) + _277;
    vec4 _392 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _248) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _249) + cbTextureTilingScale._m0[14u].w));
    vec4 _412 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _248) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _249) + cbTextureTilingScale._m0[4u].w));
    vec4 _429 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _431 = _429.x;
    float _432 = _429.y;
    float _433 = _429.z;
    float _442 = ((_412.z - _433) * _364) + _433;
    float _445 = ((((_412.x - _431) * _364) + _431) * 2.0) + (-1.0);
    float _447 = ((((_412.y - _432) * _364) + _432) * 2.0) + (-1.0);
    float _448 = dot(vec2(_445, _447), vec2(_445, _447));
    float _3430 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _453 = sqrt(1.0 - (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))));
    float _456 = fma(_453, _216, fma(_447, _223, _445 * _209));
    float _459 = fma(_453, _217, fma(_447, _224, _445 * _210));
    float _462 = fma(_453, _218, fma(_447, _225, _445 * _211));
    float _466 = inversesqrt(dot(vec3(_456, _459, _462), vec3(_456, _459, _462)));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _510 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _512 = _510.x;
    float _513 = 1.0 - _512;
    float _519 = (cbMtdParam._m0[19u].x + dot(vec4(_466 * _456, _466 * _459, _466 * _462, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_512 - _513) * cbMtdParam._m0[24u].z) + _513) * cbMtdParam._m0[21u].z);
    float _3441 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _520 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _527 = (_520 * ((_392.x * cbMtdParam._m0[18u].x) - _371)) + _371;
    float _528 = (_520 * ((_392.y * cbMtdParam._m0[18u].y) - _372)) + _372;
    float _529 = (_520 * ((_392.z * cbMtdParam._m0[18u].z) - _373)) + _373;
    vec4 _542 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _549 = (_542.x * 2.0) + (-1.0);
    float _550 = (_542.y * 2.0) + (-1.0);
    float _551 = dot(vec2(_549, _550), vec2(_549, _550));
    float _3452 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _559 = ((_542.z - _442) * _520) + _442;
    float _569 = ((sqrt(1.0 - (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) - _453) * _520) + _453;
    float _572 = (((_549 - _445) * _520) + _445) + (cbMtdParam._m0[21u].x * _445);
    float _573 = (((_550 - _447) * _520) + _447) + (cbMtdParam._m0[21u].x * _447);
    float _578 = cbMtdParam._m0[22u].x + _482.w;
    float _581 = fma(_569, _216, fma(_573, _223, _572 * _209));
    float _584 = fma(_569, _217, fma(_573, _224, _572 * _210));
    float _587 = fma(_569, _218, fma(_573, _225, _572 * _211));
    float _591 = inversesqrt(dot(vec3(_581, _584, _587), vec3(_581, _584, _587)));
    float _592 = _591 * _581;
    float _593 = _591 * _584;
    float _594 = _591 * _587;
    float _3463 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _595 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3485 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _3496 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _3507 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _613 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _665 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _655);
    float _666 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _655);
    float _667 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _655);
    float _671 = inversesqrt(dot(vec3(_665, _666, _667), vec3(_665, _666, _667)));
    float _672 = _665 * _671;
    float _673 = _666 * _671;
    float _674 = _667 * _671;
    float _680 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _681 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _699 = fma(_594, cbSceneParam._m0[5u].z, fma(_593, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _592));
    float _702 = fma(_594, cbSceneParam._m0[6u].z, fma(_593, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _592));
    float _705 = fma(_594, cbSceneParam._m0[7u].z, fma(_593, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _592));
    uint _719 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _725 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * cbInstanceData._m0[_719].x;
    float _726 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0)))) * cbInstanceData._m0[_719].y;
    float _727 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) * cbInstanceData._m0[_719].z;
    float _3518 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _3540 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    vec4 _739 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _680, cbSceneParam._m0[86u].y * _681));
    float _743 = ((isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * TEXCOORD_5.w) * _739.x;
    float _744 = dot(vec3(_592, _593, _594), vec3(_672, _673, _674));
    float _747 = _744 * 2.0;
    float _751 = (_747 * _592) - _672;
    float _752 = (_747 * _593) - _673;
    float _753 = (_747 * _594) - _674;
    float _757 = abs(dot(vec3(_672, _673, _674), vec3(_592, _593, _594)));
    float _3551 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _759 = sqrt(_595);
    float _772 = exp2((_759 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_759 * 3.0));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _812 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1113;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _838 = fma(_812, cbModelParam._m0[26u].z, fma(_808, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _804));
        float _842 = fma(_812, cbModelParam._m0[27u].z, fma(_808, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _804));
        float _846 = fma(_812, cbModelParam._m0[28u].z, fma(_808, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _804));
        float _871 = _804 + _592;
        float _872 = _808 + _593;
        float _873 = _812 + _594;
        float _883 = fma(_873, cbModelParam._m0[26u].z, fma(_872, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _871)) - _838;
        float _884 = fma(_873, cbModelParam._m0[27u].z, fma(_872, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _871)) - _842;
        float _885 = fma(_873, cbModelParam._m0[28u].z, fma(_872, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _871)) - _846;
        float _889 = inversesqrt(dot(vec3(_883, _884, _885), vec3(_883, _884, _885)));
        float _902 = ((_889 * _883) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_838 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_889 * _884) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_842 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_889 * _885) / cbModelParam._m0[34u].z) + ((((((_846 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        float _941 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_907.x + (-0.5));
        float _943 = _941 * (_907.y + (-0.5));
        float _944 = _941 * (_907.z + (-0.5));
        float _951 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_914.x + (-0.5));
        float _953 = _951 * (_914.y + (-0.5));
        float _954 = _951 * (_914.z + (-0.5));
        float _961 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_921.x + (-0.5));
        float _963 = _961 * (_921.y + (-0.5));
        float _964 = _961 * (_921.z + (-0.5));
        float _971 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_928.x + (-0.5));
        float _973 = _971 * (_928.y + (-0.5));
        float _974 = _971 * (_928.z + (-0.5));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = _942 * 0.5;
        float _979 = _952 * 0.5;
        float _980 = _962 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _995 = (dot(vec3(_592, _593, _594), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1005 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3599 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_1007 + 1.0))) + _1012) * _975;
        float _1022 = _943 * 0.5;
        float _1023 = _953 * 0.5;
        float _1024 = _963 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_592, _593, _594), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3632 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1049 + 1.0))) + _1054) * _976;
        float _1064 = _944 * 0.5;
        float _1065 = _954 * 0.5;
        float _1066 = _964 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_592, _593, _594), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3665 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1091 + 1.0))) + _1096) * _977;
        _1113 = _944;
        _1115 = _943;
        _1116 = _942;
        _1117 = _954;
        _1118 = _953;
        _1119 = _952;
        _1120 = _964;
        _1121 = _963;
        _1122 = _962;
        _1123 = _977;
        _1124 = _976;
        _1125 = _975;
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
    }
    else
    {
        _1113 = _1114;
        _1115 = _1114;
        _1116 = _1114;
        _1117 = _1114;
        _1118 = _1114;
        _1119 = _1114;
        _1120 = _1114;
        _1121 = _1114;
        _1122 = _1114;
        _1123 = _1114;
        _1124 = _1114;
        _1125 = _1114;
        _1126 = 0.0;
        _1127 = 0.0;
        _1128 = 0.0;
    }
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1153 = fma(_812, cbModelParam._m0[30u].z, fma(_808, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _804));
        float _1157 = fma(_812, cbModelParam._m0[31u].z, fma(_808, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _804));
        float _1161 = fma(_812, cbModelParam._m0[32u].z, fma(_808, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _804));
        float _1184 = _804 + _592;
        float _1185 = _808 + _593;
        float _1186 = _812 + _594;
        float _1196 = fma(_1186, cbModelParam._m0[30u].z, fma(_1185, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1184)) - _1153;
        float _1197 = fma(_1186, cbModelParam._m0[31u].z, fma(_1185, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1184)) - _1157;
        float _1198 = fma(_1186, cbModelParam._m0[32u].z, fma(_1185, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1184)) - _1161;
        float _1202 = inversesqrt(dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198)));
        float _1215 = ((_1202 * _1196) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1153 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1202 * _1197) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1157 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1202 * _1198) / cbModelParam._m0[35u].z) + ((((((_1161 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        float _1252 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1219.x + (-0.5));
        float _1254 = _1252 * (_1219.y + (-0.5));
        float _1255 = _1252 * (_1219.z + (-0.5));
        float _1262 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1226.x + (-0.5));
        float _1264 = _1262 * (_1226.y + (-0.5));
        float _1265 = _1262 * (_1226.z + (-0.5));
        float _1272 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1233.x + (-0.5));
        float _1274 = _1272 * (_1233.y + (-0.5));
        float _1275 = _1272 * (_1233.z + (-0.5));
        float _1282 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1240.x + (-0.5));
        float _1284 = _1282 * (_1240.y + (-0.5));
        float _1285 = _1282 * (_1240.z + (-0.5));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = _1253 * 0.5;
        float _1290 = _1263 * 0.5;
        float _1291 = _1273 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_592, _593, _594), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _3728 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1316 + 1.0))) + _1321) * _1286;
        float _1331 = _1254 * 0.5;
        float _1332 = _1264 * 0.5;
        float _1333 = _1274 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_592, _593, _594), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _3761 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1358 + 1.0))) + _1363) * _1287;
        float _1373 = _1255 * 0.5;
        float _1374 = _1265 * 0.5;
        float _1375 = _1275 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_592, _593, _594), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _3794 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1400 + 1.0))) + _1405) * _1288;
        _1422 = _1255;
        _1423 = _1254;
        _1424 = _1253;
        _1425 = _1265;
        _1426 = _1264;
        _1427 = _1263;
        _1428 = _1275;
        _1429 = _1274;
        _1430 = _1273;
        _1431 = _1288;
        _1432 = _1287;
        _1433 = _1286;
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
    }
    else
    {
        _1422 = _1114;
        _1423 = _1114;
        _1424 = _1114;
        _1425 = _1114;
        _1426 = _1114;
        _1427 = _1114;
        _1428 = _1114;
        _1429 = _1114;
        _1430 = _1114;
        _1431 = _1114;
        _1432 = _1114;
        _1433 = _1114;
        _1434 = 0.0;
        _1435 = 0.0;
        _1436 = 0.0;
    }
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1126)) + _1126;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1127)) + _1127;
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1128)) + _1128;
    float _1469 = fma(_1448, cbSceneParam._m0[89u].z, fma(_1447, cbSceneParam._m0[89u].y, _1446 * cbSceneParam._m0[89u].x));
    float _1472 = fma(_1448, cbSceneParam._m0[90u].z, fma(_1447, cbSceneParam._m0[90u].y, _1446 * cbSceneParam._m0[90u].x));
    float _1475 = fma(_1448, cbSceneParam._m0[91u].z, fma(_1447, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1446));
    float _1490 = _751 * 0.5;
    float _1491 = _752 * 0.5;
    float _1492 = _753 * 0.5;
    float _1493 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1496 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1499 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1533;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1506 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1113, _1117, _1120, _1123));
        float _1510 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1115, _1118, _1121, _1124));
        float _1514 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1116, _1119, _1122, _1125));
        float _1521 = dot(vec4(cbModelParam._m0[39u]), vec4(_1490, _1491, _1492, 1.0));
        _1533 = dot(vec3(isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1521) ? 0.0 : (isnan(0.0) ? _1521 : max(0.0, _1521))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1533 = 1.0;
    }
    float _1544;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1535 = dot(vec4(cbModelParam._m0[40u]), vec4(_1490, _1491, _1492, 1.0));
        _1544 = dot(vec3(isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1535) ? 0.0 : (isnan(0.0) ? _1535 : max(0.0, _1535))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1544 = 1.0;
    }
    float _1548 = (_1544 * cbModelParam._m0[1u].x) + (_1533 * (1.0 - cbModelParam._m0[1u].x));
    float _1558 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _595);
    float _1559 = isnan(_1558) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1558 : min(cbModelParam._m0[25u].z, _1558));
    float _1639;
    float _1641;
    float _1643;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1606 = fma(_812, cbModelParam._m0[13u].z, fma(_808, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804)) + cbModelParam._m0[13u].w;
        float _1610 = fma(_812, cbModelParam._m0[14u].z, fma(_808, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804)) + cbModelParam._m0[14u].w;
        float _1614 = fma(_812, cbModelParam._m0[15u].z, fma(_808, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804)) + cbModelParam._m0[15u].w;
        float _1617 = fma(_753, cbModelParam._m0[13u].z, fma(_752, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _751));
        float _1620 = fma(_753, cbModelParam._m0[14u].z, fma(_752, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _751));
        float _1623 = fma(_753, cbModelParam._m0[15u].z, fma(_752, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _751));
        float _1651;
        if (_1617 > 0.0)
        {
            _1651 = abs((1.0 - _1606) / _1617);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1606 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1651 = frontier_phi_14_12_ladder;
        }
        float _1851;
        if (_1620 > 0.0)
        {
            _1851 = abs((1.0 - _1610) / _1620);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1610 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1851 = frontier_phi_23_19_ladder;
        }
        float _2094;
        if (_1623 > 0.0)
        {
            _2094 = abs((1.0 - _1614) / _1623);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1614 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2094 = frontier_phi_35_30_ladder;
        }
        float _2096 = isnan(_1851) ? _1651 : (isnan(_1651) ? _1851 : min(_1651, _1851));
        float _2097 = isnan(_2094) ? _2096 : (isnan(_2096) ? _2094 : min(_2096, _2094));
        float _2101 = (_2097 * _1617) + _1606;
        float _2102 = (_2097 * _1620) + _1610;
        float _2103 = (_2097 * _1623) + _1614;
        float _2104 = _2097 * 9.9999997473787516355514526367188e-05;
        float _2106 = (-1.0) - _2104;
        float _2108 = _2104 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2103 > _2108) || ((_2103 < _2106) || ((_2102 > _2108) || ((_2102 < _2106) || ((_2101 < _2106) || (_2101 > _2108))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2227 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2103, cbModelParam._m0[9u].z, fma(_2102, cbModelParam._m0[9u].y, _2101 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2103, cbModelParam._m0[10u].z, fma(_2102, cbModelParam._m0[10u].y, _2101 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2103, cbModelParam._m0[11u].z, fma(_2102, cbModelParam._m0[11u].y, _2101 * cbModelParam._m0[11u].x))), _1559);
            frontier_phi_13_35_ladder = _2227.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2227.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2227.x * cbModelParam._m0[1u].y;
        }
        _1639 = frontier_phi_13_35_ladder_2;
        _1641 = frontier_phi_13_35_ladder_1;
        _1643 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1627 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_751, _752, _753), _1559);
        _1639 = _1627.x * cbModelParam._m0[1u].y;
        _1641 = _1627.y * cbModelParam._m0[1u].y;
        _1643 = _1627.z * cbModelParam._m0[1u].y;
    }
    float _1647 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _595);
    float _1648 = isnan(_1647) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1647 : min(cbModelParam._m0[25u].w, _1647));
    float _1737;
    float _1739;
    float _1741;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1701 = fma(_812, cbModelParam._m0[21u].z, fma(_808, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804)) + cbModelParam._m0[21u].w;
        float _1705 = fma(_812, cbModelParam._m0[22u].z, fma(_808, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804)) + cbModelParam._m0[22u].w;
        float _1709 = fma(_812, cbModelParam._m0[23u].z, fma(_808, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804)) + cbModelParam._m0[23u].w;
        float _1712 = fma(_753, cbModelParam._m0[21u].z, fma(_752, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _751));
        float _1715 = fma(_753, cbModelParam._m0[22u].z, fma(_752, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _751));
        float _1718 = fma(_753, cbModelParam._m0[23u].z, fma(_752, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _751));
        float _1856;
        if (_1712 > 0.0)
        {
            _1856 = abs((1.0 - _1701) / _1712);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1701 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1856 = frontier_phi_25_21_ladder;
        }
        float _2121;
        if (_1715 > 0.0)
        {
            _2121 = abs((1.0 - _1705) / _1715);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1705 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2121 = frontier_phi_37_32_ladder;
        }
        float _2326;
        if (_1718 > 0.0)
        {
            _2326 = abs((1.0 - _1709) / _1718);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1709 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2326 = frontier_phi_46_43_ladder;
        }
        float _2328 = isnan(_2121) ? _1856 : (isnan(_1856) ? _2121 : min(_1856, _2121));
        float _2329 = isnan(_2326) ? _2328 : (isnan(_2328) ? _2326 : min(_2328, _2326));
        float _2333 = (_2329 * _1712) + _1701;
        float _2334 = (_2329 * _1715) + _1705;
        float _2335 = (_2329 * _1718) + _1709;
        float _2336 = _2329 * 9.9999997473787516355514526367188e-05;
        float _2337 = (-1.0) - _2336;
        float _2339 = _2336 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2335 > _2339) || ((_2335 < _2337) || ((_2334 > _2339) || ((_2334 < _2337) || ((_2333 < _2337) || (_2333 > _2339))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2534 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2335, cbModelParam._m0[17u].z, fma(_2334, cbModelParam._m0[17u].y, _2333 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2335, cbModelParam._m0[18u].z, fma(_2334, cbModelParam._m0[18u].y, _2333 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2335, cbModelParam._m0[19u].z, fma(_2334, cbModelParam._m0[19u].y, _2333 * cbModelParam._m0[19u].x))), _1648);
            frontier_phi_22_46_ladder = _2534.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2534.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2534.x * cbModelParam._m0[1u].z;
        }
        _1737 = frontier_phi_22_46_ladder_2;
        _1739 = frontier_phi_22_46_ladder_1;
        _1741 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1721 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_751, _752, _753), _1648);
        _1737 = _1721.x * cbModelParam._m0[1u].z;
        _1739 = _1721.y * cbModelParam._m0[1u].z;
        _1741 = _1721.z * cbModelParam._m0[1u].z;
    }
    float _1753 = ((((1.0 - _772) * ((_759 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_772 * _759)) * _743;
    float _1754 = _1753 * ((cbModelParam._m0[1u].w * (_1737 - _1639)) + _1639);
    float _1755 = _1753 * ((cbModelParam._m0[1u].w * (_1739 - _1641)) + _1641);
    float _1756 = _1753 * ((cbModelParam._m0[1u].w * (_1741 - _1643)) + _1643);
    float _1759 = fma(_1756, cbSceneParam._m0[89u].z, fma(_1755, cbSceneParam._m0[89u].y, _1754 * cbSceneParam._m0[89u].x));
    float _1762 = fma(_1756, cbSceneParam._m0[90u].z, fma(_1755, cbSceneParam._m0[90u].y, _1754 * cbSceneParam._m0[90u].x));
    float _1765 = fma(_1756, cbSceneParam._m0[91u].z, fma(_1755, cbSceneParam._m0[91u].y, _1754 * cbSceneParam._m0[91u].x));
    uvec4 _1775 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1777 = _1775.x * 14u;
    uint _1778 = _1777 + 13u;
    float _1785 = _743 + (-1.0);
    float _1790 = (cbLight._m0[_1778].x * _1785) + 1.0;
    float _1791 = (cbLight._m0[_1778].y * _1785) + 1.0;
    float _1792 = (cbLight._m0[_1778].z * _1785) + 1.0;
    float _1793 = (cbLight._m0[_1778].w * _1785) + 1.0;
    uint _1794 = _1777 + 5u;
    float _1800 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
    uint _1804 = _1777 + 4u;
    float _1810 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
    uint _1814 = _1777 | 1u;
    float _1825 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_592, _593, _594));
    float _1828 = dot(vec3(cbLight._m0[_1814].xyz), vec3(_592, _593, _594));
    float _3930 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _3941 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1833 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * 0.3183098733425140380859375;
    float _1835 = (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * 0.3183098733425140380859375;
    float _1842 = ((cbLight._m0[_1794].x * _1800) * _1835) + ((cbLight._m0[_1804].x * _1810) * _1833);
    float _1843 = ((_1800 * cbLight._m0[_1794].y) * _1835) + ((_1810 * cbLight._m0[_1804].y) * _1833);
    float _1844 = ((_1800 * cbLight._m0[_1794].z) * _1835) + ((_1810 * cbLight._m0[_1804].z) * _1833);
    uvec4 _1848 = floatBitsToUint(cbLight._m0[_1777 + 12u]);
    bool _1850 = _1848.x == 0u;
    float _1861;
    float _1863;
    float _1865;
    if (_1850)
    {
        _1861 = _1842;
        _1863 = _1843;
        _1865 = _1844;
    }
    else
    {
        uint _1869 = _1777 + 6u;
        float _1885 = (dot(vec3(cbLight._m0[_1777 + 2u].xyz), vec3(_592, _593, _594)) * 0.5) + 0.5;
        float _1886 = _1885 * _1885;
        float _3952 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1888 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _1861 = (((cbLight._m0[_1869].x * 0.3183098733425140380859375) * _1887) * _1888) + _1842;
        _1863 = (((cbLight._m0[_1869].y * 0.3183098733425140380859375) * _1887) * _1888) + _1843;
        _1865 = (((cbLight._m0[_1869].z * 0.3183098733425140380859375) * _1887) * _1888) + _1844;
    }
    bool _1868 = _1848.y == 0u;
    float _1906;
    float _1908;
    float _1910;
    if (_1868)
    {
        _1906 = _1861;
        _1908 = _1863;
        _1910 = _1865;
    }
    else
    {
        uint _2065 = _1777 + 7u;
        float _2081 = (dot(vec3(cbLight._m0[_1777 + 3u].xyz), vec3(_592, _593, _594)) * 0.5) + 0.5;
        float _2082 = _2081 * _2081;
        float _3968 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2083 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _2084 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _1906 = (((cbLight._m0[_2065].x * 0.3183098733425140380859375) * _2083) * _2084) + _1861;
        _1908 = (((cbLight._m0[_2065].y * 0.3183098733425140380859375) * _2083) * _2084) + _1863;
        _1910 = (((cbLight._m0[_2065].z * 0.3183098733425140380859375) * _2083) * _2084) + _1865;
    }
    uint _1913 = _1777 + 8u;
    float _1926 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1777].w)) * _595) * 0.949999988079071044921875);
    float _1927 = _1926 * _1926;
    float _1928 = cbLight._m0[_1777].x + _672;
    float _1929 = cbLight._m0[_1777].y + _673;
    float _1930 = cbLight._m0[_1777].z + _674;
    float _1934 = inversesqrt(dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930)));
    float _1935 = _1934 * _1928;
    float _1936 = _1934 * _1929;
    float _1937 = _1934 * _1930;
    float _1938 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_1777].xyz));
    float _3984 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1941 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _1942 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _1943 = dot(vec3(_592, _593, _594), vec3(_1935, _1936, _1937));
    float _4006 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1946 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1947 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_1935, _1936, _1937));
    float _4017 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1951 = _1927 * _1927;
    float _1955 = ((_1946 * _1946) * (_1951 + (-1.0))) + 1.0;
    float _1966 = (exp2(log2(1.0 - (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1967 = 1.0 - _1927;
    float _1978 = (0.5 / (((_1942 * ((_1941 * _1967) + _1927)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _1967) + _1927) * _1941))) * _1941;
    float _4028 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1980 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1951 / ((_1955 * _1955) * 3.141590118408203125));
    uint _1991 = _1777 + 9u;
    float _2002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1814].w)) * _595) * 0.949999988079071044921875);
    float _2003 = _2002 * _2002;
    float _2004 = cbLight._m0[_1814].x + _672;
    float _2005 = cbLight._m0[_1814].y + _673;
    float _2006 = cbLight._m0[_1814].z + _674;
    float _2010 = inversesqrt(dot(vec3(_2004, _2005, _2006), vec3(_2004, _2005, _2006)));
    float _2011 = _2010 * _2004;
    float _2012 = _2010 * _2005;
    float _2013 = _2010 * _2006;
    float _2014 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_1814].xyz));
    float _4039 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _2018 = dot(vec3(_592, _593, _594), vec3(_2011, _2012, _2013));
    float _4050 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _2022 = dot(vec3(cbLight._m0[_1814].xyz), vec3(_2011, _2012, _2013));
    float _4061 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2026 = _2003 * _2003;
    float _2030 = ((_2021 * _2021) * (_2026 + (-1.0))) + 1.0;
    float _2039 = (exp2(log2(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2040 = 1.0 - _2003;
    float _2050 = (0.5 / (((_1942 * ((_2017 * _2040) + _2003)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _2040) + _2003) * _2017))) * _2017;
    float _4072 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2052 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_2026 / ((_2030 * _2030) * 3.141590118408203125));
    float _2062 = (((_2039 * cbLight._m0[_1991].x) * _2052) * _1800) + (((_1966 * cbLight._m0[_1913].x) * _1980) * _1810);
    float _2063 = (((_2039 * cbLight._m0[_1991].y) * _2052) * _1800) + (((_1966 * cbLight._m0[_1913].y) * _1980) * _1810);
    float _2064 = (((_2039 * cbLight._m0[_1991].z) * _2052) * _1800) + (((_1966 * cbLight._m0[_1913].z) * _1980) * _1810);
    float _2126;
    float _2128;
    float _2130;
    if (_1850)
    {
        _2126 = _2062;
        _2128 = _2063;
        _2130 = _2064;
    }
    else
    {
        uint _2132 = _1777 + 2u;
        uint _2136 = _1777 + 10u;
        float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2132].w)) * _595) * 0.949999988079071044921875);
        float _2151 = _2150 * _2150;
        float _2152 = cbLight._m0[_2132].x + _672;
        float _2153 = cbLight._m0[_2132].y + _673;
        float _2154 = cbLight._m0[_2132].z + _674;
        float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
        float _2159 = _2158 * _2152;
        float _2160 = _2158 * _2153;
        float _2161 = _2158 * _2154;
        float _2162 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_2132].xyz));
        float _4083 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2165 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2166 = dot(vec3(_592, _593, _594), vec3(_2159, _2160, _2161));
        float _4094 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2169 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _2170 = dot(vec3(cbLight._m0[_2132].xyz), vec3(_2159, _2160, _2161));
        float _4105 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2174 = _2151 * _2151;
        float _2178 = ((_2169 * _2169) * (_2174 + (-1.0))) + 1.0;
        float _2187 = (exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2188 = 1.0 - _2151;
        float _2198 = (0.5 / (((_1942 * ((_2165 * _2188) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _2188) + _2151) * _2165))) * _2165;
        float _4116 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2200 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2174 / ((_2178 * _2178) * 3.141590118408203125));
        float _2201 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _2126 = (((_2187 * cbLight._m0[_2136].x) * _2200) * _2201) + _2062;
        _2128 = (((_2187 * cbLight._m0[_2136].y) * _2200) * _2201) + _2063;
        _2130 = (((_2187 * cbLight._m0[_2136].z) * _2200) * _2201) + _2064;
    }
    float _2236;
    float _2238;
    float _2240;
    if (_1868)
    {
        _2236 = _2126;
        _2238 = _2128;
        _2240 = _2130;
    }
    else
    {
        uint _2247 = _1777 + 3u;
        uint _2251 = _1777 + 11u;
        float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _595) * 0.949999988079071044921875);
        float _2266 = _2265 * _2265;
        float _2267 = cbLight._m0[_2247].x + _672;
        float _2268 = cbLight._m0[_2247].y + _673;
        float _2269 = cbLight._m0[_2247].z + _674;
        float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
        float _2274 = _2273 * _2267;
        float _2275 = _2273 * _2268;
        float _2276 = _2273 * _2269;
        float _2277 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_2247].xyz));
        float _4132 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2280 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2281 = dot(vec3(_592, _593, _594), vec3(_2274, _2275, _2276));
        float _4143 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2284 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2285 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2274, _2275, _2276));
        float _4154 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2289 = _2266 * _2266;
        float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
        float _2302 = (exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2303 = 1.0 - _2266;
        float _2313 = (0.5 / (((_1942 * ((_2280 * _2303) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _2303) + _2266) * _2280))) * _2280;
        float _4165 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2315 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
        float _2316 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
        _2236 = (((_2302 * cbLight._m0[_2251].x) * _2315) * _2316) + _2126;
        _2238 = (((_2302 * cbLight._m0[_2251].y) * _2315) * _2316) + _2128;
        _2240 = (((_2302 * cbLight._m0[_2251].z) * _2315) * _2316) + _2130;
    }
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    float _2461;
    if (_1775.y == 0u)
    {
        float _2391 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2392 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2391;
        float _2393 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2391;
        float _2394 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2391;
        uvec4 _2406 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2407 = _2406.x;
        uint _2418 = uint((float(_2406.y) * floor(float(uint(cbSceneParam._m0[85u].y * _681) / _2407))) + floor(float(uint(cbSceneParam._m0[85u].x * _680) / _2407)));
        float _2428 = (log2(_2394 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2429 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        uint _2432 = uint(isnan(14.0) ? _2429 : (isnan(_2429) ? 14.0 : min(_2429, 14.0)));
        uvec4 _2437 = texelFetch(g_lightClusterGridBuffer, int(((_2432 << 2u) + (_2418 << 6u)) >> 2u));
        uint _2438 = _2437.x;
        uint _2439 = _2406.z;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        if (((((1u << ((_2439 >> 4u) & 15u)) + 4294967295u) & _2438) == 0u) || ((_2439 & 240u) == 0u))
        {
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
            _2545 = 0.0;
            _2547 = 0.0;
            _2549 = 0.0;
        }
        else
        {
            float _2540;
            float _2542;
            float _2544;
            float _2546;
            float _2548;
            float _2550;
            float _2684 = 0.0;
            float _2685 = 0.0;
            float _2686 = 0.0;
            float _2687 = 0.0;
            float _2688 = 0.0;
            float _2689 = 0.0;
            uint _2690 = 0u;
            uint _2699;
            bool _2700;
            for (;;)
            {
                _2699 = texelFetch(g_lightClassification, int((((_2432 << 5u) + (_2418 << 9u)) + (_2690 << 2u)) >> 2u)).x;
                _2700 = _2699 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2700)
                {
                    frontier_phi_61_pred = _2684;
                    frontier_phi_61_pred_1 = _2689;
                    frontier_phi_61_pred_2 = _2688;
                    frontier_phi_61_pred_3 = _2687;
                    frontier_phi_61_pred_4 = _2686;
                    frontier_phi_61_pred_5 = _2685;
                }
                else
                {
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    uint _2814;
                    _2808 = _2684;
                    _2809 = _2685;
                    _2810 = _2686;
                    _2811 = _2687;
                    _2812 = _2688;
                    _2813 = _2689;
                    _2814 = _2699;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    for (;;)
                    {
                        uint _2818 = uint(findLSB(_2814)) + (_2690 << 5u);
                        uint _2815 = (_2814 + 4294967295u) & _2814;
                        uint _2820 = _2818 * 48u;
                        vec4 _2834 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2820)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 3u)).x));
                        uint _2840 = (_2818 * 48u) + 4u;
                        vec4 _2853 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 3u)).x));
                        uint _2859 = (_2818 * 48u) + 8u;
                        vec3 _2870 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2859)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 2u)).x));
                        float _2874 = _2834.x - _2392;
                        float _2875 = _2834.y - _2393;
                        float _2876 = _2834.z - _2394;
                        float _2877 = dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876));
                        float _2880 = inversesqrt(_2877);
                        float _2881 = _2880 * _2874;
                        float _2882 = _2880 * _2875;
                        float _2883 = _2880 * _2876;
                        float _2884 = dot(vec3(_699, _702, _705), vec3(_2881, _2882, _2883));
                        float _2889 = 1.0 - (_2877 * _2834.w);
                        float _4191 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2890 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                        float _2891 = sqrt(_2877) * _2853.w;
                        float _2894 = 1.39999997615814208984375 / (_2891 + 1.39999997615814208984375);
                        float _2895 = _2894 * _2894;
                        float _2898 = ((1.0 - _2895) * _2884) + _2895;
                        float _2901 = _2891 * _2891;
                        float _2905 = ((isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0))) * _2890) / ((_2901 * 0.699999988079071044921875) + 1.0);
                        float _2909 = (-0.0) - _2392;
                        float _2910 = (-0.0) - _2393;
                        float _2911 = (-0.0) - _2394;
                        float _2915 = inversesqrt(dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911)));
                        float _2916 = _2915 * _2909;
                        float _2917 = _2915 * _2910;
                        float _2918 = _2915 * _2911;
                        float _2926 = exp2(log2(1.0 / ((_2901 * 3.5) + 5.0)) * 0.25);
                        float _2927 = 1.0 - _759;
                        float _2934 = sqrt(1.0 - ((1.0 - (_2927 * _2927)) * (1.0 - (_2926 * _2926))));
                        float _2935 = _2934 * _2934;
                        float _2936 = _2935 * _2935;
                        float _2937 = _2916 + _2881;
                        float _2938 = _2917 + _2882;
                        float _2939 = _2918 + _2883;
                        float _2943 = inversesqrt(dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939)));
                        float _2947 = dot(vec3(_699, _702, _705), vec3(_2916, _2917, _2918));
                        float _4207 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2950 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2951 = dot(vec3(_699, _702, _705), vec3(_2943 * _2937, _2943 * _2938, _2943 * _2939));
                        float _4218 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2954 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                        float _2958 = ((_2954 * _2954) * (_2936 + (-1.0))) + 1.0;
                        float _2959 = _2894 * _2935;
                        float _2960 = _2959 * _2959;
                        float _2963 = ((1.0 - _2960) * _2884) + _2960;
                        float _4229 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2964 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                        float _2965 = 1.0 - _2935;
                        float _2975 = (0.5 / (((_2964 * ((_2950 * _2965) + _2935)) + 9.9999999392252902907785028219223e-09) + (((_2964 * _2965) + _2935) * _2950))) * _2964;
                        float _4240 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2986 = (((_2936 * 3.1415927410125732421875) * (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) / ((_2958 * _2958) * ((_2901 * 2.1991131305694580078125) + 3.141590118408203125))) * _2890;
                        _2743 = (_2905 * _2853.x) + _2811;
                        _2744 = (_2905 * _2853.y) + _2812;
                        _2745 = (_2905 * _2853.z) + _2813;
                        _2740 = (_2986 * _2870.x) + _2808;
                        _2741 = (_2986 * _2870.y) + _2809;
                        _2742 = (_2986 * _2870.z) + _2810;
                        if (_2815 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2808 = _2740;
                            _2809 = _2741;
                            _2810 = _2742;
                            _2811 = _2743;
                            _2812 = _2744;
                            _2813 = _2745;
                            _2814 = _2815;
                        }
                    }
                    frontier_phi_61_pred = _2740;
                    frontier_phi_61_pred_1 = _2745;
                    frontier_phi_61_pred_2 = _2744;
                    frontier_phi_61_pred_3 = _2743;
                    frontier_phi_61_pred_4 = _2742;
                    frontier_phi_61_pred_5 = _2741;
                }
                _2540 = frontier_phi_61_pred;
                _2550 = frontier_phi_61_pred_1;
                _2548 = frontier_phi_61_pred_2;
                _2546 = frontier_phi_61_pred_3;
                _2544 = frontier_phi_61_pred_4;
                _2542 = frontier_phi_61_pred_5;
                uint _2691 = _2690 + 1u;
                if (_2691 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2684 = _2540;
                    _2685 = _2542;
                    _2686 = _2544;
                    _2687 = _2546;
                    _2688 = _2548;
                    _2689 = _2550;
                    _2690 = _2691;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
            _2545 = _2546;
            _2547 = _2548;
            _2549 = _2550;
        }
        uvec4 _2553 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2554 = _2553.z;
        uint _2556 = (_2554 >> 8u) & 15u;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        if (((4294967295u << _2556) & _2438) == 0u)
        {
            _2652 = _2539;
            _2654 = _2541;
            _2656 = _2543;
            _2658 = _2545;
            _2660 = _2547;
            _2662 = _2549;
        }
        else
        {
            float _2677 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
            float _2678 = _2677 * _2392;
            float _2679 = _2677 * _2393;
            float _2680 = _2677 * _2394;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2556 < ((_2554 >> 12u) & 15u))
            {
                float _2653;
                float _2655;
                float _2657;
                float _2659;
                float _2661;
                float _2663;
                float _2791 = _2539;
                float _2792 = _2541;
                float _2793 = _2543;
                float _2794 = _2545;
                float _2795 = _2547;
                float _2796 = _2549;
                uint _2797 = _2556;
                uint _2806;
                bool _2807;
                for (;;)
                {
                    _2806 = texelFetch(g_lightClassification, int((((_2432 << 5u) + (_2418 << 9u)) + (_2797 << 2u)) >> 2u)).x;
                    _2807 = _2806 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2807)
                    {
                        frontier_phi_67_pred = _2794;
                        frontier_phi_67_pred_1 = _2795;
                        frontier_phi_67_pred_2 = _2796;
                        frontier_phi_67_pred_3 = _2793;
                        frontier_phi_67_pred_4 = _2792;
                        frontier_phi_67_pred_5 = _2791;
                    }
                    else
                    {
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2994;
                        float _2995;
                        float _2996;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3004 = _2791;
                        float _3005 = _2792;
                        float _3006 = _2793;
                        float _3007 = _2794;
                        float _3008 = _2795;
                        float _3009 = _2796;
                        uint _3010 = _2806;
                        uint _3011;
                        vec4 _3036;
                        float _3037;
                        vec4 _3052;
                        vec3 _3064;
                        vec4 _3079;
                        vec4 _3095;
                        float _3141;
                        bool _3142;
                        for (;;)
                        {
                            uint _3021 = ((_2797 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3010));
                            _3011 = (_3010 + 4294967295u) & _3010;
                            uint _3023 = _3021 * 40u;
                            _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            _3037 = _3036.w;
                            uint _3039 = (_3021 * 40u) + 4u;
                            _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            uint _3054 = (_3021 * 40u) + 8u;
                            _3064 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x));
                            uint _3066 = (_3021 * 40u) + 16u;
                            _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            uint _3082 = (_3021 * 40u) + 20u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            uint _3097 = (_3021 * 40u) + 24u;
                            vec4 _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3116 = (_3021 * 40u) + 28u;
                            vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            _3141 = fma(_2394, _3129.z, fma(_2393, _3129.y, _3129.x * _2392)) + _3129.w;
                            _3142 = !((fma(_2394, _3110.z, fma(_2393, _3110.y, _3110.x * _2392)) + _3110.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3142)
                            {
                                float _3169 = _3036.x - _2392;
                                float _3170 = _3036.y - _2393;
                                float _3171 = _3036.z - _2394;
                                float _3172 = dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171));
                                float _3175 = inversesqrt(_3172);
                                float _3176 = _3175 * _3169;
                                float _3177 = _3175 * _3170;
                                float _3178 = _3175 * _3171;
                                float _3182 = 1.0 - (_3172 / (_3037 * _3037));
                                float _4251 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3183 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                                float _3187 = sqrt(_3172) * _3052.w;
                                float _3189 = 1.39999997615814208984375 / (_3187 + 1.39999997615814208984375);
                                float _3190 = _3189 * _3189;
                                float _3193 = ((1.0 - _3190) * dot(vec3(_3176, _3177, _3178), vec3(_699, _702, _705))) + _3190;
                                float _3196 = _3187 * _3187;
                                float _3200 = (fma(_2394, _3079.z, fma(_2393, _3079.y, _3079.x * _2392)) + _3079.w) / _3141;
                                float _3201 = (fma(_2394, _3095.z, fma(_2393, _3095.y, _3095.x * _2392)) + _3095.w) / _3141;
                                float _3205 = 1.0 - dot(vec2(_3200, _3201), vec2(_3200, _3201));
                                float _4267 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3206 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3207 = _3206 * (((isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0))) * _3183) / ((_3196 * 0.699999988079071044921875) + 1.0));
                                float _3219 = exp2(log2(1.0 / ((_3196 * 3.5) + 5.0)) * 0.25);
                                float _3220 = 1.0 - _759;
                                float _3227 = sqrt(1.0 - ((1.0 - (_3220 * _3220)) * (1.0 - (_3219 * _3219))));
                                float _3228 = _3227 * _3227;
                                float _3229 = _3228 * _3228;
                                float _3230 = _3176 - _2678;
                                float _3231 = _3177 - _2679;
                                float _3232 = _3178 - _2680;
                                float _3236 = inversesqrt(dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232)));
                                float _3240 = dot(vec3(_699, _702, _705), vec3((-0.0) - _2678, (-0.0) - _2679, (-0.0) - _2680));
                                float _4278 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3243 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3244 = dot(vec3(_699, _702, _705), vec3(_3236 * _3230, _3236 * _3231, _3236 * _3232));
                                float _4289 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3247 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3251 = ((_3247 * _3247) * (_3229 + (-1.0))) + 1.0;
                                float _3252 = _3189 * _3228;
                                float _3253 = _3252 * _3252;
                                float _3259 = ((1.0 - _3253) * dot(vec3(_699, _702, _705), vec3(_3176, _3177, _3178))) + _3253;
                                float _4300 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3260 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3261 = 1.0 - _3228;
                                float _3271 = (0.5 / (((_3260 * ((_3243 * _3261) + _3228)) + 9.9999999392252902907785028219223e-09) + (((_3260 * _3261) + _3228) * _3243))) * _3260;
                                float _4311 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3281 = (_3206 * _3183) * (((_3229 * 3.1415927410125732421875) * (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) / ((_3251 * _3251) * ((_3196 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3281 * _3064.x;
                                frontier_phi_73_pred_1 = _3281 * _3064.y;
                                frontier_phi_73_pred_2 = _3207 * _3052.z;
                                frontier_phi_73_pred_3 = _3207 * _3052.y;
                                frontier_phi_73_pred_4 = _3207 * _3052.x;
                                frontier_phi_73_pred_5 = _3281 * _3064.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3285 = frontier_phi_73_pred;
                            _3286 = frontier_phi_73_pred_1;
                            _3290 = frontier_phi_73_pred_2;
                            _3289 = frontier_phi_73_pred_3;
                            _3288 = frontier_phi_73_pred_4;
                            _3287 = frontier_phi_73_pred_5;
                            _2994 = _3288 + _3007;
                            _2995 = _3289 + _3008;
                            _2996 = _3290 + _3009;
                            _2991 = _3285 + _3004;
                            _2992 = _3286 + _3005;
                            _2993 = _3287 + _3006;
                            if (_3011 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _3011;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2994;
                        frontier_phi_67_pred_1 = _2995;
                        frontier_phi_67_pred_2 = _2996;
                        frontier_phi_67_pred_3 = _2993;
                        frontier_phi_67_pred_4 = _2992;
                        frontier_phi_67_pred_5 = _2991;
                    }
                    _2659 = frontier_phi_67_pred;
                    _2661 = frontier_phi_67_pred_1;
                    _2663 = frontier_phi_67_pred_2;
                    _2657 = frontier_phi_67_pred_3;
                    _2655 = frontier_phi_67_pred_4;
                    _2653 = frontier_phi_67_pred_5;
                    uint _2798 = _2797 + 1u;
                    if (_2798 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2791 = _2653;
                        _2792 = _2655;
                        _2793 = _2657;
                        _2794 = _2659;
                        _2795 = _2661;
                        _2796 = _2663;
                        _2797 = _2798;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2661;
                frontier_phi_55_56_ladder_1 = _2663;
                frontier_phi_55_56_ladder_2 = _2659;
                frontier_phi_55_56_ladder_3 = _2657;
                frontier_phi_55_56_ladder_4 = _2655;
                frontier_phi_55_56_ladder_5 = _2653;
            }
            else
            {
                frontier_phi_55_56_ladder = _2547;
                frontier_phi_55_56_ladder_1 = _2549;
                frontier_phi_55_56_ladder_2 = _2545;
                frontier_phi_55_56_ladder_3 = _2543;
                frontier_phi_55_56_ladder_4 = _2541;
                frontier_phi_55_56_ladder_5 = _2539;
            }
            _2652 = frontier_phi_55_56_ladder_5;
            _2654 = frontier_phi_55_56_ladder_4;
            _2656 = frontier_phi_55_56_ladder_3;
            _2658 = frontier_phi_55_56_ladder_2;
            _2660 = frontier_phi_55_56_ladder;
            _2662 = frontier_phi_55_56_ladder_1;
        }
        float _2667 = isnan(1.0) ? _743 : (isnan(_743) ? 1.0 : min(_743, 1.0));
        _2451 = (_2667 * _2658) + _1906;
        _2453 = (_2667 * _2660) + _1908;
        _2455 = (_2667 * _2662) + _1910;
        _2457 = ((_2652 * 0.039999999105930328369140625) * _2667) + _2236;
        _2459 = ((_2654 * 0.039999999105930328369140625) * _2667) + _2238;
        _2461 = ((_2656 * 0.039999999105930328369140625) * _2667) + _2240;
    }
    else
    {
        _2451 = _1906;
        _2453 = _1908;
        _2455 = _1910;
        _2457 = _2236;
        _2459 = _2238;
        _2461 = _2240;
    }
    float _4327 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4338 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4349 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    uint _2481 = _228 + 6u;
    float _2489 = _680 / cbSceneParam._m0[86u].x;
    float _2490 = _681 / cbSceneParam._m0[86u].y;
    vec4 _2504 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2489, _2490, (log2((isnan(cbSceneParam._m0[77u].w) ? _613 : (isnan(_613) ? cbSceneParam._m0[77u].w : min(_613, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2506 = _2504.x;
    float _2507 = _2504.y;
    float _2508 = _2504.z;
    float _2509 = _2504.w;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    if (_613 > cbSceneParam._m0[78u].w)
    {
        float _2564 = isnan(_613) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _613 : min(cbSceneParam._m0[80u].w, _613));
        float _2565 = _2564 / _613;
        float _2576 = _2565 * _665;
        float _2577 = _666 * _2565;
        float _2578 = (-0.0) - _2577;
        float _2580 = _2565 * _667;
        float _2582 = (cbSceneParam._m0[77u].w * _2578) / _2564;
        float _2583 = _2582 + cbSceneParam._m0[79u].w;
        float _2584 = cbSceneParam._m0[79u].w - _2577;
        float _2590 = sqrt(((_2576 * _2576) + (_2577 * _2577)) + (_2580 * _2580));
        float _2593 = (1.0 - (cbSceneParam._m0[77u].w / _2564)) * _2590;
        float _2598 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2600 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2753;
        if (abs((_2578 - _2582) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2753 = ((((_2583 > 0.0) ? exp2(_2598 * _2583) : (2.0 - exp2(_2600 * _2583))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2593;
        }
        else
        {
            float _2713 = 1.0 / cbSceneParam._m0[80u].x;
            float _2714 = isnan(_2584) ? _2583 : (isnan(_2583) ? _2584 : max(_2583, _2584));
            float _2715 = isnan(_2584) ? _2583 : (isnan(_2583) ? _2584 : min(_2583, _2584));
            float _2724 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : min(_2714, 0.0));
            float _2725 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : min(_2715, 0.0));
            _2753 = ((abs(_2590 / _2578) * cbSceneParam._m0[80u].y) * ((((_2724 - _2725) * 2.0) - ((exp2(_2598 * (isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0)))) - exp2(_2598 * (isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0))))) * _2713)) - ((exp2(_2600 * _2724) - exp2(_2600 * _2725)) * _2713))) + (_2593 * cbSceneParam._m0[80u].z);
        }
        vec4 _2755 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2489, _2490, 1.0), 0.0);
        float _2764 = exp2((_2753 * (-1.44269502162933349609375)) * (1.0 - _2755.w));
        float _2765 = log2(_2764);
        float _2781 = log2(_2509);
        _2602 = (exp2(_2781 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2765 * cbSceneParam._m0[78u].x)) * _2755.x) / cbSceneParam._m0[78u].x)) + _2506;
        _2604 = (exp2(_2781 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2765 * cbSceneParam._m0[78u].y)) * _2755.y) / cbSceneParam._m0[78u].y)) + _2507;
        _2606 = (exp2(_2781 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2765 * cbSceneParam._m0[78u].z)) * _2755.z) / cbSceneParam._m0[78u].z)) + _2508;
        _2608 = _2764 * _2509;
    }
    else
    {
        _2602 = _2506;
        _2604 = _2507;
        _2606 = _2508;
        _2608 = _2509;
    }
    float _2620 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2621 = _2620 == 3.0;
    float _2622 = log2(_2608);
    float _2629 = exp2(_2622 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2451 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _743))) + ((_2457 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1548)) * cbPerFrame._m0[3u].x));
    float _2630 = exp2(_2622 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2453 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _743))) + ((_2459 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1548)) * cbPerFrame._m0[3u].x));
    float _2631 = exp2(_2622 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2455 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _743))) + ((_2461 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1548)) * cbPerFrame._m0[3u].x));
    float _2640 = (_2620 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2640 * (_2621 ? _2629 : (_2629 + (cbSceneParam._m0[72u].w * _2602)));
    SV_Target.y = _2640 * (_2621 ? _2630 : (_2630 + (cbSceneParam._m0[72u].w * _2604)));
    SV_Target.z = _2640 * (_2621 ? _2631 : (_2631 + (cbSceneParam._m0[72u].w * _2606)));
    SV_Target.w = cbInstanceData._m0[_2481].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2481].w;
}


