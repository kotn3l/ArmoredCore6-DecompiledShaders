#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1158;
float _3802;
float _3803;
float _3804;
float _3805;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _307 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _331 = _327.z;
    float _336 = (_327.x * 2.0) + (-1.0);
    float _338 = (_327.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_336, _338), vec2(_336, _338));
    float _3814 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _345 = sqrt(1.0 - (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0))));
    float _348 = fma(_345, _229, fma(_338, _236, _336 * _222));
    float _351 = fma(_345, _230, fma(_338, _237, _336 * _223));
    float _354 = fma(_345, _231, fma(_338, _238, _336 * _224));
    float _358 = inversesqrt(dot(vec3(_348, _351, _354), vec3(_348, _351, _354)));
    vec4 _394 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _396 = _394.x;
    float _397 = 1.0 - _396;
    float _406 = (cbMtdParam._m0[19u].x + dot(vec4(_358 * _348, _358 * _351, _358 * _354, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_396 - _397) * cbMtdParam._m0[24u].z) + _397) * cbMtdParam._m0[21u].z);
    float _3825 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _409 = (-0.0) - cbMtdParam._m0[24u].y;
    float _411 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _412 = isnan(1.0) ? _411 : (isnan(_411) ? 1.0 : min(_411, 1.0));
    float _419 = _407 - ((_407 * TEXCOORD_8.x) * _412);
    float _420 = _407 - ((_407 * TEXCOORD_8.y) * _412);
    float _421 = _407 - ((_407 * TEXCOORD_8.z) * _412);
    float _428 = (_419 * ((_307.x * cbMtdParam._m0[18u].x) - _286)) + _286;
    float _429 = (_420 * ((_307.y * cbMtdParam._m0[18u].y) - _287)) + _287;
    float _430 = (_421 * ((_307.z * cbMtdParam._m0[18u].z) - _288)) + _288;
    vec4 _442 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _444 = _442.x;
    float _445 = 1.0 - _444;
    float _475 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_444 - _445) * cbMtdParam._m0[24u].w) + _445) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3846 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _476 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _484 = ((((cbMtdParam._m0[10u].x - _428) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _476) + _428;
    float _485 = ((((cbMtdParam._m0[10u].y - _429) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _476) + _429;
    float _486 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _430)) * _476) + _430;
    vec4 _500 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _507 = (_500.x * 2.0) + (-1.0);
    float _508 = (_500.y * 2.0) + (-1.0);
    float _509 = dot(vec2(_507, _508), vec2(_507, _508));
    float _3857 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _517 = ((_500.z - _331) * _419) + _331;
    float _520 = ((cbMtdParam._m0[23u].y - _517) * _476) + _517;
    vec4 _539 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _545 = (_539.x * 2.0) + (-1.0);
    float _546 = (_539.y * 2.0) + (-1.0);
    float _547 = dot(vec2(_545, _546), vec2(_545, _546));
    float _3868 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _562 = ((sqrt(1.0 - (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) - _345) * _421) + _345;
    float _565 = (((_507 - _336) * _419) + _336) + (cbMtdParam._m0[21u].x * _336);
    float _566 = (((_508 - _338) * _420) + _338) + (cbMtdParam._m0[21u].x * _338);
    float _577 = (((_545 - _565) + (_565 * cbMtdParam._m0[22u].z)) * _476) + _565;
    float _578 = (((_546 - _566) + (_566 * cbMtdParam._m0[22u].z)) * _476) + _566;
    float _579 = (_476 * (sqrt(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) - _562)) + _562;
    float _581 = cbMtdParam._m0[22u].x + _327.w;
    float _584 = fma(_579, _229, fma(_578, _236, _577 * _222));
    float _587 = fma(_579, _230, fma(_578, _237, _577 * _223));
    float _590 = fma(_579, _231, fma(_578, _238, _577 * _224));
    float _594 = inversesqrt(dot(vec3(_584, _587, _590), vec3(_584, _587, _590)));
    float _595 = _594 * _584;
    float _596 = _594 * _587;
    float _597 = _594 * _590;
    float _3879 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _598 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _3901 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3912 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3923 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _616 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _656 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _666 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _656);
    float _667 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _656);
    float _668 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _656);
    float _672 = inversesqrt(dot(vec3(_666, _667, _668), vec3(_666, _667, _668)));
    float _673 = _666 * _672;
    float _674 = _667 * _672;
    float _675 = _668 * _672;
    vec4 _680 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _682 = _680.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _839 = sqrt(((_666 * _666) + (_667 * _667)) + (_668 * _668));
        float _845 = (cbMatDynParam._m0[5u].x * _839) + cbMatDynParam._m0[5u].y;
        float _3934 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _850 = (cbMatDynParam._m0[5u].z * _839) + cbMatDynParam._m0[5u].w;
        float _3945 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) - _846)) + _846) < ((_682 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _694 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _695 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _715 = fma(_597, cbSceneParam._m0[5u].z, fma(_596, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _595));
    float _718 = fma(_597, cbSceneParam._m0[6u].z, fma(_596, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _595));
    float _721 = fma(_597, cbSceneParam._m0[7u].z, fma(_596, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _595));
    uint _734 = _241 + 9u;
    uint _735 = _734 + uint(cbMatDynParam._m0[0u].w);
    float _741 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_735].x;
    float _742 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_735].y;
    float _743 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_735].z;
    float _3956 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    vec4 _755 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _694, cbSceneParam._m0[86u].y * _695));
    float _759 = ((isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * TEXCOORD_5.w) * _755.x;
    float _760 = dot(vec3(_595, _596, _597), vec3(_673, _674, _675));
    float _763 = _760 * 2.0;
    float _767 = (_763 * _595) - _673;
    float _768 = (_763 * _596) - _674;
    float _769 = (_763 * _597) - _675;
    float _773 = abs(dot(vec3(_673, _674, _675), vec3(_595, _596, _597)));
    float _3989 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _775 = sqrt(_598);
    float _788 = exp2((_775 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_775 * 3.0));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1157;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _882 = fma(_828, cbModelParam._m0[26u].z, fma(_824, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _820));
        float _886 = fma(_828, cbModelParam._m0[27u].z, fma(_824, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _820));
        float _890 = fma(_828, cbModelParam._m0[28u].z, fma(_824, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _820));
        float _915 = _820 + _595;
        float _916 = _824 + _596;
        float _917 = _828 + _597;
        float _927 = fma(_917, cbModelParam._m0[26u].z, fma(_916, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _915)) - _882;
        float _928 = fma(_917, cbModelParam._m0[27u].z, fma(_916, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _915)) - _886;
        float _929 = fma(_917, cbModelParam._m0[28u].z, fma(_916, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _915)) - _890;
        float _933 = inversesqrt(dot(vec3(_927, _928, _929), vec3(_927, _928, _929)));
        float _946 = ((_933 * _927) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_882 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_933 * _928) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_886 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_933 * _929) / cbModelParam._m0[34u].z) + ((((((_890 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        float _985 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_951.x + (-0.5));
        float _987 = _985 * (_951.y + (-0.5));
        float _988 = _985 * (_951.z + (-0.5));
        float _995 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_958.x + (-0.5));
        float _997 = _995 * (_958.y + (-0.5));
        float _998 = _995 * (_958.z + (-0.5));
        float _1005 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_965.x + (-0.5));
        float _1007 = _1005 * (_965.y + (-0.5));
        float _1008 = _1005 * (_965.z + (-0.5));
        float _1015 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_972.x + (-0.5));
        float _1017 = _1015 * (_972.y + (-0.5));
        float _1018 = _1015 * (_972.z + (-0.5));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = _986 * 0.5;
        float _1023 = _996 * 0.5;
        float _1024 = _1006 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1039 = (dot(vec3(_595, _596, _597), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1049 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _4037 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1051 + 1.0))) + _1056) * _1019;
        float _1066 = _987 * 0.5;
        float _1067 = _997 * 0.5;
        float _1068 = _1007 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_595, _596, _597), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _4070 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1093 + 1.0))) + _1098) * _1020;
        float _1108 = _988 * 0.5;
        float _1109 = _998 * 0.5;
        float _1110 = _1008 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_595, _596, _597), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _4103 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1135 + 1.0))) + _1140) * _1021;
        _1157 = _988;
        _1159 = _987;
        _1160 = _986;
        _1161 = _998;
        _1162 = _997;
        _1163 = _996;
        _1164 = _1008;
        _1165 = _1007;
        _1166 = _1006;
        _1167 = _1021;
        _1168 = _1020;
        _1169 = _1019;
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
    }
    else
    {
        _1157 = _1158;
        _1159 = _1158;
        _1160 = _1158;
        _1161 = _1158;
        _1162 = _1158;
        _1163 = _1158;
        _1164 = _1158;
        _1165 = _1158;
        _1166 = _1158;
        _1167 = _1158;
        _1168 = _1158;
        _1169 = _1158;
        _1170 = 0.0;
        _1171 = 0.0;
        _1172 = 0.0;
    }
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1200 = fma(_828, cbModelParam._m0[30u].z, fma(_824, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _820));
        float _1204 = fma(_828, cbModelParam._m0[31u].z, fma(_824, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _820));
        float _1208 = fma(_828, cbModelParam._m0[32u].z, fma(_824, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _820));
        float _1231 = _820 + _595;
        float _1232 = _824 + _596;
        float _1233 = _828 + _597;
        float _1243 = fma(_1233, cbModelParam._m0[30u].z, fma(_1232, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1231)) - _1200;
        float _1244 = fma(_1233, cbModelParam._m0[31u].z, fma(_1232, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1231)) - _1204;
        float _1245 = fma(_1233, cbModelParam._m0[32u].z, fma(_1232, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1231)) - _1208;
        float _1249 = inversesqrt(dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245)));
        float _1262 = ((_1249 * _1243) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1200 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1249 * _1244) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1204 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1249 * _1245) / cbModelParam._m0[35u].z) + ((((((_1208 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1262, _1263, _1264), 0.0);
        float _1299 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1266.x + (-0.5));
        float _1301 = _1299 * (_1266.y + (-0.5));
        float _1302 = _1299 * (_1266.z + (-0.5));
        float _1309 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1273.x + (-0.5));
        float _1311 = _1309 * (_1273.y + (-0.5));
        float _1312 = _1309 * (_1273.z + (-0.5));
        float _1319 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1280.x + (-0.5));
        float _1321 = _1319 * (_1280.y + (-0.5));
        float _1322 = _1319 * (_1280.z + (-0.5));
        float _1329 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1287.x + (-0.5));
        float _1331 = _1329 * (_1287.y + (-0.5));
        float _1332 = _1329 * (_1287.z + (-0.5));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = _1300 * 0.5;
        float _1337 = _1310 * 0.5;
        float _1338 = _1320 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_595, _596, _597), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4166 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1363 + 1.0))) + _1368) * _1333;
        float _1378 = _1301 * 0.5;
        float _1379 = _1311 * 0.5;
        float _1380 = _1321 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_595, _596, _597), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4199 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1405 + 1.0))) + _1410) * _1334;
        float _1420 = _1302 * 0.5;
        float _1421 = _1312 * 0.5;
        float _1422 = _1322 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_595, _596, _597), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4232 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1447 + 1.0))) + _1452) * _1335;
        _1469 = _1302;
        _1470 = _1301;
        _1471 = _1300;
        _1472 = _1312;
        _1473 = _1311;
        _1474 = _1310;
        _1475 = _1322;
        _1476 = _1321;
        _1477 = _1320;
        _1478 = _1335;
        _1479 = _1334;
        _1480 = _1333;
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1483 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
    }
    else
    {
        _1469 = _1158;
        _1470 = _1158;
        _1471 = _1158;
        _1472 = _1158;
        _1473 = _1158;
        _1474 = _1158;
        _1475 = _1158;
        _1476 = _1158;
        _1477 = _1158;
        _1478 = _1158;
        _1479 = _1158;
        _1480 = _1158;
        _1481 = 0.0;
        _1482 = 0.0;
        _1483 = 0.0;
    }
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1170)) + _1170;
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1171)) + _1171;
    float _1495 = (cbModelParam._m0[1u].x * (_1483 - _1172)) + _1172;
    float _1516 = fma(_1495, cbSceneParam._m0[89u].z, fma(_1494, cbSceneParam._m0[89u].y, _1493 * cbSceneParam._m0[89u].x));
    float _1519 = fma(_1495, cbSceneParam._m0[90u].z, fma(_1494, cbSceneParam._m0[90u].y, _1493 * cbSceneParam._m0[90u].x));
    float _1522 = fma(_1495, cbSceneParam._m0[91u].z, fma(_1494, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1493));
    float _1537 = _767 * 0.5;
    float _1538 = _768 * 0.5;
    float _1539 = _769 * 0.5;
    float _1540 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1471, _1474, _1477, _1480));
    float _1543 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1546 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1580;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1553 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1157, _1161, _1164, _1167));
        float _1557 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1159, _1162, _1165, _1168));
        float _1561 = dot(vec4(_1537, _1538, _1539, 1.0), vec4(_1160, _1163, _1166, _1169));
        float _1568 = dot(vec4(cbModelParam._m0[39u]), vec4(_1537, _1538, _1539, 1.0));
        _1580 = dot(vec3(isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1568) ? 0.0 : (isnan(0.0) ? _1568 : max(0.0, _1568))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1580 = 1.0;
    }
    float _1591;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1582 = dot(vec4(cbModelParam._m0[40u]), vec4(_1537, _1538, _1539, 1.0));
        _1591 = dot(vec3(isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1582) ? 0.0 : (isnan(0.0) ? _1582 : max(0.0, _1582))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1591 = 1.0;
    }
    float _1595 = (_1591 * cbModelParam._m0[1u].x) + (_1580 * (1.0 - cbModelParam._m0[1u].x));
    float _1605 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _598);
    float _1606 = isnan(_1605) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1605 : min(cbModelParam._m0[25u].z, _1605));
    float _1686;
    float _1688;
    float _1690;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1653 = fma(_828, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _820)) + cbModelParam._m0[13u].w;
        float _1657 = fma(_828, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _820)) + cbModelParam._m0[14u].w;
        float _1661 = fma(_828, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _820)) + cbModelParam._m0[15u].w;
        float _1664 = fma(_769, cbModelParam._m0[13u].z, fma(_768, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _767));
        float _1667 = fma(_769, cbModelParam._m0[14u].z, fma(_768, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _767));
        float _1670 = fma(_769, cbModelParam._m0[15u].z, fma(_768, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _767));
        float _1698;
        if (_1664 > 0.0)
        {
            _1698 = abs((1.0 - _1653) / _1664);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1653 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1698 = frontier_phi_17_15_ladder;
        }
        float _1868;
        if (_1667 > 0.0)
        {
            _1868 = abs((1.0 - _1657) / _1667);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1657 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1868 = frontier_phi_26_22_ladder;
        }
        float _2164;
        if (_1670 > 0.0)
        {
            _2164 = abs((1.0 - _1661) / _1670);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1661 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2164 = frontier_phi_38_33_ladder;
        }
        float _2166 = isnan(_1868) ? _1698 : (isnan(_1698) ? _1868 : min(_1698, _1868));
        float _2167 = isnan(_2164) ? _2166 : (isnan(_2166) ? _2164 : min(_2166, _2164));
        float _2171 = (_2167 * _1664) + _1653;
        float _2172 = (_2167 * _1667) + _1657;
        float _2173 = (_2167 * _1670) + _1661;
        float _2174 = _2167 * 9.9999997473787516355514526367188e-05;
        float _2176 = (-1.0) - _2174;
        float _2178 = _2174 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2173 > _2178) || ((_2173 < _2176) || ((_2172 > _2178) || ((_2172 < _2176) || ((_2171 < _2176) || (_2171 > _2178))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2318 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2173, cbModelParam._m0[9u].z, fma(_2172, cbModelParam._m0[9u].y, _2171 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2173, cbModelParam._m0[10u].z, fma(_2172, cbModelParam._m0[10u].y, _2171 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2173, cbModelParam._m0[11u].z, fma(_2172, cbModelParam._m0[11u].y, _2171 * cbModelParam._m0[11u].x))), _1606);
            frontier_phi_16_38_ladder = _2318.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2318.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2318.x * cbModelParam._m0[1u].y;
        }
        _1686 = frontier_phi_16_38_ladder_2;
        _1688 = frontier_phi_16_38_ladder_1;
        _1690 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_767, _768, _769), _1606);
        _1686 = _1674.x * cbModelParam._m0[1u].y;
        _1688 = _1674.y * cbModelParam._m0[1u].y;
        _1690 = _1674.z * cbModelParam._m0[1u].y;
    }
    float _1694 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _598);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1694 : min(cbModelParam._m0[25u].w, _1694));
    float _1784;
    float _1786;
    float _1788;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1748 = fma(_828, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _820)) + cbModelParam._m0[21u].w;
        float _1752 = fma(_828, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _820)) + cbModelParam._m0[22u].w;
        float _1756 = fma(_828, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _820)) + cbModelParam._m0[23u].w;
        float _1759 = fma(_769, cbModelParam._m0[21u].z, fma(_768, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _767));
        float _1762 = fma(_769, cbModelParam._m0[22u].z, fma(_768, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _767));
        float _1765 = fma(_769, cbModelParam._m0[23u].z, fma(_768, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _767));
        float _1873;
        if (_1759 > 0.0)
        {
            _1873 = abs((1.0 - _1748) / _1759);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1748 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1873 = frontier_phi_28_24_ladder;
        }
        float _2191;
        if (_1762 > 0.0)
        {
            _2191 = abs((1.0 - _1752) / _1762);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1752 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2191 = frontier_phi_40_35_ladder;
        }
        float _2518;
        if (_1765 > 0.0)
        {
            _2518 = abs((1.0 - _1756) / _1765);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1756 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2518 = frontier_phi_50_47_ladder;
        }
        float _2520 = isnan(_2191) ? _1873 : (isnan(_1873) ? _2191 : min(_1873, _2191));
        float _2521 = isnan(_2518) ? _2520 : (isnan(_2520) ? _2518 : min(_2520, _2518));
        float _2525 = (_2521 * _1759) + _1748;
        float _2526 = (_2521 * _1762) + _1752;
        float _2527 = (_2521 * _1765) + _1756;
        float _2528 = _2521 * 9.9999997473787516355514526367188e-05;
        float _2529 = (-1.0) - _2528;
        float _2531 = _2528 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2527 > _2531) || ((_2527 < _2529) || ((_2526 > _2531) || ((_2526 < _2529) || ((_2525 < _2529) || (_2525 > _2531))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2645 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2527, cbModelParam._m0[17u].z, fma(_2526, cbModelParam._m0[17u].y, _2525 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2527, cbModelParam._m0[18u].z, fma(_2526, cbModelParam._m0[18u].y, _2525 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2527, cbModelParam._m0[19u].z, fma(_2526, cbModelParam._m0[19u].y, _2525 * cbModelParam._m0[19u].x))), _1695);
            frontier_phi_25_50_ladder = _2645.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2645.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2645.x * cbModelParam._m0[1u].z;
        }
        _1784 = frontier_phi_25_50_ladder_2;
        _1786 = frontier_phi_25_50_ladder_1;
        _1788 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1768 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_767, _768, _769), _1695);
        _1784 = _1768.x * cbModelParam._m0[1u].z;
        _1786 = _1768.y * cbModelParam._m0[1u].z;
        _1788 = _1768.z * cbModelParam._m0[1u].z;
    }
    float _1800 = ((((1.0 - _788) * ((_775 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_788 * _775)) * _759;
    float _1801 = _1800 * ((cbModelParam._m0[1u].w * (_1784 - _1686)) + _1686);
    float _1802 = _1800 * ((cbModelParam._m0[1u].w * (_1786 - _1688)) + _1688);
    float _1803 = _1800 * ((cbModelParam._m0[1u].w * (_1788 - _1690)) + _1690);
    float _1806 = fma(_1803, cbSceneParam._m0[89u].z, fma(_1802, cbSceneParam._m0[89u].y, _1801 * cbSceneParam._m0[89u].x));
    float _1809 = fma(_1803, cbSceneParam._m0[90u].z, fma(_1802, cbSceneParam._m0[90u].y, _1801 * cbSceneParam._m0[90u].x));
    float _1812 = fma(_1803, cbSceneParam._m0[91u].z, fma(_1802, cbSceneParam._m0[91u].y, _1801 * cbSceneParam._m0[91u].x));
    float _1847 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1851 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1855 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1859 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1860 = _1847 / _1859;
    float _1861 = _1851 / _1859;
    float _1862 = _1855 / _1859;
    float _2009;
    float _2010;
    float _2011;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1889 = ((uint(_1862 > cbSceneParam._m0[59u].y) + uint(_1862 > cbSceneParam._m0[59u].x)) + uint(_1862 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1890 = _1889 + 43u;
        uint _1898 = _1889 + 44u;
        uint _1906 = _1889 + 45u;
        uint _1914 = _1889 + 46u;
        float _1925 = fma(_1859, cbSceneParam._m0[_1890].w, fma(_1855, cbSceneParam._m0[_1890].z, fma(_1851, cbSceneParam._m0[_1890].y, _1847 * cbSceneParam._m0[_1890].x)));
        float _1929 = fma(_1859, cbSceneParam._m0[_1898].w, fma(_1855, cbSceneParam._m0[_1898].z, fma(_1851, cbSceneParam._m0[_1898].y, _1847 * cbSceneParam._m0[_1898].x)));
        float _1937 = fma(_1859, cbSceneParam._m0[_1914].w, fma(_1855, cbSceneParam._m0[_1914].z, fma(_1851, cbSceneParam._m0[_1914].y, _1847 * cbSceneParam._m0[_1914].x)));
        float _1942 = cbSceneParam._m0[33u].z * _1937;
        float _1944 = cbSceneParam._m0[33u].w * _1937;
        float _1947 = fma(_1859, cbSceneParam._m0[_1906].w, fma(_1855, cbSceneParam._m0[_1906].z, fma(_1851, cbSceneParam._m0[_1906].y, _1847 * cbSceneParam._m0[_1906].x))) / _1937;
        float _1995 = (cbSceneParam._m0[33u].x - sqrt(((_1861 * _1861) + (_1860 * _1860)) + (_1862 * _1862))) * cbSceneParam._m0[33u].y;
        float _4358 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _2002 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1942 + _1925) / _1937, (_1944 + _1929) / _1937), _1947), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1944 + _1925) / _1937, (_1929 - _1942) / _1937), _1947), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1925 - _1942) / _1937, (_1929 - _1944) / _1937), _1947), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1925 - _1944) / _1937, (_1942 + _1929) / _1937), _1947), 0.0)).x), vec4(0.25)));
        _2009 = 1.0 - (_2002 * cbSceneParam._m0[34u].x);
        _2010 = 1.0 - (_2002 * cbSceneParam._m0[34u].y);
        _2011 = 1.0 - (_2002 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2009 = 1.0;
        _2010 = 1.0;
        _2011 = 1.0;
    }
    float _2075;
    float _2077;
    float _2079;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2063 = fma(_1859, cbSceneParam._m0[63u].w, fma(_1855, cbSceneParam._m0[63u].z, fma(_1851, cbSceneParam._m0[63u].y, _1847 * cbSceneParam._m0[63u].x)));
        float _2064 = fma(_1859, cbSceneParam._m0[60u].w, fma(_1855, cbSceneParam._m0[60u].z, fma(_1851, cbSceneParam._m0[60u].y, _1847 * cbSceneParam._m0[60u].x))) / _2063;
        float _2065 = fma(_1859, cbSceneParam._m0[61u].w, fma(_1855, cbSceneParam._m0[61u].z, fma(_1851, cbSceneParam._m0[61u].y, _1847 * cbSceneParam._m0[61u].x))) / _2063;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2064 >= cbSceneParam._m0[64u].x) && (_2065 >= cbSceneParam._m0[64u].y)) && (_2064 <= cbSceneParam._m0[64u].z)) && (_2065 <= cbSceneParam._m0[64u].w))
        {
            float _2204 = fma(_1859, cbSceneParam._m0[62u].w, fma(_1855, cbSceneParam._m0[62u].z, fma(_1851, cbSceneParam._m0[62u].y, _1847 * cbSceneParam._m0[62u].x))) / _2063;
            float _2208 = isnan(cbSceneParam._m0[41u].w) ? _2204 : (isnan(_2204) ? cbSceneParam._m0[41u].w : max(_2204, cbSceneParam._m0[41u].w));
            float _2251 = (cbSceneParam._m0[33u].x - sqrt(((_1861 * _1861) + (_1860 * _1860)) + (_1862 * _1862))) * cbSceneParam._m0[33u].y;
            float _4374 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
            float _2258 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2064, cbSceneParam._m0[33u].w + _2065), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2064, _2065 - cbSceneParam._m0[33u].z), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2064 - cbSceneParam._m0[33u].z, _2065 - cbSceneParam._m0[33u].w), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2064 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2065), _2208), 0.0)).x), vec4(0.25)));
            float _2262 = 1.0 - (_2258 * cbSceneParam._m0[34u].x);
            float _2263 = 1.0 - (_2258 * cbSceneParam._m0[34u].y);
            float _2264 = 1.0 - (_2258 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2264) ? _2011 : (isnan(_2011) ? _2264 : min(_2011, _2264));
            frontier_phi_37_36_ladder_1 = isnan(_2263) ? _2010 : (isnan(_2010) ? _2263 : min(_2010, _2263));
            frontier_phi_37_36_ladder_2 = isnan(_2262) ? _2009 : (isnan(_2009) ? _2262 : min(_2009, _2262));
        }
        else
        {
            frontier_phi_37_36_ladder = _2011;
            frontier_phi_37_36_ladder_1 = _2010;
            frontier_phi_37_36_ladder_2 = _2009;
        }
        _2075 = frontier_phi_37_36_ladder_2;
        _2077 = frontier_phi_37_36_ladder_1;
        _2079 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2075 = _2009;
        _2077 = _2010;
        _2079 = _2011;
    }
    uvec4 _2084 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _2086 = _2084.x * 14u;
    uint _2087 = _2086 + 13u;
    float _2094 = _759 + (-1.0);
    float _2099 = (cbLight._m0[_2087].x * _2094) + 1.0;
    float _2100 = (cbLight._m0[_2087].y * _2094) + 1.0;
    float _2101 = (cbLight._m0[_2087].z * _2094) + 1.0;
    float _2102 = (cbLight._m0[_2087].w * _2094) + 1.0;
    uint _2103 = _2086 + 5u;
    float _2109 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
    uint _2113 = _2086 + 4u;
    float _2123 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
    uint _2127 = _2086 | 1u;
    float _2138 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_595, _596, _597));
    float _2141 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_595, _596, _597));
    float _4410 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _4421 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2146 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * 0.3183098733425140380859375;
    float _2148 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * 0.3183098733425140380859375;
    float _2155 = ((cbLight._m0[_2103].x * _2109) * _2148) + (((cbLight._m0[_2113].x * _2075) * _2123) * _2146);
    float _2156 = ((_2109 * cbLight._m0[_2103].y) * _2148) + (((cbLight._m0[_2113].y * _2077) * _2123) * _2146);
    float _2157 = ((_2109 * cbLight._m0[_2103].z) * _2148) + (((cbLight._m0[_2113].z * _2079) * _2123) * _2146);
    uvec4 _2161 = floatBitsToUint(cbLight._m0[_2086 + 12u]);
    bool _2163 = _2161.x == 0u;
    float _2265;
    float _2267;
    float _2269;
    if (_2163)
    {
        _2265 = _2155;
        _2267 = _2156;
        _2269 = _2157;
    }
    else
    {
        uint _2273 = _2086 + 6u;
        float _2289 = (dot(vec3(cbLight._m0[_2086 + 2u].xyz), vec3(_595, _596, _597)) * 0.5) + 0.5;
        float _2290 = _2289 * _2289;
        float _4432 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2291 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2292 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2265 = (((cbLight._m0[_2273].x * 0.3183098733425140380859375) * _2291) * _2292) + _2155;
        _2267 = (((cbLight._m0[_2273].y * 0.3183098733425140380859375) * _2291) * _2292) + _2156;
        _2269 = (((cbLight._m0[_2273].z * 0.3183098733425140380859375) * _2291) * _2292) + _2157;
    }
    bool _2272 = _2161.y == 0u;
    float _2327;
    float _2329;
    float _2331;
    if (_2272)
    {
        _2327 = _2265;
        _2329 = _2267;
        _2331 = _2269;
    }
    else
    {
        uint _2489 = _2086 + 7u;
        float _2505 = (dot(vec3(cbLight._m0[_2086 + 3u].xyz), vec3(_595, _596, _597)) * 0.5) + 0.5;
        float _2506 = _2505 * _2505;
        float _4448 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2507 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2508 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2327 = (((cbLight._m0[_2489].x * 0.3183098733425140380859375) * _2507) * _2508) + _2265;
        _2329 = (((cbLight._m0[_2489].y * 0.3183098733425140380859375) * _2507) * _2508) + _2267;
        _2331 = (((cbLight._m0[_2489].z * 0.3183098733425140380859375) * _2507) * _2508) + _2269;
    }
    uint _2334 = _2086 + 8u;
    float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _598) * 0.949999988079071044921875);
    float _2348 = _2347 * _2347;
    float _2349 = cbLight._m0[_2086].x + _673;
    float _2350 = cbLight._m0[_2086].y + _674;
    float _2351 = cbLight._m0[_2086].z + _675;
    float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
    float _2356 = _2355 * _2349;
    float _2357 = _2355 * _2350;
    float _2358 = _2355 * _2351;
    float _2359 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_2086].xyz));
    float _4464 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _4475 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _2363 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2364 = dot(vec3(_595, _596, _597), vec3(_2356, _2357, _2358));
    float _4486 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2368 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2356, _2357, _2358));
    float _4497 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2372 = _2348 * _2348;
    float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
    float _2387 = (exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2388 = 1.0 - _2348;
    float _2399 = (0.5 / (((_2363 * ((_2362 * _2388) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2388) + _2348) * _2362))) * _2362;
    float _4508 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2401 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
    uint _2415 = _2086 + 9u;
    float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _598) * 0.949999988079071044921875);
    float _2427 = _2426 * _2426;
    float _2428 = cbLight._m0[_2127].x + _673;
    float _2429 = cbLight._m0[_2127].y + _674;
    float _2430 = cbLight._m0[_2127].z + _675;
    float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
    float _2435 = _2434 * _2428;
    float _2436 = _2434 * _2429;
    float _2437 = _2434 * _2430;
    float _2438 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_2127].xyz));
    float _4519 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _2442 = dot(vec3(_595, _596, _597), vec3(_2435, _2436, _2437));
    float _4530 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _2446 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2435, _2436, _2437));
    float _4541 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2450 = _2427 * _2427;
    float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
    float _2463 = (exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2464 = 1.0 - _2427;
    float _2474 = (0.5 / (((_2363 * ((_2441 * _2464) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2464) + _2427) * _2441))) * _2441;
    float _4552 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2476 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
    float _2486 = (((_2463 * cbLight._m0[_2415].x) * _2476) * _2109) + ((((cbLight._m0[_2334].x * _2075) * _2387) * _2401) * _2123);
    float _2487 = (((_2463 * cbLight._m0[_2415].y) * _2476) * _2109) + ((((cbLight._m0[_2334].y * _2077) * _2387) * _2401) * _2123);
    float _2488 = (((_2463 * cbLight._m0[_2415].z) * _2476) * _2109) + ((((cbLight._m0[_2334].z * _2079) * _2387) * _2401) * _2123);
    float _2544;
    float _2546;
    float _2548;
    if (_2163)
    {
        _2544 = _2486;
        _2546 = _2487;
        _2548 = _2488;
    }
    else
    {
        uint _2550 = _2086 + 2u;
        uint _2554 = _2086 + 10u;
        float _2568 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2550].w)) * _598) * 0.949999988079071044921875);
        float _2569 = _2568 * _2568;
        float _2570 = cbLight._m0[_2550].x + _673;
        float _2571 = cbLight._m0[_2550].y + _674;
        float _2572 = cbLight._m0[_2550].z + _675;
        float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
        float _2577 = _2576 * _2570;
        float _2578 = _2576 * _2571;
        float _2579 = _2576 * _2572;
        float _2580 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_2550].xyz));
        float _4563 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2583 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2584 = dot(vec3(_595, _596, _597), vec3(_2577, _2578, _2579));
        float _4574 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2587 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2588 = dot(vec3(cbLight._m0[_2550].xyz), vec3(_2577, _2578, _2579));
        float _4585 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2592 = _2569 * _2569;
        float _2596 = ((_2587 * _2587) * (_2592 + (-1.0))) + 1.0;
        float _2605 = (exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2606 = 1.0 - _2569;
        float _2616 = (0.5 / (((_2363 * ((_2583 * _2606) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2606) + _2569) * _2583))) * _2583;
        float _4596 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2618 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2592 / ((_2596 * _2596) * 3.141590118408203125));
        float _2619 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2544 = (((_2605 * cbLight._m0[_2554].x) * _2618) * _2619) + _2486;
        _2546 = (((_2605 * cbLight._m0[_2554].y) * _2618) * _2619) + _2487;
        _2548 = (((_2605 * cbLight._m0[_2554].z) * _2618) * _2619) + _2488;
    }
    float _2650;
    float _2652;
    float _2654;
    if (_2272)
    {
        _2650 = _2544;
        _2652 = _2546;
        _2654 = _2548;
    }
    else
    {
        uint _2661 = _2086 + 3u;
        uint _2665 = _2086 + 11u;
        float _2679 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2661].w)) * _598) * 0.949999988079071044921875);
        float _2680 = _2679 * _2679;
        float _2681 = cbLight._m0[_2661].x + _673;
        float _2682 = cbLight._m0[_2661].y + _674;
        float _2683 = cbLight._m0[_2661].z + _675;
        float _2687 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
        float _2688 = _2687 * _2681;
        float _2689 = _2687 * _2682;
        float _2690 = _2687 * _2683;
        float _2691 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_2661].xyz));
        float _4612 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2694 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2695 = dot(vec3(_595, _596, _597), vec3(_2688, _2689, _2690));
        float _4623 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2698 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2699 = dot(vec3(cbLight._m0[_2661].xyz), vec3(_2688, _2689, _2690));
        float _4634 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2703 = _2680 * _2680;
        float _2707 = ((_2698 * _2698) * (_2703 + (-1.0))) + 1.0;
        float _2716 = (exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2717 = 1.0 - _2680;
        float _2727 = (0.5 / (((_2363 * ((_2694 * _2717) + _2680)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2717) + _2680) * _2694))) * _2694;
        float _4645 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2729 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2703 / ((_2707 * _2707) * 3.141590118408203125));
        float _2730 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2650 = (((_2716 * cbLight._m0[_2665].x) * _2729) * _2730) + _2544;
        _2652 = (((_2716 * cbLight._m0[_2665].y) * _2729) * _2730) + _2546;
        _2654 = (((_2716 * cbLight._m0[_2665].z) * _2729) * _2730) + _2548;
    }
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    if (_2084.y == 0u)
    {
        uvec4 _2751 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2752 = _2751.x;
        uint _2763 = uint((float(_2751.y) * floor(float(uint(cbSceneParam._m0[85u].y * _695) / _2752))) + floor(float(uint(cbSceneParam._m0[85u].x * _694) / _2752)));
        float _2773 = (log2(_1862 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2774 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        uint _2777 = uint(isnan(14.0) ? _2774 : (isnan(_2774) ? 14.0 : min(_2774, 14.0)));
        uvec4 _2782 = texelFetch(g_lightClusterGridBuffer, int(((_2777 << 2u) + (_2763 << 6u)) >> 2u));
        uint _2783 = _2782.x;
        uint _2784 = _2751.z;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        if (((((1u << ((_2784 >> 4u) & 15u)) + 4294967295u) & _2783) == 0u) || ((_2784 & 240u) == 0u))
        {
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
            _2871 = 0.0;
            _2873 = 0.0;
        }
        else
        {
            float _2864;
            float _2866;
            float _2868;
            float _2870;
            float _2872;
            float _2874;
            float _3015 = 0.0;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            uint _3021 = 0u;
            uint _3030;
            bool _3031;
            for (;;)
            {
                _3030 = texelFetch(g_lightClassification, int((((_2777 << 5u) + (_2763 << 9u)) + (_3021 << 2u)) >> 2u)).x;
                _3031 = _3030 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3031)
                {
                    frontier_phi_71_pred = _3020;
                    frontier_phi_71_pred_1 = _3019;
                    frontier_phi_71_pred_2 = _3018;
                    frontier_phi_71_pred_3 = _3017;
                    frontier_phi_71_pred_4 = _3016;
                    frontier_phi_71_pred_5 = _3015;
                }
                else
                {
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    uint _3166;
                    _3160 = _3015;
                    _3161 = _3016;
                    _3162 = _3017;
                    _3163 = _3018;
                    _3164 = _3019;
                    _3165 = _3020;
                    _3166 = _3030;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    for (;;)
                    {
                        uint _3170 = uint(findLSB(_3166)) + (_3021 << 5u);
                        uint _3167 = (_3166 + 4294967295u) & _3166;
                        uint _3172 = _3170 * 48u;
                        vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3172)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 3u)).x));
                        uint _3192 = (_3170 * 48u) + 4u;
                        vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 3u)).x));
                        uint _3211 = (_3170 * 48u) + 8u;
                        vec3 _3222 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3211)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 2u)).x));
                        float _3226 = _3186.x - _1860;
                        float _3227 = _3186.y - _1861;
                        float _3228 = _3186.z - _1862;
                        float _3229 = dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228));
                        float _3232 = inversesqrt(_3229);
                        float _3233 = _3232 * _3226;
                        float _3234 = _3232 * _3227;
                        float _3235 = _3232 * _3228;
                        float _3236 = dot(vec3(_715, _718, _721), vec3(_3233, _3234, _3235));
                        float _3241 = 1.0 - (_3229 * _3186.w);
                        float _4671 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3242 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3243 = sqrt(_3229) * _3205.w;
                        float _3246 = 1.39999997615814208984375 / (_3243 + 1.39999997615814208984375);
                        float _3247 = _3246 * _3246;
                        float _3250 = ((1.0 - _3247) * _3236) + _3247;
                        float _3253 = _3243 * _3243;
                        float _3257 = ((isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0))) * _3242) / ((_3253 * 0.699999988079071044921875) + 1.0);
                        float _3261 = (-0.0) - _1860;
                        float _3262 = (-0.0) - _1861;
                        float _3263 = (-0.0) - _1862;
                        float _3267 = inversesqrt(dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263)));
                        float _3268 = _3267 * _3261;
                        float _3269 = _3267 * _3262;
                        float _3270 = _3267 * _3263;
                        float _3277 = exp2(log2(1.0 / ((_3253 * 3.5) + 5.0)) * 0.25);
                        float _3278 = 1.0 - _775;
                        float _3285 = sqrt(1.0 - ((1.0 - (_3278 * _3278)) * (1.0 - (_3277 * _3277))));
                        float _3286 = _3285 * _3285;
                        float _3287 = _3286 * _3286;
                        float _3288 = _3268 + _3233;
                        float _3289 = _3269 + _3234;
                        float _3290 = _3270 + _3235;
                        float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                        float _3298 = dot(vec3(_715, _718, _721), vec3(_3268, _3269, _3270));
                        float _4687 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3301 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                        float _3302 = dot(vec3(_715, _718, _721), vec3(_3294 * _3288, _3294 * _3289, _3294 * _3290));
                        float _4698 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3305 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                        float _3309 = ((_3305 * _3305) * (_3287 + (-1.0))) + 1.0;
                        float _3310 = _3246 * _3286;
                        float _3311 = _3310 * _3310;
                        float _3314 = ((1.0 - _3311) * _3236) + _3311;
                        float _4709 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3315 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                        float _3316 = 1.0 - _3286;
                        float _3326 = (0.5 / (((_3315 * ((_3301 * _3316) + _3286)) + 9.9999999392252902907785028219223e-09) + (((_3315 * _3316) + _3286) * _3301))) * _3315;
                        float _4720 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3337 = (((_3287 * 3.1415927410125732421875) * (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) / ((_3309 * _3309) * ((_3253 * 2.1991131305694580078125) + 3.141590118408203125))) * _3242;
                        _3090 = (_3257 * _3205.x) + _3163;
                        _3091 = (_3257 * _3205.y) + _3164;
                        _3092 = (_3257 * _3205.z) + _3165;
                        _3087 = (_3337 * _3222.x) + _3160;
                        _3088 = (_3337 * _3222.y) + _3161;
                        _3089 = (_3337 * _3222.z) + _3162;
                        if (_3167 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3160 = _3087;
                            _3161 = _3088;
                            _3162 = _3089;
                            _3163 = _3090;
                            _3164 = _3091;
                            _3165 = _3092;
                            _3166 = _3167;
                        }
                    }
                    frontier_phi_71_pred = _3092;
                    frontier_phi_71_pred_1 = _3091;
                    frontier_phi_71_pred_2 = _3090;
                    frontier_phi_71_pred_3 = _3089;
                    frontier_phi_71_pred_4 = _3088;
                    frontier_phi_71_pred_5 = _3087;
                }
                _2874 = frontier_phi_71_pred;
                _2872 = frontier_phi_71_pred_1;
                _2870 = frontier_phi_71_pred_2;
                _2868 = frontier_phi_71_pred_3;
                _2866 = frontier_phi_71_pred_4;
                _2864 = frontier_phi_71_pred_5;
                uint _3022 = _3021 + 1u;
                if (_3022 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3015 = _2864;
                    _3016 = _2866;
                    _3017 = _2868;
                    _3018 = _2870;
                    _3019 = _2872;
                    _3020 = _2874;
                    _3021 = _3022;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
            _2871 = _2872;
            _2873 = _2874;
        }
        uvec4 _2877 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2878 = _2877.z;
        uint _2880 = (_2878 >> 8u) & 15u;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        if (((4294967295u << _2880) & _2783) == 0u)
        {
            _2983 = _2863;
            _2985 = _2865;
            _2987 = _2867;
            _2989 = _2869;
            _2991 = _2871;
            _2993 = _2873;
        }
        else
        {
            float _3008 = inversesqrt(dot(vec3(_1860, _1861, _1862), vec3(_1860, _1861, _1862)));
            float _3009 = _3008 * _1860;
            float _3010 = _3008 * _1861;
            float _3011 = _3008 * _1862;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2880 < ((_2878 >> 12u) & 15u))
            {
                float _2984;
                float _2986;
                float _2988;
                float _2990;
                float _2992;
                float _2994;
                float _3143 = _2863;
                float _3144 = _2865;
                float _3145 = _2867;
                float _3146 = _2869;
                float _3147 = _2871;
                float _3148 = _2873;
                uint _3149 = _2880;
                uint _3158;
                bool _3159;
                for (;;)
                {
                    _3158 = texelFetch(g_lightClassification, int((((_2777 << 5u) + (_2763 << 9u)) + (_3149 << 2u)) >> 2u)).x;
                    _3159 = _3158 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3159)
                    {
                        frontier_phi_82_pred = _3148;
                        frontier_phi_82_pred_1 = _3147;
                        frontier_phi_82_pred_2 = _3146;
                        frontier_phi_82_pred_3 = _3145;
                        frontier_phi_82_pred_4 = _3144;
                        frontier_phi_82_pred_5 = _3143;
                    }
                    else
                    {
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3364 = _3143;
                        float _3365 = _3144;
                        float _3366 = _3145;
                        float _3367 = _3146;
                        float _3368 = _3147;
                        float _3369 = _3148;
                        uint _3370 = _3158;
                        uint _3371;
                        vec4 _3396;
                        float _3397;
                        vec4 _3412;
                        vec3 _3424;
                        vec4 _3440;
                        vec4 _3456;
                        float _3502;
                        bool _3503;
                        for (;;)
                        {
                            uint _3381 = ((_3149 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3370));
                            _3371 = (_3370 + 4294967295u) & _3370;
                            uint _3383 = _3381 * 40u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            _3397 = _3396.w;
                            uint _3399 = (_3381 * 40u) + 4u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3414 = (_3381 * 40u) + 8u;
                            _3424 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x));
                            uint _3427 = (_3381 * 40u) + 16u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3443 = (_3381 * 40u) + 20u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3458 = (_3381 * 40u) + 24u;
                            vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3477 = (_3381 * 40u) + 28u;
                            vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            _3502 = fma(_1862, _3490.z, fma(_1861, _3490.y, _3490.x * _1860)) + _3490.w;
                            _3503 = !((fma(_1862, _3471.z, fma(_1861, _3471.y, _3471.x * _1860)) + _3471.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3503)
                            {
                                float _3530 = _3396.x - _1860;
                                float _3531 = _3396.y - _1861;
                                float _3532 = _3396.z - _1862;
                                float _3533 = dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532));
                                float _3536 = inversesqrt(_3533);
                                float _3537 = _3536 * _3530;
                                float _3538 = _3536 * _3531;
                                float _3539 = _3536 * _3532;
                                float _3543 = 1.0 - (_3533 / (_3397 * _3397));
                                float _4731 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3548 = sqrt(_3533) * _3412.w;
                                float _3550 = 1.39999997615814208984375 / (_3548 + 1.39999997615814208984375);
                                float _3551 = _3550 * _3550;
                                float _3554 = ((1.0 - _3551) * dot(vec3(_3537, _3538, _3539), vec3(_715, _718, _721))) + _3551;
                                float _3557 = _3548 * _3548;
                                float _3561 = (fma(_1862, _3440.z, fma(_1861, _3440.y, _3440.x * _1860)) + _3440.w) / _3502;
                                float _3562 = (fma(_1862, _3456.z, fma(_1861, _3456.y, _3456.x * _1860)) + _3456.w) / _3502;
                                float _3566 = 1.0 - dot(vec2(_3561, _3562), vec2(_3561, _3562));
                                float _4747 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3567 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3568 = _3567 * (((isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0))) * _3544) / ((_3557 * 0.699999988079071044921875) + 1.0));
                                float _3580 = exp2(log2(1.0 / ((_3557 * 3.5) + 5.0)) * 0.25);
                                float _3581 = 1.0 - _775;
                                float _3588 = sqrt(1.0 - ((1.0 - (_3581 * _3581)) * (1.0 - (_3580 * _3580))));
                                float _3589 = _3588 * _3588;
                                float _3590 = _3589 * _3589;
                                float _3591 = _3537 - _3009;
                                float _3592 = _3538 - _3010;
                                float _3593 = _3539 - _3011;
                                float _3597 = inversesqrt(dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593)));
                                float _3601 = dot(vec3(_715, _718, _721), vec3((-0.0) - _3009, (-0.0) - _3010, (-0.0) - _3011));
                                float _4758 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3604 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3605 = dot(vec3(_715, _718, _721), vec3(_3597 * _3591, _3597 * _3592, _3597 * _3593));
                                float _4769 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3608 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3612 = ((_3608 * _3608) * (_3590 + (-1.0))) + 1.0;
                                float _3613 = _3550 * _3589;
                                float _3614 = _3613 * _3613;
                                float _3620 = ((1.0 - _3614) * dot(vec3(_715, _718, _721), vec3(_3537, _3538, _3539))) + _3614;
                                float _4780 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3622 = 1.0 - _3589;
                                float _3632 = (0.5 / (((_3621 * ((_3604 * _3622) + _3589)) + 9.9999999392252902907785028219223e-09) + (((_3621 * _3622) + _3589) * _3604))) * _3621;
                                float _4791 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3642 = (_3567 * _3544) * (((_3590 * 3.1415927410125732421875) * (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) / ((_3612 * _3612) * ((_3557 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3568 * _3412.z;
                                frontier_phi_88_pred_1 = _3568 * _3412.y;
                                frontier_phi_88_pred_2 = _3568 * _3412.x;
                                frontier_phi_88_pred_3 = _3642 * _3424.z;
                                frontier_phi_88_pred_4 = _3642 * _3424.y;
                                frontier_phi_88_pred_5 = _3642 * _3424.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3651 = frontier_phi_88_pred;
                            _3650 = frontier_phi_88_pred_1;
                            _3649 = frontier_phi_88_pred_2;
                            _3648 = frontier_phi_88_pred_3;
                            _3647 = frontier_phi_88_pred_4;
                            _3646 = frontier_phi_88_pred_5;
                            _3354 = _3649 + _3367;
                            _3355 = _3650 + _3368;
                            _3356 = _3651 + _3369;
                            _3351 = _3646 + _3364;
                            _3352 = _3647 + _3365;
                            _3353 = _3648 + _3366;
                            if (_3371 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3371;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3356;
                        frontier_phi_82_pred_1 = _3355;
                        frontier_phi_82_pred_2 = _3354;
                        frontier_phi_82_pred_3 = _3353;
                        frontier_phi_82_pred_4 = _3352;
                        frontier_phi_82_pred_5 = _3351;
                    }
                    _2994 = frontier_phi_82_pred;
                    _2992 = frontier_phi_82_pred_1;
                    _2990 = frontier_phi_82_pred_2;
                    _2988 = frontier_phi_82_pred_3;
                    _2986 = frontier_phi_82_pred_4;
                    _2984 = frontier_phi_82_pred_5;
                    uint _3150 = _3149 + 1u;
                    if (_3150 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3143 = _2984;
                        _3144 = _2986;
                        _3145 = _2988;
                        _3146 = _2990;
                        _3147 = _2992;
                        _3148 = _2994;
                        _3149 = _3150;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2990;
                frontier_phi_63_64_ladder_1 = _2994;
                frontier_phi_63_64_ladder_2 = _2992;
                frontier_phi_63_64_ladder_3 = _2988;
                frontier_phi_63_64_ladder_4 = _2986;
                frontier_phi_63_64_ladder_5 = _2984;
            }
            else
            {
                frontier_phi_63_64_ladder = _2869;
                frontier_phi_63_64_ladder_1 = _2873;
                frontier_phi_63_64_ladder_2 = _2871;
                frontier_phi_63_64_ladder_3 = _2867;
                frontier_phi_63_64_ladder_4 = _2865;
                frontier_phi_63_64_ladder_5 = _2863;
            }
            _2983 = frontier_phi_63_64_ladder_5;
            _2985 = frontier_phi_63_64_ladder_4;
            _2987 = frontier_phi_63_64_ladder_3;
            _2989 = frontier_phi_63_64_ladder;
            _2991 = frontier_phi_63_64_ladder_2;
            _2993 = frontier_phi_63_64_ladder_1;
        }
        float _2998 = isnan(1.0) ? _759 : (isnan(_759) ? 1.0 : min(_759, 1.0));
        _2796 = (_2998 * _2989) + _2327;
        _2798 = (_2998 * _2991) + _2329;
        _2800 = (_2998 * _2993) + _2331;
        _2802 = ((_2983 * 0.039999999105930328369140625) * _2998) + _2650;
        _2804 = ((_2985 * 0.039999999105930328369140625) * _2998) + _2652;
        _2806 = ((_2987 * 0.039999999105930328369140625) * _2998) + _2654;
    }
    else
    {
        _2796 = _2327;
        _2798 = _2329;
        _2800 = _2331;
        _2802 = _2650;
        _2804 = _2652;
        _2806 = _2654;
    }
    float _4807 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4818 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4829 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _2823 = ((isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2796 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _759))) + ((_2802 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1595)) * cbPerFrame._m0[3u].x);
    float _2824 = ((isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2798 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _759))) + ((_2804 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1595)) * cbPerFrame._m0[3u].x);
    float _2825 = ((isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))) * (_2800 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _759))) + ((_2806 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1595)) * cbPerFrame._m0[3u].x);
    uint _2826 = _241 + 6u;
    float _2834 = _694 / cbSceneParam._m0[86u].x;
    float _2835 = _695 / cbSceneParam._m0[86u].y;
    vec4 _2849 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2834, _2835, (log2((isnan(cbSceneParam._m0[77u].w) ? _616 : (isnan(_616) ? cbSceneParam._m0[77u].w : min(_616, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2851 = _2849.x;
    float _2852 = _2849.y;
    float _2853 = _2849.z;
    float _2854 = _2849.w;
    float _2925;
    float _2927;
    float _2929;
    float _2931;
    if (_616 > cbSceneParam._m0[78u].w)
    {
        float _2888 = isnan(_616) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _616 : min(cbSceneParam._m0[80u].w, _616));
        float _2889 = _2888 / _616;
        float _2900 = _2889 * _666;
        float _2901 = _667 * _2889;
        float _2902 = (-0.0) - _2901;
        float _2903 = _2889 * _668;
        float _2905 = (cbSceneParam._m0[77u].w * _2902) / _2888;
        float _2906 = _2905 + cbSceneParam._m0[79u].w;
        float _2907 = cbSceneParam._m0[79u].w - _2901;
        float _2913 = sqrt(((_2900 * _2900) + (_2901 * _2901)) + (_2903 * _2903));
        float _2916 = (1.0 - (cbSceneParam._m0[77u].w / _2888)) * _2913;
        float _2921 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2923 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3100;
        if (abs((_2902 - _2905) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3100 = ((((_2906 > 0.0) ? exp2(_2921 * _2906) : (2.0 - exp2(_2923 * _2906))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2916;
        }
        else
        {
            float _3044 = 1.0 / cbSceneParam._m0[80u].x;
            float _3045 = isnan(_2907) ? _2906 : (isnan(_2906) ? _2907 : max(_2906, _2907));
            float _3046 = isnan(_2907) ? _2906 : (isnan(_2906) ? _2907 : min(_2906, _2907));
            float _3055 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : min(_3045, 0.0));
            float _3056 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : min(_3046, 0.0));
            _3100 = ((abs(_2913 / _2902) * cbSceneParam._m0[80u].y) * ((((_3055 - _3056) * 2.0) - ((exp2(_2921 * (isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0)))) - exp2(_2921 * (isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0))))) * _3044)) - ((exp2(_2923 * _3055) - exp2(_2923 * _3056)) * _3044))) + (_2916 * cbSceneParam._m0[80u].z);
        }
        vec4 _3102 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2834, _2835, 1.0), 0.0);
        float _3111 = exp2((_3100 * (-1.44269502162933349609375)) * (1.0 - _3102.w));
        float _3112 = log2(_3111);
        float _3128 = log2(_2854);
        _2925 = (exp2(_3128 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].x)) * _3102.x) / cbSceneParam._m0[78u].x)) + _2851;
        _2927 = (exp2(_3128 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].y)) * _3102.y) / cbSceneParam._m0[78u].y)) + _2852;
        _2929 = (exp2(_3128 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3112 * cbSceneParam._m0[78u].z)) * _3102.z) / cbSceneParam._m0[78u].z)) + _2853;
        _2931 = _3111 * _2854;
    }
    else
    {
        _2925 = _2851;
        _2927 = _2852;
        _2929 = _2853;
        _2931 = _2854;
    }
    bool _3138;
    vec4 _2941;
    vec4 _2963;
    float _2965;
    float _2969;
    float _2970;
    float _2971;
    float _2972;
    bool _2982;
    for (;;)
    {
        _2941 = cbMatDynParam._m0[0u];
        float _2943 = roundEven(_2941.y);
        bool _2944 = _2943 == 3.0;
        float _2945 = log2(_2931);
        float _2952 = exp2(_2945 * cbSceneParam._m0[78u].x) * _2823;
        float _2953 = exp2(_2945 * cbSceneParam._m0[78u].y) * _2824;
        float _2954 = exp2(_2945 * cbSceneParam._m0[78u].z) * _2825;
        float _2961 = _682 + (-0.5);
        _2963 = cbMtdParam._m0[1u];
        _2965 = _2963.y * _2961;
        float _2968 = (_2943 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2969 = _2968 * (_2944 ? _2952 : (_2952 + (cbSceneParam._m0[72u].w * _2925)));
        _2970 = _2968 * (_2944 ? _2953 : (_2953 + (cbSceneParam._m0[72u].w * _2927)));
        _2971 = _2968 * (_2944 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2929)));
        _2972 = _2961 * 0.999000012874603271484375;
        _2982 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2982)
        {
            if ((cbInstanceData._m0[_241 + 7u].x + _2972) < 0.5)
            {
                _3138 = true;
                break;
            }
        }
        uint _3079 = _734 + uint(_2941.w);
        if ((cbInstanceData._m0[_3079].w < 1.0) && ((cbInstanceData._m0[_3079].w + _2972) < 0.5))
        {
            _3138 = true;
            break;
        }
        if ((_2965 + 1.0) < _2963.x)
        {
            _3138 = true;
            break;
        }
        _3138 = false;
        break;
    }
    float _3342;
    if (_3138)
    {
        discard_state = true;
        _3342 = 0.0;
    }
    else
    {
        _3342 = cbInstanceData._m0[_2826].w;
    }
    SV_Target.x = _2969;
    SV_Target.y = _2970;
    SV_Target.z = _2971;
    SV_Target.w = _3342;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2826].w;
    discard_exit();
}


