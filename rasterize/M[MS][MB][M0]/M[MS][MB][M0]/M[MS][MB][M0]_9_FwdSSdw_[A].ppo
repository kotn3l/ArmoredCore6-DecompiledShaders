#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1078;
float _3466;
float _3467;
float _3468;
float _3469;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _253 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _259 = _253.x * cbMtdParam._m0[9u].x;
    float _260 = _253.y * cbMtdParam._m0[9u].y;
    float _261 = _253.z * cbMtdParam._m0[9u].z;
    vec4 _274 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _278 = _274.z;
    float _283 = (_274.x * 2.0) + (-1.0);
    float _285 = (_274.y * 2.0) + (-1.0);
    float _286 = dot(vec2(_283, _285), vec2(_283, _285));
    float _3478 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _292 = sqrt(1.0 - (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _328 = _326.x;
    float _329 = 1.0 - _328;
    float _362 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_328 - _329) * cbMtdParam._m0[24u].w) + _329) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3489 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _363 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _371 = ((((cbMtdParam._m0[10u].x - _259) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _363) + _259;
    float _372 = ((((cbMtdParam._m0[10u].y - _260) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _363) + _260;
    float _373 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _261)) * _363) + _261;
    float _377 = ((cbMtdParam._m0[23u].y - _278) * _363) + _278;
    vec4 _399 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _401 = _399.x;
    float _402 = _399.y;
    float _411 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_223, _224, _225, 0.0));
    vec4 _426 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _312) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _313) + cbTextureTilingScale._m0[18u].w));
    float _428 = _426.x;
    float _433 = fract(_426.w + cbPerFrame._m0[22u].x);
    float _435 = (1.0 - _433) * _428;
    float _440 = ((_433 + (-1.0)) + _428) * 9.0;
    float _442 = ((_428 + (-1.0)) + _433) * 9.0;
    float _443 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _444 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _458 = (_435 * ((_426.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _443 : (isnan(_443) ? 3.0 : min(_443, 3.0))) * 3.1415927410125732421875);
    float _460 = (_435 * ((_426.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _444 : (isnan(_444) ? 3.0 : min(_444, 3.0))) * 3.1415927410125732421875);
    float _464 = inversesqrt(dot(vec3(_458, _460, 1.0), vec3(_458, _460, 1.0)));
    float _480 = (((((0.5 - _401) + ((_458 * 0.5) * _464)) * _411) + _401) * 2.0) + (-1.0);
    float _481 = (((((0.5 - _402) + ((_464 * 0.5) * _460)) * _411) + _402) * 2.0) + (-1.0);
    float _482 = dot(vec2(_480, _481), vec2(_480, _481));
    float _3520 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _498 = ((((cbMtdParam._m0[22u].z * _283) - _283) + _480) * _363) + _283;
    float _499 = ((((cbMtdParam._m0[22u].z * _285) - _285) + _481) * _363) + _285;
    float _500 = (_363 * (sqrt(1.0 - (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)))) - _292)) + _292;
    float _502 = cbMtdParam._m0[22u].x + _274.w;
    float _505 = fma(_500, _223, fma(_499, _229 * TANGENT.x, (_215 * _207) * _498));
    float _508 = fma(_500, _224, fma(_499, _229 * TANGENT.y, (_215 * _208) * _498));
    float _511 = fma(_500, _225, fma(_499, _229 * TANGENT.z, (_215 * _209) * _498));
    float _515 = inversesqrt(dot(vec3(_505, _508, _511), vec3(_505, _508, _511)));
    float _516 = _515 * _505;
    float _517 = _515 * _508;
    float _518 = _515 * _511;
    float _3531 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _519 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _3542 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3553 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3564 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3575 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _537 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _588 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _578);
    float _589 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _578);
    float _590 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _578);
    float _594 = inversesqrt(dot(vec3(_588, _589, _590), vec3(_588, _589, _590)));
    float _595 = _588 * _594;
    float _596 = _589 * _594;
    float _597 = _590 * _594;
    vec4 _602 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _604 = _602.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _760 = sqrt(((_588 * _588) + (_589 * _589)) + (_590 * _590));
        float _766 = (cbMatDynParam._m0[5u].x * _760) + cbMatDynParam._m0[5u].y;
        float _3586 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _771 = (cbMatDynParam._m0[5u].z * _760) + cbMatDynParam._m0[5u].w;
        float _3597 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) - _767)) + _767) < ((_604 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _616 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _617 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _637 = fma(_518, cbSceneParam._m0[5u].z, fma(_517, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _516));
    float _640 = fma(_518, cbSceneParam._m0[6u].z, fma(_517, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _516));
    float _643 = fma(_518, cbSceneParam._m0[7u].z, fma(_517, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _516));
    uint _656 = _293 + 9u;
    uint _657 = _656 + uint(cbMatDynParam._m0[0u].w);
    float _663 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) * cbInstanceData._m0[_657].x;
    float _664 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_657].y;
    float _665 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_657].z;
    float _3608 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    vec4 _677 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _616, cbSceneParam._m0[86u].y * _617));
    float _681 = ((isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * TEXCOORD_5.w) * _677.x;
    float _682 = dot(vec3(_516, _517, _518), vec3(_595, _596, _597));
    float _685 = _682 * 2.0;
    float _689 = (_685 * _516) - _595;
    float _690 = (_685 * _517) - _596;
    float _691 = (_685 * _518) - _597;
    float _695 = abs(dot(vec3(_595, _596, _597), vec3(_516, _517, _518)));
    float _3641 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _697 = sqrt(_519);
    float _709 = exp2((_697 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_697 * 3.0));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1077;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _803 = fma(_749, cbModelParam._m0[26u].z, fma(_745, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _741));
        float _807 = fma(_749, cbModelParam._m0[27u].z, fma(_745, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _741));
        float _811 = fma(_749, cbModelParam._m0[28u].z, fma(_745, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _741));
        float _835 = _741 + _516;
        float _836 = _745 + _517;
        float _837 = _749 + _518;
        float _847 = fma(_837, cbModelParam._m0[26u].z, fma(_836, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _835)) - _803;
        float _848 = fma(_837, cbModelParam._m0[27u].z, fma(_836, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _835)) - _807;
        float _849 = fma(_837, cbModelParam._m0[28u].z, fma(_836, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _835)) - _811;
        float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
        float _866 = ((_853 * _847) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_803 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _867 = ((_853 * _848) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_807 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _868 = ((_853 * _849) / cbModelParam._m0[34u].z) + ((((((_811 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        float _905 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_871.x + (-0.5));
        float _907 = _905 * (_871.y + (-0.5));
        float _908 = _905 * (_871.z + (-0.5));
        float _915 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_878.x + (-0.5));
        float _917 = _915 * (_878.y + (-0.5));
        float _918 = _915 * (_878.z + (-0.5));
        float _925 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_885.x + (-0.5));
        float _927 = _925 * (_885.y + (-0.5));
        float _928 = _925 * (_885.z + (-0.5));
        float _935 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_892.x + (-0.5));
        float _937 = _935 * (_892.y + (-0.5));
        float _938 = _935 * (_892.z + (-0.5));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = _906 * 0.5;
        float _943 = _916 * 0.5;
        float _944 = _926 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _959 = (dot(vec3(_516, _517, _518), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _969 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3689 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_971 + 1.0))) + _976) * _939;
        float _986 = _907 * 0.5;
        float _987 = _917 * 0.5;
        float _988 = _927 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_516, _517, _518), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3722 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1013 + 1.0))) + _1018) * _940;
        float _1028 = _908 * 0.5;
        float _1029 = _918 * 0.5;
        float _1030 = _928 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_516, _517, _518), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3755 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1055 + 1.0))) + _1060) * _941;
        _1077 = _908;
        _1079 = _907;
        _1080 = _906;
        _1081 = _918;
        _1082 = _917;
        _1083 = _916;
        _1084 = _928;
        _1085 = _927;
        _1086 = _926;
        _1087 = _941;
        _1088 = _940;
        _1089 = _939;
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1091 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
    }
    else
    {
        _1077 = _1078;
        _1079 = _1078;
        _1080 = _1078;
        _1081 = _1078;
        _1082 = _1078;
        _1083 = _1078;
        _1084 = _1078;
        _1085 = _1078;
        _1086 = _1078;
        _1087 = _1078;
        _1088 = _1078;
        _1089 = _1078;
        _1090 = 0.0;
        _1091 = 0.0;
        _1092 = 0.0;
    }
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1120 = fma(_749, cbModelParam._m0[30u].z, fma(_745, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _741));
        float _1124 = fma(_749, cbModelParam._m0[31u].z, fma(_745, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _741));
        float _1128 = fma(_749, cbModelParam._m0[32u].z, fma(_745, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _741));
        float _1151 = _741 + _516;
        float _1152 = _745 + _517;
        float _1153 = _749 + _518;
        float _1163 = fma(_1153, cbModelParam._m0[30u].z, fma(_1152, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1151)) - _1120;
        float _1164 = fma(_1153, cbModelParam._m0[31u].z, fma(_1152, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1151)) - _1124;
        float _1165 = fma(_1153, cbModelParam._m0[32u].z, fma(_1152, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1151)) - _1128;
        float _1169 = inversesqrt(dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165)));
        float _1182 = ((_1169 * _1163) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1120 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1169 * _1164) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1124 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1169 * _1165) / cbModelParam._m0[35u].z) + ((((((_1128 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1182, _1183, _1184), 0.0);
        float _1219 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1186.x + (-0.5));
        float _1221 = _1219 * (_1186.y + (-0.5));
        float _1222 = _1219 * (_1186.z + (-0.5));
        float _1229 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1193.x + (-0.5));
        float _1231 = _1229 * (_1193.y + (-0.5));
        float _1232 = _1229 * (_1193.z + (-0.5));
        float _1239 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1200.x + (-0.5));
        float _1241 = _1239 * (_1200.y + (-0.5));
        float _1242 = _1239 * (_1200.z + (-0.5));
        float _1249 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1207.x + (-0.5));
        float _1251 = _1249 * (_1207.y + (-0.5));
        float _1252 = _1249 * (_1207.z + (-0.5));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = _1220 * 0.5;
        float _1257 = _1230 * 0.5;
        float _1258 = _1240 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_516, _517, _518), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3818 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1283 + 1.0))) + _1288) * _1253;
        float _1298 = _1221 * 0.5;
        float _1299 = _1231 * 0.5;
        float _1300 = _1241 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_516, _517, _518), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3851 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1325 + 1.0))) + _1330) * _1254;
        float _1340 = _1222 * 0.5;
        float _1341 = _1232 * 0.5;
        float _1342 = _1242 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_516, _517, _518), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _3884 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1367 + 1.0))) + _1372) * _1255;
        _1389 = _1222;
        _1390 = _1221;
        _1391 = _1220;
        _1392 = _1232;
        _1393 = _1231;
        _1394 = _1230;
        _1395 = _1242;
        _1396 = _1241;
        _1397 = _1240;
        _1398 = _1255;
        _1399 = _1254;
        _1400 = _1253;
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
    }
    else
    {
        _1389 = _1078;
        _1390 = _1078;
        _1391 = _1078;
        _1392 = _1078;
        _1393 = _1078;
        _1394 = _1078;
        _1395 = _1078;
        _1396 = _1078;
        _1397 = _1078;
        _1398 = _1078;
        _1399 = _1078;
        _1400 = _1078;
        _1401 = 0.0;
        _1402 = 0.0;
        _1403 = 0.0;
    }
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1090)) + _1090;
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1091)) + _1091;
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1092)) + _1092;
    float _1436 = fma(_1415, cbSceneParam._m0[89u].z, fma(_1414, cbSceneParam._m0[89u].y, _1413 * cbSceneParam._m0[89u].x));
    float _1439 = fma(_1415, cbSceneParam._m0[90u].z, fma(_1414, cbSceneParam._m0[90u].y, _1413 * cbSceneParam._m0[90u].x));
    float _1442 = fma(_1415, cbSceneParam._m0[91u].z, fma(_1414, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1413));
    float _1457 = _689 * 0.5;
    float _1458 = _690 * 0.5;
    float _1459 = _691 * 0.5;
    float _1460 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1463 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1466 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1500;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1473 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1077, _1081, _1084, _1087));
        float _1477 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1079, _1082, _1085, _1088));
        float _1481 = dot(vec4(_1457, _1458, _1459, 1.0), vec4(_1080, _1083, _1086, _1089));
        float _1488 = dot(vec4(cbModelParam._m0[39u]), vec4(_1457, _1458, _1459, 1.0));
        _1500 = dot(vec3(isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1488) ? 0.0 : (isnan(0.0) ? _1488 : max(0.0, _1488))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1500 = 1.0;
    }
    float _1511;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1502 = dot(vec4(cbModelParam._m0[40u]), vec4(_1457, _1458, _1459, 1.0));
        _1511 = dot(vec3(isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1502) ? 0.0 : (isnan(0.0) ? _1502 : max(0.0, _1502))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1511 = 1.0;
    }
    float _1515 = (_1511 * cbModelParam._m0[1u].x) + (_1500 * (1.0 - cbModelParam._m0[1u].x));
    float _1525 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _519);
    float _1526 = isnan(_1525) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1525 : min(cbModelParam._m0[25u].z, _1525));
    float _1608;
    float _1610;
    float _1612;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1575 = fma(_749, cbModelParam._m0[13u].z, fma(_745, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _741)) + cbModelParam._m0[13u].w;
        float _1579 = fma(_749, cbModelParam._m0[14u].z, fma(_745, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _741)) + cbModelParam._m0[14u].w;
        float _1583 = fma(_749, cbModelParam._m0[15u].z, fma(_745, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _741)) + cbModelParam._m0[15u].w;
        float _1586 = fma(_691, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689));
        float _1589 = fma(_691, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689));
        float _1592 = fma(_691, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689));
        float _1620;
        if (_1586 > 0.0)
        {
            _1620 = abs((1.0 - _1575) / _1586);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1575 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1620 = frontier_phi_17_15_ladder;
        }
        float _1844;
        if (_1589 > 0.0)
        {
            _1844 = abs((1.0 - _1579) / _1589);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1579 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1844 = frontier_phi_26_22_ladder;
        }
        float _2090;
        if (_1592 > 0.0)
        {
            _2090 = abs((1.0 - _1583) / _1592);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1583 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2090 = frontier_phi_38_33_ladder;
        }
        float _2092 = isnan(_1844) ? _1620 : (isnan(_1620) ? _1844 : min(_1620, _1844));
        float _2093 = isnan(_2090) ? _2092 : (isnan(_2092) ? _2090 : min(_2092, _2090));
        float _2097 = (_2093 * _1586) + _1575;
        float _2098 = (_2093 * _1589) + _1579;
        float _2099 = (_2093 * _1592) + _1583;
        float _2100 = _2093 * 9.9999997473787516355514526367188e-05;
        float _2102 = (-1.0) - _2100;
        float _2104 = _2100 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2099 > _2104) || ((_2099 < _2102) || ((_2098 > _2104) || ((_2098 < _2102) || ((_2097 < _2102) || (_2097 > _2104))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2223 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2099, cbModelParam._m0[9u].z, fma(_2098, cbModelParam._m0[9u].y, _2097 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2099, cbModelParam._m0[10u].z, fma(_2098, cbModelParam._m0[10u].y, _2097 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2099, cbModelParam._m0[11u].z, fma(_2098, cbModelParam._m0[11u].y, _2097 * cbModelParam._m0[11u].x))), _1526);
            frontier_phi_16_38_ladder = _2223.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2223.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2223.x * cbModelParam._m0[1u].y;
        }
        _1608 = frontier_phi_16_38_ladder_2;
        _1610 = frontier_phi_16_38_ladder_1;
        _1612 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1596 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_689, _690, _691), _1526);
        _1608 = _1596.x * cbModelParam._m0[1u].y;
        _1610 = _1596.y * cbModelParam._m0[1u].y;
        _1612 = _1596.z * cbModelParam._m0[1u].y;
    }
    float _1616 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _519);
    float _1617 = isnan(_1616) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1616 : min(cbModelParam._m0[25u].w, _1616));
    float _1707;
    float _1709;
    float _1711;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1671 = fma(_749, cbModelParam._m0[21u].z, fma(_745, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _741)) + cbModelParam._m0[21u].w;
        float _1675 = fma(_749, cbModelParam._m0[22u].z, fma(_745, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _741)) + cbModelParam._m0[22u].w;
        float _1679 = fma(_749, cbModelParam._m0[23u].z, fma(_745, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _741)) + cbModelParam._m0[23u].w;
        float _1682 = fma(_691, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689));
        float _1685 = fma(_691, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689));
        float _1688 = fma(_691, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689));
        float _1849;
        if (_1682 > 0.0)
        {
            _1849 = abs((1.0 - _1671) / _1682);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1671 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1849 = frontier_phi_28_24_ladder;
        }
        float _2117;
        if (_1685 > 0.0)
        {
            _2117 = abs((1.0 - _1675) / _1685);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1675 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2117 = frontier_phi_40_35_ladder;
        }
        float _2322;
        if (_1688 > 0.0)
        {
            _2322 = abs((1.0 - _1679) / _1688);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1679 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2322 = frontier_phi_49_46_ladder;
        }
        float _2324 = isnan(_2117) ? _1849 : (isnan(_1849) ? _2117 : min(_1849, _2117));
        float _2325 = isnan(_2322) ? _2324 : (isnan(_2324) ? _2322 : min(_2324, _2322));
        float _2329 = (_2325 * _1682) + _1671;
        float _2330 = (_2325 * _1685) + _1675;
        float _2331 = (_2325 * _1688) + _1679;
        float _2332 = _2325 * 9.9999997473787516355514526367188e-05;
        float _2333 = (-1.0) - _2332;
        float _2335 = _2332 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2331 > _2335) || ((_2331 < _2333) || ((_2330 > _2335) || ((_2330 < _2333) || ((_2329 < _2333) || (_2329 > _2335))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2530 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2331, cbModelParam._m0[17u].z, fma(_2330, cbModelParam._m0[17u].y, _2329 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2331, cbModelParam._m0[18u].z, fma(_2330, cbModelParam._m0[18u].y, _2329 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2331, cbModelParam._m0[19u].z, fma(_2330, cbModelParam._m0[19u].y, _2329 * cbModelParam._m0[19u].x))), _1617);
            frontier_phi_25_49_ladder = _2530.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2530.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2530.x * cbModelParam._m0[1u].z;
        }
        _1707 = frontier_phi_25_49_ladder_2;
        _1709 = frontier_phi_25_49_ladder_1;
        _1711 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1691 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_689, _690, _691), _1617);
        _1707 = _1691.x * cbModelParam._m0[1u].z;
        _1709 = _1691.y * cbModelParam._m0[1u].z;
        _1711 = _1691.z * cbModelParam._m0[1u].z;
    }
    float _1723 = ((((1.0 - _709) * ((_697 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_709 * _697)) * _681;
    float _1724 = _1723 * ((cbModelParam._m0[1u].w * (_1707 - _1608)) + _1608);
    float _1725 = _1723 * ((cbModelParam._m0[1u].w * (_1709 - _1610)) + _1610);
    float _1726 = _1723 * ((cbModelParam._m0[1u].w * (_1711 - _1612)) + _1612);
    float _1729 = fma(_1726, cbSceneParam._m0[89u].z, fma(_1725, cbSceneParam._m0[89u].y, _1724 * cbSceneParam._m0[89u].x));
    float _1732 = fma(_1726, cbSceneParam._m0[90u].z, fma(_1725, cbSceneParam._m0[90u].y, _1724 * cbSceneParam._m0[90u].x));
    float _1735 = fma(_1726, cbSceneParam._m0[91u].z, fma(_1725, cbSceneParam._m0[91u].y, _1724 * cbSceneParam._m0[91u].x));
    vec4 _1743 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_616, _617));
    float _1745 = _1743.w;
    float _1757 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1745);
    float _1758 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1745);
    float _1759 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1745);
    uvec4 _1763 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _1765 = _1763.x * 14u;
    uint _1766 = _1765 + 13u;
    float _1773 = _681 + (-1.0);
    float _1778 = (cbLight._m0[_1766].x * _1773) + 1.0;
    float _1779 = (cbLight._m0[_1766].y * _1773) + 1.0;
    float _1780 = (cbLight._m0[_1766].z * _1773) + 1.0;
    float _1781 = (cbLight._m0[_1766].w * _1773) + 1.0;
    uint _1782 = _1765 + 5u;
    float _1788 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
    uint _1792 = _1765 + 4u;
    float _1802 = isnan(1.0) ? _1778 : (isnan(_1778) ? 1.0 : min(_1778, 1.0));
    uint _1806 = _1765 | 1u;
    float _1817 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_516, _517, _518));
    float _1820 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_516, _517, _518));
    float _4020 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _4031 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1825 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * 0.3183098733425140380859375;
    float _1827 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * 0.3183098733425140380859375;
    float _1834 = ((cbLight._m0[_1782].x * _1788) * _1827) + (((cbLight._m0[_1792].x * _1757) * _1802) * _1825);
    float _1835 = ((_1788 * cbLight._m0[_1782].y) * _1827) + (((cbLight._m0[_1792].y * _1758) * _1802) * _1825);
    float _1836 = ((_1788 * cbLight._m0[_1782].z) * _1827) + (((cbLight._m0[_1792].z * _1759) * _1802) * _1825);
    uvec4 _1841 = floatBitsToUint(cbLight._m0[_1765 + 12u]);
    bool _1843 = _1841.x == 0u;
    float _1854;
    float _1856;
    float _1858;
    if (_1843)
    {
        _1854 = _1834;
        _1856 = _1835;
        _1858 = _1836;
    }
    else
    {
        uint _1862 = _1765 + 6u;
        float _1878 = (dot(vec3(cbLight._m0[_1765 + 2u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _1879 = _1878 * _1878;
        float _4042 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1881 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _1854 = (((cbLight._m0[_1862].x * 0.3183098733425140380859375) * _1880) * _1881) + _1834;
        _1856 = (((cbLight._m0[_1862].y * 0.3183098733425140380859375) * _1880) * _1881) + _1835;
        _1858 = (((cbLight._m0[_1862].z * 0.3183098733425140380859375) * _1880) * _1881) + _1836;
    }
    bool _1861 = _1841.y == 0u;
    float _1899;
    float _1901;
    float _1903;
    if (_1861)
    {
        _1899 = _1854;
        _1901 = _1856;
        _1903 = _1858;
    }
    else
    {
        uint _2061 = _1765 + 7u;
        float _2077 = (dot(vec3(cbLight._m0[_1765 + 3u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _2078 = _2077 * _2077;
        float _4058 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2079 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2080 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
        _1899 = (((cbLight._m0[_2061].x * 0.3183098733425140380859375) * _2079) * _2080) + _1854;
        _1901 = (((cbLight._m0[_2061].y * 0.3183098733425140380859375) * _2079) * _2080) + _1856;
        _1903 = (((cbLight._m0[_2061].z * 0.3183098733425140380859375) * _2079) * _2080) + _1858;
    }
    uint _1906 = _1765 + 8u;
    float _1919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1765].w)) * _519) * 0.949999988079071044921875);
    float _1920 = _1919 * _1919;
    float _1921 = cbLight._m0[_1765].x + _595;
    float _1922 = cbLight._m0[_1765].y + _596;
    float _1923 = cbLight._m0[_1765].z + _597;
    float _1927 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
    float _1928 = _1927 * _1921;
    float _1929 = _1927 * _1922;
    float _1930 = _1927 * _1923;
    float _1931 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_1765].xyz));
    float _4074 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _1935 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _1936 = dot(vec3(_516, _517, _518), vec3(_1928, _1929, _1930));
    float _4096 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _1940 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_1928, _1929, _1930));
    float _4107 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1944 = _1920 * _1920;
    float _1948 = ((_1939 * _1939) * (_1944 + (-1.0))) + 1.0;
    float _1959 = (exp2(log2(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1960 = 1.0 - _1920;
    float _1971 = (0.5 / (((_1935 * ((_1934 * _1960) + _1920)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _1960) + _1920) * _1934))) * _1934;
    float _4118 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1973 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1944 / ((_1948 * _1948) * 3.141590118408203125));
    uint _1987 = _1765 + 9u;
    float _1998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1806].w)) * _519) * 0.949999988079071044921875);
    float _1999 = _1998 * _1998;
    float _2000 = cbLight._m0[_1806].x + _595;
    float _2001 = cbLight._m0[_1806].y + _596;
    float _2002 = cbLight._m0[_1806].z + _597;
    float _2006 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
    float _2007 = _2006 * _2000;
    float _2008 = _2006 * _2001;
    float _2009 = _2006 * _2002;
    float _2010 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_1806].xyz));
    float _4129 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _2014 = dot(vec3(_516, _517, _518), vec3(_2007, _2008, _2009));
    float _4140 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2018 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_2007, _2008, _2009));
    float _4151 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2022 = _1999 * _1999;
    float _2026 = ((_2017 * _2017) * (_2022 + (-1.0))) + 1.0;
    float _2035 = (exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2036 = 1.0 - _1999;
    float _2046 = (0.5 / (((_1935 * ((_2013 * _2036) + _1999)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2036) + _1999) * _2013))) * _2013;
    float _4162 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2048 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2022 / ((_2026 * _2026) * 3.141590118408203125));
    float _2058 = (((_2035 * cbLight._m0[_1987].x) * _2048) * _1788) + ((((cbLight._m0[_1906].x * _1757) * _1959) * _1973) * _1802);
    float _2059 = (((_2035 * cbLight._m0[_1987].y) * _2048) * _1788) + ((((cbLight._m0[_1906].y * _1758) * _1959) * _1973) * _1802);
    float _2060 = (((_2035 * cbLight._m0[_1987].z) * _2048) * _1788) + ((((cbLight._m0[_1906].z * _1759) * _1959) * _1973) * _1802);
    float _2122;
    float _2124;
    float _2126;
    if (_1843)
    {
        _2122 = _2058;
        _2124 = _2059;
        _2126 = _2060;
    }
    else
    {
        uint _2128 = _1765 + 2u;
        uint _2132 = _1765 + 10u;
        float _2146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _519) * 0.949999988079071044921875);
        float _2147 = _2146 * _2146;
        float _2148 = cbLight._m0[_2128].x + _595;
        float _2149 = cbLight._m0[_2128].y + _596;
        float _2150 = cbLight._m0[_2128].z + _597;
        float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
        float _2155 = _2154 * _2148;
        float _2156 = _2154 * _2149;
        float _2157 = _2154 * _2150;
        float _2158 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2128].xyz));
        float _4173 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2161 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2162 = dot(vec3(_516, _517, _518), vec3(_2155, _2156, _2157));
        float _4184 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2165 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2166 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2155, _2156, _2157));
        float _4195 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2170 = _2147 * _2147;
        float _2174 = ((_2165 * _2165) * (_2170 + (-1.0))) + 1.0;
        float _2183 = (exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2184 = 1.0 - _2147;
        float _2194 = (0.5 / (((_1935 * ((_2161 * _2184) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2184) + _2147) * _2161))) * _2161;
        float _4206 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2196 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2170 / ((_2174 * _2174) * 3.141590118408203125));
        float _2197 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
        _2122 = (((_2183 * cbLight._m0[_2132].x) * _2196) * _2197) + _2058;
        _2124 = (((_2183 * cbLight._m0[_2132].y) * _2196) * _2197) + _2059;
        _2126 = (((_2183 * cbLight._m0[_2132].z) * _2196) * _2197) + _2060;
    }
    float _2232;
    float _2234;
    float _2236;
    if (_1861)
    {
        _2232 = _2122;
        _2234 = _2124;
        _2236 = _2126;
    }
    else
    {
        uint _2243 = _1765 + 3u;
        uint _2247 = _1765 + 11u;
        float _2261 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2243].w)) * _519) * 0.949999988079071044921875);
        float _2262 = _2261 * _2261;
        float _2263 = cbLight._m0[_2243].x + _595;
        float _2264 = cbLight._m0[_2243].y + _596;
        float _2265 = cbLight._m0[_2243].z + _597;
        float _2269 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
        float _2270 = _2269 * _2263;
        float _2271 = _2269 * _2264;
        float _2272 = _2269 * _2265;
        float _2273 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2243].xyz));
        float _4222 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2276 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2277 = dot(vec3(_516, _517, _518), vec3(_2270, _2271, _2272));
        float _4233 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2280 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2281 = dot(vec3(cbLight._m0[_2243].xyz), vec3(_2270, _2271, _2272));
        float _4244 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2285 = _2262 * _2262;
        float _2289 = ((_2280 * _2280) * (_2285 + (-1.0))) + 1.0;
        float _2298 = (exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2299 = 1.0 - _2262;
        float _2309 = (0.5 / (((_1935 * ((_2276 * _2299) + _2262)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2299) + _2262) * _2276))) * _2276;
        float _4255 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2311 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2285 / ((_2289 * _2289) * 3.141590118408203125));
        float _2312 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
        _2232 = (((_2298 * cbLight._m0[_2247].x) * _2311) * _2312) + _2122;
        _2234 = (((_2298 * cbLight._m0[_2247].y) * _2311) * _2312) + _2124;
        _2236 = (((_2298 * cbLight._m0[_2247].z) * _2311) * _2312) + _2126;
    }
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    if (_1763.y == 0u)
    {
        float _2387 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2387;
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2387;
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2387;
        uvec4 _2402 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2403 = _2402.x;
        uint _2414 = uint((float(_2402.y) * floor(float(uint(cbSceneParam._m0[85u].y * _617) / _2403))) + floor(float(uint(cbSceneParam._m0[85u].x * _616) / _2403)));
        float _2424 = (log2(_2390 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2425 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        uint _2428 = uint(isnan(14.0) ? _2425 : (isnan(_2425) ? 14.0 : min(_2425, 14.0)));
        uvec4 _2433 = texelFetch(g_lightClusterGridBuffer, int(((_2428 << 2u) + (_2414 << 6u)) >> 2u));
        uint _2434 = _2433.x;
        uint _2435 = _2402.z;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        if (((((1u << ((_2435 >> 4u) & 15u)) + 4294967295u) & _2434) == 0u) || ((_2435 & 240u) == 0u))
        {
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
            _2545 = 0.0;
        }
        else
        {
            float _2536;
            float _2538;
            float _2540;
            float _2542;
            float _2544;
            float _2546;
            float _2688 = 0.0;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            uint _2694 = 0u;
            uint _2703;
            bool _2704;
            for (;;)
            {
                _2703 = texelFetch(g_lightClassification, int((((_2428 << 5u) + (_2414 << 9u)) + (_2694 << 2u)) >> 2u)).x;
                _2704 = _2703 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2704)
                {
                    frontier_phi_66_pred = _2688;
                    frontier_phi_66_pred_1 = _2693;
                    frontier_phi_66_pred_2 = _2692;
                    frontier_phi_66_pred_3 = _2691;
                    frontier_phi_66_pred_4 = _2690;
                    frontier_phi_66_pred_5 = _2689;
                }
                else
                {
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    uint _2839;
                    _2833 = _2688;
                    _2834 = _2689;
                    _2835 = _2690;
                    _2836 = _2691;
                    _2837 = _2692;
                    _2838 = _2693;
                    _2839 = _2703;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    for (;;)
                    {
                        uint _2843 = uint(findLSB(_2839)) + (_2694 << 5u);
                        uint _2840 = (_2839 + 4294967295u) & _2839;
                        uint _2845 = _2843 * 48u;
                        vec4 _2859 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2845)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 3u)).x));
                        uint _2865 = (_2843 * 48u) + 4u;
                        vec4 _2878 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2865)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 3u)).x));
                        uint _2884 = (_2843 * 48u) + 8u;
                        vec3 _2895 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2884)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2884 + 2u)).x));
                        float _2899 = _2859.x - _2388;
                        float _2900 = _2859.y - _2389;
                        float _2901 = _2859.z - _2390;
                        float _2902 = dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901));
                        float _2905 = inversesqrt(_2902);
                        float _2906 = _2905 * _2899;
                        float _2907 = _2905 * _2900;
                        float _2908 = _2905 * _2901;
                        float _2909 = dot(vec3(_637, _640, _643), vec3(_2906, _2907, _2908));
                        float _2914 = 1.0 - (_2902 * _2859.w);
                        float _4281 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2915 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                        float _2916 = sqrt(_2902) * _2878.w;
                        float _2919 = 1.39999997615814208984375 / (_2916 + 1.39999997615814208984375);
                        float _2920 = _2919 * _2919;
                        float _2923 = ((1.0 - _2920) * _2909) + _2920;
                        float _2926 = _2916 * _2916;
                        float _2930 = ((isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0))) * _2915) / ((_2926 * 0.699999988079071044921875) + 1.0);
                        float _2934 = (-0.0) - _2388;
                        float _2935 = (-0.0) - _2389;
                        float _2936 = (-0.0) - _2390;
                        float _2940 = inversesqrt(dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936)));
                        float _2941 = _2940 * _2934;
                        float _2942 = _2940 * _2935;
                        float _2943 = _2940 * _2936;
                        float _2951 = exp2(log2(1.0 / ((_2926 * 3.5) + 5.0)) * 0.25);
                        float _2952 = 1.0 - _697;
                        float _2959 = sqrt(1.0 - ((1.0 - (_2952 * _2952)) * (1.0 - (_2951 * _2951))));
                        float _2960 = _2959 * _2959;
                        float _2961 = _2960 * _2960;
                        float _2962 = _2941 + _2906;
                        float _2963 = _2942 + _2907;
                        float _2964 = _2943 + _2908;
                        float _2968 = inversesqrt(dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964)));
                        float _2972 = dot(vec3(_637, _640, _643), vec3(_2941, _2942, _2943));
                        float _4297 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2975 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                        float _2976 = dot(vec3(_637, _640, _643), vec3(_2968 * _2962, _2968 * _2963, _2968 * _2964));
                        float _4308 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2979 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                        float _2983 = ((_2979 * _2979) * (_2961 + (-1.0))) + 1.0;
                        float _2984 = _2919 * _2960;
                        float _2985 = _2984 * _2984;
                        float _2988 = ((1.0 - _2985) * _2909) + _2985;
                        float _4319 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2989 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _2990 = 1.0 - _2960;
                        float _3000 = (0.5 / (((_2989 * ((_2975 * _2990) + _2960)) + 9.9999999392252902907785028219223e-09) + (((_2989 * _2990) + _2960) * _2975))) * _2989;
                        float _4330 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3010 = (((_2961 * 3.1415927410125732421875) * (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) / ((_2983 * _2983) * ((_2926 * 2.1991131305694580078125) + 3.141590118408203125))) * _2915;
                        _2763 = (_2930 * _2878.x) + _2836;
                        _2764 = (_2930 * _2878.y) + _2837;
                        _2765 = (_2930 * _2878.z) + _2838;
                        _2760 = (_3010 * _2895.x) + _2833;
                        _2761 = (_3010 * _2895.y) + _2834;
                        _2762 = (_3010 * _2895.z) + _2835;
                        if (_2840 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2833 = _2760;
                            _2834 = _2761;
                            _2835 = _2762;
                            _2836 = _2763;
                            _2837 = _2764;
                            _2838 = _2765;
                            _2839 = _2840;
                        }
                    }
                    frontier_phi_66_pred = _2760;
                    frontier_phi_66_pred_1 = _2765;
                    frontier_phi_66_pred_2 = _2764;
                    frontier_phi_66_pred_3 = _2763;
                    frontier_phi_66_pred_4 = _2762;
                    frontier_phi_66_pred_5 = _2761;
                }
                _2536 = frontier_phi_66_pred;
                _2546 = frontier_phi_66_pred_1;
                _2544 = frontier_phi_66_pred_2;
                _2542 = frontier_phi_66_pred_3;
                _2540 = frontier_phi_66_pred_4;
                _2538 = frontier_phi_66_pred_5;
                uint _2695 = _2694 + 1u;
                if (_2695 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2688 = _2536;
                    _2689 = _2538;
                    _2690 = _2540;
                    _2691 = _2542;
                    _2692 = _2544;
                    _2693 = _2546;
                    _2694 = _2695;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
            _2545 = _2546;
        }
        uvec4 _2549 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2550 = _2549.z;
        uint _2552 = (_2550 >> 8u) & 15u;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        if (((4294967295u << _2552) & _2434) == 0u)
        {
            _2656 = _2535;
            _2658 = _2537;
            _2660 = _2539;
            _2662 = _2541;
            _2664 = _2543;
            _2666 = _2545;
        }
        else
        {
            float _2681 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
            float _2682 = _2681 * _2388;
            float _2683 = _2681 * _2389;
            float _2684 = _2681 * _2390;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2552 < ((_2550 >> 12u) & 15u))
            {
                float _2657;
                float _2659;
                float _2661;
                float _2663;
                float _2665;
                float _2667;
                float _2816 = _2535;
                float _2817 = _2537;
                float _2818 = _2539;
                float _2819 = _2541;
                float _2820 = _2543;
                float _2821 = _2545;
                uint _2822 = _2552;
                uint _2831;
                bool _2832;
                for (;;)
                {
                    _2831 = texelFetch(g_lightClassification, int((((_2428 << 5u) + (_2414 << 9u)) + (_2822 << 2u)) >> 2u)).x;
                    _2832 = _2831 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2832)
                    {
                        frontier_phi_77_pred = _2821;
                        frontier_phi_77_pred_1 = _2820;
                        frontier_phi_77_pred_2 = _2819;
                        frontier_phi_77_pred_3 = _2818;
                        frontier_phi_77_pred_4 = _2817;
                        frontier_phi_77_pred_5 = _2816;
                    }
                    else
                    {
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3037 = _2816;
                        float _3038 = _2817;
                        float _3039 = _2818;
                        float _3040 = _2819;
                        float _3041 = _2820;
                        float _3042 = _2821;
                        uint _3043 = _2831;
                        uint _3044;
                        vec4 _3069;
                        float _3070;
                        vec4 _3085;
                        vec3 _3097;
                        vec4 _3113;
                        vec4 _3129;
                        float _3175;
                        bool _3176;
                        for (;;)
                        {
                            uint _3054 = ((_2822 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3043));
                            _3044 = (_3043 + 4294967295u) & _3043;
                            uint _3056 = _3054 * 40u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            _3070 = _3069.w;
                            uint _3072 = (_3054 * 40u) + 4u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3087 = (_3054 * 40u) + 8u;
                            _3097 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x));
                            uint _3100 = (_3054 * 40u) + 16u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3116 = (_3054 * 40u) + 20u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3131 = (_3054 * 40u) + 24u;
                            vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3150 = (_3054 * 40u) + 28u;
                            vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            _3175 = fma(_2390, _3163.z, fma(_2389, _3163.y, _3163.x * _2388)) + _3163.w;
                            _3176 = !((fma(_2390, _3144.z, fma(_2389, _3144.y, _3144.x * _2388)) + _3144.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3176)
                            {
                                float _3203 = _3069.x - _2388;
                                float _3204 = _3069.y - _2389;
                                float _3205 = _3069.z - _2390;
                                float _3206 = dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205));
                                float _3209 = inversesqrt(_3206);
                                float _3210 = _3209 * _3203;
                                float _3211 = _3209 * _3204;
                                float _3212 = _3209 * _3205;
                                float _3216 = 1.0 - (_3206 / (_3070 * _3070));
                                float _4341 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3217 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                                float _3221 = sqrt(_3206) * _3085.w;
                                float _3223 = 1.39999997615814208984375 / (_3221 + 1.39999997615814208984375);
                                float _3224 = _3223 * _3223;
                                float _3227 = ((1.0 - _3224) * dot(vec3(_3210, _3211, _3212), vec3(_637, _640, _643))) + _3224;
                                float _3230 = _3221 * _3221;
                                float _3234 = (fma(_2390, _3113.z, fma(_2389, _3113.y, _3113.x * _2388)) + _3113.w) / _3175;
                                float _3235 = (fma(_2390, _3129.z, fma(_2389, _3129.y, _3129.x * _2388)) + _3129.w) / _3175;
                                float _3239 = 1.0 - dot(vec2(_3234, _3235), vec2(_3234, _3235));
                                float _4357 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3240 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                                float _3241 = _3240 * (((isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))) * _3217) / ((_3230 * 0.699999988079071044921875) + 1.0));
                                float _3253 = exp2(log2(1.0 / ((_3230 * 3.5) + 5.0)) * 0.25);
                                float _3254 = 1.0 - _697;
                                float _3261 = sqrt(1.0 - ((1.0 - (_3254 * _3254)) * (1.0 - (_3253 * _3253))));
                                float _3262 = _3261 * _3261;
                                float _3263 = _3262 * _3262;
                                float _3264 = _3210 - _2682;
                                float _3265 = _3211 - _2683;
                                float _3266 = _3212 - _2684;
                                float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                                float _3274 = dot(vec3(_637, _640, _643), vec3((-0.0) - _2682, (-0.0) - _2683, (-0.0) - _2684));
                                float _4368 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3277 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3278 = dot(vec3(_637, _640, _643), vec3(_3270 * _3264, _3270 * _3265, _3270 * _3266));
                                float _4379 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3281 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3285 = ((_3281 * _3281) * (_3263 + (-1.0))) + 1.0;
                                float _3286 = _3223 * _3262;
                                float _3287 = _3286 * _3286;
                                float _3293 = ((1.0 - _3287) * dot(vec3(_637, _640, _643), vec3(_3210, _3211, _3212))) + _3287;
                                float _4390 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3295 = 1.0 - _3262;
                                float _3305 = (0.5 / (((_3294 * ((_3277 * _3295) + _3262)) + 9.9999999392252902907785028219223e-09) + (((_3294 * _3295) + _3262) * _3277))) * _3294;
                                float _4401 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3315 = (_3240 * _3217) * (((_3263 * 3.1415927410125732421875) * (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) / ((_3285 * _3285) * ((_3230 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3241 * _3085.y;
                                frontier_phi_83_pred_1 = _3241 * _3085.x;
                                frontier_phi_83_pred_2 = _3315 * _3097.z;
                                frontier_phi_83_pred_3 = _3315 * _3097.y;
                                frontier_phi_83_pred_4 = _3315 * _3097.x;
                                frontier_phi_83_pred_5 = _3241 * _3085.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3323 = frontier_phi_83_pred;
                            _3322 = frontier_phi_83_pred_1;
                            _3321 = frontier_phi_83_pred_2;
                            _3320 = frontier_phi_83_pred_3;
                            _3319 = frontier_phi_83_pred_4;
                            _3324 = frontier_phi_83_pred_5;
                            _3027 = _3322 + _3040;
                            _3028 = _3323 + _3041;
                            _3029 = _3324 + _3042;
                            _3024 = _3319 + _3037;
                            _3025 = _3320 + _3038;
                            _3026 = _3321 + _3039;
                            if (_3044 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3044;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3029;
                        frontier_phi_77_pred_1 = _3028;
                        frontier_phi_77_pred_2 = _3027;
                        frontier_phi_77_pred_3 = _3026;
                        frontier_phi_77_pred_4 = _3025;
                        frontier_phi_77_pred_5 = _3024;
                    }
                    _2667 = frontier_phi_77_pred;
                    _2665 = frontier_phi_77_pred_1;
                    _2663 = frontier_phi_77_pred_2;
                    _2661 = frontier_phi_77_pred_3;
                    _2659 = frontier_phi_77_pred_4;
                    _2657 = frontier_phi_77_pred_5;
                    uint _2823 = _2822 + 1u;
                    if (_2823 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2816 = _2657;
                        _2817 = _2659;
                        _2818 = _2661;
                        _2819 = _2663;
                        _2820 = _2665;
                        _2821 = _2667;
                        _2822 = _2823;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2661;
                frontier_phi_58_59_ladder_1 = _2667;
                frontier_phi_58_59_ladder_2 = _2665;
                frontier_phi_58_59_ladder_3 = _2663;
                frontier_phi_58_59_ladder_4 = _2659;
                frontier_phi_58_59_ladder_5 = _2657;
            }
            else
            {
                frontier_phi_58_59_ladder = _2539;
                frontier_phi_58_59_ladder_1 = _2545;
                frontier_phi_58_59_ladder_2 = _2543;
                frontier_phi_58_59_ladder_3 = _2541;
                frontier_phi_58_59_ladder_4 = _2537;
                frontier_phi_58_59_ladder_5 = _2535;
            }
            _2656 = frontier_phi_58_59_ladder_5;
            _2658 = frontier_phi_58_59_ladder_4;
            _2660 = frontier_phi_58_59_ladder;
            _2662 = frontier_phi_58_59_ladder_3;
            _2664 = frontier_phi_58_59_ladder_2;
            _2666 = frontier_phi_58_59_ladder_1;
        }
        float _2671 = isnan(1.0) ? _681 : (isnan(_681) ? 1.0 : min(_681, 1.0));
        _2447 = (_2671 * _2662) + _1899;
        _2449 = (_2671 * _2664) + _1901;
        _2451 = (_2671 * _2666) + _1903;
        _2453 = ((_2656 * 0.039999999105930328369140625) * _2671) + _2232;
        _2455 = ((_2658 * 0.039999999105930328369140625) * _2671) + _2234;
        _2457 = ((_2660 * 0.039999999105930328369140625) * _2671) + _2236;
    }
    else
    {
        _2447 = _1899;
        _2449 = _1901;
        _2451 = _1903;
        _2453 = _2232;
        _2455 = _2234;
        _2457 = _2236;
    }
    float _4417 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _4428 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4439 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _2474 = ((isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2447 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _681))) + ((_2453 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1515)) * cbPerFrame._m0[3u].x);
    float _2475 = ((isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2449 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _681))) + ((_2455 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _1515)) * cbPerFrame._m0[3u].x);
    float _2476 = ((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2451 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _681))) + ((_2457 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1515)) * cbPerFrame._m0[3u].x);
    uint _2477 = _293 + 6u;
    float _2485 = _616 / cbSceneParam._m0[86u].x;
    float _2486 = _617 / cbSceneParam._m0[86u].y;
    vec4 _2500 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2485, _2486, (log2((isnan(cbSceneParam._m0[77u].w) ? _537 : (isnan(_537) ? cbSceneParam._m0[77u].w : min(_537, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2502 = _2500.x;
    float _2503 = _2500.y;
    float _2504 = _2500.z;
    float _2505 = _2500.w;
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    if (_537 > cbSceneParam._m0[78u].w)
    {
        float _2560 = isnan(_537) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _537 : min(cbSceneParam._m0[80u].w, _537));
        float _2561 = _2560 / _537;
        float _2572 = _2561 * _588;
        float _2573 = _589 * _2561;
        float _2574 = (-0.0) - _2573;
        float _2576 = _2561 * _590;
        float _2578 = (cbSceneParam._m0[77u].w * _2574) / _2560;
        float _2579 = _2578 + cbSceneParam._m0[79u].w;
        float _2580 = cbSceneParam._m0[79u].w - _2573;
        float _2586 = sqrt(((_2572 * _2572) + (_2573 * _2573)) + (_2576 * _2576));
        float _2589 = (1.0 - (cbSceneParam._m0[77u].w / _2560)) * _2586;
        float _2594 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2596 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2773;
        if (abs((_2574 - _2578) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2773 = ((((_2579 > 0.0) ? exp2(_2594 * _2579) : (2.0 - exp2(_2596 * _2579))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2589;
        }
        else
        {
            float _2717 = 1.0 / cbSceneParam._m0[80u].x;
            float _2718 = isnan(_2580) ? _2579 : (isnan(_2579) ? _2580 : max(_2579, _2580));
            float _2719 = isnan(_2580) ? _2579 : (isnan(_2579) ? _2580 : min(_2579, _2580));
            float _2728 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : min(_2718, 0.0));
            float _2729 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : min(_2719, 0.0));
            _2773 = ((abs(_2586 / _2574) * cbSceneParam._m0[80u].y) * ((((_2728 - _2729) * 2.0) - ((exp2(_2594 * (isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0)))) - exp2(_2594 * (isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0))))) * _2717)) - ((exp2(_2596 * _2728) - exp2(_2596 * _2729)) * _2717))) + (_2589 * cbSceneParam._m0[80u].z);
        }
        vec4 _2775 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2485, _2486, 1.0), 0.0);
        float _2784 = exp2((_2773 * (-1.44269502162933349609375)) * (1.0 - _2775.w));
        float _2785 = log2(_2784);
        float _2801 = log2(_2505);
        _2598 = (exp2(_2801 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].x)) * _2775.x) / cbSceneParam._m0[78u].x)) + _2502;
        _2600 = (exp2(_2801 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].y)) * _2775.y) / cbSceneParam._m0[78u].y)) + _2503;
        _2602 = (exp2(_2801 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2785 * cbSceneParam._m0[78u].z)) * _2775.z) / cbSceneParam._m0[78u].z)) + _2504;
        _2604 = _2784 * _2505;
    }
    else
    {
        _2598 = _2502;
        _2600 = _2503;
        _2602 = _2504;
        _2604 = _2505;
    }
    bool _2811;
    vec4 _2614;
    vec4 _2636;
    float _2638;
    float _2642;
    float _2643;
    float _2644;
    float _2645;
    bool _2655;
    for (;;)
    {
        _2614 = cbMatDynParam._m0[0u];
        float _2616 = roundEven(_2614.y);
        bool _2617 = _2616 == 3.0;
        float _2618 = log2(_2604);
        float _2625 = exp2(_2618 * cbSceneParam._m0[78u].x) * _2474;
        float _2626 = exp2(_2618 * cbSceneParam._m0[78u].y) * _2475;
        float _2627 = exp2(_2618 * cbSceneParam._m0[78u].z) * _2476;
        float _2634 = _604 + (-0.5);
        _2636 = cbMtdParam._m0[1u];
        _2638 = _2636.y * _2634;
        float _2641 = (_2616 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2642 = _2641 * (_2617 ? _2625 : (_2625 + (cbSceneParam._m0[72u].w * _2598)));
        _2643 = _2641 * (_2617 ? _2626 : (_2626 + (cbSceneParam._m0[72u].w * _2600)));
        _2644 = _2641 * (_2617 ? _2627 : (_2627 + (cbSceneParam._m0[72u].w * _2602)));
        _2645 = _2634 * 0.999000012874603271484375;
        _2655 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2655)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _2645) < 0.5)
            {
                _2811 = true;
                break;
            }
        }
        uint _2752 = _656 + uint(_2614.w);
        if ((cbInstanceData._m0[_2752].w < 1.0) && ((cbInstanceData._m0[_2752].w + _2645) < 0.5))
        {
            _2811 = true;
            break;
        }
        if ((_2638 + 1.0) < _2636.x)
        {
            _2811 = true;
            break;
        }
        _2811 = false;
        break;
    }
    float _3015;
    if (_2811)
    {
        discard_state = true;
        _3015 = 0.0;
    }
    else
    {
        _3015 = cbInstanceData._m0[_2477].w;
    }
    SV_Target.x = _2642;
    SV_Target.y = _2643;
    SV_Target.z = _2644;
    SV_Target.w = _3015;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2477].w;
    discard_exit();
}


