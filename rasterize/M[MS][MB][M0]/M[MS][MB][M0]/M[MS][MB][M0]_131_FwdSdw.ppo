#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1218;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _366 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _366) * cbMtdParam._m0[24u].x) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3806 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _391 = (_384 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _392 = (_384 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _393 = (_384 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _412 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _432 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _449 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _451 = _449.x;
    float _452 = _449.y;
    float _453 = _449.z;
    float _462 = ((_432.z - _453) * _384) + _453;
    float _465 = ((((_432.x - _451) * _384) + _451) * 2.0) + (-1.0);
    float _467 = ((((_432.y - _452) * _384) + _452) * 2.0) + (-1.0);
    float _468 = dot(vec2(_465, _467), vec2(_465, _467));
    float _3817 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _473 = sqrt(1.0 - (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))));
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _504 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _506 = _504.x;
    float _507 = 1.0 - _506;
    float _513 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _516 = ((isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : min(_513, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _525 = (_516 - ((((((_506 - _507) * cbMtdParam._m0[24u].z) + _507) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _516))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3838 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _526 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _533 = (_526 * ((_412.x * cbMtdParam._m0[18u].x) - _391)) + _391;
    float _534 = (_526 * ((_412.y * cbMtdParam._m0[18u].y) - _392)) + _392;
    float _535 = (_526 * ((_412.z * cbMtdParam._m0[18u].z) - _393)) + _393;
    vec4 _547 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _549 = _547.x;
    float _550 = 1.0 - _549;
    float _577 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_549 - _550) * cbMtdParam._m0[24u].w) + _550) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3849 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _586 = ((((cbMtdParam._m0[10u].x - _533) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _578) + _533;
    float _587 = ((((cbMtdParam._m0[10u].y - _534) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _578) + _534;
    float _588 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _535)) * _578) + _535;
    vec4 _602 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _609 = (_602.x * 2.0) + (-1.0);
    float _610 = (_602.y * 2.0) + (-1.0);
    float _611 = dot(vec2(_609, _610), vec2(_609, _610));
    float _3860 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _619 = (_526 * (_602.z - _462)) + _462;
    float _622 = ((cbMtdParam._m0[23u].y - _619) * _578) + _619;
    vec4 _641 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _647 = (_641.x * 2.0) + (-1.0);
    float _648 = (_641.y * 2.0) + (-1.0);
    float _649 = dot(vec2(_647, _648), vec2(_647, _648));
    float _3871 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _666 = (((_609 - _465) + (cbMtdParam._m0[21u].x * _465)) * _526) + _465;
    float _667 = (((_610 - _467) + (cbMtdParam._m0[21u].x * _467)) * _526) + _467;
    float _668 = (_526 * (sqrt(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) - _473)) + _473;
    float _679 = (((_647 - _666) + (_666 * cbMtdParam._m0[22u].z)) * _578) + _666;
    float _680 = (((_648 - _667) + (_667 * cbMtdParam._m0[22u].z)) * _578) + _667;
    float _681 = ((sqrt(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) - _668) * _578) + _668;
    float _683 = cbMtdParam._m0[22u].x + _486.w;
    float _686 = fma(_681, _236 * NORMAL.x, fma(_680, _243 * TANGENT.x, (_229 * _221) * _679));
    float _689 = fma(_681, _236 * NORMAL.y, fma(_680, _243 * TANGENT.y, (_229 * _222) * _679));
    float _692 = fma(_681, _236 * NORMAL.z, fma(_680, _243 * TANGENT.z, (_229 * _223) * _679));
    float _696 = inversesqrt(dot(vec3(_686, _689, _692), vec3(_686, _689, _692)));
    float _697 = _696 * _686;
    float _698 = _696 * _689;
    float _699 = _696 * _692;
    float _3882 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _700 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _3904 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _3915 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _3926 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _718 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _769 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _759);
    float _770 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _759);
    float _771 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _759);
    float _775 = inversesqrt(dot(vec3(_769, _770, _771), vec3(_769, _770, _771)));
    float _776 = _769 * _775;
    float _777 = _770 * _775;
    float _778 = _771 * _775;
    float _784 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _785 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _803 = fma(_699, cbSceneParam._m0[5u].z, fma(_698, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _697));
    float _806 = fma(_699, cbSceneParam._m0[6u].z, fma(_698, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _697));
    float _809 = fma(_699, cbSceneParam._m0[7u].z, fma(_698, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _697));
    uint _823 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _829 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_823].x;
    float _830 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_823].y;
    float _831 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * cbInstanceData._m0[_823].z;
    float _3937 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    vec4 _843 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _784, cbSceneParam._m0[86u].y * _785));
    float _847 = ((isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * TEXCOORD_5.w) * _843.x;
    float _848 = dot(vec3(_697, _698, _699), vec3(_776, _777, _778));
    float _851 = _848 * 2.0;
    float _855 = (_851 * _697) - _776;
    float _856 = (_851 * _698) - _777;
    float _857 = (_851 * _699) - _778;
    float _861 = abs(dot(vec3(_776, _777, _778), vec3(_697, _698, _699)));
    float _3970 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _863 = sqrt(_700);
    float _876 = exp2((_863 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_863 * 3.0));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1217;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _942 = fma(_916, cbModelParam._m0[26u].z, fma(_912, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _908));
        float _946 = fma(_916, cbModelParam._m0[27u].z, fma(_912, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _908));
        float _950 = fma(_916, cbModelParam._m0[28u].z, fma(_912, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _908));
        float _975 = _908 + _697;
        float _976 = _912 + _698;
        float _977 = _916 + _699;
        float _987 = fma(_977, cbModelParam._m0[26u].z, fma(_976, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _975)) - _942;
        float _988 = fma(_977, cbModelParam._m0[27u].z, fma(_976, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _975)) - _946;
        float _989 = fma(_977, cbModelParam._m0[28u].z, fma(_976, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _975)) - _950;
        float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
        float _1006 = ((_993 * _987) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_942 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_993 * _988) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_946 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_993 * _989) / cbModelParam._m0[34u].z) + ((((((_950 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        float _1045 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1011.x + (-0.5));
        float _1047 = _1045 * (_1011.y + (-0.5));
        float _1048 = _1045 * (_1011.z + (-0.5));
        float _1055 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1018.x + (-0.5));
        float _1057 = _1055 * (_1018.y + (-0.5));
        float _1058 = _1055 * (_1018.z + (-0.5));
        float _1065 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1025.x + (-0.5));
        float _1067 = _1065 * (_1025.y + (-0.5));
        float _1068 = _1065 * (_1025.z + (-0.5));
        float _1075 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1032.x + (-0.5));
        float _1077 = _1075 * (_1032.y + (-0.5));
        float _1078 = _1075 * (_1032.z + (-0.5));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = _1046 * 0.5;
        float _1083 = _1056 * 0.5;
        float _1084 = _1066 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1099 = (dot(vec3(_697, _698, _699), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1109 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _4018 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1111 + 1.0))) + _1116) * _1079;
        float _1126 = _1047 * 0.5;
        float _1127 = _1057 * 0.5;
        float _1128 = _1067 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_697, _698, _699), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _4051 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1153 + 1.0))) + _1158) * _1080;
        float _1168 = _1048 * 0.5;
        float _1169 = _1058 * 0.5;
        float _1170 = _1068 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_697, _698, _699), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _4084 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1195 + 1.0))) + _1200) * _1081;
        _1217 = _1048;
        _1219 = _1047;
        _1220 = _1046;
        _1221 = _1058;
        _1222 = _1057;
        _1223 = _1056;
        _1224 = _1068;
        _1225 = _1067;
        _1226 = _1066;
        _1227 = _1081;
        _1228 = _1080;
        _1229 = _1079;
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
    }
    else
    {
        _1217 = _1218;
        _1219 = _1218;
        _1220 = _1218;
        _1221 = _1218;
        _1222 = _1218;
        _1223 = _1218;
        _1224 = _1218;
        _1225 = _1218;
        _1226 = _1218;
        _1227 = _1218;
        _1228 = _1218;
        _1229 = _1218;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1257 = fma(_916, cbModelParam._m0[30u].z, fma(_912, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _908));
        float _1261 = fma(_916, cbModelParam._m0[31u].z, fma(_912, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _908));
        float _1265 = fma(_916, cbModelParam._m0[32u].z, fma(_912, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _908));
        float _1288 = _908 + _697;
        float _1289 = _912 + _698;
        float _1290 = _916 + _699;
        float _1300 = fma(_1290, cbModelParam._m0[30u].z, fma(_1289, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1288)) - _1257;
        float _1301 = fma(_1290, cbModelParam._m0[31u].z, fma(_1289, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1288)) - _1261;
        float _1302 = fma(_1290, cbModelParam._m0[32u].z, fma(_1289, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1288)) - _1265;
        float _1306 = inversesqrt(dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302)));
        float _1319 = ((_1306 * _1300) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1257 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1306 * _1301) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1261 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1306 * _1302) / cbModelParam._m0[35u].z) + ((((((_1265 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        float _1356 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1323.x + (-0.5));
        float _1358 = _1356 * (_1323.y + (-0.5));
        float _1359 = _1356 * (_1323.z + (-0.5));
        float _1366 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1330.x + (-0.5));
        float _1368 = _1366 * (_1330.y + (-0.5));
        float _1369 = _1366 * (_1330.z + (-0.5));
        float _1376 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1337.x + (-0.5));
        float _1378 = _1376 * (_1337.y + (-0.5));
        float _1379 = _1376 * (_1337.z + (-0.5));
        float _1386 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1344.x + (-0.5));
        float _1388 = _1386 * (_1344.y + (-0.5));
        float _1389 = _1386 * (_1344.z + (-0.5));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = _1357 * 0.5;
        float _1394 = _1367 * 0.5;
        float _1395 = _1377 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_697, _698, _699), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _4147 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1420 + 1.0))) + _1425) * _1390;
        float _1435 = _1358 * 0.5;
        float _1436 = _1368 * 0.5;
        float _1437 = _1378 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_697, _698, _699), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4180 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1462 + 1.0))) + _1467) * _1391;
        float _1477 = _1359 * 0.5;
        float _1478 = _1369 * 0.5;
        float _1479 = _1379 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_697, _698, _699), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4213 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1504 + 1.0))) + _1509) * _1392;
        _1526 = _1359;
        _1527 = _1358;
        _1528 = _1357;
        _1529 = _1369;
        _1530 = _1368;
        _1531 = _1367;
        _1532 = _1379;
        _1533 = _1378;
        _1534 = _1377;
        _1535 = _1392;
        _1536 = _1391;
        _1537 = _1390;
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
    }
    else
    {
        _1526 = _1218;
        _1527 = _1218;
        _1528 = _1218;
        _1529 = _1218;
        _1530 = _1218;
        _1531 = _1218;
        _1532 = _1218;
        _1533 = _1218;
        _1534 = _1218;
        _1535 = _1218;
        _1536 = _1218;
        _1537 = _1218;
        _1538 = 0.0;
        _1539 = 0.0;
        _1540 = 0.0;
    }
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1230)) + _1230;
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1231)) + _1231;
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1232)) + _1232;
    float _1573 = fma(_1552, cbSceneParam._m0[89u].z, fma(_1551, cbSceneParam._m0[89u].y, _1550 * cbSceneParam._m0[89u].x));
    float _1576 = fma(_1552, cbSceneParam._m0[90u].z, fma(_1551, cbSceneParam._m0[90u].y, _1550 * cbSceneParam._m0[90u].x));
    float _1579 = fma(_1552, cbSceneParam._m0[91u].z, fma(_1551, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1550));
    float _1594 = _855 * 0.5;
    float _1595 = _856 * 0.5;
    float _1596 = _857 * 0.5;
    float _1597 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1600 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1603 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1637;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1610 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1217, _1221, _1224, _1227));
        float _1614 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1618 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1220, _1223, _1226, _1229));
        float _1625 = dot(vec4(cbModelParam._m0[39u]), vec4(_1594, _1595, _1596, 1.0));
        _1637 = dot(vec3(isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1625) ? 0.0 : (isnan(0.0) ? _1625 : max(0.0, _1625))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1637 = 1.0;
    }
    float _1648;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1639 = dot(vec4(cbModelParam._m0[40u]), vec4(_1594, _1595, _1596, 1.0));
        _1648 = dot(vec3(isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1639) ? 0.0 : (isnan(0.0) ? _1639 : max(0.0, _1639))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1648 = 1.0;
    }
    float _1652 = (_1648 * cbModelParam._m0[1u].x) + (_1637 * (1.0 - cbModelParam._m0[1u].x));
    float _1662 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _700);
    float _1663 = isnan(_1662) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1662 : min(cbModelParam._m0[25u].z, _1662));
    float _1743;
    float _1745;
    float _1747;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1710 = fma(_916, cbModelParam._m0[13u].z, fma(_912, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _908)) + cbModelParam._m0[13u].w;
        float _1714 = fma(_916, cbModelParam._m0[14u].z, fma(_912, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _908)) + cbModelParam._m0[14u].w;
        float _1718 = fma(_916, cbModelParam._m0[15u].z, fma(_912, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _908)) + cbModelParam._m0[15u].w;
        float _1721 = fma(_857, cbModelParam._m0[13u].z, fma(_856, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _855));
        float _1724 = fma(_857, cbModelParam._m0[14u].z, fma(_856, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _855));
        float _1727 = fma(_857, cbModelParam._m0[15u].z, fma(_856, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _855));
        float _1755;
        if (_1721 > 0.0)
        {
            _1755 = abs((1.0 - _1710) / _1721);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1710 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1755 = frontier_phi_14_12_ladder;
        }
        float _1924;
        if (_1724 > 0.0)
        {
            _1924 = abs((1.0 - _1714) / _1724);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1714 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1924 = frontier_phi_23_19_ladder;
        }
        float _2219;
        if (_1727 > 0.0)
        {
            _2219 = abs((1.0 - _1718) / _1727);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1718 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2219 = frontier_phi_35_30_ladder;
        }
        float _2221 = isnan(_1924) ? _1755 : (isnan(_1755) ? _1924 : min(_1755, _1924));
        float _2222 = isnan(_2219) ? _2221 : (isnan(_2221) ? _2219 : min(_2221, _2219));
        float _2226 = (_2222 * _1721) + _1710;
        float _2227 = (_2222 * _1724) + _1714;
        float _2228 = (_2222 * _1727) + _1718;
        float _2229 = _2222 * 9.9999997473787516355514526367188e-05;
        float _2231 = (-1.0) - _2229;
        float _2233 = _2229 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2228 > _2233) || ((_2228 < _2231) || ((_2227 > _2233) || ((_2227 < _2231) || ((_2226 < _2231) || (_2226 > _2233))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2373 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2228, cbModelParam._m0[9u].z, fma(_2227, cbModelParam._m0[9u].y, _2226 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2228, cbModelParam._m0[10u].z, fma(_2227, cbModelParam._m0[10u].y, _2226 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2228, cbModelParam._m0[11u].z, fma(_2227, cbModelParam._m0[11u].y, _2226 * cbModelParam._m0[11u].x))), _1663);
            frontier_phi_13_35_ladder = _2373.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2373.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2373.x * cbModelParam._m0[1u].y;
        }
        _1743 = frontier_phi_13_35_ladder_2;
        _1745 = frontier_phi_13_35_ladder_1;
        _1747 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1731 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_855, _856, _857), _1663);
        _1743 = _1731.x * cbModelParam._m0[1u].y;
        _1745 = _1731.y * cbModelParam._m0[1u].y;
        _1747 = _1731.z * cbModelParam._m0[1u].y;
    }
    float _1751 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _700);
    float _1752 = isnan(_1751) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1751 : min(cbModelParam._m0[25u].w, _1751));
    float _1841;
    float _1843;
    float _1845;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1805 = fma(_916, cbModelParam._m0[21u].z, fma(_912, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _908)) + cbModelParam._m0[21u].w;
        float _1809 = fma(_916, cbModelParam._m0[22u].z, fma(_912, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _908)) + cbModelParam._m0[22u].w;
        float _1813 = fma(_916, cbModelParam._m0[23u].z, fma(_912, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _908)) + cbModelParam._m0[23u].w;
        float _1816 = fma(_857, cbModelParam._m0[21u].z, fma(_856, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _855));
        float _1819 = fma(_857, cbModelParam._m0[22u].z, fma(_856, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _855));
        float _1822 = fma(_857, cbModelParam._m0[23u].z, fma(_856, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _855));
        float _1929;
        if (_1816 > 0.0)
        {
            _1929 = abs((1.0 - _1805) / _1816);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1805 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1929 = frontier_phi_25_21_ladder;
        }
        float _2246;
        if (_1819 > 0.0)
        {
            _2246 = abs((1.0 - _1809) / _1819);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1809 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2246 = frontier_phi_37_32_ladder;
        }
        float _2573;
        if (_1822 > 0.0)
        {
            _2573 = abs((1.0 - _1813) / _1822);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1813 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2573 = frontier_phi_47_44_ladder;
        }
        float _2575 = isnan(_2246) ? _1929 : (isnan(_1929) ? _2246 : min(_1929, _2246));
        float _2576 = isnan(_2573) ? _2575 : (isnan(_2575) ? _2573 : min(_2575, _2573));
        float _2580 = (_2576 * _1816) + _1805;
        float _2581 = (_2576 * _1819) + _1809;
        float _2582 = (_2576 * _1822) + _1813;
        float _2583 = _2576 * 9.9999997473787516355514526367188e-05;
        float _2584 = (-1.0) - _2583;
        float _2586 = _2583 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2582 > _2586) || ((_2582 < _2584) || ((_2581 > _2586) || ((_2581 < _2584) || ((_2580 < _2584) || (_2580 > _2586))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2700 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2582, cbModelParam._m0[17u].z, fma(_2581, cbModelParam._m0[17u].y, _2580 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2582, cbModelParam._m0[18u].z, fma(_2581, cbModelParam._m0[18u].y, _2580 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2582, cbModelParam._m0[19u].z, fma(_2581, cbModelParam._m0[19u].y, _2580 * cbModelParam._m0[19u].x))), _1752);
            frontier_phi_22_47_ladder = _2700.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2700.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2700.x * cbModelParam._m0[1u].z;
        }
        _1841 = frontier_phi_22_47_ladder_2;
        _1843 = frontier_phi_22_47_ladder_1;
        _1845 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1825 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_855, _856, _857), _1752);
        _1841 = _1825.x * cbModelParam._m0[1u].z;
        _1843 = _1825.y * cbModelParam._m0[1u].z;
        _1845 = _1825.z * cbModelParam._m0[1u].z;
    }
    float _1857 = ((((1.0 - _876) * ((_863 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_876 * _863)) * _847;
    float _1858 = _1857 * ((cbModelParam._m0[1u].w * (_1841 - _1743)) + _1743);
    float _1859 = _1857 * ((cbModelParam._m0[1u].w * (_1843 - _1745)) + _1745);
    float _1860 = _1857 * ((cbModelParam._m0[1u].w * (_1845 - _1747)) + _1747);
    float _1863 = fma(_1860, cbSceneParam._m0[89u].z, fma(_1859, cbSceneParam._m0[89u].y, _1858 * cbSceneParam._m0[89u].x));
    float _1866 = fma(_1860, cbSceneParam._m0[90u].z, fma(_1859, cbSceneParam._m0[90u].y, _1858 * cbSceneParam._m0[90u].x));
    float _1869 = fma(_1860, cbSceneParam._m0[91u].z, fma(_1859, cbSceneParam._m0[91u].y, _1858 * cbSceneParam._m0[91u].x));
    float _1903 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1907 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1911 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1915 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1916 = _1903 / _1915;
    float _1917 = _1907 / _1915;
    float _1918 = _1911 / _1915;
    float _2065;
    float _2066;
    float _2067;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1945 = ((uint(_1918 > cbSceneParam._m0[59u].y) + uint(_1918 > cbSceneParam._m0[59u].x)) + uint(_1918 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1946 = _1945 + 43u;
        uint _1954 = _1945 + 44u;
        uint _1962 = _1945 + 45u;
        uint _1970 = _1945 + 46u;
        float _1981 = fma(_1915, cbSceneParam._m0[_1946].w, fma(_1911, cbSceneParam._m0[_1946].z, fma(_1907, cbSceneParam._m0[_1946].y, _1903 * cbSceneParam._m0[_1946].x)));
        float _1985 = fma(_1915, cbSceneParam._m0[_1954].w, fma(_1911, cbSceneParam._m0[_1954].z, fma(_1907, cbSceneParam._m0[_1954].y, _1903 * cbSceneParam._m0[_1954].x)));
        float _1993 = fma(_1915, cbSceneParam._m0[_1970].w, fma(_1911, cbSceneParam._m0[_1970].z, fma(_1907, cbSceneParam._m0[_1970].y, _1903 * cbSceneParam._m0[_1970].x)));
        float _1998 = cbSceneParam._m0[33u].z * _1993;
        float _2000 = cbSceneParam._m0[33u].w * _1993;
        float _2003 = fma(_1915, cbSceneParam._m0[_1962].w, fma(_1911, cbSceneParam._m0[_1962].z, fma(_1907, cbSceneParam._m0[_1962].y, _1903 * cbSceneParam._m0[_1962].x))) / _1993;
        float _2051 = (cbSceneParam._m0[33u].x - sqrt(((_1917 * _1917) + (_1916 * _1916)) + (_1918 * _1918))) * cbSceneParam._m0[33u].y;
        float _4339 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2058 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1998 + _1981) / _1993, (_2000 + _1985) / _1993), _2003), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2000 + _1981) / _1993, (_1985 - _1998) / _1993), _2003), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1981 - _1998) / _1993, (_1985 - _2000) / _1993), _2003), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1981 - _2000) / _1993, (_1998 + _1985) / _1993), _2003), 0.0)).x), vec4(0.25)));
        _2065 = 1.0 - (_2058 * cbSceneParam._m0[34u].x);
        _2066 = 1.0 - (_2058 * cbSceneParam._m0[34u].y);
        _2067 = 1.0 - (_2058 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2065 = 1.0;
        _2066 = 1.0;
        _2067 = 1.0;
    }
    float _2131;
    float _2133;
    float _2135;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2119 = fma(_1915, cbSceneParam._m0[63u].w, fma(_1911, cbSceneParam._m0[63u].z, fma(_1907, cbSceneParam._m0[63u].y, _1903 * cbSceneParam._m0[63u].x)));
        float _2120 = fma(_1915, cbSceneParam._m0[60u].w, fma(_1911, cbSceneParam._m0[60u].z, fma(_1907, cbSceneParam._m0[60u].y, _1903 * cbSceneParam._m0[60u].x))) / _2119;
        float _2121 = fma(_1915, cbSceneParam._m0[61u].w, fma(_1911, cbSceneParam._m0[61u].z, fma(_1907, cbSceneParam._m0[61u].y, _1903 * cbSceneParam._m0[61u].x))) / _2119;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2120 >= cbSceneParam._m0[64u].x) && (_2121 >= cbSceneParam._m0[64u].y)) && (_2120 <= cbSceneParam._m0[64u].z)) && (_2121 <= cbSceneParam._m0[64u].w))
        {
            float _2259 = fma(_1915, cbSceneParam._m0[62u].w, fma(_1911, cbSceneParam._m0[62u].z, fma(_1907, cbSceneParam._m0[62u].y, _1903 * cbSceneParam._m0[62u].x))) / _2119;
            float _2263 = isnan(cbSceneParam._m0[41u].w) ? _2259 : (isnan(_2259) ? cbSceneParam._m0[41u].w : max(_2259, cbSceneParam._m0[41u].w));
            float _2306 = (cbSceneParam._m0[33u].x - sqrt(((_1917 * _1917) + (_1916 * _1916)) + (_1918 * _1918))) * cbSceneParam._m0[33u].y;
            float _4355 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
            float _2313 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2120, cbSceneParam._m0[33u].w + _2121), _2263), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2120, _2121 - cbSceneParam._m0[33u].z), _2263), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2120 - cbSceneParam._m0[33u].z, _2121 - cbSceneParam._m0[33u].w), _2263), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2120 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2121), _2263), 0.0)).x), vec4(0.25)));
            float _2317 = 1.0 - (_2313 * cbSceneParam._m0[34u].x);
            float _2318 = 1.0 - (_2313 * cbSceneParam._m0[34u].y);
            float _2319 = 1.0 - (_2313 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2319) ? _2067 : (isnan(_2067) ? _2319 : min(_2067, _2319));
            frontier_phi_34_33_ladder_1 = isnan(_2318) ? _2066 : (isnan(_2066) ? _2318 : min(_2066, _2318));
            frontier_phi_34_33_ladder_2 = isnan(_2317) ? _2065 : (isnan(_2065) ? _2317 : min(_2065, _2317));
        }
        else
        {
            frontier_phi_34_33_ladder = _2067;
            frontier_phi_34_33_ladder_1 = _2066;
            frontier_phi_34_33_ladder_2 = _2065;
        }
        _2131 = frontier_phi_34_33_ladder_2;
        _2133 = frontier_phi_34_33_ladder_1;
        _2135 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2131 = _2065;
        _2133 = _2066;
        _2135 = _2067;
    }
    uvec4 _2140 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _2142 = _2140.x * 14u;
    uint _2143 = _2142 + 13u;
    float _2150 = _847 + (-1.0);
    float _2155 = (cbLight._m0[_2143].x * _2150) + 1.0;
    float _2156 = (cbLight._m0[_2143].y * _2150) + 1.0;
    float _2157 = (cbLight._m0[_2143].z * _2150) + 1.0;
    float _2158 = (cbLight._m0[_2143].w * _2150) + 1.0;
    uint _2159 = _2142 + 5u;
    float _2165 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
    uint _2169 = _2142 + 4u;
    float _2178 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
    uint _2182 = _2142 | 1u;
    float _2193 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_697, _698, _699));
    float _2196 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_697, _698, _699));
    float _4391 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _4402 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2201 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * 0.3183098733425140380859375;
    float _2203 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * 0.3183098733425140380859375;
    float _2210 = ((cbLight._m0[_2159].x * _2165) * _2203) + (((cbLight._m0[_2169].x * _2131) * _2178) * _2201);
    float _2211 = ((_2165 * cbLight._m0[_2159].y) * _2203) + (((cbLight._m0[_2169].y * _2133) * _2178) * _2201);
    float _2212 = ((_2165 * cbLight._m0[_2159].z) * _2203) + (((cbLight._m0[_2169].z * _2135) * _2178) * _2201);
    uvec4 _2216 = floatBitsToUint(cbLight._m0[_2142 + 12u]);
    bool _2218 = _2216.x == 0u;
    float _2320;
    float _2322;
    float _2324;
    if (_2218)
    {
        _2320 = _2210;
        _2322 = _2211;
        _2324 = _2212;
    }
    else
    {
        uint _2328 = _2142 + 6u;
        float _2344 = (dot(vec3(cbLight._m0[_2142 + 2u].xyz), vec3(_697, _698, _699)) * 0.5) + 0.5;
        float _2345 = _2344 * _2344;
        float _4413 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2346 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2347 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
        _2320 = (((cbLight._m0[_2328].x * 0.3183098733425140380859375) * _2346) * _2347) + _2210;
        _2322 = (((cbLight._m0[_2328].y * 0.3183098733425140380859375) * _2346) * _2347) + _2211;
        _2324 = (((cbLight._m0[_2328].z * 0.3183098733425140380859375) * _2346) * _2347) + _2212;
    }
    bool _2327 = _2216.y == 0u;
    float _2382;
    float _2384;
    float _2386;
    if (_2327)
    {
        _2382 = _2320;
        _2384 = _2322;
        _2386 = _2324;
    }
    else
    {
        uint _2544 = _2142 + 7u;
        float _2560 = (dot(vec3(cbLight._m0[_2142 + 3u].xyz), vec3(_697, _698, _699)) * 0.5) + 0.5;
        float _2561 = _2560 * _2560;
        float _4429 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2562 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2563 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2382 = (((cbLight._m0[_2544].x * 0.3183098733425140380859375) * _2562) * _2563) + _2320;
        _2384 = (((cbLight._m0[_2544].y * 0.3183098733425140380859375) * _2562) * _2563) + _2322;
        _2386 = (((cbLight._m0[_2544].z * 0.3183098733425140380859375) * _2562) * _2563) + _2324;
    }
    uint _2389 = _2142 + 8u;
    float _2402 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2142].w)) * _700) * 0.949999988079071044921875);
    float _2403 = _2402 * _2402;
    float _2404 = cbLight._m0[_2142].x + _776;
    float _2405 = cbLight._m0[_2142].y + _777;
    float _2406 = cbLight._m0[_2142].z + _778;
    float _2410 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
    float _2411 = _2410 * _2404;
    float _2412 = _2410 * _2405;
    float _2413 = _2410 * _2406;
    float _2414 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2142].xyz));
    float _4445 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _4456 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _2418 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2419 = dot(vec3(_697, _698, _699), vec3(_2411, _2412, _2413));
    float _4467 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2422 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2423 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_2411, _2412, _2413));
    float _4478 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2427 = _2403 * _2403;
    float _2431 = ((_2422 * _2422) * (_2427 + (-1.0))) + 1.0;
    float _2442 = (exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2443 = 1.0 - _2403;
    float _2454 = (0.5 / (((_2418 * ((_2417 * _2443) + _2403)) + 9.9999999392252902907785028219223e-09) + (((_2418 * _2443) + _2403) * _2417))) * _2417;
    float _4489 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2456 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2427 / ((_2431 * _2431) * 3.141590118408203125));
    uint _2470 = _2142 + 9u;
    float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2182].w)) * _700) * 0.949999988079071044921875);
    float _2482 = _2481 * _2481;
    float _2483 = cbLight._m0[_2182].x + _776;
    float _2484 = cbLight._m0[_2182].y + _777;
    float _2485 = cbLight._m0[_2182].z + _778;
    float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
    float _2490 = _2489 * _2483;
    float _2491 = _2489 * _2484;
    float _2492 = _2489 * _2485;
    float _2493 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2182].xyz));
    float _4500 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2496 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
    float _2497 = dot(vec3(_697, _698, _699), vec3(_2490, _2491, _2492));
    float _4511 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2500 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _2501 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2490, _2491, _2492));
    float _4522 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2505 = _2482 * _2482;
    float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
    float _2518 = (exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2519 = 1.0 - _2482;
    float _2529 = (0.5 / (((_2418 * ((_2496 * _2519) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2418 * _2519) + _2482) * _2496))) * _2496;
    float _4533 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2531 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
    float _2541 = (((_2518 * cbLight._m0[_2470].x) * _2531) * _2165) + ((((cbLight._m0[_2389].x * _2131) * _2442) * _2456) * _2178);
    float _2542 = (((_2518 * cbLight._m0[_2470].y) * _2531) * _2165) + ((((cbLight._m0[_2389].y * _2133) * _2442) * _2456) * _2178);
    float _2543 = (((_2518 * cbLight._m0[_2470].z) * _2531) * _2165) + ((((cbLight._m0[_2389].z * _2135) * _2442) * _2456) * _2178);
    float _2599;
    float _2601;
    float _2603;
    if (_2218)
    {
        _2599 = _2541;
        _2601 = _2542;
        _2603 = _2543;
    }
    else
    {
        uint _2605 = _2142 + 2u;
        uint _2609 = _2142 + 10u;
        float _2623 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2605].w)) * _700) * 0.949999988079071044921875);
        float _2624 = _2623 * _2623;
        float _2625 = cbLight._m0[_2605].x + _776;
        float _2626 = cbLight._m0[_2605].y + _777;
        float _2627 = cbLight._m0[_2605].z + _778;
        float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
        float _2632 = _2631 * _2625;
        float _2633 = _2631 * _2626;
        float _2634 = _2631 * _2627;
        float _2635 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2605].xyz));
        float _4544 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2639 = dot(vec3(_697, _698, _699), vec3(_2632, _2633, _2634));
        float _4555 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2643 = dot(vec3(cbLight._m0[_2605].xyz), vec3(_2632, _2633, _2634));
        float _4566 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2647 = _2624 * _2624;
        float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
        float _2660 = (exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2661 = 1.0 - _2624;
        float _2671 = (0.5 / (((_2418 * ((_2638 * _2661) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2418 * _2661) + _2624) * _2638))) * _2638;
        float _4577 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2673 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
        float _2674 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
        _2599 = (((_2660 * cbLight._m0[_2609].x) * _2673) * _2674) + _2541;
        _2601 = (((_2660 * cbLight._m0[_2609].y) * _2673) * _2674) + _2542;
        _2603 = (((_2660 * cbLight._m0[_2609].z) * _2673) * _2674) + _2543;
    }
    float _2705;
    float _2707;
    float _2709;
    if (_2327)
    {
        _2705 = _2599;
        _2707 = _2601;
        _2709 = _2603;
    }
    else
    {
        uint _2716 = _2142 + 3u;
        uint _2720 = _2142 + 11u;
        float _2734 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2716].w)) * _700) * 0.949999988079071044921875);
        float _2735 = _2734 * _2734;
        float _2736 = cbLight._m0[_2716].x + _776;
        float _2737 = cbLight._m0[_2716].y + _777;
        float _2738 = cbLight._m0[_2716].z + _778;
        float _2742 = inversesqrt(dot(vec3(_2736, _2737, _2738), vec3(_2736, _2737, _2738)));
        float _2743 = _2742 * _2736;
        float _2744 = _2742 * _2737;
        float _2745 = _2742 * _2738;
        float _2746 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2716].xyz));
        float _4593 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2749 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2750 = dot(vec3(_697, _698, _699), vec3(_2743, _2744, _2745));
        float _4604 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2753 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2754 = dot(vec3(cbLight._m0[_2716].xyz), vec3(_2743, _2744, _2745));
        float _4615 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2758 = _2735 * _2735;
        float _2762 = ((_2753 * _2753) * (_2758 + (-1.0))) + 1.0;
        float _2771 = (exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2772 = 1.0 - _2735;
        float _2782 = (0.5 / (((_2418 * ((_2749 * _2772) + _2735)) + 9.9999999392252902907785028219223e-09) + (((_2418 * _2772) + _2735) * _2749))) * _2749;
        float _4626 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2784 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2758 / ((_2762 * _2762) * 3.141590118408203125));
        float _2785 = isnan(1.0) ? _2158 : (isnan(_2158) ? 1.0 : min(_2158, 1.0));
        _2705 = (((_2771 * cbLight._m0[_2720].x) * _2784) * _2785) + _2599;
        _2707 = (((_2771 * cbLight._m0[_2720].y) * _2784) * _2785) + _2601;
        _2709 = (((_2771 * cbLight._m0[_2720].z) * _2784) * _2785) + _2603;
    }
    float _2851;
    float _2853;
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    if (_2140.y == 0u)
    {
        uvec4 _2806 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2807 = _2806.x;
        uint _2818 = uint((float(_2806.y) * floor(float(uint(cbSceneParam._m0[85u].y * _785) / _2807))) + floor(float(uint(cbSceneParam._m0[85u].x * _784) / _2807)));
        float _2828 = (log2(_1918 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2829 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        uint _2832 = uint(isnan(14.0) ? _2829 : (isnan(_2829) ? 14.0 : min(_2829, 14.0)));
        uvec4 _2837 = texelFetch(g_lightClusterGridBuffer, int(((_2832 << 2u) + (_2818 << 6u)) >> 2u));
        uint _2838 = _2837.x;
        uint _2839 = _2806.z;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        if (((((1u << ((_2839 >> 4u) & 15u)) + 4294967295u) & _2838) == 0u) || ((_2839 & 240u) == 0u))
        {
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
        }
        else
        {
            float _2919;
            float _2921;
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _3063 = 0.0;
            float _3064 = 0.0;
            float _3065 = 0.0;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            uint _3069 = 0u;
            uint _3078;
            bool _3079;
            for (;;)
            {
                _3078 = texelFetch(g_lightClassification, int((((_2832 << 5u) + (_2818 << 9u)) + (_3069 << 2u)) >> 2u)).x;
                _3079 = _3078 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3079)
                {
                    frontier_phi_66_pred = _3068;
                    frontier_phi_66_pred_1 = _3067;
                    frontier_phi_66_pred_2 = _3066;
                    frontier_phi_66_pred_3 = _3065;
                    frontier_phi_66_pred_4 = _3064;
                    frontier_phi_66_pred_5 = _3063;
                }
                else
                {
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    uint _3193;
                    _3187 = _3063;
                    _3188 = _3064;
                    _3189 = _3065;
                    _3190 = _3066;
                    _3191 = _3067;
                    _3192 = _3068;
                    _3193 = _3078;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    for (;;)
                    {
                        uint _3197 = uint(findLSB(_3193)) + (_3069 << 5u);
                        uint _3194 = (_3193 + 4294967295u) & _3193;
                        uint _3199 = _3197 * 48u;
                        vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3199)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 3u)).x));
                        uint _3219 = (_3197 * 48u) + 4u;
                        vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 3u)).x));
                        uint _3238 = (_3197 * 48u) + 8u;
                        vec3 _3249 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x));
                        float _3253 = _3213.x - _1916;
                        float _3254 = _3213.y - _1917;
                        float _3255 = _3213.z - _1918;
                        float _3256 = dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255));
                        float _3259 = inversesqrt(_3256);
                        float _3260 = _3259 * _3253;
                        float _3261 = _3259 * _3254;
                        float _3262 = _3259 * _3255;
                        float _3263 = dot(vec3(_803, _806, _809), vec3(_3260, _3261, _3262));
                        float _3268 = 1.0 - (_3256 * _3213.w);
                        float _4652 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3269 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3270 = sqrt(_3256) * _3232.w;
                        float _3273 = 1.39999997615814208984375 / (_3270 + 1.39999997615814208984375);
                        float _3274 = _3273 * _3273;
                        float _3277 = ((1.0 - _3274) * _3263) + _3274;
                        float _3280 = _3270 * _3270;
                        float _3284 = ((isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0))) * _3269) / ((_3280 * 0.699999988079071044921875) + 1.0);
                        float _3288 = (-0.0) - _1916;
                        float _3289 = (-0.0) - _1917;
                        float _3290 = (-0.0) - _1918;
                        float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                        float _3295 = _3294 * _3288;
                        float _3296 = _3294 * _3289;
                        float _3297 = _3294 * _3290;
                        float _3304 = exp2(log2(1.0 / ((_3280 * 3.5) + 5.0)) * 0.25);
                        float _3305 = 1.0 - _863;
                        float _3312 = sqrt(1.0 - ((1.0 - (_3305 * _3305)) * (1.0 - (_3304 * _3304))));
                        float _3313 = _3312 * _3312;
                        float _3314 = _3313 * _3313;
                        float _3315 = _3295 + _3260;
                        float _3316 = _3296 + _3261;
                        float _3317 = _3297 + _3262;
                        float _3321 = inversesqrt(dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317)));
                        float _3325 = dot(vec3(_803, _806, _809), vec3(_3295, _3296, _3297));
                        float _4668 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3328 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3329 = dot(vec3(_803, _806, _809), vec3(_3321 * _3315, _3321 * _3316, _3321 * _3317));
                        float _4679 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3332 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                        float _3336 = ((_3332 * _3332) * (_3314 + (-1.0))) + 1.0;
                        float _3337 = _3273 * _3313;
                        float _3338 = _3337 * _3337;
                        float _3341 = ((1.0 - _3338) * _3263) + _3338;
                        float _4690 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3342 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                        float _3343 = 1.0 - _3313;
                        float _3353 = (0.5 / (((_3342 * ((_3328 * _3343) + _3313)) + 9.9999999392252902907785028219223e-09) + (((_3342 * _3343) + _3313) * _3328))) * _3342;
                        float _4701 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3364 = (((_3314 * 3.1415927410125732421875) * (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) / ((_3336 * _3336) * ((_3280 * 2.1991131305694580078125) + 3.141590118408203125))) * _3269;
                        _3122 = (_3284 * _3232.x) + _3190;
                        _3123 = (_3284 * _3232.y) + _3191;
                        _3124 = (_3284 * _3232.z) + _3192;
                        _3119 = (_3364 * _3249.x) + _3187;
                        _3120 = (_3364 * _3249.y) + _3188;
                        _3121 = (_3364 * _3249.z) + _3189;
                        if (_3194 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3187 = _3119;
                            _3188 = _3120;
                            _3189 = _3121;
                            _3190 = _3122;
                            _3191 = _3123;
                            _3192 = _3124;
                            _3193 = _3194;
                        }
                    }
                    frontier_phi_66_pred = _3124;
                    frontier_phi_66_pred_1 = _3123;
                    frontier_phi_66_pred_2 = _3122;
                    frontier_phi_66_pred_3 = _3121;
                    frontier_phi_66_pred_4 = _3120;
                    frontier_phi_66_pred_5 = _3119;
                }
                _2929 = frontier_phi_66_pred;
                _2927 = frontier_phi_66_pred_1;
                _2925 = frontier_phi_66_pred_2;
                _2923 = frontier_phi_66_pred_3;
                _2921 = frontier_phi_66_pred_4;
                _2919 = frontier_phi_66_pred_5;
                uint _3070 = _3069 + 1u;
                if (_3070 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3063 = _2919;
                    _3064 = _2921;
                    _3065 = _2923;
                    _3066 = _2925;
                    _3067 = _2927;
                    _3068 = _2929;
                    _3069 = _3070;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
        }
        uvec4 _2932 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2933 = _2932.z;
        uint _2935 = (_2933 >> 8u) & 15u;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        if (((4294967295u << _2935) & _2838) == 0u)
        {
            _3031 = _2918;
            _3033 = _2920;
            _3035 = _2922;
            _3037 = _2924;
            _3039 = _2926;
            _3041 = _2928;
        }
        else
        {
            float _3056 = inversesqrt(dot(vec3(_1916, _1917, _1918), vec3(_1916, _1917, _1918)));
            float _3057 = _3056 * _1916;
            float _3058 = _3056 * _1917;
            float _3059 = _3056 * _1918;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2935 < ((_2933 >> 12u) & 15u))
            {
                float _3032;
                float _3034;
                float _3036;
                float _3038;
                float _3040;
                float _3042;
                float _3170 = _2918;
                float _3171 = _2920;
                float _3172 = _2922;
                float _3173 = _2924;
                float _3174 = _2926;
                float _3175 = _2928;
                uint _3176 = _2935;
                uint _3185;
                bool _3186;
                for (;;)
                {
                    _3185 = texelFetch(g_lightClassification, int((((_2832 << 5u) + (_2818 << 9u)) + (_3176 << 2u)) >> 2u)).x;
                    _3186 = _3185 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3186)
                    {
                        frontier_phi_72_pred = _3175;
                        frontier_phi_72_pred_1 = _3174;
                        frontier_phi_72_pred_2 = _3173;
                        frontier_phi_72_pred_3 = _3172;
                        frontier_phi_72_pred_4 = _3171;
                        frontier_phi_72_pred_5 = _3170;
                    }
                    else
                    {
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3382 = _3170;
                        float _3383 = _3171;
                        float _3384 = _3172;
                        float _3385 = _3173;
                        float _3386 = _3174;
                        float _3387 = _3175;
                        uint _3388 = _3185;
                        uint _3389;
                        vec4 _3414;
                        float _3415;
                        vec4 _3430;
                        vec3 _3442;
                        vec4 _3457;
                        vec4 _3473;
                        float _3519;
                        bool _3520;
                        for (;;)
                        {
                            uint _3399 = ((_3176 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3388));
                            _3389 = (_3388 + 4294967295u) & _3388;
                            uint _3401 = _3399 * 40u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            _3415 = _3414.w;
                            uint _3417 = (_3399 * 40u) + 4u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3432 = (_3399 * 40u) + 8u;
                            _3442 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x));
                            uint _3444 = (_3399 * 40u) + 16u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3460 = (_3399 * 40u) + 20u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3399 * 40u) + 24u;
                            vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3494 = (_3399 * 40u) + 28u;
                            vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            _3519 = fma(_1918, _3507.z, fma(_1917, _3507.y, _3507.x * _1916)) + _3507.w;
                            _3520 = !((fma(_1918, _3488.z, fma(_1917, _3488.y, _3488.x * _1916)) + _3488.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3520)
                            {
                                float _3547 = _3414.x - _1916;
                                float _3548 = _3414.y - _1917;
                                float _3549 = _3414.z - _1918;
                                float _3550 = dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549));
                                float _3553 = inversesqrt(_3550);
                                float _3554 = _3553 * _3547;
                                float _3555 = _3553 * _3548;
                                float _3556 = _3553 * _3549;
                                float _3560 = 1.0 - (_3550 / (_3415 * _3415));
                                float _4712 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3565 = sqrt(_3550) * _3430.w;
                                float _3567 = 1.39999997615814208984375 / (_3565 + 1.39999997615814208984375);
                                float _3568 = _3567 * _3567;
                                float _3571 = ((1.0 - _3568) * dot(vec3(_3554, _3555, _3556), vec3(_803, _806, _809))) + _3568;
                                float _3574 = _3565 * _3565;
                                float _3578 = (fma(_1918, _3457.z, fma(_1917, _3457.y, _3457.x * _1916)) + _3457.w) / _3519;
                                float _3579 = (fma(_1918, _3473.z, fma(_1917, _3473.y, _3473.x * _1916)) + _3473.w) / _3519;
                                float _3583 = 1.0 - dot(vec2(_3578, _3579), vec2(_3578, _3579));
                                float _4728 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3585 = _3584 * (((isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0))) * _3561) / ((_3574 * 0.699999988079071044921875) + 1.0));
                                float _3597 = exp2(log2(1.0 / ((_3574 * 3.5) + 5.0)) * 0.25);
                                float _3598 = 1.0 - _863;
                                float _3605 = sqrt(1.0 - ((1.0 - (_3598 * _3598)) * (1.0 - (_3597 * _3597))));
                                float _3606 = _3605 * _3605;
                                float _3607 = _3606 * _3606;
                                float _3608 = _3554 - _3057;
                                float _3609 = _3555 - _3058;
                                float _3610 = _3556 - _3059;
                                float _3614 = inversesqrt(dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610)));
                                float _3618 = dot(vec3(_803, _806, _809), vec3((-0.0) - _3057, (-0.0) - _3058, (-0.0) - _3059));
                                float _4739 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3621 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3622 = dot(vec3(_803, _806, _809), vec3(_3614 * _3608, _3614 * _3609, _3614 * _3610));
                                float _4750 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3625 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3629 = ((_3625 * _3625) * (_3607 + (-1.0))) + 1.0;
                                float _3630 = _3567 * _3606;
                                float _3631 = _3630 * _3630;
                                float _3637 = ((1.0 - _3631) * dot(vec3(_803, _806, _809), vec3(_3554, _3555, _3556))) + _3631;
                                float _4761 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                                float _3639 = 1.0 - _3606;
                                float _3649 = (0.5 / (((_3638 * ((_3621 * _3639) + _3606)) + 9.9999999392252902907785028219223e-09) + (((_3638 * _3639) + _3606) * _3621))) * _3638;
                                float _4772 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3659 = (_3584 * _3561) * (((_3607 * 3.1415927410125732421875) * (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0)))) / ((_3629 * _3629) * ((_3574 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3585 * _3430.y;
                                frontier_phi_78_pred_1 = _3585 * _3430.x;
                                frontier_phi_78_pred_2 = _3659 * _3442.z;
                                frontier_phi_78_pred_3 = _3659 * _3442.y;
                                frontier_phi_78_pred_4 = _3659 * _3442.x;
                                frontier_phi_78_pred_5 = _3585 * _3430.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3667 = frontier_phi_78_pred;
                            _3666 = frontier_phi_78_pred_1;
                            _3665 = frontier_phi_78_pred_2;
                            _3664 = frontier_phi_78_pred_3;
                            _3663 = frontier_phi_78_pred_4;
                            _3668 = frontier_phi_78_pred_5;
                            _3372 = _3666 + _3385;
                            _3373 = _3667 + _3386;
                            _3374 = _3668 + _3387;
                            _3369 = _3663 + _3382;
                            _3370 = _3664 + _3383;
                            _3371 = _3665 + _3384;
                            if (_3389 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3389;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3374;
                        frontier_phi_72_pred_1 = _3373;
                        frontier_phi_72_pred_2 = _3372;
                        frontier_phi_72_pred_3 = _3371;
                        frontier_phi_72_pred_4 = _3370;
                        frontier_phi_72_pred_5 = _3369;
                    }
                    _3042 = frontier_phi_72_pred;
                    _3040 = frontier_phi_72_pred_1;
                    _3038 = frontier_phi_72_pred_2;
                    _3036 = frontier_phi_72_pred_3;
                    _3034 = frontier_phi_72_pred_4;
                    _3032 = frontier_phi_72_pred_5;
                    uint _3177 = _3176 + 1u;
                    if (_3177 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3170 = _3032;
                        _3171 = _3034;
                        _3172 = _3036;
                        _3173 = _3038;
                        _3174 = _3040;
                        _3175 = _3042;
                        _3176 = _3177;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3042;
                frontier_phi_60_61_ladder_1 = _3040;
                frontier_phi_60_61_ladder_2 = _3036;
                frontier_phi_60_61_ladder_3 = _3034;
                frontier_phi_60_61_ladder_4 = _3032;
                frontier_phi_60_61_ladder_5 = _3038;
            }
            else
            {
                frontier_phi_60_61_ladder = _2928;
                frontier_phi_60_61_ladder_1 = _2926;
                frontier_phi_60_61_ladder_2 = _2922;
                frontier_phi_60_61_ladder_3 = _2920;
                frontier_phi_60_61_ladder_4 = _2918;
                frontier_phi_60_61_ladder_5 = _2924;
            }
            _3031 = frontier_phi_60_61_ladder_4;
            _3033 = frontier_phi_60_61_ladder_3;
            _3035 = frontier_phi_60_61_ladder_2;
            _3037 = frontier_phi_60_61_ladder_5;
            _3039 = frontier_phi_60_61_ladder_1;
            _3041 = frontier_phi_60_61_ladder;
        }
        float _3046 = isnan(1.0) ? _847 : (isnan(_847) ? 1.0 : min(_847, 1.0));
        _2851 = (_3046 * _3037) + _2382;
        _2853 = (_3046 * _3039) + _2384;
        _2855 = (_3046 * _3041) + _2386;
        _2857 = ((_3031 * 0.039999999105930328369140625) * _3046) + _2705;
        _2859 = ((_3033 * 0.039999999105930328369140625) * _3046) + _2707;
        _2861 = ((_3035 * 0.039999999105930328369140625) * _3046) + _2709;
    }
    else
    {
        _2851 = _2382;
        _2853 = _2384;
        _2855 = _2386;
        _2857 = _2705;
        _2859 = _2707;
        _2861 = _2709;
    }
    float _4788 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4799 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4810 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    uint _2881 = _249 + 6u;
    float _2889 = _784 / cbSceneParam._m0[86u].x;
    float _2890 = _785 / cbSceneParam._m0[86u].y;
    vec4 _2904 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2889, _2890, (log2((isnan(cbSceneParam._m0[77u].w) ? _718 : (isnan(_718) ? cbSceneParam._m0[77u].w : min(_718, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2906 = _2904.x;
    float _2907 = _2904.y;
    float _2908 = _2904.z;
    float _2909 = _2904.w;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    if (_718 > cbSceneParam._m0[78u].w)
    {
        float _2943 = isnan(_718) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _718 : min(cbSceneParam._m0[80u].w, _718));
        float _2944 = _2943 / _718;
        float _2955 = _2944 * _769;
        float _2956 = _770 * _2944;
        float _2957 = (-0.0) - _2956;
        float _2959 = _2944 * _771;
        float _2961 = (cbSceneParam._m0[77u].w * _2957) / _2943;
        float _2962 = _2961 + cbSceneParam._m0[79u].w;
        float _2963 = cbSceneParam._m0[79u].w - _2956;
        float _2969 = sqrt(((_2955 * _2955) + (_2956 * _2956)) + (_2959 * _2959));
        float _2972 = (1.0 - (cbSceneParam._m0[77u].w / _2943)) * _2969;
        float _2977 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2979 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3132;
        if (abs((_2957 - _2961) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3132 = ((((_2962 > 0.0) ? exp2(_2977 * _2962) : (2.0 - exp2(_2979 * _2962))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2972;
        }
        else
        {
            float _3092 = 1.0 / cbSceneParam._m0[80u].x;
            float _3093 = isnan(_2963) ? _2962 : (isnan(_2962) ? _2963 : max(_2962, _2963));
            float _3094 = isnan(_2963) ? _2962 : (isnan(_2962) ? _2963 : min(_2962, _2963));
            float _3103 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : min(_3093, 0.0));
            float _3104 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : min(_3094, 0.0));
            _3132 = ((abs(_2969 / _2957) * cbSceneParam._m0[80u].y) * ((((_3103 - _3104) * 2.0) - ((exp2(_2977 * (isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0)))) - exp2(_2977 * (isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0))))) * _3092)) - ((exp2(_2979 * _3103) - exp2(_2979 * _3104)) * _3092))) + (_2972 * cbSceneParam._m0[80u].z);
        }
        vec4 _3134 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2889, _2890, 1.0), 0.0);
        float _3143 = exp2((_3132 * (-1.44269502162933349609375)) * (1.0 - _3134.w));
        float _3144 = log2(_3143);
        float _3160 = log2(_2909);
        _2981 = (exp2(_3160 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3144 * cbSceneParam._m0[78u].x)) * _3134.x) / cbSceneParam._m0[78u].x)) + _2906;
        _2983 = (exp2(_3160 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3144 * cbSceneParam._m0[78u].y)) * _3134.y) / cbSceneParam._m0[78u].y)) + _2907;
        _2985 = (exp2(_3160 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3144 * cbSceneParam._m0[78u].z)) * _3134.z) / cbSceneParam._m0[78u].z)) + _2908;
        _2987 = _3143 * _2909;
    }
    else
    {
        _2981 = _2906;
        _2983 = _2907;
        _2985 = _2908;
        _2987 = _2909;
    }
    float _2999 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3000 = _2999 == 3.0;
    float _3001 = log2(_2987);
    float _3008 = exp2(_3001 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2851 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _847))) + ((_2857 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1652)) * cbPerFrame._m0[3u].x));
    float _3009 = exp2(_3001 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2853 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _847))) + ((_2859 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1652)) * cbPerFrame._m0[3u].x));
    float _3010 = exp2(_3001 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (_2855 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _847))) + ((_2861 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1652)) * cbPerFrame._m0[3u].x));
    float _3019 = (_2999 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3019 * (_3000 ? _3008 : (_3008 + (cbSceneParam._m0[72u].w * _2981)));
    SV_Target.y = _3019 * (_3000 ? _3009 : (_3009 + (cbSceneParam._m0[72u].w * _2983)));
    SV_Target.z = _3019 * (_3000 ? _3010 : (_3010 + (cbSceneParam._m0[72u].w * _2985)));
    SV_Target.w = cbInstanceData._m0[_2881].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2881].w;
}


