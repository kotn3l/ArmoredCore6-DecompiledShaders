#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1269;
float _3912;
float _3913;
float _3914;
float _3915;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _370 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _370) * cbMtdParam._m0[24u].x) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3924 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _395 = (_388 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _396 = (_388 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _397 = (_388 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _410 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _272) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _273) + cbTextureTilingScale._m0[20u].w));
    vec4 _435 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _452 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _456 = _452.z;
    float _465 = ((_435.z - _456) * _388) + _456;
    float _468 = ((((_435.x - _454) * _388) + _454) * 2.0) + (-1.0);
    float _469 = ((((_435.y - _455) * _388) + _455) * 2.0) + (-1.0);
    float _470 = dot(vec2(_468, _469), vec2(_468, _469));
    float _3935 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _475 = sqrt(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _509 = (_468 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_410.x * 2.0) + (-1.0)))) + (((_497.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _510 = (_469 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_410.y * 2.0) + (-1.0)))) + (((_497.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _522 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _524 = _522.x;
    float _525 = 1.0 - _524;
    float _553 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_524 - _525) * cbMtdParam._m0[24u].w) + _525) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3946 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _562 = ((((cbMtdParam._m0[10u].x - _395) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _554) + _395;
    float _563 = ((((cbMtdParam._m0[10u].y - _396) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _554) + _396;
    float _564 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _397)) * _554) + _397;
    float _569 = (((_410.z - _465) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _465;
    float _573 = ((_497.z - _569) * cbMtdParam._m0[19u].w) + _569;
    float _577 = ((cbMtdParam._m0[23u].y - _573) * _554) + _573;
    vec4 _596 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _598 = _596.x;
    float _599 = _596.y;
    float _605 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_241, _242, _243, 0.0));
    vec4 _620 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _272) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _273) + cbTextureTilingScale._m0[18u].w));
    float _622 = _620.x;
    float _627 = fract(_620.w + cbPerFrame._m0[22u].x);
    float _629 = (1.0 - _627) * _622;
    float _634 = ((_627 + (-1.0)) + _622) * 9.0;
    float _636 = ((_622 + (-1.0)) + _627) * 9.0;
    float _637 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _638 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _652 = (_629 * ((_620.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _637 : (isnan(_637) ? 3.0 : min(_637, 3.0))) * 3.1415927410125732421875);
    float _654 = (_629 * ((_620.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _638 : (isnan(_638) ? 3.0 : min(_638, 3.0))) * 3.1415927410125732421875);
    float _658 = inversesqrt(dot(vec3(_652, _654, 1.0), vec3(_652, _654, 1.0)));
    float _674 = (((((0.5 - _598) + ((_652 * 0.5) * _658)) * _605) + _598) * 2.0) + (-1.0);
    float _675 = (((((0.5 - _599) + ((_658 * 0.5) * _654)) * _605) + _599) * 2.0) + (-1.0);
    float _676 = dot(vec2(_674, _675), vec2(_674, _675));
    float _3977 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _692 = ((((cbMtdParam._m0[22u].z * _509) - _509) + _674) * _554) + _509;
    float _693 = ((((cbMtdParam._m0[22u].z * _510) - _510) + _675) * _554) + _510;
    float _694 = (_554 * (sqrt(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) - _475)) + _475;
    float _696 = cbMtdParam._m0[22u].x + _497.w;
    float _699 = fma(_694, _241, fma(_693, _247 * TANGENT.x, (_233 * _225) * _692));
    float _702 = fma(_694, _242, fma(_693, _247 * TANGENT.y, (_233 * _226) * _692));
    float _705 = fma(_694, _243, fma(_693, _247 * TANGENT.z, (_233 * _227) * _692));
    float _709 = inversesqrt(dot(vec3(_699, _702, _705), vec3(_699, _702, _705)));
    float _710 = _709 * _699;
    float _711 = _709 * _702;
    float _712 = _709 * _705;
    float _3988 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _713 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _4010 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4021 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _4032 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _731 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _782 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _772);
    float _783 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _772);
    float _784 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _772);
    float _788 = inversesqrt(dot(vec3(_782, _783, _784), vec3(_782, _783, _784)));
    float _789 = _782 * _788;
    float _790 = _783 * _788;
    float _791 = _784 * _788;
    vec4 _796 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _798 = _796.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _951 = sqrt(((_782 * _782) + (_783 * _783)) + (_784 * _784));
        float _957 = (cbMatDynParam._m0[5u].x * _951) + cbMatDynParam._m0[5u].y;
        float _4043 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _962 = (cbMatDynParam._m0[5u].z * _951) + cbMatDynParam._m0[5u].w;
        float _4054 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) - _958)) + _958) < ((_798 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _809 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _810 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _828 = fma(_712, cbSceneParam._m0[5u].z, fma(_711, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _710));
    float _831 = fma(_712, cbSceneParam._m0[6u].z, fma(_711, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _710));
    float _834 = fma(_712, cbSceneParam._m0[7u].z, fma(_711, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _710));
    uint _847 = _253 + 9u;
    uint _848 = _847 + uint(cbMatDynParam._m0[0u].w);
    float _854 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * cbInstanceData._m0[_848].x;
    float _855 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * cbInstanceData._m0[_848].y;
    float _856 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * cbInstanceData._m0[_848].z;
    float _4065 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    vec4 _868 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _809, cbSceneParam._m0[86u].y * _810));
    float _872 = ((isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * TEXCOORD_5.w) * _868.x;
    float _873 = dot(vec3(_710, _711, _712), vec3(_789, _790, _791));
    float _876 = _873 * 2.0;
    float _880 = (_876 * _710) - _789;
    float _881 = (_876 * _711) - _790;
    float _882 = (_876 * _712) - _791;
    float _886 = abs(dot(vec3(_789, _790, _791), vec3(_710, _711, _712)));
    float _4098 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _888 = sqrt(_713);
    float _900 = exp2((_888 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_888 * 3.0));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1268;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _994 = fma(_940, cbModelParam._m0[26u].z, fma(_936, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932));
        float _998 = fma(_940, cbModelParam._m0[27u].z, fma(_936, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932));
        float _1002 = fma(_940, cbModelParam._m0[28u].z, fma(_936, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932));
        float _1026 = _932 + _710;
        float _1027 = _936 + _711;
        float _1028 = _940 + _712;
        float _1038 = fma(_1028, cbModelParam._m0[26u].z, fma(_1027, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1026)) - _994;
        float _1039 = fma(_1028, cbModelParam._m0[27u].z, fma(_1027, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1026)) - _998;
        float _1040 = fma(_1028, cbModelParam._m0[28u].z, fma(_1027, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1026)) - _1002;
        float _1044 = inversesqrt(dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040)));
        float _1057 = ((_1044 * _1038) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_994 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1044 * _1039) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_998 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1044 * _1040) / cbModelParam._m0[34u].z) + ((((((_1002 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1057, _1058, _1059), 0.0);
        float _1096 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1062.x + (-0.5));
        float _1098 = _1096 * (_1062.y + (-0.5));
        float _1099 = _1096 * (_1062.z + (-0.5));
        float _1106 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1069.x + (-0.5));
        float _1108 = _1106 * (_1069.y + (-0.5));
        float _1109 = _1106 * (_1069.z + (-0.5));
        float _1116 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1076.x + (-0.5));
        float _1118 = _1116 * (_1076.y + (-0.5));
        float _1119 = _1116 * (_1076.z + (-0.5));
        float _1126 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1083.x + (-0.5));
        float _1128 = _1126 * (_1083.y + (-0.5));
        float _1129 = _1126 * (_1083.z + (-0.5));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = _1097 * 0.5;
        float _1134 = _1107 * 0.5;
        float _1135 = _1117 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1150 = (dot(vec3(_710, _711, _712), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1160 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _4146 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1162 + 1.0))) + _1167) * _1130;
        float _1177 = _1098 * 0.5;
        float _1178 = _1108 * 0.5;
        float _1179 = _1118 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_710, _711, _712), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _4179 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1204 + 1.0))) + _1209) * _1131;
        float _1219 = _1099 * 0.5;
        float _1220 = _1109 * 0.5;
        float _1221 = _1119 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_710, _711, _712), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _4212 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1246 + 1.0))) + _1251) * _1132;
        _1268 = _1099;
        _1270 = _1098;
        _1271 = _1097;
        _1272 = _1109;
        _1273 = _1108;
        _1274 = _1107;
        _1275 = _1119;
        _1276 = _1118;
        _1277 = _1117;
        _1278 = _1132;
        _1279 = _1131;
        _1280 = _1130;
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1282 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
    }
    else
    {
        _1268 = _1269;
        _1270 = _1269;
        _1271 = _1269;
        _1272 = _1269;
        _1273 = _1269;
        _1274 = _1269;
        _1275 = _1269;
        _1276 = _1269;
        _1277 = _1269;
        _1278 = _1269;
        _1279 = _1269;
        _1280 = _1269;
        _1281 = 0.0;
        _1282 = 0.0;
        _1283 = 0.0;
    }
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1311 = fma(_940, cbModelParam._m0[30u].z, fma(_936, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _932));
        float _1315 = fma(_940, cbModelParam._m0[31u].z, fma(_936, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _932));
        float _1319 = fma(_940, cbModelParam._m0[32u].z, fma(_936, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _932));
        float _1342 = _932 + _710;
        float _1343 = _936 + _711;
        float _1344 = _940 + _712;
        float _1354 = fma(_1344, cbModelParam._m0[30u].z, fma(_1343, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1342)) - _1311;
        float _1355 = fma(_1344, cbModelParam._m0[31u].z, fma(_1343, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1342)) - _1315;
        float _1356 = fma(_1344, cbModelParam._m0[32u].z, fma(_1343, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1342)) - _1319;
        float _1360 = inversesqrt(dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356)));
        float _1373 = ((_1360 * _1354) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1311 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1360 * _1355) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1315 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1360 * _1356) / cbModelParam._m0[35u].z) + ((((((_1319 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        float _1410 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1377.x + (-0.5));
        float _1412 = _1410 * (_1377.y + (-0.5));
        float _1413 = _1410 * (_1377.z + (-0.5));
        float _1420 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1384.x + (-0.5));
        float _1422 = _1420 * (_1384.y + (-0.5));
        float _1423 = _1420 * (_1384.z + (-0.5));
        float _1430 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1391.x + (-0.5));
        float _1432 = _1430 * (_1391.y + (-0.5));
        float _1433 = _1430 * (_1391.z + (-0.5));
        float _1440 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1398.x + (-0.5));
        float _1442 = _1440 * (_1398.y + (-0.5));
        float _1443 = _1440 * (_1398.z + (-0.5));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = _1411 * 0.5;
        float _1448 = _1421 * 0.5;
        float _1449 = _1431 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_710, _711, _712), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4275 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1474 + 1.0))) + _1479) * _1444;
        float _1489 = _1412 * 0.5;
        float _1490 = _1422 * 0.5;
        float _1491 = _1432 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_710, _711, _712), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _4308 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1516 + 1.0))) + _1521) * _1445;
        float _1531 = _1413 * 0.5;
        float _1532 = _1423 * 0.5;
        float _1533 = _1433 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_710, _711, _712), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4341 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1558 + 1.0))) + _1563) * _1446;
        _1580 = _1413;
        _1581 = _1412;
        _1582 = _1411;
        _1583 = _1423;
        _1584 = _1422;
        _1585 = _1421;
        _1586 = _1433;
        _1587 = _1432;
        _1588 = _1431;
        _1589 = _1446;
        _1590 = _1445;
        _1591 = _1444;
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
    }
    else
    {
        _1580 = _1269;
        _1581 = _1269;
        _1582 = _1269;
        _1583 = _1269;
        _1584 = _1269;
        _1585 = _1269;
        _1586 = _1269;
        _1587 = _1269;
        _1588 = _1269;
        _1589 = _1269;
        _1590 = _1269;
        _1591 = _1269;
        _1592 = 0.0;
        _1593 = 0.0;
        _1594 = 0.0;
    }
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1281)) + _1281;
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1282)) + _1282;
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1283)) + _1283;
    float _1627 = fma(_1606, cbSceneParam._m0[89u].z, fma(_1605, cbSceneParam._m0[89u].y, _1604 * cbSceneParam._m0[89u].x));
    float _1630 = fma(_1606, cbSceneParam._m0[90u].z, fma(_1605, cbSceneParam._m0[90u].y, _1604 * cbSceneParam._m0[90u].x));
    float _1633 = fma(_1606, cbSceneParam._m0[91u].z, fma(_1605, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1604));
    float _1648 = _880 * 0.5;
    float _1649 = _881 * 0.5;
    float _1650 = _882 * 0.5;
    float _1651 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1654 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1657 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1691;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1664 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1268, _1272, _1275, _1278));
        float _1668 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1270, _1273, _1276, _1279));
        float _1672 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1271, _1274, _1277, _1280));
        float _1679 = dot(vec4(cbModelParam._m0[39u]), vec4(_1648, _1649, _1650, 1.0));
        _1691 = dot(vec3(isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1691 = 1.0;
    }
    float _1702;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1693 = dot(vec4(cbModelParam._m0[40u]), vec4(_1648, _1649, _1650, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1693) ? 0.0 : (isnan(0.0) ? _1693 : max(0.0, _1693))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1706 = (_1702 * cbModelParam._m0[1u].x) + (_1691 * (1.0 - cbModelParam._m0[1u].x));
    float _1716 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _713);
    float _1717 = isnan(_1716) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1716 : min(cbModelParam._m0[25u].z, _1716));
    float _1799;
    float _1801;
    float _1803;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1766 = fma(_940, cbModelParam._m0[13u].z, fma(_936, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _932)) + cbModelParam._m0[13u].w;
        float _1770 = fma(_940, cbModelParam._m0[14u].z, fma(_936, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _932)) + cbModelParam._m0[14u].w;
        float _1774 = fma(_940, cbModelParam._m0[15u].z, fma(_936, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _932)) + cbModelParam._m0[15u].w;
        float _1777 = fma(_882, cbModelParam._m0[13u].z, fma(_881, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _880));
        float _1780 = fma(_882, cbModelParam._m0[14u].z, fma(_881, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _880));
        float _1783 = fma(_882, cbModelParam._m0[15u].z, fma(_881, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _880));
        float _1811;
        if (_1777 > 0.0)
        {
            _1811 = abs((1.0 - _1766) / _1777);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1766 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1811 = frontier_phi_17_15_ladder;
        }
        float _1981;
        if (_1780 > 0.0)
        {
            _1981 = abs((1.0 - _1770) / _1780);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1770 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1981 = frontier_phi_26_22_ladder;
        }
        float _2276;
        if (_1783 > 0.0)
        {
            _2276 = abs((1.0 - _1774) / _1783);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1774 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2276 = frontier_phi_38_33_ladder;
        }
        float _2278 = isnan(_1981) ? _1811 : (isnan(_1811) ? _1981 : min(_1811, _1981));
        float _2279 = isnan(_2276) ? _2278 : (isnan(_2278) ? _2276 : min(_2278, _2276));
        float _2283 = (_2279 * _1777) + _1766;
        float _2284 = (_2279 * _1780) + _1770;
        float _2285 = (_2279 * _1783) + _1774;
        float _2286 = _2279 * 9.9999997473787516355514526367188e-05;
        float _2288 = (-1.0) - _2286;
        float _2290 = _2286 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2285 > _2290) || ((_2285 < _2288) || ((_2284 > _2290) || ((_2284 < _2288) || ((_2283 < _2288) || (_2283 > _2290))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2430 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2285, cbModelParam._m0[9u].z, fma(_2284, cbModelParam._m0[9u].y, _2283 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2285, cbModelParam._m0[10u].z, fma(_2284, cbModelParam._m0[10u].y, _2283 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2285, cbModelParam._m0[11u].z, fma(_2284, cbModelParam._m0[11u].y, _2283 * cbModelParam._m0[11u].x))), _1717);
            frontier_phi_16_38_ladder = _2430.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2430.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2430.x * cbModelParam._m0[1u].y;
        }
        _1799 = frontier_phi_16_38_ladder_2;
        _1801 = frontier_phi_16_38_ladder_1;
        _1803 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1787 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_880, _881, _882), _1717);
        _1799 = _1787.x * cbModelParam._m0[1u].y;
        _1801 = _1787.y * cbModelParam._m0[1u].y;
        _1803 = _1787.z * cbModelParam._m0[1u].y;
    }
    float _1807 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _713);
    float _1808 = isnan(_1807) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1807 : min(cbModelParam._m0[25u].w, _1807));
    float _1898;
    float _1900;
    float _1902;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1862 = fma(_940, cbModelParam._m0[21u].z, fma(_936, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _932)) + cbModelParam._m0[21u].w;
        float _1866 = fma(_940, cbModelParam._m0[22u].z, fma(_936, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _932)) + cbModelParam._m0[22u].w;
        float _1870 = fma(_940, cbModelParam._m0[23u].z, fma(_936, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _932)) + cbModelParam._m0[23u].w;
        float _1873 = fma(_882, cbModelParam._m0[21u].z, fma(_881, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _880));
        float _1876 = fma(_882, cbModelParam._m0[22u].z, fma(_881, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _880));
        float _1879 = fma(_882, cbModelParam._m0[23u].z, fma(_881, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _880));
        float _1986;
        if (_1873 > 0.0)
        {
            _1986 = abs((1.0 - _1862) / _1873);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1862 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1986 = frontier_phi_28_24_ladder;
        }
        float _2303;
        if (_1876 > 0.0)
        {
            _2303 = abs((1.0 - _1866) / _1876);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1866 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2303 = frontier_phi_40_35_ladder;
        }
        float _2630;
        if (_1879 > 0.0)
        {
            _2630 = abs((1.0 - _1870) / _1879);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1870 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2630 = frontier_phi_50_47_ladder;
        }
        float _2632 = isnan(_2303) ? _1986 : (isnan(_1986) ? _2303 : min(_1986, _2303));
        float _2633 = isnan(_2630) ? _2632 : (isnan(_2632) ? _2630 : min(_2632, _2630));
        float _2637 = (_2633 * _1873) + _1862;
        float _2638 = (_2633 * _1876) + _1866;
        float _2639 = (_2633 * _1879) + _1870;
        float _2640 = _2633 * 9.9999997473787516355514526367188e-05;
        float _2641 = (-1.0) - _2640;
        float _2643 = _2640 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2639 > _2643) || ((_2639 < _2641) || ((_2638 > _2643) || ((_2638 < _2641) || ((_2637 < _2641) || (_2637 > _2643))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2757 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2639, cbModelParam._m0[17u].z, fma(_2638, cbModelParam._m0[17u].y, _2637 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2639, cbModelParam._m0[18u].z, fma(_2638, cbModelParam._m0[18u].y, _2637 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2639, cbModelParam._m0[19u].z, fma(_2638, cbModelParam._m0[19u].y, _2637 * cbModelParam._m0[19u].x))), _1808);
            frontier_phi_25_50_ladder = _2757.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2757.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2757.x * cbModelParam._m0[1u].z;
        }
        _1898 = frontier_phi_25_50_ladder_2;
        _1900 = frontier_phi_25_50_ladder_1;
        _1902 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_880, _881, _882), _1808);
        _1898 = _1882.x * cbModelParam._m0[1u].z;
        _1900 = _1882.y * cbModelParam._m0[1u].z;
        _1902 = _1882.z * cbModelParam._m0[1u].z;
    }
    float _1914 = ((((1.0 - _900) * ((_888 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_900 * _888)) * _872;
    float _1915 = _1914 * ((cbModelParam._m0[1u].w * (_1898 - _1799)) + _1799);
    float _1916 = _1914 * ((cbModelParam._m0[1u].w * (_1900 - _1801)) + _1801);
    float _1917 = _1914 * ((cbModelParam._m0[1u].w * (_1902 - _1803)) + _1803);
    float _1920 = fma(_1917, cbSceneParam._m0[89u].z, fma(_1916, cbSceneParam._m0[89u].y, _1915 * cbSceneParam._m0[89u].x));
    float _1923 = fma(_1917, cbSceneParam._m0[90u].z, fma(_1916, cbSceneParam._m0[90u].y, _1915 * cbSceneParam._m0[90u].x));
    float _1926 = fma(_1917, cbSceneParam._m0[91u].z, fma(_1916, cbSceneParam._m0[91u].y, _1915 * cbSceneParam._m0[91u].x));
    float _1960 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1964 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1968 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1972 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1973 = _1960 / _1972;
    float _1974 = _1964 / _1972;
    float _1975 = _1968 / _1972;
    float _2122;
    float _2123;
    float _2124;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2002 = ((uint(_1975 > cbSceneParam._m0[59u].y) + uint(_1975 > cbSceneParam._m0[59u].x)) + uint(_1975 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2003 = _2002 + 43u;
        uint _2011 = _2002 + 44u;
        uint _2019 = _2002 + 45u;
        uint _2027 = _2002 + 46u;
        float _2038 = fma(_1972, cbSceneParam._m0[_2003].w, fma(_1968, cbSceneParam._m0[_2003].z, fma(_1964, cbSceneParam._m0[_2003].y, _1960 * cbSceneParam._m0[_2003].x)));
        float _2042 = fma(_1972, cbSceneParam._m0[_2011].w, fma(_1968, cbSceneParam._m0[_2011].z, fma(_1964, cbSceneParam._m0[_2011].y, _1960 * cbSceneParam._m0[_2011].x)));
        float _2050 = fma(_1972, cbSceneParam._m0[_2027].w, fma(_1968, cbSceneParam._m0[_2027].z, fma(_1964, cbSceneParam._m0[_2027].y, _1960 * cbSceneParam._m0[_2027].x)));
        float _2055 = cbSceneParam._m0[33u].z * _2050;
        float _2057 = cbSceneParam._m0[33u].w * _2050;
        float _2060 = fma(_1972, cbSceneParam._m0[_2019].w, fma(_1968, cbSceneParam._m0[_2019].z, fma(_1964, cbSceneParam._m0[_2019].y, _1960 * cbSceneParam._m0[_2019].x))) / _2050;
        float _2108 = (cbSceneParam._m0[33u].x - sqrt(((_1974 * _1974) + (_1973 * _1973)) + (_1975 * _1975))) * cbSceneParam._m0[33u].y;
        float _4467 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2115 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2055 + _2038) / _2050, (_2057 + _2042) / _2050), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2057 + _2038) / _2050, (_2042 - _2055) / _2050), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2038 - _2055) / _2050, (_2042 - _2057) / _2050), _2060), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2038 - _2057) / _2050, (_2055 + _2042) / _2050), _2060), 0.0)).x), vec4(0.25)));
        _2122 = 1.0 - (_2115 * cbSceneParam._m0[34u].x);
        _2123 = 1.0 - (_2115 * cbSceneParam._m0[34u].y);
        _2124 = 1.0 - (_2115 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2122 = 1.0;
        _2123 = 1.0;
        _2124 = 1.0;
    }
    float _2188;
    float _2190;
    float _2192;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2176 = fma(_1972, cbSceneParam._m0[63u].w, fma(_1968, cbSceneParam._m0[63u].z, fma(_1964, cbSceneParam._m0[63u].y, _1960 * cbSceneParam._m0[63u].x)));
        float _2177 = fma(_1972, cbSceneParam._m0[60u].w, fma(_1968, cbSceneParam._m0[60u].z, fma(_1964, cbSceneParam._m0[60u].y, _1960 * cbSceneParam._m0[60u].x))) / _2176;
        float _2178 = fma(_1972, cbSceneParam._m0[61u].w, fma(_1968, cbSceneParam._m0[61u].z, fma(_1964, cbSceneParam._m0[61u].y, _1960 * cbSceneParam._m0[61u].x))) / _2176;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2177 >= cbSceneParam._m0[64u].x) && (_2178 >= cbSceneParam._m0[64u].y)) && (_2177 <= cbSceneParam._m0[64u].z)) && (_2178 <= cbSceneParam._m0[64u].w))
        {
            float _2316 = fma(_1972, cbSceneParam._m0[62u].w, fma(_1968, cbSceneParam._m0[62u].z, fma(_1964, cbSceneParam._m0[62u].y, _1960 * cbSceneParam._m0[62u].x))) / _2176;
            float _2320 = isnan(cbSceneParam._m0[41u].w) ? _2316 : (isnan(_2316) ? cbSceneParam._m0[41u].w : max(_2316, cbSceneParam._m0[41u].w));
            float _2363 = (cbSceneParam._m0[33u].x - sqrt(((_1974 * _1974) + (_1973 * _1973)) + (_1975 * _1975))) * cbSceneParam._m0[33u].y;
            float _4483 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
            float _2370 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2177, cbSceneParam._m0[33u].w + _2178), _2320), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2177, _2178 - cbSceneParam._m0[33u].z), _2320), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2177 - cbSceneParam._m0[33u].z, _2178 - cbSceneParam._m0[33u].w), _2320), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2177 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2178), _2320), 0.0)).x), vec4(0.25)));
            float _2374 = 1.0 - (_2370 * cbSceneParam._m0[34u].x);
            float _2375 = 1.0 - (_2370 * cbSceneParam._m0[34u].y);
            float _2376 = 1.0 - (_2370 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2376) ? _2124 : (isnan(_2124) ? _2376 : min(_2124, _2376));
            frontier_phi_37_36_ladder_1 = isnan(_2375) ? _2123 : (isnan(_2123) ? _2375 : min(_2123, _2375));
            frontier_phi_37_36_ladder_2 = isnan(_2374) ? _2122 : (isnan(_2122) ? _2374 : min(_2122, _2374));
        }
        else
        {
            frontier_phi_37_36_ladder = _2124;
            frontier_phi_37_36_ladder_1 = _2123;
            frontier_phi_37_36_ladder_2 = _2122;
        }
        _2188 = frontier_phi_37_36_ladder_2;
        _2190 = frontier_phi_37_36_ladder_1;
        _2192 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2188 = _2122;
        _2190 = _2123;
        _2192 = _2124;
    }
    uvec4 _2197 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2199 = _2197.x * 14u;
    uint _2200 = _2199 + 13u;
    float _2207 = _872 + (-1.0);
    float _2212 = (cbLight._m0[_2200].x * _2207) + 1.0;
    float _2213 = (cbLight._m0[_2200].y * _2207) + 1.0;
    float _2214 = (cbLight._m0[_2200].z * _2207) + 1.0;
    float _2215 = (cbLight._m0[_2200].w * _2207) + 1.0;
    uint _2216 = _2199 + 5u;
    float _2222 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
    uint _2226 = _2199 + 4u;
    float _2235 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
    uint _2239 = _2199 | 1u;
    float _2250 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_710, _711, _712));
    float _2253 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_710, _711, _712));
    float _4519 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _4530 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2258 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * 0.3183098733425140380859375;
    float _2260 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * 0.3183098733425140380859375;
    float _2267 = ((cbLight._m0[_2216].x * _2222) * _2260) + (((cbLight._m0[_2226].x * _2188) * _2235) * _2258);
    float _2268 = ((_2222 * cbLight._m0[_2216].y) * _2260) + (((cbLight._m0[_2226].y * _2190) * _2235) * _2258);
    float _2269 = ((_2222 * cbLight._m0[_2216].z) * _2260) + (((cbLight._m0[_2226].z * _2192) * _2235) * _2258);
    uvec4 _2273 = floatBitsToUint(cbLight._m0[_2199 + 12u]);
    bool _2275 = _2273.x == 0u;
    float _2377;
    float _2379;
    float _2381;
    if (_2275)
    {
        _2377 = _2267;
        _2379 = _2268;
        _2381 = _2269;
    }
    else
    {
        uint _2385 = _2199 + 6u;
        float _2401 = (dot(vec3(cbLight._m0[_2199 + 2u].xyz), vec3(_710, _711, _712)) * 0.5) + 0.5;
        float _2402 = _2401 * _2401;
        float _4541 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2403 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2404 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2377 = (((cbLight._m0[_2385].x * 0.3183098733425140380859375) * _2403) * _2404) + _2267;
        _2379 = (((cbLight._m0[_2385].y * 0.3183098733425140380859375) * _2403) * _2404) + _2268;
        _2381 = (((cbLight._m0[_2385].z * 0.3183098733425140380859375) * _2403) * _2404) + _2269;
    }
    bool _2384 = _2273.y == 0u;
    float _2439;
    float _2441;
    float _2443;
    if (_2384)
    {
        _2439 = _2377;
        _2441 = _2379;
        _2443 = _2381;
    }
    else
    {
        uint _2601 = _2199 + 7u;
        float _2617 = (dot(vec3(cbLight._m0[_2199 + 3u].xyz), vec3(_710, _711, _712)) * 0.5) + 0.5;
        float _2618 = _2617 * _2617;
        float _4557 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2619 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2620 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2439 = (((cbLight._m0[_2601].x * 0.3183098733425140380859375) * _2619) * _2620) + _2377;
        _2441 = (((cbLight._m0[_2601].y * 0.3183098733425140380859375) * _2619) * _2620) + _2379;
        _2443 = (((cbLight._m0[_2601].z * 0.3183098733425140380859375) * _2619) * _2620) + _2381;
    }
    uint _2446 = _2199 + 8u;
    float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2199].w)) * _713) * 0.949999988079071044921875);
    float _2460 = _2459 * _2459;
    float _2461 = cbLight._m0[_2199].x + _789;
    float _2462 = cbLight._m0[_2199].y + _790;
    float _2463 = cbLight._m0[_2199].z + _791;
    float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
    float _2468 = _2467 * _2461;
    float _2469 = _2467 * _2462;
    float _2470 = _2467 * _2463;
    float _2471 = dot(vec3(_710, _711, _712), vec3(cbLight._m0[_2199].xyz));
    float _4573 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2474 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _4584 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _2475 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2476 = dot(vec3(_710, _711, _712), vec3(_2468, _2469, _2470));
    float _4595 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2479 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2480 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_2468, _2469, _2470));
    float _4606 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2484 = _2460 * _2460;
    float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
    float _2499 = (exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2500 = 1.0 - _2460;
    float _2511 = (0.5 / (((_2475 * ((_2474 * _2500) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2500) + _2460) * _2474))) * _2474;
    float _4617 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2513 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
    uint _2527 = _2199 + 9u;
    float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2239].w)) * _713) * 0.949999988079071044921875);
    float _2539 = _2538 * _2538;
    float _2540 = cbLight._m0[_2239].x + _789;
    float _2541 = cbLight._m0[_2239].y + _790;
    float _2542 = cbLight._m0[_2239].z + _791;
    float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
    float _2547 = _2546 * _2540;
    float _2548 = _2546 * _2541;
    float _2549 = _2546 * _2542;
    float _2550 = dot(vec3(_710, _711, _712), vec3(cbLight._m0[_2239].xyz));
    float _4628 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2553 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
    float _2554 = dot(vec3(_710, _711, _712), vec3(_2547, _2548, _2549));
    float _4639 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2557 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    float _2558 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_2547, _2548, _2549));
    float _4650 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2562 = _2539 * _2539;
    float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
    float _2575 = (exp2(log2(1.0 - (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2576 = 1.0 - _2539;
    float _2586 = (0.5 / (((_2475 * ((_2553 * _2576) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2576) + _2539) * _2553))) * _2553;
    float _4661 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2588 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
    float _2598 = (((_2575 * cbLight._m0[_2527].x) * _2588) * _2222) + ((((cbLight._m0[_2446].x * _2188) * _2499) * _2513) * _2235);
    float _2599 = (((_2575 * cbLight._m0[_2527].y) * _2588) * _2222) + ((((cbLight._m0[_2446].y * _2190) * _2499) * _2513) * _2235);
    float _2600 = (((_2575 * cbLight._m0[_2527].z) * _2588) * _2222) + ((((cbLight._m0[_2446].z * _2192) * _2499) * _2513) * _2235);
    float _2656;
    float _2658;
    float _2660;
    if (_2275)
    {
        _2656 = _2598;
        _2658 = _2599;
        _2660 = _2600;
    }
    else
    {
        uint _2662 = _2199 + 2u;
        uint _2666 = _2199 + 10u;
        float _2680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2662].w)) * _713) * 0.949999988079071044921875);
        float _2681 = _2680 * _2680;
        float _2682 = cbLight._m0[_2662].x + _789;
        float _2683 = cbLight._m0[_2662].y + _790;
        float _2684 = cbLight._m0[_2662].z + _791;
        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
        float _2689 = _2688 * _2682;
        float _2690 = _2688 * _2683;
        float _2691 = _2688 * _2684;
        float _2692 = dot(vec3(_710, _711, _712), vec3(cbLight._m0[_2662].xyz));
        float _4672 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2695 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2696 = dot(vec3(_710, _711, _712), vec3(_2689, _2690, _2691));
        float _4683 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2700 = dot(vec3(cbLight._m0[_2662].xyz), vec3(_2689, _2690, _2691));
        float _4694 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2704 = _2681 * _2681;
        float _2708 = ((_2699 * _2699) * (_2704 + (-1.0))) + 1.0;
        float _2717 = (exp2(log2(1.0 - (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2718 = 1.0 - _2681;
        float _2728 = (0.5 / (((_2475 * ((_2695 * _2718) + _2681)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2718) + _2681) * _2695))) * _2695;
        float _4705 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2730 = (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2704 / ((_2708 * _2708) * 3.141590118408203125));
        float _2731 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
        _2656 = (((_2717 * cbLight._m0[_2666].x) * _2730) * _2731) + _2598;
        _2658 = (((_2717 * cbLight._m0[_2666].y) * _2730) * _2731) + _2599;
        _2660 = (((_2717 * cbLight._m0[_2666].z) * _2730) * _2731) + _2600;
    }
    float _2762;
    float _2764;
    float _2766;
    if (_2384)
    {
        _2762 = _2656;
        _2764 = _2658;
        _2766 = _2660;
    }
    else
    {
        uint _2773 = _2199 + 3u;
        uint _2777 = _2199 + 11u;
        float _2791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2773].w)) * _713) * 0.949999988079071044921875);
        float _2792 = _2791 * _2791;
        float _2793 = cbLight._m0[_2773].x + _789;
        float _2794 = cbLight._m0[_2773].y + _790;
        float _2795 = cbLight._m0[_2773].z + _791;
        float _2799 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
        float _2800 = _2799 * _2793;
        float _2801 = _2799 * _2794;
        float _2802 = _2799 * _2795;
        float _2803 = dot(vec3(_710, _711, _712), vec3(cbLight._m0[_2773].xyz));
        float _4721 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2806 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2807 = dot(vec3(_710, _711, _712), vec3(_2800, _2801, _2802));
        float _4732 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2810 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2811 = dot(vec3(cbLight._m0[_2773].xyz), vec3(_2800, _2801, _2802));
        float _4743 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2815 = _2792 * _2792;
        float _2819 = ((_2810 * _2810) * (_2815 + (-1.0))) + 1.0;
        float _2828 = (exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2829 = 1.0 - _2792;
        float _2839 = (0.5 / (((_2475 * ((_2806 * _2829) + _2792)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2829) + _2792) * _2806))) * _2806;
        float _4754 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2841 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2815 / ((_2819 * _2819) * 3.141590118408203125));
        float _2842 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2762 = (((_2828 * cbLight._m0[_2777].x) * _2841) * _2842) + _2656;
        _2764 = (((_2828 * cbLight._m0[_2777].y) * _2841) * _2842) + _2658;
        _2766 = (((_2828 * cbLight._m0[_2777].z) * _2841) * _2842) + _2660;
    }
    float _2908;
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    if (_2197.y == 0u)
    {
        uvec4 _2863 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2864 = _2863.x;
        uint _2875 = uint((float(_2863.y) * floor(float(uint(cbSceneParam._m0[85u].y * _810) / _2864))) + floor(float(uint(cbSceneParam._m0[85u].x * _809) / _2864)));
        float _2885 = (log2(_1975 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2886 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        uint _2889 = uint(isnan(14.0) ? _2886 : (isnan(_2886) ? 14.0 : min(_2886, 14.0)));
        uvec4 _2894 = texelFetch(g_lightClusterGridBuffer, int(((_2889 << 2u) + (_2875 << 6u)) >> 2u));
        uint _2895 = _2894.x;
        uint _2896 = _2863.z;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        if (((((1u << ((_2896 >> 4u) & 15u)) + 4294967295u) & _2895) == 0u) || ((_2896 & 240u) == 0u))
        {
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
        }
        else
        {
            float _2976;
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _3128 = 0.0;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            uint _3134 = 0u;
            uint _3143;
            bool _3144;
            for (;;)
            {
                _3143 = texelFetch(g_lightClassification, int((((_2889 << 5u) + (_2875 << 9u)) + (_3134 << 2u)) >> 2u)).x;
                _3144 = _3143 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3144)
                {
                    frontier_phi_71_pred = _3133;
                    frontier_phi_71_pred_1 = _3132;
                    frontier_phi_71_pred_2 = _3131;
                    frontier_phi_71_pred_3 = _3130;
                    frontier_phi_71_pred_4 = _3129;
                    frontier_phi_71_pred_5 = _3128;
                }
                else
                {
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    uint _3279;
                    _3273 = _3128;
                    _3274 = _3129;
                    _3275 = _3130;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3133;
                    _3279 = _3143;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    for (;;)
                    {
                        uint _3283 = uint(findLSB(_3279)) + (_3134 << 5u);
                        uint _3280 = (_3279 + 4294967295u) & _3279;
                        uint _3285 = _3283 * 48u;
                        vec4 _3299 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3285)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 3u)).x));
                        uint _3305 = (_3283 * 48u) + 4u;
                        vec4 _3318 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3305)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 3u)).x));
                        uint _3324 = (_3283 * 48u) + 8u;
                        vec3 _3335 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3324)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 2u)).x));
                        float _3339 = _3299.x - _1973;
                        float _3340 = _3299.y - _1974;
                        float _3341 = _3299.z - _1975;
                        float _3342 = dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341));
                        float _3345 = inversesqrt(_3342);
                        float _3346 = _3345 * _3339;
                        float _3347 = _3345 * _3340;
                        float _3348 = _3345 * _3341;
                        float _3349 = dot(vec3(_828, _831, _834), vec3(_3346, _3347, _3348));
                        float _3354 = 1.0 - (_3342 * _3299.w);
                        float _4780 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3355 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3356 = sqrt(_3342) * _3318.w;
                        float _3359 = 1.39999997615814208984375 / (_3356 + 1.39999997615814208984375);
                        float _3360 = _3359 * _3359;
                        float _3363 = ((1.0 - _3360) * _3349) + _3360;
                        float _3366 = _3356 * _3356;
                        float _3370 = ((isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0))) * _3355) / ((_3366 * 0.699999988079071044921875) + 1.0);
                        float _3374 = (-0.0) - _1973;
                        float _3375 = (-0.0) - _1974;
                        float _3376 = (-0.0) - _1975;
                        float _3380 = inversesqrt(dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376)));
                        float _3381 = _3380 * _3374;
                        float _3382 = _3380 * _3375;
                        float _3383 = _3380 * _3376;
                        float _3390 = exp2(log2(1.0 / ((_3366 * 3.5) + 5.0)) * 0.25);
                        float _3391 = 1.0 - _888;
                        float _3398 = sqrt(1.0 - ((1.0 - (_3391 * _3391)) * (1.0 - (_3390 * _3390))));
                        float _3399 = _3398 * _3398;
                        float _3400 = _3399 * _3399;
                        float _3401 = _3381 + _3346;
                        float _3402 = _3382 + _3347;
                        float _3403 = _3383 + _3348;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3411 = dot(vec3(_828, _831, _834), vec3(_3381, _3382, _3383));
                        float _4796 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3414 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                        float _3415 = dot(vec3(_828, _831, _834), vec3(_3407 * _3401, _3407 * _3402, _3407 * _3403));
                        float _4807 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3418 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3422 = ((_3418 * _3418) * (_3400 + (-1.0))) + 1.0;
                        float _3423 = _3359 * _3399;
                        float _3424 = _3423 * _3423;
                        float _3427 = ((1.0 - _3424) * _3349) + _3424;
                        float _4818 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3428 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3429 = 1.0 - _3399;
                        float _3439 = (0.5 / (((_3428 * ((_3414 * _3429) + _3399)) + 9.9999999392252902907785028219223e-09) + (((_3428 * _3429) + _3399) * _3414))) * _3428;
                        float _4829 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3449 = (((_3400 * 3.1415927410125732421875) * (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0)))) / ((_3422 * _3422) * ((_3366 * 2.1991131305694580078125) + 3.141590118408203125))) * _3355;
                        _3203 = (_3370 * _3318.x) + _3276;
                        _3204 = (_3370 * _3318.y) + _3277;
                        _3205 = (_3370 * _3318.z) + _3278;
                        _3200 = (_3449 * _3335.x) + _3273;
                        _3201 = (_3449 * _3335.y) + _3274;
                        _3202 = (_3449 * _3335.z) + _3275;
                        if (_3280 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3273 = _3200;
                            _3274 = _3201;
                            _3275 = _3202;
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3205;
                            _3279 = _3280;
                        }
                    }
                    frontier_phi_71_pred = _3205;
                    frontier_phi_71_pred_1 = _3204;
                    frontier_phi_71_pred_2 = _3203;
                    frontier_phi_71_pred_3 = _3202;
                    frontier_phi_71_pred_4 = _3201;
                    frontier_phi_71_pred_5 = _3200;
                }
                _2986 = frontier_phi_71_pred;
                _2984 = frontier_phi_71_pred_1;
                _2982 = frontier_phi_71_pred_2;
                _2980 = frontier_phi_71_pred_3;
                _2978 = frontier_phi_71_pred_4;
                _2976 = frontier_phi_71_pred_5;
                uint _3135 = _3134 + 1u;
                if (_3135 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3128 = _2976;
                    _3129 = _2978;
                    _3130 = _2980;
                    _3131 = _2982;
                    _3132 = _2984;
                    _3133 = _2986;
                    _3134 = _3135;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
        }
        uvec4 _2989 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2990 = _2989.z;
        uint _2992 = (_2990 >> 8u) & 15u;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        if (((4294967295u << _2992) & _2895) == 0u)
        {
            _3096 = _2975;
            _3098 = _2977;
            _3100 = _2979;
            _3102 = _2981;
            _3104 = _2983;
            _3106 = _2985;
        }
        else
        {
            float _3121 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
            float _3122 = _3121 * _1973;
            float _3123 = _3121 * _1974;
            float _3124 = _3121 * _1975;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2992 < ((_2990 >> 12u) & 15u))
            {
                float _3097;
                float _3099;
                float _3101;
                float _3103;
                float _3105;
                float _3107;
                float _3256 = _2975;
                float _3257 = _2977;
                float _3258 = _2979;
                float _3259 = _2981;
                float _3260 = _2983;
                float _3261 = _2985;
                uint _3262 = _2992;
                uint _3271;
                bool _3272;
                for (;;)
                {
                    _3271 = texelFetch(g_lightClassification, int((((_2889 << 5u) + (_2875 << 9u)) + (_3262 << 2u)) >> 2u)).x;
                    _3272 = _3271 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3272)
                    {
                        frontier_phi_82_pred = _3261;
                        frontier_phi_82_pred_1 = _3260;
                        frontier_phi_82_pred_2 = _3259;
                        frontier_phi_82_pred_3 = _3258;
                        frontier_phi_82_pred_4 = _3257;
                        frontier_phi_82_pred_5 = _3256;
                    }
                    else
                    {
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3756;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3476 = _3256;
                        float _3477 = _3257;
                        float _3478 = _3258;
                        float _3479 = _3259;
                        float _3480 = _3260;
                        float _3481 = _3261;
                        uint _3482 = _3271;
                        uint _3483;
                        vec4 _3508;
                        float _3509;
                        vec4 _3524;
                        vec3 _3536;
                        vec4 _3551;
                        vec4 _3566;
                        float _3612;
                        bool _3613;
                        for (;;)
                        {
                            uint _3493 = ((_3262 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3482));
                            _3483 = (_3482 + 4294967295u) & _3482;
                            uint _3495 = _3493 * 40u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            _3509 = _3508.w;
                            uint _3511 = (_3493 * 40u) + 4u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3526 = (_3493 * 40u) + 8u;
                            _3536 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x));
                            uint _3538 = (_3493 * 40u) + 16u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3553 = (_3493 * 40u) + 20u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3568 = (_3493 * 40u) + 24u;
                            vec4 _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3587 = (_3493 * 40u) + 28u;
                            vec4 _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            _3612 = fma(_1975, _3600.z, fma(_1974, _3600.y, _3600.x * _1973)) + _3600.w;
                            _3613 = !((fma(_1975, _3581.z, fma(_1974, _3581.y, _3581.x * _1973)) + _3581.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3613)
                            {
                                float _3640 = _3508.x - _1973;
                                float _3641 = _3508.y - _1974;
                                float _3642 = _3508.z - _1975;
                                float _3643 = dot(vec3(_3640, _3641, _3642), vec3(_3640, _3641, _3642));
                                float _3646 = inversesqrt(_3643);
                                float _3647 = _3646 * _3640;
                                float _3648 = _3646 * _3641;
                                float _3649 = _3646 * _3642;
                                float _3653 = 1.0 - (_3643 / (_3509 * _3509));
                                float _4840 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3654 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3658 = sqrt(_3643) * _3524.w;
                                float _3660 = 1.39999997615814208984375 / (_3658 + 1.39999997615814208984375);
                                float _3661 = _3660 * _3660;
                                float _3664 = ((1.0 - _3661) * dot(vec3(_3647, _3648, _3649), vec3(_828, _831, _834))) + _3661;
                                float _3667 = _3658 * _3658;
                                float _3671 = (fma(_1975, _3551.z, fma(_1974, _3551.y, _3551.x * _1973)) + _3551.w) / _3612;
                                float _3672 = (fma(_1975, _3566.z, fma(_1974, _3566.y, _3566.x * _1973)) + _3566.w) / _3612;
                                float _3676 = 1.0 - dot(vec2(_3671, _3672), vec2(_3671, _3672));
                                float _4856 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3677 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3678 = _3677 * (((isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0))) * _3654) / ((_3667 * 0.699999988079071044921875) + 1.0));
                                float _3690 = exp2(log2(1.0 / ((_3667 * 3.5) + 5.0)) * 0.25);
                                float _3691 = 1.0 - _888;
                                float _3698 = sqrt(1.0 - ((1.0 - (_3691 * _3691)) * (1.0 - (_3690 * _3690))));
                                float _3699 = _3698 * _3698;
                                float _3700 = _3699 * _3699;
                                float _3701 = _3647 - _3122;
                                float _3702 = _3648 - _3123;
                                float _3703 = _3649 - _3124;
                                float _3707 = inversesqrt(dot(vec3(_3701, _3702, _3703), vec3(_3701, _3702, _3703)));
                                float _3711 = dot(vec3(_828, _831, _834), vec3((-0.0) - _3122, (-0.0) - _3123, (-0.0) - _3124));
                                float _4867 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3714 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3715 = dot(vec3(_828, _831, _834), vec3(_3707 * _3701, _3707 * _3702, _3707 * _3703));
                                float _4878 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3718 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3722 = ((_3718 * _3718) * (_3700 + (-1.0))) + 1.0;
                                float _3723 = _3660 * _3699;
                                float _3724 = _3723 * _3723;
                                float _3730 = ((1.0 - _3724) * dot(vec3(_828, _831, _834), vec3(_3647, _3648, _3649))) + _3724;
                                float _4889 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3731 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3732 = 1.0 - _3699;
                                float _3742 = (0.5 / (((_3731 * ((_3714 * _3732) + _3699)) + 9.9999999392252902907785028219223e-09) + (((_3731 * _3732) + _3699) * _3714))) * _3731;
                                float _4900 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3752 = (_3677 * _3654) * (((_3700 * 3.1415927410125732421875) * (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) / ((_3722 * _3722) * ((_3667 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3678 * _3524.z;
                                frontier_phi_88_pred_1 = _3678 * _3524.y;
                                frontier_phi_88_pred_2 = _3678 * _3524.x;
                                frontier_phi_88_pred_3 = _3752 * _3536.z;
                                frontier_phi_88_pred_4 = _3752 * _3536.y;
                                frontier_phi_88_pred_5 = _3752 * _3536.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3761 = frontier_phi_88_pred;
                            _3760 = frontier_phi_88_pred_1;
                            _3759 = frontier_phi_88_pred_2;
                            _3758 = frontier_phi_88_pred_3;
                            _3757 = frontier_phi_88_pred_4;
                            _3756 = frontier_phi_88_pred_5;
                            _3466 = _3759 + _3479;
                            _3467 = _3760 + _3480;
                            _3468 = _3761 + _3481;
                            _3463 = _3756 + _3476;
                            _3464 = _3757 + _3477;
                            _3465 = _3758 + _3478;
                            if (_3483 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3483;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3468;
                        frontier_phi_82_pred_1 = _3467;
                        frontier_phi_82_pred_2 = _3466;
                        frontier_phi_82_pred_3 = _3465;
                        frontier_phi_82_pred_4 = _3464;
                        frontier_phi_82_pred_5 = _3463;
                    }
                    _3107 = frontier_phi_82_pred;
                    _3105 = frontier_phi_82_pred_1;
                    _3103 = frontier_phi_82_pred_2;
                    _3101 = frontier_phi_82_pred_3;
                    _3099 = frontier_phi_82_pred_4;
                    _3097 = frontier_phi_82_pred_5;
                    uint _3263 = _3262 + 1u;
                    if (_3263 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3256 = _3097;
                        _3257 = _3099;
                        _3258 = _3101;
                        _3259 = _3103;
                        _3260 = _3105;
                        _3261 = _3107;
                        _3262 = _3263;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3103;
                frontier_phi_63_64_ladder_1 = _3107;
                frontier_phi_63_64_ladder_2 = _3105;
                frontier_phi_63_64_ladder_3 = _3101;
                frontier_phi_63_64_ladder_4 = _3099;
                frontier_phi_63_64_ladder_5 = _3097;
            }
            else
            {
                frontier_phi_63_64_ladder = _2981;
                frontier_phi_63_64_ladder_1 = _2985;
                frontier_phi_63_64_ladder_2 = _2983;
                frontier_phi_63_64_ladder_3 = _2979;
                frontier_phi_63_64_ladder_4 = _2977;
                frontier_phi_63_64_ladder_5 = _2975;
            }
            _3096 = frontier_phi_63_64_ladder_5;
            _3098 = frontier_phi_63_64_ladder_4;
            _3100 = frontier_phi_63_64_ladder_3;
            _3102 = frontier_phi_63_64_ladder;
            _3104 = frontier_phi_63_64_ladder_2;
            _3106 = frontier_phi_63_64_ladder_1;
        }
        float _3111 = isnan(1.0) ? _872 : (isnan(_872) ? 1.0 : min(_872, 1.0));
        _2908 = (_3111 * _3102) + _2439;
        _2910 = (_3111 * _3104) + _2441;
        _2912 = (_3111 * _3106) + _2443;
        _2914 = ((_3096 * 0.039999999105930328369140625) * _3111) + _2762;
        _2916 = ((_3098 * 0.039999999105930328369140625) * _3111) + _2764;
        _2918 = ((_3100 * 0.039999999105930328369140625) * _3111) + _2766;
    }
    else
    {
        _2908 = _2439;
        _2910 = _2441;
        _2912 = _2443;
        _2914 = _2762;
        _2916 = _2764;
        _2918 = _2766;
    }
    float _4916 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4927 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4938 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _2935 = ((isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2908 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _872))) + ((_2914 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1706)) * cbPerFrame._m0[3u].x);
    float _2936 = ((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2910 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _872))) + ((_2916 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1706)) * cbPerFrame._m0[3u].x);
    float _2937 = ((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2912 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _872))) + ((_2918 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1706)) * cbPerFrame._m0[3u].x);
    uint _2938 = _253 + 6u;
    float _2946 = _809 / cbSceneParam._m0[86u].x;
    float _2947 = _810 / cbSceneParam._m0[86u].y;
    vec4 _2961 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2946, _2947, (log2((isnan(cbSceneParam._m0[77u].w) ? _731 : (isnan(_731) ? cbSceneParam._m0[77u].w : min(_731, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2963 = _2961.x;
    float _2964 = _2961.y;
    float _2965 = _2961.z;
    float _2966 = _2961.w;
    float _3038;
    float _3040;
    float _3042;
    float _3044;
    if (_731 > cbSceneParam._m0[78u].w)
    {
        float _3000 = isnan(_731) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _731 : min(cbSceneParam._m0[80u].w, _731));
        float _3001 = _3000 / _731;
        float _3012 = _3001 * _782;
        float _3013 = _783 * _3001;
        float _3014 = (-0.0) - _3013;
        float _3016 = _3001 * _784;
        float _3018 = (cbSceneParam._m0[77u].w * _3014) / _3000;
        float _3019 = _3018 + cbSceneParam._m0[79u].w;
        float _3020 = cbSceneParam._m0[79u].w - _3013;
        float _3026 = sqrt(((_3012 * _3012) + (_3013 * _3013)) + (_3016 * _3016));
        float _3029 = (1.0 - (cbSceneParam._m0[77u].w / _3000)) * _3026;
        float _3034 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3036 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3213;
        if (abs((_3014 - _3018) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3213 = ((((_3019 > 0.0) ? exp2(_3034 * _3019) : (2.0 - exp2(_3036 * _3019))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3029;
        }
        else
        {
            float _3157 = 1.0 / cbSceneParam._m0[80u].x;
            float _3158 = isnan(_3020) ? _3019 : (isnan(_3019) ? _3020 : max(_3019, _3020));
            float _3159 = isnan(_3020) ? _3019 : (isnan(_3019) ? _3020 : min(_3019, _3020));
            float _3168 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : min(_3158, 0.0));
            float _3169 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : min(_3159, 0.0));
            _3213 = ((abs(_3026 / _3014) * cbSceneParam._m0[80u].y) * ((((_3168 - _3169) * 2.0) - ((exp2(_3034 * (isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0)))) - exp2(_3034 * (isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0))))) * _3157)) - ((exp2(_3036 * _3168) - exp2(_3036 * _3169)) * _3157))) + (_3029 * cbSceneParam._m0[80u].z);
        }
        vec4 _3215 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2946, _2947, 1.0), 0.0);
        float _3224 = exp2((_3213 * (-1.44269502162933349609375)) * (1.0 - _3215.w));
        float _3225 = log2(_3224);
        float _3241 = log2(_2966);
        _3038 = (exp2(_3241 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3225 * cbSceneParam._m0[78u].x)) * _3215.x) / cbSceneParam._m0[78u].x)) + _2963;
        _3040 = (exp2(_3241 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3225 * cbSceneParam._m0[78u].y)) * _3215.y) / cbSceneParam._m0[78u].y)) + _2964;
        _3042 = (exp2(_3241 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3225 * cbSceneParam._m0[78u].z)) * _3215.z) / cbSceneParam._m0[78u].z)) + _2965;
        _3044 = _3224 * _2966;
    }
    else
    {
        _3038 = _2963;
        _3040 = _2964;
        _3042 = _2965;
        _3044 = _2966;
    }
    bool _3251;
    vec4 _3054;
    vec4 _3076;
    float _3078;
    float _3082;
    float _3083;
    float _3084;
    float _3085;
    bool _3095;
    for (;;)
    {
        _3054 = cbMatDynParam._m0[0u];
        float _3056 = roundEven(_3054.y);
        bool _3057 = _3056 == 3.0;
        float _3058 = log2(_3044);
        float _3065 = exp2(_3058 * cbSceneParam._m0[78u].x) * _2935;
        float _3066 = exp2(_3058 * cbSceneParam._m0[78u].y) * _2936;
        float _3067 = exp2(_3058 * cbSceneParam._m0[78u].z) * _2937;
        float _3074 = _798 + (-0.5);
        _3076 = cbMtdParam._m0[1u];
        _3078 = _3076.y * _3074;
        float _3081 = (_3056 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3082 = _3081 * (_3057 ? _3065 : (_3065 + (cbSceneParam._m0[72u].w * _3038)));
        _3083 = _3081 * (_3057 ? _3066 : (_3066 + (cbSceneParam._m0[72u].w * _3040)));
        _3084 = _3081 * (_3057 ? _3067 : (_3067 + (cbSceneParam._m0[72u].w * _3042)));
        _3085 = _3074 * 0.999000012874603271484375;
        _3095 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3095)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _3085) < 0.5)
            {
                _3251 = true;
                break;
            }
        }
        uint _3192 = _847 + uint(_3054.w);
        if ((cbInstanceData._m0[_3192].w < 1.0) && ((cbInstanceData._m0[_3192].w + _3085) < 0.5))
        {
            _3251 = true;
            break;
        }
        if ((_3078 + 1.0) < _3076.x)
        {
            _3251 = true;
            break;
        }
        _3251 = false;
        break;
    }
    float _3454;
    if (_3251)
    {
        discard_state = true;
        _3454 = 0.0;
    }
    else
    {
        _3454 = cbInstanceData._m0[_2938].w;
    }
    SV_Target.x = _3082;
    SV_Target.y = _3083;
    SV_Target.z = _3084;
    SV_Target.w = _3454;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2938].w;
    discard_exit();
}


