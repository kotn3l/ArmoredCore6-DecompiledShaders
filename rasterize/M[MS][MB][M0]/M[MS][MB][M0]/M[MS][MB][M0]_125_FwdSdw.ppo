#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1142;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _358 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _358) * cbMtdParam._m0[24u].x) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3729 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _383 = (_376 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _384 = (_376 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _385 = (_376 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _404 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _449 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _468 = _466.x;
    float _469 = _466.y;
    float _470 = _466.z;
    float _479 = ((_449.z - _470) * _376) + _470;
    float _482 = ((((_449.x - _468) * _376) + _468) * 2.0) + (-1.0);
    float _483 = ((((_449.y - _469) * _376) + _469) * 2.0) + (-1.0);
    float _484 = dot(vec2(_482, _483), vec2(_482, _483));
    float _3740 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _489 = sqrt(1.0 - (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))));
    vec4 _502 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _520 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _522 = _520.x;
    float _523 = 1.0 - _522;
    float _536 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_522 - _523) * cbMtdParam._m0[24u].z) + _523) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3751 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _537 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _544 = (_537 * ((_404.x * cbMtdParam._m0[18u].x) - _383)) + _383;
    float _545 = (_537 * ((_404.y * cbMtdParam._m0[18u].y) - _384)) + _384;
    float _546 = (_537 * ((_404.z * cbMtdParam._m0[18u].z) - _385)) + _385;
    float _551 = (((_424.z - _479) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _479;
    vec4 _564 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _571 = (_564.x * 2.0) + (-1.0);
    float _572 = (_564.y * 2.0) + (-1.0);
    float _573 = dot(vec2(_571, _572), vec2(_571, _572));
    float _3762 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _581 = (_537 * (_564.z - _551)) + _551;
    float _586 = _482 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_424.x * 2.0) + (-1.0)));
    float _587 = _483 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_424.y * 2.0) + (-1.0)));
    float _599 = (((_571 - _586) + (cbMtdParam._m0[21u].x * _586)) * _537) + _586;
    float _600 = (((_572 - _587) + (cbMtdParam._m0[21u].x * _587)) * _537) + _587;
    float _601 = (_537 * (sqrt(1.0 - (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) - _489)) + _489;
    float _606 = cbMtdParam._m0[22u].x + _502.w;
    float _609 = fma(_601, _227 * NORMAL.x, fma(_600, _234 * TANGENT.x, (_220 * _212) * _599));
    float _612 = fma(_601, _227 * NORMAL.y, fma(_600, _234 * TANGENT.y, (_220 * _213) * _599));
    float _615 = fma(_601, _227 * NORMAL.z, fma(_600, _234 * TANGENT.z, (_220 * _214) * _599));
    float _619 = inversesqrt(dot(vec3(_609, _612, _615), vec3(_609, _612, _615)));
    float _620 = _619 * _609;
    float _621 = _619 * _612;
    float _622 = _619 * _615;
    float _3773 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _623 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _3795 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3806 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _3817 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _641 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _693 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _683);
    float _694 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _683);
    float _695 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _683);
    float _699 = inversesqrt(dot(vec3(_693, _694, _695), vec3(_693, _694, _695)));
    float _700 = _693 * _699;
    float _701 = _694 * _699;
    float _702 = _695 * _699;
    float _708 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _709 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _727 = fma(_622, cbSceneParam._m0[5u].z, fma(_621, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _620));
    float _730 = fma(_622, cbSceneParam._m0[6u].z, fma(_621, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _620));
    float _733 = fma(_622, cbSceneParam._m0[7u].z, fma(_621, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _620));
    uint _747 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _753 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) * cbInstanceData._m0[_747].x;
    float _754 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) * cbInstanceData._m0[_747].y;
    float _755 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0)))) * cbInstanceData._m0[_747].z;
    float _3828 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _3839 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _757 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    vec4 _767 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _708, cbSceneParam._m0[86u].y * _709));
    float _771 = ((isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * TEXCOORD_5.w) * _767.x;
    float _772 = dot(vec3(_620, _621, _622), vec3(_700, _701, _702));
    float _775 = _772 * 2.0;
    float _779 = (_775 * _620) - _700;
    float _780 = (_775 * _621) - _701;
    float _781 = (_775 * _622) - _702;
    float _785 = abs(dot(vec3(_700, _701, _702), vec3(_620, _621, _622)));
    float _3861 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _787 = sqrt(_623);
    float _800 = exp2((_787 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_787 * 3.0));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _836 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1141;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _866 = fma(_840, cbModelParam._m0[26u].z, fma(_836, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _832));
        float _870 = fma(_840, cbModelParam._m0[27u].z, fma(_836, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _832));
        float _874 = fma(_840, cbModelParam._m0[28u].z, fma(_836, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _832));
        float _899 = _832 + _620;
        float _900 = _836 + _621;
        float _901 = _840 + _622;
        float _911 = fma(_901, cbModelParam._m0[26u].z, fma(_900, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _899)) - _866;
        float _912 = fma(_901, cbModelParam._m0[27u].z, fma(_900, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _899)) - _870;
        float _913 = fma(_901, cbModelParam._m0[28u].z, fma(_900, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _899)) - _874;
        float _917 = inversesqrt(dot(vec3(_911, _912, _913), vec3(_911, _912, _913)));
        float _930 = ((_917 * _911) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_866 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _931 = ((_917 * _912) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_870 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _932 = ((_917 * _913) / cbModelParam._m0[34u].z) + ((((((_874 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        float _969 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_935.x + (-0.5));
        float _971 = _969 * (_935.y + (-0.5));
        float _972 = _969 * (_935.z + (-0.5));
        float _979 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_942.x + (-0.5));
        float _981 = _979 * (_942.y + (-0.5));
        float _982 = _979 * (_942.z + (-0.5));
        float _989 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_949.x + (-0.5));
        float _991 = _989 * (_949.y + (-0.5));
        float _992 = _989 * (_949.z + (-0.5));
        float _999 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_956.x + (-0.5));
        float _1001 = _999 * (_956.y + (-0.5));
        float _1002 = _999 * (_956.z + (-0.5));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = _970 * 0.5;
        float _1007 = _980 * 0.5;
        float _1008 = _990 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1023 = (dot(vec3(_620, _621, _622), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1033 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3909 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1035 + 1.0))) + _1040) * _1003;
        float _1050 = _971 * 0.5;
        float _1051 = _981 * 0.5;
        float _1052 = _991 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_620, _621, _622), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3942 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1077 + 1.0))) + _1082) * _1004;
        float _1092 = _972 * 0.5;
        float _1093 = _982 * 0.5;
        float _1094 = _992 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_620, _621, _622), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3975 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1119 + 1.0))) + _1124) * _1005;
        _1141 = _972;
        _1143 = _971;
        _1144 = _970;
        _1145 = _982;
        _1146 = _981;
        _1147 = _980;
        _1148 = _992;
        _1149 = _991;
        _1150 = _990;
        _1151 = _1005;
        _1152 = _1004;
        _1153 = _1003;
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1155 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1156 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
    }
    else
    {
        _1141 = _1142;
        _1143 = _1142;
        _1144 = _1142;
        _1145 = _1142;
        _1146 = _1142;
        _1147 = _1142;
        _1148 = _1142;
        _1149 = _1142;
        _1150 = _1142;
        _1151 = _1142;
        _1152 = _1142;
        _1153 = _1142;
        _1154 = 0.0;
        _1155 = 0.0;
        _1156 = 0.0;
    }
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1181 = fma(_840, cbModelParam._m0[30u].z, fma(_836, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _832));
        float _1185 = fma(_840, cbModelParam._m0[31u].z, fma(_836, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _832));
        float _1189 = fma(_840, cbModelParam._m0[32u].z, fma(_836, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _832));
        float _1212 = _832 + _620;
        float _1213 = _836 + _621;
        float _1214 = _840 + _622;
        float _1224 = fma(_1214, cbModelParam._m0[30u].z, fma(_1213, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1212)) - _1181;
        float _1225 = fma(_1214, cbModelParam._m0[31u].z, fma(_1213, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1212)) - _1185;
        float _1226 = fma(_1214, cbModelParam._m0[32u].z, fma(_1213, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1212)) - _1189;
        float _1230 = inversesqrt(dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226)));
        float _1243 = ((_1230 * _1224) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1181 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1230 * _1225) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1185 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1230 * _1226) / cbModelParam._m0[35u].z) + ((((((_1189 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        float _1280 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1247.x + (-0.5));
        float _1282 = _1280 * (_1247.y + (-0.5));
        float _1283 = _1280 * (_1247.z + (-0.5));
        float _1290 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1254.x + (-0.5));
        float _1292 = _1290 * (_1254.y + (-0.5));
        float _1293 = _1290 * (_1254.z + (-0.5));
        float _1300 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1261.x + (-0.5));
        float _1302 = _1300 * (_1261.y + (-0.5));
        float _1303 = _1300 * (_1261.z + (-0.5));
        float _1310 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1268.x + (-0.5));
        float _1312 = _1310 * (_1268.y + (-0.5));
        float _1313 = _1310 * (_1268.z + (-0.5));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = _1281 * 0.5;
        float _1318 = _1291 * 0.5;
        float _1319 = _1301 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_620, _621, _622), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4038 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1344 + 1.0))) + _1349) * _1314;
        float _1359 = _1282 * 0.5;
        float _1360 = _1292 * 0.5;
        float _1361 = _1302 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_620, _621, _622), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4071 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1386 + 1.0))) + _1391) * _1315;
        float _1401 = _1283 * 0.5;
        float _1402 = _1293 * 0.5;
        float _1403 = _1303 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_620, _621, _622), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4104 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1428 + 1.0))) + _1433) * _1316;
        _1450 = _1283;
        _1451 = _1282;
        _1452 = _1281;
        _1453 = _1293;
        _1454 = _1292;
        _1455 = _1291;
        _1456 = _1303;
        _1457 = _1302;
        _1458 = _1301;
        _1459 = _1316;
        _1460 = _1315;
        _1461 = _1314;
        _1462 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
        _1463 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1464 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
    }
    else
    {
        _1450 = _1142;
        _1451 = _1142;
        _1452 = _1142;
        _1453 = _1142;
        _1454 = _1142;
        _1455 = _1142;
        _1456 = _1142;
        _1457 = _1142;
        _1458 = _1142;
        _1459 = _1142;
        _1460 = _1142;
        _1461 = _1142;
        _1462 = 0.0;
        _1463 = 0.0;
        _1464 = 0.0;
    }
    float _1474 = (cbModelParam._m0[1u].x * (_1462 - _1154)) + _1154;
    float _1475 = (cbModelParam._m0[1u].x * (_1463 - _1155)) + _1155;
    float _1476 = (cbModelParam._m0[1u].x * (_1464 - _1156)) + _1156;
    float _1497 = fma(_1476, cbSceneParam._m0[89u].z, fma(_1475, cbSceneParam._m0[89u].y, _1474 * cbSceneParam._m0[89u].x));
    float _1500 = fma(_1476, cbSceneParam._m0[90u].z, fma(_1475, cbSceneParam._m0[90u].y, _1474 * cbSceneParam._m0[90u].x));
    float _1503 = fma(_1476, cbSceneParam._m0[91u].z, fma(_1475, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1474));
    float _1518 = _779 * 0.5;
    float _1519 = _780 * 0.5;
    float _1520 = _781 * 0.5;
    float _1521 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1452, _1455, _1458, _1461));
    float _1524 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1451, _1454, _1457, _1460));
    float _1527 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1450, _1453, _1456, _1459));
    float _1561;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1534 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1141, _1145, _1148, _1151));
        float _1538 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1143, _1146, _1149, _1152));
        float _1542 = dot(vec4(_1518, _1519, _1520, 1.0), vec4(_1144, _1147, _1150, _1153));
        float _1549 = dot(vec4(cbModelParam._m0[39u]), vec4(_1518, _1519, _1520, 1.0));
        _1561 = dot(vec3(isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1549) ? 0.0 : (isnan(0.0) ? _1549 : max(0.0, _1549))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1561 = 1.0;
    }
    float _1572;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1563 = dot(vec4(cbModelParam._m0[40u]), vec4(_1518, _1519, _1520, 1.0));
        _1572 = dot(vec3(isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1563) ? 0.0 : (isnan(0.0) ? _1563 : max(0.0, _1563))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1572 = 1.0;
    }
    float _1576 = (_1572 * cbModelParam._m0[1u].x) + (_1561 * (1.0 - cbModelParam._m0[1u].x));
    float _1586 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _623);
    float _1587 = isnan(_1586) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1586 : min(cbModelParam._m0[25u].z, _1586));
    float _1667;
    float _1669;
    float _1671;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1634 = fma(_840, cbModelParam._m0[13u].z, fma(_836, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _832)) + cbModelParam._m0[13u].w;
        float _1638 = fma(_840, cbModelParam._m0[14u].z, fma(_836, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _832)) + cbModelParam._m0[14u].w;
        float _1642 = fma(_840, cbModelParam._m0[15u].z, fma(_836, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _832)) + cbModelParam._m0[15u].w;
        float _1645 = fma(_781, cbModelParam._m0[13u].z, fma(_780, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _779));
        float _1648 = fma(_781, cbModelParam._m0[14u].z, fma(_780, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _779));
        float _1651 = fma(_781, cbModelParam._m0[15u].z, fma(_780, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _779));
        float _1679;
        if (_1645 > 0.0)
        {
            _1679 = abs((1.0 - _1634) / _1645);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1634 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1679 = frontier_phi_14_12_ladder;
        }
        float _1848;
        if (_1648 > 0.0)
        {
            _1848 = abs((1.0 - _1638) / _1648);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1638 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1848 = frontier_phi_23_19_ladder;
        }
        float _2143;
        if (_1651 > 0.0)
        {
            _2143 = abs((1.0 - _1642) / _1651);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1642 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2143 = frontier_phi_35_30_ladder;
        }
        float _2145 = isnan(_1848) ? _1679 : (isnan(_1679) ? _1848 : min(_1679, _1848));
        float _2146 = isnan(_2143) ? _2145 : (isnan(_2145) ? _2143 : min(_2145, _2143));
        float _2150 = (_2146 * _1645) + _1634;
        float _2151 = (_2146 * _1648) + _1638;
        float _2152 = (_2146 * _1651) + _1642;
        float _2153 = _2146 * 9.9999997473787516355514526367188e-05;
        float _2155 = (-1.0) - _2153;
        float _2157 = _2153 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2152 > _2157) || ((_2152 < _2155) || ((_2151 > _2157) || ((_2151 < _2155) || ((_2150 < _2155) || (_2150 > _2157))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2297 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2152, cbModelParam._m0[9u].z, fma(_2151, cbModelParam._m0[9u].y, _2150 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2152, cbModelParam._m0[10u].z, fma(_2151, cbModelParam._m0[10u].y, _2150 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2152, cbModelParam._m0[11u].z, fma(_2151, cbModelParam._m0[11u].y, _2150 * cbModelParam._m0[11u].x))), _1587);
            frontier_phi_13_35_ladder = _2297.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2297.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2297.x * cbModelParam._m0[1u].y;
        }
        _1667 = frontier_phi_13_35_ladder_2;
        _1669 = frontier_phi_13_35_ladder_1;
        _1671 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1655 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_779, _780, _781), _1587);
        _1667 = _1655.x * cbModelParam._m0[1u].y;
        _1669 = _1655.y * cbModelParam._m0[1u].y;
        _1671 = _1655.z * cbModelParam._m0[1u].y;
    }
    float _1675 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _623);
    float _1676 = isnan(_1675) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1675 : min(cbModelParam._m0[25u].w, _1675));
    float _1765;
    float _1767;
    float _1769;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1729 = fma(_840, cbModelParam._m0[21u].z, fma(_836, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _832)) + cbModelParam._m0[21u].w;
        float _1733 = fma(_840, cbModelParam._m0[22u].z, fma(_836, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _832)) + cbModelParam._m0[22u].w;
        float _1737 = fma(_840, cbModelParam._m0[23u].z, fma(_836, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _832)) + cbModelParam._m0[23u].w;
        float _1740 = fma(_781, cbModelParam._m0[21u].z, fma(_780, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _779));
        float _1743 = fma(_781, cbModelParam._m0[22u].z, fma(_780, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _779));
        float _1746 = fma(_781, cbModelParam._m0[23u].z, fma(_780, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _779));
        float _1853;
        if (_1740 > 0.0)
        {
            _1853 = abs((1.0 - _1729) / _1740);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1729 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1853 = frontier_phi_25_21_ladder;
        }
        float _2170;
        if (_1743 > 0.0)
        {
            _2170 = abs((1.0 - _1733) / _1743);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1733 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2170 = frontier_phi_37_32_ladder;
        }
        float _2497;
        if (_1746 > 0.0)
        {
            _2497 = abs((1.0 - _1737) / _1746);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1737 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2497 = frontier_phi_47_44_ladder;
        }
        float _2499 = isnan(_2170) ? _1853 : (isnan(_1853) ? _2170 : min(_1853, _2170));
        float _2500 = isnan(_2497) ? _2499 : (isnan(_2499) ? _2497 : min(_2499, _2497));
        float _2504 = (_2500 * _1740) + _1729;
        float _2505 = (_2500 * _1743) + _1733;
        float _2506 = (_2500 * _1746) + _1737;
        float _2507 = _2500 * 9.9999997473787516355514526367188e-05;
        float _2508 = (-1.0) - _2507;
        float _2510 = _2507 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2506 > _2510) || ((_2506 < _2508) || ((_2505 > _2510) || ((_2505 < _2508) || ((_2504 < _2508) || (_2504 > _2510))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2624 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2506, cbModelParam._m0[17u].z, fma(_2505, cbModelParam._m0[17u].y, _2504 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2506, cbModelParam._m0[18u].z, fma(_2505, cbModelParam._m0[18u].y, _2504 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2506, cbModelParam._m0[19u].z, fma(_2505, cbModelParam._m0[19u].y, _2504 * cbModelParam._m0[19u].x))), _1676);
            frontier_phi_22_47_ladder = _2624.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2624.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2624.x * cbModelParam._m0[1u].z;
        }
        _1765 = frontier_phi_22_47_ladder_2;
        _1767 = frontier_phi_22_47_ladder_1;
        _1769 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1749 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_779, _780, _781), _1676);
        _1765 = _1749.x * cbModelParam._m0[1u].z;
        _1767 = _1749.y * cbModelParam._m0[1u].z;
        _1769 = _1749.z * cbModelParam._m0[1u].z;
    }
    float _1781 = ((((1.0 - _800) * ((_787 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_800 * _787)) * _771;
    float _1782 = _1781 * ((cbModelParam._m0[1u].w * (_1765 - _1667)) + _1667);
    float _1783 = _1781 * ((cbModelParam._m0[1u].w * (_1767 - _1669)) + _1669);
    float _1784 = _1781 * ((cbModelParam._m0[1u].w * (_1769 - _1671)) + _1671);
    float _1787 = fma(_1784, cbSceneParam._m0[89u].z, fma(_1783, cbSceneParam._m0[89u].y, _1782 * cbSceneParam._m0[89u].x));
    float _1790 = fma(_1784, cbSceneParam._m0[90u].z, fma(_1783, cbSceneParam._m0[90u].y, _1782 * cbSceneParam._m0[90u].x));
    float _1793 = fma(_1784, cbSceneParam._m0[91u].z, fma(_1783, cbSceneParam._m0[91u].y, _1782 * cbSceneParam._m0[91u].x));
    float _1827 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1831 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1835 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1839 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1840 = _1827 / _1839;
    float _1841 = _1831 / _1839;
    float _1842 = _1835 / _1839;
    float _1989;
    float _1990;
    float _1991;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1869 = ((uint(_1842 > cbSceneParam._m0[59u].y) + uint(_1842 > cbSceneParam._m0[59u].x)) + uint(_1842 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1870 = _1869 + 43u;
        uint _1878 = _1869 + 44u;
        uint _1886 = _1869 + 45u;
        uint _1894 = _1869 + 46u;
        float _1905 = fma(_1839, cbSceneParam._m0[_1870].w, fma(_1835, cbSceneParam._m0[_1870].z, fma(_1831, cbSceneParam._m0[_1870].y, _1827 * cbSceneParam._m0[_1870].x)));
        float _1909 = fma(_1839, cbSceneParam._m0[_1878].w, fma(_1835, cbSceneParam._m0[_1878].z, fma(_1831, cbSceneParam._m0[_1878].y, _1827 * cbSceneParam._m0[_1878].x)));
        float _1917 = fma(_1839, cbSceneParam._m0[_1894].w, fma(_1835, cbSceneParam._m0[_1894].z, fma(_1831, cbSceneParam._m0[_1894].y, _1827 * cbSceneParam._m0[_1894].x)));
        float _1922 = cbSceneParam._m0[33u].z * _1917;
        float _1924 = cbSceneParam._m0[33u].w * _1917;
        float _1927 = fma(_1839, cbSceneParam._m0[_1886].w, fma(_1835, cbSceneParam._m0[_1886].z, fma(_1831, cbSceneParam._m0[_1886].y, _1827 * cbSceneParam._m0[_1886].x))) / _1917;
        float _1975 = (cbSceneParam._m0[33u].x - sqrt(((_1841 * _1841) + (_1840 * _1840)) + (_1842 * _1842))) * cbSceneParam._m0[33u].y;
        float _4230 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1982 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1922 + _1905) / _1917, (_1924 + _1909) / _1917), _1927), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1924 + _1905) / _1917, (_1909 - _1922) / _1917), _1927), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1905 - _1922) / _1917, (_1909 - _1924) / _1917), _1927), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1905 - _1924) / _1917, (_1922 + _1909) / _1917), _1927), 0.0)).x), vec4(0.25)));
        _1989 = 1.0 - (_1982 * cbSceneParam._m0[34u].x);
        _1990 = 1.0 - (_1982 * cbSceneParam._m0[34u].y);
        _1991 = 1.0 - (_1982 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1989 = 1.0;
        _1990 = 1.0;
        _1991 = 1.0;
    }
    float _2055;
    float _2057;
    float _2059;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2043 = fma(_1839, cbSceneParam._m0[63u].w, fma(_1835, cbSceneParam._m0[63u].z, fma(_1831, cbSceneParam._m0[63u].y, _1827 * cbSceneParam._m0[63u].x)));
        float _2044 = fma(_1839, cbSceneParam._m0[60u].w, fma(_1835, cbSceneParam._m0[60u].z, fma(_1831, cbSceneParam._m0[60u].y, _1827 * cbSceneParam._m0[60u].x))) / _2043;
        float _2045 = fma(_1839, cbSceneParam._m0[61u].w, fma(_1835, cbSceneParam._m0[61u].z, fma(_1831, cbSceneParam._m0[61u].y, _1827 * cbSceneParam._m0[61u].x))) / _2043;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2044 >= cbSceneParam._m0[64u].x) && (_2045 >= cbSceneParam._m0[64u].y)) && (_2044 <= cbSceneParam._m0[64u].z)) && (_2045 <= cbSceneParam._m0[64u].w))
        {
            float _2183 = fma(_1839, cbSceneParam._m0[62u].w, fma(_1835, cbSceneParam._m0[62u].z, fma(_1831, cbSceneParam._m0[62u].y, _1827 * cbSceneParam._m0[62u].x))) / _2043;
            float _2187 = isnan(cbSceneParam._m0[41u].w) ? _2183 : (isnan(_2183) ? cbSceneParam._m0[41u].w : max(_2183, cbSceneParam._m0[41u].w));
            float _2230 = (cbSceneParam._m0[33u].x - sqrt(((_1841 * _1841) + (_1840 * _1840)) + (_1842 * _1842))) * cbSceneParam._m0[33u].y;
            float _4246 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
            float _2237 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2044, cbSceneParam._m0[33u].w + _2045), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2044, _2045 - cbSceneParam._m0[33u].z), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2044 - cbSceneParam._m0[33u].z, _2045 - cbSceneParam._m0[33u].w), _2187), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2044 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2045), _2187), 0.0)).x), vec4(0.25)));
            float _2241 = 1.0 - (_2237 * cbSceneParam._m0[34u].x);
            float _2242 = 1.0 - (_2237 * cbSceneParam._m0[34u].y);
            float _2243 = 1.0 - (_2237 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2243) ? _1991 : (isnan(_1991) ? _2243 : min(_1991, _2243));
            frontier_phi_34_33_ladder_1 = isnan(_2242) ? _1990 : (isnan(_1990) ? _2242 : min(_1990, _2242));
            frontier_phi_34_33_ladder_2 = isnan(_2241) ? _1989 : (isnan(_1989) ? _2241 : min(_1989, _2241));
        }
        else
        {
            frontier_phi_34_33_ladder = _1991;
            frontier_phi_34_33_ladder_1 = _1990;
            frontier_phi_34_33_ladder_2 = _1989;
        }
        _2055 = frontier_phi_34_33_ladder_2;
        _2057 = frontier_phi_34_33_ladder_1;
        _2059 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2055 = _1989;
        _2057 = _1990;
        _2059 = _1991;
    }
    uvec4 _2064 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2066 = _2064.x * 14u;
    uint _2067 = _2066 + 13u;
    float _2074 = _771 + (-1.0);
    float _2079 = (cbLight._m0[_2067].x * _2074) + 1.0;
    float _2080 = (cbLight._m0[_2067].y * _2074) + 1.0;
    float _2081 = (cbLight._m0[_2067].z * _2074) + 1.0;
    float _2082 = (cbLight._m0[_2067].w * _2074) + 1.0;
    uint _2083 = _2066 + 5u;
    float _2089 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
    uint _2093 = _2066 + 4u;
    float _2102 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
    uint _2106 = _2066 | 1u;
    float _2117 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_620, _621, _622));
    float _2120 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_620, _621, _622));
    float _4282 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _4293 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2125 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * 0.3183098733425140380859375;
    float _2127 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * 0.3183098733425140380859375;
    float _2134 = ((cbLight._m0[_2083].x * _2089) * _2127) + (((cbLight._m0[_2093].x * _2055) * _2102) * _2125);
    float _2135 = ((_2089 * cbLight._m0[_2083].y) * _2127) + (((cbLight._m0[_2093].y * _2057) * _2102) * _2125);
    float _2136 = ((_2089 * cbLight._m0[_2083].z) * _2127) + (((cbLight._m0[_2093].z * _2059) * _2102) * _2125);
    uvec4 _2140 = floatBitsToUint(cbLight._m0[_2066 + 12u]);
    bool _2142 = _2140.x == 0u;
    float _2244;
    float _2246;
    float _2248;
    if (_2142)
    {
        _2244 = _2134;
        _2246 = _2135;
        _2248 = _2136;
    }
    else
    {
        uint _2252 = _2066 + 6u;
        float _2268 = (dot(vec3(cbLight._m0[_2066 + 2u].xyz), vec3(_620, _621, _622)) * 0.5) + 0.5;
        float _2269 = _2268 * _2268;
        float _4304 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2270 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2271 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2244 = (((cbLight._m0[_2252].x * 0.3183098733425140380859375) * _2270) * _2271) + _2134;
        _2246 = (((cbLight._m0[_2252].y * 0.3183098733425140380859375) * _2270) * _2271) + _2135;
        _2248 = (((cbLight._m0[_2252].z * 0.3183098733425140380859375) * _2270) * _2271) + _2136;
    }
    bool _2251 = _2140.y == 0u;
    float _2306;
    float _2308;
    float _2310;
    if (_2251)
    {
        _2306 = _2244;
        _2308 = _2246;
        _2310 = _2248;
    }
    else
    {
        uint _2468 = _2066 + 7u;
        float _2484 = (dot(vec3(cbLight._m0[_2066 + 3u].xyz), vec3(_620, _621, _622)) * 0.5) + 0.5;
        float _2485 = _2484 * _2484;
        float _4320 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2486 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2487 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2306 = (((cbLight._m0[_2468].x * 0.3183098733425140380859375) * _2486) * _2487) + _2244;
        _2308 = (((cbLight._m0[_2468].y * 0.3183098733425140380859375) * _2486) * _2487) + _2246;
        _2310 = (((cbLight._m0[_2468].z * 0.3183098733425140380859375) * _2486) * _2487) + _2248;
    }
    uint _2313 = _2066 + 8u;
    float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _623) * 0.949999988079071044921875);
    float _2327 = _2326 * _2326;
    float _2328 = cbLight._m0[_2066].x + _700;
    float _2329 = cbLight._m0[_2066].y + _701;
    float _2330 = cbLight._m0[_2066].z + _702;
    float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
    float _2335 = _2334 * _2328;
    float _2336 = _2334 * _2329;
    float _2337 = _2334 * _2330;
    float _2338 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_2066].xyz));
    float _4336 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _4347 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _2342 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _2343 = dot(vec3(_620, _621, _622), vec3(_2335, _2336, _2337));
    float _4358 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _2347 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2335, _2336, _2337));
    float _4369 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2351 = _2327 * _2327;
    float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
    float _2366 = (exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2367 = 1.0 - _2327;
    float _2378 = (0.5 / (((_2342 * ((_2341 * _2367) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2367) + _2327) * _2341))) * _2341;
    float _4380 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2380 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
    uint _2394 = _2066 + 9u;
    float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _623) * 0.949999988079071044921875);
    float _2406 = _2405 * _2405;
    float _2407 = cbLight._m0[_2106].x + _700;
    float _2408 = cbLight._m0[_2106].y + _701;
    float _2409 = cbLight._m0[_2106].z + _702;
    float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
    float _2414 = _2413 * _2407;
    float _2415 = _2413 * _2408;
    float _2416 = _2413 * _2409;
    float _2417 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_2106].xyz));
    float _4391 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2421 = dot(vec3(_620, _621, _622), vec3(_2414, _2415, _2416));
    float _4402 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2425 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2414, _2415, _2416));
    float _4413 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2429 = _2406 * _2406;
    float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
    float _2442 = (exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2443 = 1.0 - _2406;
    float _2453 = (0.5 / (((_2342 * ((_2420 * _2443) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2443) + _2406) * _2420))) * _2420;
    float _4424 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2455 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
    float _2465 = (((_2442 * cbLight._m0[_2394].x) * _2455) * _2089) + ((((cbLight._m0[_2313].x * _2055) * _2366) * _2380) * _2102);
    float _2466 = (((_2442 * cbLight._m0[_2394].y) * _2455) * _2089) + ((((cbLight._m0[_2313].y * _2057) * _2366) * _2380) * _2102);
    float _2467 = (((_2442 * cbLight._m0[_2394].z) * _2455) * _2089) + ((((cbLight._m0[_2313].z * _2059) * _2366) * _2380) * _2102);
    float _2523;
    float _2525;
    float _2527;
    if (_2142)
    {
        _2523 = _2465;
        _2525 = _2466;
        _2527 = _2467;
    }
    else
    {
        uint _2529 = _2066 + 2u;
        uint _2533 = _2066 + 10u;
        float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2529].w)) * _623) * 0.949999988079071044921875);
        float _2548 = _2547 * _2547;
        float _2549 = cbLight._m0[_2529].x + _700;
        float _2550 = cbLight._m0[_2529].y + _701;
        float _2551 = cbLight._m0[_2529].z + _702;
        float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
        float _2556 = _2555 * _2549;
        float _2557 = _2555 * _2550;
        float _2558 = _2555 * _2551;
        float _2559 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_2529].xyz));
        float _4435 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2563 = dot(vec3(_620, _621, _622), vec3(_2556, _2557, _2558));
        float _4446 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2566 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2567 = dot(vec3(cbLight._m0[_2529].xyz), vec3(_2556, _2557, _2558));
        float _4457 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2571 = _2548 * _2548;
        float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
        float _2584 = (exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2585 = 1.0 - _2548;
        float _2595 = (0.5 / (((_2342 * ((_2562 * _2585) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2585) + _2548) * _2562))) * _2562;
        float _4468 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2597 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
        float _2598 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2523 = (((_2584 * cbLight._m0[_2533].x) * _2597) * _2598) + _2465;
        _2525 = (((_2584 * cbLight._m0[_2533].y) * _2597) * _2598) + _2466;
        _2527 = (((_2584 * cbLight._m0[_2533].z) * _2597) * _2598) + _2467;
    }
    float _2629;
    float _2631;
    float _2633;
    if (_2251)
    {
        _2629 = _2523;
        _2631 = _2525;
        _2633 = _2527;
    }
    else
    {
        uint _2640 = _2066 + 3u;
        uint _2644 = _2066 + 11u;
        float _2658 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2640].w)) * _623) * 0.949999988079071044921875);
        float _2659 = _2658 * _2658;
        float _2660 = cbLight._m0[_2640].x + _700;
        float _2661 = cbLight._m0[_2640].y + _701;
        float _2662 = cbLight._m0[_2640].z + _702;
        float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
        float _2667 = _2666 * _2660;
        float _2668 = _2666 * _2661;
        float _2669 = _2666 * _2662;
        float _2670 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_2640].xyz));
        float _4484 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2674 = dot(vec3(_620, _621, _622), vec3(_2667, _2668, _2669));
        float _4495 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2678 = dot(vec3(cbLight._m0[_2640].xyz), vec3(_2667, _2668, _2669));
        float _4506 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2682 = _2659 * _2659;
        float _2686 = ((_2677 * _2677) * (_2682 + (-1.0))) + 1.0;
        float _2695 = (exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2696 = 1.0 - _2659;
        float _2706 = (0.5 / (((_2342 * ((_2673 * _2696) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2696) + _2659) * _2673))) * _2673;
        float _4517 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2708 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2682 / ((_2686 * _2686) * 3.141590118408203125));
        float _2709 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2629 = (((_2695 * cbLight._m0[_2644].x) * _2708) * _2709) + _2523;
        _2631 = (((_2695 * cbLight._m0[_2644].y) * _2708) * _2709) + _2525;
        _2633 = (((_2695 * cbLight._m0[_2644].z) * _2708) * _2709) + _2527;
    }
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    if (_2064.y == 0u)
    {
        uvec4 _2730 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2731 = _2730.x;
        uint _2742 = uint((float(_2730.y) * floor(float(uint(cbSceneParam._m0[85u].y * _709) / _2731))) + floor(float(uint(cbSceneParam._m0[85u].x * _708) / _2731)));
        float _2752 = (log2(_1842 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2753 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        uint _2756 = uint(isnan(14.0) ? _2753 : (isnan(_2753) ? 14.0 : min(_2753, 14.0)));
        uvec4 _2761 = texelFetch(g_lightClusterGridBuffer, int(((_2756 << 2u) + (_2742 << 6u)) >> 2u));
        uint _2762 = _2761.x;
        uint _2763 = _2730.z;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        if (((((1u << ((_2763 >> 4u) & 15u)) + 4294967295u) & _2762) == 0u) || ((_2763 & 240u) == 0u))
        {
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
            _2850 = 0.0;
            _2852 = 0.0;
        }
        else
        {
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2851;
            float _2853;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            uint _2993 = 0u;
            uint _3002;
            bool _3003;
            for (;;)
            {
                _3002 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_2993 << 2u)) >> 2u)).x;
                _3003 = _3002 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3003)
                {
                    frontier_phi_66_pred = _2992;
                    frontier_phi_66_pred_1 = _2991;
                    frontier_phi_66_pred_2 = _2990;
                    frontier_phi_66_pred_3 = _2989;
                    frontier_phi_66_pred_4 = _2988;
                    frontier_phi_66_pred_5 = _2987;
                }
                else
                {
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    uint _3117;
                    _3111 = _2987;
                    _3112 = _2988;
                    _3113 = _2989;
                    _3114 = _2990;
                    _3115 = _2991;
                    _3116 = _2992;
                    _3117 = _3002;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    for (;;)
                    {
                        uint _3121 = uint(findLSB(_3117)) + (_2993 << 5u);
                        uint _3118 = (_3117 + 4294967295u) & _3117;
                        uint _3123 = _3121 * 48u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 3u)).x));
                        uint _3143 = (_3121 * 48u) + 4u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3162 = (_3121 * 48u) + 8u;
                        vec3 _3173 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x));
                        float _3177 = _3137.x - _1840;
                        float _3178 = _3137.y - _1841;
                        float _3179 = _3137.z - _1842;
                        float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                        float _3183 = inversesqrt(_3180);
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3187 = dot(vec3(_727, _730, _733), vec3(_3184, _3185, _3186));
                        float _3192 = 1.0 - (_3180 * _3137.w);
                        float _4543 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3193 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3194 = sqrt(_3180) * _3156.w;
                        float _3197 = 1.39999997615814208984375 / (_3194 + 1.39999997615814208984375);
                        float _3198 = _3197 * _3197;
                        float _3201 = ((1.0 - _3198) * _3187) + _3198;
                        float _3204 = _3194 * _3194;
                        float _3208 = ((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3193) / ((_3204 * 0.699999988079071044921875) + 1.0);
                        float _3212 = (-0.0) - _1840;
                        float _3213 = (-0.0) - _1841;
                        float _3214 = (-0.0) - _1842;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3228 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                        float _3229 = 1.0 - _787;
                        float _3236 = sqrt(1.0 - ((1.0 - (_3229 * _3229)) * (1.0 - (_3228 * _3228))));
                        float _3237 = _3236 * _3236;
                        float _3238 = _3237 * _3237;
                        float _3239 = _3219 + _3184;
                        float _3240 = _3220 + _3185;
                        float _3241 = _3221 + _3186;
                        float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                        float _3249 = dot(vec3(_727, _730, _733), vec3(_3219, _3220, _3221));
                        float _4559 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3252 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3253 = dot(vec3(_727, _730, _733), vec3(_3245 * _3239, _3245 * _3240, _3245 * _3241));
                        float _4570 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3256 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                        float _3260 = ((_3256 * _3256) * (_3238 + (-1.0))) + 1.0;
                        float _3261 = _3197 * _3237;
                        float _3262 = _3261 * _3261;
                        float _3265 = ((1.0 - _3262) * _3187) + _3262;
                        float _4581 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3266 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3267 = 1.0 - _3237;
                        float _3277 = (0.5 / (((_3266 * ((_3252 * _3267) + _3237)) + 9.9999999392252902907785028219223e-09) + (((_3266 * _3267) + _3237) * _3252))) * _3266;
                        float _4592 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3288 = (((_3238 * 3.1415927410125732421875) * (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) / ((_3260 * _3260) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125))) * _3193;
                        _3046 = (_3208 * _3156.x) + _3114;
                        _3047 = (_3208 * _3156.y) + _3115;
                        _3048 = (_3208 * _3156.z) + _3116;
                        _3043 = (_3288 * _3173.x) + _3111;
                        _3044 = (_3288 * _3173.y) + _3112;
                        _3045 = (_3288 * _3173.z) + _3113;
                        if (_3118 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3111 = _3043;
                            _3112 = _3044;
                            _3113 = _3045;
                            _3114 = _3046;
                            _3115 = _3047;
                            _3116 = _3048;
                            _3117 = _3118;
                        }
                    }
                    frontier_phi_66_pred = _3048;
                    frontier_phi_66_pred_1 = _3047;
                    frontier_phi_66_pred_2 = _3046;
                    frontier_phi_66_pred_3 = _3045;
                    frontier_phi_66_pred_4 = _3044;
                    frontier_phi_66_pred_5 = _3043;
                }
                _2853 = frontier_phi_66_pred;
                _2851 = frontier_phi_66_pred_1;
                _2849 = frontier_phi_66_pred_2;
                _2847 = frontier_phi_66_pred_3;
                _2845 = frontier_phi_66_pred_4;
                _2843 = frontier_phi_66_pred_5;
                uint _2994 = _2993 + 1u;
                if (_2994 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2987 = _2843;
                    _2988 = _2845;
                    _2989 = _2847;
                    _2990 = _2849;
                    _2991 = _2851;
                    _2992 = _2853;
                    _2993 = _2994;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
            _2850 = _2851;
            _2852 = _2853;
        }
        uvec4 _2856 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2857 = _2856.z;
        uint _2859 = (_2857 >> 8u) & 15u;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        if (((4294967295u << _2859) & _2762) == 0u)
        {
            _2955 = _2842;
            _2957 = _2844;
            _2959 = _2846;
            _2961 = _2848;
            _2963 = _2850;
            _2965 = _2852;
        }
        else
        {
            float _2980 = inversesqrt(dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842)));
            float _2981 = _2980 * _1840;
            float _2982 = _2980 * _1841;
            float _2983 = _2980 * _1842;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2859 < ((_2857 >> 12u) & 15u))
            {
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _3094 = _2842;
                float _3095 = _2844;
                float _3096 = _2846;
                float _3097 = _2848;
                float _3098 = _2850;
                float _3099 = _2852;
                uint _3100 = _2859;
                uint _3109;
                bool _3110;
                for (;;)
                {
                    _3109 = texelFetch(g_lightClassification, int((((_2756 << 5u) + (_2742 << 9u)) + (_3100 << 2u)) >> 2u)).x;
                    _3110 = _3109 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3110)
                    {
                        frontier_phi_72_pred = _3099;
                        frontier_phi_72_pred_1 = _3098;
                        frontier_phi_72_pred_2 = _3097;
                        frontier_phi_72_pred_3 = _3096;
                        frontier_phi_72_pred_4 = _3095;
                        frontier_phi_72_pred_5 = _3094;
                    }
                    else
                    {
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3306 = _3094;
                        float _3307 = _3095;
                        float _3308 = _3096;
                        float _3309 = _3097;
                        float _3310 = _3098;
                        float _3311 = _3099;
                        uint _3312 = _3109;
                        uint _3313;
                        vec4 _3338;
                        float _3339;
                        vec4 _3354;
                        vec3 _3366;
                        vec4 _3381;
                        vec4 _3396;
                        float _3442;
                        bool _3443;
                        for (;;)
                        {
                            uint _3323 = ((_3100 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3312));
                            _3313 = (_3312 + 4294967295u) & _3312;
                            uint _3325 = _3323 * 40u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            _3339 = _3338.w;
                            uint _3341 = (_3323 * 40u) + 4u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3356 = (_3323 * 40u) + 8u;
                            _3366 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x));
                            uint _3368 = (_3323 * 40u) + 16u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3383 = (_3323 * 40u) + 20u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3398 = (_3323 * 40u) + 24u;
                            vec4 _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3417 = (_3323 * 40u) + 28u;
                            vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            _3442 = fma(_1842, _3430.z, fma(_1841, _3430.y, _3430.x * _1840)) + _3430.w;
                            _3443 = !((fma(_1842, _3411.z, fma(_1841, _3411.y, _3411.x * _1840)) + _3411.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3443)
                            {
                                float _3470 = _3338.x - _1840;
                                float _3471 = _3338.y - _1841;
                                float _3472 = _3338.z - _1842;
                                float _3473 = dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472));
                                float _3476 = inversesqrt(_3473);
                                float _3477 = _3476 * _3470;
                                float _3478 = _3476 * _3471;
                                float _3479 = _3476 * _3472;
                                float _3483 = 1.0 - (_3473 / (_3339 * _3339));
                                float _4603 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3484 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3488 = sqrt(_3473) * _3354.w;
                                float _3490 = 1.39999997615814208984375 / (_3488 + 1.39999997615814208984375);
                                float _3491 = _3490 * _3490;
                                float _3494 = ((1.0 - _3491) * dot(vec3(_3477, _3478, _3479), vec3(_727, _730, _733))) + _3491;
                                float _3497 = _3488 * _3488;
                                float _3501 = (fma(_1842, _3381.z, fma(_1841, _3381.y, _3381.x * _1840)) + _3381.w) / _3442;
                                float _3502 = (fma(_1842, _3396.z, fma(_1841, _3396.y, _3396.x * _1840)) + _3396.w) / _3442;
                                float _3506 = 1.0 - dot(vec2(_3501, _3502), vec2(_3501, _3502));
                                float _4619 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3508 = _3507 * (((isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0))) * _3484) / ((_3497 * 0.699999988079071044921875) + 1.0));
                                float _3520 = exp2(log2(1.0 / ((_3497 * 3.5) + 5.0)) * 0.25);
                                float _3521 = 1.0 - _787;
                                float _3528 = sqrt(1.0 - ((1.0 - (_3521 * _3521)) * (1.0 - (_3520 * _3520))));
                                float _3529 = _3528 * _3528;
                                float _3530 = _3529 * _3529;
                                float _3531 = _3477 - _2981;
                                float _3532 = _3478 - _2982;
                                float _3533 = _3479 - _2983;
                                float _3537 = inversesqrt(dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533)));
                                float _3541 = dot(vec3(_727, _730, _733), vec3((-0.0) - _2981, (-0.0) - _2982, (-0.0) - _2983));
                                float _4630 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3544 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3545 = dot(vec3(_727, _730, _733), vec3(_3537 * _3531, _3537 * _3532, _3537 * _3533));
                                float _4641 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3548 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3552 = ((_3548 * _3548) * (_3530 + (-1.0))) + 1.0;
                                float _3553 = _3490 * _3529;
                                float _3554 = _3553 * _3553;
                                float _3560 = ((1.0 - _3554) * dot(vec3(_727, _730, _733), vec3(_3477, _3478, _3479))) + _3554;
                                float _4652 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3562 = 1.0 - _3529;
                                float _3572 = (0.5 / (((_3561 * ((_3544 * _3562) + _3529)) + 9.9999999392252902907785028219223e-09) + (((_3561 * _3562) + _3529) * _3544))) * _3561;
                                float _4663 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3582 = (_3507 * _3484) * (((_3530 * 3.1415927410125732421875) * (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) / ((_3552 * _3552) * ((_3497 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3508 * _3354.y;
                                frontier_phi_78_pred_1 = _3508 * _3354.x;
                                frontier_phi_78_pred_2 = _3582 * _3366.z;
                                frontier_phi_78_pred_3 = _3582 * _3366.y;
                                frontier_phi_78_pred_4 = _3582 * _3366.x;
                                frontier_phi_78_pred_5 = _3508 * _3354.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3590 = frontier_phi_78_pred;
                            _3589 = frontier_phi_78_pred_1;
                            _3588 = frontier_phi_78_pred_2;
                            _3587 = frontier_phi_78_pred_3;
                            _3586 = frontier_phi_78_pred_4;
                            _3591 = frontier_phi_78_pred_5;
                            _3296 = _3589 + _3309;
                            _3297 = _3590 + _3310;
                            _3298 = _3591 + _3311;
                            _3293 = _3586 + _3306;
                            _3294 = _3587 + _3307;
                            _3295 = _3588 + _3308;
                            if (_3313 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3313;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3298;
                        frontier_phi_72_pred_1 = _3297;
                        frontier_phi_72_pred_2 = _3296;
                        frontier_phi_72_pred_3 = _3295;
                        frontier_phi_72_pred_4 = _3294;
                        frontier_phi_72_pred_5 = _3293;
                    }
                    _2966 = frontier_phi_72_pred;
                    _2964 = frontier_phi_72_pred_1;
                    _2962 = frontier_phi_72_pred_2;
                    _2960 = frontier_phi_72_pred_3;
                    _2958 = frontier_phi_72_pred_4;
                    _2956 = frontier_phi_72_pred_5;
                    uint _3101 = _3100 + 1u;
                    if (_3101 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3094 = _2956;
                        _3095 = _2958;
                        _3096 = _2960;
                        _3097 = _2962;
                        _3098 = _2964;
                        _3099 = _2966;
                        _3100 = _3101;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2966;
                frontier_phi_60_61_ladder_1 = _2964;
                frontier_phi_60_61_ladder_2 = _2960;
                frontier_phi_60_61_ladder_3 = _2958;
                frontier_phi_60_61_ladder_4 = _2956;
                frontier_phi_60_61_ladder_5 = _2962;
            }
            else
            {
                frontier_phi_60_61_ladder = _2852;
                frontier_phi_60_61_ladder_1 = _2850;
                frontier_phi_60_61_ladder_2 = _2846;
                frontier_phi_60_61_ladder_3 = _2844;
                frontier_phi_60_61_ladder_4 = _2842;
                frontier_phi_60_61_ladder_5 = _2848;
            }
            _2955 = frontier_phi_60_61_ladder_4;
            _2957 = frontier_phi_60_61_ladder_3;
            _2959 = frontier_phi_60_61_ladder_2;
            _2961 = frontier_phi_60_61_ladder_5;
            _2963 = frontier_phi_60_61_ladder_1;
            _2965 = frontier_phi_60_61_ladder;
        }
        float _2970 = isnan(1.0) ? _771 : (isnan(_771) ? 1.0 : min(_771, 1.0));
        _2775 = (_2970 * _2961) + _2306;
        _2777 = (_2970 * _2963) + _2308;
        _2779 = (_2970 * _2965) + _2310;
        _2781 = ((_2955 * 0.039999999105930328369140625) * _2970) + _2629;
        _2783 = ((_2957 * 0.039999999105930328369140625) * _2970) + _2631;
        _2785 = ((_2959 * 0.039999999105930328369140625) * _2970) + _2633;
    }
    else
    {
        _2775 = _2306;
        _2777 = _2308;
        _2779 = _2310;
        _2781 = _2629;
        _2783 = _2631;
        _2785 = _2633;
    }
    float _4679 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4690 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4701 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    uint _2805 = _240 + 6u;
    float _2813 = _708 / cbSceneParam._m0[86u].x;
    float _2814 = _709 / cbSceneParam._m0[86u].y;
    vec4 _2828 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2813, _2814, (log2((isnan(cbSceneParam._m0[77u].w) ? _641 : (isnan(_641) ? cbSceneParam._m0[77u].w : min(_641, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2830 = _2828.x;
    float _2831 = _2828.y;
    float _2832 = _2828.z;
    float _2833 = _2828.w;
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    if (_641 > cbSceneParam._m0[78u].w)
    {
        float _2867 = isnan(_641) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _641 : min(cbSceneParam._m0[80u].w, _641));
        float _2868 = _2867 / _641;
        float _2879 = _2868 * _693;
        float _2880 = _694 * _2868;
        float _2881 = (-0.0) - _2880;
        float _2883 = _2868 * _695;
        float _2885 = (cbSceneParam._m0[77u].w * _2881) / _2867;
        float _2886 = _2885 + cbSceneParam._m0[79u].w;
        float _2887 = cbSceneParam._m0[79u].w - _2880;
        float _2893 = sqrt(((_2879 * _2879) + (_2880 * _2880)) + (_2883 * _2883));
        float _2896 = (1.0 - (cbSceneParam._m0[77u].w / _2867)) * _2893;
        float _2901 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2903 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3056;
        if (abs((_2881 - _2885) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3056 = ((((_2886 > 0.0) ? exp2(_2901 * _2886) : (2.0 - exp2(_2903 * _2886))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2896;
        }
        else
        {
            float _3016 = 1.0 / cbSceneParam._m0[80u].x;
            float _3017 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : max(_2886, _2887));
            float _3018 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : min(_2886, _2887));
            float _3027 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : min(_3017, 0.0));
            float _3028 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : min(_3018, 0.0));
            _3056 = ((abs(_2893 / _2881) * cbSceneParam._m0[80u].y) * ((((_3027 - _3028) * 2.0) - ((exp2(_2901 * (isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0)))) - exp2(_2901 * (isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))))) * _3016)) - ((exp2(_2903 * _3027) - exp2(_2903 * _3028)) * _3016))) + (_2896 * cbSceneParam._m0[80u].z);
        }
        vec4 _3058 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2813, _2814, 1.0), 0.0);
        float _3067 = exp2((_3056 * (-1.44269502162933349609375)) * (1.0 - _3058.w));
        float _3068 = log2(_3067);
        float _3084 = log2(_2833);
        _2905 = (exp2(_3084 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].x)) * _3058.x) / cbSceneParam._m0[78u].x)) + _2830;
        _2907 = (exp2(_3084 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].y)) * _3058.y) / cbSceneParam._m0[78u].y)) + _2831;
        _2909 = (exp2(_3084 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3068 * cbSceneParam._m0[78u].z)) * _3058.z) / cbSceneParam._m0[78u].z)) + _2832;
        _2911 = _3067 * _2833;
    }
    else
    {
        _2905 = _2830;
        _2907 = _2831;
        _2909 = _2832;
        _2911 = _2833;
    }
    float _2923 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2924 = _2923 == 3.0;
    float _2925 = log2(_2911);
    float _2932 = exp2(_2925 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2775 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _771))) + ((_2781 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1576)) * cbPerFrame._m0[3u].x));
    float _2933 = exp2(_2925 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2777 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _771))) + ((_2783 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1576)) * cbPerFrame._m0[3u].x));
    float _2934 = exp2(_2925 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2779 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _771))) + ((_2785 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1576)) * cbPerFrame._m0[3u].x));
    float _2943 = (_2923 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2943 * (_2924 ? _2932 : (_2932 + (cbSceneParam._m0[72u].w * _2905)));
    SV_Target.y = _2943 * (_2924 ? _2933 : (_2933 + (cbSceneParam._m0[72u].w * _2907)));
    SV_Target.z = _2943 * (_2924 ? _2934 : (_2934 + (cbSceneParam._m0[72u].w * _2909)));
    SV_Target.w = cbInstanceData._m0[_2805].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2805].w;
}


