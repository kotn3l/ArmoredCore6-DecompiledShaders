#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1111;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _269 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _275 = _269.x * cbMtdParam._m0[11u].x;
    float _276 = _269.y * cbMtdParam._m0[11u].y;
    float _277 = _269.z * cbMtdParam._m0[11u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _248) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _249) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _336 = _334.x;
    float _346 = dot(vec4(_336, _334.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _363 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_336 - _346) * cbMtdParam._m0[24u].x) + _346) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3442 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _371 = (_364 * ((_296.x * cbMtdParam._m0[12u].x) - _275)) + _275;
    float _372 = (_364 * ((_296.y * cbMtdParam._m0[12u].y) - _276)) + _276;
    float _373 = (_364 * ((_296.z * cbMtdParam._m0[12u].z) - _277)) + _277;
    vec4 _391 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _248) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _249) + cbTextureTilingScale._m0[4u].w));
    vec4 _408 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _410 = _408.x;
    float _411 = _408.y;
    float _412 = _408.z;
    float _421 = ((_391.z - _412) * _364) + _412;
    float _424 = ((((_391.x - _410) * _364) + _410) * 2.0) + (-1.0);
    float _426 = ((((_391.y - _411) * _364) + _411) * 2.0) + (-1.0);
    float _427 = dot(vec2(_424, _426), vec2(_424, _426));
    float _3453 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _432 = sqrt(1.0 - (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))));
    vec4 _448 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _460 = (((_448.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _424;
    float _461 = (((_448.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _426;
    float _464 = fma(_432, _216, fma(_461, _223, _460 * _209));
    float _467 = fma(_432, _217, fma(_461, _224, _460 * _210));
    float _470 = fma(_432, _218, fma(_461, _225, _460 * _211));
    float _474 = inversesqrt(dot(vec3(_464, _467, _470), vec3(_464, _467, _470)));
    vec4 _503 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _505 = _503.x;
    float _506 = 1.0 - _505;
    float _512 = (cbMtdParam._m0[19u].x + dot(vec4(_474 * _464, _474 * _467, _474 * _470, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_505 - _506) * cbMtdParam._m0[24u].z) + _506) * cbMtdParam._m0[21u].z);
    float _3464 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _513 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _520 = (_513 * (cbMtdParam._m0[17u].x - _371)) + _371;
    float _521 = (_513 * (cbMtdParam._m0[17u].y - _372)) + _372;
    float _522 = (_513 * (cbMtdParam._m0[17u].z - _373)) + _373;
    float _526 = (cbMtdParam._m0[19u].w * (_448.z - _421)) + _421;
    vec4 _539 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _546 = (_539.x * 2.0) + (-1.0);
    float _547 = (_539.y * 2.0) + (-1.0);
    float _548 = dot(vec2(_546, _547), vec2(_546, _547));
    float _3475 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _556 = ((_539.z - _526) * _513) + _526;
    float _566 = ((sqrt(1.0 - (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) - _432) * _513) + _432;
    float _569 = (((_546 - _460) * _513) + _460) + (cbMtdParam._m0[21u].x * _460);
    float _570 = (((_547 - _461) * _513) + _461) + (cbMtdParam._m0[21u].x * _461);
    float _575 = cbMtdParam._m0[22u].x + _448.w;
    float _578 = fma(_566, _216, fma(_570, _223, _569 * _209));
    float _581 = fma(_566, _217, fma(_570, _224, _569 * _210));
    float _584 = fma(_566, _218, fma(_570, _225, _569 * _211));
    float _588 = inversesqrt(dot(vec3(_578, _581, _584), vec3(_578, _581, _584)));
    float _589 = _588 * _578;
    float _590 = _588 * _581;
    float _591 = _588 * _584;
    float _3486 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _592 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _3497 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3508 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _3519 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3530 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _610 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _652 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _662 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _652);
    float _663 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _652);
    float _664 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _652);
    float _668 = inversesqrt(dot(vec3(_662, _663, _664), vec3(_662, _663, _664)));
    float _669 = _662 * _668;
    float _670 = _663 * _668;
    float _671 = _664 * _668;
    float _677 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _678 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _696 = fma(_591, cbSceneParam._m0[5u].z, fma(_590, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _589));
    float _699 = fma(_591, cbSceneParam._m0[6u].z, fma(_590, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _589));
    float _702 = fma(_591, cbSceneParam._m0[7u].z, fma(_590, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _589));
    uint _716 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _722 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)))) * cbInstanceData._m0[_716].x;
    float _723 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) * cbInstanceData._m0[_716].y;
    float _724 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) * cbInstanceData._m0[_716].z;
    float _3541 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    vec4 _736 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _677, cbSceneParam._m0[86u].y * _678));
    float _740 = ((isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * TEXCOORD_5.w) * _736.x;
    float _741 = dot(vec3(_589, _590, _591), vec3(_669, _670, _671));
    float _744 = _741 * 2.0;
    float _748 = (_744 * _589) - _669;
    float _749 = (_744 * _590) - _670;
    float _750 = (_744 * _591) - _671;
    float _754 = abs(dot(vec3(_669, _670, _671), vec3(_589, _590, _591)));
    float _3574 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _756 = sqrt(_592);
    float _769 = exp2((_756 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_756 * 3.0));
    float _801 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1110;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _835 = fma(_809, cbModelParam._m0[26u].z, fma(_805, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _801));
        float _839 = fma(_809, cbModelParam._m0[27u].z, fma(_805, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _801));
        float _843 = fma(_809, cbModelParam._m0[28u].z, fma(_805, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _801));
        float _868 = _801 + _589;
        float _869 = _805 + _590;
        float _870 = _809 + _591;
        float _880 = fma(_870, cbModelParam._m0[26u].z, fma(_869, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _868)) - _835;
        float _881 = fma(_870, cbModelParam._m0[27u].z, fma(_869, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _868)) - _839;
        float _882 = fma(_870, cbModelParam._m0[28u].z, fma(_869, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _868)) - _843;
        float _886 = inversesqrt(dot(vec3(_880, _881, _882), vec3(_880, _881, _882)));
        float _899 = ((_886 * _880) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_835 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_886 * _881) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_839 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _901 = ((_886 * _882) / cbModelParam._m0[34u].z) + ((((((_843 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_899, _900, _901), 0.0);
        float _938 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_904.x + (-0.5));
        float _940 = _938 * (_904.y + (-0.5));
        float _941 = _938 * (_904.z + (-0.5));
        float _948 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_911.x + (-0.5));
        float _950 = _948 * (_911.y + (-0.5));
        float _951 = _948 * (_911.z + (-0.5));
        float _958 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_918.x + (-0.5));
        float _960 = _958 * (_918.y + (-0.5));
        float _961 = _958 * (_918.z + (-0.5));
        float _968 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_925.x + (-0.5));
        float _970 = _968 * (_925.y + (-0.5));
        float _971 = _968 * (_925.z + (-0.5));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = _939 * 0.5;
        float _976 = _949 * 0.5;
        float _977 = _959 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _992 = (dot(vec3(_589, _590, _591), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1002 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3622 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_1004 + 1.0))) + _1009) * _972;
        float _1019 = _940 * 0.5;
        float _1020 = _950 * 0.5;
        float _1021 = _960 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_589, _590, _591), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3655 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1046 + 1.0))) + _1051) * _973;
        float _1061 = _941 * 0.5;
        float _1062 = _951 * 0.5;
        float _1063 = _961 * 0.5;
        float _1064 = dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063));
        float _1069 = (_1064 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1064);
        float _1077 = (dot(vec3(_589, _590, _591), vec3(_1069 * _1061, _1069 * _1062, _1069 * _1063)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1086 = sqrt(((_1062 * _1062) + (_1061 * _1061)) + (_1063 * _1063)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3688 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1088 + 1.0))) + _1093) * _974;
        _1110 = _941;
        _1112 = _940;
        _1113 = _939;
        _1114 = _951;
        _1115 = _950;
        _1116 = _949;
        _1117 = _961;
        _1118 = _960;
        _1119 = _959;
        _1120 = _974;
        _1121 = _973;
        _1122 = _972;
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
    }
    else
    {
        _1110 = _1111;
        _1112 = _1111;
        _1113 = _1111;
        _1114 = _1111;
        _1115 = _1111;
        _1116 = _1111;
        _1117 = _1111;
        _1118 = _1111;
        _1119 = _1111;
        _1120 = _1111;
        _1121 = _1111;
        _1122 = _1111;
        _1123 = 0.0;
        _1124 = 0.0;
        _1125 = 0.0;
    }
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1150 = fma(_809, cbModelParam._m0[30u].z, fma(_805, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _801));
        float _1154 = fma(_809, cbModelParam._m0[31u].z, fma(_805, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _801));
        float _1158 = fma(_809, cbModelParam._m0[32u].z, fma(_805, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _801));
        float _1181 = _801 + _589;
        float _1182 = _805 + _590;
        float _1183 = _809 + _591;
        float _1193 = fma(_1183, cbModelParam._m0[30u].z, fma(_1182, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1181)) - _1150;
        float _1194 = fma(_1183, cbModelParam._m0[31u].z, fma(_1182, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1181)) - _1154;
        float _1195 = fma(_1183, cbModelParam._m0[32u].z, fma(_1182, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1181)) - _1158;
        float _1199 = inversesqrt(dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195)));
        float _1212 = ((_1199 * _1193) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1150 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1199 * _1194) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1154 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1199 * _1195) / cbModelParam._m0[35u].z) + ((((((_1158 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        float _1249 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1216.x + (-0.5));
        float _1251 = _1249 * (_1216.y + (-0.5));
        float _1252 = _1249 * (_1216.z + (-0.5));
        float _1259 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1223.x + (-0.5));
        float _1261 = _1259 * (_1223.y + (-0.5));
        float _1262 = _1259 * (_1223.z + (-0.5));
        float _1269 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1230.x + (-0.5));
        float _1271 = _1269 * (_1230.y + (-0.5));
        float _1272 = _1269 * (_1230.z + (-0.5));
        float _1279 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1237.x + (-0.5));
        float _1281 = _1279 * (_1237.y + (-0.5));
        float _1282 = _1279 * (_1237.z + (-0.5));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = _1250 * 0.5;
        float _1287 = _1260 * 0.5;
        float _1288 = _1270 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_589, _590, _591), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3751 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1313 + 1.0))) + _1318) * _1283;
        float _1328 = _1251 * 0.5;
        float _1329 = _1261 * 0.5;
        float _1330 = _1271 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_589, _590, _591), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _3784 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1355 + 1.0))) + _1360) * _1284;
        float _1370 = _1252 * 0.5;
        float _1371 = _1262 * 0.5;
        float _1372 = _1272 * 0.5;
        float _1373 = dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372));
        float _1378 = (_1373 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1373);
        float _1386 = (dot(vec3(_589, _590, _591), vec3(_1378 * _1370, _1378 * _1371, _1378 * _1372)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1395 = sqrt(((_1371 * _1371) + (_1370 * _1370)) + (_1372 * _1372)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1397 = _1396 * 2.0;
        float _1401 = (1.0 - _1396) / (_1396 + 1.0);
        float _3817 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1411 = ((((1.0 - _1402) * (_1397 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1397 + 1.0))) + _1402) * _1285;
        _1419 = _1252;
        _1420 = _1251;
        _1421 = _1250;
        _1422 = _1262;
        _1423 = _1261;
        _1424 = _1260;
        _1425 = _1272;
        _1426 = _1271;
        _1427 = _1270;
        _1428 = _1285;
        _1429 = _1284;
        _1430 = _1283;
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)));
    }
    else
    {
        _1419 = _1111;
        _1420 = _1111;
        _1421 = _1111;
        _1422 = _1111;
        _1423 = _1111;
        _1424 = _1111;
        _1425 = _1111;
        _1426 = _1111;
        _1427 = _1111;
        _1428 = _1111;
        _1429 = _1111;
        _1430 = _1111;
        _1431 = 0.0;
        _1432 = 0.0;
        _1433 = 0.0;
    }
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1123)) + _1123;
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1124)) + _1124;
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1125)) + _1125;
    float _1466 = fma(_1445, cbSceneParam._m0[89u].z, fma(_1444, cbSceneParam._m0[89u].y, _1443 * cbSceneParam._m0[89u].x));
    float _1469 = fma(_1445, cbSceneParam._m0[90u].z, fma(_1444, cbSceneParam._m0[90u].y, _1443 * cbSceneParam._m0[90u].x));
    float _1472 = fma(_1445, cbSceneParam._m0[91u].z, fma(_1444, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1443));
    float _1487 = _748 * 0.5;
    float _1488 = _749 * 0.5;
    float _1489 = _750 * 0.5;
    float _1490 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1493 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1496 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1530;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1503 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1110, _1114, _1117, _1120));
        float _1507 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1112, _1115, _1118, _1121));
        float _1511 = dot(vec4(_1487, _1488, _1489, 1.0), vec4(_1113, _1116, _1119, _1122));
        float _1518 = dot(vec4(cbModelParam._m0[39u]), vec4(_1487, _1488, _1489, 1.0));
        _1530 = dot(vec3(isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1518) ? 0.0 : (isnan(0.0) ? _1518 : max(0.0, _1518))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1530 = 1.0;
    }
    float _1541;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1532 = dot(vec4(cbModelParam._m0[40u]), vec4(_1487, _1488, _1489, 1.0));
        _1541 = dot(vec3(isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1532) ? 0.0 : (isnan(0.0) ? _1532 : max(0.0, _1532))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1541 = 1.0;
    }
    float _1545 = (_1541 * cbModelParam._m0[1u].x) + (_1530 * (1.0 - cbModelParam._m0[1u].x));
    float _1555 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _592);
    float _1556 = isnan(_1555) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1555 : min(cbModelParam._m0[25u].z, _1555));
    float _1637;
    float _1639;
    float _1641;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1604 = fma(_809, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801)) + cbModelParam._m0[13u].w;
        float _1608 = fma(_809, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801)) + cbModelParam._m0[14u].w;
        float _1612 = fma(_809, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801)) + cbModelParam._m0[15u].w;
        float _1615 = fma(_750, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _748));
        float _1618 = fma(_750, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _748));
        float _1621 = fma(_750, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _748));
        float _1649;
        if (_1615 > 0.0)
        {
            _1649 = abs((1.0 - _1604) / _1615);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1604 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1649 = frontier_phi_14_12_ladder;
        }
        float _1871;
        if (_1618 > 0.0)
        {
            _1871 = abs((1.0 - _1608) / _1618);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1608 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1871 = frontier_phi_23_19_ladder;
        }
        float _2117;
        if (_1621 > 0.0)
        {
            _2117 = abs((1.0 - _1612) / _1621);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1612 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2117 = frontier_phi_35_30_ladder;
        }
        float _2119 = isnan(_1871) ? _1649 : (isnan(_1649) ? _1871 : min(_1649, _1871));
        float _2120 = isnan(_2117) ? _2119 : (isnan(_2119) ? _2117 : min(_2119, _2117));
        float _2124 = (_2120 * _1615) + _1604;
        float _2125 = (_2120 * _1618) + _1608;
        float _2126 = (_2120 * _1621) + _1612;
        float _2127 = _2120 * 9.9999997473787516355514526367188e-05;
        float _2129 = (-1.0) - _2127;
        float _2131 = _2127 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2126 > _2131) || ((_2126 < _2129) || ((_2125 > _2131) || ((_2125 < _2129) || ((_2124 < _2129) || (_2124 > _2131))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2250 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2126, cbModelParam._m0[9u].z, fma(_2125, cbModelParam._m0[9u].y, _2124 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2126, cbModelParam._m0[10u].z, fma(_2125, cbModelParam._m0[10u].y, _2124 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2126, cbModelParam._m0[11u].z, fma(_2125, cbModelParam._m0[11u].y, _2124 * cbModelParam._m0[11u].x))), _1556);
            frontier_phi_13_35_ladder = _2250.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2250.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2250.x * cbModelParam._m0[1u].y;
        }
        _1637 = frontier_phi_13_35_ladder_2;
        _1639 = frontier_phi_13_35_ladder_1;
        _1641 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1625 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_748, _749, _750), _1556);
        _1637 = _1625.x * cbModelParam._m0[1u].y;
        _1639 = _1625.y * cbModelParam._m0[1u].y;
        _1641 = _1625.z * cbModelParam._m0[1u].y;
    }
    float _1645 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _592);
    float _1646 = isnan(_1645) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1645 : min(cbModelParam._m0[25u].w, _1645));
    float _1736;
    float _1738;
    float _1740;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1700 = fma(_809, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801)) + cbModelParam._m0[21u].w;
        float _1704 = fma(_809, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801)) + cbModelParam._m0[22u].w;
        float _1708 = fma(_809, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801)) + cbModelParam._m0[23u].w;
        float _1711 = fma(_750, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _748));
        float _1714 = fma(_750, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _748));
        float _1717 = fma(_750, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _748));
        float _1876;
        if (_1711 > 0.0)
        {
            _1876 = abs((1.0 - _1700) / _1711);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1700 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1876 = frontier_phi_25_21_ladder;
        }
        float _2144;
        if (_1714 > 0.0)
        {
            _2144 = abs((1.0 - _1704) / _1714);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1704 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2144 = frontier_phi_37_32_ladder;
        }
        float _2349;
        if (_1717 > 0.0)
        {
            _2349 = abs((1.0 - _1708) / _1717);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1708 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2349 = frontier_phi_46_43_ladder;
        }
        float _2351 = isnan(_2144) ? _1876 : (isnan(_1876) ? _2144 : min(_1876, _2144));
        float _2352 = isnan(_2349) ? _2351 : (isnan(_2351) ? _2349 : min(_2351, _2349));
        float _2356 = (_2352 * _1711) + _1700;
        float _2357 = (_2352 * _1714) + _1704;
        float _2358 = (_2352 * _1717) + _1708;
        float _2359 = _2352 * 9.9999997473787516355514526367188e-05;
        float _2360 = (-1.0) - _2359;
        float _2362 = _2359 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2358 > _2362) || ((_2358 < _2360) || ((_2357 > _2362) || ((_2357 < _2360) || ((_2356 < _2360) || (_2356 > _2362))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2557 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2358, cbModelParam._m0[17u].z, fma(_2357, cbModelParam._m0[17u].y, _2356 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2358, cbModelParam._m0[18u].z, fma(_2357, cbModelParam._m0[18u].y, _2356 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2358, cbModelParam._m0[19u].z, fma(_2357, cbModelParam._m0[19u].y, _2356 * cbModelParam._m0[19u].x))), _1646);
            frontier_phi_22_46_ladder = _2557.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2557.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2557.x * cbModelParam._m0[1u].z;
        }
        _1736 = frontier_phi_22_46_ladder_2;
        _1738 = frontier_phi_22_46_ladder_1;
        _1740 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1720 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_748, _749, _750), _1646);
        _1736 = _1720.x * cbModelParam._m0[1u].z;
        _1738 = _1720.y * cbModelParam._m0[1u].z;
        _1740 = _1720.z * cbModelParam._m0[1u].z;
    }
    float _1752 = ((((1.0 - _769) * ((_756 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_769 * _756)) * _740;
    float _1753 = _1752 * ((cbModelParam._m0[1u].w * (_1736 - _1637)) + _1637);
    float _1754 = _1752 * ((cbModelParam._m0[1u].w * (_1738 - _1639)) + _1639);
    float _1755 = _1752 * ((cbModelParam._m0[1u].w * (_1740 - _1641)) + _1641);
    float _1758 = fma(_1755, cbSceneParam._m0[89u].z, fma(_1754, cbSceneParam._m0[89u].y, _1753 * cbSceneParam._m0[89u].x));
    float _1761 = fma(_1755, cbSceneParam._m0[90u].z, fma(_1754, cbSceneParam._m0[90u].y, _1753 * cbSceneParam._m0[90u].x));
    float _1764 = fma(_1755, cbSceneParam._m0[91u].z, fma(_1754, cbSceneParam._m0[91u].y, _1753 * cbSceneParam._m0[91u].x));
    vec4 _1772 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_677, _678));
    float _1774 = _1772.w;
    float _1786 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1774);
    float _1787 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1774);
    float _1788 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1774);
    uvec4 _1792 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1794 = _1792.x * 14u;
    uint _1795 = _1794 + 13u;
    float _1802 = _740 + (-1.0);
    float _1807 = (cbLight._m0[_1795].x * _1802) + 1.0;
    float _1808 = (cbLight._m0[_1795].y * _1802) + 1.0;
    float _1809 = (cbLight._m0[_1795].z * _1802) + 1.0;
    float _1810 = (cbLight._m0[_1795].w * _1802) + 1.0;
    uint _1811 = _1794 + 5u;
    float _1817 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
    uint _1821 = _1794 + 4u;
    float _1830 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
    uint _1834 = _1794 | 1u;
    float _1845 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_589, _590, _591));
    float _1848 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_589, _590, _591));
    float _3953 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _3964 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
    float _1853 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * 0.3183098733425140380859375;
    float _1855 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.3183098733425140380859375;
    float _1862 = ((cbLight._m0[_1811].x * _1817) * _1855) + (((cbLight._m0[_1821].x * _1786) * _1830) * _1853);
    float _1863 = ((_1817 * cbLight._m0[_1811].y) * _1855) + (((cbLight._m0[_1821].y * _1787) * _1830) * _1853);
    float _1864 = ((_1817 * cbLight._m0[_1811].z) * _1855) + (((cbLight._m0[_1821].z * _1788) * _1830) * _1853);
    uvec4 _1868 = floatBitsToUint(cbLight._m0[_1794 + 12u]);
    bool _1870 = _1868.x == 0u;
    float _1881;
    float _1883;
    float _1885;
    if (_1870)
    {
        _1881 = _1862;
        _1883 = _1863;
        _1885 = _1864;
    }
    else
    {
        uint _1889 = _1794 + 6u;
        float _1905 = (dot(vec3(cbLight._m0[_1794 + 2u].xyz), vec3(_589, _590, _591)) * 0.5) + 0.5;
        float _1906 = _1905 * _1905;
        float _3975 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1907 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1908 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _1881 = (((cbLight._m0[_1889].x * 0.3183098733425140380859375) * _1907) * _1908) + _1862;
        _1883 = (((cbLight._m0[_1889].y * 0.3183098733425140380859375) * _1907) * _1908) + _1863;
        _1885 = (((cbLight._m0[_1889].z * 0.3183098733425140380859375) * _1907) * _1908) + _1864;
    }
    bool _1888 = _1868.y == 0u;
    float _1926;
    float _1928;
    float _1930;
    if (_1888)
    {
        _1926 = _1881;
        _1928 = _1883;
        _1930 = _1885;
    }
    else
    {
        uint _2088 = _1794 + 7u;
        float _2104 = (dot(vec3(cbLight._m0[_1794 + 3u].xyz), vec3(_589, _590, _591)) * 0.5) + 0.5;
        float _2105 = _2104 * _2104;
        float _3991 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2106 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2107 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
        _1926 = (((cbLight._m0[_2088].x * 0.3183098733425140380859375) * _2106) * _2107) + _1881;
        _1928 = (((cbLight._m0[_2088].y * 0.3183098733425140380859375) * _2106) * _2107) + _1883;
        _1930 = (((cbLight._m0[_2088].z * 0.3183098733425140380859375) * _2106) * _2107) + _1885;
    }
    uint _1933 = _1794 + 8u;
    float _1946 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1794].w)) * _592) * 0.949999988079071044921875);
    float _1947 = _1946 * _1946;
    float _1948 = cbLight._m0[_1794].x + _669;
    float _1949 = cbLight._m0[_1794].y + _670;
    float _1950 = cbLight._m0[_1794].z + _671;
    float _1954 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
    float _1955 = _1954 * _1948;
    float _1956 = _1954 * _1949;
    float _1957 = _1954 * _1950;
    float _1958 = dot(vec3(_589, _590, _591), vec3(cbLight._m0[_1794].xyz));
    float _4007 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1961 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _1962 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _1963 = dot(vec3(_589, _590, _591), vec3(_1955, _1956, _1957));
    float _4029 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _1967 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_1955, _1956, _1957));
    float _4040 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1971 = _1947 * _1947;
    float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
    float _1986 = (exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1987 = 1.0 - _1947;
    float _1998 = (0.5 / (((_1962 * ((_1961 * _1987) + _1947)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _1987) + _1947) * _1961))) * _1961;
    float _4051 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2000 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
    uint _2014 = _1794 + 9u;
    float _2025 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _592) * 0.949999988079071044921875);
    float _2026 = _2025 * _2025;
    float _2027 = cbLight._m0[_1834].x + _669;
    float _2028 = cbLight._m0[_1834].y + _670;
    float _2029 = cbLight._m0[_1834].z + _671;
    float _2033 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
    float _2034 = _2033 * _2027;
    float _2035 = _2033 * _2028;
    float _2036 = _2033 * _2029;
    float _2037 = dot(vec3(_589, _590, _591), vec3(cbLight._m0[_1834].xyz));
    float _4062 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _2041 = dot(vec3(_589, _590, _591), vec3(_2034, _2035, _2036));
    float _4073 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _2045 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_2034, _2035, _2036));
    float _4084 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2049 = _2026 * _2026;
    float _2053 = ((_2044 * _2044) * (_2049 + (-1.0))) + 1.0;
    float _2062 = (exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2063 = 1.0 - _2026;
    float _2073 = (0.5 / (((_1962 * ((_2040 * _2063) + _2026)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _2063) + _2026) * _2040))) * _2040;
    float _4095 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2075 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2049 / ((_2053 * _2053) * 3.141590118408203125));
    float _2085 = (((_2062 * cbLight._m0[_2014].x) * _2075) * _1817) + ((((cbLight._m0[_1933].x * _1786) * _1986) * _2000) * _1830);
    float _2086 = (((_2062 * cbLight._m0[_2014].y) * _2075) * _1817) + ((((cbLight._m0[_1933].y * _1787) * _1986) * _2000) * _1830);
    float _2087 = (((_2062 * cbLight._m0[_2014].z) * _2075) * _1817) + ((((cbLight._m0[_1933].z * _1788) * _1986) * _2000) * _1830);
    float _2149;
    float _2151;
    float _2153;
    if (_1870)
    {
        _2149 = _2085;
        _2151 = _2086;
        _2153 = _2087;
    }
    else
    {
        uint _2155 = _1794 + 2u;
        uint _2159 = _1794 + 10u;
        float _2173 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _592) * 0.949999988079071044921875);
        float _2174 = _2173 * _2173;
        float _2175 = cbLight._m0[_2155].x + _669;
        float _2176 = cbLight._m0[_2155].y + _670;
        float _2177 = cbLight._m0[_2155].z + _671;
        float _2181 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
        float _2182 = _2181 * _2175;
        float _2183 = _2181 * _2176;
        float _2184 = _2181 * _2177;
        float _2185 = dot(vec3(_589, _590, _591), vec3(cbLight._m0[_2155].xyz));
        float _4106 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2189 = dot(vec3(_589, _590, _591), vec3(_2182, _2183, _2184));
        float _4117 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2193 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2182, _2183, _2184));
        float _4128 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2197 = _2174 * _2174;
        float _2201 = ((_2192 * _2192) * (_2197 + (-1.0))) + 1.0;
        float _2210 = (exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2211 = 1.0 - _2174;
        float _2221 = (0.5 / (((_1962 * ((_2188 * _2211) + _2174)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _2211) + _2174) * _2188))) * _2188;
        float _4139 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2223 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2197 / ((_2201 * _2201) * 3.141590118408203125));
        float _2224 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _2149 = (((_2210 * cbLight._m0[_2159].x) * _2223) * _2224) + _2085;
        _2151 = (((_2210 * cbLight._m0[_2159].y) * _2223) * _2224) + _2086;
        _2153 = (((_2210 * cbLight._m0[_2159].z) * _2223) * _2224) + _2087;
    }
    float _2259;
    float _2261;
    float _2263;
    if (_1888)
    {
        _2259 = _2149;
        _2261 = _2151;
        _2263 = _2153;
    }
    else
    {
        uint _2270 = _1794 + 3u;
        uint _2274 = _1794 + 11u;
        float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2270].w)) * _592) * 0.949999988079071044921875);
        float _2289 = _2288 * _2288;
        float _2290 = cbLight._m0[_2270].x + _669;
        float _2291 = cbLight._m0[_2270].y + _670;
        float _2292 = cbLight._m0[_2270].z + _671;
        float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
        float _2297 = _2296 * _2290;
        float _2298 = _2296 * _2291;
        float _2299 = _2296 * _2292;
        float _2300 = dot(vec3(_589, _590, _591), vec3(cbLight._m0[_2270].xyz));
        float _4155 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2304 = dot(vec3(_589, _590, _591), vec3(_2297, _2298, _2299));
        float _4166 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _2308 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_2297, _2298, _2299));
        float _4177 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2312 = _2289 * _2289;
        float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
        float _2325 = (exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2326 = 1.0 - _2289;
        float _2336 = (0.5 / (((_1962 * ((_2303 * _2326) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_1962 * _2326) + _2289) * _2303))) * _2303;
        float _4188 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2338 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
        float _2339 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
        _2259 = (((_2325 * cbLight._m0[_2274].x) * _2338) * _2339) + _2149;
        _2261 = (((_2325 * cbLight._m0[_2274].y) * _2338) * _2339) + _2151;
        _2263 = (((_2325 * cbLight._m0[_2274].z) * _2338) * _2339) + _2153;
    }
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    if (_1792.y == 0u)
    {
        float _2414 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2415 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2414;
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2414;
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2414;
        uvec4 _2429 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2430 = _2429.x;
        uint _2441 = uint((float(_2429.y) * floor(float(uint(cbSceneParam._m0[85u].y * _678) / _2430))) + floor(float(uint(cbSceneParam._m0[85u].x * _677) / _2430)));
        float _2451 = (log2(_2417 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2452 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        uint _2455 = uint(isnan(14.0) ? _2452 : (isnan(_2452) ? 14.0 : min(_2452, 14.0)));
        uvec4 _2460 = texelFetch(g_lightClusterGridBuffer, int(((_2455 << 2u) + (_2441 << 6u)) >> 2u));
        uint _2461 = _2460.x;
        uint _2462 = _2429.z;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        if (((((1u << ((_2462 >> 4u) & 15u)) + 4294967295u) & _2461) == 0u) || ((_2462 & 240u) == 0u))
        {
            _2562 = 0.0;
            _2564 = 0.0;
            _2566 = 0.0;
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
        }
        else
        {
            float _2563;
            float _2565;
            float _2567;
            float _2569;
            float _2571;
            float _2573;
            float _2707 = 0.0;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            uint _2713 = 0u;
            uint _2722;
            bool _2723;
            for (;;)
            {
                _2722 = texelFetch(g_lightClassification, int((((_2455 << 5u) + (_2441 << 9u)) + (_2713 << 2u)) >> 2u)).x;
                _2723 = _2722 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2723)
                {
                    frontier_phi_61_pred = _2707;
                    frontier_phi_61_pred_1 = _2712;
                    frontier_phi_61_pred_2 = _2711;
                    frontier_phi_61_pred_3 = _2710;
                    frontier_phi_61_pred_4 = _2709;
                    frontier_phi_61_pred_5 = _2708;
                }
                else
                {
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    uint _2837;
                    _2831 = _2707;
                    _2832 = _2708;
                    _2833 = _2709;
                    _2834 = _2710;
                    _2835 = _2711;
                    _2836 = _2712;
                    _2837 = _2722;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    for (;;)
                    {
                        uint _2841 = uint(findLSB(_2837)) + (_2713 << 5u);
                        uint _2838 = (_2837 + 4294967295u) & _2837;
                        uint _2843 = _2841 * 48u;
                        vec4 _2857 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 3u)).x));
                        uint _2863 = (_2841 * 48u) + 4u;
                        vec4 _2876 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2863)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2863 + 3u)).x));
                        uint _2882 = (_2841 * 48u) + 8u;
                        vec3 _2893 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x));
                        float _2897 = _2857.x - _2415;
                        float _2898 = _2857.y - _2416;
                        float _2899 = _2857.z - _2417;
                        float _2900 = dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899));
                        float _2903 = inversesqrt(_2900);
                        float _2904 = _2903 * _2897;
                        float _2905 = _2903 * _2898;
                        float _2906 = _2903 * _2899;
                        float _2907 = dot(vec3(_696, _699, _702), vec3(_2904, _2905, _2906));
                        float _2912 = 1.0 - (_2900 * _2857.w);
                        float _4214 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2913 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2914 = sqrt(_2900) * _2876.w;
                        float _2917 = 1.39999997615814208984375 / (_2914 + 1.39999997615814208984375);
                        float _2918 = _2917 * _2917;
                        float _2921 = ((1.0 - _2918) * _2907) + _2918;
                        float _2924 = _2914 * _2914;
                        float _2928 = ((isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0))) * _2913) / ((_2924 * 0.699999988079071044921875) + 1.0);
                        float _2932 = (-0.0) - _2415;
                        float _2933 = (-0.0) - _2416;
                        float _2934 = (-0.0) - _2417;
                        float _2938 = inversesqrt(dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934)));
                        float _2939 = _2938 * _2932;
                        float _2940 = _2938 * _2933;
                        float _2941 = _2938 * _2934;
                        float _2949 = exp2(log2(1.0 / ((_2924 * 3.5) + 5.0)) * 0.25);
                        float _2950 = 1.0 - _756;
                        float _2957 = sqrt(1.0 - ((1.0 - (_2950 * _2950)) * (1.0 - (_2949 * _2949))));
                        float _2958 = _2957 * _2957;
                        float _2959 = _2958 * _2958;
                        float _2960 = _2939 + _2904;
                        float _2961 = _2940 + _2905;
                        float _2962 = _2941 + _2906;
                        float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
                        float _2970 = dot(vec3(_696, _699, _702), vec3(_2939, _2940, _2941));
                        float _4230 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2973 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2974 = dot(vec3(_696, _699, _702), vec3(_2966 * _2960, _2966 * _2961, _2966 * _2962));
                        float _4241 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2977 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2981 = ((_2977 * _2977) * (_2959 + (-1.0))) + 1.0;
                        float _2982 = _2917 * _2958;
                        float _2983 = _2982 * _2982;
                        float _2986 = ((1.0 - _2983) * _2907) + _2983;
                        float _4252 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2987 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2988 = 1.0 - _2958;
                        float _2998 = (0.5 / (((_2987 * ((_2973 * _2988) + _2958)) + 9.9999999392252902907785028219223e-09) + (((_2987 * _2988) + _2958) * _2973))) * _2987;
                        float _4263 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _3009 = (((_2959 * 3.1415927410125732421875) * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) / ((_2981 * _2981) * ((_2924 * 2.1991131305694580078125) + 3.141590118408203125))) * _2913;
                        _2766 = (_2928 * _2876.x) + _2834;
                        _2767 = (_2928 * _2876.y) + _2835;
                        _2768 = (_2928 * _2876.z) + _2836;
                        _2763 = (_3009 * _2893.x) + _2831;
                        _2764 = (_3009 * _2893.y) + _2832;
                        _2765 = (_3009 * _2893.z) + _2833;
                        if (_2838 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2831 = _2763;
                            _2832 = _2764;
                            _2833 = _2765;
                            _2834 = _2766;
                            _2835 = _2767;
                            _2836 = _2768;
                            _2837 = _2838;
                        }
                    }
                    frontier_phi_61_pred = _2763;
                    frontier_phi_61_pred_1 = _2768;
                    frontier_phi_61_pred_2 = _2767;
                    frontier_phi_61_pred_3 = _2766;
                    frontier_phi_61_pred_4 = _2765;
                    frontier_phi_61_pred_5 = _2764;
                }
                _2563 = frontier_phi_61_pred;
                _2573 = frontier_phi_61_pred_1;
                _2571 = frontier_phi_61_pred_2;
                _2569 = frontier_phi_61_pred_3;
                _2567 = frontier_phi_61_pred_4;
                _2565 = frontier_phi_61_pred_5;
                uint _2714 = _2713 + 1u;
                if (_2714 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2707 = _2563;
                    _2708 = _2565;
                    _2709 = _2567;
                    _2710 = _2569;
                    _2711 = _2571;
                    _2712 = _2573;
                    _2713 = _2714;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2562 = _2563;
            _2564 = _2565;
            _2566 = _2567;
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
        }
        uvec4 _2576 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2577 = _2576.z;
        uint _2579 = (_2577 >> 8u) & 15u;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        if (((4294967295u << _2579) & _2461) == 0u)
        {
            _2675 = _2562;
            _2677 = _2564;
            _2679 = _2566;
            _2681 = _2568;
            _2683 = _2570;
            _2685 = _2572;
        }
        else
        {
            float _2700 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
            float _2701 = _2700 * _2415;
            float _2702 = _2700 * _2416;
            float _2703 = _2700 * _2417;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2579 < ((_2577 >> 12u) & 15u))
            {
                float _2676;
                float _2678;
                float _2680;
                float _2682;
                float _2684;
                float _2686;
                float _2814 = _2562;
                float _2815 = _2564;
                float _2816 = _2566;
                float _2817 = _2568;
                float _2818 = _2570;
                float _2819 = _2572;
                uint _2820 = _2579;
                uint _2829;
                bool _2830;
                for (;;)
                {
                    _2829 = texelFetch(g_lightClassification, int((((_2455 << 5u) + (_2441 << 9u)) + (_2820 << 2u)) >> 2u)).x;
                    _2830 = _2829 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2830)
                    {
                        frontier_phi_67_pred = _2817;
                        frontier_phi_67_pred_1 = _2818;
                        frontier_phi_67_pred_2 = _2819;
                        frontier_phi_67_pred_3 = _2816;
                        frontier_phi_67_pred_4 = _2815;
                        frontier_phi_67_pred_5 = _2814;
                    }
                    else
                    {
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3027 = _2814;
                        float _3028 = _2815;
                        float _3029 = _2816;
                        float _3030 = _2817;
                        float _3031 = _2818;
                        float _3032 = _2819;
                        uint _3033 = _2829;
                        uint _3034;
                        vec4 _3059;
                        float _3060;
                        vec4 _3075;
                        vec3 _3087;
                        vec4 _3102;
                        vec4 _3118;
                        float _3164;
                        bool _3165;
                        for (;;)
                        {
                            uint _3044 = ((_2820 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3033));
                            _3034 = (_3033 + 4294967295u) & _3033;
                            uint _3046 = _3044 * 40u;
                            _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            _3060 = _3059.w;
                            uint _3062 = (_3044 * 40u) + 4u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            uint _3077 = (_3044 * 40u) + 8u;
                            _3087 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x));
                            uint _3089 = (_3044 * 40u) + 16u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3105 = (_3044 * 40u) + 20u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3120 = (_3044 * 40u) + 24u;
                            vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3139 = (_3044 * 40u) + 28u;
                            vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            _3164 = fma(_2417, _3152.z, fma(_2416, _3152.y, _3152.x * _2415)) + _3152.w;
                            _3165 = !((fma(_2417, _3133.z, fma(_2416, _3133.y, _3133.x * _2415)) + _3133.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3165)
                            {
                                float _3192 = _3059.x - _2415;
                                float _3193 = _3059.y - _2416;
                                float _3194 = _3059.z - _2417;
                                float _3195 = dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194));
                                float _3198 = inversesqrt(_3195);
                                float _3199 = _3198 * _3192;
                                float _3200 = _3198 * _3193;
                                float _3201 = _3198 * _3194;
                                float _3205 = 1.0 - (_3195 / (_3060 * _3060));
                                float _4274 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3206 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3210 = sqrt(_3195) * _3075.w;
                                float _3212 = 1.39999997615814208984375 / (_3210 + 1.39999997615814208984375);
                                float _3213 = _3212 * _3212;
                                float _3216 = ((1.0 - _3213) * dot(vec3(_3199, _3200, _3201), vec3(_696, _699, _702))) + _3213;
                                float _3219 = _3210 * _3210;
                                float _3223 = (fma(_2417, _3102.z, fma(_2416, _3102.y, _3102.x * _2415)) + _3102.w) / _3164;
                                float _3224 = (fma(_2417, _3118.z, fma(_2416, _3118.y, _3118.x * _2415)) + _3118.w) / _3164;
                                float _3228 = 1.0 - dot(vec2(_3223, _3224), vec2(_3223, _3224));
                                float _4290 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3229 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3230 = _3229 * (((isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0))) * _3206) / ((_3219 * 0.699999988079071044921875) + 1.0));
                                float _3242 = exp2(log2(1.0 / ((_3219 * 3.5) + 5.0)) * 0.25);
                                float _3243 = 1.0 - _756;
                                float _3250 = sqrt(1.0 - ((1.0 - (_3243 * _3243)) * (1.0 - (_3242 * _3242))));
                                float _3251 = _3250 * _3250;
                                float _3252 = _3251 * _3251;
                                float _3253 = _3199 - _2701;
                                float _3254 = _3200 - _2702;
                                float _3255 = _3201 - _2703;
                                float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                                float _3263 = dot(vec3(_696, _699, _702), vec3((-0.0) - _2701, (-0.0) - _2702, (-0.0) - _2703));
                                float _4301 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3266 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3267 = dot(vec3(_696, _699, _702), vec3(_3259 * _3253, _3259 * _3254, _3259 * _3255));
                                float _4312 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3270 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3274 = ((_3270 * _3270) * (_3252 + (-1.0))) + 1.0;
                                float _3275 = _3212 * _3251;
                                float _3276 = _3275 * _3275;
                                float _3282 = ((1.0 - _3276) * dot(vec3(_696, _699, _702), vec3(_3199, _3200, _3201))) + _3276;
                                float _4323 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3284 = 1.0 - _3251;
                                float _3294 = (0.5 / (((_3283 * ((_3266 * _3284) + _3251)) + 9.9999999392252902907785028219223e-09) + (((_3283 * _3284) + _3251) * _3266))) * _3283;
                                float _4334 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3304 = (_3229 * _3206) * (((_3252 * 3.1415927410125732421875) * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) / ((_3274 * _3274) * ((_3219 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3304 * _3087.x;
                                frontier_phi_73_pred_1 = _3304 * _3087.y;
                                frontier_phi_73_pred_2 = _3230 * _3075.z;
                                frontier_phi_73_pred_3 = _3230 * _3075.y;
                                frontier_phi_73_pred_4 = _3230 * _3075.x;
                                frontier_phi_73_pred_5 = _3304 * _3087.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3308 = frontier_phi_73_pred;
                            _3309 = frontier_phi_73_pred_1;
                            _3313 = frontier_phi_73_pred_2;
                            _3312 = frontier_phi_73_pred_3;
                            _3311 = frontier_phi_73_pred_4;
                            _3310 = frontier_phi_73_pred_5;
                            _3017 = _3311 + _3030;
                            _3018 = _3312 + _3031;
                            _3019 = _3313 + _3032;
                            _3014 = _3308 + _3027;
                            _3015 = _3309 + _3028;
                            _3016 = _3310 + _3029;
                            if (_3034 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3034;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3017;
                        frontier_phi_67_pred_1 = _3018;
                        frontier_phi_67_pred_2 = _3019;
                        frontier_phi_67_pred_3 = _3016;
                        frontier_phi_67_pred_4 = _3015;
                        frontier_phi_67_pred_5 = _3014;
                    }
                    _2682 = frontier_phi_67_pred;
                    _2684 = frontier_phi_67_pred_1;
                    _2686 = frontier_phi_67_pred_2;
                    _2680 = frontier_phi_67_pred_3;
                    _2678 = frontier_phi_67_pred_4;
                    _2676 = frontier_phi_67_pred_5;
                    uint _2821 = _2820 + 1u;
                    if (_2821 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2814 = _2676;
                        _2815 = _2678;
                        _2816 = _2680;
                        _2817 = _2682;
                        _2818 = _2684;
                        _2819 = _2686;
                        _2820 = _2821;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2684;
                frontier_phi_55_56_ladder_1 = _2686;
                frontier_phi_55_56_ladder_2 = _2682;
                frontier_phi_55_56_ladder_3 = _2680;
                frontier_phi_55_56_ladder_4 = _2678;
                frontier_phi_55_56_ladder_5 = _2676;
            }
            else
            {
                frontier_phi_55_56_ladder = _2570;
                frontier_phi_55_56_ladder_1 = _2572;
                frontier_phi_55_56_ladder_2 = _2568;
                frontier_phi_55_56_ladder_3 = _2566;
                frontier_phi_55_56_ladder_4 = _2564;
                frontier_phi_55_56_ladder_5 = _2562;
            }
            _2675 = frontier_phi_55_56_ladder_5;
            _2677 = frontier_phi_55_56_ladder_4;
            _2679 = frontier_phi_55_56_ladder_3;
            _2681 = frontier_phi_55_56_ladder_2;
            _2683 = frontier_phi_55_56_ladder;
            _2685 = frontier_phi_55_56_ladder_1;
        }
        float _2690 = isnan(1.0) ? _740 : (isnan(_740) ? 1.0 : min(_740, 1.0));
        _2474 = (_2690 * _2681) + _1926;
        _2476 = (_2690 * _2683) + _1928;
        _2478 = (_2690 * _2685) + _1930;
        _2480 = ((_2675 * 0.039999999105930328369140625) * _2690) + _2259;
        _2482 = ((_2677 * 0.039999999105930328369140625) * _2690) + _2261;
        _2484 = ((_2679 * 0.039999999105930328369140625) * _2690) + _2263;
    }
    else
    {
        _2474 = _1926;
        _2476 = _1928;
        _2478 = _1930;
        _2480 = _2259;
        _2482 = _2261;
        _2484 = _2263;
    }
    float _4350 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4361 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4372 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    uint _2504 = _228 + 6u;
    float _2512 = _677 / cbSceneParam._m0[86u].x;
    float _2513 = _678 / cbSceneParam._m0[86u].y;
    vec4 _2527 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2512, _2513, (log2((isnan(cbSceneParam._m0[77u].w) ? _610 : (isnan(_610) ? cbSceneParam._m0[77u].w : min(_610, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2529 = _2527.x;
    float _2530 = _2527.y;
    float _2531 = _2527.z;
    float _2532 = _2527.w;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    if (_610 > cbSceneParam._m0[78u].w)
    {
        float _2587 = isnan(_610) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _610 : min(cbSceneParam._m0[80u].w, _610));
        float _2588 = _2587 / _610;
        float _2599 = _2588 * _662;
        float _2600 = _663 * _2588;
        float _2601 = (-0.0) - _2600;
        float _2603 = _2588 * _664;
        float _2605 = (cbSceneParam._m0[77u].w * _2601) / _2587;
        float _2606 = _2605 + cbSceneParam._m0[79u].w;
        float _2607 = cbSceneParam._m0[79u].w - _2600;
        float _2613 = sqrt(((_2599 * _2599) + (_2600 * _2600)) + (_2603 * _2603));
        float _2616 = (1.0 - (cbSceneParam._m0[77u].w / _2587)) * _2613;
        float _2621 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2623 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2776;
        if (abs((_2601 - _2605) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2776 = ((((_2606 > 0.0) ? exp2(_2621 * _2606) : (2.0 - exp2(_2623 * _2606))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2616;
        }
        else
        {
            float _2736 = 1.0 / cbSceneParam._m0[80u].x;
            float _2737 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : max(_2606, _2607));
            float _2738 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : min(_2606, _2607));
            float _2747 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : min(_2737, 0.0));
            float _2748 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : min(_2738, 0.0));
            _2776 = ((abs(_2613 / _2601) * cbSceneParam._m0[80u].y) * ((((_2747 - _2748) * 2.0) - ((exp2(_2621 * (isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0)))) - exp2(_2621 * (isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0))))) * _2736)) - ((exp2(_2623 * _2747) - exp2(_2623 * _2748)) * _2736))) + (_2616 * cbSceneParam._m0[80u].z);
        }
        vec4 _2778 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2512, _2513, 1.0), 0.0);
        float _2787 = exp2((_2776 * (-1.44269502162933349609375)) * (1.0 - _2778.w));
        float _2788 = log2(_2787);
        float _2804 = log2(_2532);
        _2625 = (exp2(_2804 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2788 * cbSceneParam._m0[78u].x)) * _2778.x) / cbSceneParam._m0[78u].x)) + _2529;
        _2627 = (exp2(_2804 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2788 * cbSceneParam._m0[78u].y)) * _2778.y) / cbSceneParam._m0[78u].y)) + _2530;
        _2629 = (exp2(_2804 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2788 * cbSceneParam._m0[78u].z)) * _2778.z) / cbSceneParam._m0[78u].z)) + _2531;
        _2631 = _2787 * _2532;
    }
    else
    {
        _2625 = _2529;
        _2627 = _2530;
        _2629 = _2531;
        _2631 = _2532;
    }
    float _2643 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2644 = _2643 == 3.0;
    float _2645 = log2(_2631);
    float _2652 = exp2(_2645 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2474 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _740))) + ((_2480 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1545)) * cbPerFrame._m0[3u].x));
    float _2653 = exp2(_2645 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2476 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _740))) + ((_2482 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1545)) * cbPerFrame._m0[3u].x));
    float _2654 = exp2(_2645 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2478 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _740))) + ((_2484 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1545)) * cbPerFrame._m0[3u].x));
    float _2663 = (_2643 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2663 * (_2644 ? _2652 : (_2652 + (cbSceneParam._m0[72u].w * _2625)));
    SV_Target.y = _2663 * (_2644 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2627)));
    SV_Target.z = _2663 * (_2644 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2629)));
    SV_Target.w = cbInstanceData._m0[_2504].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2504].w;
}


