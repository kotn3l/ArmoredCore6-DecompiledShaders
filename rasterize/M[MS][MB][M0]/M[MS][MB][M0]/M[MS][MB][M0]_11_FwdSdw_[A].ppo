#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1177;
float _3822;
float _3823;
float _3824;
float _3825;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3834 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3845 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3856 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _286) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _287) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _328 = _323.x * cbMtdParam._m0[9u].x;
    float _329 = _323.y * cbMtdParam._m0[9u].y;
    float _330 = _323.z * cbMtdParam._m0[9u].z;
    float _334 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _300.x) * _328;
    float _337 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _300.y) * _329;
    float _340 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _300.z) * _330;
    float _347 = ((_328 - _334) * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) + _334;
    float _348 = ((_329 - _337) * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) + _337;
    float _349 = ((_330 - _340) * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) + _340;
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _286) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _287) + cbTextureTilingScale._m0[20u].w));
    vec4 _388 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _392 = _388.z;
    float _396 = (_388.x * 2.0) + (-1.0);
    float _397 = (_388.y * 2.0) + (-1.0);
    float _398 = dot(vec2(_396, _397), vec2(_396, _397));
    float _3867 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _403 = sqrt(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))));
    float _408 = _396 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_362.x * 2.0) + (-1.0)));
    float _409 = _397 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_362.y * 2.0) + (-1.0)));
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _424 = _422.x;
    float _425 = 1.0 - _424;
    float _456 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_424 - _425) * cbMtdParam._m0[24u].w) + _425) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3878 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _465 = ((((cbMtdParam._m0[10u].x - _347) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _457) + _347;
    float _466 = ((((cbMtdParam._m0[10u].y - _348) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _457) + _348;
    float _467 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _349)) * _457) + _349;
    float _472 = (((_362.z - _392) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _392;
    float _476 = ((cbMtdParam._m0[23u].y - _472) * _457) + _472;
    vec4 _498 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _500 = _498.x;
    float _501 = _498.y;
    float _510 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_236, _237, _238, 0.0));
    vec4 _525 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _286) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _287) + cbTextureTilingScale._m0[18u].w));
    float _527 = _525.x;
    float _532 = fract(_525.w + cbPerFrame._m0[22u].x);
    float _534 = (1.0 - _532) * _527;
    float _539 = ((_532 + (-1.0)) + _527) * 9.0;
    float _541 = ((_527 + (-1.0)) + _532) * 9.0;
    float _542 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _543 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _557 = (_534 * ((_525.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _542 : (isnan(_542) ? 3.0 : min(_542, 3.0))) * 3.1415927410125732421875);
    float _559 = (_534 * ((_525.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _543 : (isnan(_543) ? 3.0 : min(_543, 3.0))) * 3.1415927410125732421875);
    float _563 = inversesqrt(dot(vec3(_557, _559, 1.0), vec3(_557, _559, 1.0)));
    float _579 = (((((0.5 - _500) + ((_557 * 0.5) * _563)) * _510) + _500) * 2.0) + (-1.0);
    float _580 = (((((0.5 - _501) + ((_563 * 0.5) * _559)) * _510) + _501) * 2.0) + (-1.0);
    float _581 = dot(vec2(_579, _580), vec2(_579, _580));
    float _3909 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _597 = ((((cbMtdParam._m0[22u].z * _408) - _408) + _579) * _457) + _408;
    float _598 = ((((cbMtdParam._m0[22u].z * _409) - _409) + _580) * _457) + _409;
    float _599 = (_457 * (sqrt(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) - _403)) + _403;
    float _601 = cbMtdParam._m0[22u].x + _388.w;
    float _604 = fma(_599, _236, fma(_598, _242 * TANGENT.x, (_228 * _220) * _597));
    float _607 = fma(_599, _237, fma(_598, _242 * TANGENT.y, (_228 * _221) * _597));
    float _610 = fma(_599, _238, fma(_598, _242 * TANGENT.z, (_228 * _222) * _597));
    float _614 = inversesqrt(dot(vec3(_604, _607, _610), vec3(_604, _607, _610)));
    float _615 = _614 * _604;
    float _616 = _614 * _607;
    float _617 = _614 * _610;
    float _3920 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _618 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3942 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3953 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3964 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _636 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _687 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _677);
    float _688 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _677);
    float _689 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _677);
    float _693 = inversesqrt(dot(vec3(_687, _688, _689), vec3(_687, _688, _689)));
    float _694 = _687 * _693;
    float _695 = _688 * _693;
    float _696 = _689 * _693;
    vec4 _701 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _703 = _701.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _859 = sqrt(((_687 * _687) + (_688 * _688)) + (_689 * _689));
        float _865 = (cbMatDynParam._m0[5u].x * _859) + cbMatDynParam._m0[5u].y;
        float _3975 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _870 = (cbMatDynParam._m0[5u].z * _859) + cbMatDynParam._m0[5u].w;
        float _3986 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) - _866)) + _866) < ((_703 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _715 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _716 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _736 = fma(_617, cbSceneParam._m0[5u].z, fma(_616, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _615));
    float _739 = fma(_617, cbSceneParam._m0[6u].z, fma(_616, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _615));
    float _742 = fma(_617, cbSceneParam._m0[7u].z, fma(_616, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _615));
    uint _755 = _267 + 9u;
    uint _756 = _755 + uint(cbMatDynParam._m0[0u].w);
    float _762 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * cbInstanceData._m0[_756].x;
    float _763 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * cbInstanceData._m0[_756].y;
    float _764 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * cbInstanceData._m0[_756].z;
    float _3997 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    vec4 _776 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _715, cbSceneParam._m0[86u].y * _716));
    float _780 = ((isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * TEXCOORD_5.w) * _776.x;
    float _781 = dot(vec3(_615, _616, _617), vec3(_694, _695, _696));
    float _784 = _781 * 2.0;
    float _788 = (_784 * _615) - _694;
    float _789 = (_784 * _616) - _695;
    float _790 = (_784 * _617) - _696;
    float _794 = abs(dot(vec3(_694, _695, _696), vec3(_615, _616, _617)));
    float _4030 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _796 = sqrt(_618);
    float _808 = exp2((_796 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_796 * 3.0));
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1176;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _902 = fma(_848, cbModelParam._m0[26u].z, fma(_844, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _840));
        float _906 = fma(_848, cbModelParam._m0[27u].z, fma(_844, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _840));
        float _910 = fma(_848, cbModelParam._m0[28u].z, fma(_844, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _840));
        float _934 = _840 + _615;
        float _935 = _844 + _616;
        float _936 = _848 + _617;
        float _946 = fma(_936, cbModelParam._m0[26u].z, fma(_935, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _934)) - _902;
        float _947 = fma(_936, cbModelParam._m0[27u].z, fma(_935, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _934)) - _906;
        float _948 = fma(_936, cbModelParam._m0[28u].z, fma(_935, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _934)) - _910;
        float _952 = inversesqrt(dot(vec3(_946, _947, _948), vec3(_946, _947, _948)));
        float _965 = ((_952 * _946) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_902 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_952 * _947) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_906 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_952 * _948) / cbModelParam._m0[34u].z) + ((((((_910 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        float _1004 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_970.x + (-0.5));
        float _1006 = _1004 * (_970.y + (-0.5));
        float _1007 = _1004 * (_970.z + (-0.5));
        float _1014 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_977.x + (-0.5));
        float _1016 = _1014 * (_977.y + (-0.5));
        float _1017 = _1014 * (_977.z + (-0.5));
        float _1024 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_984.x + (-0.5));
        float _1026 = _1024 * (_984.y + (-0.5));
        float _1027 = _1024 * (_984.z + (-0.5));
        float _1034 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_991.x + (-0.5));
        float _1036 = _1034 * (_991.y + (-0.5));
        float _1037 = _1034 * (_991.z + (-0.5));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = _1005 * 0.5;
        float _1042 = _1015 * 0.5;
        float _1043 = _1025 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1058 = (dot(vec3(_615, _616, _617), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1068 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _4078 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1070 + 1.0))) + _1075) * _1038;
        float _1085 = _1006 * 0.5;
        float _1086 = _1016 * 0.5;
        float _1087 = _1026 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_615, _616, _617), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _4111 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1112 + 1.0))) + _1117) * _1039;
        float _1127 = _1007 * 0.5;
        float _1128 = _1017 * 0.5;
        float _1129 = _1027 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_615, _616, _617), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _4144 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1154 + 1.0))) + _1159) * _1040;
        _1176 = _1007;
        _1178 = _1006;
        _1179 = _1005;
        _1180 = _1017;
        _1181 = _1016;
        _1182 = _1015;
        _1183 = _1027;
        _1184 = _1026;
        _1185 = _1025;
        _1186 = _1040;
        _1187 = _1039;
        _1188 = _1038;
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1190 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1191 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
    }
    else
    {
        _1176 = _1177;
        _1178 = _1177;
        _1179 = _1177;
        _1180 = _1177;
        _1181 = _1177;
        _1182 = _1177;
        _1183 = _1177;
        _1184 = _1177;
        _1185 = _1177;
        _1186 = _1177;
        _1187 = _1177;
        _1188 = _1177;
        _1189 = 0.0;
        _1190 = 0.0;
        _1191 = 0.0;
    }
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1219 = fma(_848, cbModelParam._m0[30u].z, fma(_844, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _840));
        float _1223 = fma(_848, cbModelParam._m0[31u].z, fma(_844, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _840));
        float _1227 = fma(_848, cbModelParam._m0[32u].z, fma(_844, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _840));
        float _1250 = _840 + _615;
        float _1251 = _844 + _616;
        float _1252 = _848 + _617;
        float _1262 = fma(_1252, cbModelParam._m0[30u].z, fma(_1251, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1250)) - _1219;
        float _1263 = fma(_1252, cbModelParam._m0[31u].z, fma(_1251, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1250)) - _1223;
        float _1264 = fma(_1252, cbModelParam._m0[32u].z, fma(_1251, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1250)) - _1227;
        float _1268 = inversesqrt(dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264)));
        float _1281 = ((_1268 * _1262) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1219 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1268 * _1263) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1223 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1268 * _1264) / cbModelParam._m0[35u].z) + ((((((_1227 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        float _1318 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1285.x + (-0.5));
        float _1320 = _1318 * (_1285.y + (-0.5));
        float _1321 = _1318 * (_1285.z + (-0.5));
        float _1328 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1292.x + (-0.5));
        float _1330 = _1328 * (_1292.y + (-0.5));
        float _1331 = _1328 * (_1292.z + (-0.5));
        float _1338 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1299.x + (-0.5));
        float _1340 = _1338 * (_1299.y + (-0.5));
        float _1341 = _1338 * (_1299.z + (-0.5));
        float _1348 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1306.x + (-0.5));
        float _1350 = _1348 * (_1306.y + (-0.5));
        float _1351 = _1348 * (_1306.z + (-0.5));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = _1319 * 0.5;
        float _1356 = _1329 * 0.5;
        float _1357 = _1339 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_615, _616, _617), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _4207 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1382 + 1.0))) + _1387) * _1352;
        float _1397 = _1320 * 0.5;
        float _1398 = _1330 * 0.5;
        float _1399 = _1340 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_615, _616, _617), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4240 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1424 + 1.0))) + _1429) * _1353;
        float _1439 = _1321 * 0.5;
        float _1440 = _1331 * 0.5;
        float _1441 = _1341 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_615, _616, _617), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _4273 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1466 + 1.0))) + _1471) * _1354;
        _1488 = _1321;
        _1489 = _1320;
        _1490 = _1319;
        _1491 = _1331;
        _1492 = _1330;
        _1493 = _1329;
        _1494 = _1341;
        _1495 = _1340;
        _1496 = _1339;
        _1497 = _1354;
        _1498 = _1353;
        _1499 = _1352;
        _1500 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1501 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1502 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
    }
    else
    {
        _1488 = _1177;
        _1489 = _1177;
        _1490 = _1177;
        _1491 = _1177;
        _1492 = _1177;
        _1493 = _1177;
        _1494 = _1177;
        _1495 = _1177;
        _1496 = _1177;
        _1497 = _1177;
        _1498 = _1177;
        _1499 = _1177;
        _1500 = 0.0;
        _1501 = 0.0;
        _1502 = 0.0;
    }
    float _1512 = (cbModelParam._m0[1u].x * (_1500 - _1189)) + _1189;
    float _1513 = (cbModelParam._m0[1u].x * (_1501 - _1190)) + _1190;
    float _1514 = (cbModelParam._m0[1u].x * (_1502 - _1191)) + _1191;
    float _1535 = fma(_1514, cbSceneParam._m0[89u].z, fma(_1513, cbSceneParam._m0[89u].y, _1512 * cbSceneParam._m0[89u].x));
    float _1538 = fma(_1514, cbSceneParam._m0[90u].z, fma(_1513, cbSceneParam._m0[90u].y, _1512 * cbSceneParam._m0[90u].x));
    float _1541 = fma(_1514, cbSceneParam._m0[91u].z, fma(_1513, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1512));
    float _1556 = _788 * 0.5;
    float _1557 = _789 * 0.5;
    float _1558 = _790 * 0.5;
    float _1559 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1490, _1493, _1496, _1499));
    float _1562 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1489, _1492, _1495, _1498));
    float _1565 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1488, _1491, _1494, _1497));
    float _1599;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1572 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1176, _1180, _1183, _1186));
        float _1576 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1178, _1181, _1184, _1187));
        float _1580 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1179, _1182, _1185, _1188));
        float _1587 = dot(vec4(cbModelParam._m0[39u]), vec4(_1556, _1557, _1558, 1.0));
        _1599 = dot(vec3(isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1587) ? 0.0 : (isnan(0.0) ? _1587 : max(0.0, _1587))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1599 = 1.0;
    }
    float _1610;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1601 = dot(vec4(cbModelParam._m0[40u]), vec4(_1556, _1557, _1558, 1.0));
        _1610 = dot(vec3(isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1601) ? 0.0 : (isnan(0.0) ? _1601 : max(0.0, _1601))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1610 = 1.0;
    }
    float _1614 = (_1610 * cbModelParam._m0[1u].x) + (_1599 * (1.0 - cbModelParam._m0[1u].x));
    float _1624 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _618);
    float _1625 = isnan(_1624) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1624 : min(cbModelParam._m0[25u].z, _1624));
    float _1707;
    float _1709;
    float _1711;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1674 = fma(_848, cbModelParam._m0[13u].z, fma(_844, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _840)) + cbModelParam._m0[13u].w;
        float _1678 = fma(_848, cbModelParam._m0[14u].z, fma(_844, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _840)) + cbModelParam._m0[14u].w;
        float _1682 = fma(_848, cbModelParam._m0[15u].z, fma(_844, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _840)) + cbModelParam._m0[15u].w;
        float _1685 = fma(_790, cbModelParam._m0[13u].z, fma(_789, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _788));
        float _1688 = fma(_790, cbModelParam._m0[14u].z, fma(_789, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _788));
        float _1691 = fma(_790, cbModelParam._m0[15u].z, fma(_789, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _788));
        float _1719;
        if (_1685 > 0.0)
        {
            _1719 = abs((1.0 - _1674) / _1685);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1674 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1719 = frontier_phi_17_15_ladder;
        }
        float _1890;
        if (_1688 > 0.0)
        {
            _1890 = abs((1.0 - _1678) / _1688);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1678 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1890 = frontier_phi_26_22_ladder;
        }
        float _2186;
        if (_1691 > 0.0)
        {
            _2186 = abs((1.0 - _1682) / _1691);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1682 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2186 = frontier_phi_38_33_ladder;
        }
        float _2188 = isnan(_1890) ? _1719 : (isnan(_1719) ? _1890 : min(_1719, _1890));
        float _2189 = isnan(_2186) ? _2188 : (isnan(_2188) ? _2186 : min(_2188, _2186));
        float _2193 = (_2189 * _1685) + _1674;
        float _2194 = (_2189 * _1688) + _1678;
        float _2195 = (_2189 * _1691) + _1682;
        float _2196 = _2189 * 9.9999997473787516355514526367188e-05;
        float _2198 = (-1.0) - _2196;
        float _2200 = _2196 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2195 > _2200) || ((_2195 < _2198) || ((_2194 > _2200) || ((_2194 < _2198) || ((_2193 < _2198) || (_2193 > _2200))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2340 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2195, cbModelParam._m0[9u].z, fma(_2194, cbModelParam._m0[9u].y, _2193 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2195, cbModelParam._m0[10u].z, fma(_2194, cbModelParam._m0[10u].y, _2193 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2195, cbModelParam._m0[11u].z, fma(_2194, cbModelParam._m0[11u].y, _2193 * cbModelParam._m0[11u].x))), _1625);
            frontier_phi_16_38_ladder = _2340.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2340.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2340.x * cbModelParam._m0[1u].y;
        }
        _1707 = frontier_phi_16_38_ladder_2;
        _1709 = frontier_phi_16_38_ladder_1;
        _1711 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1695 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_788, _789, _790), _1625);
        _1707 = _1695.x * cbModelParam._m0[1u].y;
        _1709 = _1695.y * cbModelParam._m0[1u].y;
        _1711 = _1695.z * cbModelParam._m0[1u].y;
    }
    float _1715 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _618);
    float _1716 = isnan(_1715) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1715 : min(cbModelParam._m0[25u].w, _1715));
    float _1806;
    float _1808;
    float _1810;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1770 = fma(_848, cbModelParam._m0[21u].z, fma(_844, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _840)) + cbModelParam._m0[21u].w;
        float _1774 = fma(_848, cbModelParam._m0[22u].z, fma(_844, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _840)) + cbModelParam._m0[22u].w;
        float _1778 = fma(_848, cbModelParam._m0[23u].z, fma(_844, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _840)) + cbModelParam._m0[23u].w;
        float _1781 = fma(_790, cbModelParam._m0[21u].z, fma(_789, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _788));
        float _1784 = fma(_790, cbModelParam._m0[22u].z, fma(_789, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _788));
        float _1787 = fma(_790, cbModelParam._m0[23u].z, fma(_789, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _788));
        float _1895;
        if (_1781 > 0.0)
        {
            _1895 = abs((1.0 - _1770) / _1781);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1770 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1895 = frontier_phi_28_24_ladder;
        }
        float _2213;
        if (_1784 > 0.0)
        {
            _2213 = abs((1.0 - _1774) / _1784);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1774 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2213 = frontier_phi_40_35_ladder;
        }
        float _2540;
        if (_1787 > 0.0)
        {
            _2540 = abs((1.0 - _1778) / _1787);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1778 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2540 = frontier_phi_50_47_ladder;
        }
        float _2542 = isnan(_2213) ? _1895 : (isnan(_1895) ? _2213 : min(_1895, _2213));
        float _2543 = isnan(_2540) ? _2542 : (isnan(_2542) ? _2540 : min(_2542, _2540));
        float _2547 = (_2543 * _1781) + _1770;
        float _2548 = (_2543 * _1784) + _1774;
        float _2549 = (_2543 * _1787) + _1778;
        float _2550 = _2543 * 9.9999997473787516355514526367188e-05;
        float _2551 = (-1.0) - _2550;
        float _2553 = _2550 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2549 > _2553) || ((_2549 < _2551) || ((_2548 > _2553) || ((_2548 < _2551) || ((_2547 < _2551) || (_2547 > _2553))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2667 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2549, cbModelParam._m0[17u].z, fma(_2548, cbModelParam._m0[17u].y, _2547 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2549, cbModelParam._m0[18u].z, fma(_2548, cbModelParam._m0[18u].y, _2547 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2549, cbModelParam._m0[19u].z, fma(_2548, cbModelParam._m0[19u].y, _2547 * cbModelParam._m0[19u].x))), _1716);
            frontier_phi_25_50_ladder = _2667.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2667.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2667.x * cbModelParam._m0[1u].z;
        }
        _1806 = frontier_phi_25_50_ladder_2;
        _1808 = frontier_phi_25_50_ladder_1;
        _1810 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1790 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_788, _789, _790), _1716);
        _1806 = _1790.x * cbModelParam._m0[1u].z;
        _1808 = _1790.y * cbModelParam._m0[1u].z;
        _1810 = _1790.z * cbModelParam._m0[1u].z;
    }
    float _1822 = ((((1.0 - _808) * ((_796 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_808 * _796)) * _780;
    float _1823 = _1822 * ((cbModelParam._m0[1u].w * (_1806 - _1707)) + _1707);
    float _1824 = _1822 * ((cbModelParam._m0[1u].w * (_1808 - _1709)) + _1709);
    float _1825 = _1822 * ((cbModelParam._m0[1u].w * (_1810 - _1711)) + _1711);
    float _1828 = fma(_1825, cbSceneParam._m0[89u].z, fma(_1824, cbSceneParam._m0[89u].y, _1823 * cbSceneParam._m0[89u].x));
    float _1831 = fma(_1825, cbSceneParam._m0[90u].z, fma(_1824, cbSceneParam._m0[90u].y, _1823 * cbSceneParam._m0[90u].x));
    float _1834 = fma(_1825, cbSceneParam._m0[91u].z, fma(_1824, cbSceneParam._m0[91u].y, _1823 * cbSceneParam._m0[91u].x));
    float _1869 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1873 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1877 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1881 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1882 = _1869 / _1881;
    float _1883 = _1873 / _1881;
    float _1884 = _1877 / _1881;
    float _2031;
    float _2032;
    float _2033;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1911 = ((uint(_1884 > cbSceneParam._m0[59u].y) + uint(_1884 > cbSceneParam._m0[59u].x)) + uint(_1884 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1912 = _1911 + 43u;
        uint _1920 = _1911 + 44u;
        uint _1928 = _1911 + 45u;
        uint _1936 = _1911 + 46u;
        float _1947 = fma(_1881, cbSceneParam._m0[_1912].w, fma(_1877, cbSceneParam._m0[_1912].z, fma(_1873, cbSceneParam._m0[_1912].y, _1869 * cbSceneParam._m0[_1912].x)));
        float _1951 = fma(_1881, cbSceneParam._m0[_1920].w, fma(_1877, cbSceneParam._m0[_1920].z, fma(_1873, cbSceneParam._m0[_1920].y, _1869 * cbSceneParam._m0[_1920].x)));
        float _1959 = fma(_1881, cbSceneParam._m0[_1936].w, fma(_1877, cbSceneParam._m0[_1936].z, fma(_1873, cbSceneParam._m0[_1936].y, _1869 * cbSceneParam._m0[_1936].x)));
        float _1964 = cbSceneParam._m0[33u].z * _1959;
        float _1966 = cbSceneParam._m0[33u].w * _1959;
        float _1969 = fma(_1881, cbSceneParam._m0[_1928].w, fma(_1877, cbSceneParam._m0[_1928].z, fma(_1873, cbSceneParam._m0[_1928].y, _1869 * cbSceneParam._m0[_1928].x))) / _1959;
        float _2017 = (cbSceneParam._m0[33u].x - sqrt(((_1883 * _1883) + (_1882 * _1882)) + (_1884 * _1884))) * cbSceneParam._m0[33u].y;
        float _4399 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2024 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1964 + _1947) / _1959, (_1966 + _1951) / _1959), _1969), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1966 + _1947) / _1959, (_1951 - _1964) / _1959), _1969), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1947 - _1964) / _1959, (_1951 - _1966) / _1959), _1969), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1947 - _1966) / _1959, (_1964 + _1951) / _1959), _1969), 0.0)).x), vec4(0.25)));
        _2031 = 1.0 - (_2024 * cbSceneParam._m0[34u].x);
        _2032 = 1.0 - (_2024 * cbSceneParam._m0[34u].y);
        _2033 = 1.0 - (_2024 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2031 = 1.0;
        _2032 = 1.0;
        _2033 = 1.0;
    }
    float _2097;
    float _2099;
    float _2101;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2085 = fma(_1881, cbSceneParam._m0[63u].w, fma(_1877, cbSceneParam._m0[63u].z, fma(_1873, cbSceneParam._m0[63u].y, _1869 * cbSceneParam._m0[63u].x)));
        float _2086 = fma(_1881, cbSceneParam._m0[60u].w, fma(_1877, cbSceneParam._m0[60u].z, fma(_1873, cbSceneParam._m0[60u].y, _1869 * cbSceneParam._m0[60u].x))) / _2085;
        float _2087 = fma(_1881, cbSceneParam._m0[61u].w, fma(_1877, cbSceneParam._m0[61u].z, fma(_1873, cbSceneParam._m0[61u].y, _1869 * cbSceneParam._m0[61u].x))) / _2085;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2086 >= cbSceneParam._m0[64u].x) && (_2087 >= cbSceneParam._m0[64u].y)) && (_2086 <= cbSceneParam._m0[64u].z)) && (_2087 <= cbSceneParam._m0[64u].w))
        {
            float _2226 = fma(_1881, cbSceneParam._m0[62u].w, fma(_1877, cbSceneParam._m0[62u].z, fma(_1873, cbSceneParam._m0[62u].y, _1869 * cbSceneParam._m0[62u].x))) / _2085;
            float _2230 = isnan(cbSceneParam._m0[41u].w) ? _2226 : (isnan(_2226) ? cbSceneParam._m0[41u].w : max(_2226, cbSceneParam._m0[41u].w));
            float _2273 = (cbSceneParam._m0[33u].x - sqrt(((_1883 * _1883) + (_1882 * _1882)) + (_1884 * _1884))) * cbSceneParam._m0[33u].y;
            float _4415 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
            float _2280 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2086, cbSceneParam._m0[33u].w + _2087), _2230), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2086, _2087 - cbSceneParam._m0[33u].z), _2230), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2086 - cbSceneParam._m0[33u].z, _2087 - cbSceneParam._m0[33u].w), _2230), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2086 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2087), _2230), 0.0)).x), vec4(0.25)));
            float _2284 = 1.0 - (_2280 * cbSceneParam._m0[34u].x);
            float _2285 = 1.0 - (_2280 * cbSceneParam._m0[34u].y);
            float _2286 = 1.0 - (_2280 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2286) ? _2033 : (isnan(_2033) ? _2286 : min(_2033, _2286));
            frontier_phi_37_36_ladder_1 = isnan(_2285) ? _2032 : (isnan(_2032) ? _2285 : min(_2032, _2285));
            frontier_phi_37_36_ladder_2 = isnan(_2284) ? _2031 : (isnan(_2031) ? _2284 : min(_2031, _2284));
        }
        else
        {
            frontier_phi_37_36_ladder = _2033;
            frontier_phi_37_36_ladder_1 = _2032;
            frontier_phi_37_36_ladder_2 = _2031;
        }
        _2097 = frontier_phi_37_36_ladder_2;
        _2099 = frontier_phi_37_36_ladder_1;
        _2101 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2097 = _2031;
        _2099 = _2032;
        _2101 = _2033;
    }
    uvec4 _2106 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2108 = _2106.x * 14u;
    uint _2109 = _2108 + 13u;
    float _2116 = _780 + (-1.0);
    float _2121 = (cbLight._m0[_2109].x * _2116) + 1.0;
    float _2122 = (cbLight._m0[_2109].y * _2116) + 1.0;
    float _2123 = (cbLight._m0[_2109].z * _2116) + 1.0;
    float _2124 = (cbLight._m0[_2109].w * _2116) + 1.0;
    uint _2125 = _2108 + 5u;
    float _2131 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
    uint _2135 = _2108 + 4u;
    float _2145 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
    uint _2149 = _2108 | 1u;
    float _2160 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_615, _616, _617));
    float _2163 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_615, _616, _617));
    float _4451 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _4462 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2168 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * 0.3183098733425140380859375;
    float _2170 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * 0.3183098733425140380859375;
    float _2177 = ((cbLight._m0[_2125].x * _2131) * _2170) + (((cbLight._m0[_2135].x * _2097) * _2145) * _2168);
    float _2178 = ((_2131 * cbLight._m0[_2125].y) * _2170) + (((cbLight._m0[_2135].y * _2099) * _2145) * _2168);
    float _2179 = ((_2131 * cbLight._m0[_2125].z) * _2170) + (((cbLight._m0[_2135].z * _2101) * _2145) * _2168);
    uvec4 _2183 = floatBitsToUint(cbLight._m0[_2108 + 12u]);
    bool _2185 = _2183.x == 0u;
    float _2287;
    float _2289;
    float _2291;
    if (_2185)
    {
        _2287 = _2177;
        _2289 = _2178;
        _2291 = _2179;
    }
    else
    {
        uint _2295 = _2108 + 6u;
        float _2311 = (dot(vec3(cbLight._m0[_2108 + 2u].xyz), vec3(_615, _616, _617)) * 0.5) + 0.5;
        float _2312 = _2311 * _2311;
        float _4473 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2313 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2314 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2287 = (((cbLight._m0[_2295].x * 0.3183098733425140380859375) * _2313) * _2314) + _2177;
        _2289 = (((cbLight._m0[_2295].y * 0.3183098733425140380859375) * _2313) * _2314) + _2178;
        _2291 = (((cbLight._m0[_2295].z * 0.3183098733425140380859375) * _2313) * _2314) + _2179;
    }
    bool _2294 = _2183.y == 0u;
    float _2349;
    float _2351;
    float _2353;
    if (_2294)
    {
        _2349 = _2287;
        _2351 = _2289;
        _2353 = _2291;
    }
    else
    {
        uint _2511 = _2108 + 7u;
        float _2527 = (dot(vec3(cbLight._m0[_2108 + 3u].xyz), vec3(_615, _616, _617)) * 0.5) + 0.5;
        float _2528 = _2527 * _2527;
        float _4489 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2529 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _2530 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2349 = (((cbLight._m0[_2511].x * 0.3183098733425140380859375) * _2529) * _2530) + _2287;
        _2351 = (((cbLight._m0[_2511].y * 0.3183098733425140380859375) * _2529) * _2530) + _2289;
        _2353 = (((cbLight._m0[_2511].z * 0.3183098733425140380859375) * _2529) * _2530) + _2291;
    }
    uint _2356 = _2108 + 8u;
    float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2108].w)) * _618) * 0.949999988079071044921875);
    float _2370 = _2369 * _2369;
    float _2371 = cbLight._m0[_2108].x + _694;
    float _2372 = cbLight._m0[_2108].y + _695;
    float _2373 = cbLight._m0[_2108].z + _696;
    float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
    float _2378 = _2377 * _2371;
    float _2379 = _2377 * _2372;
    float _2380 = _2377 * _2373;
    float _2381 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2108].xyz));
    float _4505 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _4516 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _2385 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _2386 = dot(vec3(_615, _616, _617), vec3(_2378, _2379, _2380));
    float _4527 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _2390 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_2378, _2379, _2380));
    float _4538 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2394 = _2370 * _2370;
    float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
    float _2409 = (exp2(log2(1.0 - (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2410 = 1.0 - _2370;
    float _2421 = (0.5 / (((_2385 * ((_2384 * _2410) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2410) + _2370) * _2384))) * _2384;
    float _4549 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2423 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
    uint _2437 = _2108 + 9u;
    float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _618) * 0.949999988079071044921875);
    float _2449 = _2448 * _2448;
    float _2450 = cbLight._m0[_2149].x + _694;
    float _2451 = cbLight._m0[_2149].y + _695;
    float _2452 = cbLight._m0[_2149].z + _696;
    float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
    float _2457 = _2456 * _2450;
    float _2458 = _2456 * _2451;
    float _2459 = _2456 * _2452;
    float _2460 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2149].xyz));
    float _4560 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2464 = dot(vec3(_615, _616, _617), vec3(_2457, _2458, _2459));
    float _4571 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2468 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2457, _2458, _2459));
    float _4582 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2472 = _2449 * _2449;
    float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
    float _2485 = (exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2486 = 1.0 - _2449;
    float _2496 = (0.5 / (((_2385 * ((_2463 * _2486) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2486) + _2449) * _2463))) * _2463;
    float _4593 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2498 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
    float _2508 = (((_2485 * cbLight._m0[_2437].x) * _2498) * _2131) + ((((cbLight._m0[_2356].x * _2097) * _2409) * _2423) * _2145);
    float _2509 = (((_2485 * cbLight._m0[_2437].y) * _2498) * _2131) + ((((cbLight._m0[_2356].y * _2099) * _2409) * _2423) * _2145);
    float _2510 = (((_2485 * cbLight._m0[_2437].z) * _2498) * _2131) + ((((cbLight._m0[_2356].z * _2101) * _2409) * _2423) * _2145);
    float _2566;
    float _2568;
    float _2570;
    if (_2185)
    {
        _2566 = _2508;
        _2568 = _2509;
        _2570 = _2510;
    }
    else
    {
        uint _2572 = _2108 + 2u;
        uint _2576 = _2108 + 10u;
        float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2572].w)) * _618) * 0.949999988079071044921875);
        float _2591 = _2590 * _2590;
        float _2592 = cbLight._m0[_2572].x + _694;
        float _2593 = cbLight._m0[_2572].y + _695;
        float _2594 = cbLight._m0[_2572].z + _696;
        float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
        float _2599 = _2598 * _2592;
        float _2600 = _2598 * _2593;
        float _2601 = _2598 * _2594;
        float _2602 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2572].xyz));
        float _4604 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2606 = dot(vec3(_615, _616, _617), vec3(_2599, _2600, _2601));
        float _4615 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2610 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_2599, _2600, _2601));
        float _4626 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2614 = _2591 * _2591;
        float _2618 = ((_2609 * _2609) * (_2614 + (-1.0))) + 1.0;
        float _2627 = (exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2628 = 1.0 - _2591;
        float _2638 = (0.5 / (((_2385 * ((_2605 * _2628) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2628) + _2591) * _2605))) * _2605;
        float _4637 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2640 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2614 / ((_2618 * _2618) * 3.141590118408203125));
        float _2641 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2566 = (((_2627 * cbLight._m0[_2576].x) * _2640) * _2641) + _2508;
        _2568 = (((_2627 * cbLight._m0[_2576].y) * _2640) * _2641) + _2509;
        _2570 = (((_2627 * cbLight._m0[_2576].z) * _2640) * _2641) + _2510;
    }
    float _2672;
    float _2674;
    float _2676;
    if (_2294)
    {
        _2672 = _2566;
        _2674 = _2568;
        _2676 = _2570;
    }
    else
    {
        uint _2683 = _2108 + 3u;
        uint _2687 = _2108 + 11u;
        float _2701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2683].w)) * _618) * 0.949999988079071044921875);
        float _2702 = _2701 * _2701;
        float _2703 = cbLight._m0[_2683].x + _694;
        float _2704 = cbLight._m0[_2683].y + _695;
        float _2705 = cbLight._m0[_2683].z + _696;
        float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
        float _2710 = _2709 * _2703;
        float _2711 = _2709 * _2704;
        float _2712 = _2709 * _2705;
        float _2713 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2683].xyz));
        float _4653 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2717 = dot(vec3(_615, _616, _617), vec3(_2710, _2711, _2712));
        float _4664 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2721 = dot(vec3(cbLight._m0[_2683].xyz), vec3(_2710, _2711, _2712));
        float _4675 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2725 = _2702 * _2702;
        float _2729 = ((_2720 * _2720) * (_2725 + (-1.0))) + 1.0;
        float _2738 = (exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2739 = 1.0 - _2702;
        float _2749 = (0.5 / (((_2385 * ((_2716 * _2739) + _2702)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2739) + _2702) * _2716))) * _2716;
        float _4686 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2751 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2725 / ((_2729 * _2729) * 3.141590118408203125));
        float _2752 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2672 = (((_2738 * cbLight._m0[_2687].x) * _2751) * _2752) + _2566;
        _2674 = (((_2738 * cbLight._m0[_2687].y) * _2751) * _2752) + _2568;
        _2676 = (((_2738 * cbLight._m0[_2687].z) * _2751) * _2752) + _2570;
    }
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    float _2828;
    if (_2106.y == 0u)
    {
        uvec4 _2773 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2774 = _2773.x;
        uint _2785 = uint((float(_2773.y) * floor(float(uint(cbSceneParam._m0[85u].y * _716) / _2774))) + floor(float(uint(cbSceneParam._m0[85u].x * _715) / _2774)));
        float _2795 = (log2(_1884 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2796 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        uint _2799 = uint(isnan(14.0) ? _2796 : (isnan(_2796) ? 14.0 : min(_2796, 14.0)));
        uvec4 _2804 = texelFetch(g_lightClusterGridBuffer, int(((_2799 << 2u) + (_2785 << 6u)) >> 2u));
        uint _2805 = _2804.x;
        uint _2806 = _2773.z;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        if (((((1u << ((_2806 >> 4u) & 15u)) + 4294967295u) & _2805) == 0u) || ((_2806 & 240u) == 0u))
        {
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
        }
        else
        {
            float _2886;
            float _2888;
            float _2890;
            float _2892;
            float _2894;
            float _2896;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            uint _3044 = 0u;
            uint _3053;
            bool _3054;
            for (;;)
            {
                _3053 = texelFetch(g_lightClassification, int((((_2799 << 5u) + (_2785 << 9u)) + (_3044 << 2u)) >> 2u)).x;
                _3054 = _3053 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3054)
                {
                    frontier_phi_71_pred = _3043;
                    frontier_phi_71_pred_1 = _3042;
                    frontier_phi_71_pred_2 = _3041;
                    frontier_phi_71_pred_3 = _3040;
                    frontier_phi_71_pred_4 = _3039;
                    frontier_phi_71_pred_5 = _3038;
                }
                else
                {
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    uint _3189;
                    _3183 = _3038;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3041;
                    _3187 = _3042;
                    _3188 = _3043;
                    _3189 = _3053;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    for (;;)
                    {
                        uint _3193 = uint(findLSB(_3189)) + (_3044 << 5u);
                        uint _3190 = (_3189 + 4294967295u) & _3189;
                        uint _3195 = _3193 * 48u;
                        vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 3u)).x));
                        uint _3215 = (_3193 * 48u) + 4u;
                        vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 3u)).x));
                        uint _3234 = (_3193 * 48u) + 8u;
                        vec3 _3245 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x));
                        float _3249 = _3209.x - _1882;
                        float _3250 = _3209.y - _1883;
                        float _3251 = _3209.z - _1884;
                        float _3252 = dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251));
                        float _3255 = inversesqrt(_3252);
                        float _3256 = _3255 * _3249;
                        float _3257 = _3255 * _3250;
                        float _3258 = _3255 * _3251;
                        float _3259 = dot(vec3(_736, _739, _742), vec3(_3256, _3257, _3258));
                        float _3264 = 1.0 - (_3252 * _3209.w);
                        float _4712 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3265 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                        float _3266 = sqrt(_3252) * _3228.w;
                        float _3269 = 1.39999997615814208984375 / (_3266 + 1.39999997615814208984375);
                        float _3270 = _3269 * _3269;
                        float _3273 = ((1.0 - _3270) * _3259) + _3270;
                        float _3276 = _3266 * _3266;
                        float _3280 = ((isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))) * _3265) / ((_3276 * 0.699999988079071044921875) + 1.0);
                        float _3284 = (-0.0) - _1882;
                        float _3285 = (-0.0) - _1883;
                        float _3286 = (-0.0) - _1884;
                        float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                        float _3291 = _3290 * _3284;
                        float _3292 = _3290 * _3285;
                        float _3293 = _3290 * _3286;
                        float _3300 = exp2(log2(1.0 / ((_3276 * 3.5) + 5.0)) * 0.25);
                        float _3301 = 1.0 - _796;
                        float _3308 = sqrt(1.0 - ((1.0 - (_3301 * _3301)) * (1.0 - (_3300 * _3300))));
                        float _3309 = _3308 * _3308;
                        float _3310 = _3309 * _3309;
                        float _3311 = _3291 + _3256;
                        float _3312 = _3292 + _3257;
                        float _3313 = _3293 + _3258;
                        float _3317 = inversesqrt(dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313)));
                        float _3321 = dot(vec3(_736, _739, _742), vec3(_3291, _3292, _3293));
                        float _4728 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3324 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                        float _3325 = dot(vec3(_736, _739, _742), vec3(_3317 * _3311, _3317 * _3312, _3317 * _3313));
                        float _4739 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3328 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3332 = ((_3328 * _3328) * (_3310 + (-1.0))) + 1.0;
                        float _3333 = _3269 * _3309;
                        float _3334 = _3333 * _3333;
                        float _3337 = ((1.0 - _3334) * _3259) + _3334;
                        float _4750 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3338 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3339 = 1.0 - _3309;
                        float _3349 = (0.5 / (((_3338 * ((_3324 * _3339) + _3309)) + 9.9999999392252902907785028219223e-09) + (((_3338 * _3339) + _3309) * _3324))) * _3338;
                        float _4761 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3359 = (((_3310 * 3.1415927410125732421875) * (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) / ((_3332 * _3332) * ((_3276 * 2.1991131305694580078125) + 3.141590118408203125))) * _3265;
                        _3113 = (_3280 * _3228.x) + _3186;
                        _3114 = (_3280 * _3228.y) + _3187;
                        _3115 = (_3280 * _3228.z) + _3188;
                        _3110 = (_3359 * _3245.x) + _3183;
                        _3111 = (_3359 * _3245.y) + _3184;
                        _3112 = (_3359 * _3245.z) + _3185;
                        if (_3190 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3183 = _3110;
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3113;
                            _3187 = _3114;
                            _3188 = _3115;
                            _3189 = _3190;
                        }
                    }
                    frontier_phi_71_pred = _3115;
                    frontier_phi_71_pred_1 = _3114;
                    frontier_phi_71_pred_2 = _3113;
                    frontier_phi_71_pred_3 = _3112;
                    frontier_phi_71_pred_4 = _3111;
                    frontier_phi_71_pred_5 = _3110;
                }
                _2896 = frontier_phi_71_pred;
                _2894 = frontier_phi_71_pred_1;
                _2892 = frontier_phi_71_pred_2;
                _2890 = frontier_phi_71_pred_3;
                _2888 = frontier_phi_71_pred_4;
                _2886 = frontier_phi_71_pred_5;
                uint _3045 = _3044 + 1u;
                if (_3045 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3038 = _2886;
                    _3039 = _2888;
                    _3040 = _2890;
                    _3041 = _2892;
                    _3042 = _2894;
                    _3043 = _2896;
                    _3044 = _3045;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
        }
        uvec4 _2899 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2900 = _2899.z;
        uint _2902 = (_2900 >> 8u) & 15u;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        if (((4294967295u << _2902) & _2805) == 0u)
        {
            _3006 = _2885;
            _3008 = _2887;
            _3010 = _2889;
            _3012 = _2891;
            _3014 = _2893;
            _3016 = _2895;
        }
        else
        {
            float _3031 = inversesqrt(dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884)));
            float _3032 = _3031 * _1882;
            float _3033 = _3031 * _1883;
            float _3034 = _3031 * _1884;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2902 < ((_2900 >> 12u) & 15u))
            {
                float _3007;
                float _3009;
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3166 = _2885;
                float _3167 = _2887;
                float _3168 = _2889;
                float _3169 = _2891;
                float _3170 = _2893;
                float _3171 = _2895;
                uint _3172 = _2902;
                uint _3181;
                bool _3182;
                for (;;)
                {
                    _3181 = texelFetch(g_lightClassification, int((((_2799 << 5u) + (_2785 << 9u)) + (_3172 << 2u)) >> 2u)).x;
                    _3182 = _3181 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3182)
                    {
                        frontier_phi_82_pred = _3171;
                        frontier_phi_82_pred_1 = _3170;
                        frontier_phi_82_pred_2 = _3169;
                        frontier_phi_82_pred_3 = _3168;
                        frontier_phi_82_pred_4 = _3167;
                        frontier_phi_82_pred_5 = _3166;
                    }
                    else
                    {
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3386 = _3166;
                        float _3387 = _3167;
                        float _3388 = _3168;
                        float _3389 = _3169;
                        float _3390 = _3170;
                        float _3391 = _3171;
                        uint _3392 = _3181;
                        uint _3393;
                        vec4 _3418;
                        float _3419;
                        vec4 _3434;
                        vec3 _3446;
                        vec4 _3461;
                        vec4 _3476;
                        float _3522;
                        bool _3523;
                        for (;;)
                        {
                            uint _3403 = ((_3172 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3392));
                            _3393 = (_3392 + 4294967295u) & _3392;
                            uint _3405 = _3403 * 40u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            _3419 = _3418.w;
                            uint _3421 = (_3403 * 40u) + 4u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3436 = (_3403 * 40u) + 8u;
                            _3446 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x));
                            uint _3448 = (_3403 * 40u) + 16u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3463 = (_3403 * 40u) + 20u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3478 = (_3403 * 40u) + 24u;
                            vec4 _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            uint _3497 = (_3403 * 40u) + 28u;
                            vec4 _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            _3522 = fma(_1884, _3510.z, fma(_1883, _3510.y, _3510.x * _1882)) + _3510.w;
                            _3523 = !((fma(_1884, _3491.z, fma(_1883, _3491.y, _3491.x * _1882)) + _3491.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3523)
                            {
                                float _3550 = _3418.x - _1882;
                                float _3551 = _3418.y - _1883;
                                float _3552 = _3418.z - _1884;
                                float _3553 = dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552));
                                float _3556 = inversesqrt(_3553);
                                float _3557 = _3556 * _3550;
                                float _3558 = _3556 * _3551;
                                float _3559 = _3556 * _3552;
                                float _3563 = 1.0 - (_3553 / (_3419 * _3419));
                                float _4772 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                                float _3568 = sqrt(_3553) * _3434.w;
                                float _3570 = 1.39999997615814208984375 / (_3568 + 1.39999997615814208984375);
                                float _3571 = _3570 * _3570;
                                float _3574 = ((1.0 - _3571) * dot(vec3(_3557, _3558, _3559), vec3(_736, _739, _742))) + _3571;
                                float _3577 = _3568 * _3568;
                                float _3581 = (fma(_1884, _3461.z, fma(_1883, _3461.y, _3461.x * _1882)) + _3461.w) / _3522;
                                float _3582 = (fma(_1884, _3476.z, fma(_1883, _3476.y, _3476.x * _1882)) + _3476.w) / _3522;
                                float _3586 = 1.0 - dot(vec2(_3581, _3582), vec2(_3581, _3582));
                                float _4788 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3587 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                                float _3588 = _3587 * (((isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0))) * _3564) / ((_3577 * 0.699999988079071044921875) + 1.0));
                                float _3600 = exp2(log2(1.0 / ((_3577 * 3.5) + 5.0)) * 0.25);
                                float _3601 = 1.0 - _796;
                                float _3608 = sqrt(1.0 - ((1.0 - (_3601 * _3601)) * (1.0 - (_3600 * _3600))));
                                float _3609 = _3608 * _3608;
                                float _3610 = _3609 * _3609;
                                float _3611 = _3557 - _3032;
                                float _3612 = _3558 - _3033;
                                float _3613 = _3559 - _3034;
                                float _3617 = inversesqrt(dot(vec3(_3611, _3612, _3613), vec3(_3611, _3612, _3613)));
                                float _3621 = dot(vec3(_736, _739, _742), vec3((-0.0) - _3032, (-0.0) - _3033, (-0.0) - _3034));
                                float _4799 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3624 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3625 = dot(vec3(_736, _739, _742), vec3(_3617 * _3611, _3617 * _3612, _3617 * _3613));
                                float _4810 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3628 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3632 = ((_3628 * _3628) * (_3610 + (-1.0))) + 1.0;
                                float _3633 = _3570 * _3609;
                                float _3634 = _3633 * _3633;
                                float _3640 = ((1.0 - _3634) * dot(vec3(_736, _739, _742), vec3(_3557, _3558, _3559))) + _3634;
                                float _4821 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3641 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3642 = 1.0 - _3609;
                                float _3652 = (0.5 / (((_3641 * ((_3624 * _3642) + _3609)) + 9.9999999392252902907785028219223e-09) + (((_3641 * _3642) + _3609) * _3624))) * _3641;
                                float _4832 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3662 = (_3587 * _3564) * (((_3610 * 3.1415927410125732421875) * (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) / ((_3632 * _3632) * ((_3577 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3588 * _3434.z;
                                frontier_phi_88_pred_1 = _3588 * _3434.y;
                                frontier_phi_88_pred_2 = _3588 * _3434.x;
                                frontier_phi_88_pred_3 = _3662 * _3446.z;
                                frontier_phi_88_pred_4 = _3662 * _3446.y;
                                frontier_phi_88_pred_5 = _3662 * _3446.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3671 = frontier_phi_88_pred;
                            _3670 = frontier_phi_88_pred_1;
                            _3669 = frontier_phi_88_pred_2;
                            _3668 = frontier_phi_88_pred_3;
                            _3667 = frontier_phi_88_pred_4;
                            _3666 = frontier_phi_88_pred_5;
                            _3376 = _3669 + _3389;
                            _3377 = _3670 + _3390;
                            _3378 = _3671 + _3391;
                            _3373 = _3666 + _3386;
                            _3374 = _3667 + _3387;
                            _3375 = _3668 + _3388;
                            if (_3393 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3393;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3378;
                        frontier_phi_82_pred_1 = _3377;
                        frontier_phi_82_pred_2 = _3376;
                        frontier_phi_82_pred_3 = _3375;
                        frontier_phi_82_pred_4 = _3374;
                        frontier_phi_82_pred_5 = _3373;
                    }
                    _3017 = frontier_phi_82_pred;
                    _3015 = frontier_phi_82_pred_1;
                    _3013 = frontier_phi_82_pred_2;
                    _3011 = frontier_phi_82_pred_3;
                    _3009 = frontier_phi_82_pred_4;
                    _3007 = frontier_phi_82_pred_5;
                    uint _3173 = _3172 + 1u;
                    if (_3173 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3166 = _3007;
                        _3167 = _3009;
                        _3168 = _3011;
                        _3169 = _3013;
                        _3170 = _3015;
                        _3171 = _3017;
                        _3172 = _3173;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3013;
                frontier_phi_63_64_ladder_1 = _3017;
                frontier_phi_63_64_ladder_2 = _3015;
                frontier_phi_63_64_ladder_3 = _3011;
                frontier_phi_63_64_ladder_4 = _3009;
                frontier_phi_63_64_ladder_5 = _3007;
            }
            else
            {
                frontier_phi_63_64_ladder = _2891;
                frontier_phi_63_64_ladder_1 = _2895;
                frontier_phi_63_64_ladder_2 = _2893;
                frontier_phi_63_64_ladder_3 = _2889;
                frontier_phi_63_64_ladder_4 = _2887;
                frontier_phi_63_64_ladder_5 = _2885;
            }
            _3006 = frontier_phi_63_64_ladder_5;
            _3008 = frontier_phi_63_64_ladder_4;
            _3010 = frontier_phi_63_64_ladder_3;
            _3012 = frontier_phi_63_64_ladder;
            _3014 = frontier_phi_63_64_ladder_2;
            _3016 = frontier_phi_63_64_ladder_1;
        }
        float _3021 = isnan(1.0) ? _780 : (isnan(_780) ? 1.0 : min(_780, 1.0));
        _2818 = (_3021 * _3012) + _2349;
        _2820 = (_3021 * _3014) + _2351;
        _2822 = (_3021 * _3016) + _2353;
        _2824 = ((_3006 * 0.039999999105930328369140625) * _3021) + _2672;
        _2826 = ((_3008 * 0.039999999105930328369140625) * _3021) + _2674;
        _2828 = ((_3010 * 0.039999999105930328369140625) * _3021) + _2676;
    }
    else
    {
        _2818 = _2349;
        _2820 = _2351;
        _2822 = _2353;
        _2824 = _2672;
        _2826 = _2674;
        _2828 = _2676;
    }
    float _4848 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4859 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4870 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _2845 = ((isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2818 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _780))) + ((_2824 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1614)) * cbPerFrame._m0[3u].x);
    float _2846 = ((isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2820 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _780))) + ((_2826 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1614)) * cbPerFrame._m0[3u].x);
    float _2847 = ((isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2822 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _780))) + ((_2828 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1614)) * cbPerFrame._m0[3u].x);
    uint _2848 = _267 + 6u;
    float _2856 = _715 / cbSceneParam._m0[86u].x;
    float _2857 = _716 / cbSceneParam._m0[86u].y;
    vec4 _2871 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2856, _2857, (log2((isnan(cbSceneParam._m0[77u].w) ? _636 : (isnan(_636) ? cbSceneParam._m0[77u].w : min(_636, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2873 = _2871.x;
    float _2874 = _2871.y;
    float _2875 = _2871.z;
    float _2876 = _2871.w;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    if (_636 > cbSceneParam._m0[78u].w)
    {
        float _2910 = isnan(_636) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _636 : min(cbSceneParam._m0[80u].w, _636));
        float _2911 = _2910 / _636;
        float _2922 = _2911 * _687;
        float _2923 = _688 * _2911;
        float _2924 = (-0.0) - _2923;
        float _2926 = _2911 * _689;
        float _2928 = (cbSceneParam._m0[77u].w * _2924) / _2910;
        float _2929 = _2928 + cbSceneParam._m0[79u].w;
        float _2930 = cbSceneParam._m0[79u].w - _2923;
        float _2936 = sqrt(((_2922 * _2922) + (_2923 * _2923)) + (_2926 * _2926));
        float _2939 = (1.0 - (cbSceneParam._m0[77u].w / _2910)) * _2936;
        float _2944 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2946 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3123;
        if (abs((_2924 - _2928) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3123 = ((((_2929 > 0.0) ? exp2(_2944 * _2929) : (2.0 - exp2(_2946 * _2929))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2939;
        }
        else
        {
            float _3067 = 1.0 / cbSceneParam._m0[80u].x;
            float _3068 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : max(_2929, _2930));
            float _3069 = isnan(_2930) ? _2929 : (isnan(_2929) ? _2930 : min(_2929, _2930));
            float _3078 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : min(_3068, 0.0));
            float _3079 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : min(_3069, 0.0));
            _3123 = ((abs(_2936 / _2924) * cbSceneParam._m0[80u].y) * ((((_3078 - _3079) * 2.0) - ((exp2(_2944 * (isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0)))) - exp2(_2944 * (isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))))) * _3067)) - ((exp2(_2946 * _3078) - exp2(_2946 * _3079)) * _3067))) + (_2939 * cbSceneParam._m0[80u].z);
        }
        vec4 _3125 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2856, _2857, 1.0), 0.0);
        float _3134 = exp2((_3123 * (-1.44269502162933349609375)) * (1.0 - _3125.w));
        float _3135 = log2(_3134);
        float _3151 = log2(_2876);
        _2948 = (exp2(_3151 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].x)) * _3125.x) / cbSceneParam._m0[78u].x)) + _2873;
        _2950 = (exp2(_3151 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].y)) * _3125.y) / cbSceneParam._m0[78u].y)) + _2874;
        _2952 = (exp2(_3151 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3135 * cbSceneParam._m0[78u].z)) * _3125.z) / cbSceneParam._m0[78u].z)) + _2875;
        _2954 = _3134 * _2876;
    }
    else
    {
        _2948 = _2873;
        _2950 = _2874;
        _2952 = _2875;
        _2954 = _2876;
    }
    bool _3161;
    vec4 _2964;
    vec4 _2986;
    float _2988;
    float _2992;
    float _2993;
    float _2994;
    float _2995;
    bool _3005;
    for (;;)
    {
        _2964 = cbMatDynParam._m0[0u];
        float _2966 = roundEven(_2964.y);
        bool _2967 = _2966 == 3.0;
        float _2968 = log2(_2954);
        float _2975 = exp2(_2968 * cbSceneParam._m0[78u].x) * _2845;
        float _2976 = exp2(_2968 * cbSceneParam._m0[78u].y) * _2846;
        float _2977 = exp2(_2968 * cbSceneParam._m0[78u].z) * _2847;
        float _2984 = _703 + (-0.5);
        _2986 = cbMtdParam._m0[1u];
        _2988 = _2986.y * _2984;
        float _2991 = (_2966 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2992 = _2991 * (_2967 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2948)));
        _2993 = _2991 * (_2967 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2950)));
        _2994 = _2991 * (_2967 ? _2977 : (_2977 + (cbSceneParam._m0[72u].w * _2952)));
        _2995 = _2984 * 0.999000012874603271484375;
        _3005 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3005)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _2995) < 0.5)
            {
                _3161 = true;
                break;
            }
        }
        uint _3102 = _755 + uint(_2964.w);
        if ((cbInstanceData._m0[_3102].w < 1.0) && ((cbInstanceData._m0[_3102].w + _2995) < 0.5))
        {
            _3161 = true;
            break;
        }
        if ((_2988 + 1.0) < _2986.x)
        {
            _3161 = true;
            break;
        }
        _3161 = false;
        break;
    }
    float _3364;
    if (_3161)
    {
        discard_state = true;
        _3364 = 0.0;
    }
    else
    {
        _3364 = cbInstanceData._m0[_2848].w;
    }
    SV_Target.x = _2992;
    SV_Target.y = _2993;
    SV_Target.z = _2994;
    SV_Target.w = _3364;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2848].w;
    discard_exit();
}


