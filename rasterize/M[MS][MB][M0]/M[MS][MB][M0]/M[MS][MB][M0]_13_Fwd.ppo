#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _936;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _218 = uint(roundEven(NORMAL.w)) * 13u;
    uint _224 = _218 + 1u;
    uint _228 = _218 + 2u;
    float _237 = sqrt(((cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x) + (cbInstanceData._m0[_218].x * cbInstanceData._m0[_218].x)) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x));
    float _238 = _237 * TEXCOORD.z;
    float _239 = _237 * TEXCOORD.w;
    vec4 _258 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _264 = _258.x * cbMtdParam._m0[9u].x;
    float _265 = _258.y * cbMtdParam._m0[9u].y;
    float _266 = _258.z * cbMtdParam._m0[9u].z;
    vec4 _284 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _288 = _284.z;
    float _293 = (_284.x * 2.0) + (-1.0);
    float _295 = (_284.y * 2.0) + (-1.0);
    float _296 = dot(vec2(_293, _295), vec2(_293, _295));
    float _3247 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _302 = sqrt(1.0 - (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0))));
    vec4 _319 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _238) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _239) + cbTextureTilingScale._m0[11u].w));
    float _321 = _319.x;
    float _322 = 1.0 - _321;
    float _338 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_321 - _322) * cbMtdParam._m0[24u].z) + _322) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3258 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _339 = isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0));
    float _346 = (_339 * (cbMtdParam._m0[17u].x - _264)) + _264;
    float _347 = (_339 * (cbMtdParam._m0[17u].y - _265)) + _265;
    float _348 = (_339 * (cbMtdParam._m0[17u].z - _266)) + _266;
    vec4 _361 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _238) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _239) + cbTextureTilingScale._m0[15u].w));
    float _368 = (_361.x * 2.0) + (-1.0);
    float _369 = (_361.y * 2.0) + (-1.0);
    float _370 = dot(vec2(_368, _369), vec2(_368, _369));
    float _3269 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _378 = (_339 * (_361.z - _288)) + _288;
    float _390 = (((_368 - _293) + (cbMtdParam._m0[21u].x * _293)) * _339) + _293;
    float _391 = (((_369 - _295) + (cbMtdParam._m0[21u].x * _295)) * _339) + _295;
    float _392 = (_339 * (sqrt(1.0 - (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) - _302)) + _302;
    float _397 = cbMtdParam._m0[22u].x + _284.w;
    float _400 = fma(_392, _205 * NORMAL.x, fma(_391, _212 * TANGENT.x, (_198 * _190) * _390));
    float _403 = fma(_392, _205 * NORMAL.y, fma(_391, _212 * TANGENT.y, (_198 * _191) * _390));
    float _406 = fma(_392, _205 * NORMAL.z, fma(_391, _212 * TANGENT.z, (_198 * _192) * _390));
    float _410 = inversesqrt(dot(vec3(_400, _403, _406), vec3(_400, _403, _406)));
    float _411 = _410 * _400;
    float _412 = _410 * _403;
    float _413 = _410 * _406;
    float _3280 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _414 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    float _3291 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _3302 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _3313 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _3324 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _432 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _473 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _483 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _473);
    float _484 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _473);
    float _485 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _473);
    float _489 = inversesqrt(dot(vec3(_483, _484, _485), vec3(_483, _484, _485)));
    float _490 = _483 * _489;
    float _491 = _484 * _489;
    float _492 = _485 * _489;
    float _498 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _499 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _520 = fma(_413, cbSceneParam._m0[5u].z, fma(_412, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _411));
    float _523 = fma(_413, cbSceneParam._m0[6u].z, fma(_412, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _411));
    float _526 = fma(_413, cbSceneParam._m0[7u].z, fma(_412, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _411));
    uint _540 = (_218 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _546 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0)))) * cbInstanceData._m0[_540].x;
    float _547 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0)))) * cbInstanceData._m0[_540].y;
    float _548 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * cbInstanceData._m0[_540].z;
    float _3335 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _549 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _3346 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _550 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _3357 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
    vec4 _560 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _498, cbSceneParam._m0[86u].y * _499));
    float _564 = ((isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0))) * TEXCOORD_5.w) * _560.x;
    float _565 = dot(vec3(_411, _412, _413), vec3(_490, _491, _492));
    float _568 = _565 * 2.0;
    float _572 = (_568 * _411) - _490;
    float _573 = (_568 * _412) - _491;
    float _574 = (_568 * _413) - _492;
    float _578 = abs(dot(vec3(_490, _491, _492), vec3(_411, _412, _413)));
    float _3368 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _580 = sqrt(_414);
    float _593 = exp2((_580 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_580 * 3.0));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _935;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _660 = fma(_633, cbModelParam._m0[26u].z, fma(_629, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _625));
        float _664 = fma(_633, cbModelParam._m0[27u].z, fma(_629, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _625));
        float _668 = fma(_633, cbModelParam._m0[28u].z, fma(_629, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _625));
        float _693 = _625 + _411;
        float _694 = _629 + _412;
        float _695 = _633 + _413;
        float _705 = fma(_695, cbModelParam._m0[26u].z, fma(_694, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _693)) - _660;
        float _706 = fma(_695, cbModelParam._m0[27u].z, fma(_694, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _693)) - _664;
        float _707 = fma(_695, cbModelParam._m0[28u].z, fma(_694, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _693)) - _668;
        float _711 = inversesqrt(dot(vec3(_705, _706, _707), vec3(_705, _706, _707)));
        float _724 = ((_711 * _705) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_660 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _725 = ((_711 * _706) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_664 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _726 = ((_711 * _707) / cbModelParam._m0[34u].z) + ((((((_668 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_724, _725, _726), 0.0);
        float _763 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_729.x + (-0.5));
        float _765 = _763 * (_729.y + (-0.5));
        float _766 = _763 * (_729.z + (-0.5));
        float _773 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_736.x + (-0.5));
        float _775 = _773 * (_736.y + (-0.5));
        float _776 = _773 * (_736.z + (-0.5));
        float _783 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _784 = _783 * (_743.x + (-0.5));
        float _785 = _783 * (_743.y + (-0.5));
        float _786 = _783 * (_743.z + (-0.5));
        float _793 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_750.x + (-0.5));
        float _795 = _793 * (_750.y + (-0.5));
        float _796 = _793 * (_750.z + (-0.5));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = _764 * 0.5;
        float _801 = _774 * 0.5;
        float _802 = _784 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _817 = (dot(vec3(_411, _412, _413), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3394 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _827 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3405 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _829 = _828 * 2.0;
        float _833 = (1.0 - _828) / (_828 + 1.0);
        float _3416 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _843 = ((((1.0 - _834) * (_829 + 2.0)) * exp2(log2(isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * (_829 + 1.0))) + _834) * _797;
        float _844 = _765 * 0.5;
        float _845 = _775 * 0.5;
        float _846 = _785 * 0.5;
        float _847 = dot(vec3(_844, _845, _846), vec3(_844, _845, _846));
        float _852 = (_847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_847);
        float _860 = (dot(vec3(_411, _412, _413), vec3(_852 * _844, _852 * _845, _852 * _846)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _869 = sqrt(((_845 * _845) + (_844 * _844)) + (_846 * _846)) / (_798 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _871 = _870 * 2.0;
        float _875 = (1.0 - _870) / (_870 + 1.0);
        float _3449 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _876 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _885 = ((((1.0 - _876) * (_871 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_871 + 1.0))) + _876) * _798;
        float _886 = _766 * 0.5;
        float _887 = _776 * 0.5;
        float _888 = _786 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _902 = (dot(vec3(_411, _412, _413), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _911 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _913 = _912 * 2.0;
        float _917 = (1.0 - _912) / (_912 + 1.0);
        float _3482 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _927 = ((((1.0 - _918) * (_913 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_913 + 1.0))) + _918) * _799;
        _935 = _766;
        _937 = _765;
        _938 = _764;
        _939 = _776;
        _940 = _775;
        _941 = _774;
        _942 = _786;
        _943 = _785;
        _944 = _784;
        _945 = _799;
        _946 = _798;
        _947 = _797;
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0)));
        _949 = cbModelParam._m0[36u].z * (isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)));
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)));
    }
    else
    {
        _935 = _936;
        _937 = _936;
        _938 = _936;
        _939 = _936;
        _940 = _936;
        _941 = _936;
        _942 = _936;
        _943 = _936;
        _944 = _936;
        _945 = _936;
        _946 = _936;
        _947 = _936;
        _948 = 0.0;
        _949 = 0.0;
        _950 = 0.0;
    }
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _975 = fma(_633, cbModelParam._m0[30u].z, fma(_629, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _625));
        float _979 = fma(_633, cbModelParam._m0[31u].z, fma(_629, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _625));
        float _983 = fma(_633, cbModelParam._m0[32u].z, fma(_629, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _625));
        float _1006 = _625 + _411;
        float _1007 = _629 + _412;
        float _1008 = _633 + _413;
        float _1018 = fma(_1008, cbModelParam._m0[30u].z, fma(_1007, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1006)) - _975;
        float _1019 = fma(_1008, cbModelParam._m0[31u].z, fma(_1007, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1006)) - _979;
        float _1020 = fma(_1008, cbModelParam._m0[32u].z, fma(_1007, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1006)) - _983;
        float _1024 = inversesqrt(dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020)));
        float _1037 = ((_1024 * _1018) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_975 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1024 * _1019) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_979 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1024 * _1020) / cbModelParam._m0[35u].z) + ((((((_983 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        float _1074 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1041.x + (-0.5));
        float _1076 = _1074 * (_1041.y + (-0.5));
        float _1077 = _1074 * (_1041.z + (-0.5));
        float _1084 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1048.x + (-0.5));
        float _1086 = _1084 * (_1048.y + (-0.5));
        float _1087 = _1084 * (_1048.z + (-0.5));
        float _1094 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1055.x + (-0.5));
        float _1096 = _1094 * (_1055.y + (-0.5));
        float _1097 = _1094 * (_1055.z + (-0.5));
        float _1104 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1062.x + (-0.5));
        float _1106 = _1104 * (_1062.y + (-0.5));
        float _1107 = _1104 * (_1062.z + (-0.5));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1075 * 0.5;
        float _1112 = _1085 * 0.5;
        float _1113 = _1095 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_411, _412, _413), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3545 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_1138 + 1.0))) + _1143) * _1108;
        float _1153 = _1076 * 0.5;
        float _1154 = _1086 * 0.5;
        float _1155 = _1096 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_411, _412, _413), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3578 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1180 + 1.0))) + _1185) * _1109;
        float _1195 = _1077 * 0.5;
        float _1196 = _1087 * 0.5;
        float _1197 = _1097 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_411, _412, _413), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3611 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1222 + 1.0))) + _1227) * _1110;
        _1244 = _1077;
        _1245 = _1076;
        _1246 = _1075;
        _1247 = _1087;
        _1248 = _1086;
        _1249 = _1085;
        _1250 = _1097;
        _1251 = _1096;
        _1252 = _1095;
        _1253 = _1110;
        _1254 = _1109;
        _1255 = _1108;
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
    }
    else
    {
        _1244 = _936;
        _1245 = _936;
        _1246 = _936;
        _1247 = _936;
        _1248 = _936;
        _1249 = _936;
        _1250 = _936;
        _1251 = _936;
        _1252 = _936;
        _1253 = _936;
        _1254 = _936;
        _1255 = _936;
        _1256 = 0.0;
        _1257 = 0.0;
        _1258 = 0.0;
    }
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _948)) + _948;
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _949)) + _949;
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _950)) + _950;
    float _1291 = fma(_1270, cbSceneParam._m0[89u].z, fma(_1269, cbSceneParam._m0[89u].y, _1268 * cbSceneParam._m0[89u].x));
    float _1294 = fma(_1270, cbSceneParam._m0[90u].z, fma(_1269, cbSceneParam._m0[90u].y, _1268 * cbSceneParam._m0[90u].x));
    float _1297 = fma(_1270, cbSceneParam._m0[91u].z, fma(_1269, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1268));
    float _1312 = _572 * 0.5;
    float _1313 = _573 * 0.5;
    float _1314 = _574 * 0.5;
    float _1315 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1318 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1321 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1355;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1328 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_935, _939, _942, _945));
        float _1332 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_937, _940, _943, _946));
        float _1336 = dot(vec4(_1312, _1313, _1314, 1.0), vec4(_938, _941, _944, _947));
        float _1343 = dot(vec4(cbModelParam._m0[39u]), vec4(_1312, _1313, _1314, 1.0));
        _1355 = dot(vec3(isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)), isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1343) ? 0.0 : (isnan(0.0) ? _1343 : max(0.0, _1343))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1355 = 1.0;
    }
    float _1366;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1357 = dot(vec4(cbModelParam._m0[40u]), vec4(_1312, _1313, _1314, 1.0));
        _1366 = dot(vec3(isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1357) ? 0.0 : (isnan(0.0) ? _1357 : max(0.0, _1357))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1366 = 1.0;
    }
    float _1370 = (_1366 * cbModelParam._m0[1u].x) + (_1355 * (1.0 - cbModelParam._m0[1u].x));
    float _1380 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _414);
    float _1381 = isnan(_1380) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1380 : min(cbModelParam._m0[25u].z, _1380));
    float _1462;
    float _1464;
    float _1466;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1429 = fma(_633, cbModelParam._m0[13u].z, fma(_629, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _625)) + cbModelParam._m0[13u].w;
        float _1433 = fma(_633, cbModelParam._m0[14u].z, fma(_629, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _625)) + cbModelParam._m0[14u].w;
        float _1437 = fma(_633, cbModelParam._m0[15u].z, fma(_629, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _625)) + cbModelParam._m0[15u].w;
        float _1440 = fma(_574, cbModelParam._m0[13u].z, fma(_573, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _572));
        float _1443 = fma(_574, cbModelParam._m0[14u].z, fma(_573, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _572));
        float _1446 = fma(_574, cbModelParam._m0[15u].z, fma(_573, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _572));
        float _1474;
        if (_1440 > 0.0)
        {
            _1474 = abs((1.0 - _1429) / _1440);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1429 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1474 = frontier_phi_14_12_ladder;
        }
        float _1678;
        if (_1443 > 0.0)
        {
            _1678 = abs((1.0 - _1433) / _1443);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1433 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1678 = frontier_phi_23_19_ladder;
        }
        float _1921;
        if (_1446 > 0.0)
        {
            _1921 = abs((1.0 - _1437) / _1446);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1437 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1921 = frontier_phi_35_30_ladder;
        }
        float _1923 = isnan(_1678) ? _1474 : (isnan(_1474) ? _1678 : min(_1474, _1678));
        float _1924 = isnan(_1921) ? _1923 : (isnan(_1923) ? _1921 : min(_1923, _1921));
        float _1928 = (_1924 * _1440) + _1429;
        float _1929 = (_1924 * _1443) + _1433;
        float _1930 = (_1924 * _1446) + _1437;
        float _1931 = _1924 * 9.9999997473787516355514526367188e-05;
        float _1933 = (-1.0) - _1931;
        float _1935 = _1931 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1930 > _1935) || ((_1930 < _1933) || ((_1929 > _1935) || ((_1929 < _1933) || ((_1928 < _1933) || (_1928 > _1935))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2054 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1930, cbModelParam._m0[9u].z, fma(_1929, cbModelParam._m0[9u].y, _1928 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1930, cbModelParam._m0[10u].z, fma(_1929, cbModelParam._m0[10u].y, _1928 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1930, cbModelParam._m0[11u].z, fma(_1929, cbModelParam._m0[11u].y, _1928 * cbModelParam._m0[11u].x))), _1381);
            frontier_phi_13_35_ladder = _2054.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2054.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2054.x * cbModelParam._m0[1u].y;
        }
        _1462 = frontier_phi_13_35_ladder_2;
        _1464 = frontier_phi_13_35_ladder_1;
        _1466 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1450 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_572, _573, _574), _1381);
        _1462 = _1450.x * cbModelParam._m0[1u].y;
        _1464 = _1450.y * cbModelParam._m0[1u].y;
        _1466 = _1450.z * cbModelParam._m0[1u].y;
    }
    float _1470 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _414);
    float _1471 = isnan(_1470) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1470 : min(cbModelParam._m0[25u].w, _1470));
    float _1562;
    float _1564;
    float _1566;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1526 = fma(_633, cbModelParam._m0[21u].z, fma(_629, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _625)) + cbModelParam._m0[21u].w;
        float _1530 = fma(_633, cbModelParam._m0[22u].z, fma(_629, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _625)) + cbModelParam._m0[22u].w;
        float _1534 = fma(_633, cbModelParam._m0[23u].z, fma(_629, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _625)) + cbModelParam._m0[23u].w;
        float _1537 = fma(_574, cbModelParam._m0[21u].z, fma(_573, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _572));
        float _1540 = fma(_574, cbModelParam._m0[22u].z, fma(_573, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _572));
        float _1543 = fma(_574, cbModelParam._m0[23u].z, fma(_573, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _572));
        float _1683;
        if (_1537 > 0.0)
        {
            _1683 = abs((1.0 - _1526) / _1537);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1526 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1683 = frontier_phi_25_21_ladder;
        }
        float _1948;
        if (_1540 > 0.0)
        {
            _1948 = abs((1.0 - _1530) / _1540);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1530 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1948 = frontier_phi_37_32_ladder;
        }
        float _2153;
        if (_1543 > 0.0)
        {
            _2153 = abs((1.0 - _1534) / _1543);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1534 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2153 = frontier_phi_46_43_ladder;
        }
        float _2155 = isnan(_1948) ? _1683 : (isnan(_1683) ? _1948 : min(_1683, _1948));
        float _2156 = isnan(_2153) ? _2155 : (isnan(_2155) ? _2153 : min(_2155, _2153));
        float _2160 = (_2156 * _1537) + _1526;
        float _2161 = (_2156 * _1540) + _1530;
        float _2162 = (_2156 * _1543) + _1534;
        float _2163 = _2156 * 9.9999997473787516355514526367188e-05;
        float _2164 = (-1.0) - _2163;
        float _2166 = _2163 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2162 > _2166) || ((_2162 < _2164) || ((_2161 > _2166) || ((_2161 < _2164) || ((_2160 < _2164) || (_2160 > _2166))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2361 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2162, cbModelParam._m0[17u].z, fma(_2161, cbModelParam._m0[17u].y, _2160 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2162, cbModelParam._m0[18u].z, fma(_2161, cbModelParam._m0[18u].y, _2160 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2162, cbModelParam._m0[19u].z, fma(_2161, cbModelParam._m0[19u].y, _2160 * cbModelParam._m0[19u].x))), _1471);
            frontier_phi_22_46_ladder = _2361.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2361.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2361.x * cbModelParam._m0[1u].z;
        }
        _1562 = frontier_phi_22_46_ladder_2;
        _1564 = frontier_phi_22_46_ladder_1;
        _1566 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1546 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_572, _573, _574), _1471);
        _1562 = _1546.x * cbModelParam._m0[1u].z;
        _1564 = _1546.y * cbModelParam._m0[1u].z;
        _1566 = _1546.z * cbModelParam._m0[1u].z;
    }
    float _1578 = ((((1.0 - _593) * ((_580 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_593 * _580)) * _564;
    float _1579 = _1578 * ((cbModelParam._m0[1u].w * (_1562 - _1462)) + _1462);
    float _1580 = _1578 * ((cbModelParam._m0[1u].w * (_1564 - _1464)) + _1464);
    float _1581 = _1578 * ((cbModelParam._m0[1u].w * (_1566 - _1466)) + _1466);
    float _1584 = fma(_1581, cbSceneParam._m0[89u].z, fma(_1580, cbSceneParam._m0[89u].y, _1579 * cbSceneParam._m0[89u].x));
    float _1587 = fma(_1581, cbSceneParam._m0[90u].z, fma(_1580, cbSceneParam._m0[90u].y, _1579 * cbSceneParam._m0[90u].x));
    float _1590 = fma(_1581, cbSceneParam._m0[91u].z, fma(_1580, cbSceneParam._m0[91u].y, _1579 * cbSceneParam._m0[91u].x));
    uvec4 _1600 = floatBitsToUint(cbInstanceData._m0[_218 + 5u]);
    uint _1602 = _1600.x * 14u;
    uint _1603 = _1602 + 13u;
    float _1610 = _564 + (-1.0);
    float _1615 = (cbLight._m0[_1603].x * _1610) + 1.0;
    float _1616 = (cbLight._m0[_1603].y * _1610) + 1.0;
    float _1617 = (cbLight._m0[_1603].z * _1610) + 1.0;
    float _1618 = (cbLight._m0[_1603].w * _1610) + 1.0;
    uint _1619 = _1602 + 5u;
    float _1625 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
    uint _1629 = _1602 + 4u;
    float _1636 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
    uint _1640 = _1602 | 1u;
    float _1651 = dot(vec3(cbLight._m0[_1602].xyz), vec3(_411, _412, _413));
    float _1654 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_411, _412, _413));
    float _3747 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _3758 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
    float _1659 = (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * 0.3183098733425140380859375;
    float _1661 = (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * 0.3183098733425140380859375;
    float _1668 = ((cbLight._m0[_1619].x * _1625) * _1661) + ((cbLight._m0[_1629].x * _1636) * _1659);
    float _1669 = ((_1625 * cbLight._m0[_1619].y) * _1661) + ((_1636 * cbLight._m0[_1629].y) * _1659);
    float _1670 = ((_1625 * cbLight._m0[_1619].z) * _1661) + ((_1636 * cbLight._m0[_1629].z) * _1659);
    uvec4 _1675 = floatBitsToUint(cbLight._m0[_1602 + 12u]);
    bool _1677 = _1675.x == 0u;
    float _1688;
    float _1690;
    float _1692;
    if (_1677)
    {
        _1688 = _1668;
        _1690 = _1669;
        _1692 = _1670;
    }
    else
    {
        uint _1696 = _1602 + 6u;
        float _1712 = (dot(vec3(cbLight._m0[_1602 + 2u].xyz), vec3(_411, _412, _413)) * 0.5) + 0.5;
        float _1713 = _1712 * _1712;
        float _3769 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1715 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
        _1688 = (((cbLight._m0[_1696].x * 0.3183098733425140380859375) * _1714) * _1715) + _1668;
        _1690 = (((cbLight._m0[_1696].y * 0.3183098733425140380859375) * _1714) * _1715) + _1669;
        _1692 = (((cbLight._m0[_1696].z * 0.3183098733425140380859375) * _1714) * _1715) + _1670;
    }
    bool _1695 = _1675.y == 0u;
    float _1733;
    float _1735;
    float _1737;
    if (_1695)
    {
        _1733 = _1688;
        _1735 = _1690;
        _1737 = _1692;
    }
    else
    {
        uint _1892 = _1602 + 7u;
        float _1908 = (dot(vec3(cbLight._m0[_1602 + 3u].xyz), vec3(_411, _412, _413)) * 0.5) + 0.5;
        float _1909 = _1908 * _1908;
        float _3785 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1910 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1911 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
        _1733 = (((cbLight._m0[_1892].x * 0.3183098733425140380859375) * _1910) * _1911) + _1688;
        _1735 = (((cbLight._m0[_1892].y * 0.3183098733425140380859375) * _1910) * _1911) + _1690;
        _1737 = (((cbLight._m0[_1892].z * 0.3183098733425140380859375) * _1910) * _1911) + _1692;
    }
    uint _1740 = _1602 + 8u;
    float _1753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1602].w)) * _414) * 0.949999988079071044921875);
    float _1754 = _1753 * _1753;
    float _1755 = cbLight._m0[_1602].x + _490;
    float _1756 = cbLight._m0[_1602].y + _491;
    float _1757 = cbLight._m0[_1602].z + _492;
    float _1761 = inversesqrt(dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757)));
    float _1762 = _1761 * _1755;
    float _1763 = _1761 * _1756;
    float _1764 = _1761 * _1757;
    float _1765 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_1602].xyz));
    float _3801 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1768 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _1769 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _1770 = dot(vec3(_411, _412, _413), vec3(_1762, _1763, _1764));
    float _3823 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1773 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _1774 = dot(vec3(cbLight._m0[_1602].xyz), vec3(_1762, _1763, _1764));
    float _3834 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1778 = _1754 * _1754;
    float _1782 = ((_1773 * _1773) * (_1778 + (-1.0))) + 1.0;
    float _1793 = (exp2(log2(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1794 = 1.0 - _1754;
    float _1805 = (0.5 / (((_1769 * ((_1768 * _1794) + _1754)) + 9.9999999392252902907785028219223e-09) + (((_1769 * _1794) + _1754) * _1768))) * _1768;
    float _3845 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1807 = (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1778 / ((_1782 * _1782) * 3.141590118408203125));
    uint _1818 = _1602 + 9u;
    float _1829 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1640].w)) * _414) * 0.949999988079071044921875);
    float _1830 = _1829 * _1829;
    float _1831 = cbLight._m0[_1640].x + _490;
    float _1832 = cbLight._m0[_1640].y + _491;
    float _1833 = cbLight._m0[_1640].z + _492;
    float _1837 = inversesqrt(dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833)));
    float _1838 = _1837 * _1831;
    float _1839 = _1837 * _1832;
    float _1840 = _1837 * _1833;
    float _1841 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_1640].xyz));
    float _3856 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1844 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _1845 = dot(vec3(_411, _412, _413), vec3(_1838, _1839, _1840));
    float _3867 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1848 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _1849 = dot(vec3(cbLight._m0[_1640].xyz), vec3(_1838, _1839, _1840));
    float _3878 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1853 = _1830 * _1830;
    float _1857 = ((_1848 * _1848) * (_1853 + (-1.0))) + 1.0;
    float _1866 = (exp2(log2(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1867 = 1.0 - _1830;
    float _1877 = (0.5 / (((_1769 * ((_1844 * _1867) + _1830)) + 9.9999999392252902907785028219223e-09) + (((_1769 * _1867) + _1830) * _1844))) * _1844;
    float _3889 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1879 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1853 / ((_1857 * _1857) * 3.141590118408203125));
    float _1889 = (((_1866 * cbLight._m0[_1818].x) * _1879) * _1625) + (((_1793 * cbLight._m0[_1740].x) * _1807) * _1636);
    float _1890 = (((_1866 * cbLight._m0[_1818].y) * _1879) * _1625) + (((_1793 * cbLight._m0[_1740].y) * _1807) * _1636);
    float _1891 = (((_1866 * cbLight._m0[_1818].z) * _1879) * _1625) + (((_1793 * cbLight._m0[_1740].z) * _1807) * _1636);
    float _1953;
    float _1955;
    float _1957;
    if (_1677)
    {
        _1953 = _1889;
        _1955 = _1890;
        _1957 = _1891;
    }
    else
    {
        uint _1959 = _1602 + 2u;
        uint _1963 = _1602 + 10u;
        float _1977 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1959].w)) * _414) * 0.949999988079071044921875);
        float _1978 = _1977 * _1977;
        float _1979 = cbLight._m0[_1959].x + _490;
        float _1980 = cbLight._m0[_1959].y + _491;
        float _1981 = cbLight._m0[_1959].z + _492;
        float _1985 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
        float _1986 = _1985 * _1979;
        float _1987 = _1985 * _1980;
        float _1988 = _1985 * _1981;
        float _1989 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_1959].xyz));
        float _3900 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1992 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1993 = dot(vec3(_411, _412, _413), vec3(_1986, _1987, _1988));
        float _3911 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1996 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1997 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_1986, _1987, _1988));
        float _3922 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _2001 = _1978 * _1978;
        float _2005 = ((_1996 * _1996) * (_2001 + (-1.0))) + 1.0;
        float _2014 = (exp2(log2(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2015 = 1.0 - _1978;
        float _2025 = (0.5 / (((_1769 * ((_1992 * _2015) + _1978)) + 9.9999999392252902907785028219223e-09) + (((_1769 * _2015) + _1978) * _1992))) * _1992;
        float _3933 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2027 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_2001 / ((_2005 * _2005) * 3.141590118408203125));
        float _2028 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
        _1953 = (((_2014 * cbLight._m0[_1963].x) * _2027) * _2028) + _1889;
        _1955 = (((_2014 * cbLight._m0[_1963].y) * _2027) * _2028) + _1890;
        _1957 = (((_2014 * cbLight._m0[_1963].z) * _2027) * _2028) + _1891;
    }
    float _2063;
    float _2065;
    float _2067;
    if (_1695)
    {
        _2063 = _1953;
        _2065 = _1955;
        _2067 = _1957;
    }
    else
    {
        uint _2074 = _1602 + 3u;
        uint _2078 = _1602 + 11u;
        float _2092 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2074].w)) * _414) * 0.949999988079071044921875);
        float _2093 = _2092 * _2092;
        float _2094 = cbLight._m0[_2074].x + _490;
        float _2095 = cbLight._m0[_2074].y + _491;
        float _2096 = cbLight._m0[_2074].z + _492;
        float _2100 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
        float _2101 = _2100 * _2094;
        float _2102 = _2100 * _2095;
        float _2103 = _2100 * _2096;
        float _2104 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_2074].xyz));
        float _3949 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2107 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _2108 = dot(vec3(_411, _412, _413), vec3(_2101, _2102, _2103));
        float _3960 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2111 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _2112 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2101, _2102, _2103));
        float _3971 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2116 = _2093 * _2093;
        float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
        float _2129 = (exp2(log2(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2130 = 1.0 - _2093;
        float _2140 = (0.5 / (((_1769 * ((_2107 * _2130) + _2093)) + 9.9999999392252902907785028219223e-09) + (((_1769 * _2130) + _2093) * _2107))) * _2107;
        float _3982 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2142 = (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
        float _2143 = isnan(1.0) ? _1618 : (isnan(_1618) ? 1.0 : min(_1618, 1.0));
        _2063 = (((_2129 * cbLight._m0[_2078].x) * _2142) * _2143) + _1953;
        _2065 = (((_2129 * cbLight._m0[_2078].y) * _2142) * _2143) + _1955;
        _2067 = (((_2129 * cbLight._m0[_2078].z) * _2142) * _2143) + _1957;
    }
    float _2278;
    float _2280;
    float _2282;
    float _2284;
    float _2286;
    float _2288;
    if (_1600.y == 0u)
    {
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2219 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2218;
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2218;
        float _2221 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2218;
        uvec4 _2233 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2234 = _2233.x;
        uint _2245 = uint((float(_2233.y) * floor(float(uint(cbSceneParam._m0[85u].y * _499) / _2234))) + floor(float(uint(cbSceneParam._m0[85u].x * _498) / _2234)));
        float _2255 = (log2(_2221 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2256 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        uint _2259 = uint(isnan(14.0) ? _2256 : (isnan(_2256) ? 14.0 : min(_2256, 14.0)));
        uvec4 _2264 = texelFetch(g_lightClusterGridBuffer, int(((_2259 << 2u) + (_2245 << 6u)) >> 2u));
        uint _2265 = _2264.x;
        uint _2266 = _2233.z;
        float _2366;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        float _2376;
        if (((((1u << ((_2266 >> 4u) & 15u)) + 4294967295u) & _2265) == 0u) || ((_2266 & 240u) == 0u))
        {
            _2366 = 0.0;
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
        }
        else
        {
            float _2367;
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2377;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            float _2516 = 0.0;
            uint _2517 = 0u;
            uint _2526;
            bool _2527;
            for (;;)
            {
                _2526 = texelFetch(g_lightClassification, int((((_2259 << 5u) + (_2245 << 9u)) + (_2517 << 2u)) >> 2u)).x;
                _2527 = _2526 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2527)
                {
                    frontier_phi_61_pred = _2511;
                    frontier_phi_61_pred_1 = _2516;
                    frontier_phi_61_pred_2 = _2515;
                    frontier_phi_61_pred_3 = _2514;
                    frontier_phi_61_pred_4 = _2513;
                    frontier_phi_61_pred_5 = _2512;
                }
                else
                {
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    uint _2641;
                    _2635 = _2511;
                    _2636 = _2512;
                    _2637 = _2513;
                    _2638 = _2514;
                    _2639 = _2515;
                    _2640 = _2516;
                    _2641 = _2526;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    float _2572;
                    for (;;)
                    {
                        uint _2645 = uint(findLSB(_2641)) + (_2517 << 5u);
                        uint _2642 = (_2641 + 4294967295u) & _2641;
                        uint _2647 = _2645 * 48u;
                        vec4 _2661 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2647)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 3u)).x));
                        uint _2667 = (_2645 * 48u) + 4u;
                        vec4 _2680 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2667)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 3u)).x));
                        uint _2686 = (_2645 * 48u) + 8u;
                        vec3 _2697 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2686)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 2u)).x));
                        float _2701 = _2661.x - _2219;
                        float _2702 = _2661.y - _2220;
                        float _2703 = _2661.z - _2221;
                        float _2704 = dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703));
                        float _2707 = inversesqrt(_2704);
                        float _2708 = _2707 * _2701;
                        float _2709 = _2707 * _2702;
                        float _2710 = _2707 * _2703;
                        float _2711 = dot(vec3(_520, _523, _526), vec3(_2708, _2709, _2710));
                        float _2716 = 1.0 - (_2704 * _2661.w);
                        float _4008 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
                        float _2717 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                        float _2718 = sqrt(_2704) * _2680.w;
                        float _2721 = 1.39999997615814208984375 / (_2718 + 1.39999997615814208984375);
                        float _2722 = _2721 * _2721;
                        float _2725 = ((1.0 - _2722) * _2711) + _2722;
                        float _2728 = _2718 * _2718;
                        float _2732 = ((isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0))) * _2717) / ((_2728 * 0.699999988079071044921875) + 1.0);
                        float _2736 = (-0.0) - _2219;
                        float _2737 = (-0.0) - _2220;
                        float _2738 = (-0.0) - _2221;
                        float _2742 = inversesqrt(dot(vec3(_2736, _2737, _2738), vec3(_2736, _2737, _2738)));
                        float _2743 = _2742 * _2736;
                        float _2744 = _2742 * _2737;
                        float _2745 = _2742 * _2738;
                        float _2753 = exp2(log2(1.0 / ((_2728 * 3.5) + 5.0)) * 0.25);
                        float _2754 = 1.0 - _580;
                        float _2761 = sqrt(1.0 - ((1.0 - (_2754 * _2754)) * (1.0 - (_2753 * _2753))));
                        float _2762 = _2761 * _2761;
                        float _2763 = _2762 * _2762;
                        float _2764 = _2743 + _2708;
                        float _2765 = _2744 + _2709;
                        float _2766 = _2745 + _2710;
                        float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
                        float _2774 = dot(vec3(_520, _523, _526), vec3(_2743, _2744, _2745));
                        float _4024 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2777 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                        float _2778 = dot(vec3(_520, _523, _526), vec3(_2770 * _2764, _2770 * _2765, _2770 * _2766));
                        float _4035 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2781 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                        float _2785 = ((_2781 * _2781) * (_2763 + (-1.0))) + 1.0;
                        float _2786 = _2721 * _2762;
                        float _2787 = _2786 * _2786;
                        float _2790 = ((1.0 - _2787) * _2711) + _2787;
                        float _4046 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2791 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
                        float _2792 = 1.0 - _2762;
                        float _2802 = (0.5 / (((_2791 * ((_2777 * _2792) + _2762)) + 9.9999999392252902907785028219223e-09) + (((_2791 * _2792) + _2762) * _2777))) * _2791;
                        float _4057 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2813 = (((_2763 * 3.1415927410125732421875) * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) / ((_2785 * _2785) * ((_2728 * 2.1991131305694580078125) + 3.141590118408203125))) * _2717;
                        _2570 = (_2732 * _2680.x) + _2638;
                        _2571 = (_2732 * _2680.y) + _2639;
                        _2572 = (_2732 * _2680.z) + _2640;
                        _2567 = (_2813 * _2697.x) + _2635;
                        _2568 = (_2813 * _2697.y) + _2636;
                        _2569 = (_2813 * _2697.z) + _2637;
                        if (_2642 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2635 = _2567;
                            _2636 = _2568;
                            _2637 = _2569;
                            _2638 = _2570;
                            _2639 = _2571;
                            _2640 = _2572;
                            _2641 = _2642;
                        }
                    }
                    frontier_phi_61_pred = _2567;
                    frontier_phi_61_pred_1 = _2572;
                    frontier_phi_61_pred_2 = _2571;
                    frontier_phi_61_pred_3 = _2570;
                    frontier_phi_61_pred_4 = _2569;
                    frontier_phi_61_pred_5 = _2568;
                }
                _2367 = frontier_phi_61_pred;
                _2377 = frontier_phi_61_pred_1;
                _2375 = frontier_phi_61_pred_2;
                _2373 = frontier_phi_61_pred_3;
                _2371 = frontier_phi_61_pred_4;
                _2369 = frontier_phi_61_pred_5;
                uint _2518 = _2517 + 1u;
                if (_2518 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2511 = _2367;
                    _2512 = _2369;
                    _2513 = _2371;
                    _2514 = _2373;
                    _2515 = _2375;
                    _2516 = _2377;
                    _2517 = _2518;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2366 = _2367;
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
        }
        uvec4 _2380 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2381 = _2380.z;
        uint _2383 = (_2381 >> 8u) & 15u;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        if (((4294967295u << _2383) & _2265) == 0u)
        {
            _2479 = _2366;
            _2481 = _2368;
            _2483 = _2370;
            _2485 = _2372;
            _2487 = _2374;
            _2489 = _2376;
        }
        else
        {
            float _2504 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
            float _2505 = _2504 * _2219;
            float _2506 = _2504 * _2220;
            float _2507 = _2504 * _2221;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2383 < ((_2381 >> 12u) & 15u))
            {
                float _2480;
                float _2482;
                float _2484;
                float _2486;
                float _2488;
                float _2490;
                float _2618 = _2366;
                float _2619 = _2368;
                float _2620 = _2370;
                float _2621 = _2372;
                float _2622 = _2374;
                float _2623 = _2376;
                uint _2624 = _2383;
                uint _2633;
                bool _2634;
                for (;;)
                {
                    _2633 = texelFetch(g_lightClassification, int((((_2259 << 5u) + (_2245 << 9u)) + (_2624 << 2u)) >> 2u)).x;
                    _2634 = _2633 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2634)
                    {
                        frontier_phi_67_pred = _2621;
                        frontier_phi_67_pred_1 = _2622;
                        frontier_phi_67_pred_2 = _2623;
                        frontier_phi_67_pred_3 = _2620;
                        frontier_phi_67_pred_4 = _2619;
                        frontier_phi_67_pred_5 = _2618;
                    }
                    else
                    {
                        float _2818;
                        float _2819;
                        float _2820;
                        float _2821;
                        float _2822;
                        float _2823;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _2831 = _2618;
                        float _2832 = _2619;
                        float _2833 = _2620;
                        float _2834 = _2621;
                        float _2835 = _2622;
                        float _2836 = _2623;
                        uint _2837 = _2633;
                        uint _2838;
                        vec4 _2863;
                        float _2864;
                        vec4 _2879;
                        vec3 _2891;
                        vec4 _2907;
                        vec4 _2923;
                        float _2969;
                        bool _2970;
                        for (;;)
                        {
                            uint _2848 = ((_2624 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2837));
                            _2838 = (_2837 + 4294967295u) & _2837;
                            uint _2850 = _2848 * 40u;
                            _2863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 3u)).x));
                            _2864 = _2863.w;
                            uint _2866 = (_2848 * 40u) + 4u;
                            _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            uint _2881 = (_2848 * 40u) + 8u;
                            _2891 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 2u)).x));
                            uint _2894 = (_2848 * 40u) + 16u;
                            _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            uint _2910 = (_2848 * 40u) + 20u;
                            _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            uint _2925 = (_2848 * 40u) + 24u;
                            vec4 _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            uint _2944 = (_2848 * 40u) + 28u;
                            vec4 _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            _2969 = fma(_2221, _2957.z, fma(_2220, _2957.y, _2957.x * _2219)) + _2957.w;
                            _2970 = !((fma(_2221, _2938.z, fma(_2220, _2938.y, _2938.x * _2219)) + _2938.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2970)
                            {
                                float _2997 = _2863.x - _2219;
                                float _2998 = _2863.y - _2220;
                                float _2999 = _2863.z - _2221;
                                float _3000 = dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999));
                                float _3003 = inversesqrt(_3000);
                                float _3004 = _3003 * _2997;
                                float _3005 = _3003 * _2998;
                                float _3006 = _3003 * _2999;
                                float _3010 = 1.0 - (_3000 / (_2864 * _2864));
                                float _4068 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3011 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3015 = sqrt(_3000) * _2879.w;
                                float _3017 = 1.39999997615814208984375 / (_3015 + 1.39999997615814208984375);
                                float _3018 = _3017 * _3017;
                                float _3021 = ((1.0 - _3018) * dot(vec3(_3004, _3005, _3006), vec3(_520, _523, _526))) + _3018;
                                float _3024 = _3015 * _3015;
                                float _3028 = (fma(_2221, _2907.z, fma(_2220, _2907.y, _2907.x * _2219)) + _2907.w) / _2969;
                                float _3029 = (fma(_2221, _2923.z, fma(_2220, _2923.y, _2923.x * _2219)) + _2923.w) / _2969;
                                float _3033 = 1.0 - dot(vec2(_3028, _3029), vec2(_3028, _3029));
                                float _4084 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                                float _3034 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3035 = _3034 * (((isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0))) * _3011) / ((_3024 * 0.699999988079071044921875) + 1.0));
                                float _3047 = exp2(log2(1.0 / ((_3024 * 3.5) + 5.0)) * 0.25);
                                float _3048 = 1.0 - _580;
                                float _3055 = sqrt(1.0 - ((1.0 - (_3048 * _3048)) * (1.0 - (_3047 * _3047))));
                                float _3056 = _3055 * _3055;
                                float _3057 = _3056 * _3056;
                                float _3058 = _3004 - _2505;
                                float _3059 = _3005 - _2506;
                                float _3060 = _3006 - _2507;
                                float _3064 = inversesqrt(dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060)));
                                float _3068 = dot(vec3(_520, _523, _526), vec3((-0.0) - _2505, (-0.0) - _2506, (-0.0) - _2507));
                                float _4095 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3071 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                                float _3072 = dot(vec3(_520, _523, _526), vec3(_3064 * _3058, _3064 * _3059, _3064 * _3060));
                                float _4106 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3075 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                                float _3079 = ((_3075 * _3075) * (_3057 + (-1.0))) + 1.0;
                                float _3080 = _3017 * _3056;
                                float _3081 = _3080 * _3080;
                                float _3087 = ((1.0 - _3081) * dot(vec3(_520, _523, _526), vec3(_3004, _3005, _3006))) + _3081;
                                float _4117 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3088 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                                float _3089 = 1.0 - _3056;
                                float _3099 = (0.5 / (((_3088 * ((_3071 * _3089) + _3056)) + 9.9999999392252902907785028219223e-09) + (((_3088 * _3089) + _3056) * _3071))) * _3088;
                                float _4128 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3109 = (_3034 * _3011) * (((_3057 * 3.1415927410125732421875) * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) / ((_3079 * _3079) * ((_3024 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3109 * _2891.x;
                                frontier_phi_73_pred_1 = _3109 * _2891.y;
                                frontier_phi_73_pred_2 = _3035 * _2879.z;
                                frontier_phi_73_pred_3 = _3035 * _2879.y;
                                frontier_phi_73_pred_4 = _3035 * _2879.x;
                                frontier_phi_73_pred_5 = _3109 * _2891.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3113 = frontier_phi_73_pred;
                            _3114 = frontier_phi_73_pred_1;
                            _3118 = frontier_phi_73_pred_2;
                            _3117 = frontier_phi_73_pred_3;
                            _3116 = frontier_phi_73_pred_4;
                            _3115 = frontier_phi_73_pred_5;
                            _2821 = _3116 + _2834;
                            _2822 = _3117 + _2835;
                            _2823 = _3118 + _2836;
                            _2818 = _3113 + _2831;
                            _2819 = _3114 + _2832;
                            _2820 = _3115 + _2833;
                            if (_2838 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2831 = _2818;
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2838;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2821;
                        frontier_phi_67_pred_1 = _2822;
                        frontier_phi_67_pred_2 = _2823;
                        frontier_phi_67_pred_3 = _2820;
                        frontier_phi_67_pred_4 = _2819;
                        frontier_phi_67_pred_5 = _2818;
                    }
                    _2486 = frontier_phi_67_pred;
                    _2488 = frontier_phi_67_pred_1;
                    _2490 = frontier_phi_67_pred_2;
                    _2484 = frontier_phi_67_pred_3;
                    _2482 = frontier_phi_67_pred_4;
                    _2480 = frontier_phi_67_pred_5;
                    uint _2625 = _2624 + 1u;
                    if (_2625 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2618 = _2480;
                        _2619 = _2482;
                        _2620 = _2484;
                        _2621 = _2486;
                        _2622 = _2488;
                        _2623 = _2490;
                        _2624 = _2625;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2488;
                frontier_phi_55_56_ladder_1 = _2490;
                frontier_phi_55_56_ladder_2 = _2486;
                frontier_phi_55_56_ladder_3 = _2484;
                frontier_phi_55_56_ladder_4 = _2482;
                frontier_phi_55_56_ladder_5 = _2480;
            }
            else
            {
                frontier_phi_55_56_ladder = _2374;
                frontier_phi_55_56_ladder_1 = _2376;
                frontier_phi_55_56_ladder_2 = _2372;
                frontier_phi_55_56_ladder_3 = _2370;
                frontier_phi_55_56_ladder_4 = _2368;
                frontier_phi_55_56_ladder_5 = _2366;
            }
            _2479 = frontier_phi_55_56_ladder_5;
            _2481 = frontier_phi_55_56_ladder_4;
            _2483 = frontier_phi_55_56_ladder_3;
            _2485 = frontier_phi_55_56_ladder_2;
            _2487 = frontier_phi_55_56_ladder;
            _2489 = frontier_phi_55_56_ladder_1;
        }
        float _2494 = isnan(1.0) ? _564 : (isnan(_564) ? 1.0 : min(_564, 1.0));
        _2278 = (_2494 * _2485) + _1733;
        _2280 = (_2494 * _2487) + _1735;
        _2282 = (_2494 * _2489) + _1737;
        _2284 = ((_2479 * 0.039999999105930328369140625) * _2494) + _2063;
        _2286 = ((_2481 * 0.039999999105930328369140625) * _2494) + _2065;
        _2288 = ((_2483 * 0.039999999105930328369140625) * _2494) + _2067;
    }
    else
    {
        _2278 = _1733;
        _2280 = _1735;
        _2282 = _1737;
        _2284 = _2063;
        _2286 = _2065;
        _2288 = _2067;
    }
    float _4144 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _4155 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _4166 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    uint _2308 = _218 + 6u;
    float _2316 = _498 / cbSceneParam._m0[86u].x;
    float _2317 = _499 / cbSceneParam._m0[86u].y;
    vec4 _2331 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2316, _2317, (log2((isnan(cbSceneParam._m0[77u].w) ? _432 : (isnan(_432) ? cbSceneParam._m0[77u].w : min(_432, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2333 = _2331.x;
    float _2334 = _2331.y;
    float _2335 = _2331.z;
    float _2336 = _2331.w;
    float _2429;
    float _2431;
    float _2433;
    float _2435;
    if (_432 > cbSceneParam._m0[78u].w)
    {
        float _2391 = isnan(_432) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _432 : min(cbSceneParam._m0[80u].w, _432));
        float _2392 = _2391 / _432;
        float _2403 = _2392 * _483;
        float _2404 = _484 * _2392;
        float _2405 = (-0.0) - _2404;
        float _2407 = _2392 * _485;
        float _2409 = (cbSceneParam._m0[77u].w * _2405) / _2391;
        float _2410 = _2409 + cbSceneParam._m0[79u].w;
        float _2411 = cbSceneParam._m0[79u].w - _2404;
        float _2417 = sqrt(((_2403 * _2403) + (_2404 * _2404)) + (_2407 * _2407));
        float _2420 = (1.0 - (cbSceneParam._m0[77u].w / _2391)) * _2417;
        float _2425 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2427 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2580;
        if (abs((_2405 - _2409) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2580 = ((((_2410 > 0.0) ? exp2(_2425 * _2410) : (2.0 - exp2(_2427 * _2410))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2420;
        }
        else
        {
            float _2540 = 1.0 / cbSceneParam._m0[80u].x;
            float _2541 = isnan(_2411) ? _2410 : (isnan(_2410) ? _2411 : max(_2410, _2411));
            float _2542 = isnan(_2411) ? _2410 : (isnan(_2410) ? _2411 : min(_2410, _2411));
            float _2551 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : min(_2541, 0.0));
            float _2552 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : min(_2542, 0.0));
            _2580 = ((abs(_2417 / _2405) * cbSceneParam._m0[80u].y) * ((((_2551 - _2552) * 2.0) - ((exp2(_2425 * (isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0)))) - exp2(_2425 * (isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0))))) * _2540)) - ((exp2(_2427 * _2551) - exp2(_2427 * _2552)) * _2540))) + (_2420 * cbSceneParam._m0[80u].z);
        }
        vec4 _2582 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2316, _2317, 1.0), 0.0);
        float _2591 = exp2((_2580 * (-1.44269502162933349609375)) * (1.0 - _2582.w));
        float _2592 = log2(_2591);
        float _2608 = log2(_2336);
        _2429 = (exp2(_2608 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2592 * cbSceneParam._m0[78u].x)) * _2582.x) / cbSceneParam._m0[78u].x)) + _2333;
        _2431 = (exp2(_2608 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2592 * cbSceneParam._m0[78u].y)) * _2582.y) / cbSceneParam._m0[78u].y)) + _2334;
        _2433 = (exp2(_2608 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2592 * cbSceneParam._m0[78u].z)) * _2582.z) / cbSceneParam._m0[78u].z)) + _2335;
        _2435 = _2591 * _2336;
    }
    else
    {
        _2429 = _2333;
        _2431 = _2334;
        _2433 = _2335;
        _2435 = _2336;
    }
    float _2447 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2448 = _2447 == 3.0;
    float _2449 = log2(_2435);
    float _2456 = exp2(_2449 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2278 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _564))) + ((_2284 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _1370)) * cbPerFrame._m0[3u].x));
    float _2457 = exp2(_2449 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2280 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _564))) + ((_2286 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1370)) * cbPerFrame._m0[3u].x));
    float _2458 = exp2(_2449 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2282 + ((isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))) * _564))) + ((_2288 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _1370)) * cbPerFrame._m0[3u].x));
    float _2467 = (_2447 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2467 * (_2448 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2429)));
    SV_Target.y = _2467 * (_2448 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2431)));
    SV_Target.z = _2467 * (_2448 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2433)));
    SV_Target.w = cbInstanceData._m0[_2308].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2308].w;
}


