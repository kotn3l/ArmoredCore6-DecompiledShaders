#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1032;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _247 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _253 = _247.x * cbMtdParam._m0[9u].x;
    float _254 = _247.y * cbMtdParam._m0[9u].y;
    float _255 = _247.z * cbMtdParam._m0[9u].z;
    vec4 _268 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _272 = _268.z;
    float _277 = (_268.x * 2.0) + (-1.0);
    float _279 = (_268.y * 2.0) + (-1.0);
    float _280 = dot(vec2(_277, _279), vec2(_277, _279));
    float _3342 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _286 = sqrt(1.0 - (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _322 = _320.x;
    float _323 = 1.0 - _322;
    float _356 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_322 - _323) * cbMtdParam._m0[24u].w) + _323) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3353 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _357 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    float _365 = ((((cbMtdParam._m0[10u].x - _253) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _357) + _253;
    float _366 = ((((cbMtdParam._m0[10u].y - _254) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _357) + _254;
    float _367 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _255)) * _357) + _255;
    float _371 = ((cbMtdParam._m0[23u].y - _272) * _357) + _272;
    vec4 _393 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _395 = _393.x;
    float _396 = _393.y;
    float _405 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_217, _218, _219, 0.0));
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _306) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _307) + cbTextureTilingScale._m0[18u].w));
    float _422 = _420.x;
    float _427 = fract(_420.w + cbPerFrame._m0[22u].x);
    float _429 = (1.0 - _427) * _422;
    float _434 = ((_427 + (-1.0)) + _422) * 9.0;
    float _436 = ((_422 + (-1.0)) + _427) * 9.0;
    float _437 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _438 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _452 = (_429 * ((_420.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _437 : (isnan(_437) ? 3.0 : min(_437, 3.0))) * 3.1415927410125732421875);
    float _454 = (_429 * ((_420.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _438 : (isnan(_438) ? 3.0 : min(_438, 3.0))) * 3.1415927410125732421875);
    float _458 = inversesqrt(dot(vec3(_452, _454, 1.0), vec3(_452, _454, 1.0)));
    float _474 = (((((0.5 - _395) + ((_452 * 0.5) * _458)) * _405) + _395) * 2.0) + (-1.0);
    float _475 = (((((0.5 - _396) + ((_458 * 0.5) * _454)) * _405) + _396) * 2.0) + (-1.0);
    float _476 = dot(vec2(_474, _475), vec2(_474, _475));
    float _3384 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _492 = ((((cbMtdParam._m0[22u].z * _277) - _277) + _474) * _357) + _277;
    float _493 = ((((cbMtdParam._m0[22u].z * _279) - _279) + _475) * _357) + _279;
    float _494 = (_357 * (sqrt(1.0 - (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0)))) - _286)) + _286;
    float _496 = cbMtdParam._m0[22u].x + _268.w;
    float _499 = fma(_494, _217, fma(_493, _223 * TANGENT.x, (_209 * _201) * _492));
    float _502 = fma(_494, _218, fma(_493, _223 * TANGENT.y, (_209 * _202) * _492));
    float _505 = fma(_494, _219, fma(_493, _223 * TANGENT.z, (_209 * _203) * _492));
    float _509 = inversesqrt(dot(vec3(_499, _502, _505), vec3(_499, _502, _505)));
    float _510 = _509 * _499;
    float _511 = _509 * _502;
    float _512 = _509 * _505;
    float _3395 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _513 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
    float _3406 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3417 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _3428 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _3439 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _531 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _582 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _572);
    float _583 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _572);
    float _584 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _572);
    float _588 = inversesqrt(dot(vec3(_582, _583, _584), vec3(_582, _583, _584)));
    float _589 = _582 * _588;
    float _590 = _583 * _588;
    float _591 = _584 * _588;
    float _597 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _598 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _619 = fma(_512, cbSceneParam._m0[5u].z, fma(_511, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _510));
    float _622 = fma(_512, cbSceneParam._m0[6u].z, fma(_511, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _510));
    float _625 = fma(_512, cbSceneParam._m0[7u].z, fma(_511, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _510));
    uint _639 = (_287 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _645 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0)))) * cbInstanceData._m0[_639].x;
    float _646 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0)))) * cbInstanceData._m0[_639].y;
    float _647 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0)))) * cbInstanceData._m0[_639].z;
    float _3450 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _3461 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _3472 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    vec4 _659 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _597, cbSceneParam._m0[86u].y * _598));
    float _663 = ((isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) * TEXCOORD_5.w) * _659.x;
    float _664 = dot(vec3(_510, _511, _512), vec3(_589, _590, _591));
    float _667 = _664 * 2.0;
    float _671 = (_667 * _510) - _589;
    float _672 = (_667 * _511) - _590;
    float _673 = (_667 * _512) - _591;
    float _677 = abs(dot(vec3(_589, _590, _591), vec3(_510, _511, _512)));
    float _3483 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _679 = sqrt(_513);
    float _691 = exp2((_679 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_679 * 3.0));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1031;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _757 = fma(_731, cbModelParam._m0[26u].z, fma(_727, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _723));
        float _761 = fma(_731, cbModelParam._m0[27u].z, fma(_727, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _723));
        float _765 = fma(_731, cbModelParam._m0[28u].z, fma(_727, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _723));
        float _789 = _723 + _510;
        float _790 = _727 + _511;
        float _791 = _731 + _512;
        float _801 = fma(_791, cbModelParam._m0[26u].z, fma(_790, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _789)) - _757;
        float _802 = fma(_791, cbModelParam._m0[27u].z, fma(_790, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _789)) - _761;
        float _803 = fma(_791, cbModelParam._m0[28u].z, fma(_790, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _789)) - _765;
        float _807 = inversesqrt(dot(vec3(_801, _802, _803), vec3(_801, _802, _803)));
        float _820 = ((_807 * _801) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_757 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _821 = ((_807 * _802) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_761 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _822 = ((_807 * _803) / cbModelParam._m0[34u].z) + ((((((_765 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        float _859 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_825.x + (-0.5));
        float _861 = _859 * (_825.y + (-0.5));
        float _862 = _859 * (_825.z + (-0.5));
        float _869 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_832.x + (-0.5));
        float _871 = _869 * (_832.y + (-0.5));
        float _872 = _869 * (_832.z + (-0.5));
        float _879 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_839.x + (-0.5));
        float _881 = _879 * (_839.y + (-0.5));
        float _882 = _879 * (_839.z + (-0.5));
        float _889 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_846.x + (-0.5));
        float _891 = _889 * (_846.y + (-0.5));
        float _892 = _889 * (_846.z + (-0.5));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = _860 * 0.5;
        float _897 = _870 * 0.5;
        float _898 = _880 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _913 = (dot(vec3(_510, _511, _512), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _923 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3531 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_925 + 1.0))) + _930) * _893;
        float _940 = _861 * 0.5;
        float _941 = _871 * 0.5;
        float _942 = _881 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _956 = (dot(vec3(_510, _511, _512), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3542 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _965 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3553 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _3564 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * (_967 + 1.0))) + _972) * _894;
        float _982 = _862 * 0.5;
        float _983 = _872 * 0.5;
        float _984 = _882 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _998 = (dot(vec3(_510, _511, _512), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3575 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1007 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3586 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3597 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (_1009 + 1.0))) + _1014) * _895;
        _1031 = _862;
        _1033 = _861;
        _1034 = _860;
        _1035 = _872;
        _1036 = _871;
        _1037 = _870;
        _1038 = _882;
        _1039 = _881;
        _1040 = _880;
        _1041 = _895;
        _1042 = _894;
        _1043 = _893;
        _1044 = cbModelParam._m0[36u].z * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
    }
    else
    {
        _1031 = _1032;
        _1033 = _1032;
        _1034 = _1032;
        _1035 = _1032;
        _1036 = _1032;
        _1037 = _1032;
        _1038 = _1032;
        _1039 = _1032;
        _1040 = _1032;
        _1041 = _1032;
        _1042 = _1032;
        _1043 = _1032;
        _1044 = 0.0;
        _1045 = 0.0;
        _1046 = 0.0;
    }
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1071 = fma(_731, cbModelParam._m0[30u].z, fma(_727, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _723));
        float _1075 = fma(_731, cbModelParam._m0[31u].z, fma(_727, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _723));
        float _1079 = fma(_731, cbModelParam._m0[32u].z, fma(_727, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _723));
        float _1102 = _723 + _510;
        float _1103 = _727 + _511;
        float _1104 = _731 + _512;
        float _1114 = fma(_1104, cbModelParam._m0[30u].z, fma(_1103, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1102)) - _1071;
        float _1115 = fma(_1104, cbModelParam._m0[31u].z, fma(_1103, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1102)) - _1075;
        float _1116 = fma(_1104, cbModelParam._m0[32u].z, fma(_1103, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1102)) - _1079;
        float _1120 = inversesqrt(dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116)));
        float _1133 = ((_1120 * _1114) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1071 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1120 * _1115) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1075 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1120 * _1116) / cbModelParam._m0[35u].z) + ((((((_1079 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        float _1170 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1137.x + (-0.5));
        float _1172 = _1170 * (_1137.y + (-0.5));
        float _1173 = _1170 * (_1137.z + (-0.5));
        float _1180 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1144.x + (-0.5));
        float _1182 = _1180 * (_1144.y + (-0.5));
        float _1183 = _1180 * (_1144.z + (-0.5));
        float _1190 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1151.x + (-0.5));
        float _1192 = _1190 * (_1151.y + (-0.5));
        float _1193 = _1190 * (_1151.z + (-0.5));
        float _1200 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1158.x + (-0.5));
        float _1202 = _1200 * (_1158.y + (-0.5));
        float _1203 = _1200 * (_1158.z + (-0.5));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = _1171 * 0.5;
        float _1208 = _1181 * 0.5;
        float _1209 = _1191 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_510, _511, _512), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3660 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1234 + 1.0))) + _1239) * _1204;
        float _1249 = _1172 * 0.5;
        float _1250 = _1182 * 0.5;
        float _1251 = _1192 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_510, _511, _512), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3693 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_1276 + 1.0))) + _1281) * _1205;
        float _1291 = _1173 * 0.5;
        float _1292 = _1183 * 0.5;
        float _1293 = _1193 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_510, _511, _512), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3726 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1318 + 1.0))) + _1323) * _1206;
        _1340 = _1173;
        _1341 = _1172;
        _1342 = _1171;
        _1343 = _1183;
        _1344 = _1182;
        _1345 = _1181;
        _1346 = _1193;
        _1347 = _1192;
        _1348 = _1191;
        _1349 = _1206;
        _1350 = _1205;
        _1351 = _1204;
        _1352 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1354 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
    }
    else
    {
        _1340 = _1032;
        _1341 = _1032;
        _1342 = _1032;
        _1343 = _1032;
        _1344 = _1032;
        _1345 = _1032;
        _1346 = _1032;
        _1347 = _1032;
        _1348 = _1032;
        _1349 = _1032;
        _1350 = _1032;
        _1351 = _1032;
        _1352 = 0.0;
        _1353 = 0.0;
        _1354 = 0.0;
    }
    float _1364 = (cbModelParam._m0[1u].x * (_1352 - _1044)) + _1044;
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1045)) + _1045;
    float _1366 = (cbModelParam._m0[1u].x * (_1354 - _1046)) + _1046;
    float _1387 = fma(_1366, cbSceneParam._m0[89u].z, fma(_1365, cbSceneParam._m0[89u].y, _1364 * cbSceneParam._m0[89u].x));
    float _1390 = fma(_1366, cbSceneParam._m0[90u].z, fma(_1365, cbSceneParam._m0[90u].y, _1364 * cbSceneParam._m0[90u].x));
    float _1393 = fma(_1366, cbSceneParam._m0[91u].z, fma(_1365, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1364));
    float _1408 = _671 * 0.5;
    float _1409 = _672 * 0.5;
    float _1410 = _673 * 0.5;
    float _1411 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1342, _1345, _1348, _1351));
    float _1414 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1417 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1340, _1343, _1346, _1349));
    float _1451;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1424 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1031, _1035, _1038, _1041));
        float _1428 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1033, _1036, _1039, _1042));
        float _1432 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1034, _1037, _1040, _1043));
        float _1439 = dot(vec4(cbModelParam._m0[39u]), vec4(_1408, _1409, _1410, 1.0));
        _1451 = dot(vec3(isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1439) ? 0.0 : (isnan(0.0) ? _1439 : max(0.0, _1439))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1451 = 1.0;
    }
    float _1462;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1453 = dot(vec4(cbModelParam._m0[40u]), vec4(_1408, _1409, _1410, 1.0));
        _1462 = dot(vec3(isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1462 = 1.0;
    }
    float _1466 = (_1462 * cbModelParam._m0[1u].x) + (_1451 * (1.0 - cbModelParam._m0[1u].x));
    float _1476 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _513);
    float _1477 = isnan(_1476) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1476 : min(cbModelParam._m0[25u].z, _1476));
    float _1559;
    float _1561;
    float _1563;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1526 = fma(_731, cbModelParam._m0[13u].z, fma(_727, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _723)) + cbModelParam._m0[13u].w;
        float _1530 = fma(_731, cbModelParam._m0[14u].z, fma(_727, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _723)) + cbModelParam._m0[14u].w;
        float _1534 = fma(_731, cbModelParam._m0[15u].z, fma(_727, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _723)) + cbModelParam._m0[15u].w;
        float _1537 = fma(_673, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671));
        float _1540 = fma(_673, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671));
        float _1543 = fma(_673, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671));
        float _1571;
        if (_1537 > 0.0)
        {
            _1571 = abs((1.0 - _1526) / _1537);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1526 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1571 = frontier_phi_14_12_ladder;
        }
        float _1774;
        if (_1540 > 0.0)
        {
            _1774 = abs((1.0 - _1530) / _1540);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1530 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1774 = frontier_phi_23_19_ladder;
        }
        float _2017;
        if (_1543 > 0.0)
        {
            _2017 = abs((1.0 - _1534) / _1543);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1534 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2017 = frontier_phi_35_30_ladder;
        }
        float _2019 = isnan(_1774) ? _1571 : (isnan(_1571) ? _1774 : min(_1571, _1774));
        float _2020 = isnan(_2017) ? _2019 : (isnan(_2019) ? _2017 : min(_2019, _2017));
        float _2024 = (_2020 * _1537) + _1526;
        float _2025 = (_2020 * _1540) + _1530;
        float _2026 = (_2020 * _1543) + _1534;
        float _2027 = _2020 * 9.9999997473787516355514526367188e-05;
        float _2029 = (-1.0) - _2027;
        float _2031 = _2027 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2026 > _2031) || ((_2026 < _2029) || ((_2025 > _2031) || ((_2025 < _2029) || ((_2024 < _2029) || (_2024 > _2031))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2150 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2026, cbModelParam._m0[9u].z, fma(_2025, cbModelParam._m0[9u].y, _2024 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2026, cbModelParam._m0[10u].z, fma(_2025, cbModelParam._m0[10u].y, _2024 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2026, cbModelParam._m0[11u].z, fma(_2025, cbModelParam._m0[11u].y, _2024 * cbModelParam._m0[11u].x))), _1477);
            frontier_phi_13_35_ladder = _2150.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2150.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2150.x * cbModelParam._m0[1u].y;
        }
        _1559 = frontier_phi_13_35_ladder_2;
        _1561 = frontier_phi_13_35_ladder_1;
        _1563 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1547 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_671, _672, _673), _1477);
        _1559 = _1547.x * cbModelParam._m0[1u].y;
        _1561 = _1547.y * cbModelParam._m0[1u].y;
        _1563 = _1547.z * cbModelParam._m0[1u].y;
    }
    float _1567 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _513);
    float _1568 = isnan(_1567) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1567 : min(cbModelParam._m0[25u].w, _1567));
    float _1658;
    float _1660;
    float _1662;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1622 = fma(_731, cbModelParam._m0[21u].z, fma(_727, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _723)) + cbModelParam._m0[21u].w;
        float _1626 = fma(_731, cbModelParam._m0[22u].z, fma(_727, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _723)) + cbModelParam._m0[22u].w;
        float _1630 = fma(_731, cbModelParam._m0[23u].z, fma(_727, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _723)) + cbModelParam._m0[23u].w;
        float _1633 = fma(_673, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671));
        float _1636 = fma(_673, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671));
        float _1639 = fma(_673, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671));
        float _1779;
        if (_1633 > 0.0)
        {
            _1779 = abs((1.0 - _1622) / _1633);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1622 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1779 = frontier_phi_25_21_ladder;
        }
        float _2044;
        if (_1636 > 0.0)
        {
            _2044 = abs((1.0 - _1626) / _1636);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1626 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2044 = frontier_phi_37_32_ladder;
        }
        float _2249;
        if (_1639 > 0.0)
        {
            _2249 = abs((1.0 - _1630) / _1639);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1630 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2249 = frontier_phi_46_43_ladder;
        }
        float _2251 = isnan(_2044) ? _1779 : (isnan(_1779) ? _2044 : min(_1779, _2044));
        float _2252 = isnan(_2249) ? _2251 : (isnan(_2251) ? _2249 : min(_2251, _2249));
        float _2256 = (_2252 * _1633) + _1622;
        float _2257 = (_2252 * _1636) + _1626;
        float _2258 = (_2252 * _1639) + _1630;
        float _2259 = _2252 * 9.9999997473787516355514526367188e-05;
        float _2260 = (-1.0) - _2259;
        float _2262 = _2259 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2258 > _2262) || ((_2258 < _2260) || ((_2257 > _2262) || ((_2257 < _2260) || ((_2256 < _2260) || (_2256 > _2262))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2457 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2258, cbModelParam._m0[17u].z, fma(_2257, cbModelParam._m0[17u].y, _2256 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2258, cbModelParam._m0[18u].z, fma(_2257, cbModelParam._m0[18u].y, _2256 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2258, cbModelParam._m0[19u].z, fma(_2257, cbModelParam._m0[19u].y, _2256 * cbModelParam._m0[19u].x))), _1568);
            frontier_phi_22_46_ladder = _2457.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2457.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2457.x * cbModelParam._m0[1u].z;
        }
        _1658 = frontier_phi_22_46_ladder_2;
        _1660 = frontier_phi_22_46_ladder_1;
        _1662 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1642 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_671, _672, _673), _1568);
        _1658 = _1642.x * cbModelParam._m0[1u].z;
        _1660 = _1642.y * cbModelParam._m0[1u].z;
        _1662 = _1642.z * cbModelParam._m0[1u].z;
    }
    float _1674 = ((((1.0 - _691) * ((_679 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_691 * _679)) * _663;
    float _1675 = _1674 * ((cbModelParam._m0[1u].w * (_1658 - _1559)) + _1559);
    float _1676 = _1674 * ((cbModelParam._m0[1u].w * (_1660 - _1561)) + _1561);
    float _1677 = _1674 * ((cbModelParam._m0[1u].w * (_1662 - _1563)) + _1563);
    float _1680 = fma(_1677, cbSceneParam._m0[89u].z, fma(_1676, cbSceneParam._m0[89u].y, _1675 * cbSceneParam._m0[89u].x));
    float _1683 = fma(_1677, cbSceneParam._m0[90u].z, fma(_1676, cbSceneParam._m0[90u].y, _1675 * cbSceneParam._m0[90u].x));
    float _1686 = fma(_1677, cbSceneParam._m0[91u].z, fma(_1676, cbSceneParam._m0[91u].y, _1675 * cbSceneParam._m0[91u].x));
    uvec4 _1696 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _1698 = _1696.x * 14u;
    uint _1699 = _1698 + 13u;
    float _1706 = _663 + (-1.0);
    float _1711 = (cbLight._m0[_1699].x * _1706) + 1.0;
    float _1712 = (cbLight._m0[_1699].y * _1706) + 1.0;
    float _1713 = (cbLight._m0[_1699].z * _1706) + 1.0;
    float _1714 = (cbLight._m0[_1699].w * _1706) + 1.0;
    uint _1715 = _1698 + 5u;
    float _1721 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
    uint _1725 = _1698 + 4u;
    float _1732 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
    uint _1736 = _1698 | 1u;
    float _1747 = dot(vec3(cbLight._m0[_1698].xyz), vec3(_510, _511, _512));
    float _1750 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_510, _511, _512));
    float _3862 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _3873 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1755 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * 0.3183098733425140380859375;
    float _1757 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * 0.3183098733425140380859375;
    float _1764 = ((cbLight._m0[_1715].x * _1721) * _1757) + ((cbLight._m0[_1725].x * _1732) * _1755);
    float _1765 = ((_1721 * cbLight._m0[_1715].y) * _1757) + ((_1732 * cbLight._m0[_1725].y) * _1755);
    float _1766 = ((_1721 * cbLight._m0[_1715].z) * _1757) + ((_1732 * cbLight._m0[_1725].z) * _1755);
    uvec4 _1771 = floatBitsToUint(cbLight._m0[_1698 + 12u]);
    bool _1773 = _1771.x == 0u;
    float _1784;
    float _1786;
    float _1788;
    if (_1773)
    {
        _1784 = _1764;
        _1786 = _1765;
        _1788 = _1766;
    }
    else
    {
        uint _1792 = _1698 + 6u;
        float _1808 = (dot(vec3(cbLight._m0[_1698 + 2u].xyz), vec3(_510, _511, _512)) * 0.5) + 0.5;
        float _1809 = _1808 * _1808;
        float _3884 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1811 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
        _1784 = (((cbLight._m0[_1792].x * 0.3183098733425140380859375) * _1810) * _1811) + _1764;
        _1786 = (((cbLight._m0[_1792].y * 0.3183098733425140380859375) * _1810) * _1811) + _1765;
        _1788 = (((cbLight._m0[_1792].z * 0.3183098733425140380859375) * _1810) * _1811) + _1766;
    }
    bool _1791 = _1771.y == 0u;
    float _1829;
    float _1831;
    float _1833;
    if (_1791)
    {
        _1829 = _1784;
        _1831 = _1786;
        _1833 = _1788;
    }
    else
    {
        uint _1988 = _1698 + 7u;
        float _2004 = (dot(vec3(cbLight._m0[_1698 + 3u].xyz), vec3(_510, _511, _512)) * 0.5) + 0.5;
        float _2005 = _2004 * _2004;
        float _3900 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2006 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _2007 = isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0));
        _1829 = (((cbLight._m0[_1988].x * 0.3183098733425140380859375) * _2006) * _2007) + _1784;
        _1831 = (((cbLight._m0[_1988].y * 0.3183098733425140380859375) * _2006) * _2007) + _1786;
        _1833 = (((cbLight._m0[_1988].z * 0.3183098733425140380859375) * _2006) * _2007) + _1788;
    }
    uint _1836 = _1698 + 8u;
    float _1849 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1698].w)) * _513) * 0.949999988079071044921875);
    float _1850 = _1849 * _1849;
    float _1851 = cbLight._m0[_1698].x + _589;
    float _1852 = cbLight._m0[_1698].y + _590;
    float _1853 = cbLight._m0[_1698].z + _591;
    float _1857 = inversesqrt(dot(vec3(_1851, _1852, _1853), vec3(_1851, _1852, _1853)));
    float _1858 = _1857 * _1851;
    float _1859 = _1857 * _1852;
    float _1860 = _1857 * _1853;
    float _1861 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_1698].xyz));
    float _3916 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1864 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _3927 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _1865 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _1866 = dot(vec3(_510, _511, _512), vec3(_1858, _1859, _1860));
    float _3938 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1869 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _1870 = dot(vec3(cbLight._m0[_1698].xyz), vec3(_1858, _1859, _1860));
    float _3949 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1874 = _1850 * _1850;
    float _1878 = ((_1869 * _1869) * (_1874 + (-1.0))) + 1.0;
    float _1889 = (exp2(log2(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1890 = 1.0 - _1850;
    float _1901 = (0.5 / (((_1865 * ((_1864 * _1890) + _1850)) + 9.9999999392252902907785028219223e-09) + (((_1865 * _1890) + _1850) * _1864))) * _1864;
    float _3960 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1903 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1874 / ((_1878 * _1878) * 3.141590118408203125));
    uint _1914 = _1698 + 9u;
    float _1925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1736].w)) * _513) * 0.949999988079071044921875);
    float _1926 = _1925 * _1925;
    float _1927 = cbLight._m0[_1736].x + _589;
    float _1928 = cbLight._m0[_1736].y + _590;
    float _1929 = cbLight._m0[_1736].z + _591;
    float _1933 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
    float _1934 = _1933 * _1927;
    float _1935 = _1933 * _1928;
    float _1936 = _1933 * _1929;
    float _1937 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_1736].xyz));
    float _3971 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _1941 = dot(vec3(_510, _511, _512), vec3(_1934, _1935, _1936));
    float _3982 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _1945 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_1934, _1935, _1936));
    float _3993 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1949 = _1926 * _1926;
    float _1953 = ((_1944 * _1944) * (_1949 + (-1.0))) + 1.0;
    float _1962 = (exp2(log2(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1963 = 1.0 - _1926;
    float _1973 = (0.5 / (((_1865 * ((_1940 * _1963) + _1926)) + 9.9999999392252902907785028219223e-09) + (((_1865 * _1963) + _1926) * _1940))) * _1940;
    float _4004 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1975 = (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1949 / ((_1953 * _1953) * 3.141590118408203125));
    float _1985 = (((_1962 * cbLight._m0[_1914].x) * _1975) * _1721) + (((_1889 * cbLight._m0[_1836].x) * _1903) * _1732);
    float _1986 = (((_1962 * cbLight._m0[_1914].y) * _1975) * _1721) + (((_1889 * cbLight._m0[_1836].y) * _1903) * _1732);
    float _1987 = (((_1962 * cbLight._m0[_1914].z) * _1975) * _1721) + (((_1889 * cbLight._m0[_1836].z) * _1903) * _1732);
    float _2049;
    float _2051;
    float _2053;
    if (_1773)
    {
        _2049 = _1985;
        _2051 = _1986;
        _2053 = _1987;
    }
    else
    {
        uint _2055 = _1698 + 2u;
        uint _2059 = _1698 + 10u;
        float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2055].w)) * _513) * 0.949999988079071044921875);
        float _2074 = _2073 * _2073;
        float _2075 = cbLight._m0[_2055].x + _589;
        float _2076 = cbLight._m0[_2055].y + _590;
        float _2077 = cbLight._m0[_2055].z + _591;
        float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
        float _2082 = _2081 * _2075;
        float _2083 = _2081 * _2076;
        float _2084 = _2081 * _2077;
        float _2085 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_2055].xyz));
        float _4015 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2088 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _2089 = dot(vec3(_510, _511, _512), vec3(_2082, _2083, _2084));
        float _4026 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2092 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2093 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2082, _2083, _2084));
        float _4037 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2097 = _2074 * _2074;
        float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
        float _2110 = (exp2(log2(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2111 = 1.0 - _2074;
        float _2121 = (0.5 / (((_1865 * ((_2088 * _2111) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_1865 * _2111) + _2074) * _2088))) * _2088;
        float _4048 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2123 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
        float _2124 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
        _2049 = (((_2110 * cbLight._m0[_2059].x) * _2123) * _2124) + _1985;
        _2051 = (((_2110 * cbLight._m0[_2059].y) * _2123) * _2124) + _1986;
        _2053 = (((_2110 * cbLight._m0[_2059].z) * _2123) * _2124) + _1987;
    }
    float _2159;
    float _2161;
    float _2163;
    if (_1791)
    {
        _2159 = _2049;
        _2161 = _2051;
        _2163 = _2053;
    }
    else
    {
        uint _2170 = _1698 + 3u;
        uint _2174 = _1698 + 11u;
        float _2188 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2170].w)) * _513) * 0.949999988079071044921875);
        float _2189 = _2188 * _2188;
        float _2190 = cbLight._m0[_2170].x + _589;
        float _2191 = cbLight._m0[_2170].y + _590;
        float _2192 = cbLight._m0[_2170].z + _591;
        float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
        float _2197 = _2196 * _2190;
        float _2198 = _2196 * _2191;
        float _2199 = _2196 * _2192;
        float _2200 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_2170].xyz));
        float _4064 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2203 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _2204 = dot(vec3(_510, _511, _512), vec3(_2197, _2198, _2199));
        float _4075 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2207 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _2208 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_2197, _2198, _2199));
        float _4086 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2212 = _2189 * _2189;
        float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
        float _2225 = (exp2(log2(1.0 - (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2226 = 1.0 - _2189;
        float _2236 = (0.5 / (((_1865 * ((_2203 * _2226) + _2189)) + 9.9999999392252902907785028219223e-09) + (((_1865 * _2226) + _2189) * _2203))) * _2203;
        float _4097 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2238 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
        float _2239 = isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0));
        _2159 = (((_2225 * cbLight._m0[_2174].x) * _2238) * _2239) + _2049;
        _2161 = (((_2225 * cbLight._m0[_2174].y) * _2238) * _2239) + _2051;
        _2163 = (((_2225 * cbLight._m0[_2174].z) * _2238) * _2239) + _2053;
    }
    float _2374;
    float _2376;
    float _2378;
    float _2380;
    float _2382;
    float _2384;
    if (_1696.y == 0u)
    {
        float _2314 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2315 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2314;
        float _2316 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2314;
        float _2317 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2314;
        uvec4 _2329 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2330 = _2329.x;
        uint _2341 = uint((float(_2329.y) * floor(float(uint(cbSceneParam._m0[85u].y * _598) / _2330))) + floor(float(uint(cbSceneParam._m0[85u].x * _597) / _2330)));
        float _2351 = (log2(_2317 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2352 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        uint _2355 = uint(isnan(14.0) ? _2352 : (isnan(_2352) ? 14.0 : min(_2352, 14.0)));
        uvec4 _2360 = texelFetch(g_lightClusterGridBuffer, int(((_2355 << 2u) + (_2341 << 6u)) >> 2u));
        uint _2361 = _2360.x;
        uint _2362 = _2329.z;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        if (((((1u << ((_2362 >> 4u) & 15u)) + 4294967295u) & _2361) == 0u) || ((_2362 & 240u) == 0u))
        {
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
            _2470 = 0.0;
            _2472 = 0.0;
        }
        else
        {
            float _2463;
            float _2465;
            float _2467;
            float _2469;
            float _2471;
            float _2473;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            uint _2613 = 0u;
            uint _2622;
            bool _2623;
            for (;;)
            {
                _2622 = texelFetch(g_lightClassification, int((((_2355 << 5u) + (_2341 << 9u)) + (_2613 << 2u)) >> 2u)).x;
                _2623 = _2622 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2623)
                {
                    frontier_phi_61_pred = _2607;
                    frontier_phi_61_pred_1 = _2612;
                    frontier_phi_61_pred_2 = _2611;
                    frontier_phi_61_pred_3 = _2610;
                    frontier_phi_61_pred_4 = _2609;
                    frontier_phi_61_pred_5 = _2608;
                }
                else
                {
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    uint _2737;
                    _2731 = _2607;
                    _2732 = _2608;
                    _2733 = _2609;
                    _2734 = _2610;
                    _2735 = _2611;
                    _2736 = _2612;
                    _2737 = _2622;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    for (;;)
                    {
                        uint _2741 = uint(findLSB(_2737)) + (_2613 << 5u);
                        uint _2738 = (_2737 + 4294967295u) & _2737;
                        uint _2743 = _2741 * 48u;
                        vec4 _2757 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2743)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 3u)).x));
                        uint _2763 = (_2741 * 48u) + 4u;
                        vec4 _2776 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2763)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 3u)).x));
                        uint _2782 = (_2741 * 48u) + 8u;
                        vec3 _2793 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2782)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 2u)).x));
                        float _2797 = _2757.x - _2315;
                        float _2798 = _2757.y - _2316;
                        float _2799 = _2757.z - _2317;
                        float _2800 = dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799));
                        float _2803 = inversesqrt(_2800);
                        float _2804 = _2803 * _2797;
                        float _2805 = _2803 * _2798;
                        float _2806 = _2803 * _2799;
                        float _2807 = dot(vec3(_619, _622, _625), vec3(_2804, _2805, _2806));
                        float _2812 = 1.0 - (_2800 * _2757.w);
                        float _4123 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2813 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                        float _2814 = sqrt(_2800) * _2776.w;
                        float _2817 = 1.39999997615814208984375 / (_2814 + 1.39999997615814208984375);
                        float _2818 = _2817 * _2817;
                        float _2821 = ((1.0 - _2818) * _2807) + _2818;
                        float _2824 = _2814 * _2814;
                        float _2828 = ((isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0))) * _2813) / ((_2824 * 0.699999988079071044921875) + 1.0);
                        float _2832 = (-0.0) - _2315;
                        float _2833 = (-0.0) - _2316;
                        float _2834 = (-0.0) - _2317;
                        float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
                        float _2839 = _2838 * _2832;
                        float _2840 = _2838 * _2833;
                        float _2841 = _2838 * _2834;
                        float _2849 = exp2(log2(1.0 / ((_2824 * 3.5) + 5.0)) * 0.25);
                        float _2850 = 1.0 - _679;
                        float _2857 = sqrt(1.0 - ((1.0 - (_2850 * _2850)) * (1.0 - (_2849 * _2849))));
                        float _2858 = _2857 * _2857;
                        float _2859 = _2858 * _2858;
                        float _2860 = _2839 + _2804;
                        float _2861 = _2840 + _2805;
                        float _2862 = _2841 + _2806;
                        float _2866 = inversesqrt(dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862)));
                        float _2870 = dot(vec3(_619, _622, _625), vec3(_2839, _2840, _2841));
                        float _4139 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2873 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
                        float _2874 = dot(vec3(_619, _622, _625), vec3(_2866 * _2860, _2866 * _2861, _2866 * _2862));
                        float _4150 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2877 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                        float _2881 = ((_2877 * _2877) * (_2859 + (-1.0))) + 1.0;
                        float _2882 = _2817 * _2858;
                        float _2883 = _2882 * _2882;
                        float _2886 = ((1.0 - _2883) * _2807) + _2883;
                        float _4161 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                        float _2887 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                        float _2888 = 1.0 - _2858;
                        float _2898 = (0.5 / (((_2887 * ((_2873 * _2888) + _2858)) + 9.9999999392252902907785028219223e-09) + (((_2887 * _2888) + _2858) * _2873))) * _2887;
                        float _4172 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2908 = (((_2859 * 3.1415927410125732421875) * (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) / ((_2881 * _2881) * ((_2824 * 2.1991131305694580078125) + 3.141590118408203125))) * _2813;
                        _2666 = (_2828 * _2776.x) + _2734;
                        _2667 = (_2828 * _2776.y) + _2735;
                        _2668 = (_2828 * _2776.z) + _2736;
                        _2663 = (_2908 * _2793.x) + _2731;
                        _2664 = (_2908 * _2793.y) + _2732;
                        _2665 = (_2908 * _2793.z) + _2733;
                        if (_2738 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2731 = _2663;
                            _2732 = _2664;
                            _2733 = _2665;
                            _2734 = _2666;
                            _2735 = _2667;
                            _2736 = _2668;
                            _2737 = _2738;
                        }
                    }
                    frontier_phi_61_pred = _2663;
                    frontier_phi_61_pred_1 = _2668;
                    frontier_phi_61_pred_2 = _2667;
                    frontier_phi_61_pred_3 = _2666;
                    frontier_phi_61_pred_4 = _2665;
                    frontier_phi_61_pred_5 = _2664;
                }
                _2463 = frontier_phi_61_pred;
                _2473 = frontier_phi_61_pred_1;
                _2471 = frontier_phi_61_pred_2;
                _2469 = frontier_phi_61_pred_3;
                _2467 = frontier_phi_61_pred_4;
                _2465 = frontier_phi_61_pred_5;
                uint _2614 = _2613 + 1u;
                if (_2614 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2607 = _2463;
                    _2608 = _2465;
                    _2609 = _2467;
                    _2610 = _2469;
                    _2611 = _2471;
                    _2612 = _2473;
                    _2613 = _2614;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
            _2470 = _2471;
            _2472 = _2473;
        }
        uvec4 _2476 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2477 = _2476.z;
        uint _2479 = (_2477 >> 8u) & 15u;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        if (((4294967295u << _2479) & _2361) == 0u)
        {
            _2575 = _2462;
            _2577 = _2464;
            _2579 = _2466;
            _2581 = _2468;
            _2583 = _2470;
            _2585 = _2472;
        }
        else
        {
            float _2600 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
            float _2601 = _2600 * _2315;
            float _2602 = _2600 * _2316;
            float _2603 = _2600 * _2317;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2479 < ((_2477 >> 12u) & 15u))
            {
                float _2576;
                float _2578;
                float _2580;
                float _2582;
                float _2584;
                float _2586;
                float _2714 = _2462;
                float _2715 = _2464;
                float _2716 = _2466;
                float _2717 = _2468;
                float _2718 = _2470;
                float _2719 = _2472;
                uint _2720 = _2479;
                uint _2729;
                bool _2730;
                for (;;)
                {
                    _2729 = texelFetch(g_lightClassification, int((((_2355 << 5u) + (_2341 << 9u)) + (_2720 << 2u)) >> 2u)).x;
                    _2730 = _2729 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2730)
                    {
                        frontier_phi_67_pred = _2717;
                        frontier_phi_67_pred_1 = _2718;
                        frontier_phi_67_pred_2 = _2719;
                        frontier_phi_67_pred_3 = _2716;
                        frontier_phi_67_pred_4 = _2715;
                        frontier_phi_67_pred_5 = _2714;
                    }
                    else
                    {
                        float _2913;
                        float _2914;
                        float _2915;
                        float _2916;
                        float _2917;
                        float _2918;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _2926 = _2714;
                        float _2927 = _2715;
                        float _2928 = _2716;
                        float _2929 = _2717;
                        float _2930 = _2718;
                        float _2931 = _2719;
                        uint _2932 = _2729;
                        uint _2933;
                        vec4 _2958;
                        float _2959;
                        vec4 _2974;
                        vec3 _2986;
                        vec4 _3002;
                        vec4 _3018;
                        float _3064;
                        bool _3065;
                        for (;;)
                        {
                            uint _2943 = ((_2720 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2932));
                            _2933 = (_2932 + 4294967295u) & _2932;
                            uint _2945 = _2943 * 40u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            _2959 = _2958.w;
                            uint _2961 = (_2943 * 40u) + 4u;
                            _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2976 = (_2943 * 40u) + 8u;
                            _2986 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x));
                            uint _2989 = (_2943 * 40u) + 16u;
                            _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            uint _3005 = (_2943 * 40u) + 20u;
                            _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            uint _3020 = (_2943 * 40u) + 24u;
                            vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3039 = (_2943 * 40u) + 28u;
                            vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            _3064 = fma(_2317, _3052.z, fma(_2316, _3052.y, _3052.x * _2315)) + _3052.w;
                            _3065 = !((fma(_2317, _3033.z, fma(_2316, _3033.y, _3033.x * _2315)) + _3033.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3065)
                            {
                                float _3092 = _2958.x - _2315;
                                float _3093 = _2958.y - _2316;
                                float _3094 = _2958.z - _2317;
                                float _3095 = dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094));
                                float _3098 = inversesqrt(_3095);
                                float _3099 = _3098 * _3092;
                                float _3100 = _3098 * _3093;
                                float _3101 = _3098 * _3094;
                                float _3105 = 1.0 - (_3095 / (_2959 * _2959));
                                float _4183 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3106 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3110 = sqrt(_3095) * _2974.w;
                                float _3112 = 1.39999997615814208984375 / (_3110 + 1.39999997615814208984375);
                                float _3113 = _3112 * _3112;
                                float _3116 = ((1.0 - _3113) * dot(vec3(_3099, _3100, _3101), vec3(_619, _622, _625))) + _3113;
                                float _3119 = _3110 * _3110;
                                float _3123 = (fma(_2317, _3002.z, fma(_2316, _3002.y, _3002.x * _2315)) + _3002.w) / _3064;
                                float _3124 = (fma(_2317, _3018.z, fma(_2316, _3018.y, _3018.x * _2315)) + _3018.w) / _3064;
                                float _3128 = 1.0 - dot(vec2(_3123, _3124), vec2(_3123, _3124));
                                float _4199 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3129 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                                float _3130 = _3129 * (((isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))) * _3106) / ((_3119 * 0.699999988079071044921875) + 1.0));
                                float _3142 = exp2(log2(1.0 / ((_3119 * 3.5) + 5.0)) * 0.25);
                                float _3143 = 1.0 - _679;
                                float _3150 = sqrt(1.0 - ((1.0 - (_3143 * _3143)) * (1.0 - (_3142 * _3142))));
                                float _3151 = _3150 * _3150;
                                float _3152 = _3151 * _3151;
                                float _3153 = _3099 - _2601;
                                float _3154 = _3100 - _2602;
                                float _3155 = _3101 - _2603;
                                float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
                                float _3163 = dot(vec3(_619, _622, _625), vec3((-0.0) - _2601, (-0.0) - _2602, (-0.0) - _2603));
                                float _4210 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3166 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                                float _3167 = dot(vec3(_619, _622, _625), vec3(_3159 * _3153, _3159 * _3154, _3159 * _3155));
                                float _4221 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3170 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                                float _3174 = ((_3170 * _3170) * (_3152 + (-1.0))) + 1.0;
                                float _3175 = _3112 * _3151;
                                float _3176 = _3175 * _3175;
                                float _3182 = ((1.0 - _3176) * dot(vec3(_619, _622, _625), vec3(_3099, _3100, _3101))) + _3176;
                                float _4232 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3183 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3184 = 1.0 - _3151;
                                float _3194 = (0.5 / (((_3183 * ((_3166 * _3184) + _3151)) + 9.9999999392252902907785028219223e-09) + (((_3183 * _3184) + _3151) * _3166))) * _3183;
                                float _4243 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3204 = (_3129 * _3106) * (((_3152 * 3.1415927410125732421875) * (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) / ((_3174 * _3174) * ((_3119 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3204 * _2986.x;
                                frontier_phi_73_pred_1 = _3204 * _2986.y;
                                frontier_phi_73_pred_2 = _3130 * _2974.z;
                                frontier_phi_73_pred_3 = _3130 * _2974.y;
                                frontier_phi_73_pred_4 = _3130 * _2974.x;
                                frontier_phi_73_pred_5 = _3204 * _2986.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3208 = frontier_phi_73_pred;
                            _3209 = frontier_phi_73_pred_1;
                            _3213 = frontier_phi_73_pred_2;
                            _3212 = frontier_phi_73_pred_3;
                            _3211 = frontier_phi_73_pred_4;
                            _3210 = frontier_phi_73_pred_5;
                            _2916 = _3211 + _2929;
                            _2917 = _3212 + _2930;
                            _2918 = _3213 + _2931;
                            _2913 = _3208 + _2926;
                            _2914 = _3209 + _2927;
                            _2915 = _3210 + _2928;
                            if (_2933 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2933;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2916;
                        frontier_phi_67_pred_1 = _2917;
                        frontier_phi_67_pred_2 = _2918;
                        frontier_phi_67_pred_3 = _2915;
                        frontier_phi_67_pred_4 = _2914;
                        frontier_phi_67_pred_5 = _2913;
                    }
                    _2582 = frontier_phi_67_pred;
                    _2584 = frontier_phi_67_pred_1;
                    _2586 = frontier_phi_67_pred_2;
                    _2580 = frontier_phi_67_pred_3;
                    _2578 = frontier_phi_67_pred_4;
                    _2576 = frontier_phi_67_pred_5;
                    uint _2721 = _2720 + 1u;
                    if (_2721 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2714 = _2576;
                        _2715 = _2578;
                        _2716 = _2580;
                        _2717 = _2582;
                        _2718 = _2584;
                        _2719 = _2586;
                        _2720 = _2721;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2584;
                frontier_phi_55_56_ladder_1 = _2586;
                frontier_phi_55_56_ladder_2 = _2582;
                frontier_phi_55_56_ladder_3 = _2580;
                frontier_phi_55_56_ladder_4 = _2578;
                frontier_phi_55_56_ladder_5 = _2576;
            }
            else
            {
                frontier_phi_55_56_ladder = _2470;
                frontier_phi_55_56_ladder_1 = _2472;
                frontier_phi_55_56_ladder_2 = _2468;
                frontier_phi_55_56_ladder_3 = _2466;
                frontier_phi_55_56_ladder_4 = _2464;
                frontier_phi_55_56_ladder_5 = _2462;
            }
            _2575 = frontier_phi_55_56_ladder_5;
            _2577 = frontier_phi_55_56_ladder_4;
            _2579 = frontier_phi_55_56_ladder_3;
            _2581 = frontier_phi_55_56_ladder_2;
            _2583 = frontier_phi_55_56_ladder;
            _2585 = frontier_phi_55_56_ladder_1;
        }
        float _2590 = isnan(1.0) ? _663 : (isnan(_663) ? 1.0 : min(_663, 1.0));
        _2374 = (_2590 * _2581) + _1829;
        _2376 = (_2590 * _2583) + _1831;
        _2378 = (_2590 * _2585) + _1833;
        _2380 = ((_2575 * 0.039999999105930328369140625) * _2590) + _2159;
        _2382 = ((_2577 * 0.039999999105930328369140625) * _2590) + _2161;
        _2384 = ((_2579 * 0.039999999105930328369140625) * _2590) + _2163;
    }
    else
    {
        _2374 = _1829;
        _2376 = _1831;
        _2378 = _1833;
        _2380 = _2159;
        _2382 = _2161;
        _2384 = _2163;
    }
    float _4259 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4270 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4281 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    uint _2404 = _287 + 6u;
    float _2412 = _597 / cbSceneParam._m0[86u].x;
    float _2413 = _598 / cbSceneParam._m0[86u].y;
    vec4 _2427 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2412, _2413, (log2((isnan(cbSceneParam._m0[77u].w) ? _531 : (isnan(_531) ? cbSceneParam._m0[77u].w : min(_531, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2429 = _2427.x;
    float _2430 = _2427.y;
    float _2431 = _2427.z;
    float _2432 = _2427.w;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    if (_531 > cbSceneParam._m0[78u].w)
    {
        float _2487 = isnan(_531) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _531 : min(cbSceneParam._m0[80u].w, _531));
        float _2488 = _2487 / _531;
        float _2499 = _2488 * _582;
        float _2500 = _583 * _2488;
        float _2501 = (-0.0) - _2500;
        float _2503 = _2488 * _584;
        float _2505 = (cbSceneParam._m0[77u].w * _2501) / _2487;
        float _2506 = _2505 + cbSceneParam._m0[79u].w;
        float _2507 = cbSceneParam._m0[79u].w - _2500;
        float _2513 = sqrt(((_2499 * _2499) + (_2500 * _2500)) + (_2503 * _2503));
        float _2516 = (1.0 - (cbSceneParam._m0[77u].w / _2487)) * _2513;
        float _2521 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2523 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2676;
        if (abs((_2501 - _2505) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2676 = ((((_2506 > 0.0) ? exp2(_2521 * _2506) : (2.0 - exp2(_2523 * _2506))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2516;
        }
        else
        {
            float _2636 = 1.0 / cbSceneParam._m0[80u].x;
            float _2637 = isnan(_2507) ? _2506 : (isnan(_2506) ? _2507 : max(_2506, _2507));
            float _2638 = isnan(_2507) ? _2506 : (isnan(_2506) ? _2507 : min(_2506, _2507));
            float _2647 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : min(_2637, 0.0));
            float _2648 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : min(_2638, 0.0));
            _2676 = ((abs(_2513 / _2501) * cbSceneParam._m0[80u].y) * ((((_2647 - _2648) * 2.0) - ((exp2(_2521 * (isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0)))) - exp2(_2521 * (isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0))))) * _2636)) - ((exp2(_2523 * _2647) - exp2(_2523 * _2648)) * _2636))) + (_2516 * cbSceneParam._m0[80u].z);
        }
        vec4 _2678 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2412, _2413, 1.0), 0.0);
        float _2687 = exp2((_2676 * (-1.44269502162933349609375)) * (1.0 - _2678.w));
        float _2688 = log2(_2687);
        float _2704 = log2(_2432);
        _2525 = (exp2(_2704 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2688 * cbSceneParam._m0[78u].x)) * _2678.x) / cbSceneParam._m0[78u].x)) + _2429;
        _2527 = (exp2(_2704 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2688 * cbSceneParam._m0[78u].y)) * _2678.y) / cbSceneParam._m0[78u].y)) + _2430;
        _2529 = (exp2(_2704 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2688 * cbSceneParam._m0[78u].z)) * _2678.z) / cbSceneParam._m0[78u].z)) + _2431;
        _2531 = _2687 * _2432;
    }
    else
    {
        _2525 = _2429;
        _2527 = _2430;
        _2529 = _2431;
        _2531 = _2432;
    }
    float _2543 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2544 = _2543 == 3.0;
    float _2545 = log2(_2531);
    float _2552 = exp2(_2545 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2374 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _663))) + ((_2380 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _1466)) * cbPerFrame._m0[3u].x));
    float _2553 = exp2(_2545 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2376 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _663))) + ((_2382 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _1466)) * cbPerFrame._m0[3u].x));
    float _2554 = exp2(_2545 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2378 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _663))) + ((_2384 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1466)) * cbPerFrame._m0[3u].x));
    float _2563 = (_2543 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2563 * (_2544 ? _2552 : (_2552 + (cbSceneParam._m0[72u].w * _2525)));
    SV_Target.y = _2563 * (_2544 ? _2553 : (_2553 + (cbSceneParam._m0[72u].w * _2527)));
    SV_Target.z = _2563 * (_2544 ? _2554 : (_2554 + (cbSceneParam._m0[72u].w * _2529)));
    SV_Target.w = cbInstanceData._m0[_2404].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2404].w;
}


