#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1145;
float _3788;
float _3789;
float _3790;
float _3791;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3800 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3811 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3822 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _321 = _316.x * cbMtdParam._m0[9u].x;
    float _322 = _316.y * cbMtdParam._m0[9u].y;
    float _323 = _316.z * cbMtdParam._m0[9u].z;
    float _327 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _321;
    float _330 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _322;
    float _333 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _323;
    float _340 = ((_321 - _327) * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) + _327;
    float _341 = ((_322 - _330) * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) + _330;
    float _342 = ((_323 - _333) * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) + _333;
    vec4 _361 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _279) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _280) + cbTextureTilingScale._m0[14u].w));
    vec4 _381 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _407 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _411 = _407.z;
    float _415 = (_407.x * 2.0) + (-1.0);
    float _416 = (_407.y * 2.0) + (-1.0);
    float _417 = dot(vec2(_415, _416), vec2(_415, _416));
    float _3833 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _422 = sqrt(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))));
    float _427 = _415 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_381.x * 2.0) + (-1.0)));
    float _428 = _416 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_381.y * 2.0) + (-1.0)));
    float _431 = fma(_422, _227, fma(_428, _234, _427 * _220));
    float _434 = fma(_422, _228, fma(_428, _235, _427 * _221));
    float _437 = fma(_422, _229, fma(_428, _236, _427 * _222));
    float _441 = inversesqrt(dot(vec3(_431, _434, _437), vec3(_431, _434, _437)));
    vec4 _477 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _279) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _280) + cbTextureTilingScale._m0[11u].w));
    float _479 = _477.x;
    float _480 = 1.0 - _479;
    float _487 = ((_479 - _480) * cbMtdParam._m0[24u].z) + _480;
    float _489 = (cbMtdParam._m0[19u].x + dot(vec4(_441 * _431, _441 * _434, _441 * _437, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_487 * cbMtdParam._m0[21u].z);
    float _3844 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _505 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_487 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3855 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _506 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _510 = ((_490 * ((_361.x * cbMtdParam._m0[18u].x) - _340)) * _506) + _340;
    float _511 = ((_490 * ((_361.y * cbMtdParam._m0[18u].y) - _341)) * _506) + _341;
    float _512 = ((_490 * ((_361.z * cbMtdParam._m0[18u].z) - _342)) * _506) + _342;
    float _517 = (((_381.z - _411) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _411;
    vec4 _530 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _279) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _280) + cbTextureTilingScale._m0[15u].w));
    float _537 = (_530.x * 2.0) + (-1.0);
    float _538 = (_530.y * 2.0) + (-1.0);
    float _539 = dot(vec2(_537, _538), vec2(_537, _538));
    float _3866 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _548 = (((_530.z - _517) * _490) * _506) + _517;
    float _563 = (((cbMtdParam._m0[21u].x * _427) + ((_537 - _427) * _490)) * _506) + _427;
    float _564 = (((cbMtdParam._m0[21u].x * _428) + ((_538 - _428) * _490)) * _506) + _428;
    float _565 = (((sqrt(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) - _422) * _490) * _506) + _422;
    float _567 = cbMtdParam._m0[22u].x + _407.w;
    float _570 = fma(_565, _227, fma(_564, _234, _563 * _220));
    float _573 = fma(_565, _228, fma(_564, _235, _563 * _221));
    float _576 = fma(_565, _229, fma(_564, _236, _563 * _222));
    float _580 = inversesqrt(dot(vec3(_570, _573, _576), vec3(_570, _573, _576)));
    float _581 = _580 * _570;
    float _582 = _580 * _573;
    float _583 = _580 * _576;
    float _3877 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _584 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3899 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _3910 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _3921 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _602 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _653 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _643);
    float _654 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _643);
    float _655 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _643);
    float _659 = inversesqrt(dot(vec3(_653, _654, _655), vec3(_653, _654, _655)));
    float _660 = _653 * _659;
    float _661 = _654 * _659;
    float _662 = _655 * _659;
    vec4 _667 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _669 = _667.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _826 = sqrt(((_653 * _653) + (_654 * _654)) + (_655 * _655));
        float _832 = (cbMatDynParam._m0[5u].x * _826) + cbMatDynParam._m0[5u].y;
        float _3932 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _837 = (cbMatDynParam._m0[5u].z * _826) + cbMatDynParam._m0[5u].w;
        float _3943 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) - _833)) + _833) < ((_669 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _681 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _682 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _702 = fma(_583, cbSceneParam._m0[5u].z, fma(_582, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _581));
    float _705 = fma(_583, cbSceneParam._m0[6u].z, fma(_582, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _581));
    float _708 = fma(_583, cbSceneParam._m0[7u].z, fma(_582, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _581));
    uint _721 = _260 + 9u;
    uint _722 = _721 + uint(cbMatDynParam._m0[0u].w);
    float _728 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * cbInstanceData._m0[_722].x;
    float _729 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * cbInstanceData._m0[_722].y;
    float _730 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * cbInstanceData._m0[_722].z;
    float _3954 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    vec4 _742 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _681, cbSceneParam._m0[86u].y * _682));
    float _746 = ((isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * TEXCOORD_5.w) * _742.x;
    float _747 = dot(vec3(_581, _582, _583), vec3(_660, _661, _662));
    float _750 = _747 * 2.0;
    float _754 = (_750 * _581) - _660;
    float _755 = (_750 * _582) - _661;
    float _756 = (_750 * _583) - _662;
    float _760 = abs(dot(vec3(_660, _661, _662), vec3(_581, _582, _583)));
    float _3987 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _762 = sqrt(_584);
    float _775 = exp2((_762 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_762 * 3.0));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1144;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _869 = fma(_815, cbModelParam._m0[26u].z, fma(_811, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _807));
        float _873 = fma(_815, cbModelParam._m0[27u].z, fma(_811, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _807));
        float _877 = fma(_815, cbModelParam._m0[28u].z, fma(_811, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _807));
        float _902 = _807 + _581;
        float _903 = _811 + _582;
        float _904 = _815 + _583;
        float _914 = fma(_904, cbModelParam._m0[26u].z, fma(_903, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _902)) - _869;
        float _915 = fma(_904, cbModelParam._m0[27u].z, fma(_903, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _902)) - _873;
        float _916 = fma(_904, cbModelParam._m0[28u].z, fma(_903, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _902)) - _877;
        float _920 = inversesqrt(dot(vec3(_914, _915, _916), vec3(_914, _915, _916)));
        float _933 = ((_920 * _914) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_869 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _934 = ((_920 * _915) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_873 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _935 = ((_920 * _916) / cbModelParam._m0[34u].z) + ((((((_877 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        float _972 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_938.x + (-0.5));
        float _974 = _972 * (_938.y + (-0.5));
        float _975 = _972 * (_938.z + (-0.5));
        float _982 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_945.x + (-0.5));
        float _984 = _982 * (_945.y + (-0.5));
        float _985 = _982 * (_945.z + (-0.5));
        float _992 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_952.x + (-0.5));
        float _994 = _992 * (_952.y + (-0.5));
        float _995 = _992 * (_952.z + (-0.5));
        float _1002 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_959.x + (-0.5));
        float _1004 = _1002 * (_959.y + (-0.5));
        float _1005 = _1002 * (_959.z + (-0.5));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = _973 * 0.5;
        float _1010 = _983 * 0.5;
        float _1011 = _993 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1026 = (dot(vec3(_581, _582, _583), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1036 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _4035 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1038 + 1.0))) + _1043) * _1006;
        float _1053 = _974 * 0.5;
        float _1054 = _984 * 0.5;
        float _1055 = _994 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1069 = (dot(vec3(_581, _582, _583), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1078 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _4068 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1080 + 1.0))) + _1085) * _1007;
        float _1095 = _975 * 0.5;
        float _1096 = _985 * 0.5;
        float _1097 = _995 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_581, _582, _583), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _4101 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1122 + 1.0))) + _1127) * _1008;
        _1144 = _975;
        _1146 = _974;
        _1147 = _973;
        _1148 = _985;
        _1149 = _984;
        _1150 = _983;
        _1151 = _995;
        _1152 = _994;
        _1153 = _993;
        _1154 = _1008;
        _1155 = _1007;
        _1156 = _1006;
        _1157 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
        _1158 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
        _1159 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
    }
    else
    {
        _1144 = _1145;
        _1146 = _1145;
        _1147 = _1145;
        _1148 = _1145;
        _1149 = _1145;
        _1150 = _1145;
        _1151 = _1145;
        _1152 = _1145;
        _1153 = _1145;
        _1154 = _1145;
        _1155 = _1145;
        _1156 = _1145;
        _1157 = 0.0;
        _1158 = 0.0;
        _1159 = 0.0;
    }
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1187 = fma(_815, cbModelParam._m0[30u].z, fma(_811, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _807));
        float _1191 = fma(_815, cbModelParam._m0[31u].z, fma(_811, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _807));
        float _1195 = fma(_815, cbModelParam._m0[32u].z, fma(_811, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _807));
        float _1218 = _807 + _581;
        float _1219 = _811 + _582;
        float _1220 = _815 + _583;
        float _1230 = fma(_1220, cbModelParam._m0[30u].z, fma(_1219, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1218)) - _1187;
        float _1231 = fma(_1220, cbModelParam._m0[31u].z, fma(_1219, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1218)) - _1191;
        float _1232 = fma(_1220, cbModelParam._m0[32u].z, fma(_1219, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1218)) - _1195;
        float _1236 = inversesqrt(dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232)));
        float _1249 = ((_1236 * _1230) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1187 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1236 * _1231) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1191 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1236 * _1232) / cbModelParam._m0[35u].z) + ((((((_1195 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        float _1286 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1253.x + (-0.5));
        float _1288 = _1286 * (_1253.y + (-0.5));
        float _1289 = _1286 * (_1253.z + (-0.5));
        float _1296 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1260.x + (-0.5));
        float _1298 = _1296 * (_1260.y + (-0.5));
        float _1299 = _1296 * (_1260.z + (-0.5));
        float _1306 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1267.x + (-0.5));
        float _1308 = _1306 * (_1267.y + (-0.5));
        float _1309 = _1306 * (_1267.z + (-0.5));
        float _1316 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1274.x + (-0.5));
        float _1318 = _1316 * (_1274.y + (-0.5));
        float _1319 = _1316 * (_1274.z + (-0.5));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = _1287 * 0.5;
        float _1324 = _1297 * 0.5;
        float _1325 = _1307 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_581, _582, _583), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4164 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1350 + 1.0))) + _1355) * _1320;
        float _1365 = _1288 * 0.5;
        float _1366 = _1298 * 0.5;
        float _1367 = _1308 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_581, _582, _583), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4197 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1392 + 1.0))) + _1397) * _1321;
        float _1407 = _1289 * 0.5;
        float _1408 = _1299 * 0.5;
        float _1409 = _1309 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_581, _582, _583), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4230 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1434 + 1.0))) + _1439) * _1322;
        _1456 = _1289;
        _1457 = _1288;
        _1458 = _1287;
        _1459 = _1299;
        _1460 = _1298;
        _1461 = _1297;
        _1462 = _1309;
        _1463 = _1308;
        _1464 = _1307;
        _1465 = _1322;
        _1466 = _1321;
        _1467 = _1320;
        _1468 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1469 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
    }
    else
    {
        _1456 = _1145;
        _1457 = _1145;
        _1458 = _1145;
        _1459 = _1145;
        _1460 = _1145;
        _1461 = _1145;
        _1462 = _1145;
        _1463 = _1145;
        _1464 = _1145;
        _1465 = _1145;
        _1466 = _1145;
        _1467 = _1145;
        _1468 = 0.0;
        _1469 = 0.0;
        _1470 = 0.0;
    }
    float _1480 = (cbModelParam._m0[1u].x * (_1468 - _1157)) + _1157;
    float _1481 = (cbModelParam._m0[1u].x * (_1469 - _1158)) + _1158;
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1159)) + _1159;
    float _1503 = fma(_1482, cbSceneParam._m0[89u].z, fma(_1481, cbSceneParam._m0[89u].y, _1480 * cbSceneParam._m0[89u].x));
    float _1506 = fma(_1482, cbSceneParam._m0[90u].z, fma(_1481, cbSceneParam._m0[90u].y, _1480 * cbSceneParam._m0[90u].x));
    float _1509 = fma(_1482, cbSceneParam._m0[91u].z, fma(_1481, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1480));
    float _1524 = _754 * 0.5;
    float _1525 = _755 * 0.5;
    float _1526 = _756 * 0.5;
    float _1527 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1530 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1457, _1460, _1463, _1466));
    float _1533 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1456, _1459, _1462, _1465));
    float _1567;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1540 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1144, _1148, _1151, _1154));
        float _1544 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1146, _1149, _1152, _1155));
        float _1548 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1147, _1150, _1153, _1156));
        float _1555 = dot(vec4(cbModelParam._m0[39u]), vec4(_1524, _1525, _1526, 1.0));
        _1567 = dot(vec3(isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1555) ? 0.0 : (isnan(0.0) ? _1555 : max(0.0, _1555))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1567 = 1.0;
    }
    float _1578;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1569 = dot(vec4(cbModelParam._m0[40u]), vec4(_1524, _1525, _1526, 1.0));
        _1578 = dot(vec3(isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1569) ? 0.0 : (isnan(0.0) ? _1569 : max(0.0, _1569))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1578 = 1.0;
    }
    float _1582 = (_1578 * cbModelParam._m0[1u].x) + (_1567 * (1.0 - cbModelParam._m0[1u].x));
    float _1592 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _584);
    float _1593 = isnan(_1592) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1592 : min(cbModelParam._m0[25u].z, _1592));
    float _1673;
    float _1675;
    float _1677;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1640 = fma(_815, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _807)) + cbModelParam._m0[13u].w;
        float _1644 = fma(_815, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _807)) + cbModelParam._m0[14u].w;
        float _1648 = fma(_815, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _807)) + cbModelParam._m0[15u].w;
        float _1651 = fma(_756, cbModelParam._m0[13u].z, fma(_755, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754));
        float _1654 = fma(_756, cbModelParam._m0[14u].z, fma(_755, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754));
        float _1657 = fma(_756, cbModelParam._m0[15u].z, fma(_755, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754));
        float _1685;
        if (_1651 > 0.0)
        {
            _1685 = abs((1.0 - _1640) / _1651);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1640 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1685 = frontier_phi_17_15_ladder;
        }
        float _1855;
        if (_1654 > 0.0)
        {
            _1855 = abs((1.0 - _1644) / _1654);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1644 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1855 = frontier_phi_26_22_ladder;
        }
        float _2151;
        if (_1657 > 0.0)
        {
            _2151 = abs((1.0 - _1648) / _1657);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1648 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2151 = frontier_phi_38_33_ladder;
        }
        float _2153 = isnan(_1855) ? _1685 : (isnan(_1685) ? _1855 : min(_1685, _1855));
        float _2154 = isnan(_2151) ? _2153 : (isnan(_2153) ? _2151 : min(_2153, _2151));
        float _2158 = (_2154 * _1651) + _1640;
        float _2159 = (_2154 * _1654) + _1644;
        float _2160 = (_2154 * _1657) + _1648;
        float _2161 = _2154 * 9.9999997473787516355514526367188e-05;
        float _2163 = (-1.0) - _2161;
        float _2165 = _2161 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2160 > _2165) || ((_2160 < _2163) || ((_2159 > _2165) || ((_2159 < _2163) || ((_2158 < _2163) || (_2158 > _2165))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2305 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2160, cbModelParam._m0[9u].z, fma(_2159, cbModelParam._m0[9u].y, _2158 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2160, cbModelParam._m0[10u].z, fma(_2159, cbModelParam._m0[10u].y, _2158 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2160, cbModelParam._m0[11u].z, fma(_2159, cbModelParam._m0[11u].y, _2158 * cbModelParam._m0[11u].x))), _1593);
            frontier_phi_16_38_ladder = _2305.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2305.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2305.x * cbModelParam._m0[1u].y;
        }
        _1673 = frontier_phi_16_38_ladder_2;
        _1675 = frontier_phi_16_38_ladder_1;
        _1677 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1661 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_754, _755, _756), _1593);
        _1673 = _1661.x * cbModelParam._m0[1u].y;
        _1675 = _1661.y * cbModelParam._m0[1u].y;
        _1677 = _1661.z * cbModelParam._m0[1u].y;
    }
    float _1681 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _584);
    float _1682 = isnan(_1681) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1681 : min(cbModelParam._m0[25u].w, _1681));
    float _1771;
    float _1773;
    float _1775;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1735 = fma(_815, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _807)) + cbModelParam._m0[21u].w;
        float _1739 = fma(_815, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _807)) + cbModelParam._m0[22u].w;
        float _1743 = fma(_815, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _807)) + cbModelParam._m0[23u].w;
        float _1746 = fma(_756, cbModelParam._m0[21u].z, fma(_755, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754));
        float _1749 = fma(_756, cbModelParam._m0[22u].z, fma(_755, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754));
        float _1752 = fma(_756, cbModelParam._m0[23u].z, fma(_755, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754));
        float _1860;
        if (_1746 > 0.0)
        {
            _1860 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1860 = frontier_phi_28_24_ladder;
        }
        float _2178;
        if (_1749 > 0.0)
        {
            _2178 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2178 = frontier_phi_40_35_ladder;
        }
        float _2505;
        if (_1752 > 0.0)
        {
            _2505 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2505 = frontier_phi_50_47_ladder;
        }
        float _2507 = isnan(_2178) ? _1860 : (isnan(_1860) ? _2178 : min(_1860, _2178));
        float _2508 = isnan(_2505) ? _2507 : (isnan(_2507) ? _2505 : min(_2507, _2505));
        float _2512 = (_2508 * _1746) + _1735;
        float _2513 = (_2508 * _1749) + _1739;
        float _2514 = (_2508 * _1752) + _1743;
        float _2515 = _2508 * 9.9999997473787516355514526367188e-05;
        float _2516 = (-1.0) - _2515;
        float _2518 = _2515 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2514 > _2518) || ((_2514 < _2516) || ((_2513 > _2518) || ((_2513 < _2516) || ((_2512 < _2516) || (_2512 > _2518))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2632 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2514, cbModelParam._m0[17u].z, fma(_2513, cbModelParam._m0[17u].y, _2512 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2514, cbModelParam._m0[18u].z, fma(_2513, cbModelParam._m0[18u].y, _2512 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2514, cbModelParam._m0[19u].z, fma(_2513, cbModelParam._m0[19u].y, _2512 * cbModelParam._m0[19u].x))), _1682);
            frontier_phi_25_50_ladder = _2632.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2632.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2632.x * cbModelParam._m0[1u].z;
        }
        _1771 = frontier_phi_25_50_ladder_2;
        _1773 = frontier_phi_25_50_ladder_1;
        _1775 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1755 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_754, _755, _756), _1682);
        _1771 = _1755.x * cbModelParam._m0[1u].z;
        _1773 = _1755.y * cbModelParam._m0[1u].z;
        _1775 = _1755.z * cbModelParam._m0[1u].z;
    }
    float _1787 = ((((1.0 - _775) * ((_762 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_775 * _762)) * _746;
    float _1788 = _1787 * ((cbModelParam._m0[1u].w * (_1771 - _1673)) + _1673);
    float _1789 = _1787 * ((cbModelParam._m0[1u].w * (_1773 - _1675)) + _1675);
    float _1790 = _1787 * ((cbModelParam._m0[1u].w * (_1775 - _1677)) + _1677);
    float _1793 = fma(_1790, cbSceneParam._m0[89u].z, fma(_1789, cbSceneParam._m0[89u].y, _1788 * cbSceneParam._m0[89u].x));
    float _1796 = fma(_1790, cbSceneParam._m0[90u].z, fma(_1789, cbSceneParam._m0[90u].y, _1788 * cbSceneParam._m0[90u].x));
    float _1799 = fma(_1790, cbSceneParam._m0[91u].z, fma(_1789, cbSceneParam._m0[91u].y, _1788 * cbSceneParam._m0[91u].x));
    float _1834 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1838 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1842 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1846 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1847 = _1834 / _1846;
    float _1848 = _1838 / _1846;
    float _1849 = _1842 / _1846;
    float _1996;
    float _1997;
    float _1998;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1876 = ((uint(_1849 > cbSceneParam._m0[59u].y) + uint(_1849 > cbSceneParam._m0[59u].x)) + uint(_1849 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1877 = _1876 + 43u;
        uint _1885 = _1876 + 44u;
        uint _1893 = _1876 + 45u;
        uint _1901 = _1876 + 46u;
        float _1912 = fma(_1846, cbSceneParam._m0[_1877].w, fma(_1842, cbSceneParam._m0[_1877].z, fma(_1838, cbSceneParam._m0[_1877].y, _1834 * cbSceneParam._m0[_1877].x)));
        float _1916 = fma(_1846, cbSceneParam._m0[_1885].w, fma(_1842, cbSceneParam._m0[_1885].z, fma(_1838, cbSceneParam._m0[_1885].y, _1834 * cbSceneParam._m0[_1885].x)));
        float _1924 = fma(_1846, cbSceneParam._m0[_1901].w, fma(_1842, cbSceneParam._m0[_1901].z, fma(_1838, cbSceneParam._m0[_1901].y, _1834 * cbSceneParam._m0[_1901].x)));
        float _1929 = cbSceneParam._m0[33u].z * _1924;
        float _1931 = cbSceneParam._m0[33u].w * _1924;
        float _1934 = fma(_1846, cbSceneParam._m0[_1893].w, fma(_1842, cbSceneParam._m0[_1893].z, fma(_1838, cbSceneParam._m0[_1893].y, _1834 * cbSceneParam._m0[_1893].x))) / _1924;
        float _1982 = (cbSceneParam._m0[33u].x - sqrt(((_1848 * _1848) + (_1847 * _1847)) + (_1849 * _1849))) * cbSceneParam._m0[33u].y;
        float _4356 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1989 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1929 + _1912) / _1924, (_1931 + _1916) / _1924), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1931 + _1912) / _1924, (_1916 - _1929) / _1924), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1912 - _1929) / _1924, (_1916 - _1931) / _1924), _1934), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1912 - _1931) / _1924, (_1929 + _1916) / _1924), _1934), 0.0)).x), vec4(0.25)));
        _1996 = 1.0 - (_1989 * cbSceneParam._m0[34u].x);
        _1997 = 1.0 - (_1989 * cbSceneParam._m0[34u].y);
        _1998 = 1.0 - (_1989 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1996 = 1.0;
        _1997 = 1.0;
        _1998 = 1.0;
    }
    float _2062;
    float _2064;
    float _2066;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2050 = fma(_1846, cbSceneParam._m0[63u].w, fma(_1842, cbSceneParam._m0[63u].z, fma(_1838, cbSceneParam._m0[63u].y, _1834 * cbSceneParam._m0[63u].x)));
        float _2051 = fma(_1846, cbSceneParam._m0[60u].w, fma(_1842, cbSceneParam._m0[60u].z, fma(_1838, cbSceneParam._m0[60u].y, _1834 * cbSceneParam._m0[60u].x))) / _2050;
        float _2052 = fma(_1846, cbSceneParam._m0[61u].w, fma(_1842, cbSceneParam._m0[61u].z, fma(_1838, cbSceneParam._m0[61u].y, _1834 * cbSceneParam._m0[61u].x))) / _2050;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2051 >= cbSceneParam._m0[64u].x) && (_2052 >= cbSceneParam._m0[64u].y)) && (_2051 <= cbSceneParam._m0[64u].z)) && (_2052 <= cbSceneParam._m0[64u].w))
        {
            float _2191 = fma(_1846, cbSceneParam._m0[62u].w, fma(_1842, cbSceneParam._m0[62u].z, fma(_1838, cbSceneParam._m0[62u].y, _1834 * cbSceneParam._m0[62u].x))) / _2050;
            float _2195 = isnan(cbSceneParam._m0[41u].w) ? _2191 : (isnan(_2191) ? cbSceneParam._m0[41u].w : max(_2191, cbSceneParam._m0[41u].w));
            float _2238 = (cbSceneParam._m0[33u].x - sqrt(((_1848 * _1848) + (_1847 * _1847)) + (_1849 * _1849))) * cbSceneParam._m0[33u].y;
            float _4372 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
            float _2245 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2051, cbSceneParam._m0[33u].w + _2052), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2051, _2052 - cbSceneParam._m0[33u].z), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2051 - cbSceneParam._m0[33u].z, _2052 - cbSceneParam._m0[33u].w), _2195), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2051 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2052), _2195), 0.0)).x), vec4(0.25)));
            float _2249 = 1.0 - (_2245 * cbSceneParam._m0[34u].x);
            float _2250 = 1.0 - (_2245 * cbSceneParam._m0[34u].y);
            float _2251 = 1.0 - (_2245 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2251) ? _1998 : (isnan(_1998) ? _2251 : min(_1998, _2251));
            frontier_phi_37_36_ladder_1 = isnan(_2250) ? _1997 : (isnan(_1997) ? _2250 : min(_1997, _2250));
            frontier_phi_37_36_ladder_2 = isnan(_2249) ? _1996 : (isnan(_1996) ? _2249 : min(_1996, _2249));
        }
        else
        {
            frontier_phi_37_36_ladder = _1998;
            frontier_phi_37_36_ladder_1 = _1997;
            frontier_phi_37_36_ladder_2 = _1996;
        }
        _2062 = frontier_phi_37_36_ladder_2;
        _2064 = frontier_phi_37_36_ladder_1;
        _2066 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2062 = _1996;
        _2064 = _1997;
        _2066 = _1998;
    }
    uvec4 _2071 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _2073 = _2071.x * 14u;
    uint _2074 = _2073 + 13u;
    float _2081 = _746 + (-1.0);
    float _2086 = (cbLight._m0[_2074].x * _2081) + 1.0;
    float _2087 = (cbLight._m0[_2074].y * _2081) + 1.0;
    float _2088 = (cbLight._m0[_2074].z * _2081) + 1.0;
    float _2089 = (cbLight._m0[_2074].w * _2081) + 1.0;
    uint _2090 = _2073 + 5u;
    float _2096 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
    uint _2100 = _2073 + 4u;
    float _2110 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
    uint _2114 = _2073 | 1u;
    float _2125 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_581, _582, _583));
    float _2128 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_581, _582, _583));
    float _4408 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _4419 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2133 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * 0.3183098733425140380859375;
    float _2135 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * 0.3183098733425140380859375;
    float _2142 = ((cbLight._m0[_2090].x * _2096) * _2135) + (((cbLight._m0[_2100].x * _2062) * _2110) * _2133);
    float _2143 = ((_2096 * cbLight._m0[_2090].y) * _2135) + (((cbLight._m0[_2100].y * _2064) * _2110) * _2133);
    float _2144 = ((_2096 * cbLight._m0[_2090].z) * _2135) + (((cbLight._m0[_2100].z * _2066) * _2110) * _2133);
    uvec4 _2148 = floatBitsToUint(cbLight._m0[_2073 + 12u]);
    bool _2150 = _2148.x == 0u;
    float _2252;
    float _2254;
    float _2256;
    if (_2150)
    {
        _2252 = _2142;
        _2254 = _2143;
        _2256 = _2144;
    }
    else
    {
        uint _2260 = _2073 + 6u;
        float _2276 = (dot(vec3(cbLight._m0[_2073 + 2u].xyz), vec3(_581, _582, _583)) * 0.5) + 0.5;
        float _2277 = _2276 * _2276;
        float _4430 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2278 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2279 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2252 = (((cbLight._m0[_2260].x * 0.3183098733425140380859375) * _2278) * _2279) + _2142;
        _2254 = (((cbLight._m0[_2260].y * 0.3183098733425140380859375) * _2278) * _2279) + _2143;
        _2256 = (((cbLight._m0[_2260].z * 0.3183098733425140380859375) * _2278) * _2279) + _2144;
    }
    bool _2259 = _2148.y == 0u;
    float _2314;
    float _2316;
    float _2318;
    if (_2259)
    {
        _2314 = _2252;
        _2316 = _2254;
        _2318 = _2256;
    }
    else
    {
        uint _2476 = _2073 + 7u;
        float _2492 = (dot(vec3(cbLight._m0[_2073 + 3u].xyz), vec3(_581, _582, _583)) * 0.5) + 0.5;
        float _2493 = _2492 * _2492;
        float _4446 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2494 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2495 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2314 = (((cbLight._m0[_2476].x * 0.3183098733425140380859375) * _2494) * _2495) + _2252;
        _2316 = (((cbLight._m0[_2476].y * 0.3183098733425140380859375) * _2494) * _2495) + _2254;
        _2318 = (((cbLight._m0[_2476].z * 0.3183098733425140380859375) * _2494) * _2495) + _2256;
    }
    uint _2321 = _2073 + 8u;
    float _2334 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _584) * 0.949999988079071044921875);
    float _2335 = _2334 * _2334;
    float _2336 = cbLight._m0[_2073].x + _660;
    float _2337 = cbLight._m0[_2073].y + _661;
    float _2338 = cbLight._m0[_2073].z + _662;
    float _2342 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
    float _2343 = _2342 * _2336;
    float _2344 = _2342 * _2337;
    float _2345 = _2342 * _2338;
    float _2346 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2073].xyz));
    float _4462 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2349 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _4473 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _2350 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2351 = dot(vec3(_581, _582, _583), vec3(_2343, _2344, _2345));
    float _4484 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _2355 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2343, _2344, _2345));
    float _4495 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2359 = _2335 * _2335;
    float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
    float _2374 = (exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2375 = 1.0 - _2335;
    float _2386 = (0.5 / (((_2350 * ((_2349 * _2375) + _2335)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2375) + _2335) * _2349))) * _2349;
    float _4506 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2388 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
    uint _2402 = _2073 + 9u;
    float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _584) * 0.949999988079071044921875);
    float _2414 = _2413 * _2413;
    float _2415 = cbLight._m0[_2114].x + _660;
    float _2416 = cbLight._m0[_2114].y + _661;
    float _2417 = cbLight._m0[_2114].z + _662;
    float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
    float _2422 = _2421 * _2415;
    float _2423 = _2421 * _2416;
    float _2424 = _2421 * _2417;
    float _2425 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2114].xyz));
    float _4517 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2428 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
    float _2429 = dot(vec3(_581, _582, _583), vec3(_2422, _2423, _2424));
    float _4528 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _2433 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2422, _2423, _2424));
    float _4539 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2437 = _2414 * _2414;
    float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
    float _2450 = (exp2(log2(1.0 - (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2451 = 1.0 - _2414;
    float _2461 = (0.5 / (((_2350 * ((_2428 * _2451) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2451) + _2414) * _2428))) * _2428;
    float _4550 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2463 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
    float _2473 = (((_2450 * cbLight._m0[_2402].x) * _2463) * _2096) + ((((cbLight._m0[_2321].x * _2062) * _2374) * _2388) * _2110);
    float _2474 = (((_2450 * cbLight._m0[_2402].y) * _2463) * _2096) + ((((cbLight._m0[_2321].y * _2064) * _2374) * _2388) * _2110);
    float _2475 = (((_2450 * cbLight._m0[_2402].z) * _2463) * _2096) + ((((cbLight._m0[_2321].z * _2066) * _2374) * _2388) * _2110);
    float _2531;
    float _2533;
    float _2535;
    if (_2150)
    {
        _2531 = _2473;
        _2533 = _2474;
        _2535 = _2475;
    }
    else
    {
        uint _2537 = _2073 + 2u;
        uint _2541 = _2073 + 10u;
        float _2555 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2537].w)) * _584) * 0.949999988079071044921875);
        float _2556 = _2555 * _2555;
        float _2557 = cbLight._m0[_2537].x + _660;
        float _2558 = cbLight._m0[_2537].y + _661;
        float _2559 = cbLight._m0[_2537].z + _662;
        float _2563 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
        float _2564 = _2563 * _2557;
        float _2565 = _2563 * _2558;
        float _2566 = _2563 * _2559;
        float _2567 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2537].xyz));
        float _4561 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2571 = dot(vec3(_581, _582, _583), vec3(_2564, _2565, _2566));
        float _4572 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2575 = dot(vec3(cbLight._m0[_2537].xyz), vec3(_2564, _2565, _2566));
        float _4583 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2579 = _2556 * _2556;
        float _2583 = ((_2574 * _2574) * (_2579 + (-1.0))) + 1.0;
        float _2592 = (exp2(log2(1.0 - (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2593 = 1.0 - _2556;
        float _2603 = (0.5 / (((_2350 * ((_2570 * _2593) + _2556)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2593) + _2556) * _2570))) * _2570;
        float _4594 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2605 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2579 / ((_2583 * _2583) * 3.141590118408203125));
        float _2606 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2531 = (((_2592 * cbLight._m0[_2541].x) * _2605) * _2606) + _2473;
        _2533 = (((_2592 * cbLight._m0[_2541].y) * _2605) * _2606) + _2474;
        _2535 = (((_2592 * cbLight._m0[_2541].z) * _2605) * _2606) + _2475;
    }
    float _2637;
    float _2639;
    float _2641;
    if (_2259)
    {
        _2637 = _2531;
        _2639 = _2533;
        _2641 = _2535;
    }
    else
    {
        uint _2648 = _2073 + 3u;
        uint _2652 = _2073 + 11u;
        float _2666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2648].w)) * _584) * 0.949999988079071044921875);
        float _2667 = _2666 * _2666;
        float _2668 = cbLight._m0[_2648].x + _660;
        float _2669 = cbLight._m0[_2648].y + _661;
        float _2670 = cbLight._m0[_2648].z + _662;
        float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
        float _2675 = _2674 * _2668;
        float _2676 = _2674 * _2669;
        float _2677 = _2674 * _2670;
        float _2678 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_2648].xyz));
        float _4610 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2682 = dot(vec3(_581, _582, _583), vec3(_2675, _2676, _2677));
        float _4621 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2686 = dot(vec3(cbLight._m0[_2648].xyz), vec3(_2675, _2676, _2677));
        float _4632 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2690 = _2667 * _2667;
        float _2694 = ((_2685 * _2685) * (_2690 + (-1.0))) + 1.0;
        float _2703 = (exp2(log2(1.0 - (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2704 = 1.0 - _2667;
        float _2714 = (0.5 / (((_2350 * ((_2681 * _2704) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2350 * _2704) + _2667) * _2681))) * _2681;
        float _4643 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2716 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2690 / ((_2694 * _2694) * 3.141590118408203125));
        float _2717 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2637 = (((_2703 * cbLight._m0[_2652].x) * _2716) * _2717) + _2531;
        _2639 = (((_2703 * cbLight._m0[_2652].y) * _2716) * _2717) + _2533;
        _2641 = (((_2703 * cbLight._m0[_2652].z) * _2716) * _2717) + _2535;
    }
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    if (_2071.y == 0u)
    {
        uvec4 _2738 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2739 = _2738.x;
        uint _2750 = uint((float(_2738.y) * floor(float(uint(cbSceneParam._m0[85u].y * _682) / _2739))) + floor(float(uint(cbSceneParam._m0[85u].x * _681) / _2739)));
        float _2760 = (log2(_1849 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2761 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        uint _2764 = uint(isnan(14.0) ? _2761 : (isnan(_2761) ? 14.0 : min(_2761, 14.0)));
        uvec4 _2769 = texelFetch(g_lightClusterGridBuffer, int(((_2764 << 2u) + (_2750 << 6u)) >> 2u));
        uint _2770 = _2769.x;
        uint _2771 = _2738.z;
        float _2850;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        if (((((1u << ((_2771 >> 4u) & 15u)) + 4294967295u) & _2770) == 0u) || ((_2771 & 240u) == 0u))
        {
            _2850 = 0.0;
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
        }
        else
        {
            float _2851;
            float _2853;
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            uint _3009 = 0u;
            uint _3018;
            bool _3019;
            for (;;)
            {
                _3018 = texelFetch(g_lightClassification, int((((_2764 << 5u) + (_2750 << 9u)) + (_3009 << 2u)) >> 2u)).x;
                _3019 = _3018 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3019)
                {
                    frontier_phi_71_pred = _3008;
                    frontier_phi_71_pred_1 = _3007;
                    frontier_phi_71_pred_2 = _3006;
                    frontier_phi_71_pred_3 = _3005;
                    frontier_phi_71_pred_4 = _3004;
                    frontier_phi_71_pred_5 = _3003;
                }
                else
                {
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    uint _3154;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3008;
                    _3154 = _3018;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    for (;;)
                    {
                        uint _3158 = uint(findLSB(_3154)) + (_3009 << 5u);
                        uint _3155 = (_3154 + 4294967295u) & _3154;
                        uint _3160 = _3158 * 48u;
                        vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3160)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 3u)).x));
                        uint _3180 = (_3158 * 48u) + 4u;
                        vec4 _3193 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 3u)).x));
                        uint _3199 = (_3158 * 48u) + 8u;
                        vec3 _3210 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3199)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 2u)).x));
                        float _3214 = _3174.x - _1847;
                        float _3215 = _3174.y - _1848;
                        float _3216 = _3174.z - _1849;
                        float _3217 = dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216));
                        float _3220 = inversesqrt(_3217);
                        float _3221 = _3220 * _3214;
                        float _3222 = _3220 * _3215;
                        float _3223 = _3220 * _3216;
                        float _3224 = dot(vec3(_702, _705, _708), vec3(_3221, _3222, _3223));
                        float _3229 = 1.0 - (_3217 * _3174.w);
                        float _4669 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3230 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3231 = sqrt(_3217) * _3193.w;
                        float _3234 = 1.39999997615814208984375 / (_3231 + 1.39999997615814208984375);
                        float _3235 = _3234 * _3234;
                        float _3238 = ((1.0 - _3235) * _3224) + _3235;
                        float _3241 = _3231 * _3231;
                        float _3245 = ((isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0))) * _3230) / ((_3241 * 0.699999988079071044921875) + 1.0);
                        float _3249 = (-0.0) - _1847;
                        float _3250 = (-0.0) - _1848;
                        float _3251 = (-0.0) - _1849;
                        float _3255 = inversesqrt(dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251)));
                        float _3256 = _3255 * _3249;
                        float _3257 = _3255 * _3250;
                        float _3258 = _3255 * _3251;
                        float _3265 = exp2(log2(1.0 / ((_3241 * 3.5) + 5.0)) * 0.25);
                        float _3266 = 1.0 - _762;
                        float _3273 = sqrt(1.0 - ((1.0 - (_3266 * _3266)) * (1.0 - (_3265 * _3265))));
                        float _3274 = _3273 * _3273;
                        float _3275 = _3274 * _3274;
                        float _3276 = _3256 + _3221;
                        float _3277 = _3257 + _3222;
                        float _3278 = _3258 + _3223;
                        float _3282 = inversesqrt(dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278)));
                        float _3286 = dot(vec3(_702, _705, _708), vec3(_3256, _3257, _3258));
                        float _4685 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3289 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                        float _3290 = dot(vec3(_702, _705, _708), vec3(_3282 * _3276, _3282 * _3277, _3282 * _3278));
                        float _4696 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                        float _3297 = ((_3293 * _3293) * (_3275 + (-1.0))) + 1.0;
                        float _3298 = _3234 * _3274;
                        float _3299 = _3298 * _3298;
                        float _3302 = ((1.0 - _3299) * _3224) + _3299;
                        float _4707 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3303 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                        float _3304 = 1.0 - _3274;
                        float _3314 = (0.5 / (((_3303 * ((_3289 * _3304) + _3274)) + 9.9999999392252902907785028219223e-09) + (((_3303 * _3304) + _3274) * _3289))) * _3303;
                        float _4718 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3325 = (((_3275 * 3.1415927410125732421875) * (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) / ((_3297 * _3297) * ((_3241 * 2.1991131305694580078125) + 3.141590118408203125))) * _3230;
                        _3078 = (_3245 * _3193.x) + _3151;
                        _3079 = (_3245 * _3193.y) + _3152;
                        _3080 = (_3245 * _3193.z) + _3153;
                        _3075 = (_3325 * _3210.x) + _3148;
                        _3076 = (_3325 * _3210.y) + _3149;
                        _3077 = (_3325 * _3210.z) + _3150;
                        if (_3155 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3080;
                            _3154 = _3155;
                        }
                    }
                    frontier_phi_71_pred = _3080;
                    frontier_phi_71_pred_1 = _3079;
                    frontier_phi_71_pred_2 = _3078;
                    frontier_phi_71_pred_3 = _3077;
                    frontier_phi_71_pred_4 = _3076;
                    frontier_phi_71_pred_5 = _3075;
                }
                _2861 = frontier_phi_71_pred;
                _2859 = frontier_phi_71_pred_1;
                _2857 = frontier_phi_71_pred_2;
                _2855 = frontier_phi_71_pred_3;
                _2853 = frontier_phi_71_pred_4;
                _2851 = frontier_phi_71_pred_5;
                uint _3010 = _3009 + 1u;
                if (_3010 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3003 = _2851;
                    _3004 = _2853;
                    _3005 = _2855;
                    _3006 = _2857;
                    _3007 = _2859;
                    _3008 = _2861;
                    _3009 = _3010;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2850 = _2851;
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
        }
        uvec4 _2864 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2865 = _2864.z;
        uint _2867 = (_2865 >> 8u) & 15u;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        if (((4294967295u << _2867) & _2770) == 0u)
        {
            _2971 = _2850;
            _2973 = _2852;
            _2975 = _2854;
            _2977 = _2856;
            _2979 = _2858;
            _2981 = _2860;
        }
        else
        {
            float _2996 = inversesqrt(dot(vec3(_1847, _1848, _1849), vec3(_1847, _1848, _1849)));
            float _2997 = _2996 * _1847;
            float _2998 = _2996 * _1848;
            float _2999 = _2996 * _1849;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2867 < ((_2865 >> 12u) & 15u))
            {
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _2982;
                float _3131 = _2850;
                float _3132 = _2852;
                float _3133 = _2854;
                float _3134 = _2856;
                float _3135 = _2858;
                float _3136 = _2860;
                uint _3137 = _2867;
                uint _3146;
                bool _3147;
                for (;;)
                {
                    _3146 = texelFetch(g_lightClassification, int((((_2764 << 5u) + (_2750 << 9u)) + (_3137 << 2u)) >> 2u)).x;
                    _3147 = _3146 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3147)
                    {
                        frontier_phi_82_pred = _3136;
                        frontier_phi_82_pred_1 = _3135;
                        frontier_phi_82_pred_2 = _3134;
                        frontier_phi_82_pred_3 = _3133;
                        frontier_phi_82_pred_4 = _3132;
                        frontier_phi_82_pred_5 = _3131;
                    }
                    else
                    {
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3352 = _3131;
                        float _3353 = _3132;
                        float _3354 = _3133;
                        float _3355 = _3134;
                        float _3356 = _3135;
                        float _3357 = _3136;
                        uint _3358 = _3146;
                        uint _3359;
                        vec4 _3384;
                        float _3385;
                        vec4 _3400;
                        vec3 _3412;
                        vec4 _3427;
                        vec4 _3442;
                        float _3488;
                        bool _3489;
                        for (;;)
                        {
                            uint _3369 = ((_3137 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3358));
                            _3359 = (_3358 + 4294967295u) & _3358;
                            uint _3371 = _3369 * 40u;
                            _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            _3385 = _3384.w;
                            uint _3387 = (_3369 * 40u) + 4u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3402 = (_3369 * 40u) + 8u;
                            _3412 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x));
                            uint _3414 = (_3369 * 40u) + 16u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3429 = (_3369 * 40u) + 20u;
                            _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3444 = (_3369 * 40u) + 24u;
                            vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3463 = (_3369 * 40u) + 28u;
                            vec4 _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            _3488 = fma(_1849, _3476.z, fma(_1848, _3476.y, _3476.x * _1847)) + _3476.w;
                            _3489 = !((fma(_1849, _3457.z, fma(_1848, _3457.y, _3457.x * _1847)) + _3457.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3489)
                            {
                                float _3516 = _3384.x - _1847;
                                float _3517 = _3384.y - _1848;
                                float _3518 = _3384.z - _1849;
                                float _3519 = dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518));
                                float _3522 = inversesqrt(_3519);
                                float _3523 = _3522 * _3516;
                                float _3524 = _3522 * _3517;
                                float _3525 = _3522 * _3518;
                                float _3529 = 1.0 - (_3519 / (_3385 * _3385));
                                float _4729 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3534 = sqrt(_3519) * _3400.w;
                                float _3536 = 1.39999997615814208984375 / (_3534 + 1.39999997615814208984375);
                                float _3537 = _3536 * _3536;
                                float _3540 = ((1.0 - _3537) * dot(vec3(_3523, _3524, _3525), vec3(_702, _705, _708))) + _3537;
                                float _3543 = _3534 * _3534;
                                float _3547 = (fma(_1849, _3427.z, fma(_1848, _3427.y, _3427.x * _1847)) + _3427.w) / _3488;
                                float _3548 = (fma(_1849, _3442.z, fma(_1848, _3442.y, _3442.x * _1847)) + _3442.w) / _3488;
                                float _3552 = 1.0 - dot(vec2(_3547, _3548), vec2(_3547, _3548));
                                float _4745 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3553 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3554 = _3553 * (((isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0))) * _3530) / ((_3543 * 0.699999988079071044921875) + 1.0));
                                float _3566 = exp2(log2(1.0 / ((_3543 * 3.5) + 5.0)) * 0.25);
                                float _3567 = 1.0 - _762;
                                float _3574 = sqrt(1.0 - ((1.0 - (_3567 * _3567)) * (1.0 - (_3566 * _3566))));
                                float _3575 = _3574 * _3574;
                                float _3576 = _3575 * _3575;
                                float _3577 = _3523 - _2997;
                                float _3578 = _3524 - _2998;
                                float _3579 = _3525 - _2999;
                                float _3583 = inversesqrt(dot(vec3(_3577, _3578, _3579), vec3(_3577, _3578, _3579)));
                                float _3587 = dot(vec3(_702, _705, _708), vec3((-0.0) - _2997, (-0.0) - _2998, (-0.0) - _2999));
                                float _4756 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3590 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                                float _3591 = dot(vec3(_702, _705, _708), vec3(_3583 * _3577, _3583 * _3578, _3583 * _3579));
                                float _4767 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3594 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                                float _3598 = ((_3594 * _3594) * (_3576 + (-1.0))) + 1.0;
                                float _3599 = _3536 * _3575;
                                float _3600 = _3599 * _3599;
                                float _3606 = ((1.0 - _3600) * dot(vec3(_702, _705, _708), vec3(_3523, _3524, _3525))) + _3600;
                                float _4778 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3607 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                                float _3608 = 1.0 - _3575;
                                float _3618 = (0.5 / (((_3607 * ((_3590 * _3608) + _3575)) + 9.9999999392252902907785028219223e-09) + (((_3607 * _3608) + _3575) * _3590))) * _3607;
                                float _4789 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3628 = (_3553 * _3530) * (((_3576 * 3.1415927410125732421875) * (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) / ((_3598 * _3598) * ((_3543 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3554 * _3400.z;
                                frontier_phi_88_pred_1 = _3554 * _3400.y;
                                frontier_phi_88_pred_2 = _3554 * _3400.x;
                                frontier_phi_88_pred_3 = _3628 * _3412.z;
                                frontier_phi_88_pred_4 = _3628 * _3412.y;
                                frontier_phi_88_pred_5 = _3628 * _3412.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3637 = frontier_phi_88_pred;
                            _3636 = frontier_phi_88_pred_1;
                            _3635 = frontier_phi_88_pred_2;
                            _3634 = frontier_phi_88_pred_3;
                            _3633 = frontier_phi_88_pred_4;
                            _3632 = frontier_phi_88_pred_5;
                            _3342 = _3635 + _3355;
                            _3343 = _3636 + _3356;
                            _3344 = _3637 + _3357;
                            _3339 = _3632 + _3352;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            if (_3359 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3359;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3344;
                        frontier_phi_82_pred_1 = _3343;
                        frontier_phi_82_pred_2 = _3342;
                        frontier_phi_82_pred_3 = _3341;
                        frontier_phi_82_pred_4 = _3340;
                        frontier_phi_82_pred_5 = _3339;
                    }
                    _2982 = frontier_phi_82_pred;
                    _2980 = frontier_phi_82_pred_1;
                    _2978 = frontier_phi_82_pred_2;
                    _2976 = frontier_phi_82_pred_3;
                    _2974 = frontier_phi_82_pred_4;
                    _2972 = frontier_phi_82_pred_5;
                    uint _3138 = _3137 + 1u;
                    if (_3138 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3131 = _2972;
                        _3132 = _2974;
                        _3133 = _2976;
                        _3134 = _2978;
                        _3135 = _2980;
                        _3136 = _2982;
                        _3137 = _3138;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2978;
                frontier_phi_63_64_ladder_1 = _2982;
                frontier_phi_63_64_ladder_2 = _2980;
                frontier_phi_63_64_ladder_3 = _2976;
                frontier_phi_63_64_ladder_4 = _2974;
                frontier_phi_63_64_ladder_5 = _2972;
            }
            else
            {
                frontier_phi_63_64_ladder = _2856;
                frontier_phi_63_64_ladder_1 = _2860;
                frontier_phi_63_64_ladder_2 = _2858;
                frontier_phi_63_64_ladder_3 = _2854;
                frontier_phi_63_64_ladder_4 = _2852;
                frontier_phi_63_64_ladder_5 = _2850;
            }
            _2971 = frontier_phi_63_64_ladder_5;
            _2973 = frontier_phi_63_64_ladder_4;
            _2975 = frontier_phi_63_64_ladder_3;
            _2977 = frontier_phi_63_64_ladder;
            _2979 = frontier_phi_63_64_ladder_2;
            _2981 = frontier_phi_63_64_ladder_1;
        }
        float _2986 = isnan(1.0) ? _746 : (isnan(_746) ? 1.0 : min(_746, 1.0));
        _2783 = (_2986 * _2977) + _2314;
        _2785 = (_2986 * _2979) + _2316;
        _2787 = (_2986 * _2981) + _2318;
        _2789 = ((_2971 * 0.039999999105930328369140625) * _2986) + _2637;
        _2791 = ((_2973 * 0.039999999105930328369140625) * _2986) + _2639;
        _2793 = ((_2975 * 0.039999999105930328369140625) * _2986) + _2641;
    }
    else
    {
        _2783 = _2314;
        _2785 = _2316;
        _2787 = _2318;
        _2789 = _2637;
        _2791 = _2639;
        _2793 = _2641;
    }
    float _4805 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _4816 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4827 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _2810 = ((isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2783 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _746))) + ((_2789 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1582)) * cbPerFrame._m0[3u].x);
    float _2811 = ((isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2785 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _746))) + ((_2791 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1582)) * cbPerFrame._m0[3u].x);
    float _2812 = ((isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0))) * (_2787 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _746))) + ((_2793 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1582)) * cbPerFrame._m0[3u].x);
    uint _2813 = _260 + 6u;
    float _2821 = _681 / cbSceneParam._m0[86u].x;
    float _2822 = _682 / cbSceneParam._m0[86u].y;
    vec4 _2836 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2821, _2822, (log2((isnan(cbSceneParam._m0[77u].w) ? _602 : (isnan(_602) ? cbSceneParam._m0[77u].w : min(_602, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2838 = _2836.x;
    float _2839 = _2836.y;
    float _2840 = _2836.z;
    float _2841 = _2836.w;
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    if (_602 > cbSceneParam._m0[78u].w)
    {
        float _2875 = isnan(_602) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _602 : min(cbSceneParam._m0[80u].w, _602));
        float _2876 = _2875 / _602;
        float _2887 = _2876 * _653;
        float _2888 = _654 * _2876;
        float _2889 = (-0.0) - _2888;
        float _2891 = _2876 * _655;
        float _2893 = (cbSceneParam._m0[77u].w * _2889) / _2875;
        float _2894 = _2893 + cbSceneParam._m0[79u].w;
        float _2895 = cbSceneParam._m0[79u].w - _2888;
        float _2901 = sqrt(((_2887 * _2887) + (_2888 * _2888)) + (_2891 * _2891));
        float _2904 = (1.0 - (cbSceneParam._m0[77u].w / _2875)) * _2901;
        float _2909 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2911 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3088;
        if (abs((_2889 - _2893) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3088 = ((((_2894 > 0.0) ? exp2(_2909 * _2894) : (2.0 - exp2(_2911 * _2894))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2904;
        }
        else
        {
            float _3032 = 1.0 / cbSceneParam._m0[80u].x;
            float _3033 = isnan(_2895) ? _2894 : (isnan(_2894) ? _2895 : max(_2894, _2895));
            float _3034 = isnan(_2895) ? _2894 : (isnan(_2894) ? _2895 : min(_2894, _2895));
            float _3043 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : min(_3033, 0.0));
            float _3044 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : min(_3034, 0.0));
            _3088 = ((abs(_2901 / _2889) * cbSceneParam._m0[80u].y) * ((((_3043 - _3044) * 2.0) - ((exp2(_2909 * (isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0)))) - exp2(_2909 * (isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0))))) * _3032)) - ((exp2(_2911 * _3043) - exp2(_2911 * _3044)) * _3032))) + (_2904 * cbSceneParam._m0[80u].z);
        }
        vec4 _3090 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2821, _2822, 1.0), 0.0);
        float _3099 = exp2((_3088 * (-1.44269502162933349609375)) * (1.0 - _3090.w));
        float _3100 = log2(_3099);
        float _3116 = log2(_2841);
        _2913 = (exp2(_3116 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3100 * cbSceneParam._m0[78u].x)) * _3090.x) / cbSceneParam._m0[78u].x)) + _2838;
        _2915 = (exp2(_3116 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3100 * cbSceneParam._m0[78u].y)) * _3090.y) / cbSceneParam._m0[78u].y)) + _2839;
        _2917 = (exp2(_3116 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3100 * cbSceneParam._m0[78u].z)) * _3090.z) / cbSceneParam._m0[78u].z)) + _2840;
        _2919 = _3099 * _2841;
    }
    else
    {
        _2913 = _2838;
        _2915 = _2839;
        _2917 = _2840;
        _2919 = _2841;
    }
    bool _3126;
    vec4 _2929;
    vec4 _2951;
    float _2953;
    float _2957;
    float _2958;
    float _2959;
    float _2960;
    bool _2970;
    for (;;)
    {
        _2929 = cbMatDynParam._m0[0u];
        float _2931 = roundEven(_2929.y);
        bool _2932 = _2931 == 3.0;
        float _2933 = log2(_2919);
        float _2940 = exp2(_2933 * cbSceneParam._m0[78u].x) * _2810;
        float _2941 = exp2(_2933 * cbSceneParam._m0[78u].y) * _2811;
        float _2942 = exp2(_2933 * cbSceneParam._m0[78u].z) * _2812;
        float _2949 = _669 + (-0.5);
        _2951 = cbMtdParam._m0[1u];
        _2953 = _2951.y * _2949;
        float _2956 = (_2931 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2957 = _2956 * (_2932 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2913)));
        _2958 = _2956 * (_2932 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2915)));
        _2959 = _2956 * (_2932 ? _2942 : (_2942 + (cbSceneParam._m0[72u].w * _2917)));
        _2960 = _2949 * 0.999000012874603271484375;
        _2970 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2970)
        {
            if ((cbInstanceData._m0[_260 + 7u].x + _2960) < 0.5)
            {
                _3126 = true;
                break;
            }
        }
        uint _3067 = _721 + uint(_2929.w);
        if ((cbInstanceData._m0[_3067].w < 1.0) && ((cbInstanceData._m0[_3067].w + _2960) < 0.5))
        {
            _3126 = true;
            break;
        }
        if ((_2953 + 1.0) < _2951.x)
        {
            _3126 = true;
            break;
        }
        _3126 = false;
        break;
    }
    float _3330;
    if (_3126)
    {
        discard_state = true;
        _3330 = 0.0;
    }
    else
    {
        _3330 = cbInstanceData._m0[_2813].w;
    }
    SV_Target.x = _2957;
    SV_Target.y = _2958;
    SV_Target.z = _2959;
    SV_Target.w = _3330;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2813].w;
    discard_exit();
}


