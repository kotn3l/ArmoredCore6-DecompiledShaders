#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1224;
float _3585;
float _3586;
float _3587;
float _3588;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _360 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _360) * cbMtdParam._m0[24u].x) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3597 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _385 = (_378 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _386 = (_378 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _387 = (_378 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _400 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _417 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _419 = _417.x;
    float _420 = _417.y;
    float _421 = _417.z;
    float _430 = ((_400.z - _421) * _378) + _421;
    float _433 = ((((_400.x - _419) * _378) + _419) * 2.0) + (-1.0);
    float _435 = ((((_400.y - _420) * _378) + _420) * 2.0) + (-1.0);
    float _436 = dot(vec2(_433, _435), vec2(_433, _435));
    float _3608 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _441 = sqrt(1.0 - (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))));
    vec4 _457 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _469 = (((_457.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _433;
    float _470 = (((_457.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _435;
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _484 = _482.x;
    float _485 = 1.0 - _484;
    float _513 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_484 - _485) * cbMtdParam._m0[24u].w) + _485) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3619 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _522 = ((((cbMtdParam._m0[10u].x - _385) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _514) + _385;
    float _523 = ((((cbMtdParam._m0[10u].y - _386) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _514) + _386;
    float _524 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _387)) * _514) + _387;
    float _528 = (cbMtdParam._m0[19u].w * (_457.z - _430)) + _430;
    float _532 = ((cbMtdParam._m0[23u].y - _528) * _514) + _528;
    vec4 _551 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _553 = _551.x;
    float _554 = _551.y;
    float _560 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_231, _232, _233, 0.0));
    vec4 _575 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _262) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _263) + cbTextureTilingScale._m0[18u].w));
    float _577 = _575.x;
    float _582 = fract(_575.w + cbPerFrame._m0[22u].x);
    float _584 = (1.0 - _582) * _577;
    float _589 = ((_582 + (-1.0)) + _577) * 9.0;
    float _591 = ((_577 + (-1.0)) + _582) * 9.0;
    float _592 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _593 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _607 = (_584 * ((_575.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _592 : (isnan(_592) ? 3.0 : min(_592, 3.0))) * 3.1415927410125732421875);
    float _609 = (_584 * ((_575.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _593 : (isnan(_593) ? 3.0 : min(_593, 3.0))) * 3.1415927410125732421875);
    float _613 = inversesqrt(dot(vec3(_607, _609, 1.0), vec3(_607, _609, 1.0)));
    float _629 = (((((0.5 - _553) + ((_607 * 0.5) * _613)) * _560) + _553) * 2.0) + (-1.0);
    float _630 = (((((0.5 - _554) + ((_613 * 0.5) * _609)) * _560) + _554) * 2.0) + (-1.0);
    float _631 = dot(vec2(_629, _630), vec2(_629, _630));
    float _3650 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _647 = ((((cbMtdParam._m0[22u].z * _469) - _469) + _629) * _514) + _469;
    float _648 = ((((cbMtdParam._m0[22u].z * _470) - _470) + _630) * _514) + _470;
    float _649 = (_514 * (sqrt(1.0 - (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) - _441)) + _441;
    float _651 = cbMtdParam._m0[22u].x + _457.w;
    float _654 = fma(_649, _231, fma(_648, _237 * TANGENT.x, (_223 * _215) * _647));
    float _657 = fma(_649, _232, fma(_648, _237 * TANGENT.y, (_223 * _216) * _647));
    float _660 = fma(_649, _233, fma(_648, _237 * TANGENT.z, (_223 * _217) * _647));
    float _664 = inversesqrt(dot(vec3(_654, _657, _660), vec3(_654, _657, _660)));
    float _665 = _664 * _654;
    float _666 = _664 * _657;
    float _667 = _664 * _660;
    float _3661 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _668 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _3672 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _3683 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3694 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3705 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _686 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _737 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _727);
    float _738 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _727);
    float _739 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _727);
    float _743 = inversesqrt(dot(vec3(_737, _738, _739), vec3(_737, _738, _739)));
    float _744 = _737 * _743;
    float _745 = _738 * _743;
    float _746 = _739 * _743;
    vec4 _751 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _753 = _751.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _906 = sqrt(((_737 * _737) + (_738 * _738)) + (_739 * _739));
        float _912 = (cbMatDynParam._m0[5u].x * _906) + cbMatDynParam._m0[5u].y;
        float _3716 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _917 = (cbMatDynParam._m0[5u].z * _906) + cbMatDynParam._m0[5u].w;
        float _3727 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) - _913)) + _913) < ((_753 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _764 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _765 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _783 = fma(_667, cbSceneParam._m0[5u].z, fma(_666, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _665));
    float _786 = fma(_667, cbSceneParam._m0[6u].z, fma(_666, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _665));
    float _789 = fma(_667, cbSceneParam._m0[7u].z, fma(_666, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _665));
    uint _802 = _243 + 9u;
    uint _803 = _802 + uint(cbMatDynParam._m0[0u].w);
    float _809 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) * cbInstanceData._m0[_803].x;
    float _810 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0)))) * cbInstanceData._m0[_803].y;
    float _811 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))) * cbInstanceData._m0[_803].z;
    float _3738 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _812 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    vec4 _823 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _764, cbSceneParam._m0[86u].y * _765));
    float _827 = ((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * TEXCOORD_5.w) * _823.x;
    float _828 = dot(vec3(_665, _666, _667), vec3(_744, _745, _746));
    float _831 = _828 * 2.0;
    float _835 = (_831 * _665) - _744;
    float _836 = (_831 * _666) - _745;
    float _837 = (_831 * _667) - _746;
    float _841 = abs(dot(vec3(_744, _745, _746), vec3(_665, _666, _667)));
    float _3771 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _843 = sqrt(_668);
    float _855 = exp2((_843 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_843 * 3.0));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _895 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1223;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _949 = fma(_895, cbModelParam._m0[26u].z, fma(_891, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _887));
        float _953 = fma(_895, cbModelParam._m0[27u].z, fma(_891, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _887));
        float _957 = fma(_895, cbModelParam._m0[28u].z, fma(_891, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _887));
        float _981 = _887 + _665;
        float _982 = _891 + _666;
        float _983 = _895 + _667;
        float _993 = fma(_983, cbModelParam._m0[26u].z, fma(_982, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _981)) - _949;
        float _994 = fma(_983, cbModelParam._m0[27u].z, fma(_982, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _981)) - _953;
        float _995 = fma(_983, cbModelParam._m0[28u].z, fma(_982, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _981)) - _957;
        float _999 = inversesqrt(dot(vec3(_993, _994, _995), vec3(_993, _994, _995)));
        float _1012 = ((_999 * _993) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_949 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_999 * _994) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_953 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_999 * _995) / cbModelParam._m0[34u].z) + ((((((_957 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        float _1051 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1017.x + (-0.5));
        float _1053 = _1051 * (_1017.y + (-0.5));
        float _1054 = _1051 * (_1017.z + (-0.5));
        float _1061 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1024.x + (-0.5));
        float _1063 = _1061 * (_1024.y + (-0.5));
        float _1064 = _1061 * (_1024.z + (-0.5));
        float _1071 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1031.x + (-0.5));
        float _1073 = _1071 * (_1031.y + (-0.5));
        float _1074 = _1071 * (_1031.z + (-0.5));
        float _1081 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1038.x + (-0.5));
        float _1083 = _1081 * (_1038.y + (-0.5));
        float _1084 = _1081 * (_1038.z + (-0.5));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = _1052 * 0.5;
        float _1089 = _1062 * 0.5;
        float _1090 = _1072 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1105 = (dot(vec3(_665, _666, _667), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1115 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3819 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1117 + 1.0))) + _1122) * _1085;
        float _1132 = _1053 * 0.5;
        float _1133 = _1063 * 0.5;
        float _1134 = _1073 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_665, _666, _667), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3852 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1159 + 1.0))) + _1164) * _1086;
        float _1174 = _1054 * 0.5;
        float _1175 = _1064 * 0.5;
        float _1176 = _1074 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_665, _666, _667), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3885 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1201 + 1.0))) + _1206) * _1087;
        _1223 = _1054;
        _1225 = _1053;
        _1226 = _1052;
        _1227 = _1064;
        _1228 = _1063;
        _1229 = _1062;
        _1230 = _1074;
        _1231 = _1073;
        _1232 = _1072;
        _1233 = _1087;
        _1234 = _1086;
        _1235 = _1085;
        _1236 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1237 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
    }
    else
    {
        _1223 = _1224;
        _1225 = _1224;
        _1226 = _1224;
        _1227 = _1224;
        _1228 = _1224;
        _1229 = _1224;
        _1230 = _1224;
        _1231 = _1224;
        _1232 = _1224;
        _1233 = _1224;
        _1234 = _1224;
        _1235 = _1224;
        _1236 = 0.0;
        _1237 = 0.0;
        _1238 = 0.0;
    }
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1266 = fma(_895, cbModelParam._m0[30u].z, fma(_891, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _887));
        float _1270 = fma(_895, cbModelParam._m0[31u].z, fma(_891, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _887));
        float _1274 = fma(_895, cbModelParam._m0[32u].z, fma(_891, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _887));
        float _1297 = _887 + _665;
        float _1298 = _891 + _666;
        float _1299 = _895 + _667;
        float _1309 = fma(_1299, cbModelParam._m0[30u].z, fma(_1298, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1297)) - _1266;
        float _1310 = fma(_1299, cbModelParam._m0[31u].z, fma(_1298, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1297)) - _1270;
        float _1311 = fma(_1299, cbModelParam._m0[32u].z, fma(_1298, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1297)) - _1274;
        float _1315 = inversesqrt(dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311)));
        float _1328 = ((_1315 * _1309) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1266 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1329 = ((_1315 * _1310) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1270 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1330 = ((_1315 * _1311) / cbModelParam._m0[35u].z) + ((((((_1274 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1328, _1329, _1330), 0.0);
        float _1365 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1332.x + (-0.5));
        float _1367 = _1365 * (_1332.y + (-0.5));
        float _1368 = _1365 * (_1332.z + (-0.5));
        float _1375 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1339.x + (-0.5));
        float _1377 = _1375 * (_1339.y + (-0.5));
        float _1378 = _1375 * (_1339.z + (-0.5));
        float _1385 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1346.x + (-0.5));
        float _1387 = _1385 * (_1346.y + (-0.5));
        float _1388 = _1385 * (_1346.z + (-0.5));
        float _1395 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1353.x + (-0.5));
        float _1397 = _1395 * (_1353.y + (-0.5));
        float _1398 = _1395 * (_1353.z + (-0.5));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = _1366 * 0.5;
        float _1403 = _1376 * 0.5;
        float _1404 = _1386 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_665, _666, _667), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _3948 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1429 + 1.0))) + _1434) * _1399;
        float _1444 = _1367 * 0.5;
        float _1445 = _1377 * 0.5;
        float _1446 = _1387 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_665, _666, _667), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _3981 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1471 + 1.0))) + _1476) * _1400;
        float _1486 = _1368 * 0.5;
        float _1487 = _1378 * 0.5;
        float _1488 = _1388 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_665, _666, _667), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4014 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1513 + 1.0))) + _1518) * _1401;
        _1535 = _1368;
        _1536 = _1367;
        _1537 = _1366;
        _1538 = _1378;
        _1539 = _1377;
        _1540 = _1376;
        _1541 = _1388;
        _1542 = _1387;
        _1543 = _1386;
        _1544 = _1401;
        _1545 = _1400;
        _1546 = _1399;
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
        _1548 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
        _1549 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
    }
    else
    {
        _1535 = _1224;
        _1536 = _1224;
        _1537 = _1224;
        _1538 = _1224;
        _1539 = _1224;
        _1540 = _1224;
        _1541 = _1224;
        _1542 = _1224;
        _1543 = _1224;
        _1544 = _1224;
        _1545 = _1224;
        _1546 = _1224;
        _1547 = 0.0;
        _1548 = 0.0;
        _1549 = 0.0;
    }
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1236)) + _1236;
    float _1560 = (cbModelParam._m0[1u].x * (_1548 - _1237)) + _1237;
    float _1561 = (cbModelParam._m0[1u].x * (_1549 - _1238)) + _1238;
    float _1582 = fma(_1561, cbSceneParam._m0[89u].z, fma(_1560, cbSceneParam._m0[89u].y, _1559 * cbSceneParam._m0[89u].x));
    float _1585 = fma(_1561, cbSceneParam._m0[90u].z, fma(_1560, cbSceneParam._m0[90u].y, _1559 * cbSceneParam._m0[90u].x));
    float _1588 = fma(_1561, cbSceneParam._m0[91u].z, fma(_1560, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1559));
    float _1603 = _835 * 0.5;
    float _1604 = _836 * 0.5;
    float _1605 = _837 * 0.5;
    float _1606 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1537, _1540, _1543, _1546));
    float _1609 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1536, _1539, _1542, _1545));
    float _1612 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1646;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1619 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1223, _1227, _1230, _1233));
        float _1623 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1225, _1228, _1231, _1234));
        float _1627 = dot(vec4(_1603, _1604, _1605, 1.0), vec4(_1226, _1229, _1232, _1235));
        float _1634 = dot(vec4(cbModelParam._m0[39u]), vec4(_1603, _1604, _1605, 1.0));
        _1646 = dot(vec3(isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1634) ? 0.0 : (isnan(0.0) ? _1634 : max(0.0, _1634))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1646 = 1.0;
    }
    float _1657;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1648 = dot(vec4(cbModelParam._m0[40u]), vec4(_1603, _1604, _1605, 1.0));
        _1657 = dot(vec3(isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1648) ? 0.0 : (isnan(0.0) ? _1648 : max(0.0, _1648))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1657 = 1.0;
    }
    float _1661 = (_1657 * cbModelParam._m0[1u].x) + (_1646 * (1.0 - cbModelParam._m0[1u].x));
    float _1671 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _668);
    float _1672 = isnan(_1671) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1671 : min(cbModelParam._m0[25u].z, _1671));
    float _1754;
    float _1756;
    float _1758;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1721 = fma(_895, cbModelParam._m0[13u].z, fma(_891, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _887)) + cbModelParam._m0[13u].w;
        float _1725 = fma(_895, cbModelParam._m0[14u].z, fma(_891, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _887)) + cbModelParam._m0[14u].w;
        float _1729 = fma(_895, cbModelParam._m0[15u].z, fma(_891, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _887)) + cbModelParam._m0[15u].w;
        float _1732 = fma(_837, cbModelParam._m0[13u].z, fma(_836, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _835));
        float _1735 = fma(_837, cbModelParam._m0[14u].z, fma(_836, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _835));
        float _1738 = fma(_837, cbModelParam._m0[15u].z, fma(_836, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _835));
        float _1766;
        if (_1732 > 0.0)
        {
            _1766 = abs((1.0 - _1721) / _1732);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1721 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1766 = frontier_phi_17_15_ladder;
        }
        float _1967;
        if (_1735 > 0.0)
        {
            _1967 = abs((1.0 - _1725) / _1735);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1725 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1967 = frontier_phi_26_22_ladder;
        }
        float _2210;
        if (_1738 > 0.0)
        {
            _2210 = abs((1.0 - _1729) / _1738);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1729 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2210 = frontier_phi_38_33_ladder;
        }
        float _2212 = isnan(_1967) ? _1766 : (isnan(_1766) ? _1967 : min(_1766, _1967));
        float _2213 = isnan(_2210) ? _2212 : (isnan(_2212) ? _2210 : min(_2212, _2210));
        float _2217 = (_2213 * _1732) + _1721;
        float _2218 = (_2213 * _1735) + _1725;
        float _2219 = (_2213 * _1738) + _1729;
        float _2220 = _2213 * 9.9999997473787516355514526367188e-05;
        float _2222 = (-1.0) - _2220;
        float _2224 = _2220 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2219 > _2224) || ((_2219 < _2222) || ((_2218 > _2224) || ((_2218 < _2222) || ((_2217 < _2222) || (_2217 > _2224))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2343 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2219, cbModelParam._m0[9u].z, fma(_2218, cbModelParam._m0[9u].y, _2217 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2219, cbModelParam._m0[10u].z, fma(_2218, cbModelParam._m0[10u].y, _2217 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2219, cbModelParam._m0[11u].z, fma(_2218, cbModelParam._m0[11u].y, _2217 * cbModelParam._m0[11u].x))), _1672);
            frontier_phi_16_38_ladder = _2343.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2343.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2343.x * cbModelParam._m0[1u].y;
        }
        _1754 = frontier_phi_16_38_ladder_2;
        _1756 = frontier_phi_16_38_ladder_1;
        _1758 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1742 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_835, _836, _837), _1672);
        _1754 = _1742.x * cbModelParam._m0[1u].y;
        _1756 = _1742.y * cbModelParam._m0[1u].y;
        _1758 = _1742.z * cbModelParam._m0[1u].y;
    }
    float _1762 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _668);
    float _1763 = isnan(_1762) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1762 : min(cbModelParam._m0[25u].w, _1762));
    float _1853;
    float _1855;
    float _1857;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1817 = fma(_895, cbModelParam._m0[21u].z, fma(_891, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _887)) + cbModelParam._m0[21u].w;
        float _1821 = fma(_895, cbModelParam._m0[22u].z, fma(_891, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _887)) + cbModelParam._m0[22u].w;
        float _1825 = fma(_895, cbModelParam._m0[23u].z, fma(_891, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _887)) + cbModelParam._m0[23u].w;
        float _1828 = fma(_837, cbModelParam._m0[21u].z, fma(_836, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _835));
        float _1831 = fma(_837, cbModelParam._m0[22u].z, fma(_836, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _835));
        float _1834 = fma(_837, cbModelParam._m0[23u].z, fma(_836, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _835));
        float _1972;
        if (_1828 > 0.0)
        {
            _1972 = abs((1.0 - _1817) / _1828);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1817 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1972 = frontier_phi_28_24_ladder;
        }
        float _2237;
        if (_1831 > 0.0)
        {
            _2237 = abs((1.0 - _1821) / _1831);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1821 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2237 = frontier_phi_40_35_ladder;
        }
        float _2442;
        if (_1834 > 0.0)
        {
            _2442 = abs((1.0 - _1825) / _1834);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1825 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2442 = frontier_phi_49_46_ladder;
        }
        float _2444 = isnan(_2237) ? _1972 : (isnan(_1972) ? _2237 : min(_1972, _2237));
        float _2445 = isnan(_2442) ? _2444 : (isnan(_2444) ? _2442 : min(_2444, _2442));
        float _2449 = (_2445 * _1828) + _1817;
        float _2450 = (_2445 * _1831) + _1821;
        float _2451 = (_2445 * _1834) + _1825;
        float _2452 = _2445 * 9.9999997473787516355514526367188e-05;
        float _2453 = (-1.0) - _2452;
        float _2455 = _2452 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2451 > _2455) || ((_2451 < _2453) || ((_2450 > _2455) || ((_2450 < _2453) || ((_2449 < _2453) || (_2449 > _2455))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2650 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2451, cbModelParam._m0[17u].z, fma(_2450, cbModelParam._m0[17u].y, _2449 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2451, cbModelParam._m0[18u].z, fma(_2450, cbModelParam._m0[18u].y, _2449 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2451, cbModelParam._m0[19u].z, fma(_2450, cbModelParam._m0[19u].y, _2449 * cbModelParam._m0[19u].x))), _1763);
            frontier_phi_25_49_ladder = _2650.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2650.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2650.x * cbModelParam._m0[1u].z;
        }
        _1853 = frontier_phi_25_49_ladder_2;
        _1855 = frontier_phi_25_49_ladder_1;
        _1857 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1837 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_835, _836, _837), _1763);
        _1853 = _1837.x * cbModelParam._m0[1u].z;
        _1855 = _1837.y * cbModelParam._m0[1u].z;
        _1857 = _1837.z * cbModelParam._m0[1u].z;
    }
    float _1869 = ((((1.0 - _855) * ((_843 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_855 * _843)) * _827;
    float _1870 = _1869 * ((cbModelParam._m0[1u].w * (_1853 - _1754)) + _1754);
    float _1871 = _1869 * ((cbModelParam._m0[1u].w * (_1855 - _1756)) + _1756);
    float _1872 = _1869 * ((cbModelParam._m0[1u].w * (_1857 - _1758)) + _1758);
    float _1875 = fma(_1872, cbSceneParam._m0[89u].z, fma(_1871, cbSceneParam._m0[89u].y, _1870 * cbSceneParam._m0[89u].x));
    float _1878 = fma(_1872, cbSceneParam._m0[90u].z, fma(_1871, cbSceneParam._m0[90u].y, _1870 * cbSceneParam._m0[90u].x));
    float _1881 = fma(_1872, cbSceneParam._m0[91u].z, fma(_1871, cbSceneParam._m0[91u].y, _1870 * cbSceneParam._m0[91u].x));
    uvec4 _1891 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1893 = _1891.x * 14u;
    uint _1894 = _1893 + 13u;
    float _1901 = _827 + (-1.0);
    float _1906 = (cbLight._m0[_1894].x * _1901) + 1.0;
    float _1907 = (cbLight._m0[_1894].y * _1901) + 1.0;
    float _1908 = (cbLight._m0[_1894].z * _1901) + 1.0;
    float _1909 = (cbLight._m0[_1894].w * _1901) + 1.0;
    uint _1910 = _1893 + 5u;
    float _1916 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
    uint _1920 = _1893 + 4u;
    float _1926 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
    uint _1930 = _1893 | 1u;
    float _1941 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_665, _666, _667));
    float _1944 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_665, _666, _667));
    float _4150 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _4161 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1949 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * 0.3183098733425140380859375;
    float _1951 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * 0.3183098733425140380859375;
    float _1958 = ((cbLight._m0[_1910].x * _1916) * _1951) + ((cbLight._m0[_1920].x * _1926) * _1949);
    float _1959 = ((_1916 * cbLight._m0[_1910].y) * _1951) + ((_1926 * cbLight._m0[_1920].y) * _1949);
    float _1960 = ((_1916 * cbLight._m0[_1910].z) * _1951) + ((_1926 * cbLight._m0[_1920].z) * _1949);
    uvec4 _1964 = floatBitsToUint(cbLight._m0[_1893 + 12u]);
    bool _1966 = _1964.x == 0u;
    float _1977;
    float _1979;
    float _1981;
    if (_1966)
    {
        _1977 = _1958;
        _1979 = _1959;
        _1981 = _1960;
    }
    else
    {
        uint _1985 = _1893 + 6u;
        float _2001 = (dot(vec3(cbLight._m0[_1893 + 2u].xyz), vec3(_665, _666, _667)) * 0.5) + 0.5;
        float _2002 = _2001 * _2001;
        float _4172 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2003 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2004 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _1977 = (((cbLight._m0[_1985].x * 0.3183098733425140380859375) * _2003) * _2004) + _1958;
        _1979 = (((cbLight._m0[_1985].y * 0.3183098733425140380859375) * _2003) * _2004) + _1959;
        _1981 = (((cbLight._m0[_1985].z * 0.3183098733425140380859375) * _2003) * _2004) + _1960;
    }
    bool _1984 = _1964.y == 0u;
    float _2022;
    float _2024;
    float _2026;
    if (_1984)
    {
        _2022 = _1977;
        _2024 = _1979;
        _2026 = _1981;
    }
    else
    {
        uint _2181 = _1893 + 7u;
        float _2197 = (dot(vec3(cbLight._m0[_1893 + 3u].xyz), vec3(_665, _666, _667)) * 0.5) + 0.5;
        float _2198 = _2197 * _2197;
        float _4188 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2199 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2200 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2022 = (((cbLight._m0[_2181].x * 0.3183098733425140380859375) * _2199) * _2200) + _1977;
        _2024 = (((cbLight._m0[_2181].y * 0.3183098733425140380859375) * _2199) * _2200) + _1979;
        _2026 = (((cbLight._m0[_2181].z * 0.3183098733425140380859375) * _2199) * _2200) + _1981;
    }
    uint _2029 = _1893 + 8u;
    float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1893].w)) * _668) * 0.949999988079071044921875);
    float _2043 = _2042 * _2042;
    float _2044 = cbLight._m0[_1893].x + _744;
    float _2045 = cbLight._m0[_1893].y + _745;
    float _2046 = cbLight._m0[_1893].z + _746;
    float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
    float _2051 = _2050 * _2044;
    float _2052 = _2050 * _2045;
    float _2053 = _2050 * _2046;
    float _2054 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_1893].xyz));
    float _4204 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _2058 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2059 = dot(vec3(_665, _666, _667), vec3(_2051, _2052, _2053));
    float _4226 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_2051, _2052, _2053));
    float _4237 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2043 * _2043;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2082 = (exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2083 = 1.0 - _2043;
    float _2094 = (0.5 / (((_2058 * ((_2057 * _2083) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2083) + _2043) * _2057))) * _2057;
    float _4248 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2096 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    uint _2107 = _1893 + 9u;
    float _2118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _668) * 0.949999988079071044921875);
    float _2119 = _2118 * _2118;
    float _2120 = cbLight._m0[_1930].x + _744;
    float _2121 = cbLight._m0[_1930].y + _745;
    float _2122 = cbLight._m0[_1930].z + _746;
    float _2126 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
    float _2127 = _2126 * _2120;
    float _2128 = _2126 * _2121;
    float _2129 = _2126 * _2122;
    float _2130 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_1930].xyz));
    float _4259 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2134 = dot(vec3(_665, _666, _667), vec3(_2127, _2128, _2129));
    float _4270 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2138 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2127, _2128, _2129));
    float _4281 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2142 = _2119 * _2119;
    float _2146 = ((_2137 * _2137) * (_2142 + (-1.0))) + 1.0;
    float _2155 = (exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2156 = 1.0 - _2119;
    float _2166 = (0.5 / (((_2058 * ((_2133 * _2156) + _2119)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2156) + _2119) * _2133))) * _2133;
    float _4292 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2168 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2142 / ((_2146 * _2146) * 3.141590118408203125));
    float _2178 = (((_2155 * cbLight._m0[_2107].x) * _2168) * _1916) + (((_2082 * cbLight._m0[_2029].x) * _2096) * _1926);
    float _2179 = (((_2155 * cbLight._m0[_2107].y) * _2168) * _1916) + (((_2082 * cbLight._m0[_2029].y) * _2096) * _1926);
    float _2180 = (((_2155 * cbLight._m0[_2107].z) * _2168) * _1916) + (((_2082 * cbLight._m0[_2029].z) * _2096) * _1926);
    float _2242;
    float _2244;
    float _2246;
    if (_1966)
    {
        _2242 = _2178;
        _2244 = _2179;
        _2246 = _2180;
    }
    else
    {
        uint _2248 = _1893 + 2u;
        uint _2252 = _1893 + 10u;
        float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _668) * 0.949999988079071044921875);
        float _2267 = _2266 * _2266;
        float _2268 = cbLight._m0[_2248].x + _744;
        float _2269 = cbLight._m0[_2248].y + _745;
        float _2270 = cbLight._m0[_2248].z + _746;
        float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
        float _2275 = _2274 * _2268;
        float _2276 = _2274 * _2269;
        float _2277 = _2274 * _2270;
        float _2278 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2248].xyz));
        float _4303 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2282 = dot(vec3(_665, _666, _667), vec3(_2275, _2276, _2277));
        float _4314 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2285 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2286 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2275, _2276, _2277));
        float _4325 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2290 = _2267 * _2267;
        float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
        float _2303 = (exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2304 = 1.0 - _2267;
        float _2314 = (0.5 / (((_2058 * ((_2281 * _2304) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2304) + _2267) * _2281))) * _2281;
        float _4336 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2316 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
        float _2317 = isnan(1.0) ? _1908 : (isnan(_1908) ? 1.0 : min(_1908, 1.0));
        _2242 = (((_2303 * cbLight._m0[_2252].x) * _2316) * _2317) + _2178;
        _2244 = (((_2303 * cbLight._m0[_2252].y) * _2316) * _2317) + _2179;
        _2246 = (((_2303 * cbLight._m0[_2252].z) * _2316) * _2317) + _2180;
    }
    float _2352;
    float _2354;
    float _2356;
    if (_1984)
    {
        _2352 = _2242;
        _2354 = _2244;
        _2356 = _2246;
    }
    else
    {
        uint _2363 = _1893 + 3u;
        uint _2367 = _1893 + 11u;
        float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2363].w)) * _668) * 0.949999988079071044921875);
        float _2382 = _2381 * _2381;
        float _2383 = cbLight._m0[_2363].x + _744;
        float _2384 = cbLight._m0[_2363].y + _745;
        float _2385 = cbLight._m0[_2363].z + _746;
        float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
        float _2390 = _2389 * _2383;
        float _2391 = _2389 * _2384;
        float _2392 = _2389 * _2385;
        float _2393 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2363].xyz));
        float _4352 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2396 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2397 = dot(vec3(_665, _666, _667), vec3(_2390, _2391, _2392));
        float _4363 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2400 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2401 = dot(vec3(cbLight._m0[_2363].xyz), vec3(_2390, _2391, _2392));
        float _4374 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2405 = _2382 * _2382;
        float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
        float _2418 = (exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2419 = 1.0 - _2382;
        float _2429 = (0.5 / (((_2058 * ((_2396 * _2419) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2419) + _2382) * _2396))) * _2396;
        float _4385 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2431 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
        float _2432 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
        _2352 = (((_2418 * cbLight._m0[_2367].x) * _2431) * _2432) + _2242;
        _2354 = (((_2418 * cbLight._m0[_2367].y) * _2431) * _2432) + _2244;
        _2356 = (((_2418 * cbLight._m0[_2367].z) * _2431) * _2432) + _2246;
    }
    float _2567;
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    if (_1891.y == 0u)
    {
        float _2507 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2508 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2507;
        float _2509 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2507;
        float _2510 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2507;
        uvec4 _2522 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2523 = _2522.x;
        uint _2534 = uint((float(_2522.y) * floor(float(uint(cbSceneParam._m0[85u].y * _765) / _2523))) + floor(float(uint(cbSceneParam._m0[85u].x * _764) / _2523)));
        float _2544 = (log2(_2510 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2545 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        uint _2548 = uint(isnan(14.0) ? _2545 : (isnan(_2545) ? 14.0 : min(_2545, 14.0)));
        uvec4 _2553 = texelFetch(g_lightClusterGridBuffer, int(((_2548 << 2u) + (_2534 << 6u)) >> 2u));
        uint _2554 = _2553.x;
        uint _2555 = _2522.z;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        if (((((1u << ((_2555 >> 4u) & 15u)) + 4294967295u) & _2554) == 0u) || ((_2555 & 240u) == 0u))
        {
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
        }
        else
        {
            float _2656;
            float _2658;
            float _2660;
            float _2662;
            float _2664;
            float _2666;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            float _2813 = 0.0;
            uint _2814 = 0u;
            uint _2823;
            bool _2824;
            for (;;)
            {
                _2823 = texelFetch(g_lightClassification, int((((_2548 << 5u) + (_2534 << 9u)) + (_2814 << 2u)) >> 2u)).x;
                _2824 = _2823 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2824)
                {
                    frontier_phi_66_pred = _2808;
                    frontier_phi_66_pred_1 = _2813;
                    frontier_phi_66_pred_2 = _2812;
                    frontier_phi_66_pred_3 = _2811;
                    frontier_phi_66_pred_4 = _2810;
                    frontier_phi_66_pred_5 = _2809;
                }
                else
                {
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    uint _2959;
                    _2953 = _2808;
                    _2954 = _2809;
                    _2955 = _2810;
                    _2956 = _2811;
                    _2957 = _2812;
                    _2958 = _2813;
                    _2959 = _2823;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    for (;;)
                    {
                        uint _2963 = uint(findLSB(_2959)) + (_2814 << 5u);
                        uint _2960 = (_2959 + 4294967295u) & _2959;
                        uint _2965 = _2963 * 48u;
                        vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2965)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 3u)).x));
                        uint _2985 = (_2963 * 48u) + 4u;
                        vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2985)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 3u)).x));
                        uint _3004 = (_2963 * 48u) + 8u;
                        vec3 _3015 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3004)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3004 + 2u)).x));
                        float _3019 = _2979.x - _2508;
                        float _3020 = _2979.y - _2509;
                        float _3021 = _2979.z - _2510;
                        float _3022 = dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021));
                        float _3025 = inversesqrt(_3022);
                        float _3026 = _3025 * _3019;
                        float _3027 = _3025 * _3020;
                        float _3028 = _3025 * _3021;
                        float _3029 = dot(vec3(_783, _786, _789), vec3(_3026, _3027, _3028));
                        float _3034 = 1.0 - (_3022 * _2979.w);
                        float _4411 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3035 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3036 = sqrt(_3022) * _2998.w;
                        float _3039 = 1.39999997615814208984375 / (_3036 + 1.39999997615814208984375);
                        float _3040 = _3039 * _3039;
                        float _3043 = ((1.0 - _3040) * _3029) + _3040;
                        float _3046 = _3036 * _3036;
                        float _3050 = ((isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0))) * _3035) / ((_3046 * 0.699999988079071044921875) + 1.0);
                        float _3054 = (-0.0) - _2508;
                        float _3055 = (-0.0) - _2509;
                        float _3056 = (-0.0) - _2510;
                        float _3060 = inversesqrt(dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056)));
                        float _3061 = _3060 * _3054;
                        float _3062 = _3060 * _3055;
                        float _3063 = _3060 * _3056;
                        float _3071 = exp2(log2(1.0 / ((_3046 * 3.5) + 5.0)) * 0.25);
                        float _3072 = 1.0 - _843;
                        float _3079 = sqrt(1.0 - ((1.0 - (_3072 * _3072)) * (1.0 - (_3071 * _3071))));
                        float _3080 = _3079 * _3079;
                        float _3081 = _3080 * _3080;
                        float _3082 = _3061 + _3026;
                        float _3083 = _3062 + _3027;
                        float _3084 = _3063 + _3028;
                        float _3088 = inversesqrt(dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084)));
                        float _3092 = dot(vec3(_783, _786, _789), vec3(_3061, _3062, _3063));
                        float _4427 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3095 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                        float _3096 = dot(vec3(_783, _786, _789), vec3(_3088 * _3082, _3088 * _3083, _3088 * _3084));
                        float _4438 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3099 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                        float _3103 = ((_3099 * _3099) * (_3081 + (-1.0))) + 1.0;
                        float _3104 = _3039 * _3080;
                        float _3105 = _3104 * _3104;
                        float _3108 = ((1.0 - _3105) * _3029) + _3105;
                        float _4449 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3109 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3110 = 1.0 - _3080;
                        float _3120 = (0.5 / (((_3109 * ((_3095 * _3110) + _3080)) + 9.9999999392252902907785028219223e-09) + (((_3109 * _3110) + _3080) * _3095))) * _3109;
                        float _4460 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3130 = (((_3081 * 3.1415927410125732421875) * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) / ((_3103 * _3103) * ((_3046 * 2.1991131305694580078125) + 3.141590118408203125))) * _3035;
                        _2883 = (_3050 * _2998.x) + _2956;
                        _2884 = (_3050 * _2998.y) + _2957;
                        _2885 = (_3050 * _2998.z) + _2958;
                        _2880 = (_3130 * _3015.x) + _2953;
                        _2881 = (_3130 * _3015.y) + _2954;
                        _2882 = (_3130 * _3015.z) + _2955;
                        if (_2960 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2953 = _2880;
                            _2954 = _2881;
                            _2955 = _2882;
                            _2956 = _2883;
                            _2957 = _2884;
                            _2958 = _2885;
                            _2959 = _2960;
                        }
                    }
                    frontier_phi_66_pred = _2880;
                    frontier_phi_66_pred_1 = _2885;
                    frontier_phi_66_pred_2 = _2884;
                    frontier_phi_66_pred_3 = _2883;
                    frontier_phi_66_pred_4 = _2882;
                    frontier_phi_66_pred_5 = _2881;
                }
                _2656 = frontier_phi_66_pred;
                _2666 = frontier_phi_66_pred_1;
                _2664 = frontier_phi_66_pred_2;
                _2662 = frontier_phi_66_pred_3;
                _2660 = frontier_phi_66_pred_4;
                _2658 = frontier_phi_66_pred_5;
                uint _2815 = _2814 + 1u;
                if (_2815 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2808 = _2656;
                    _2809 = _2658;
                    _2810 = _2660;
                    _2811 = _2662;
                    _2812 = _2664;
                    _2813 = _2666;
                    _2814 = _2815;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
        }
        uvec4 _2669 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2670 = _2669.z;
        uint _2672 = (_2670 >> 8u) & 15u;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        if (((4294967295u << _2672) & _2554) == 0u)
        {
            _2776 = _2655;
            _2778 = _2657;
            _2780 = _2659;
            _2782 = _2661;
            _2784 = _2663;
            _2786 = _2665;
        }
        else
        {
            float _2801 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
            float _2802 = _2801 * _2508;
            float _2803 = _2801 * _2509;
            float _2804 = _2801 * _2510;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2672 < ((_2670 >> 12u) & 15u))
            {
                float _2777;
                float _2779;
                float _2781;
                float _2783;
                float _2785;
                float _2787;
                float _2936 = _2655;
                float _2937 = _2657;
                float _2938 = _2659;
                float _2939 = _2661;
                float _2940 = _2663;
                float _2941 = _2665;
                uint _2942 = _2672;
                uint _2951;
                bool _2952;
                for (;;)
                {
                    _2951 = texelFetch(g_lightClassification, int((((_2548 << 5u) + (_2534 << 9u)) + (_2942 << 2u)) >> 2u)).x;
                    _2952 = _2951 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2952)
                    {
                        frontier_phi_77_pred = _2941;
                        frontier_phi_77_pred_1 = _2940;
                        frontier_phi_77_pred_2 = _2939;
                        frontier_phi_77_pred_3 = _2938;
                        frontier_phi_77_pred_4 = _2937;
                        frontier_phi_77_pred_5 = _2936;
                    }
                    else
                    {
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3157 = _2936;
                        float _3158 = _2937;
                        float _3159 = _2938;
                        float _3160 = _2939;
                        float _3161 = _2940;
                        float _3162 = _2941;
                        uint _3163 = _2951;
                        uint _3164;
                        vec4 _3189;
                        float _3190;
                        vec4 _3205;
                        vec3 _3217;
                        vec4 _3232;
                        vec4 _3248;
                        float _3294;
                        bool _3295;
                        for (;;)
                        {
                            uint _3174 = ((_2942 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3163));
                            _3164 = (_3163 + 4294967295u) & _3163;
                            uint _3176 = _3174 * 40u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            _3190 = _3189.w;
                            uint _3192 = (_3174 * 40u) + 4u;
                            _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3207 = (_3174 * 40u) + 8u;
                            _3217 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x));
                            uint _3219 = (_3174 * 40u) + 16u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3235 = (_3174 * 40u) + 20u;
                            _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            uint _3250 = (_3174 * 40u) + 24u;
                            vec4 _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3269 = (_3174 * 40u) + 28u;
                            vec4 _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            _3294 = fma(_2510, _3282.z, fma(_2509, _3282.y, _3282.x * _2508)) + _3282.w;
                            _3295 = !((fma(_2510, _3263.z, fma(_2509, _3263.y, _3263.x * _2508)) + _3263.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3295)
                            {
                                float _3322 = _3189.x - _2508;
                                float _3323 = _3189.y - _2509;
                                float _3324 = _3189.z - _2510;
                                float _3325 = dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324));
                                float _3328 = inversesqrt(_3325);
                                float _3329 = _3328 * _3322;
                                float _3330 = _3328 * _3323;
                                float _3331 = _3328 * _3324;
                                float _3335 = 1.0 - (_3325 / (_3190 * _3190));
                                float _4471 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3340 = sqrt(_3325) * _3205.w;
                                float _3342 = 1.39999997615814208984375 / (_3340 + 1.39999997615814208984375);
                                float _3343 = _3342 * _3342;
                                float _3346 = ((1.0 - _3343) * dot(vec3(_3329, _3330, _3331), vec3(_783, _786, _789))) + _3343;
                                float _3349 = _3340 * _3340;
                                float _3353 = (fma(_2510, _3232.z, fma(_2509, _3232.y, _3232.x * _2508)) + _3232.w) / _3294;
                                float _3354 = (fma(_2510, _3248.z, fma(_2509, _3248.y, _3248.x * _2508)) + _3248.w) / _3294;
                                float _3358 = 1.0 - dot(vec2(_3353, _3354), vec2(_3353, _3354));
                                float _4487 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3359 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3360 = _3359 * (((isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0))) * _3336) / ((_3349 * 0.699999988079071044921875) + 1.0));
                                float _3372 = exp2(log2(1.0 / ((_3349 * 3.5) + 5.0)) * 0.25);
                                float _3373 = 1.0 - _843;
                                float _3380 = sqrt(1.0 - ((1.0 - (_3373 * _3373)) * (1.0 - (_3372 * _3372))));
                                float _3381 = _3380 * _3380;
                                float _3382 = _3381 * _3381;
                                float _3383 = _3329 - _2802;
                                float _3384 = _3330 - _2803;
                                float _3385 = _3331 - _2804;
                                float _3389 = inversesqrt(dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385)));
                                float _3393 = dot(vec3(_783, _786, _789), vec3((-0.0) - _2802, (-0.0) - _2803, (-0.0) - _2804));
                                float _4498 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3396 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3397 = dot(vec3(_783, _786, _789), vec3(_3389 * _3383, _3389 * _3384, _3389 * _3385));
                                float _4509 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3400 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3404 = ((_3400 * _3400) * (_3382 + (-1.0))) + 1.0;
                                float _3405 = _3342 * _3381;
                                float _3406 = _3405 * _3405;
                                float _3412 = ((1.0 - _3406) * dot(vec3(_783, _786, _789), vec3(_3329, _3330, _3331))) + _3406;
                                float _4520 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3413 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3414 = 1.0 - _3381;
                                float _3424 = (0.5 / (((_3413 * ((_3396 * _3414) + _3381)) + 9.9999999392252902907785028219223e-09) + (((_3413 * _3414) + _3381) * _3396))) * _3413;
                                float _4531 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3434 = (_3359 * _3336) * (((_3382 * 3.1415927410125732421875) * (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) / ((_3404 * _3404) * ((_3349 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3360 * _3205.y;
                                frontier_phi_83_pred_1 = _3360 * _3205.x;
                                frontier_phi_83_pred_2 = _3434 * _3217.z;
                                frontier_phi_83_pred_3 = _3434 * _3217.y;
                                frontier_phi_83_pred_4 = _3434 * _3217.x;
                                frontier_phi_83_pred_5 = _3360 * _3205.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3442 = frontier_phi_83_pred;
                            _3441 = frontier_phi_83_pred_1;
                            _3440 = frontier_phi_83_pred_2;
                            _3439 = frontier_phi_83_pred_3;
                            _3438 = frontier_phi_83_pred_4;
                            _3443 = frontier_phi_83_pred_5;
                            _3147 = _3441 + _3160;
                            _3148 = _3442 + _3161;
                            _3149 = _3443 + _3162;
                            _3144 = _3438 + _3157;
                            _3145 = _3439 + _3158;
                            _3146 = _3440 + _3159;
                            if (_3164 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3164;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3149;
                        frontier_phi_77_pred_1 = _3148;
                        frontier_phi_77_pred_2 = _3147;
                        frontier_phi_77_pred_3 = _3146;
                        frontier_phi_77_pred_4 = _3145;
                        frontier_phi_77_pred_5 = _3144;
                    }
                    _2787 = frontier_phi_77_pred;
                    _2785 = frontier_phi_77_pred_1;
                    _2783 = frontier_phi_77_pred_2;
                    _2781 = frontier_phi_77_pred_3;
                    _2779 = frontier_phi_77_pred_4;
                    _2777 = frontier_phi_77_pred_5;
                    uint _2943 = _2942 + 1u;
                    if (_2943 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2936 = _2777;
                        _2937 = _2779;
                        _2938 = _2781;
                        _2939 = _2783;
                        _2940 = _2785;
                        _2941 = _2787;
                        _2942 = _2943;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2781;
                frontier_phi_58_59_ladder_1 = _2787;
                frontier_phi_58_59_ladder_2 = _2785;
                frontier_phi_58_59_ladder_3 = _2783;
                frontier_phi_58_59_ladder_4 = _2779;
                frontier_phi_58_59_ladder_5 = _2777;
            }
            else
            {
                frontier_phi_58_59_ladder = _2659;
                frontier_phi_58_59_ladder_1 = _2665;
                frontier_phi_58_59_ladder_2 = _2663;
                frontier_phi_58_59_ladder_3 = _2661;
                frontier_phi_58_59_ladder_4 = _2657;
                frontier_phi_58_59_ladder_5 = _2655;
            }
            _2776 = frontier_phi_58_59_ladder_5;
            _2778 = frontier_phi_58_59_ladder_4;
            _2780 = frontier_phi_58_59_ladder;
            _2782 = frontier_phi_58_59_ladder_3;
            _2784 = frontier_phi_58_59_ladder_2;
            _2786 = frontier_phi_58_59_ladder_1;
        }
        float _2791 = isnan(1.0) ? _827 : (isnan(_827) ? 1.0 : min(_827, 1.0));
        _2567 = (_2791 * _2782) + _2022;
        _2569 = (_2791 * _2784) + _2024;
        _2571 = (_2791 * _2786) + _2026;
        _2573 = ((_2776 * 0.039999999105930328369140625) * _2791) + _2352;
        _2575 = ((_2778 * 0.039999999105930328369140625) * _2791) + _2354;
        _2577 = ((_2780 * 0.039999999105930328369140625) * _2791) + _2356;
    }
    else
    {
        _2567 = _2022;
        _2569 = _2024;
        _2571 = _2026;
        _2573 = _2352;
        _2575 = _2354;
        _2577 = _2356;
    }
    float _4547 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4558 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4569 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _2594 = ((isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2567 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _827))) + ((_2573 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1661)) * cbPerFrame._m0[3u].x);
    float _2595 = ((isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2569 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _827))) + ((_2575 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1661)) * cbPerFrame._m0[3u].x);
    float _2596 = ((isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2571 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _827))) + ((_2577 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1661)) * cbPerFrame._m0[3u].x);
    uint _2597 = _243 + 6u;
    float _2605 = _764 / cbSceneParam._m0[86u].x;
    float _2606 = _765 / cbSceneParam._m0[86u].y;
    vec4 _2620 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2605, _2606, (log2((isnan(cbSceneParam._m0[77u].w) ? _686 : (isnan(_686) ? cbSceneParam._m0[77u].w : min(_686, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2622 = _2620.x;
    float _2623 = _2620.y;
    float _2624 = _2620.z;
    float _2625 = _2620.w;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    if (_686 > cbSceneParam._m0[78u].w)
    {
        float _2680 = isnan(_686) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _686 : min(cbSceneParam._m0[80u].w, _686));
        float _2681 = _2680 / _686;
        float _2692 = _2681 * _737;
        float _2693 = _738 * _2681;
        float _2694 = (-0.0) - _2693;
        float _2696 = _2681 * _739;
        float _2698 = (cbSceneParam._m0[77u].w * _2694) / _2680;
        float _2699 = _2698 + cbSceneParam._m0[79u].w;
        float _2700 = cbSceneParam._m0[79u].w - _2693;
        float _2706 = sqrt(((_2692 * _2692) + (_2693 * _2693)) + (_2696 * _2696));
        float _2709 = (1.0 - (cbSceneParam._m0[77u].w / _2680)) * _2706;
        float _2714 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2716 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2893;
        if (abs((_2694 - _2698) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2893 = ((((_2699 > 0.0) ? exp2(_2714 * _2699) : (2.0 - exp2(_2716 * _2699))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2709;
        }
        else
        {
            float _2837 = 1.0 / cbSceneParam._m0[80u].x;
            float _2838 = isnan(_2700) ? _2699 : (isnan(_2699) ? _2700 : max(_2699, _2700));
            float _2839 = isnan(_2700) ? _2699 : (isnan(_2699) ? _2700 : min(_2699, _2700));
            float _2848 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : min(_2838, 0.0));
            float _2849 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : min(_2839, 0.0));
            _2893 = ((abs(_2706 / _2694) * cbSceneParam._m0[80u].y) * ((((_2848 - _2849) * 2.0) - ((exp2(_2714 * (isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0)))) - exp2(_2714 * (isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0))))) * _2837)) - ((exp2(_2716 * _2848) - exp2(_2716 * _2849)) * _2837))) + (_2709 * cbSceneParam._m0[80u].z);
        }
        vec4 _2895 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2605, _2606, 1.0), 0.0);
        float _2904 = exp2((_2893 * (-1.44269502162933349609375)) * (1.0 - _2895.w));
        float _2905 = log2(_2904);
        float _2921 = log2(_2625);
        _2718 = (exp2(_2921 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2905 * cbSceneParam._m0[78u].x)) * _2895.x) / cbSceneParam._m0[78u].x)) + _2622;
        _2720 = (exp2(_2921 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2905 * cbSceneParam._m0[78u].y)) * _2895.y) / cbSceneParam._m0[78u].y)) + _2623;
        _2722 = (exp2(_2921 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2905 * cbSceneParam._m0[78u].z)) * _2895.z) / cbSceneParam._m0[78u].z)) + _2624;
        _2724 = _2904 * _2625;
    }
    else
    {
        _2718 = _2622;
        _2720 = _2623;
        _2722 = _2624;
        _2724 = _2625;
    }
    bool _2931;
    vec4 _2734;
    vec4 _2756;
    float _2758;
    float _2762;
    float _2763;
    float _2764;
    float _2765;
    bool _2775;
    for (;;)
    {
        _2734 = cbMatDynParam._m0[0u];
        float _2736 = roundEven(_2734.y);
        bool _2737 = _2736 == 3.0;
        float _2738 = log2(_2724);
        float _2745 = exp2(_2738 * cbSceneParam._m0[78u].x) * _2594;
        float _2746 = exp2(_2738 * cbSceneParam._m0[78u].y) * _2595;
        float _2747 = exp2(_2738 * cbSceneParam._m0[78u].z) * _2596;
        float _2754 = _753 + (-0.5);
        _2756 = cbMtdParam._m0[1u];
        _2758 = _2756.y * _2754;
        float _2761 = (_2736 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2762 = _2761 * (_2737 ? _2745 : (_2745 + (cbSceneParam._m0[72u].w * _2718)));
        _2763 = _2761 * (_2737 ? _2746 : (_2746 + (cbSceneParam._m0[72u].w * _2720)));
        _2764 = _2761 * (_2737 ? _2747 : (_2747 + (cbSceneParam._m0[72u].w * _2722)));
        _2765 = _2754 * 0.999000012874603271484375;
        _2775 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2775)
        {
            if ((cbInstanceData._m0[_243 + 7u].x + _2765) < 0.5)
            {
                _2931 = true;
                break;
            }
        }
        uint _2872 = _802 + uint(_2734.w);
        if ((cbInstanceData._m0[_2872].w < 1.0) && ((cbInstanceData._m0[_2872].w + _2765) < 0.5))
        {
            _2931 = true;
            break;
        }
        if ((_2758 + 1.0) < _2756.x)
        {
            _2931 = true;
            break;
        }
        _2931 = false;
        break;
    }
    float _3135;
    if (_2931)
    {
        discard_state = true;
        _3135 = 0.0;
    }
    else
    {
        _3135 = cbInstanceData._m0[_2597].w;
    }
    SV_Target.x = _2762;
    SV_Target.y = _2763;
    SV_Target.z = _2764;
    SV_Target.w = _3135;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2597].w;
    discard_exit();
}


