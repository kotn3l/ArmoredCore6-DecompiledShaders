#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1305;
float _3687;
float _3688;
float _3689;
float _3690;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _366 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _366) * cbMtdParam._m0[24u].x) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3699 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _391 = (_384 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _392 = (_384 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _393 = (_384 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _412 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _432 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _449 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _451 = _449.x;
    float _452 = _449.y;
    float _453 = _449.z;
    float _462 = ((_432.z - _453) * _384) + _453;
    float _465 = ((((_432.x - _451) * _384) + _451) * 2.0) + (-1.0);
    float _467 = ((((_432.y - _452) * _384) + _452) * 2.0) + (-1.0);
    float _468 = dot(vec2(_465, _467), vec2(_465, _467));
    float _3710 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _473 = sqrt(1.0 - (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))));
    vec4 _489 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _501 = (((_489.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _465;
    float _502 = (((_489.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _467;
    float _505 = fma(_473, _237, fma(_502, _244, _501 * _230));
    float _508 = fma(_473, _238, fma(_502, _245, _501 * _231));
    float _511 = fma(_473, _239, fma(_502, _246, _501 * _232));
    float _515 = inversesqrt(dot(vec3(_505, _508, _511), vec3(_505, _508, _511)));
    vec4 _544 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _546 = _544.x;
    float _547 = 1.0 - _546;
    float _553 = (cbMtdParam._m0[19u].x + dot(vec4(_515 * _505, _515 * _508, _515 * _511, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_546 - _547) * cbMtdParam._m0[24u].z) + _547) * cbMtdParam._m0[21u].z);
    float _3721 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _556 = (-0.0) - cbMtdParam._m0[24u].y;
    float _558 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _559 = isnan(1.0) ? _558 : (isnan(_558) ? 1.0 : min(_558, 1.0));
    float _566 = _554 - ((_554 * TEXCOORD_8.x) * _559);
    float _567 = _554 - ((_554 * TEXCOORD_8.y) * _559);
    float _568 = _554 - ((_554 * TEXCOORD_8.z) * _559);
    float _575 = (_566 * ((_412.x * cbMtdParam._m0[18u].x) - _391)) + _391;
    float _576 = (_567 * ((_412.y * cbMtdParam._m0[18u].y) - _392)) + _392;
    float _577 = (_568 * ((_412.z * cbMtdParam._m0[18u].z) - _393)) + _393;
    vec4 _589 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _591 = _589.x;
    float _592 = 1.0 - _591;
    float _620 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_591 - _592) * cbMtdParam._m0[24u].w) + _592) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3742 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _621 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _629 = ((((cbMtdParam._m0[10u].x - _575) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _621) + _575;
    float _630 = ((((cbMtdParam._m0[10u].y - _576) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _621) + _576;
    float _631 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _577)) * _621) + _577;
    float _635 = (cbMtdParam._m0[19u].w * (_489.z - _462)) + _462;
    vec4 _649 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _656 = (_649.x * 2.0) + (-1.0);
    float _657 = (_649.y * 2.0) + (-1.0);
    float _658 = dot(vec2(_656, _657), vec2(_656, _657));
    float _3753 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _666 = ((_649.z - _635) * _566) + _635;
    float _669 = ((cbMtdParam._m0[23u].y - _666) * _621) + _666;
    vec4 _688 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _694 = (_688.x * 2.0) + (-1.0);
    float _695 = (_688.y * 2.0) + (-1.0);
    float _696 = dot(vec2(_694, _695), vec2(_694, _695));
    float _3764 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _711 = ((sqrt(1.0 - (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) - _473) * _568) + _473;
    float _714 = (((_656 - _501) * _566) + _501) + (cbMtdParam._m0[21u].x * _501);
    float _715 = (((_657 - _502) * _567) + _502) + (cbMtdParam._m0[21u].x * _502);
    float _726 = (((_694 - _714) + (_714 * cbMtdParam._m0[22u].z)) * _621) + _714;
    float _727 = (((_695 - _715) + (_715 * cbMtdParam._m0[22u].z)) * _621) + _715;
    float _728 = (_621 * (sqrt(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) - _711)) + _711;
    float _730 = cbMtdParam._m0[22u].x + _489.w;
    float _733 = fma(_728, _237, fma(_727, _244, _726 * _230));
    float _736 = fma(_728, _238, fma(_727, _245, _726 * _231));
    float _739 = fma(_728, _239, fma(_727, _246, _726 * _232));
    float _743 = inversesqrt(dot(vec3(_733, _736, _739), vec3(_733, _736, _739)));
    float _744 = _743 * _733;
    float _745 = _743 * _736;
    float _746 = _743 * _739;
    float _3775 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _747 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _3797 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3808 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3819 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _765 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _816 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _806);
    float _817 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _806);
    float _818 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _806);
    float _822 = inversesqrt(dot(vec3(_816, _817, _818), vec3(_816, _817, _818)));
    float _823 = _816 * _822;
    float _824 = _817 * _822;
    float _825 = _818 * _822;
    vec4 _830 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _832 = _830.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _986 = sqrt(((_816 * _816) + (_817 * _817)) + (_818 * _818));
        float _992 = (cbMatDynParam._m0[5u].x * _986) + cbMatDynParam._m0[5u].y;
        float _3830 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _997 = (cbMatDynParam._m0[5u].z * _986) + cbMatDynParam._m0[5u].w;
        float _3841 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) - _993)) + _993) < ((_832 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _843 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _844 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _862 = fma(_746, cbSceneParam._m0[5u].z, fma(_745, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _744));
    float _865 = fma(_746, cbSceneParam._m0[6u].z, fma(_745, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _744));
    float _868 = fma(_746, cbSceneParam._m0[7u].z, fma(_745, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _744));
    uint _881 = _249 + 9u;
    uint _882 = _881 + uint(cbMatDynParam._m0[0u].w);
    float _888 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) * cbInstanceData._m0[_882].x;
    float _889 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) * cbInstanceData._m0[_882].y;
    float _890 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) * cbInstanceData._m0[_882].z;
    float _3852 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _891 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    vec4 _902 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _843, cbSceneParam._m0[86u].y * _844));
    float _906 = ((isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * TEXCOORD_5.w) * _902.x;
    float _907 = dot(vec3(_744, _745, _746), vec3(_823, _824, _825));
    float _910 = _907 * 2.0;
    float _914 = (_910 * _744) - _823;
    float _915 = (_910 * _745) - _824;
    float _916 = (_910 * _746) - _825;
    float _920 = abs(dot(vec3(_823, _824, _825), vec3(_744, _745, _746)));
    float _3885 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _922 = sqrt(_747);
    float _935 = exp2((_922 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_922 * 3.0));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1304;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1029 = fma(_975, cbModelParam._m0[26u].z, fma(_971, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _967));
        float _1033 = fma(_975, cbModelParam._m0[27u].z, fma(_971, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _967));
        float _1037 = fma(_975, cbModelParam._m0[28u].z, fma(_971, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _967));
        float _1062 = _967 + _744;
        float _1063 = _971 + _745;
        float _1064 = _975 + _746;
        float _1074 = fma(_1064, cbModelParam._m0[26u].z, fma(_1063, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1062)) - _1029;
        float _1075 = fma(_1064, cbModelParam._m0[27u].z, fma(_1063, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1062)) - _1033;
        float _1076 = fma(_1064, cbModelParam._m0[28u].z, fma(_1063, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1062)) - _1037;
        float _1080 = inversesqrt(dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076)));
        float _1093 = ((_1080 * _1074) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1029 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1080 * _1075) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1033 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1080 * _1076) / cbModelParam._m0[34u].z) + ((((((_1037 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1093, _1094, _1095), 0.0);
        float _1132 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1098.x + (-0.5));
        float _1134 = _1132 * (_1098.y + (-0.5));
        float _1135 = _1132 * (_1098.z + (-0.5));
        float _1142 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1105.x + (-0.5));
        float _1144 = _1142 * (_1105.y + (-0.5));
        float _1145 = _1142 * (_1105.z + (-0.5));
        float _1152 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1112.x + (-0.5));
        float _1154 = _1152 * (_1112.y + (-0.5));
        float _1155 = _1152 * (_1112.z + (-0.5));
        float _1162 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1119.x + (-0.5));
        float _1164 = _1162 * (_1119.y + (-0.5));
        float _1165 = _1162 * (_1119.z + (-0.5));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = _1133 * 0.5;
        float _1170 = _1143 * 0.5;
        float _1171 = _1153 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1186 = (dot(vec3(_744, _745, _746), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1196 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3933 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1198 + 1.0))) + _1203) * _1166;
        float _1213 = _1134 * 0.5;
        float _1214 = _1144 * 0.5;
        float _1215 = _1154 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_744, _745, _746), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3966 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1240 + 1.0))) + _1245) * _1167;
        float _1255 = _1135 * 0.5;
        float _1256 = _1145 * 0.5;
        float _1257 = _1155 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_744, _745, _746), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3999 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1282 + 1.0))) + _1287) * _1168;
        _1304 = _1135;
        _1306 = _1134;
        _1307 = _1133;
        _1308 = _1145;
        _1309 = _1144;
        _1310 = _1143;
        _1311 = _1155;
        _1312 = _1154;
        _1313 = _1153;
        _1314 = _1168;
        _1315 = _1167;
        _1316 = _1166;
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
    }
    else
    {
        _1304 = _1305;
        _1306 = _1305;
        _1307 = _1305;
        _1308 = _1305;
        _1309 = _1305;
        _1310 = _1305;
        _1311 = _1305;
        _1312 = _1305;
        _1313 = _1305;
        _1314 = _1305;
        _1315 = _1305;
        _1316 = _1305;
        _1317 = 0.0;
        _1318 = 0.0;
        _1319 = 0.0;
    }
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1347 = fma(_975, cbModelParam._m0[30u].z, fma(_971, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967));
        float _1351 = fma(_975, cbModelParam._m0[31u].z, fma(_971, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967));
        float _1355 = fma(_975, cbModelParam._m0[32u].z, fma(_971, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967));
        float _1378 = _967 + _744;
        float _1379 = _971 + _745;
        float _1380 = _975 + _746;
        float _1390 = fma(_1380, cbModelParam._m0[30u].z, fma(_1379, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1378)) - _1347;
        float _1391 = fma(_1380, cbModelParam._m0[31u].z, fma(_1379, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1378)) - _1351;
        float _1392 = fma(_1380, cbModelParam._m0[32u].z, fma(_1379, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1378)) - _1355;
        float _1396 = inversesqrt(dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392)));
        float _1409 = ((_1396 * _1390) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1347 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1410 = ((_1396 * _1391) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1351 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1396 * _1392) / cbModelParam._m0[35u].z) + ((((((_1355 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        float _1446 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1413.x + (-0.5));
        float _1448 = _1446 * (_1413.y + (-0.5));
        float _1449 = _1446 * (_1413.z + (-0.5));
        float _1456 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1420.x + (-0.5));
        float _1458 = _1456 * (_1420.y + (-0.5));
        float _1459 = _1456 * (_1420.z + (-0.5));
        float _1466 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1427.x + (-0.5));
        float _1468 = _1466 * (_1427.y + (-0.5));
        float _1469 = _1466 * (_1427.z + (-0.5));
        float _1476 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1434.x + (-0.5));
        float _1478 = _1476 * (_1434.y + (-0.5));
        float _1479 = _1476 * (_1434.z + (-0.5));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = _1447 * 0.5;
        float _1484 = _1457 * 0.5;
        float _1485 = _1467 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_744, _745, _746), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4062 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1510 + 1.0))) + _1515) * _1480;
        float _1525 = _1448 * 0.5;
        float _1526 = _1458 * 0.5;
        float _1527 = _1468 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_744, _745, _746), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4095 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1552 + 1.0))) + _1557) * _1481;
        float _1567 = _1449 * 0.5;
        float _1568 = _1459 * 0.5;
        float _1569 = _1469 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_744, _745, _746), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4128 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1594 + 1.0))) + _1599) * _1482;
        _1616 = _1449;
        _1617 = _1448;
        _1618 = _1447;
        _1619 = _1459;
        _1620 = _1458;
        _1621 = _1457;
        _1622 = _1469;
        _1623 = _1468;
        _1624 = _1467;
        _1625 = _1482;
        _1626 = _1481;
        _1627 = _1480;
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
    }
    else
    {
        _1616 = _1305;
        _1617 = _1305;
        _1618 = _1305;
        _1619 = _1305;
        _1620 = _1305;
        _1621 = _1305;
        _1622 = _1305;
        _1623 = _1305;
        _1624 = _1305;
        _1625 = _1305;
        _1626 = _1305;
        _1627 = _1305;
        _1628 = 0.0;
        _1629 = 0.0;
        _1630 = 0.0;
    }
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1317)) + _1317;
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1318)) + _1318;
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1319)) + _1319;
    float _1663 = fma(_1642, cbSceneParam._m0[89u].z, fma(_1641, cbSceneParam._m0[89u].y, _1640 * cbSceneParam._m0[89u].x));
    float _1666 = fma(_1642, cbSceneParam._m0[90u].z, fma(_1641, cbSceneParam._m0[90u].y, _1640 * cbSceneParam._m0[90u].x));
    float _1669 = fma(_1642, cbSceneParam._m0[91u].z, fma(_1641, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1640));
    float _1684 = _914 * 0.5;
    float _1685 = _915 * 0.5;
    float _1686 = _916 * 0.5;
    float _1687 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1690 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1693 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1727;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1700 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1304, _1308, _1311, _1314));
        float _1704 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1306, _1309, _1312, _1315));
        float _1708 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1307, _1310, _1313, _1316));
        float _1715 = dot(vec4(cbModelParam._m0[39u]), vec4(_1684, _1685, _1686, 1.0));
        _1727 = dot(vec3(isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1727 = 1.0;
    }
    float _1738;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1729 = dot(vec4(cbModelParam._m0[40u]), vec4(_1684, _1685, _1686, 1.0));
        _1738 = dot(vec3(isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1729) ? 0.0 : (isnan(0.0) ? _1729 : max(0.0, _1729))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1738 = 1.0;
    }
    float _1742 = (_1738 * cbModelParam._m0[1u].x) + (_1727 * (1.0 - cbModelParam._m0[1u].x));
    float _1752 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _747);
    float _1753 = isnan(_1752) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1752 : min(cbModelParam._m0[25u].z, _1752));
    float _1833;
    float _1835;
    float _1837;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1800 = fma(_975, cbModelParam._m0[13u].z, fma(_971, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _967)) + cbModelParam._m0[13u].w;
        float _1804 = fma(_975, cbModelParam._m0[14u].z, fma(_971, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _967)) + cbModelParam._m0[14u].w;
        float _1808 = fma(_975, cbModelParam._m0[15u].z, fma(_971, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _967)) + cbModelParam._m0[15u].w;
        float _1811 = fma(_916, cbModelParam._m0[13u].z, fma(_915, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _914));
        float _1814 = fma(_916, cbModelParam._m0[14u].z, fma(_915, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _914));
        float _1817 = fma(_916, cbModelParam._m0[15u].z, fma(_915, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _914));
        float _1845;
        if (_1811 > 0.0)
        {
            _1845 = abs((1.0 - _1800) / _1811);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1800 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1845 = frontier_phi_17_15_ladder;
        }
        float _2066;
        if (_1814 > 0.0)
        {
            _2066 = abs((1.0 - _1804) / _1814);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1804 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2066 = frontier_phi_26_22_ladder;
        }
        float _2312;
        if (_1817 > 0.0)
        {
            _2312 = abs((1.0 - _1808) / _1817);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1808 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2312 = frontier_phi_38_33_ladder;
        }
        float _2314 = isnan(_2066) ? _1845 : (isnan(_1845) ? _2066 : min(_1845, _2066));
        float _2315 = isnan(_2312) ? _2314 : (isnan(_2314) ? _2312 : min(_2314, _2312));
        float _2319 = (_2315 * _1811) + _1800;
        float _2320 = (_2315 * _1814) + _1804;
        float _2321 = (_2315 * _1817) + _1808;
        float _2322 = _2315 * 9.9999997473787516355514526367188e-05;
        float _2324 = (-1.0) - _2322;
        float _2326 = _2322 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2321 > _2326) || ((_2321 < _2324) || ((_2320 > _2326) || ((_2320 < _2324) || ((_2319 < _2324) || (_2319 > _2326))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2445 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2321, cbModelParam._m0[9u].z, fma(_2320, cbModelParam._m0[9u].y, _2319 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2321, cbModelParam._m0[10u].z, fma(_2320, cbModelParam._m0[10u].y, _2319 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2321, cbModelParam._m0[11u].z, fma(_2320, cbModelParam._m0[11u].y, _2319 * cbModelParam._m0[11u].x))), _1753);
            frontier_phi_16_38_ladder = _2445.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2445.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2445.x * cbModelParam._m0[1u].y;
        }
        _1833 = frontier_phi_16_38_ladder_2;
        _1835 = frontier_phi_16_38_ladder_1;
        _1837 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1821 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_914, _915, _916), _1753);
        _1833 = _1821.x * cbModelParam._m0[1u].y;
        _1835 = _1821.y * cbModelParam._m0[1u].y;
        _1837 = _1821.z * cbModelParam._m0[1u].y;
    }
    float _1841 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _747);
    float _1842 = isnan(_1841) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1841 : min(cbModelParam._m0[25u].w, _1841));
    float _1931;
    float _1933;
    float _1935;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1895 = fma(_975, cbModelParam._m0[21u].z, fma(_971, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _967)) + cbModelParam._m0[21u].w;
        float _1899 = fma(_975, cbModelParam._m0[22u].z, fma(_971, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _967)) + cbModelParam._m0[22u].w;
        float _1903 = fma(_975, cbModelParam._m0[23u].z, fma(_971, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _967)) + cbModelParam._m0[23u].w;
        float _1906 = fma(_916, cbModelParam._m0[21u].z, fma(_915, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _914));
        float _1909 = fma(_916, cbModelParam._m0[22u].z, fma(_915, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _914));
        float _1912 = fma(_916, cbModelParam._m0[23u].z, fma(_915, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _914));
        float _2071;
        if (_1906 > 0.0)
        {
            _2071 = abs((1.0 - _1895) / _1906);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1895 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2071 = frontier_phi_28_24_ladder;
        }
        float _2339;
        if (_1909 > 0.0)
        {
            _2339 = abs((1.0 - _1899) / _1909);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1899 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2339 = frontier_phi_40_35_ladder;
        }
        float _2544;
        if (_1912 > 0.0)
        {
            _2544 = abs((1.0 - _1903) / _1912);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1903 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2544 = frontier_phi_49_46_ladder;
        }
        float _2546 = isnan(_2339) ? _2071 : (isnan(_2071) ? _2339 : min(_2071, _2339));
        float _2547 = isnan(_2544) ? _2546 : (isnan(_2546) ? _2544 : min(_2546, _2544));
        float _2551 = (_2547 * _1906) + _1895;
        float _2552 = (_2547 * _1909) + _1899;
        float _2553 = (_2547 * _1912) + _1903;
        float _2554 = _2547 * 9.9999997473787516355514526367188e-05;
        float _2555 = (-1.0) - _2554;
        float _2557 = _2554 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2553 > _2557) || ((_2553 < _2555) || ((_2552 > _2557) || ((_2552 < _2555) || ((_2551 < _2555) || (_2551 > _2557))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2752 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2553, cbModelParam._m0[17u].z, fma(_2552, cbModelParam._m0[17u].y, _2551 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2553, cbModelParam._m0[18u].z, fma(_2552, cbModelParam._m0[18u].y, _2551 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2553, cbModelParam._m0[19u].z, fma(_2552, cbModelParam._m0[19u].y, _2551 * cbModelParam._m0[19u].x))), _1842);
            frontier_phi_25_49_ladder = _2752.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2752.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2752.x * cbModelParam._m0[1u].z;
        }
        _1931 = frontier_phi_25_49_ladder_2;
        _1933 = frontier_phi_25_49_ladder_1;
        _1935 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1915 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_914, _915, _916), _1842);
        _1931 = _1915.x * cbModelParam._m0[1u].z;
        _1933 = _1915.y * cbModelParam._m0[1u].z;
        _1935 = _1915.z * cbModelParam._m0[1u].z;
    }
    float _1947 = ((((1.0 - _935) * ((_922 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_935 * _922)) * _906;
    float _1948 = _1947 * ((cbModelParam._m0[1u].w * (_1931 - _1833)) + _1833);
    float _1949 = _1947 * ((cbModelParam._m0[1u].w * (_1933 - _1835)) + _1835);
    float _1950 = _1947 * ((cbModelParam._m0[1u].w * (_1935 - _1837)) + _1837);
    float _1953 = fma(_1950, cbSceneParam._m0[89u].z, fma(_1949, cbSceneParam._m0[89u].y, _1948 * cbSceneParam._m0[89u].x));
    float _1956 = fma(_1950, cbSceneParam._m0[90u].z, fma(_1949, cbSceneParam._m0[90u].y, _1948 * cbSceneParam._m0[90u].x));
    float _1959 = fma(_1950, cbSceneParam._m0[91u].z, fma(_1949, cbSceneParam._m0[91u].y, _1948 * cbSceneParam._m0[91u].x));
    vec4 _1967 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_843, _844));
    float _1969 = _1967.w;
    float _1981 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1969);
    float _1982 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1969);
    float _1983 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1969);
    uvec4 _1987 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1989 = _1987.x * 14u;
    uint _1990 = _1989 + 13u;
    float _1997 = _906 + (-1.0);
    float _2002 = (cbLight._m0[_1990].x * _1997) + 1.0;
    float _2003 = (cbLight._m0[_1990].y * _1997) + 1.0;
    float _2004 = (cbLight._m0[_1990].z * _1997) + 1.0;
    float _2005 = (cbLight._m0[_1990].w * _1997) + 1.0;
    uint _2006 = _1989 + 5u;
    float _2012 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
    uint _2016 = _1989 + 4u;
    float _2025 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
    uint _2029 = _1989 | 1u;
    float _2040 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_744, _745, _746));
    float _2043 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_744, _745, _746));
    float _4264 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _4275 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2048 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * 0.3183098733425140380859375;
    float _2050 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * 0.3183098733425140380859375;
    float _2057 = ((cbLight._m0[_2006].x * _2012) * _2050) + (((cbLight._m0[_2016].x * _1981) * _2025) * _2048);
    float _2058 = ((_2012 * cbLight._m0[_2006].y) * _2050) + (((cbLight._m0[_2016].y * _1982) * _2025) * _2048);
    float _2059 = ((_2012 * cbLight._m0[_2006].z) * _2050) + (((cbLight._m0[_2016].z * _1983) * _2025) * _2048);
    uvec4 _2063 = floatBitsToUint(cbLight._m0[_1989 + 12u]);
    bool _2065 = _2063.x == 0u;
    float _2076;
    float _2078;
    float _2080;
    if (_2065)
    {
        _2076 = _2057;
        _2078 = _2058;
        _2080 = _2059;
    }
    else
    {
        uint _2084 = _1989 + 6u;
        float _2100 = (dot(vec3(cbLight._m0[_1989 + 2u].xyz), vec3(_744, _745, _746)) * 0.5) + 0.5;
        float _2101 = _2100 * _2100;
        float _4286 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2102 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2103 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2076 = (((cbLight._m0[_2084].x * 0.3183098733425140380859375) * _2102) * _2103) + _2057;
        _2078 = (((cbLight._m0[_2084].y * 0.3183098733425140380859375) * _2102) * _2103) + _2058;
        _2080 = (((cbLight._m0[_2084].z * 0.3183098733425140380859375) * _2102) * _2103) + _2059;
    }
    bool _2083 = _2063.y == 0u;
    float _2121;
    float _2123;
    float _2125;
    if (_2083)
    {
        _2121 = _2076;
        _2123 = _2078;
        _2125 = _2080;
    }
    else
    {
        uint _2283 = _1989 + 7u;
        float _2299 = (dot(vec3(cbLight._m0[_1989 + 3u].xyz), vec3(_744, _745, _746)) * 0.5) + 0.5;
        float _2300 = _2299 * _2299;
        float _4302 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2301 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2302 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2121 = (((cbLight._m0[_2283].x * 0.3183098733425140380859375) * _2301) * _2302) + _2076;
        _2123 = (((cbLight._m0[_2283].y * 0.3183098733425140380859375) * _2301) * _2302) + _2078;
        _2125 = (((cbLight._m0[_2283].z * 0.3183098733425140380859375) * _2301) * _2302) + _2080;
    }
    uint _2128 = _1989 + 8u;
    float _2141 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _747) * 0.949999988079071044921875);
    float _2142 = _2141 * _2141;
    float _2143 = cbLight._m0[_1989].x + _823;
    float _2144 = cbLight._m0[_1989].y + _824;
    float _2145 = cbLight._m0[_1989].z + _825;
    float _2149 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
    float _2150 = _2149 * _2143;
    float _2151 = _2149 * _2144;
    float _2152 = _2149 * _2145;
    float _2153 = dot(vec3(_744, _745, _746), vec3(cbLight._m0[_1989].xyz));
    float _4318 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _4329 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _2157 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2158 = dot(vec3(_744, _745, _746), vec3(_2150, _2151, _2152));
    float _4340 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2162 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2150, _2151, _2152));
    float _4351 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2166 = _2142 * _2142;
    float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
    float _2181 = (exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2182 = 1.0 - _2142;
    float _2193 = (0.5 / (((_2157 * ((_2156 * _2182) + _2142)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2182) + _2142) * _2156))) * _2156;
    float _4362 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2195 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
    uint _2209 = _1989 + 9u;
    float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2029].w)) * _747) * 0.949999988079071044921875);
    float _2221 = _2220 * _2220;
    float _2222 = cbLight._m0[_2029].x + _823;
    float _2223 = cbLight._m0[_2029].y + _824;
    float _2224 = cbLight._m0[_2029].z + _825;
    float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
    float _2229 = _2228 * _2222;
    float _2230 = _2228 * _2223;
    float _2231 = _2228 * _2224;
    float _2232 = dot(vec3(_744, _745, _746), vec3(cbLight._m0[_2029].xyz));
    float _4373 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _2236 = dot(vec3(_744, _745, _746), vec3(_2229, _2230, _2231));
    float _4384 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2240 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_2229, _2230, _2231));
    float _4395 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2244 = _2221 * _2221;
    float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
    float _2257 = (exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2258 = 1.0 - _2221;
    float _2268 = (0.5 / (((_2157 * ((_2235 * _2258) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2258) + _2221) * _2235))) * _2235;
    float _4406 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2270 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
    float _2280 = (((_2257 * cbLight._m0[_2209].x) * _2270) * _2012) + ((((cbLight._m0[_2128].x * _1981) * _2181) * _2195) * _2025);
    float _2281 = (((_2257 * cbLight._m0[_2209].y) * _2270) * _2012) + ((((cbLight._m0[_2128].y * _1982) * _2181) * _2195) * _2025);
    float _2282 = (((_2257 * cbLight._m0[_2209].z) * _2270) * _2012) + ((((cbLight._m0[_2128].z * _1983) * _2181) * _2195) * _2025);
    float _2344;
    float _2346;
    float _2348;
    if (_2065)
    {
        _2344 = _2280;
        _2346 = _2281;
        _2348 = _2282;
    }
    else
    {
        uint _2350 = _1989 + 2u;
        uint _2354 = _1989 + 10u;
        float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2350].w)) * _747) * 0.949999988079071044921875);
        float _2369 = _2368 * _2368;
        float _2370 = cbLight._m0[_2350].x + _823;
        float _2371 = cbLight._m0[_2350].y + _824;
        float _2372 = cbLight._m0[_2350].z + _825;
        float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
        float _2377 = _2376 * _2370;
        float _2378 = _2376 * _2371;
        float _2379 = _2376 * _2372;
        float _2380 = dot(vec3(_744, _745, _746), vec3(cbLight._m0[_2350].xyz));
        float _4417 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2384 = dot(vec3(_744, _745, _746), vec3(_2377, _2378, _2379));
        float _4428 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2388 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_2377, _2378, _2379));
        float _4439 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2392 = _2369 * _2369;
        float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
        float _2405 = (exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2406 = 1.0 - _2369;
        float _2416 = (0.5 / (((_2157 * ((_2383 * _2406) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2406) + _2369) * _2383))) * _2383;
        float _4450 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2418 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
        float _2419 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2344 = (((_2405 * cbLight._m0[_2354].x) * _2418) * _2419) + _2280;
        _2346 = (((_2405 * cbLight._m0[_2354].y) * _2418) * _2419) + _2281;
        _2348 = (((_2405 * cbLight._m0[_2354].z) * _2418) * _2419) + _2282;
    }
    float _2454;
    float _2456;
    float _2458;
    if (_2083)
    {
        _2454 = _2344;
        _2456 = _2346;
        _2458 = _2348;
    }
    else
    {
        uint _2465 = _1989 + 3u;
        uint _2469 = _1989 + 11u;
        float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2465].w)) * _747) * 0.949999988079071044921875);
        float _2484 = _2483 * _2483;
        float _2485 = cbLight._m0[_2465].x + _823;
        float _2486 = cbLight._m0[_2465].y + _824;
        float _2487 = cbLight._m0[_2465].z + _825;
        float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
        float _2492 = _2491 * _2485;
        float _2493 = _2491 * _2486;
        float _2494 = _2491 * _2487;
        float _2495 = dot(vec3(_744, _745, _746), vec3(cbLight._m0[_2465].xyz));
        float _4466 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _2499 = dot(vec3(_744, _745, _746), vec3(_2492, _2493, _2494));
        float _4477 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2503 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_2492, _2493, _2494));
        float _4488 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2507 = _2484 * _2484;
        float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
        float _2520 = (exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2521 = 1.0 - _2484;
        float _2531 = (0.5 / (((_2157 * ((_2498 * _2521) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2157 * _2521) + _2484) * _2498))) * _2498;
        float _4499 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2533 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
        float _2534 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2454 = (((_2520 * cbLight._m0[_2469].x) * _2533) * _2534) + _2344;
        _2456 = (((_2520 * cbLight._m0[_2469].y) * _2533) * _2534) + _2346;
        _2458 = (((_2520 * cbLight._m0[_2469].z) * _2533) * _2534) + _2348;
    }
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    if (_1987.y == 0u)
    {
        float _2609 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2610 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2609;
        float _2611 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2609;
        float _2612 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2609;
        uvec4 _2624 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2625 = _2624.x;
        uint _2636 = uint((float(_2624.y) * floor(float(uint(cbSceneParam._m0[85u].y * _844) / _2625))) + floor(float(uint(cbSceneParam._m0[85u].x * _843) / _2625)));
        float _2646 = (log2(_2612 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2647 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        uint _2650 = uint(isnan(14.0) ? _2647 : (isnan(_2647) ? 14.0 : min(_2647, 14.0)));
        uvec4 _2655 = texelFetch(g_lightClusterGridBuffer, int(((_2650 << 2u) + (_2636 << 6u)) >> 2u));
        uint _2656 = _2655.x;
        uint _2657 = _2624.z;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        if (((((1u << ((_2657 >> 4u) & 15u)) + 4294967295u) & _2656) == 0u) || ((_2657 & 240u) == 0u))
        {
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
        }
        else
        {
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2909 = 0.0;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            uint _2915 = 0u;
            uint _2924;
            bool _2925;
            for (;;)
            {
                _2924 = texelFetch(g_lightClassification, int((((_2650 << 5u) + (_2636 << 9u)) + (_2915 << 2u)) >> 2u)).x;
                _2925 = _2924 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2925)
                {
                    frontier_phi_66_pred = _2909;
                    frontier_phi_66_pred_1 = _2914;
                    frontier_phi_66_pred_2 = _2913;
                    frontier_phi_66_pred_3 = _2912;
                    frontier_phi_66_pred_4 = _2911;
                    frontier_phi_66_pred_5 = _2910;
                }
                else
                {
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    uint _3060;
                    _3054 = _2909;
                    _3055 = _2910;
                    _3056 = _2911;
                    _3057 = _2912;
                    _3058 = _2913;
                    _3059 = _2914;
                    _3060 = _2924;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    for (;;)
                    {
                        uint _3064 = uint(findLSB(_3060)) + (_2915 << 5u);
                        uint _3061 = (_3060 + 4294967295u) & _3060;
                        uint _3066 = _3064 * 48u;
                        vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3066)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 3u)).x));
                        uint _3086 = (_3064 * 48u) + 4u;
                        vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 3u)).x));
                        uint _3105 = (_3064 * 48u) + 8u;
                        vec3 _3116 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x));
                        float _3120 = _3080.x - _2610;
                        float _3121 = _3080.y - _2611;
                        float _3122 = _3080.z - _2612;
                        float _3123 = dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122));
                        float _3126 = inversesqrt(_3123);
                        float _3127 = _3126 * _3120;
                        float _3128 = _3126 * _3121;
                        float _3129 = _3126 * _3122;
                        float _3130 = dot(vec3(_862, _865, _868), vec3(_3127, _3128, _3129));
                        float _3135 = 1.0 - (_3123 * _3080.w);
                        float _4525 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3136 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3137 = sqrt(_3123) * _3099.w;
                        float _3140 = 1.39999997615814208984375 / (_3137 + 1.39999997615814208984375);
                        float _3141 = _3140 * _3140;
                        float _3144 = ((1.0 - _3141) * _3130) + _3141;
                        float _3147 = _3137 * _3137;
                        float _3151 = ((isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0))) * _3136) / ((_3147 * 0.699999988079071044921875) + 1.0);
                        float _3155 = (-0.0) - _2610;
                        float _3156 = (-0.0) - _2611;
                        float _3157 = (-0.0) - _2612;
                        float _3161 = inversesqrt(dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157)));
                        float _3162 = _3161 * _3155;
                        float _3163 = _3161 * _3156;
                        float _3164 = _3161 * _3157;
                        float _3172 = exp2(log2(1.0 / ((_3147 * 3.5) + 5.0)) * 0.25);
                        float _3173 = 1.0 - _922;
                        float _3180 = sqrt(1.0 - ((1.0 - (_3173 * _3173)) * (1.0 - (_3172 * _3172))));
                        float _3181 = _3180 * _3180;
                        float _3182 = _3181 * _3181;
                        float _3183 = _3162 + _3127;
                        float _3184 = _3163 + _3128;
                        float _3185 = _3164 + _3129;
                        float _3189 = inversesqrt(dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185)));
                        float _3193 = dot(vec3(_862, _865, _868), vec3(_3162, _3163, _3164));
                        float _4541 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3196 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                        float _3197 = dot(vec3(_862, _865, _868), vec3(_3189 * _3183, _3189 * _3184, _3189 * _3185));
                        float _4552 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3200 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                        float _3204 = ((_3200 * _3200) * (_3182 + (-1.0))) + 1.0;
                        float _3205 = _3140 * _3181;
                        float _3206 = _3205 * _3205;
                        float _3209 = ((1.0 - _3206) * _3130) + _3206;
                        float _4563 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3210 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                        float _3211 = 1.0 - _3181;
                        float _3221 = (0.5 / (((_3210 * ((_3196 * _3211) + _3181)) + 9.9999999392252902907785028219223e-09) + (((_3210 * _3211) + _3181) * _3196))) * _3210;
                        float _4574 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3232 = (((_3182 * 3.1415927410125732421875) * (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) / ((_3204 * _3204) * ((_3147 * 2.1991131305694580078125) + 3.141590118408203125))) * _3136;
                        _2984 = (_3151 * _3099.x) + _3057;
                        _2985 = (_3151 * _3099.y) + _3058;
                        _2986 = (_3151 * _3099.z) + _3059;
                        _2981 = (_3232 * _3116.x) + _3054;
                        _2982 = (_3232 * _3116.y) + _3055;
                        _2983 = (_3232 * _3116.z) + _3056;
                        if (_3061 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3054 = _2981;
                            _3055 = _2982;
                            _3056 = _2983;
                            _3057 = _2984;
                            _3058 = _2985;
                            _3059 = _2986;
                            _3060 = _3061;
                        }
                    }
                    frontier_phi_66_pred = _2981;
                    frontier_phi_66_pred_1 = _2986;
                    frontier_phi_66_pred_2 = _2985;
                    frontier_phi_66_pred_3 = _2984;
                    frontier_phi_66_pred_4 = _2983;
                    frontier_phi_66_pred_5 = _2982;
                }
                _2758 = frontier_phi_66_pred;
                _2768 = frontier_phi_66_pred_1;
                _2766 = frontier_phi_66_pred_2;
                _2764 = frontier_phi_66_pred_3;
                _2762 = frontier_phi_66_pred_4;
                _2760 = frontier_phi_66_pred_5;
                uint _2916 = _2915 + 1u;
                if (_2916 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2909 = _2758;
                    _2910 = _2760;
                    _2911 = _2762;
                    _2912 = _2764;
                    _2913 = _2766;
                    _2914 = _2768;
                    _2915 = _2916;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
        }
        uvec4 _2771 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2772 = _2771.z;
        uint _2774 = (_2772 >> 8u) & 15u;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        if (((4294967295u << _2774) & _2656) == 0u)
        {
            _2877 = _2757;
            _2879 = _2759;
            _2881 = _2761;
            _2883 = _2763;
            _2885 = _2765;
            _2887 = _2767;
        }
        else
        {
            float _2902 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
            float _2903 = _2902 * _2610;
            float _2904 = _2902 * _2611;
            float _2905 = _2902 * _2612;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2774 < ((_2772 >> 12u) & 15u))
            {
                float _2878;
                float _2880;
                float _2882;
                float _2884;
                float _2886;
                float _2888;
                float _3037 = _2757;
                float _3038 = _2759;
                float _3039 = _2761;
                float _3040 = _2763;
                float _3041 = _2765;
                float _3042 = _2767;
                uint _3043 = _2774;
                uint _3052;
                bool _3053;
                for (;;)
                {
                    _3052 = texelFetch(g_lightClassification, int((((_2650 << 5u) + (_2636 << 9u)) + (_3043 << 2u)) >> 2u)).x;
                    _3053 = _3052 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3053)
                    {
                        frontier_phi_77_pred = _3042;
                        frontier_phi_77_pred_1 = _3041;
                        frontier_phi_77_pred_2 = _3040;
                        frontier_phi_77_pred_3 = _3039;
                        frontier_phi_77_pred_4 = _3038;
                        frontier_phi_77_pred_5 = _3037;
                    }
                    else
                    {
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3259 = _3037;
                        float _3260 = _3038;
                        float _3261 = _3039;
                        float _3262 = _3040;
                        float _3263 = _3041;
                        float _3264 = _3042;
                        uint _3265 = _3052;
                        uint _3266;
                        vec4 _3291;
                        float _3292;
                        vec4 _3307;
                        vec3 _3319;
                        vec4 _3334;
                        vec4 _3350;
                        float _3396;
                        bool _3397;
                        for (;;)
                        {
                            uint _3276 = ((_3043 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3265));
                            _3266 = (_3265 + 4294967295u) & _3265;
                            uint _3278 = _3276 * 40u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            _3292 = _3291.w;
                            uint _3294 = (_3276 * 40u) + 4u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            uint _3309 = (_3276 * 40u) + 8u;
                            _3319 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x));
                            uint _3321 = (_3276 * 40u) + 16u;
                            _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3337 = (_3276 * 40u) + 20u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3352 = (_3276 * 40u) + 24u;
                            vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3371 = (_3276 * 40u) + 28u;
                            vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            _3396 = fma(_2612, _3384.z, fma(_2611, _3384.y, _3384.x * _2610)) + _3384.w;
                            _3397 = !((fma(_2612, _3365.z, fma(_2611, _3365.y, _3365.x * _2610)) + _3365.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3397)
                            {
                                float _3424 = _3291.x - _2610;
                                float _3425 = _3291.y - _2611;
                                float _3426 = _3291.z - _2612;
                                float _3427 = dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426));
                                float _3430 = inversesqrt(_3427);
                                float _3431 = _3430 * _3424;
                                float _3432 = _3430 * _3425;
                                float _3433 = _3430 * _3426;
                                float _3437 = 1.0 - (_3427 / (_3292 * _3292));
                                float _4585 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3438 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3442 = sqrt(_3427) * _3307.w;
                                float _3444 = 1.39999997615814208984375 / (_3442 + 1.39999997615814208984375);
                                float _3445 = _3444 * _3444;
                                float _3448 = ((1.0 - _3445) * dot(vec3(_3431, _3432, _3433), vec3(_862, _865, _868))) + _3445;
                                float _3451 = _3442 * _3442;
                                float _3455 = (fma(_2612, _3334.z, fma(_2611, _3334.y, _3334.x * _2610)) + _3334.w) / _3396;
                                float _3456 = (fma(_2612, _3350.z, fma(_2611, _3350.y, _3350.x * _2610)) + _3350.w) / _3396;
                                float _3460 = 1.0 - dot(vec2(_3455, _3456), vec2(_3455, _3456));
                                float _4601 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3461 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                                float _3462 = _3461 * (((isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0))) * _3438) / ((_3451 * 0.699999988079071044921875) + 1.0));
                                float _3474 = exp2(log2(1.0 / ((_3451 * 3.5) + 5.0)) * 0.25);
                                float _3475 = 1.0 - _922;
                                float _3482 = sqrt(1.0 - ((1.0 - (_3475 * _3475)) * (1.0 - (_3474 * _3474))));
                                float _3483 = _3482 * _3482;
                                float _3484 = _3483 * _3483;
                                float _3485 = _3431 - _2903;
                                float _3486 = _3432 - _2904;
                                float _3487 = _3433 - _2905;
                                float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                                float _3495 = dot(vec3(_862, _865, _868), vec3((-0.0) - _2903, (-0.0) - _2904, (-0.0) - _2905));
                                float _4612 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3498 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3499 = dot(vec3(_862, _865, _868), vec3(_3491 * _3485, _3491 * _3486, _3491 * _3487));
                                float _4623 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3502 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                                float _3506 = ((_3502 * _3502) * (_3484 + (-1.0))) + 1.0;
                                float _3507 = _3444 * _3483;
                                float _3508 = _3507 * _3507;
                                float _3514 = ((1.0 - _3508) * dot(vec3(_862, _865, _868), vec3(_3431, _3432, _3433))) + _3508;
                                float _4634 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3515 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                                float _3516 = 1.0 - _3483;
                                float _3526 = (0.5 / (((_3515 * ((_3498 * _3516) + _3483)) + 9.9999999392252902907785028219223e-09) + (((_3515 * _3516) + _3483) * _3498))) * _3515;
                                float _4645 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3536 = (_3461 * _3438) * (((_3484 * 3.1415927410125732421875) * (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) / ((_3506 * _3506) * ((_3451 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3462 * _3307.y;
                                frontier_phi_83_pred_1 = _3462 * _3307.x;
                                frontier_phi_83_pred_2 = _3536 * _3319.z;
                                frontier_phi_83_pred_3 = _3536 * _3319.y;
                                frontier_phi_83_pred_4 = _3536 * _3319.x;
                                frontier_phi_83_pred_5 = _3462 * _3307.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3544 = frontier_phi_83_pred;
                            _3543 = frontier_phi_83_pred_1;
                            _3542 = frontier_phi_83_pred_2;
                            _3541 = frontier_phi_83_pred_3;
                            _3540 = frontier_phi_83_pred_4;
                            _3545 = frontier_phi_83_pred_5;
                            _3249 = _3543 + _3262;
                            _3250 = _3544 + _3263;
                            _3251 = _3545 + _3264;
                            _3246 = _3540 + _3259;
                            _3247 = _3541 + _3260;
                            _3248 = _3542 + _3261;
                            if (_3266 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3266;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3251;
                        frontier_phi_77_pred_1 = _3250;
                        frontier_phi_77_pred_2 = _3249;
                        frontier_phi_77_pred_3 = _3248;
                        frontier_phi_77_pred_4 = _3247;
                        frontier_phi_77_pred_5 = _3246;
                    }
                    _2888 = frontier_phi_77_pred;
                    _2886 = frontier_phi_77_pred_1;
                    _2884 = frontier_phi_77_pred_2;
                    _2882 = frontier_phi_77_pred_3;
                    _2880 = frontier_phi_77_pred_4;
                    _2878 = frontier_phi_77_pred_5;
                    uint _3044 = _3043 + 1u;
                    if (_3044 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3037 = _2878;
                        _3038 = _2880;
                        _3039 = _2882;
                        _3040 = _2884;
                        _3041 = _2886;
                        _3042 = _2888;
                        _3043 = _3044;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2882;
                frontier_phi_58_59_ladder_1 = _2888;
                frontier_phi_58_59_ladder_2 = _2886;
                frontier_phi_58_59_ladder_3 = _2884;
                frontier_phi_58_59_ladder_4 = _2880;
                frontier_phi_58_59_ladder_5 = _2878;
            }
            else
            {
                frontier_phi_58_59_ladder = _2761;
                frontier_phi_58_59_ladder_1 = _2767;
                frontier_phi_58_59_ladder_2 = _2765;
                frontier_phi_58_59_ladder_3 = _2763;
                frontier_phi_58_59_ladder_4 = _2759;
                frontier_phi_58_59_ladder_5 = _2757;
            }
            _2877 = frontier_phi_58_59_ladder_5;
            _2879 = frontier_phi_58_59_ladder_4;
            _2881 = frontier_phi_58_59_ladder;
            _2883 = frontier_phi_58_59_ladder_3;
            _2885 = frontier_phi_58_59_ladder_2;
            _2887 = frontier_phi_58_59_ladder_1;
        }
        float _2892 = isnan(1.0) ? _906 : (isnan(_906) ? 1.0 : min(_906, 1.0));
        _2669 = (_2892 * _2883) + _2121;
        _2671 = (_2892 * _2885) + _2123;
        _2673 = (_2892 * _2887) + _2125;
        _2675 = ((_2877 * 0.039999999105930328369140625) * _2892) + _2454;
        _2677 = ((_2879 * 0.039999999105930328369140625) * _2892) + _2456;
        _2679 = ((_2881 * 0.039999999105930328369140625) * _2892) + _2458;
    }
    else
    {
        _2669 = _2121;
        _2671 = _2123;
        _2673 = _2125;
        _2675 = _2454;
        _2677 = _2456;
        _2679 = _2458;
    }
    float _4661 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4672 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4683 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _2696 = ((isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2669 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _906))) + ((_2675 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1742)) * cbPerFrame._m0[3u].x);
    float _2697 = ((isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2671 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _906))) + ((_2677 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1742)) * cbPerFrame._m0[3u].x);
    float _2698 = ((isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2673 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _906))) + ((_2679 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1742)) * cbPerFrame._m0[3u].x);
    uint _2699 = _249 + 6u;
    float _2707 = _843 / cbSceneParam._m0[86u].x;
    float _2708 = _844 / cbSceneParam._m0[86u].y;
    vec4 _2722 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2707, _2708, (log2((isnan(cbSceneParam._m0[77u].w) ? _765 : (isnan(_765) ? cbSceneParam._m0[77u].w : min(_765, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2724 = _2722.x;
    float _2725 = _2722.y;
    float _2726 = _2722.z;
    float _2727 = _2722.w;
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    if (_765 > cbSceneParam._m0[78u].w)
    {
        float _2782 = isnan(_765) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _765 : min(cbSceneParam._m0[80u].w, _765));
        float _2783 = _2782 / _765;
        float _2794 = _2783 * _816;
        float _2795 = _817 * _2783;
        float _2796 = (-0.0) - _2795;
        float _2797 = _2783 * _818;
        float _2799 = (cbSceneParam._m0[77u].w * _2796) / _2782;
        float _2800 = _2799 + cbSceneParam._m0[79u].w;
        float _2801 = cbSceneParam._m0[79u].w - _2795;
        float _2807 = sqrt(((_2794 * _2794) + (_2795 * _2795)) + (_2797 * _2797));
        float _2810 = (1.0 - (cbSceneParam._m0[77u].w / _2782)) * _2807;
        float _2815 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2817 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2994;
        if (abs((_2796 - _2799) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2994 = ((((_2800 > 0.0) ? exp2(_2815 * _2800) : (2.0 - exp2(_2817 * _2800))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2810;
        }
        else
        {
            float _2938 = 1.0 / cbSceneParam._m0[80u].x;
            float _2939 = isnan(_2801) ? _2800 : (isnan(_2800) ? _2801 : max(_2800, _2801));
            float _2940 = isnan(_2801) ? _2800 : (isnan(_2800) ? _2801 : min(_2800, _2801));
            float _2949 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : min(_2939, 0.0));
            float _2950 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : min(_2940, 0.0));
            _2994 = ((abs(_2807 / _2796) * cbSceneParam._m0[80u].y) * ((((_2949 - _2950) * 2.0) - ((exp2(_2815 * (isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0)))) - exp2(_2815 * (isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0))))) * _2938)) - ((exp2(_2817 * _2949) - exp2(_2817 * _2950)) * _2938))) + (_2810 * cbSceneParam._m0[80u].z);
        }
        vec4 _2996 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2707, _2708, 1.0), 0.0);
        float _3005 = exp2((_2994 * (-1.44269502162933349609375)) * (1.0 - _2996.w));
        float _3006 = log2(_3005);
        float _3022 = log2(_2727);
        _2819 = (exp2(_3022 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].x)) * _2996.x) / cbSceneParam._m0[78u].x)) + _2724;
        _2821 = (exp2(_3022 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].y)) * _2996.y) / cbSceneParam._m0[78u].y)) + _2725;
        _2823 = (exp2(_3022 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].z)) * _2996.z) / cbSceneParam._m0[78u].z)) + _2726;
        _2825 = _3005 * _2727;
    }
    else
    {
        _2819 = _2724;
        _2821 = _2725;
        _2823 = _2726;
        _2825 = _2727;
    }
    bool _3032;
    vec4 _2835;
    vec4 _2857;
    float _2859;
    float _2863;
    float _2864;
    float _2865;
    float _2866;
    bool _2876;
    for (;;)
    {
        _2835 = cbMatDynParam._m0[0u];
        float _2837 = roundEven(_2835.y);
        bool _2838 = _2837 == 3.0;
        float _2839 = log2(_2825);
        float _2846 = exp2(_2839 * cbSceneParam._m0[78u].x) * _2696;
        float _2847 = exp2(_2839 * cbSceneParam._m0[78u].y) * _2697;
        float _2848 = exp2(_2839 * cbSceneParam._m0[78u].z) * _2698;
        float _2855 = _832 + (-0.5);
        _2857 = cbMtdParam._m0[1u];
        _2859 = _2857.y * _2855;
        float _2862 = (_2837 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2863 = _2862 * (_2838 ? _2846 : (_2846 + (cbSceneParam._m0[72u].w * _2819)));
        _2864 = _2862 * (_2838 ? _2847 : (_2847 + (cbSceneParam._m0[72u].w * _2821)));
        _2865 = _2862 * (_2838 ? _2848 : (_2848 + (cbSceneParam._m0[72u].w * _2823)));
        _2866 = _2855 * 0.999000012874603271484375;
        _2876 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2876)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _2866) < 0.5)
            {
                _3032 = true;
                break;
            }
        }
        uint _2973 = _881 + uint(_2835.w);
        if ((cbInstanceData._m0[_2973].w < 1.0) && ((cbInstanceData._m0[_2973].w + _2866) < 0.5))
        {
            _3032 = true;
            break;
        }
        if ((_2859 + 1.0) < _2857.x)
        {
            _3032 = true;
            break;
        }
        _3032 = false;
        break;
    }
    float _3237;
    if (_3032)
    {
        discard_state = true;
        _3237 = 0.0;
    }
    else
    {
        _3237 = cbInstanceData._m0[_2699].w;
    }
    SV_Target.x = _2863;
    SV_Target.y = _2864;
    SV_Target.z = _2865;
    SV_Target.w = _3237;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2699].w;
    discard_exit();
}


