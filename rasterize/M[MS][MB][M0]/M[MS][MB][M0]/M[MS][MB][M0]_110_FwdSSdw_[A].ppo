#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1156;
float _3541;
float _3542;
float _3543;
float _3544;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _352 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _369 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _352) * cbMtdParam._m0[24u].x) + _352) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3553 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _377 = (_370 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _378 = (_370 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _379 = (_370 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _397 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _418 = _414.z;
    float _427 = ((_397.z - _418) * _370) + _418;
    float _430 = ((((_397.x - _416) * _370) + _416) * 2.0) + (-1.0);
    float _432 = ((((_397.y - _417) * _370) + _417) * 2.0) + (-1.0);
    float _433 = dot(vec2(_430, _432), vec2(_430, _432));
    float _3564 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _438 = sqrt(1.0 - (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))));
    float _441 = fma(_438, _222, fma(_432, _229, _430 * _215));
    float _444 = fma(_438, _223, fma(_432, _230, _430 * _216));
    float _447 = fma(_438, _224, fma(_432, _231, _430 * _217));
    float _451 = inversesqrt(dot(vec3(_441, _444, _447), vec3(_441, _444, _447)));
    vec4 _467 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _495 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _497 = _495.x;
    float _498 = 1.0 - _497;
    float _502 = ((_497 - _498) * cbMtdParam._m0[24u].z) + _498;
    float _504 = (cbMtdParam._m0[19u].x + dot(vec4(_451 * _441, _451 * _444, _451 * _447, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_502 * cbMtdParam._m0[21u].z);
    float _3575 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _520 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_502 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3586 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _525 = ((_505 * (cbMtdParam._m0[17u].x - _377)) * _521) + _377;
    float _526 = ((_505 * (cbMtdParam._m0[17u].y - _378)) * _521) + _378;
    float _527 = ((_505 * (cbMtdParam._m0[17u].z - _379)) * _521) + _379;
    vec4 _540 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _547 = (_540.x * 2.0) + (-1.0);
    float _548 = (_540.y * 2.0) + (-1.0);
    float _549 = dot(vec2(_547, _548), vec2(_547, _548));
    float _3597 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _558 = (((_540.z - _427) * _505) * _521) + _427;
    float _573 = (((cbMtdParam._m0[21u].x * _430) + ((_547 - _430) * _505)) * _521) + _430;
    float _574 = (((cbMtdParam._m0[21u].x * _432) + ((_548 - _432) * _505)) * _521) + _432;
    float _575 = (((sqrt(1.0 - (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) - _438) * _505) * _521) + _438;
    float _580 = cbMtdParam._m0[22u].x + _467.w;
    float _583 = fma(_575, _222, fma(_574, _229, _573 * _215));
    float _586 = fma(_575, _223, fma(_574, _230, _573 * _216));
    float _589 = fma(_575, _224, fma(_574, _231, _573 * _217));
    float _593 = inversesqrt(dot(vec3(_583, _586, _589), vec3(_583, _586, _589)));
    float _594 = _593 * _583;
    float _595 = _593 * _586;
    float _596 = _593 * _589;
    float _3608 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _597 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _3630 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _3641 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _3652 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _615 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _667 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _657);
    float _668 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _657);
    float _669 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _657);
    float _673 = inversesqrt(dot(vec3(_667, _668, _669), vec3(_667, _668, _669)));
    float _674 = _667 * _673;
    float _675 = _668 * _673;
    float _676 = _669 * _673;
    vec4 _681 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _683 = _681.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _837 = sqrt(((_667 * _667) + (_668 * _668)) + (_669 * _669));
        float _843 = (cbMatDynParam._m0[5u].x * _837) + cbMatDynParam._m0[5u].y;
        float _3663 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _848 = (cbMatDynParam._m0[5u].z * _837) + cbMatDynParam._m0[5u].w;
        float _3674 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) - _844)) + _844) < ((_683 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _694 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _695 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _713 = fma(_596, cbSceneParam._m0[5u].z, fma(_595, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _594));
    float _716 = fma(_596, cbSceneParam._m0[6u].z, fma(_595, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _594));
    float _719 = fma(_596, cbSceneParam._m0[7u].z, fma(_595, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _594));
    uint _732 = _234 + 9u;
    uint _733 = _732 + uint(cbMatDynParam._m0[0u].w);
    float _739 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * cbInstanceData._m0[_733].x;
    float _740 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * cbInstanceData._m0[_733].y;
    float _741 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) * cbInstanceData._m0[_733].z;
    float _3685 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _3696 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _3707 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    vec4 _753 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _694, cbSceneParam._m0[86u].y * _695));
    float _757 = ((isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * TEXCOORD_5.w) * _753.x;
    float _758 = dot(vec3(_594, _595, _596), vec3(_674, _675, _676));
    float _761 = _758 * 2.0;
    float _765 = (_761 * _594) - _674;
    float _766 = (_761 * _595) - _675;
    float _767 = (_761 * _596) - _676;
    float _771 = abs(dot(vec3(_674, _675, _676), vec3(_594, _595, _596)));
    float _3718 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _773 = sqrt(_597);
    float _786 = exp2((_773 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_773 * 3.0));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1155;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _880 = fma(_826, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818));
        float _884 = fma(_826, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818));
        float _888 = fma(_826, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818));
        float _913 = _818 + _594;
        float _914 = _822 + _595;
        float _915 = _826 + _596;
        float _925 = fma(_915, cbModelParam._m0[26u].z, fma(_914, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _913)) - _880;
        float _926 = fma(_915, cbModelParam._m0[27u].z, fma(_914, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _913)) - _884;
        float _927 = fma(_915, cbModelParam._m0[28u].z, fma(_914, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _913)) - _888;
        float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
        float _944 = ((_931 * _925) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_880 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_931 * _926) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_884 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_931 * _927) / cbModelParam._m0[34u].z) + ((((((_888 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        float _983 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_949.x + (-0.5));
        float _985 = _983 * (_949.y + (-0.5));
        float _986 = _983 * (_949.z + (-0.5));
        float _993 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_956.x + (-0.5));
        float _995 = _993 * (_956.y + (-0.5));
        float _996 = _993 * (_956.z + (-0.5));
        float _1003 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_963.x + (-0.5));
        float _1005 = _1003 * (_963.y + (-0.5));
        float _1006 = _1003 * (_963.z + (-0.5));
        float _1013 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_970.x + (-0.5));
        float _1015 = _1013 * (_970.y + (-0.5));
        float _1016 = _1013 * (_970.z + (-0.5));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = _984 * 0.5;
        float _1021 = _994 * 0.5;
        float _1022 = _1004 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1037 = (dot(vec3(_594, _595, _596), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1047 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3766 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1049 + 1.0))) + _1054) * _1017;
        float _1064 = _985 * 0.5;
        float _1065 = _995 * 0.5;
        float _1066 = _1005 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_594, _595, _596), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3799 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1091 + 1.0))) + _1096) * _1018;
        float _1106 = _986 * 0.5;
        float _1107 = _996 * 0.5;
        float _1108 = _1006 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_594, _595, _596), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3832 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1133 + 1.0))) + _1138) * _1019;
        _1155 = _986;
        _1157 = _985;
        _1158 = _984;
        _1159 = _996;
        _1160 = _995;
        _1161 = _994;
        _1162 = _1006;
        _1163 = _1005;
        _1164 = _1004;
        _1165 = _1019;
        _1166 = _1018;
        _1167 = _1017;
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
    }
    else
    {
        _1155 = _1156;
        _1157 = _1156;
        _1158 = _1156;
        _1159 = _1156;
        _1160 = _1156;
        _1161 = _1156;
        _1162 = _1156;
        _1163 = _1156;
        _1164 = _1156;
        _1165 = _1156;
        _1166 = _1156;
        _1167 = _1156;
        _1168 = 0.0;
        _1169 = 0.0;
        _1170 = 0.0;
    }
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1198 = fma(_826, cbModelParam._m0[30u].z, fma(_822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _818));
        float _1202 = fma(_826, cbModelParam._m0[31u].z, fma(_822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _818));
        float _1206 = fma(_826, cbModelParam._m0[32u].z, fma(_822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _818));
        float _1229 = _818 + _594;
        float _1230 = _822 + _595;
        float _1231 = _826 + _596;
        float _1241 = fma(_1231, cbModelParam._m0[30u].z, fma(_1230, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1229)) - _1198;
        float _1242 = fma(_1231, cbModelParam._m0[31u].z, fma(_1230, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1229)) - _1202;
        float _1243 = fma(_1231, cbModelParam._m0[32u].z, fma(_1230, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1229)) - _1206;
        float _1247 = inversesqrt(dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243)));
        float _1260 = ((_1247 * _1241) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1198 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1247 * _1242) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1202 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1247 * _1243) / cbModelParam._m0[35u].z) + ((((((_1206 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        float _1297 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1264.x + (-0.5));
        float _1299 = _1297 * (_1264.y + (-0.5));
        float _1300 = _1297 * (_1264.z + (-0.5));
        float _1307 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1271.x + (-0.5));
        float _1309 = _1307 * (_1271.y + (-0.5));
        float _1310 = _1307 * (_1271.z + (-0.5));
        float _1317 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1278.x + (-0.5));
        float _1319 = _1317 * (_1278.y + (-0.5));
        float _1320 = _1317 * (_1278.z + (-0.5));
        float _1327 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1285.x + (-0.5));
        float _1329 = _1327 * (_1285.y + (-0.5));
        float _1330 = _1327 * (_1285.z + (-0.5));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = _1298 * 0.5;
        float _1335 = _1308 * 0.5;
        float _1336 = _1318 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_594, _595, _596), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _3895 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1361 + 1.0))) + _1366) * _1331;
        float _1376 = _1299 * 0.5;
        float _1377 = _1309 * 0.5;
        float _1378 = _1319 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_594, _595, _596), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _3928 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1403 + 1.0))) + _1408) * _1332;
        float _1418 = _1300 * 0.5;
        float _1419 = _1310 * 0.5;
        float _1420 = _1320 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_594, _595, _596), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _3939 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _3950 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _3961 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1445 + 1.0))) + _1450) * _1333;
        _1467 = _1300;
        _1468 = _1299;
        _1469 = _1298;
        _1470 = _1310;
        _1471 = _1309;
        _1472 = _1308;
        _1473 = _1320;
        _1474 = _1319;
        _1475 = _1318;
        _1476 = _1333;
        _1477 = _1332;
        _1478 = _1331;
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
    }
    else
    {
        _1467 = _1156;
        _1468 = _1156;
        _1469 = _1156;
        _1470 = _1156;
        _1471 = _1156;
        _1472 = _1156;
        _1473 = _1156;
        _1474 = _1156;
        _1475 = _1156;
        _1476 = _1156;
        _1477 = _1156;
        _1478 = _1156;
        _1479 = 0.0;
        _1480 = 0.0;
        _1481 = 0.0;
    }
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1168)) + _1168;
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1169)) + _1169;
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1170)) + _1170;
    float _1514 = fma(_1493, cbSceneParam._m0[89u].z, fma(_1492, cbSceneParam._m0[89u].y, _1491 * cbSceneParam._m0[89u].x));
    float _1517 = fma(_1493, cbSceneParam._m0[90u].z, fma(_1492, cbSceneParam._m0[90u].y, _1491 * cbSceneParam._m0[90u].x));
    float _1520 = fma(_1493, cbSceneParam._m0[91u].z, fma(_1492, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1491));
    float _1535 = _765 * 0.5;
    float _1536 = _766 * 0.5;
    float _1537 = _767 * 0.5;
    float _1538 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1541 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1544 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1578;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1551 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1155, _1159, _1162, _1165));
        float _1555 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1559 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1158, _1161, _1164, _1167));
        float _1566 = dot(vec4(cbModelParam._m0[39u]), vec4(_1535, _1536, _1537, 1.0));
        _1578 = dot(vec3(isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1566) ? 0.0 : (isnan(0.0) ? _1566 : max(0.0, _1566))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1578 = 1.0;
    }
    float _1589;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1580 = dot(vec4(cbModelParam._m0[40u]), vec4(_1535, _1536, _1537, 1.0));
        _1589 = dot(vec3(isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1589 = 1.0;
    }
    float _1593 = (_1589 * cbModelParam._m0[1u].x) + (_1578 * (1.0 - cbModelParam._m0[1u].x));
    float _1603 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _597);
    float _1604 = isnan(_1603) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1603 : min(cbModelParam._m0[25u].z, _1603));
    float _1685;
    float _1687;
    float _1689;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1652 = fma(_826, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _818)) + cbModelParam._m0[13u].w;
        float _1656 = fma(_826, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _818)) + cbModelParam._m0[14u].w;
        float _1660 = fma(_826, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _818)) + cbModelParam._m0[15u].w;
        float _1663 = fma(_767, cbModelParam._m0[13u].z, fma(_766, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765));
        float _1666 = fma(_767, cbModelParam._m0[14u].z, fma(_766, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765));
        float _1669 = fma(_767, cbModelParam._m0[15u].z, fma(_766, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765));
        float _1697;
        if (_1663 > 0.0)
        {
            _1697 = abs((1.0 - _1652) / _1663);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1652 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1697 = frontier_phi_17_15_ladder;
        }
        float _1919;
        if (_1666 > 0.0)
        {
            _1919 = abs((1.0 - _1656) / _1666);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1656 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1919 = frontier_phi_26_22_ladder;
        }
        float _2165;
        if (_1669 > 0.0)
        {
            _2165 = abs((1.0 - _1660) / _1669);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1660 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2165 = frontier_phi_38_33_ladder;
        }
        float _2167 = isnan(_1919) ? _1697 : (isnan(_1697) ? _1919 : min(_1697, _1919));
        float _2168 = isnan(_2165) ? _2167 : (isnan(_2167) ? _2165 : min(_2167, _2165));
        float _2172 = (_2168 * _1663) + _1652;
        float _2173 = (_2168 * _1666) + _1656;
        float _2174 = (_2168 * _1669) + _1660;
        float _2175 = _2168 * 9.9999997473787516355514526367188e-05;
        float _2177 = (-1.0) - _2175;
        float _2179 = _2175 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2174 > _2179) || ((_2174 < _2177) || ((_2173 > _2179) || ((_2173 < _2177) || ((_2172 < _2177) || (_2172 > _2179))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2298 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2174, cbModelParam._m0[9u].z, fma(_2173, cbModelParam._m0[9u].y, _2172 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2174, cbModelParam._m0[10u].z, fma(_2173, cbModelParam._m0[10u].y, _2172 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2174, cbModelParam._m0[11u].z, fma(_2173, cbModelParam._m0[11u].y, _2172 * cbModelParam._m0[11u].x))), _1604);
            frontier_phi_16_38_ladder = _2298.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2298.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2298.x * cbModelParam._m0[1u].y;
        }
        _1685 = frontier_phi_16_38_ladder_2;
        _1687 = frontier_phi_16_38_ladder_1;
        _1689 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1673 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_765, _766, _767), _1604);
        _1685 = _1673.x * cbModelParam._m0[1u].y;
        _1687 = _1673.y * cbModelParam._m0[1u].y;
        _1689 = _1673.z * cbModelParam._m0[1u].y;
    }
    float _1693 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _597);
    float _1694 = isnan(_1693) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1693 : min(cbModelParam._m0[25u].w, _1693));
    float _1784;
    float _1786;
    float _1788;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1748 = fma(_826, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _818)) + cbModelParam._m0[21u].w;
        float _1752 = fma(_826, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _818)) + cbModelParam._m0[22u].w;
        float _1756 = fma(_826, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _818)) + cbModelParam._m0[23u].w;
        float _1759 = fma(_767, cbModelParam._m0[21u].z, fma(_766, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765));
        float _1762 = fma(_767, cbModelParam._m0[22u].z, fma(_766, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765));
        float _1765 = fma(_767, cbModelParam._m0[23u].z, fma(_766, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765));
        float _1924;
        if (_1759 > 0.0)
        {
            _1924 = abs((1.0 - _1748) / _1759);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1748 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1924 = frontier_phi_28_24_ladder;
        }
        float _2192;
        if (_1762 > 0.0)
        {
            _2192 = abs((1.0 - _1752) / _1762);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1752 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2192 = frontier_phi_40_35_ladder;
        }
        float _2397;
        if (_1765 > 0.0)
        {
            _2397 = abs((1.0 - _1756) / _1765);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1756 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2397 = frontier_phi_49_46_ladder;
        }
        float _2399 = isnan(_2192) ? _1924 : (isnan(_1924) ? _2192 : min(_1924, _2192));
        float _2400 = isnan(_2397) ? _2399 : (isnan(_2399) ? _2397 : min(_2399, _2397));
        float _2404 = (_2400 * _1759) + _1748;
        float _2405 = (_2400 * _1762) + _1752;
        float _2406 = (_2400 * _1765) + _1756;
        float _2407 = _2400 * 9.9999997473787516355514526367188e-05;
        float _2408 = (-1.0) - _2407;
        float _2410 = _2407 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2406 > _2410) || ((_2406 < _2408) || ((_2405 > _2410) || ((_2405 < _2408) || ((_2404 < _2408) || (_2404 > _2410))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2605 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2406, cbModelParam._m0[17u].z, fma(_2405, cbModelParam._m0[17u].y, _2404 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2406, cbModelParam._m0[18u].z, fma(_2405, cbModelParam._m0[18u].y, _2404 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2406, cbModelParam._m0[19u].z, fma(_2405, cbModelParam._m0[19u].y, _2404 * cbModelParam._m0[19u].x))), _1694);
            frontier_phi_25_49_ladder = _2605.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2605.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2605.x * cbModelParam._m0[1u].z;
        }
        _1784 = frontier_phi_25_49_ladder_2;
        _1786 = frontier_phi_25_49_ladder_1;
        _1788 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1768 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_765, _766, _767), _1694);
        _1784 = _1768.x * cbModelParam._m0[1u].z;
        _1786 = _1768.y * cbModelParam._m0[1u].z;
        _1788 = _1768.z * cbModelParam._m0[1u].z;
    }
    float _1800 = ((((1.0 - _786) * ((_773 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_786 * _773)) * _757;
    float _1801 = _1800 * ((cbModelParam._m0[1u].w * (_1784 - _1685)) + _1685);
    float _1802 = _1800 * ((cbModelParam._m0[1u].w * (_1786 - _1687)) + _1687);
    float _1803 = _1800 * ((cbModelParam._m0[1u].w * (_1788 - _1689)) + _1689);
    float _1806 = fma(_1803, cbSceneParam._m0[89u].z, fma(_1802, cbSceneParam._m0[89u].y, _1801 * cbSceneParam._m0[89u].x));
    float _1809 = fma(_1803, cbSceneParam._m0[90u].z, fma(_1802, cbSceneParam._m0[90u].y, _1801 * cbSceneParam._m0[90u].x));
    float _1812 = fma(_1803, cbSceneParam._m0[91u].z, fma(_1802, cbSceneParam._m0[91u].y, _1801 * cbSceneParam._m0[91u].x));
    vec4 _1820 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_694, _695));
    float _1822 = _1820.w;
    float _1834 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1822);
    float _1835 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1822);
    float _1836 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1822);
    uvec4 _1840 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1842 = _1840.x * 14u;
    uint _1843 = _1842 + 13u;
    float _1850 = _757 + (-1.0);
    float _1855 = (cbLight._m0[_1843].x * _1850) + 1.0;
    float _1856 = (cbLight._m0[_1843].y * _1850) + 1.0;
    float _1857 = (cbLight._m0[_1843].z * _1850) + 1.0;
    float _1858 = (cbLight._m0[_1843].w * _1850) + 1.0;
    uint _1859 = _1842 + 5u;
    float _1865 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
    uint _1869 = _1842 + 4u;
    float _1878 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
    uint _1882 = _1842 | 1u;
    float _1893 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_594, _595, _596));
    float _1896 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_594, _595, _596));
    float _4097 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _4108 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1901 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 0.3183098733425140380859375;
    float _1903 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * 0.3183098733425140380859375;
    float _1910 = ((cbLight._m0[_1859].x * _1865) * _1903) + (((cbLight._m0[_1869].x * _1834) * _1878) * _1901);
    float _1911 = ((_1865 * cbLight._m0[_1859].y) * _1903) + (((cbLight._m0[_1869].y * _1835) * _1878) * _1901);
    float _1912 = ((_1865 * cbLight._m0[_1859].z) * _1903) + (((cbLight._m0[_1869].z * _1836) * _1878) * _1901);
    uvec4 _1916 = floatBitsToUint(cbLight._m0[_1842 + 12u]);
    bool _1918 = _1916.x == 0u;
    float _1929;
    float _1931;
    float _1933;
    if (_1918)
    {
        _1929 = _1910;
        _1931 = _1911;
        _1933 = _1912;
    }
    else
    {
        uint _1937 = _1842 + 6u;
        float _1953 = (dot(vec3(cbLight._m0[_1842 + 2u].xyz), vec3(_594, _595, _596)) * 0.5) + 0.5;
        float _1954 = _1953 * _1953;
        float _4119 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1955 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1956 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _1929 = (((cbLight._m0[_1937].x * 0.3183098733425140380859375) * _1955) * _1956) + _1910;
        _1931 = (((cbLight._m0[_1937].y * 0.3183098733425140380859375) * _1955) * _1956) + _1911;
        _1933 = (((cbLight._m0[_1937].z * 0.3183098733425140380859375) * _1955) * _1956) + _1912;
    }
    bool _1936 = _1916.y == 0u;
    float _1974;
    float _1976;
    float _1978;
    if (_1936)
    {
        _1974 = _1929;
        _1976 = _1931;
        _1978 = _1933;
    }
    else
    {
        uint _2136 = _1842 + 7u;
        float _2152 = (dot(vec3(cbLight._m0[_1842 + 3u].xyz), vec3(_594, _595, _596)) * 0.5) + 0.5;
        float _2153 = _2152 * _2152;
        float _4135 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2154 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _2155 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _1974 = (((cbLight._m0[_2136].x * 0.3183098733425140380859375) * _2154) * _2155) + _1929;
        _1976 = (((cbLight._m0[_2136].y * 0.3183098733425140380859375) * _2154) * _2155) + _1931;
        _1978 = (((cbLight._m0[_2136].z * 0.3183098733425140380859375) * _2154) * _2155) + _1933;
    }
    uint _1981 = _1842 + 8u;
    float _1994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1842].w)) * _597) * 0.949999988079071044921875);
    float _1995 = _1994 * _1994;
    float _1996 = cbLight._m0[_1842].x + _674;
    float _1997 = cbLight._m0[_1842].y + _675;
    float _1998 = cbLight._m0[_1842].z + _676;
    float _2002 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
    float _2003 = _2002 * _1996;
    float _2004 = _2002 * _1997;
    float _2005 = _2002 * _1998;
    float _2006 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_1842].xyz));
    float _4151 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2009 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _4162 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2010 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2011 = dot(vec3(_594, _595, _596), vec3(_2003, _2004, _2005));
    float _4173 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2015 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_2003, _2004, _2005));
    float _4184 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2019 = _1995 * _1995;
    float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
    float _2034 = (exp2(log2(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2035 = 1.0 - _1995;
    float _2046 = (0.5 / (((_2010 * ((_2009 * _2035) + _1995)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2035) + _1995) * _2009))) * _2009;
    float _4195 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2048 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
    uint _2062 = _1842 + 9u;
    float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1882].w)) * _597) * 0.949999988079071044921875);
    float _2074 = _2073 * _2073;
    float _2075 = cbLight._m0[_1882].x + _674;
    float _2076 = cbLight._m0[_1882].y + _675;
    float _2077 = cbLight._m0[_1882].z + _676;
    float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
    float _2082 = _2081 * _2075;
    float _2083 = _2081 * _2076;
    float _2084 = _2081 * _2077;
    float _2085 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_1882].xyz));
    float _4206 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _2089 = dot(vec3(_594, _595, _596), vec3(_2082, _2083, _2084));
    float _4217 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _2093 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_2082, _2083, _2084));
    float _4228 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2097 = _2074 * _2074;
    float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
    float _2110 = (exp2(log2(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2111 = 1.0 - _2074;
    float _2121 = (0.5 / (((_2010 * ((_2088 * _2111) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2111) + _2074) * _2088))) * _2088;
    float _4239 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2123 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
    float _2133 = (((_2110 * cbLight._m0[_2062].x) * _2123) * _1865) + ((((cbLight._m0[_1981].x * _1834) * _2034) * _2048) * _1878);
    float _2134 = (((_2110 * cbLight._m0[_2062].y) * _2123) * _1865) + ((((cbLight._m0[_1981].y * _1835) * _2034) * _2048) * _1878);
    float _2135 = (((_2110 * cbLight._m0[_2062].z) * _2123) * _1865) + ((((cbLight._m0[_1981].z * _1836) * _2034) * _2048) * _1878);
    float _2197;
    float _2199;
    float _2201;
    if (_1918)
    {
        _2197 = _2133;
        _2199 = _2134;
        _2201 = _2135;
    }
    else
    {
        uint _2203 = _1842 + 2u;
        uint _2207 = _1842 + 10u;
        float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _597) * 0.949999988079071044921875);
        float _2222 = _2221 * _2221;
        float _2223 = cbLight._m0[_2203].x + _674;
        float _2224 = cbLight._m0[_2203].y + _675;
        float _2225 = cbLight._m0[_2203].z + _676;
        float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
        float _2230 = _2229 * _2223;
        float _2231 = _2229 * _2224;
        float _2232 = _2229 * _2225;
        float _2233 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_2203].xyz));
        float _4250 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2237 = dot(vec3(_594, _595, _596), vec3(_2230, _2231, _2232));
        float _4261 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2240 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2241 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2230, _2231, _2232));
        float _4272 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2245 = _2222 * _2222;
        float _2249 = ((_2240 * _2240) * (_2245 + (-1.0))) + 1.0;
        float _2258 = (exp2(log2(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2259 = 1.0 - _2222;
        float _2269 = (0.5 / (((_2010 * ((_2236 * _2259) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2259) + _2222) * _2236))) * _2236;
        float _4283 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2271 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2245 / ((_2249 * _2249) * 3.141590118408203125));
        float _2272 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _2197 = (((_2258 * cbLight._m0[_2207].x) * _2271) * _2272) + _2133;
        _2199 = (((_2258 * cbLight._m0[_2207].y) * _2271) * _2272) + _2134;
        _2201 = (((_2258 * cbLight._m0[_2207].z) * _2271) * _2272) + _2135;
    }
    float _2307;
    float _2309;
    float _2311;
    if (_1936)
    {
        _2307 = _2197;
        _2309 = _2199;
        _2311 = _2201;
    }
    else
    {
        uint _2318 = _1842 + 3u;
        uint _2322 = _1842 + 11u;
        float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2318].w)) * _597) * 0.949999988079071044921875);
        float _2337 = _2336 * _2336;
        float _2338 = cbLight._m0[_2318].x + _674;
        float _2339 = cbLight._m0[_2318].y + _675;
        float _2340 = cbLight._m0[_2318].z + _676;
        float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
        float _2345 = _2344 * _2338;
        float _2346 = _2344 * _2339;
        float _2347 = _2344 * _2340;
        float _2348 = dot(vec3(_594, _595, _596), vec3(cbLight._m0[_2318].xyz));
        float _4299 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2351 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2352 = dot(vec3(_594, _595, _596), vec3(_2345, _2346, _2347));
        float _4310 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2356 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_2345, _2346, _2347));
        float _4321 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2360 = _2337 * _2337;
        float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
        float _2373 = (exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2374 = 1.0 - _2337;
        float _2384 = (0.5 / (((_2010 * ((_2351 * _2374) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2374) + _2337) * _2351))) * _2351;
        float _4332 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2386 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
        float _2387 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _2307 = (((_2373 * cbLight._m0[_2322].x) * _2386) * _2387) + _2197;
        _2309 = (((_2373 * cbLight._m0[_2322].y) * _2386) * _2387) + _2199;
        _2311 = (((_2373 * cbLight._m0[_2322].z) * _2386) * _2387) + _2201;
    }
    float _2522;
    float _2524;
    float _2526;
    float _2528;
    float _2530;
    float _2532;
    if (_1840.y == 0u)
    {
        float _2462 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2463 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2462;
        float _2464 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2462;
        float _2465 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2462;
        uvec4 _2477 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2478 = _2477.x;
        uint _2489 = uint((float(_2477.y) * floor(float(uint(cbSceneParam._m0[85u].y * _695) / _2478))) + floor(float(uint(cbSceneParam._m0[85u].x * _694) / _2478)));
        float _2499 = (log2(_2465 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2500 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        uint _2503 = uint(isnan(14.0) ? _2500 : (isnan(_2500) ? 14.0 : min(_2500, 14.0)));
        uvec4 _2508 = texelFetch(g_lightClusterGridBuffer, int(((_2503 << 2u) + (_2489 << 6u)) >> 2u));
        uint _2509 = _2508.x;
        uint _2510 = _2477.z;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        if (((((1u << ((_2510 >> 4u) & 15u)) + 4294967295u) & _2509) == 0u) || ((_2510 & 240u) == 0u))
        {
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
        }
        else
        {
            float _2611;
            float _2613;
            float _2615;
            float _2617;
            float _2619;
            float _2621;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            uint _2769 = 0u;
            uint _2778;
            bool _2779;
            for (;;)
            {
                _2778 = texelFetch(g_lightClassification, int((((_2503 << 5u) + (_2489 << 9u)) + (_2769 << 2u)) >> 2u)).x;
                _2779 = _2778 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2779)
                {
                    frontier_phi_66_pred = _2763;
                    frontier_phi_66_pred_1 = _2768;
                    frontier_phi_66_pred_2 = _2767;
                    frontier_phi_66_pred_3 = _2766;
                    frontier_phi_66_pred_4 = _2765;
                    frontier_phi_66_pred_5 = _2764;
                }
                else
                {
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    uint _2914;
                    _2908 = _2763;
                    _2909 = _2764;
                    _2910 = _2765;
                    _2911 = _2766;
                    _2912 = _2767;
                    _2913 = _2768;
                    _2914 = _2778;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    for (;;)
                    {
                        uint _2918 = uint(findLSB(_2914)) + (_2769 << 5u);
                        uint _2915 = (_2914 + 4294967295u) & _2914;
                        uint _2920 = _2918 * 48u;
                        vec4 _2934 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2920)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 3u)).x));
                        uint _2940 = (_2918 * 48u) + 4u;
                        vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 3u)).x));
                        uint _2959 = (_2918 * 48u) + 8u;
                        vec3 _2970 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2959)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 2u)).x));
                        float _2974 = _2934.x - _2463;
                        float _2975 = _2934.y - _2464;
                        float _2976 = _2934.z - _2465;
                        float _2977 = dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976));
                        float _2980 = inversesqrt(_2977);
                        float _2981 = _2980 * _2974;
                        float _2982 = _2980 * _2975;
                        float _2983 = _2980 * _2976;
                        float _2984 = dot(vec3(_713, _716, _719), vec3(_2981, _2982, _2983));
                        float _2989 = 1.0 - (_2977 * _2934.w);
                        float _4358 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2990 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _2991 = sqrt(_2977) * _2953.w;
                        float _2994 = 1.39999997615814208984375 / (_2991 + 1.39999997615814208984375);
                        float _2995 = _2994 * _2994;
                        float _2998 = ((1.0 - _2995) * _2984) + _2995;
                        float _3001 = _2991 * _2991;
                        float _3005 = ((isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0))) * _2990) / ((_3001 * 0.699999988079071044921875) + 1.0);
                        float _3009 = (-0.0) - _2463;
                        float _3010 = (-0.0) - _2464;
                        float _3011 = (-0.0) - _2465;
                        float _3015 = inversesqrt(dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011)));
                        float _3016 = _3015 * _3009;
                        float _3017 = _3015 * _3010;
                        float _3018 = _3015 * _3011;
                        float _3026 = exp2(log2(1.0 / ((_3001 * 3.5) + 5.0)) * 0.25);
                        float _3027 = 1.0 - _773;
                        float _3034 = sqrt(1.0 - ((1.0 - (_3027 * _3027)) * (1.0 - (_3026 * _3026))));
                        float _3035 = _3034 * _3034;
                        float _3036 = _3035 * _3035;
                        float _3037 = _3016 + _2981;
                        float _3038 = _3017 + _2982;
                        float _3039 = _3018 + _2983;
                        float _3043 = inversesqrt(dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039)));
                        float _3047 = dot(vec3(_713, _716, _719), vec3(_3016, _3017, _3018));
                        float _4374 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3050 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                        float _3051 = dot(vec3(_713, _716, _719), vec3(_3043 * _3037, _3043 * _3038, _3043 * _3039));
                        float _4385 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3054 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3058 = ((_3054 * _3054) * (_3036 + (-1.0))) + 1.0;
                        float _3059 = _2994 * _3035;
                        float _3060 = _3059 * _3059;
                        float _3063 = ((1.0 - _3060) * _2984) + _3060;
                        float _4396 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3064 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                        float _3065 = 1.0 - _3035;
                        float _3075 = (0.5 / (((_3064 * ((_3050 * _3065) + _3035)) + 9.9999999392252902907785028219223e-09) + (((_3064 * _3065) + _3035) * _3050))) * _3064;
                        float _4407 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3086 = (((_3036 * 3.1415927410125732421875) * (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) / ((_3058 * _3058) * ((_3001 * 2.1991131305694580078125) + 3.141590118408203125))) * _2990;
                        _2838 = (_3005 * _2953.x) + _2911;
                        _2839 = (_3005 * _2953.y) + _2912;
                        _2840 = (_3005 * _2953.z) + _2913;
                        _2835 = (_3086 * _2970.x) + _2908;
                        _2836 = (_3086 * _2970.y) + _2909;
                        _2837 = (_3086 * _2970.z) + _2910;
                        if (_2915 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2908 = _2835;
                            _2909 = _2836;
                            _2910 = _2837;
                            _2911 = _2838;
                            _2912 = _2839;
                            _2913 = _2840;
                            _2914 = _2915;
                        }
                    }
                    frontier_phi_66_pred = _2835;
                    frontier_phi_66_pred_1 = _2840;
                    frontier_phi_66_pred_2 = _2839;
                    frontier_phi_66_pred_3 = _2838;
                    frontier_phi_66_pred_4 = _2837;
                    frontier_phi_66_pred_5 = _2836;
                }
                _2611 = frontier_phi_66_pred;
                _2621 = frontier_phi_66_pred_1;
                _2619 = frontier_phi_66_pred_2;
                _2617 = frontier_phi_66_pred_3;
                _2615 = frontier_phi_66_pred_4;
                _2613 = frontier_phi_66_pred_5;
                uint _2770 = _2769 + 1u;
                if (_2770 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2763 = _2611;
                    _2764 = _2613;
                    _2765 = _2615;
                    _2766 = _2617;
                    _2767 = _2619;
                    _2768 = _2621;
                    _2769 = _2770;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
        }
        uvec4 _2624 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2625 = _2624.z;
        uint _2627 = (_2625 >> 8u) & 15u;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        if (((4294967295u << _2627) & _2509) == 0u)
        {
            _2731 = _2610;
            _2733 = _2612;
            _2735 = _2614;
            _2737 = _2616;
            _2739 = _2618;
            _2741 = _2620;
        }
        else
        {
            float _2756 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
            float _2757 = _2756 * _2463;
            float _2758 = _2756 * _2464;
            float _2759 = _2756 * _2465;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2627 < ((_2625 >> 12u) & 15u))
            {
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2742;
                float _2891 = _2610;
                float _2892 = _2612;
                float _2893 = _2614;
                float _2894 = _2616;
                float _2895 = _2618;
                float _2896 = _2620;
                uint _2897 = _2627;
                uint _2906;
                bool _2907;
                for (;;)
                {
                    _2906 = texelFetch(g_lightClassification, int((((_2503 << 5u) + (_2489 << 9u)) + (_2897 << 2u)) >> 2u)).x;
                    _2907 = _2906 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2907)
                    {
                        frontier_phi_77_pred = _2896;
                        frontier_phi_77_pred_1 = _2895;
                        frontier_phi_77_pred_2 = _2894;
                        frontier_phi_77_pred_3 = _2893;
                        frontier_phi_77_pred_4 = _2892;
                        frontier_phi_77_pred_5 = _2891;
                    }
                    else
                    {
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3113 = _2891;
                        float _3114 = _2892;
                        float _3115 = _2893;
                        float _3116 = _2894;
                        float _3117 = _2895;
                        float _3118 = _2896;
                        uint _3119 = _2906;
                        uint _3120;
                        vec4 _3145;
                        float _3146;
                        vec4 _3161;
                        vec3 _3173;
                        vec4 _3188;
                        vec4 _3204;
                        float _3250;
                        bool _3251;
                        for (;;)
                        {
                            uint _3130 = ((_2897 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3119));
                            _3120 = (_3119 + 4294967295u) & _3119;
                            uint _3132 = _3130 * 40u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            _3146 = _3145.w;
                            uint _3148 = (_3130 * 40u) + 4u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3163 = (_3130 * 40u) + 8u;
                            _3173 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x));
                            uint _3175 = (_3130 * 40u) + 16u;
                            _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            uint _3191 = (_3130 * 40u) + 20u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3206 = (_3130 * 40u) + 24u;
                            vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3225 = (_3130 * 40u) + 28u;
                            vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            _3250 = fma(_2465, _3238.z, fma(_2464, _3238.y, _3238.x * _2463)) + _3238.w;
                            _3251 = !((fma(_2465, _3219.z, fma(_2464, _3219.y, _3219.x * _2463)) + _3219.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3251)
                            {
                                float _3278 = _3145.x - _2463;
                                float _3279 = _3145.y - _2464;
                                float _3280 = _3145.z - _2465;
                                float _3281 = dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280));
                                float _3284 = inversesqrt(_3281);
                                float _3285 = _3284 * _3278;
                                float _3286 = _3284 * _3279;
                                float _3287 = _3284 * _3280;
                                float _3291 = 1.0 - (_3281 / (_3146 * _3146));
                                float _4418 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3296 = sqrt(_3281) * _3161.w;
                                float _3298 = 1.39999997615814208984375 / (_3296 + 1.39999997615814208984375);
                                float _3299 = _3298 * _3298;
                                float _3302 = ((1.0 - _3299) * dot(vec3(_3285, _3286, _3287), vec3(_713, _716, _719))) + _3299;
                                float _3305 = _3296 * _3296;
                                float _3309 = (fma(_2465, _3188.z, fma(_2464, _3188.y, _3188.x * _2463)) + _3188.w) / _3250;
                                float _3310 = (fma(_2465, _3204.z, fma(_2464, _3204.y, _3204.x * _2463)) + _3204.w) / _3250;
                                float _3314 = 1.0 - dot(vec2(_3309, _3310), vec2(_3309, _3310));
                                float _4434 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3315 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3316 = _3315 * (((isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))) * _3292) / ((_3305 * 0.699999988079071044921875) + 1.0));
                                float _3328 = exp2(log2(1.0 / ((_3305 * 3.5) + 5.0)) * 0.25);
                                float _3329 = 1.0 - _773;
                                float _3336 = sqrt(1.0 - ((1.0 - (_3329 * _3329)) * (1.0 - (_3328 * _3328))));
                                float _3337 = _3336 * _3336;
                                float _3338 = _3337 * _3337;
                                float _3339 = _3285 - _2757;
                                float _3340 = _3286 - _2758;
                                float _3341 = _3287 - _2759;
                                float _3345 = inversesqrt(dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341)));
                                float _3349 = dot(vec3(_713, _716, _719), vec3((-0.0) - _2757, (-0.0) - _2758, (-0.0) - _2759));
                                float _4445 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3352 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3353 = dot(vec3(_713, _716, _719), vec3(_3345 * _3339, _3345 * _3340, _3345 * _3341));
                                float _4456 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3356 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3360 = ((_3356 * _3356) * (_3338 + (-1.0))) + 1.0;
                                float _3361 = _3298 * _3337;
                                float _3362 = _3361 * _3361;
                                float _3368 = ((1.0 - _3362) * dot(vec3(_713, _716, _719), vec3(_3285, _3286, _3287))) + _3362;
                                float _4467 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3370 = 1.0 - _3337;
                                float _3380 = (0.5 / (((_3369 * ((_3352 * _3370) + _3337)) + 9.9999999392252902907785028219223e-09) + (((_3369 * _3370) + _3337) * _3352))) * _3369;
                                float _4478 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3390 = (_3315 * _3292) * (((_3338 * 3.1415927410125732421875) * (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) / ((_3360 * _3360) * ((_3305 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3316 * _3161.y;
                                frontier_phi_83_pred_1 = _3316 * _3161.x;
                                frontier_phi_83_pred_2 = _3390 * _3173.z;
                                frontier_phi_83_pred_3 = _3390 * _3173.y;
                                frontier_phi_83_pred_4 = _3390 * _3173.x;
                                frontier_phi_83_pred_5 = _3316 * _3161.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3398 = frontier_phi_83_pred;
                            _3397 = frontier_phi_83_pred_1;
                            _3396 = frontier_phi_83_pred_2;
                            _3395 = frontier_phi_83_pred_3;
                            _3394 = frontier_phi_83_pred_4;
                            _3399 = frontier_phi_83_pred_5;
                            _3103 = _3397 + _3116;
                            _3104 = _3398 + _3117;
                            _3105 = _3399 + _3118;
                            _3100 = _3394 + _3113;
                            _3101 = _3395 + _3114;
                            _3102 = _3396 + _3115;
                            if (_3120 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3120;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3105;
                        frontier_phi_77_pred_1 = _3104;
                        frontier_phi_77_pred_2 = _3103;
                        frontier_phi_77_pred_3 = _3102;
                        frontier_phi_77_pred_4 = _3101;
                        frontier_phi_77_pred_5 = _3100;
                    }
                    _2742 = frontier_phi_77_pred;
                    _2740 = frontier_phi_77_pred_1;
                    _2738 = frontier_phi_77_pred_2;
                    _2736 = frontier_phi_77_pred_3;
                    _2734 = frontier_phi_77_pred_4;
                    _2732 = frontier_phi_77_pred_5;
                    uint _2898 = _2897 + 1u;
                    if (_2898 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2891 = _2732;
                        _2892 = _2734;
                        _2893 = _2736;
                        _2894 = _2738;
                        _2895 = _2740;
                        _2896 = _2742;
                        _2897 = _2898;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2736;
                frontier_phi_58_59_ladder_1 = _2742;
                frontier_phi_58_59_ladder_2 = _2740;
                frontier_phi_58_59_ladder_3 = _2738;
                frontier_phi_58_59_ladder_4 = _2734;
                frontier_phi_58_59_ladder_5 = _2732;
            }
            else
            {
                frontier_phi_58_59_ladder = _2614;
                frontier_phi_58_59_ladder_1 = _2620;
                frontier_phi_58_59_ladder_2 = _2618;
                frontier_phi_58_59_ladder_3 = _2616;
                frontier_phi_58_59_ladder_4 = _2612;
                frontier_phi_58_59_ladder_5 = _2610;
            }
            _2731 = frontier_phi_58_59_ladder_5;
            _2733 = frontier_phi_58_59_ladder_4;
            _2735 = frontier_phi_58_59_ladder;
            _2737 = frontier_phi_58_59_ladder_3;
            _2739 = frontier_phi_58_59_ladder_2;
            _2741 = frontier_phi_58_59_ladder_1;
        }
        float _2746 = isnan(1.0) ? _757 : (isnan(_757) ? 1.0 : min(_757, 1.0));
        _2522 = (_2746 * _2737) + _1974;
        _2524 = (_2746 * _2739) + _1976;
        _2526 = (_2746 * _2741) + _1978;
        _2528 = ((_2731 * 0.039999999105930328369140625) * _2746) + _2307;
        _2530 = ((_2733 * 0.039999999105930328369140625) * _2746) + _2309;
        _2532 = ((_2735 * 0.039999999105930328369140625) * _2746) + _2311;
    }
    else
    {
        _2522 = _1974;
        _2524 = _1976;
        _2526 = _1978;
        _2528 = _2307;
        _2530 = _2309;
        _2532 = _2311;
    }
    float _4494 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4505 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4516 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _2549 = ((isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2522 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _757))) + ((_2528 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1593)) * cbPerFrame._m0[3u].x);
    float _2550 = ((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2524 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _757))) + ((_2530 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1593)) * cbPerFrame._m0[3u].x);
    float _2551 = ((isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2526 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _757))) + ((_2532 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1593)) * cbPerFrame._m0[3u].x);
    uint _2552 = _234 + 6u;
    float _2560 = _694 / cbSceneParam._m0[86u].x;
    float _2561 = _695 / cbSceneParam._m0[86u].y;
    vec4 _2575 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2560, _2561, (log2((isnan(cbSceneParam._m0[77u].w) ? _615 : (isnan(_615) ? cbSceneParam._m0[77u].w : min(_615, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2577 = _2575.x;
    float _2578 = _2575.y;
    float _2579 = _2575.z;
    float _2580 = _2575.w;
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    if (_615 > cbSceneParam._m0[78u].w)
    {
        float _2635 = isnan(_615) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _615 : min(cbSceneParam._m0[80u].w, _615));
        float _2636 = _2635 / _615;
        float _2647 = _2636 * _667;
        float _2648 = _668 * _2636;
        float _2649 = (-0.0) - _2648;
        float _2651 = _2636 * _669;
        float _2653 = (cbSceneParam._m0[77u].w * _2649) / _2635;
        float _2654 = _2653 + cbSceneParam._m0[79u].w;
        float _2655 = cbSceneParam._m0[79u].w - _2648;
        float _2661 = sqrt(((_2647 * _2647) + (_2648 * _2648)) + (_2651 * _2651));
        float _2664 = (1.0 - (cbSceneParam._m0[77u].w / _2635)) * _2661;
        float _2669 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2671 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2848;
        if (abs((_2649 - _2653) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2848 = ((((_2654 > 0.0) ? exp2(_2669 * _2654) : (2.0 - exp2(_2671 * _2654))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2664;
        }
        else
        {
            float _2792 = 1.0 / cbSceneParam._m0[80u].x;
            float _2793 = isnan(_2655) ? _2654 : (isnan(_2654) ? _2655 : max(_2654, _2655));
            float _2794 = isnan(_2655) ? _2654 : (isnan(_2654) ? _2655 : min(_2654, _2655));
            float _2803 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : min(_2793, 0.0));
            float _2804 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : min(_2794, 0.0));
            _2848 = ((abs(_2661 / _2649) * cbSceneParam._m0[80u].y) * ((((_2803 - _2804) * 2.0) - ((exp2(_2669 * (isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0)))) - exp2(_2669 * (isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0))))) * _2792)) - ((exp2(_2671 * _2803) - exp2(_2671 * _2804)) * _2792))) + (_2664 * cbSceneParam._m0[80u].z);
        }
        vec4 _2850 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2560, _2561, 1.0), 0.0);
        float _2859 = exp2((_2848 * (-1.44269502162933349609375)) * (1.0 - _2850.w));
        float _2860 = log2(_2859);
        float _2876 = log2(_2580);
        _2673 = (exp2(_2876 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2860 * cbSceneParam._m0[78u].x)) * _2850.x) / cbSceneParam._m0[78u].x)) + _2577;
        _2675 = (exp2(_2876 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2860 * cbSceneParam._m0[78u].y)) * _2850.y) / cbSceneParam._m0[78u].y)) + _2578;
        _2677 = (exp2(_2876 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2860 * cbSceneParam._m0[78u].z)) * _2850.z) / cbSceneParam._m0[78u].z)) + _2579;
        _2679 = _2859 * _2580;
    }
    else
    {
        _2673 = _2577;
        _2675 = _2578;
        _2677 = _2579;
        _2679 = _2580;
    }
    bool _2886;
    vec4 _2689;
    vec4 _2711;
    float _2713;
    float _2717;
    float _2718;
    float _2719;
    float _2720;
    bool _2730;
    for (;;)
    {
        _2689 = cbMatDynParam._m0[0u];
        float _2691 = roundEven(_2689.y);
        bool _2692 = _2691 == 3.0;
        float _2693 = log2(_2679);
        float _2700 = exp2(_2693 * cbSceneParam._m0[78u].x) * _2549;
        float _2701 = exp2(_2693 * cbSceneParam._m0[78u].y) * _2550;
        float _2702 = exp2(_2693 * cbSceneParam._m0[78u].z) * _2551;
        float _2709 = _683 + (-0.5);
        _2711 = cbMtdParam._m0[1u];
        _2713 = _2711.y * _2709;
        float _2716 = (_2691 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2717 = _2716 * (_2692 ? _2700 : (_2700 + (cbSceneParam._m0[72u].w * _2673)));
        _2718 = _2716 * (_2692 ? _2701 : (_2701 + (cbSceneParam._m0[72u].w * _2675)));
        _2719 = _2716 * (_2692 ? _2702 : (_2702 + (cbSceneParam._m0[72u].w * _2677)));
        _2720 = _2709 * 0.999000012874603271484375;
        _2730 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2730)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2720) < 0.5)
            {
                _2886 = true;
                break;
            }
        }
        uint _2827 = _732 + uint(_2689.w);
        if ((cbInstanceData._m0[_2827].w < 1.0) && ((cbInstanceData._m0[_2827].w + _2720) < 0.5))
        {
            _2886 = true;
            break;
        }
        if ((_2713 + 1.0) < _2711.x)
        {
            _2886 = true;
            break;
        }
        _2886 = false;
        break;
    }
    float _3091;
    if (_2886)
    {
        discard_state = true;
        _3091 = 0.0;
    }
    else
    {
        _3091 = cbInstanceData._m0[_2552].w;
    }
    SV_Target.x = _2717;
    SV_Target.y = _2718;
    SV_Target.z = _2719;
    SV_Target.w = _3091;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2552].w;
    discard_exit();
}


