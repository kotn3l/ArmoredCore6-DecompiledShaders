#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1100;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _337 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _339 = _337.x;
    float _349 = dot(vec4(_339, _337.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _366 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_339 - _349) * cbMtdParam._m0[24u].x) + _349) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3431 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _367 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    float _374 = (_367 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _375 = (_367 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _376 = (_367 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _393 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _250) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _251) + cbTextureTilingScale._m0[3u].w));
    vec4 _413 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _415 = _413.x;
    float _425 = dot(vec4(_415, _413.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _439 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_415 - _425) * cbMtdParam._m0[24u].x) + _425) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3442 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _440 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _447 = (_440 * ((_393.x * cbMtdParam._m0[13u].x) - _374)) + _374;
    float _448 = (_440 * ((_393.y * cbMtdParam._m0[13u].y) - _375)) + _375;
    float _449 = (_440 * ((_393.z * cbMtdParam._m0[13u].z) - _376)) + _376;
    vec4 _462 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _479 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _481 = _479.x;
    float _482 = _479.y;
    float _483 = _479.z;
    float _490 = ((_462.x - _481) * _367) + _481;
    float _491 = ((_462.y - _482) * _367) + _482;
    float _492 = ((_462.z - _483) * _367) + _483;
    vec4 _504 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _250) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _251) + cbTextureTilingScale._m0[2u].w));
    float _517 = ((_504.z - _492) * _440) + _492;
    float _520 = ((((_504.x - _490) * _440) + _490) * 2.0) + (-1.0);
    float _522 = ((((_504.y - _491) * _440) + _491) * 2.0) + (-1.0);
    float _523 = dot(vec2(_520, _522), vec2(_520, _522));
    float _3453 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _528 = sqrt(1.0 - (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))));
    vec4 _542 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _554 = (((_542.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _520;
    float _555 = (((_542.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _522;
    float _559 = (cbMtdParam._m0[19u].w * (_542.z - _517)) + _517;
    float _564 = cbMtdParam._m0[22u].x + _542.w;
    float _567 = fma(_528, _217 * NORMAL.x, fma(_555, _224 * TANGENT.x, (_210 * _202) * _554));
    float _570 = fma(_528, _217 * NORMAL.y, fma(_555, _224 * TANGENT.y, (_210 * _203) * _554));
    float _573 = fma(_528, _217 * NORMAL.z, fma(_555, _224 * TANGENT.z, (_210 * _204) * _554));
    float _577 = inversesqrt(dot(vec3(_567, _570, _573), vec3(_567, _570, _573)));
    float _578 = _577 * _567;
    float _579 = _577 * _570;
    float _580 = _577 * _573;
    float _3464 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _581 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _3475 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3486 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3497 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3508 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _599 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _651 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _641);
    float _652 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _641);
    float _653 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _641);
    float _657 = inversesqrt(dot(vec3(_651, _652, _653), vec3(_651, _652, _653)));
    float _658 = _651 * _657;
    float _659 = _652 * _657;
    float _660 = _653 * _657;
    float _666 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _667 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _685 = fma(_580, cbSceneParam._m0[5u].z, fma(_579, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _578));
    float _688 = fma(_580, cbSceneParam._m0[6u].z, fma(_579, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _578));
    float _691 = fma(_580, cbSceneParam._m0[7u].z, fma(_579, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _578));
    uint _705 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _711 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) * cbInstanceData._m0[_705].x;
    float _712 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * cbInstanceData._m0[_705].y;
    float _713 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)))) * cbInstanceData._m0[_705].z;
    float _3519 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _3530 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    vec4 _725 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _666, cbSceneParam._m0[86u].y * _667));
    float _729 = ((isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * TEXCOORD_5.w) * _725.x;
    float _730 = dot(vec3(_578, _579, _580), vec3(_658, _659, _660));
    float _733 = _730 * 2.0;
    float _737 = (_733 * _578) - _658;
    float _738 = (_733 * _579) - _659;
    float _739 = (_733 * _580) - _660;
    float _743 = abs(dot(vec3(_658, _659, _660), vec3(_578, _579, _580)));
    float _3552 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _745 = sqrt(_581);
    float _758 = exp2((_745 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_745 * 3.0));
    float _790 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _794 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1099;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _824 = fma(_798, cbModelParam._m0[26u].z, fma(_794, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _790));
        float _828 = fma(_798, cbModelParam._m0[27u].z, fma(_794, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _790));
        float _832 = fma(_798, cbModelParam._m0[28u].z, fma(_794, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _790));
        float _857 = _790 + _578;
        float _858 = _794 + _579;
        float _859 = _798 + _580;
        float _869 = fma(_859, cbModelParam._m0[26u].z, fma(_858, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857)) - _824;
        float _870 = fma(_859, cbModelParam._m0[27u].z, fma(_858, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857)) - _828;
        float _871 = fma(_859, cbModelParam._m0[28u].z, fma(_858, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857)) - _832;
        float _875 = inversesqrt(dot(vec3(_869, _870, _871), vec3(_869, _870, _871)));
        float _888 = ((_875 * _869) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_824 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _889 = ((_875 * _870) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_828 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _890 = ((_875 * _871) / cbModelParam._m0[34u].z) + ((((((_832 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_888, _889, _890), 0.0);
        float _927 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_893.x + (-0.5));
        float _929 = _927 * (_893.y + (-0.5));
        float _930 = _927 * (_893.z + (-0.5));
        float _937 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_900.x + (-0.5));
        float _939 = _937 * (_900.y + (-0.5));
        float _940 = _937 * (_900.z + (-0.5));
        float _947 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_907.x + (-0.5));
        float _949 = _947 * (_907.y + (-0.5));
        float _950 = _947 * (_907.z + (-0.5));
        float _957 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_914.x + (-0.5));
        float _959 = _957 * (_914.y + (-0.5));
        float _960 = _957 * (_914.z + (-0.5));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = _928 * 0.5;
        float _965 = _938 * 0.5;
        float _966 = _948 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _981 = (dot(vec3(_578, _579, _580), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3578 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _991 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3589 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3600 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * (_993 + 1.0))) + _998) * _961;
        float _1008 = _929 * 0.5;
        float _1009 = _939 * 0.5;
        float _1010 = _949 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_578, _579, _580), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3611 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_962 + 9.9999997473787516355514526367188e-06);
        float _3622 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3633 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_1035 + 1.0))) + _1040) * _962;
        float _1050 = _930 * 0.5;
        float _1051 = _940 * 0.5;
        float _1052 = _950 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_578, _579, _580), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3666 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1077 + 1.0))) + _1082) * _963;
        _1099 = _930;
        _1101 = _929;
        _1102 = _928;
        _1103 = _940;
        _1104 = _939;
        _1105 = _938;
        _1106 = _950;
        _1107 = _949;
        _1108 = _948;
        _1109 = _963;
        _1110 = _962;
        _1111 = _961;
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
        _1113 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
    }
    else
    {
        _1099 = _1100;
        _1101 = _1100;
        _1102 = _1100;
        _1103 = _1100;
        _1104 = _1100;
        _1105 = _1100;
        _1106 = _1100;
        _1107 = _1100;
        _1108 = _1100;
        _1109 = _1100;
        _1110 = _1100;
        _1111 = _1100;
        _1112 = 0.0;
        _1113 = 0.0;
        _1114 = 0.0;
    }
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1138 = fma(_798, cbModelParam._m0[30u].z, fma(_794, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _790));
        float _1142 = fma(_798, cbModelParam._m0[31u].z, fma(_794, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _790));
        float _1146 = fma(_798, cbModelParam._m0[32u].z, fma(_794, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _790));
        float _1169 = _790 + _578;
        float _1170 = _794 + _579;
        float _1171 = _798 + _580;
        float _1181 = fma(_1171, cbModelParam._m0[30u].z, fma(_1170, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1169)) - _1138;
        float _1182 = fma(_1171, cbModelParam._m0[31u].z, fma(_1170, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1169)) - _1142;
        float _1183 = fma(_1171, cbModelParam._m0[32u].z, fma(_1170, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1169)) - _1146;
        float _1187 = inversesqrt(dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183)));
        float _1200 = ((_1187 * _1181) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1138 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1187 * _1182) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1142 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1187 * _1183) / cbModelParam._m0[35u].z) + ((((((_1146 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        float _1237 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1204.x + (-0.5));
        float _1239 = _1237 * (_1204.y + (-0.5));
        float _1240 = _1237 * (_1204.z + (-0.5));
        float _1247 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1211.x + (-0.5));
        float _1249 = _1247 * (_1211.y + (-0.5));
        float _1250 = _1247 * (_1211.z + (-0.5));
        float _1257 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1218.x + (-0.5));
        float _1259 = _1257 * (_1218.y + (-0.5));
        float _1260 = _1257 * (_1218.z + (-0.5));
        float _1267 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1225.x + (-0.5));
        float _1269 = _1267 * (_1225.y + (-0.5));
        float _1270 = _1267 * (_1225.z + (-0.5));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = _1238 * 0.5;
        float _1275 = _1248 * 0.5;
        float _1276 = _1258 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_578, _579, _580), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _3729 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_1301 + 1.0))) + _1306) * _1271;
        float _1316 = _1239 * 0.5;
        float _1317 = _1249 * 0.5;
        float _1318 = _1259 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_578, _579, _580), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _3740 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _3751 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _3762 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_1343 + 1.0))) + _1348) * _1272;
        float _1358 = _1240 * 0.5;
        float _1359 = _1250 * 0.5;
        float _1360 = _1260 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_578, _579, _580), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _3795 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1385 + 1.0))) + _1390) * _1273;
        _1407 = _1240;
        _1408 = _1239;
        _1409 = _1238;
        _1410 = _1250;
        _1411 = _1249;
        _1412 = _1248;
        _1413 = _1260;
        _1414 = _1259;
        _1415 = _1258;
        _1416 = _1273;
        _1417 = _1272;
        _1418 = _1271;
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1420 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
    }
    else
    {
        _1407 = _1100;
        _1408 = _1100;
        _1409 = _1100;
        _1410 = _1100;
        _1411 = _1100;
        _1412 = _1100;
        _1413 = _1100;
        _1414 = _1100;
        _1415 = _1100;
        _1416 = _1100;
        _1417 = _1100;
        _1418 = _1100;
        _1419 = 0.0;
        _1420 = 0.0;
        _1421 = 0.0;
    }
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1112)) + _1112;
    float _1432 = (cbModelParam._m0[1u].x * (_1420 - _1113)) + _1113;
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1114)) + _1114;
    float _1454 = fma(_1433, cbSceneParam._m0[89u].z, fma(_1432, cbSceneParam._m0[89u].y, _1431 * cbSceneParam._m0[89u].x));
    float _1457 = fma(_1433, cbSceneParam._m0[90u].z, fma(_1432, cbSceneParam._m0[90u].y, _1431 * cbSceneParam._m0[90u].x));
    float _1460 = fma(_1433, cbSceneParam._m0[91u].z, fma(_1432, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1431));
    float _1475 = _737 * 0.5;
    float _1476 = _738 * 0.5;
    float _1477 = _739 * 0.5;
    float _1478 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1481 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1408, _1411, _1414, _1417));
    float _1484 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1518;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1491 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1099, _1103, _1106, _1109));
        float _1495 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1101, _1104, _1107, _1110));
        float _1499 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1102, _1105, _1108, _1111));
        float _1506 = dot(vec4(cbModelParam._m0[39u]), vec4(_1475, _1476, _1477, 1.0));
        _1518 = dot(vec3(isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1506) ? 0.0 : (isnan(0.0) ? _1506 : max(0.0, _1506))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1518 = 1.0;
    }
    float _1529;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1520 = dot(vec4(cbModelParam._m0[40u]), vec4(_1475, _1476, _1477, 1.0));
        _1529 = dot(vec3(isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1520) ? 0.0 : (isnan(0.0) ? _1520 : max(0.0, _1520))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1529 = 1.0;
    }
    float _1533 = (_1529 * cbModelParam._m0[1u].x) + (_1518 * (1.0 - cbModelParam._m0[1u].x));
    float _1543 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _581);
    float _1544 = isnan(_1543) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1543 : min(cbModelParam._m0[25u].z, _1543));
    float _1626;
    float _1628;
    float _1630;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1593 = fma(_798, cbModelParam._m0[13u].z, fma(_794, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _790)) + cbModelParam._m0[13u].w;
        float _1597 = fma(_798, cbModelParam._m0[14u].z, fma(_794, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _790)) + cbModelParam._m0[14u].w;
        float _1601 = fma(_798, cbModelParam._m0[15u].z, fma(_794, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _790)) + cbModelParam._m0[15u].w;
        float _1604 = fma(_739, cbModelParam._m0[13u].z, fma(_738, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _737));
        float _1607 = fma(_739, cbModelParam._m0[14u].z, fma(_738, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _737));
        float _1610 = fma(_739, cbModelParam._m0[15u].z, fma(_738, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _737));
        float _1638;
        if (_1604 > 0.0)
        {
            _1638 = abs((1.0 - _1593) / _1604);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1593 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1638 = frontier_phi_14_12_ladder;
        }
        float _1861;
        if (_1607 > 0.0)
        {
            _1861 = abs((1.0 - _1597) / _1607);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1597 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1861 = frontier_phi_23_19_ladder;
        }
        float _2107;
        if (_1610 > 0.0)
        {
            _2107 = abs((1.0 - _1601) / _1610);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1601 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2107 = frontier_phi_35_30_ladder;
        }
        float _2109 = isnan(_1861) ? _1638 : (isnan(_1638) ? _1861 : min(_1638, _1861));
        float _2110 = isnan(_2107) ? _2109 : (isnan(_2109) ? _2107 : min(_2109, _2107));
        float _2114 = (_2110 * _1604) + _1593;
        float _2115 = (_2110 * _1607) + _1597;
        float _2116 = (_2110 * _1610) + _1601;
        float _2117 = _2110 * 9.9999997473787516355514526367188e-05;
        float _2119 = (-1.0) - _2117;
        float _2121 = _2117 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2116 > _2121) || ((_2116 < _2119) || ((_2115 > _2121) || ((_2115 < _2119) || ((_2114 < _2119) || (_2114 > _2121))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2240 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2116, cbModelParam._m0[9u].z, fma(_2115, cbModelParam._m0[9u].y, _2114 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2116, cbModelParam._m0[10u].z, fma(_2115, cbModelParam._m0[10u].y, _2114 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2116, cbModelParam._m0[11u].z, fma(_2115, cbModelParam._m0[11u].y, _2114 * cbModelParam._m0[11u].x))), _1544);
            frontier_phi_13_35_ladder = _2240.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2240.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2240.x * cbModelParam._m0[1u].y;
        }
        _1626 = frontier_phi_13_35_ladder_2;
        _1628 = frontier_phi_13_35_ladder_1;
        _1630 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1614 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_737, _738, _739), _1544);
        _1626 = _1614.x * cbModelParam._m0[1u].y;
        _1628 = _1614.y * cbModelParam._m0[1u].y;
        _1630 = _1614.z * cbModelParam._m0[1u].y;
    }
    float _1634 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _581);
    float _1635 = isnan(_1634) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1634 : min(cbModelParam._m0[25u].w, _1634));
    float _1726;
    float _1728;
    float _1730;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1690 = fma(_798, cbModelParam._m0[21u].z, fma(_794, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _790)) + cbModelParam._m0[21u].w;
        float _1694 = fma(_798, cbModelParam._m0[22u].z, fma(_794, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _790)) + cbModelParam._m0[22u].w;
        float _1698 = fma(_798, cbModelParam._m0[23u].z, fma(_794, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _790)) + cbModelParam._m0[23u].w;
        float _1701 = fma(_739, cbModelParam._m0[21u].z, fma(_738, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _737));
        float _1704 = fma(_739, cbModelParam._m0[22u].z, fma(_738, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _737));
        float _1707 = fma(_739, cbModelParam._m0[23u].z, fma(_738, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _737));
        float _1866;
        if (_1701 > 0.0)
        {
            _1866 = abs((1.0 - _1690) / _1701);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1690 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1866 = frontier_phi_25_21_ladder;
        }
        float _2134;
        if (_1704 > 0.0)
        {
            _2134 = abs((1.0 - _1694) / _1704);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1694 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2134 = frontier_phi_37_32_ladder;
        }
        float _2339;
        if (_1707 > 0.0)
        {
            _2339 = abs((1.0 - _1698) / _1707);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1698 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2339 = frontier_phi_46_43_ladder;
        }
        float _2341 = isnan(_2134) ? _1866 : (isnan(_1866) ? _2134 : min(_1866, _2134));
        float _2342 = isnan(_2339) ? _2341 : (isnan(_2341) ? _2339 : min(_2341, _2339));
        float _2346 = (_2342 * _1701) + _1690;
        float _2347 = (_2342 * _1704) + _1694;
        float _2348 = (_2342 * _1707) + _1698;
        float _2349 = _2342 * 9.9999997473787516355514526367188e-05;
        float _2350 = (-1.0) - _2349;
        float _2352 = _2349 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2348 > _2352) || ((_2348 < _2350) || ((_2347 > _2352) || ((_2347 < _2350) || ((_2346 < _2350) || (_2346 > _2352))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2547 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2348, cbModelParam._m0[17u].z, fma(_2347, cbModelParam._m0[17u].y, _2346 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2348, cbModelParam._m0[18u].z, fma(_2347, cbModelParam._m0[18u].y, _2346 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2348, cbModelParam._m0[19u].z, fma(_2347, cbModelParam._m0[19u].y, _2346 * cbModelParam._m0[19u].x))), _1635);
            frontier_phi_22_46_ladder = _2547.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2547.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2547.x * cbModelParam._m0[1u].z;
        }
        _1726 = frontier_phi_22_46_ladder_2;
        _1728 = frontier_phi_22_46_ladder_1;
        _1730 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1710 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_737, _738, _739), _1635);
        _1726 = _1710.x * cbModelParam._m0[1u].z;
        _1728 = _1710.y * cbModelParam._m0[1u].z;
        _1730 = _1710.z * cbModelParam._m0[1u].z;
    }
    float _1742 = ((((1.0 - _758) * ((_745 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_758 * _745)) * _729;
    float _1743 = _1742 * ((cbModelParam._m0[1u].w * (_1726 - _1626)) + _1626);
    float _1744 = _1742 * ((cbModelParam._m0[1u].w * (_1728 - _1628)) + _1628);
    float _1745 = _1742 * ((cbModelParam._m0[1u].w * (_1730 - _1630)) + _1630);
    float _1748 = fma(_1745, cbSceneParam._m0[89u].z, fma(_1744, cbSceneParam._m0[89u].y, _1743 * cbSceneParam._m0[89u].x));
    float _1751 = fma(_1745, cbSceneParam._m0[90u].z, fma(_1744, cbSceneParam._m0[90u].y, _1743 * cbSceneParam._m0[90u].x));
    float _1754 = fma(_1745, cbSceneParam._m0[91u].z, fma(_1744, cbSceneParam._m0[91u].y, _1743 * cbSceneParam._m0[91u].x));
    vec4 _1762 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_666, _667));
    float _1764 = _1762.w;
    float _1776 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1764);
    float _1777 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1764);
    float _1778 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1764);
    uvec4 _1782 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1784 = _1782.x * 14u;
    uint _1785 = _1784 + 13u;
    float _1792 = _729 + (-1.0);
    float _1797 = (cbLight._m0[_1785].x * _1792) + 1.0;
    float _1798 = (cbLight._m0[_1785].y * _1792) + 1.0;
    float _1799 = (cbLight._m0[_1785].z * _1792) + 1.0;
    float _1800 = (cbLight._m0[_1785].w * _1792) + 1.0;
    uint _1801 = _1784 + 5u;
    float _1807 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
    uint _1811 = _1784 + 4u;
    float _1820 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
    uint _1824 = _1784 | 1u;
    float _1835 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_578, _579, _580));
    float _1838 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_578, _579, _580));
    float _3931 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _3942 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1843 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 0.3183098733425140380859375;
    float _1845 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 0.3183098733425140380859375;
    float _1852 = ((cbLight._m0[_1801].x * _1807) * _1845) + (((cbLight._m0[_1811].x * _1776) * _1820) * _1843);
    float _1853 = ((_1807 * cbLight._m0[_1801].y) * _1845) + (((cbLight._m0[_1811].y * _1777) * _1820) * _1843);
    float _1854 = ((_1807 * cbLight._m0[_1801].z) * _1845) + (((cbLight._m0[_1811].z * _1778) * _1820) * _1843);
    uvec4 _1858 = floatBitsToUint(cbLight._m0[_1784 + 12u]);
    bool _1860 = _1858.x == 0u;
    float _1871;
    float _1873;
    float _1875;
    if (_1860)
    {
        _1871 = _1852;
        _1873 = _1853;
        _1875 = _1854;
    }
    else
    {
        uint _1879 = _1784 + 6u;
        float _1895 = (dot(vec3(cbLight._m0[_1784 + 2u].xyz), vec3(_578, _579, _580)) * 0.5) + 0.5;
        float _1896 = _1895 * _1895;
        float _3953 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1898 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _1871 = (((cbLight._m0[_1879].x * 0.3183098733425140380859375) * _1897) * _1898) + _1852;
        _1873 = (((cbLight._m0[_1879].y * 0.3183098733425140380859375) * _1897) * _1898) + _1853;
        _1875 = (((cbLight._m0[_1879].z * 0.3183098733425140380859375) * _1897) * _1898) + _1854;
    }
    bool _1878 = _1858.y == 0u;
    float _1916;
    float _1918;
    float _1920;
    if (_1878)
    {
        _1916 = _1871;
        _1918 = _1873;
        _1920 = _1875;
    }
    else
    {
        uint _2078 = _1784 + 7u;
        float _2094 = (dot(vec3(cbLight._m0[_1784 + 3u].xyz), vec3(_578, _579, _580)) * 0.5) + 0.5;
        float _2095 = _2094 * _2094;
        float _3969 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2096 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _2097 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _1916 = (((cbLight._m0[_2078].x * 0.3183098733425140380859375) * _2096) * _2097) + _1871;
        _1918 = (((cbLight._m0[_2078].y * 0.3183098733425140380859375) * _2096) * _2097) + _1873;
        _1920 = (((cbLight._m0[_2078].z * 0.3183098733425140380859375) * _2096) * _2097) + _1875;
    }
    uint _1923 = _1784 + 8u;
    float _1936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1784].w)) * _581) * 0.949999988079071044921875);
    float _1937 = _1936 * _1936;
    float _1938 = cbLight._m0[_1784].x + _658;
    float _1939 = cbLight._m0[_1784].y + _659;
    float _1940 = cbLight._m0[_1784].z + _660;
    float _1944 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
    float _1945 = _1944 * _1938;
    float _1946 = _1944 * _1939;
    float _1947 = _1944 * _1940;
    float _1948 = dot(vec3(_578, _579, _580), vec3(cbLight._m0[_1784].xyz));
    float _3985 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _3996 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _1952 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _1953 = dot(vec3(_578, _579, _580), vec3(_1945, _1946, _1947));
    float _4007 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _1957 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_1945, _1946, _1947));
    float _4018 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1961 = _1937 * _1937;
    float _1965 = ((_1956 * _1956) * (_1961 + (-1.0))) + 1.0;
    float _1976 = (exp2(log2(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1977 = 1.0 - _1937;
    float _1988 = (0.5 / (((_1952 * ((_1951 * _1977) + _1937)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _1977) + _1937) * _1951))) * _1951;
    float _4029 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1990 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1961 / ((_1965 * _1965) * 3.141590118408203125));
    uint _2004 = _1784 + 9u;
    float _2015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1824].w)) * _581) * 0.949999988079071044921875);
    float _2016 = _2015 * _2015;
    float _2017 = cbLight._m0[_1824].x + _658;
    float _2018 = cbLight._m0[_1824].y + _659;
    float _2019 = cbLight._m0[_1824].z + _660;
    float _2023 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
    float _2024 = _2023 * _2017;
    float _2025 = _2023 * _2018;
    float _2026 = _2023 * _2019;
    float _2027 = dot(vec3(_578, _579, _580), vec3(cbLight._m0[_1824].xyz));
    float _4040 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _2031 = dot(vec3(_578, _579, _580), vec3(_2024, _2025, _2026));
    float _4051 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2034 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _2035 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_2024, _2025, _2026));
    float _4062 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2039 = _2016 * _2016;
    float _2043 = ((_2034 * _2034) * (_2039 + (-1.0))) + 1.0;
    float _2052 = (exp2(log2(1.0 - (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2053 = 1.0 - _2016;
    float _2063 = (0.5 / (((_1952 * ((_2030 * _2053) + _2016)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _2053) + _2016) * _2030))) * _2030;
    float _4073 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2065 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_2039 / ((_2043 * _2043) * 3.141590118408203125));
    float _2075 = (((_2052 * cbLight._m0[_2004].x) * _2065) * _1807) + ((((cbLight._m0[_1923].x * _1776) * _1976) * _1990) * _1820);
    float _2076 = (((_2052 * cbLight._m0[_2004].y) * _2065) * _1807) + ((((cbLight._m0[_1923].y * _1777) * _1976) * _1990) * _1820);
    float _2077 = (((_2052 * cbLight._m0[_2004].z) * _2065) * _1807) + ((((cbLight._m0[_1923].z * _1778) * _1976) * _1990) * _1820);
    float _2139;
    float _2141;
    float _2143;
    if (_1860)
    {
        _2139 = _2075;
        _2141 = _2076;
        _2143 = _2077;
    }
    else
    {
        uint _2145 = _1784 + 2u;
        uint _2149 = _1784 + 10u;
        float _2163 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2145].w)) * _581) * 0.949999988079071044921875);
        float _2164 = _2163 * _2163;
        float _2165 = cbLight._m0[_2145].x + _658;
        float _2166 = cbLight._m0[_2145].y + _659;
        float _2167 = cbLight._m0[_2145].z + _660;
        float _2171 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
        float _2172 = _2171 * _2165;
        float _2173 = _2171 * _2166;
        float _2174 = _2171 * _2167;
        float _2175 = dot(vec3(_578, _579, _580), vec3(cbLight._m0[_2145].xyz));
        float _4084 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2178 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2179 = dot(vec3(_578, _579, _580), vec3(_2172, _2173, _2174));
        float _4095 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2182 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2183 = dot(vec3(cbLight._m0[_2145].xyz), vec3(_2172, _2173, _2174));
        float _4106 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2187 = _2164 * _2164;
        float _2191 = ((_2182 * _2182) * (_2187 + (-1.0))) + 1.0;
        float _2200 = (exp2(log2(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2201 = 1.0 - _2164;
        float _2211 = (0.5 / (((_1952 * ((_2178 * _2201) + _2164)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _2201) + _2164) * _2178))) * _2178;
        float _4117 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2213 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2187 / ((_2191 * _2191) * 3.141590118408203125));
        float _2214 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _2139 = (((_2200 * cbLight._m0[_2149].x) * _2213) * _2214) + _2075;
        _2141 = (((_2200 * cbLight._m0[_2149].y) * _2213) * _2214) + _2076;
        _2143 = (((_2200 * cbLight._m0[_2149].z) * _2213) * _2214) + _2077;
    }
    float _2249;
    float _2251;
    float _2253;
    if (_1878)
    {
        _2249 = _2139;
        _2251 = _2141;
        _2253 = _2143;
    }
    else
    {
        uint _2260 = _1784 + 3u;
        uint _2264 = _1784 + 11u;
        float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2260].w)) * _581) * 0.949999988079071044921875);
        float _2279 = _2278 * _2278;
        float _2280 = cbLight._m0[_2260].x + _658;
        float _2281 = cbLight._m0[_2260].y + _659;
        float _2282 = cbLight._m0[_2260].z + _660;
        float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
        float _2287 = _2286 * _2280;
        float _2288 = _2286 * _2281;
        float _2289 = _2286 * _2282;
        float _2290 = dot(vec3(_578, _579, _580), vec3(cbLight._m0[_2260].xyz));
        float _4133 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2293 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2294 = dot(vec3(_578, _579, _580), vec3(_2287, _2288, _2289));
        float _4144 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2297 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2298 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_2287, _2288, _2289));
        float _4155 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2302 = _2279 * _2279;
        float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
        float _2315 = (exp2(log2(1.0 - (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2316 = 1.0 - _2279;
        float _2326 = (0.5 / (((_1952 * ((_2293 * _2316) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _2316) + _2279) * _2293))) * _2293;
        float _4166 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2328 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
        float _2329 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _2249 = (((_2315 * cbLight._m0[_2264].x) * _2328) * _2329) + _2139;
        _2251 = (((_2315 * cbLight._m0[_2264].y) * _2328) * _2329) + _2141;
        _2253 = (((_2315 * cbLight._m0[_2264].z) * _2328) * _2329) + _2143;
    }
    float _2464;
    float _2466;
    float _2468;
    float _2470;
    float _2472;
    float _2474;
    if (_1782.y == 0u)
    {
        float _2404 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2405 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2404;
        float _2406 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2404;
        float _2407 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2404;
        uvec4 _2419 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2420 = _2419.x;
        uint _2431 = uint((float(_2419.y) * floor(float(uint(cbSceneParam._m0[85u].y * _667) / _2420))) + floor(float(uint(cbSceneParam._m0[85u].x * _666) / _2420)));
        float _2441 = (log2(_2407 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2442 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        uint _2445 = uint(isnan(14.0) ? _2442 : (isnan(_2442) ? 14.0 : min(_2442, 14.0)));
        uvec4 _2450 = texelFetch(g_lightClusterGridBuffer, int(((_2445 << 2u) + (_2431 << 6u)) >> 2u));
        uint _2451 = _2450.x;
        uint _2452 = _2419.z;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        if (((((1u << ((_2452 >> 4u) & 15u)) + 4294967295u) & _2451) == 0u) || ((_2452 & 240u) == 0u))
        {
            _2552 = 0.0;
            _2554 = 0.0;
            _2556 = 0.0;
            _2558 = 0.0;
            _2560 = 0.0;
            _2562 = 0.0;
        }
        else
        {
            float _2553;
            float _2555;
            float _2557;
            float _2559;
            float _2561;
            float _2563;
            float _2697 = 0.0;
            float _2698 = 0.0;
            float _2699 = 0.0;
            float _2700 = 0.0;
            float _2701 = 0.0;
            float _2702 = 0.0;
            uint _2703 = 0u;
            uint _2712;
            bool _2713;
            for (;;)
            {
                _2712 = texelFetch(g_lightClassification, int((((_2445 << 5u) + (_2431 << 9u)) + (_2703 << 2u)) >> 2u)).x;
                _2713 = _2712 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2713)
                {
                    frontier_phi_61_pred = _2697;
                    frontier_phi_61_pred_1 = _2702;
                    frontier_phi_61_pred_2 = _2701;
                    frontier_phi_61_pred_3 = _2700;
                    frontier_phi_61_pred_4 = _2699;
                    frontier_phi_61_pred_5 = _2698;
                }
                else
                {
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    uint _2827;
                    _2821 = _2697;
                    _2822 = _2698;
                    _2823 = _2699;
                    _2824 = _2700;
                    _2825 = _2701;
                    _2826 = _2702;
                    _2827 = _2712;
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    for (;;)
                    {
                        uint _2831 = uint(findLSB(_2827)) + (_2703 << 5u);
                        uint _2828 = (_2827 + 4294967295u) & _2827;
                        uint _2833 = _2831 * 48u;
                        vec4 _2847 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2833)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 3u)).x));
                        uint _2853 = (_2831 * 48u) + 4u;
                        vec4 _2866 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2853)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 3u)).x));
                        uint _2872 = (_2831 * 48u) + 8u;
                        vec3 _2883 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2872)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 2u)).x));
                        float _2887 = _2847.x - _2405;
                        float _2888 = _2847.y - _2406;
                        float _2889 = _2847.z - _2407;
                        float _2890 = dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889));
                        float _2893 = inversesqrt(_2890);
                        float _2894 = _2893 * _2887;
                        float _2895 = _2893 * _2888;
                        float _2896 = _2893 * _2889;
                        float _2897 = dot(vec3(_685, _688, _691), vec3(_2894, _2895, _2896));
                        float _2902 = 1.0 - (_2890 * _2847.w);
                        float _4192 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                        float _2903 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                        float _2904 = sqrt(_2890) * _2866.w;
                        float _2907 = 1.39999997615814208984375 / (_2904 + 1.39999997615814208984375);
                        float _2908 = _2907 * _2907;
                        float _2911 = ((1.0 - _2908) * _2897) + _2908;
                        float _2914 = _2904 * _2904;
                        float _2918 = ((isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0))) * _2903) / ((_2914 * 0.699999988079071044921875) + 1.0);
                        float _2922 = (-0.0) - _2405;
                        float _2923 = (-0.0) - _2406;
                        float _2924 = (-0.0) - _2407;
                        float _2928 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
                        float _2929 = _2928 * _2922;
                        float _2930 = _2928 * _2923;
                        float _2931 = _2928 * _2924;
                        float _2939 = exp2(log2(1.0 / ((_2914 * 3.5) + 5.0)) * 0.25);
                        float _2940 = 1.0 - _745;
                        float _2947 = sqrt(1.0 - ((1.0 - (_2940 * _2940)) * (1.0 - (_2939 * _2939))));
                        float _2948 = _2947 * _2947;
                        float _2949 = _2948 * _2948;
                        float _2950 = _2929 + _2894;
                        float _2951 = _2930 + _2895;
                        float _2952 = _2931 + _2896;
                        float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
                        float _2960 = dot(vec3(_685, _688, _691), vec3(_2929, _2930, _2931));
                        float _4208 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2963 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2964 = dot(vec3(_685, _688, _691), vec3(_2956 * _2950, _2956 * _2951, _2956 * _2952));
                        float _4219 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2967 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                        float _2971 = ((_2967 * _2967) * (_2949 + (-1.0))) + 1.0;
                        float _2972 = _2907 * _2948;
                        float _2973 = _2972 * _2972;
                        float _2976 = ((1.0 - _2973) * _2897) + _2973;
                        float _4230 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2977 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2978 = 1.0 - _2948;
                        float _2988 = (0.5 / (((_2977 * ((_2963 * _2978) + _2948)) + 9.9999999392252902907785028219223e-09) + (((_2977 * _2978) + _2948) * _2963))) * _2977;
                        float _4241 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2999 = (((_2949 * 3.1415927410125732421875) * (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) / ((_2971 * _2971) * ((_2914 * 2.1991131305694580078125) + 3.141590118408203125))) * _2903;
                        _2756 = (_2918 * _2866.x) + _2824;
                        _2757 = (_2918 * _2866.y) + _2825;
                        _2758 = (_2918 * _2866.z) + _2826;
                        _2753 = (_2999 * _2883.x) + _2821;
                        _2754 = (_2999 * _2883.y) + _2822;
                        _2755 = (_2999 * _2883.z) + _2823;
                        if (_2828 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2821 = _2753;
                            _2822 = _2754;
                            _2823 = _2755;
                            _2824 = _2756;
                            _2825 = _2757;
                            _2826 = _2758;
                            _2827 = _2828;
                        }
                    }
                    frontier_phi_61_pred = _2753;
                    frontier_phi_61_pred_1 = _2758;
                    frontier_phi_61_pred_2 = _2757;
                    frontier_phi_61_pred_3 = _2756;
                    frontier_phi_61_pred_4 = _2755;
                    frontier_phi_61_pred_5 = _2754;
                }
                _2553 = frontier_phi_61_pred;
                _2563 = frontier_phi_61_pred_1;
                _2561 = frontier_phi_61_pred_2;
                _2559 = frontier_phi_61_pred_3;
                _2557 = frontier_phi_61_pred_4;
                _2555 = frontier_phi_61_pred_5;
                uint _2704 = _2703 + 1u;
                if (_2704 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2697 = _2553;
                    _2698 = _2555;
                    _2699 = _2557;
                    _2700 = _2559;
                    _2701 = _2561;
                    _2702 = _2563;
                    _2703 = _2704;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2552 = _2553;
            _2554 = _2555;
            _2556 = _2557;
            _2558 = _2559;
            _2560 = _2561;
            _2562 = _2563;
        }
        uvec4 _2566 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2567 = _2566.z;
        uint _2569 = (_2567 >> 8u) & 15u;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        if (((4294967295u << _2569) & _2451) == 0u)
        {
            _2665 = _2552;
            _2667 = _2554;
            _2669 = _2556;
            _2671 = _2558;
            _2673 = _2560;
            _2675 = _2562;
        }
        else
        {
            float _2690 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
            float _2691 = _2690 * _2405;
            float _2692 = _2690 * _2406;
            float _2693 = _2690 * _2407;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2569 < ((_2567 >> 12u) & 15u))
            {
                float _2666;
                float _2668;
                float _2670;
                float _2672;
                float _2674;
                float _2676;
                float _2804 = _2552;
                float _2805 = _2554;
                float _2806 = _2556;
                float _2807 = _2558;
                float _2808 = _2560;
                float _2809 = _2562;
                uint _2810 = _2569;
                uint _2819;
                bool _2820;
                for (;;)
                {
                    _2819 = texelFetch(g_lightClassification, int((((_2445 << 5u) + (_2431 << 9u)) + (_2810 << 2u)) >> 2u)).x;
                    _2820 = _2819 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2820)
                    {
                        frontier_phi_67_pred = _2807;
                        frontier_phi_67_pred_1 = _2808;
                        frontier_phi_67_pred_2 = _2809;
                        frontier_phi_67_pred_3 = _2806;
                        frontier_phi_67_pred_4 = _2805;
                        frontier_phi_67_pred_5 = _2804;
                    }
                    else
                    {
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3017 = _2804;
                        float _3018 = _2805;
                        float _3019 = _2806;
                        float _3020 = _2807;
                        float _3021 = _2808;
                        float _3022 = _2809;
                        uint _3023 = _2819;
                        uint _3024;
                        vec4 _3049;
                        float _3050;
                        vec4 _3065;
                        vec3 _3077;
                        vec4 _3092;
                        vec4 _3107;
                        float _3153;
                        bool _3154;
                        for (;;)
                        {
                            uint _3034 = ((_2810 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3023));
                            _3024 = (_3023 + 4294967295u) & _3023;
                            uint _3036 = _3034 * 40u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            _3050 = _3049.w;
                            uint _3052 = (_3034 * 40u) + 4u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3067 = (_3034 * 40u) + 8u;
                            _3077 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x));
                            uint _3079 = (_3034 * 40u) + 16u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3094 = (_3034 * 40u) + 20u;
                            _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            uint _3109 = (_3034 * 40u) + 24u;
                            vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3128 = (_3034 * 40u) + 28u;
                            vec4 _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            _3153 = fma(_2407, _3141.z, fma(_2406, _3141.y, _3141.x * _2405)) + _3141.w;
                            _3154 = !((fma(_2407, _3122.z, fma(_2406, _3122.y, _3122.x * _2405)) + _3122.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3154)
                            {
                                float _3181 = _3049.x - _2405;
                                float _3182 = _3049.y - _2406;
                                float _3183 = _3049.z - _2407;
                                float _3184 = dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183));
                                float _3187 = inversesqrt(_3184);
                                float _3188 = _3187 * _3181;
                                float _3189 = _3187 * _3182;
                                float _3190 = _3187 * _3183;
                                float _3194 = 1.0 - (_3184 / (_3050 * _3050));
                                float _4252 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3195 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3199 = sqrt(_3184) * _3065.w;
                                float _3201 = 1.39999997615814208984375 / (_3199 + 1.39999997615814208984375);
                                float _3202 = _3201 * _3201;
                                float _3205 = ((1.0 - _3202) * dot(vec3(_3188, _3189, _3190), vec3(_685, _688, _691))) + _3202;
                                float _3208 = _3199 * _3199;
                                float _3212 = (fma(_2407, _3092.z, fma(_2406, _3092.y, _3092.x * _2405)) + _3092.w) / _3153;
                                float _3213 = (fma(_2407, _3107.z, fma(_2406, _3107.y, _3107.x * _2405)) + _3107.w) / _3153;
                                float _3217 = 1.0 - dot(vec2(_3212, _3213), vec2(_3212, _3213));
                                float _4268 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3218 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3219 = _3218 * (((isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0))) * _3195) / ((_3208 * 0.699999988079071044921875) + 1.0));
                                float _3231 = exp2(log2(1.0 / ((_3208 * 3.5) + 5.0)) * 0.25);
                                float _3232 = 1.0 - _745;
                                float _3239 = sqrt(1.0 - ((1.0 - (_3232 * _3232)) * (1.0 - (_3231 * _3231))));
                                float _3240 = _3239 * _3239;
                                float _3241 = _3240 * _3240;
                                float _3242 = _3188 - _2691;
                                float _3243 = _3189 - _2692;
                                float _3244 = _3190 - _2693;
                                float _3248 = inversesqrt(dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244)));
                                float _3252 = dot(vec3(_685, _688, _691), vec3((-0.0) - _2691, (-0.0) - _2692, (-0.0) - _2693));
                                float _4279 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3255 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3256 = dot(vec3(_685, _688, _691), vec3(_3248 * _3242, _3248 * _3243, _3248 * _3244));
                                float _4290 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3259 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3263 = ((_3259 * _3259) * (_3241 + (-1.0))) + 1.0;
                                float _3264 = _3201 * _3240;
                                float _3265 = _3264 * _3264;
                                float _3271 = ((1.0 - _3265) * dot(vec3(_685, _688, _691), vec3(_3188, _3189, _3190))) + _3265;
                                float _4301 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3272 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3273 = 1.0 - _3240;
                                float _3283 = (0.5 / (((_3272 * ((_3255 * _3273) + _3240)) + 9.9999999392252902907785028219223e-09) + (((_3272 * _3273) + _3240) * _3255))) * _3272;
                                float _4312 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3293 = (_3218 * _3195) * (((_3241 * 3.1415927410125732421875) * (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) / ((_3263 * _3263) * ((_3208 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3293 * _3077.x;
                                frontier_phi_73_pred_1 = _3293 * _3077.y;
                                frontier_phi_73_pred_2 = _3219 * _3065.z;
                                frontier_phi_73_pred_3 = _3219 * _3065.y;
                                frontier_phi_73_pred_4 = _3219 * _3065.x;
                                frontier_phi_73_pred_5 = _3293 * _3077.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3297 = frontier_phi_73_pred;
                            _3298 = frontier_phi_73_pred_1;
                            _3302 = frontier_phi_73_pred_2;
                            _3301 = frontier_phi_73_pred_3;
                            _3300 = frontier_phi_73_pred_4;
                            _3299 = frontier_phi_73_pred_5;
                            _3007 = _3300 + _3020;
                            _3008 = _3301 + _3021;
                            _3009 = _3302 + _3022;
                            _3004 = _3297 + _3017;
                            _3005 = _3298 + _3018;
                            _3006 = _3299 + _3019;
                            if (_3024 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3024;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3007;
                        frontier_phi_67_pred_1 = _3008;
                        frontier_phi_67_pred_2 = _3009;
                        frontier_phi_67_pred_3 = _3006;
                        frontier_phi_67_pred_4 = _3005;
                        frontier_phi_67_pred_5 = _3004;
                    }
                    _2672 = frontier_phi_67_pred;
                    _2674 = frontier_phi_67_pred_1;
                    _2676 = frontier_phi_67_pred_2;
                    _2670 = frontier_phi_67_pred_3;
                    _2668 = frontier_phi_67_pred_4;
                    _2666 = frontier_phi_67_pred_5;
                    uint _2811 = _2810 + 1u;
                    if (_2811 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2804 = _2666;
                        _2805 = _2668;
                        _2806 = _2670;
                        _2807 = _2672;
                        _2808 = _2674;
                        _2809 = _2676;
                        _2810 = _2811;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2674;
                frontier_phi_55_56_ladder_1 = _2676;
                frontier_phi_55_56_ladder_2 = _2672;
                frontier_phi_55_56_ladder_3 = _2670;
                frontier_phi_55_56_ladder_4 = _2668;
                frontier_phi_55_56_ladder_5 = _2666;
            }
            else
            {
                frontier_phi_55_56_ladder = _2560;
                frontier_phi_55_56_ladder_1 = _2562;
                frontier_phi_55_56_ladder_2 = _2558;
                frontier_phi_55_56_ladder_3 = _2556;
                frontier_phi_55_56_ladder_4 = _2554;
                frontier_phi_55_56_ladder_5 = _2552;
            }
            _2665 = frontier_phi_55_56_ladder_5;
            _2667 = frontier_phi_55_56_ladder_4;
            _2669 = frontier_phi_55_56_ladder_3;
            _2671 = frontier_phi_55_56_ladder_2;
            _2673 = frontier_phi_55_56_ladder;
            _2675 = frontier_phi_55_56_ladder_1;
        }
        float _2680 = isnan(1.0) ? _729 : (isnan(_729) ? 1.0 : min(_729, 1.0));
        _2464 = (_2680 * _2671) + _1916;
        _2466 = (_2680 * _2673) + _1918;
        _2468 = (_2680 * _2675) + _1920;
        _2470 = ((_2665 * 0.039999999105930328369140625) * _2680) + _2249;
        _2472 = ((_2667 * 0.039999999105930328369140625) * _2680) + _2251;
        _2474 = ((_2669 * 0.039999999105930328369140625) * _2680) + _2253;
    }
    else
    {
        _2464 = _1916;
        _2466 = _1918;
        _2468 = _1920;
        _2470 = _2249;
        _2472 = _2251;
        _2474 = _2253;
    }
    float _4328 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4339 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _4350 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    uint _2494 = _230 + 6u;
    float _2502 = _666 / cbSceneParam._m0[86u].x;
    float _2503 = _667 / cbSceneParam._m0[86u].y;
    vec4 _2517 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2502, _2503, (log2((isnan(cbSceneParam._m0[77u].w) ? _599 : (isnan(_599) ? cbSceneParam._m0[77u].w : min(_599, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2519 = _2517.x;
    float _2520 = _2517.y;
    float _2521 = _2517.z;
    float _2522 = _2517.w;
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    if (_599 > cbSceneParam._m0[78u].w)
    {
        float _2577 = isnan(_599) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _599 : min(cbSceneParam._m0[80u].w, _599));
        float _2578 = _2577 / _599;
        float _2589 = _2578 * _651;
        float _2590 = _652 * _2578;
        float _2591 = (-0.0) - _2590;
        float _2593 = _2578 * _653;
        float _2595 = (cbSceneParam._m0[77u].w * _2591) / _2577;
        float _2596 = _2595 + cbSceneParam._m0[79u].w;
        float _2597 = cbSceneParam._m0[79u].w - _2590;
        float _2603 = sqrt(((_2589 * _2589) + (_2590 * _2590)) + (_2593 * _2593));
        float _2606 = (1.0 - (cbSceneParam._m0[77u].w / _2577)) * _2603;
        float _2611 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2613 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2766;
        if (abs((_2591 - _2595) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2766 = ((((_2596 > 0.0) ? exp2(_2611 * _2596) : (2.0 - exp2(_2613 * _2596))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2606;
        }
        else
        {
            float _2726 = 1.0 / cbSceneParam._m0[80u].x;
            float _2727 = isnan(_2597) ? _2596 : (isnan(_2596) ? _2597 : max(_2596, _2597));
            float _2728 = isnan(_2597) ? _2596 : (isnan(_2596) ? _2597 : min(_2596, _2597));
            float _2737 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : min(_2727, 0.0));
            float _2738 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : min(_2728, 0.0));
            _2766 = ((abs(_2603 / _2591) * cbSceneParam._m0[80u].y) * ((((_2737 - _2738) * 2.0) - ((exp2(_2611 * (isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0)))) - exp2(_2611 * (isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0))))) * _2726)) - ((exp2(_2613 * _2737) - exp2(_2613 * _2738)) * _2726))) + (_2606 * cbSceneParam._m0[80u].z);
        }
        vec4 _2768 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2502, _2503, 1.0), 0.0);
        float _2777 = exp2((_2766 * (-1.44269502162933349609375)) * (1.0 - _2768.w));
        float _2778 = log2(_2777);
        float _2794 = log2(_2522);
        _2615 = (exp2(_2794 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2778 * cbSceneParam._m0[78u].x)) * _2768.x) / cbSceneParam._m0[78u].x)) + _2519;
        _2617 = (exp2(_2794 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2778 * cbSceneParam._m0[78u].y)) * _2768.y) / cbSceneParam._m0[78u].y)) + _2520;
        _2619 = (exp2(_2794 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2778 * cbSceneParam._m0[78u].z)) * _2768.z) / cbSceneParam._m0[78u].z)) + _2521;
        _2621 = _2777 * _2522;
    }
    else
    {
        _2615 = _2519;
        _2617 = _2520;
        _2619 = _2521;
        _2621 = _2522;
    }
    float _2633 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2634 = _2633 == 3.0;
    float _2635 = log2(_2621);
    float _2642 = exp2(_2635 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2464 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _729))) + ((_2470 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1533)) * cbPerFrame._m0[3u].x));
    float _2643 = exp2(_2635 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2466 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _729))) + ((_2472 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1533)) * cbPerFrame._m0[3u].x));
    float _2644 = exp2(_2635 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2468 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _729))) + ((_2474 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _1533)) * cbPerFrame._m0[3u].x));
    float _2653 = (_2633 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2653 * (_2634 ? _2642 : (_2642 + (cbSceneParam._m0[72u].w * _2615)));
    SV_Target.y = _2653 * (_2634 ? _2643 : (_2643 + (cbSceneParam._m0[72u].w * _2617)));
    SV_Target.z = _2653 * (_2634 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2619)));
    SV_Target.w = cbInstanceData._m0[_2494].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2494].w;
}


