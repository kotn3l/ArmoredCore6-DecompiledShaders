#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _938;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _220 = uint(roundEven(NORMAL.w)) * 13u;
    uint _226 = _220 + 1u;
    uint _230 = _220 + 2u;
    float _239 = sqrt(((cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x) + (cbInstanceData._m0[_220].x * cbInstanceData._m0[_220].x)) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x));
    float _240 = _239 * TEXCOORD.z;
    float _241 = _239 * TEXCOORD.w;
    vec4 _260 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _266 = _260.x * cbMtdParam._m0[9u].x;
    float _267 = _260.y * cbMtdParam._m0[9u].y;
    float _268 = _260.z * cbMtdParam._m0[9u].z;
    vec4 _286 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _290 = _286.z;
    float _295 = (_286.x * 2.0) + (-1.0);
    float _297 = (_286.y * 2.0) + (-1.0);
    float _298 = dot(vec2(_295, _297), vec2(_295, _297));
    float _3273 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _304 = sqrt(1.0 - (isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0))));
    vec4 _321 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _240) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _241) + cbTextureTilingScale._m0[11u].w));
    float _323 = _321.x;
    float _324 = 1.0 - _323;
    float _340 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_323 - _324) * cbMtdParam._m0[24u].z) + _324) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3284 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _341 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
    float _348 = (_341 * (cbMtdParam._m0[17u].x - _266)) + _266;
    float _349 = (_341 * (cbMtdParam._m0[17u].y - _267)) + _267;
    float _350 = (_341 * (cbMtdParam._m0[17u].z - _268)) + _268;
    vec4 _363 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _240) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _241) + cbTextureTilingScale._m0[15u].w));
    float _370 = (_363.x * 2.0) + (-1.0);
    float _371 = (_363.y * 2.0) + (-1.0);
    float _372 = dot(vec2(_370, _371), vec2(_370, _371));
    float _3295 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _380 = (_341 * (_363.z - _290)) + _290;
    float _392 = (((_370 - _295) + (cbMtdParam._m0[21u].x * _295)) * _341) + _295;
    float _393 = (((_371 - _297) + (cbMtdParam._m0[21u].x * _297)) * _341) + _297;
    float _394 = (_341 * (sqrt(1.0 - (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) - _304)) + _304;
    float _399 = cbMtdParam._m0[22u].x + _286.w;
    float _402 = fma(_394, _207 * NORMAL.x, fma(_393, _214 * TANGENT.x, (_200 * _192) * _392));
    float _405 = fma(_394, _207 * NORMAL.y, fma(_393, _214 * TANGENT.y, (_200 * _193) * _392));
    float _408 = fma(_394, _207 * NORMAL.z, fma(_393, _214 * TANGENT.z, (_200 * _194) * _392));
    float _412 = inversesqrt(dot(vec3(_402, _405, _408), vec3(_402, _405, _408)));
    float _413 = _412 * _402;
    float _414 = _412 * _405;
    float _415 = _412 * _408;
    float _3306 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _416 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
    float _3317 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _3328 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _3339 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _3350 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _434 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _475 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _485 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _475);
    float _486 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _475);
    float _487 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _475);
    float _491 = inversesqrt(dot(vec3(_485, _486, _487), vec3(_485, _486, _487)));
    float _492 = _485 * _491;
    float _493 = _486 * _491;
    float _494 = _487 * _491;
    float _500 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _501 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _522 = fma(_415, cbSceneParam._m0[5u].z, fma(_414, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _413));
    float _525 = fma(_415, cbSceneParam._m0[6u].z, fma(_414, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _413));
    float _528 = fma(_415, cbSceneParam._m0[7u].z, fma(_414, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _413));
    uint _542 = (_220 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _548 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0)))) * cbInstanceData._m0[_542].x;
    float _549 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0)))) * cbInstanceData._m0[_542].y;
    float _550 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0)))) * cbInstanceData._m0[_542].z;
    float _3361 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _3372 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _3383 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _553 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
    vec4 _562 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _500, cbSceneParam._m0[86u].y * _501));
    float _566 = ((isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0))) * TEXCOORD_5.w) * _562.x;
    float _567 = dot(vec3(_413, _414, _415), vec3(_492, _493, _494));
    float _570 = _567 * 2.0;
    float _574 = (_570 * _413) - _492;
    float _575 = (_570 * _414) - _493;
    float _576 = (_570 * _415) - _494;
    float _580 = abs(dot(vec3(_492, _493, _494), vec3(_413, _414, _415)));
    float _3394 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _582 = sqrt(_416);
    float _595 = exp2((_582 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_582 * 3.0));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _631 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _937;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _662 = fma(_635, cbModelParam._m0[26u].z, fma(_631, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _627));
        float _666 = fma(_635, cbModelParam._m0[27u].z, fma(_631, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _627));
        float _670 = fma(_635, cbModelParam._m0[28u].z, fma(_631, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _627));
        float _695 = _627 + _413;
        float _696 = _631 + _414;
        float _697 = _635 + _415;
        float _707 = fma(_697, cbModelParam._m0[26u].z, fma(_696, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _695)) - _662;
        float _708 = fma(_697, cbModelParam._m0[27u].z, fma(_696, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _695)) - _666;
        float _709 = fma(_697, cbModelParam._m0[28u].z, fma(_696, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _695)) - _670;
        float _713 = inversesqrt(dot(vec3(_707, _708, _709), vec3(_707, _708, _709)));
        float _726 = ((_713 * _707) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_662 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _727 = ((_713 * _708) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_666 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _728 = ((_713 * _709) / cbModelParam._m0[34u].z) + ((((((_670 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_726, _727, _728), 0.0);
        float _765 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_731.x + (-0.5));
        float _767 = _765 * (_731.y + (-0.5));
        float _768 = _765 * (_731.z + (-0.5));
        float _775 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_738.x + (-0.5));
        float _777 = _775 * (_738.y + (-0.5));
        float _778 = _775 * (_738.z + (-0.5));
        float _785 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_745.x + (-0.5));
        float _787 = _785 * (_745.y + (-0.5));
        float _788 = _785 * (_745.z + (-0.5));
        float _795 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _796 = _795 * (_752.x + (-0.5));
        float _797 = _795 * (_752.y + (-0.5));
        float _798 = _795 * (_752.z + (-0.5));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _801 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _802 = _766 * 0.5;
        float _803 = _776 * 0.5;
        float _804 = _786 * 0.5;
        float _805 = dot(vec3(_802, _803, _804), vec3(_802, _803, _804));
        float _810 = (_805 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_805);
        float _819 = (dot(vec3(_413, _414, _415), vec3(_810 * _802, _810 * _803, _810 * _804)) + 1.0) * 0.5;
        float _3420 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _829 = sqrt(((_803 * _803) + (_802 * _802)) + (_804 * _804)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3431 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3442 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) * (_831 + 1.0))) + _836) * _799;
        float _846 = _767 * 0.5;
        float _847 = _777 * 0.5;
        float _848 = _787 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _862 = (dot(vec3(_413, _414, _415), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3453 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _871 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_800 + 9.9999997473787516355514526367188e-06);
        float _3464 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _873 = _872 * 2.0;
        float _877 = (1.0 - _872) / (_872 + 1.0);
        float _3475 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _887 = ((((1.0 - _878) * (_873 + 2.0)) * exp2(log2(isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * (_873 + 1.0))) + _878) * _800;
        float _888 = _768 * 0.5;
        float _889 = _778 * 0.5;
        float _890 = _788 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _904 = (dot(vec3(_413, _414, _415), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3486 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _913 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_801 + 9.9999997473787516355514526367188e-06);
        float _3497 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3508 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * (_915 + 1.0))) + _920) * _801;
        _937 = _768;
        _939 = _767;
        _940 = _766;
        _941 = _778;
        _942 = _777;
        _943 = _776;
        _944 = _788;
        _945 = _787;
        _946 = _786;
        _947 = _801;
        _948 = _800;
        _949 = _799;
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
        _951 = cbModelParam._m0[36u].z * (isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)));
        _952 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
    }
    else
    {
        _937 = _938;
        _939 = _938;
        _940 = _938;
        _941 = _938;
        _942 = _938;
        _943 = _938;
        _944 = _938;
        _945 = _938;
        _946 = _938;
        _947 = _938;
        _948 = _938;
        _949 = _938;
        _950 = 0.0;
        _951 = 0.0;
        _952 = 0.0;
    }
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _977 = fma(_635, cbModelParam._m0[30u].z, fma(_631, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _627));
        float _981 = fma(_635, cbModelParam._m0[31u].z, fma(_631, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _627));
        float _985 = fma(_635, cbModelParam._m0[32u].z, fma(_631, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _627));
        float _1008 = _627 + _413;
        float _1009 = _631 + _414;
        float _1010 = _635 + _415;
        float _1020 = fma(_1010, cbModelParam._m0[30u].z, fma(_1009, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1008)) - _977;
        float _1021 = fma(_1010, cbModelParam._m0[31u].z, fma(_1009, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1008)) - _981;
        float _1022 = fma(_1010, cbModelParam._m0[32u].z, fma(_1009, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1008)) - _985;
        float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
        float _1039 = ((_1026 * _1020) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_977 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1026 * _1021) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_981 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1026 * _1022) / cbModelParam._m0[35u].z) + ((((((_985 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        float _1076 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1043.x + (-0.5));
        float _1078 = _1076 * (_1043.y + (-0.5));
        float _1079 = _1076 * (_1043.z + (-0.5));
        float _1086 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1050.x + (-0.5));
        float _1088 = _1086 * (_1050.y + (-0.5));
        float _1089 = _1086 * (_1050.z + (-0.5));
        float _1096 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1057.x + (-0.5));
        float _1098 = _1096 * (_1057.y + (-0.5));
        float _1099 = _1096 * (_1057.z + (-0.5));
        float _1106 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1064.x + (-0.5));
        float _1108 = _1106 * (_1064.y + (-0.5));
        float _1109 = _1106 * (_1064.z + (-0.5));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = _1077 * 0.5;
        float _1114 = _1087 * 0.5;
        float _1115 = _1097 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_413, _414, _415), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3549 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3560 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3571 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * (_1140 + 1.0))) + _1145) * _1110;
        float _1155 = _1078 * 0.5;
        float _1156 = _1088 * 0.5;
        float _1157 = _1098 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_413, _414, _415), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3582 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3593 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3604 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * (_1182 + 1.0))) + _1187) * _1111;
        float _1197 = _1079 * 0.5;
        float _1198 = _1089 * 0.5;
        float _1199 = _1099 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_413, _414, _415), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3615 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3626 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3637 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * (_1224 + 1.0))) + _1229) * _1112;
        _1246 = _1079;
        _1247 = _1078;
        _1248 = _1077;
        _1249 = _1089;
        _1250 = _1088;
        _1251 = _1087;
        _1252 = _1099;
        _1253 = _1098;
        _1254 = _1097;
        _1255 = _1112;
        _1256 = _1111;
        _1257 = _1110;
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1259 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1260 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
    }
    else
    {
        _1246 = _938;
        _1247 = _938;
        _1248 = _938;
        _1249 = _938;
        _1250 = _938;
        _1251 = _938;
        _1252 = _938;
        _1253 = _938;
        _1254 = _938;
        _1255 = _938;
        _1256 = _938;
        _1257 = _938;
        _1258 = 0.0;
        _1259 = 0.0;
        _1260 = 0.0;
    }
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _950)) + _950;
    float _1271 = (cbModelParam._m0[1u].x * (_1259 - _951)) + _951;
    float _1272 = (cbModelParam._m0[1u].x * (_1260 - _952)) + _952;
    float _1293 = fma(_1272, cbSceneParam._m0[89u].z, fma(_1271, cbSceneParam._m0[89u].y, _1270 * cbSceneParam._m0[89u].x));
    float _1296 = fma(_1272, cbSceneParam._m0[90u].z, fma(_1271, cbSceneParam._m0[90u].y, _1270 * cbSceneParam._m0[90u].x));
    float _1299 = fma(_1272, cbSceneParam._m0[91u].z, fma(_1271, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1270));
    float _1314 = _574 * 0.5;
    float _1315 = _575 * 0.5;
    float _1316 = _576 * 0.5;
    float _1317 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1248, _1251, _1254, _1257));
    float _1320 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1247, _1250, _1253, _1256));
    float _1323 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1357;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1330 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_937, _941, _944, _947));
        float _1334 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_939, _942, _945, _948));
        float _1338 = dot(vec4(_1314, _1315, _1316, 1.0), vec4(_940, _943, _946, _949));
        float _1345 = dot(vec4(cbModelParam._m0[39u]), vec4(_1314, _1315, _1316, 1.0));
        _1357 = dot(vec3(isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)), isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)), isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1345) ? 0.0 : (isnan(0.0) ? _1345 : max(0.0, _1345))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1357 = 1.0;
    }
    float _1368;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1359 = dot(vec4(cbModelParam._m0[40u]), vec4(_1314, _1315, _1316, 1.0));
        _1368 = dot(vec3(isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1359) ? 0.0 : (isnan(0.0) ? _1359 : max(0.0, _1359))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1368 = 1.0;
    }
    float _1372 = (_1368 * cbModelParam._m0[1u].x) + (_1357 * (1.0 - cbModelParam._m0[1u].x));
    float _1382 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _416);
    float _1383 = isnan(_1382) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1382 : min(cbModelParam._m0[25u].z, _1382));
    float _1464;
    float _1466;
    float _1468;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1431 = fma(_635, cbModelParam._m0[13u].z, fma(_631, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _627)) + cbModelParam._m0[13u].w;
        float _1435 = fma(_635, cbModelParam._m0[14u].z, fma(_631, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _627)) + cbModelParam._m0[14u].w;
        float _1439 = fma(_635, cbModelParam._m0[15u].z, fma(_631, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _627)) + cbModelParam._m0[15u].w;
        float _1442 = fma(_576, cbModelParam._m0[13u].z, fma(_575, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _574));
        float _1445 = fma(_576, cbModelParam._m0[14u].z, fma(_575, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _574));
        float _1448 = fma(_576, cbModelParam._m0[15u].z, fma(_575, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _574));
        float _1476;
        if (_1442 > 0.0)
        {
            _1476 = abs((1.0 - _1431) / _1442);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1431 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1476 = frontier_phi_14_12_ladder;
        }
        float _1701;
        if (_1445 > 0.0)
        {
            _1701 = abs((1.0 - _1435) / _1445);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1435 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1701 = frontier_phi_23_19_ladder;
        }
        float _1947;
        if (_1448 > 0.0)
        {
            _1947 = abs((1.0 - _1439) / _1448);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1439 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1947 = frontier_phi_35_30_ladder;
        }
        float _1949 = isnan(_1701) ? _1476 : (isnan(_1476) ? _1701 : min(_1476, _1701));
        float _1950 = isnan(_1947) ? _1949 : (isnan(_1949) ? _1947 : min(_1949, _1947));
        float _1954 = (_1950 * _1442) + _1431;
        float _1955 = (_1950 * _1445) + _1435;
        float _1956 = (_1950 * _1448) + _1439;
        float _1957 = _1950 * 9.9999997473787516355514526367188e-05;
        float _1959 = (-1.0) - _1957;
        float _1961 = _1957 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1956 > _1961) || ((_1956 < _1959) || ((_1955 > _1961) || ((_1955 < _1959) || ((_1954 < _1959) || (_1954 > _1961))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2080 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1956, cbModelParam._m0[9u].z, fma(_1955, cbModelParam._m0[9u].y, _1954 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1956, cbModelParam._m0[10u].z, fma(_1955, cbModelParam._m0[10u].y, _1954 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1956, cbModelParam._m0[11u].z, fma(_1955, cbModelParam._m0[11u].y, _1954 * cbModelParam._m0[11u].x))), _1383);
            frontier_phi_13_35_ladder = _2080.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2080.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2080.x * cbModelParam._m0[1u].y;
        }
        _1464 = frontier_phi_13_35_ladder_2;
        _1466 = frontier_phi_13_35_ladder_1;
        _1468 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1452 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_574, _575, _576), _1383);
        _1464 = _1452.x * cbModelParam._m0[1u].y;
        _1466 = _1452.y * cbModelParam._m0[1u].y;
        _1468 = _1452.z * cbModelParam._m0[1u].y;
    }
    float _1472 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _416);
    float _1473 = isnan(_1472) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1472 : min(cbModelParam._m0[25u].w, _1472));
    float _1564;
    float _1566;
    float _1568;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1528 = fma(_635, cbModelParam._m0[21u].z, fma(_631, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _627)) + cbModelParam._m0[21u].w;
        float _1532 = fma(_635, cbModelParam._m0[22u].z, fma(_631, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _627)) + cbModelParam._m0[22u].w;
        float _1536 = fma(_635, cbModelParam._m0[23u].z, fma(_631, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _627)) + cbModelParam._m0[23u].w;
        float _1539 = fma(_576, cbModelParam._m0[21u].z, fma(_575, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _574));
        float _1542 = fma(_576, cbModelParam._m0[22u].z, fma(_575, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _574));
        float _1545 = fma(_576, cbModelParam._m0[23u].z, fma(_575, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _574));
        float _1706;
        if (_1539 > 0.0)
        {
            _1706 = abs((1.0 - _1528) / _1539);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1528 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1706 = frontier_phi_25_21_ladder;
        }
        float _1974;
        if (_1542 > 0.0)
        {
            _1974 = abs((1.0 - _1532) / _1542);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1532 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1974 = frontier_phi_37_32_ladder;
        }
        float _2179;
        if (_1545 > 0.0)
        {
            _2179 = abs((1.0 - _1536) / _1545);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1536 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2179 = frontier_phi_46_43_ladder;
        }
        float _2181 = isnan(_1974) ? _1706 : (isnan(_1706) ? _1974 : min(_1706, _1974));
        float _2182 = isnan(_2179) ? _2181 : (isnan(_2181) ? _2179 : min(_2181, _2179));
        float _2186 = (_2182 * _1539) + _1528;
        float _2187 = (_2182 * _1542) + _1532;
        float _2188 = (_2182 * _1545) + _1536;
        float _2189 = _2182 * 9.9999997473787516355514526367188e-05;
        float _2190 = (-1.0) - _2189;
        float _2192 = _2189 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2188 > _2192) || ((_2188 < _2190) || ((_2187 > _2192) || ((_2187 < _2190) || ((_2186 < _2190) || (_2186 > _2192))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2387 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2188, cbModelParam._m0[17u].z, fma(_2187, cbModelParam._m0[17u].y, _2186 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2188, cbModelParam._m0[18u].z, fma(_2187, cbModelParam._m0[18u].y, _2186 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2188, cbModelParam._m0[19u].z, fma(_2187, cbModelParam._m0[19u].y, _2186 * cbModelParam._m0[19u].x))), _1473);
            frontier_phi_22_46_ladder = _2387.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2387.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2387.x * cbModelParam._m0[1u].z;
        }
        _1564 = frontier_phi_22_46_ladder_2;
        _1566 = frontier_phi_22_46_ladder_1;
        _1568 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1548 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_574, _575, _576), _1473);
        _1564 = _1548.x * cbModelParam._m0[1u].z;
        _1566 = _1548.y * cbModelParam._m0[1u].z;
        _1568 = _1548.z * cbModelParam._m0[1u].z;
    }
    float _1580 = ((((1.0 - _595) * ((_582 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_595 * _582)) * _566;
    float _1581 = _1580 * ((cbModelParam._m0[1u].w * (_1564 - _1464)) + _1464);
    float _1582 = _1580 * ((cbModelParam._m0[1u].w * (_1566 - _1466)) + _1466);
    float _1583 = _1580 * ((cbModelParam._m0[1u].w * (_1568 - _1468)) + _1468);
    float _1586 = fma(_1583, cbSceneParam._m0[89u].z, fma(_1582, cbSceneParam._m0[89u].y, _1581 * cbSceneParam._m0[89u].x));
    float _1589 = fma(_1583, cbSceneParam._m0[90u].z, fma(_1582, cbSceneParam._m0[90u].y, _1581 * cbSceneParam._m0[90u].x));
    float _1592 = fma(_1583, cbSceneParam._m0[91u].z, fma(_1582, cbSceneParam._m0[91u].y, _1581 * cbSceneParam._m0[91u].x));
    vec4 _1600 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_500, _501));
    float _1602 = _1600.w;
    float _1614 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1602);
    float _1615 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1602);
    float _1616 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1602);
    uvec4 _1620 = floatBitsToUint(cbInstanceData._m0[_220 + 5u]);
    uint _1622 = _1620.x * 14u;
    uint _1623 = _1622 + 13u;
    float _1630 = _566 + (-1.0);
    float _1635 = (cbLight._m0[_1623].x * _1630) + 1.0;
    float _1636 = (cbLight._m0[_1623].y * _1630) + 1.0;
    float _1637 = (cbLight._m0[_1623].z * _1630) + 1.0;
    float _1638 = (cbLight._m0[_1623].w * _1630) + 1.0;
    uint _1639 = _1622 + 5u;
    float _1645 = isnan(1.0) ? _1636 : (isnan(_1636) ? 1.0 : min(_1636, 1.0));
    uint _1649 = _1622 + 4u;
    float _1659 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
    uint _1663 = _1622 | 1u;
    float _1674 = dot(vec3(cbLight._m0[_1622].xyz), vec3(_413, _414, _415));
    float _1677 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_413, _414, _415));
    float _3773 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _3784 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1682 = (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * 0.3183098733425140380859375;
    float _1684 = (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * 0.3183098733425140380859375;
    float _1691 = ((cbLight._m0[_1639].x * _1645) * _1684) + (((cbLight._m0[_1649].x * _1614) * _1659) * _1682);
    float _1692 = ((_1645 * cbLight._m0[_1639].y) * _1684) + (((cbLight._m0[_1649].y * _1615) * _1659) * _1682);
    float _1693 = ((_1645 * cbLight._m0[_1639].z) * _1684) + (((cbLight._m0[_1649].z * _1616) * _1659) * _1682);
    uvec4 _1698 = floatBitsToUint(cbLight._m0[_1622 + 12u]);
    bool _1700 = _1698.x == 0u;
    float _1711;
    float _1713;
    float _1715;
    if (_1700)
    {
        _1711 = _1691;
        _1713 = _1692;
        _1715 = _1693;
    }
    else
    {
        uint _1719 = _1622 + 6u;
        float _1735 = (dot(vec3(cbLight._m0[_1622 + 2u].xyz), vec3(_413, _414, _415)) * 0.5) + 0.5;
        float _1736 = _1735 * _1735;
        float _3795 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1738 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
        _1711 = (((cbLight._m0[_1719].x * 0.3183098733425140380859375) * _1737) * _1738) + _1691;
        _1713 = (((cbLight._m0[_1719].y * 0.3183098733425140380859375) * _1737) * _1738) + _1692;
        _1715 = (((cbLight._m0[_1719].z * 0.3183098733425140380859375) * _1737) * _1738) + _1693;
    }
    bool _1718 = _1698.y == 0u;
    float _1756;
    float _1758;
    float _1760;
    if (_1718)
    {
        _1756 = _1711;
        _1758 = _1713;
        _1760 = _1715;
    }
    else
    {
        uint _1918 = _1622 + 7u;
        float _1934 = (dot(vec3(cbLight._m0[_1622 + 3u].xyz), vec3(_413, _414, _415)) * 0.5) + 0.5;
        float _1935 = _1934 * _1934;
        float _3811 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1936 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1937 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
        _1756 = (((cbLight._m0[_1918].x * 0.3183098733425140380859375) * _1936) * _1937) + _1711;
        _1758 = (((cbLight._m0[_1918].y * 0.3183098733425140380859375) * _1936) * _1937) + _1713;
        _1760 = (((cbLight._m0[_1918].z * 0.3183098733425140380859375) * _1936) * _1937) + _1715;
    }
    uint _1763 = _1622 + 8u;
    float _1776 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1622].w)) * _416) * 0.949999988079071044921875);
    float _1777 = _1776 * _1776;
    float _1778 = cbLight._m0[_1622].x + _492;
    float _1779 = cbLight._m0[_1622].y + _493;
    float _1780 = cbLight._m0[_1622].z + _494;
    float _1784 = inversesqrt(dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780)));
    float _1785 = _1784 * _1778;
    float _1786 = _1784 * _1779;
    float _1787 = _1784 * _1780;
    float _1788 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1622].xyz));
    float _3827 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1791 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _3838 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _1792 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _1793 = dot(vec3(_413, _414, _415), vec3(_1785, _1786, _1787));
    float _3849 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1796 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _1797 = dot(vec3(cbLight._m0[_1622].xyz), vec3(_1785, _1786, _1787));
    float _3860 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1801 = _1777 * _1777;
    float _1805 = ((_1796 * _1796) * (_1801 + (-1.0))) + 1.0;
    float _1816 = (exp2(log2(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1817 = 1.0 - _1777;
    float _1828 = (0.5 / (((_1792 * ((_1791 * _1817) + _1777)) + 9.9999999392252902907785028219223e-09) + (((_1792 * _1817) + _1777) * _1791))) * _1791;
    float _3871 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1830 = (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1801 / ((_1805 * _1805) * 3.141590118408203125));
    uint _1844 = _1622 + 9u;
    float _1855 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1663].w)) * _416) * 0.949999988079071044921875);
    float _1856 = _1855 * _1855;
    float _1857 = cbLight._m0[_1663].x + _492;
    float _1858 = cbLight._m0[_1663].y + _493;
    float _1859 = cbLight._m0[_1663].z + _494;
    float _1863 = inversesqrt(dot(vec3(_1857, _1858, _1859), vec3(_1857, _1858, _1859)));
    float _1864 = _1863 * _1857;
    float _1865 = _1863 * _1858;
    float _1866 = _1863 * _1859;
    float _1867 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1663].xyz));
    float _3882 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _1871 = dot(vec3(_413, _414, _415), vec3(_1864, _1865, _1866));
    float _3893 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1874 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _1875 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_1864, _1865, _1866));
    float _3904 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1879 = _1856 * _1856;
    float _1883 = ((_1874 * _1874) * (_1879 + (-1.0))) + 1.0;
    float _1892 = (exp2(log2(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1893 = 1.0 - _1856;
    float _1903 = (0.5 / (((_1792 * ((_1870 * _1893) + _1856)) + 9.9999999392252902907785028219223e-09) + (((_1792 * _1893) + _1856) * _1870))) * _1870;
    float _3915 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1905 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1879 / ((_1883 * _1883) * 3.141590118408203125));
    float _1915 = (((_1892 * cbLight._m0[_1844].x) * _1905) * _1645) + ((((cbLight._m0[_1763].x * _1614) * _1816) * _1830) * _1659);
    float _1916 = (((_1892 * cbLight._m0[_1844].y) * _1905) * _1645) + ((((cbLight._m0[_1763].y * _1615) * _1816) * _1830) * _1659);
    float _1917 = (((_1892 * cbLight._m0[_1844].z) * _1905) * _1645) + ((((cbLight._m0[_1763].z * _1616) * _1816) * _1830) * _1659);
    float _1979;
    float _1981;
    float _1983;
    if (_1700)
    {
        _1979 = _1915;
        _1981 = _1916;
        _1983 = _1917;
    }
    else
    {
        uint _1985 = _1622 + 2u;
        uint _1989 = _1622 + 10u;
        float _2003 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _416) * 0.949999988079071044921875);
        float _2004 = _2003 * _2003;
        float _2005 = cbLight._m0[_1985].x + _492;
        float _2006 = cbLight._m0[_1985].y + _493;
        float _2007 = cbLight._m0[_1985].z + _494;
        float _2011 = inversesqrt(dot(vec3(_2005, _2006, _2007), vec3(_2005, _2006, _2007)));
        float _2012 = _2011 * _2005;
        float _2013 = _2011 * _2006;
        float _2014 = _2011 * _2007;
        float _2015 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1985].xyz));
        float _3926 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2018 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _2019 = dot(vec3(_413, _414, _415), vec3(_2012, _2013, _2014));
        float _3937 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2022 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _2023 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2012, _2013, _2014));
        float _3948 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2027 = _2004 * _2004;
        float _2031 = ((_2022 * _2022) * (_2027 + (-1.0))) + 1.0;
        float _2040 = (exp2(log2(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2041 = 1.0 - _2004;
        float _2051 = (0.5 / (((_1792 * ((_2018 * _2041) + _2004)) + 9.9999999392252902907785028219223e-09) + (((_1792 * _2041) + _2004) * _2018))) * _2018;
        float _3959 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2053 = (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_2027 / ((_2031 * _2031) * 3.141590118408203125));
        float _2054 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
        _1979 = (((_2040 * cbLight._m0[_1989].x) * _2053) * _2054) + _1915;
        _1981 = (((_2040 * cbLight._m0[_1989].y) * _2053) * _2054) + _1916;
        _1983 = (((_2040 * cbLight._m0[_1989].z) * _2053) * _2054) + _1917;
    }
    float _2089;
    float _2091;
    float _2093;
    if (_1718)
    {
        _2089 = _1979;
        _2091 = _1981;
        _2093 = _1983;
    }
    else
    {
        uint _2100 = _1622 + 3u;
        uint _2104 = _1622 + 11u;
        float _2118 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2100].w)) * _416) * 0.949999988079071044921875);
        float _2119 = _2118 * _2118;
        float _2120 = cbLight._m0[_2100].x + _492;
        float _2121 = cbLight._m0[_2100].y + _493;
        float _2122 = cbLight._m0[_2100].z + _494;
        float _2126 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
        float _2127 = _2126 * _2120;
        float _2128 = _2126 * _2121;
        float _2129 = _2126 * _2122;
        float _2130 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_2100].xyz));
        float _3975 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2133 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _2134 = dot(vec3(_413, _414, _415), vec3(_2127, _2128, _2129));
        float _3986 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2137 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _2138 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_2127, _2128, _2129));
        float _3997 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2142 = _2119 * _2119;
        float _2146 = ((_2137 * _2137) * (_2142 + (-1.0))) + 1.0;
        float _2155 = (exp2(log2(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2156 = 1.0 - _2119;
        float _2166 = (0.5 / (((_1792 * ((_2133 * _2156) + _2119)) + 9.9999999392252902907785028219223e-09) + (((_1792 * _2156) + _2119) * _2133))) * _2133;
        float _4008 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2168 = (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_2142 / ((_2146 * _2146) * 3.141590118408203125));
        float _2169 = isnan(1.0) ? _1638 : (isnan(_1638) ? 1.0 : min(_1638, 1.0));
        _2089 = (((_2155 * cbLight._m0[_2104].x) * _2168) * _2169) + _1979;
        _2091 = (((_2155 * cbLight._m0[_2104].y) * _2168) * _2169) + _1981;
        _2093 = (((_2155 * cbLight._m0[_2104].z) * _2168) * _2169) + _1983;
    }
    float _2304;
    float _2306;
    float _2308;
    float _2310;
    float _2312;
    float _2314;
    if (_1620.y == 0u)
    {
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2244;
        float _2246 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2244;
        float _2247 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2244;
        uvec4 _2259 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2260 = _2259.x;
        uint _2271 = uint((float(_2259.y) * floor(float(uint(cbSceneParam._m0[85u].y * _501) / _2260))) + floor(float(uint(cbSceneParam._m0[85u].x * _500) / _2260)));
        float _2281 = (log2(_2247 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2282 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        uint _2285 = uint(isnan(14.0) ? _2282 : (isnan(_2282) ? 14.0 : min(_2282, 14.0)));
        uvec4 _2290 = texelFetch(g_lightClusterGridBuffer, int(((_2285 << 2u) + (_2271 << 6u)) >> 2u));
        uint _2291 = _2290.x;
        uint _2292 = _2259.z;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        if (((((1u << ((_2292 >> 4u) & 15u)) + 4294967295u) & _2291) == 0u) || ((_2292 & 240u) == 0u))
        {
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
        }
        else
        {
            float _2393;
            float _2395;
            float _2397;
            float _2399;
            float _2401;
            float _2403;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            uint _2543 = 0u;
            uint _2552;
            bool _2553;
            for (;;)
            {
                _2552 = texelFetch(g_lightClassification, int((((_2285 << 5u) + (_2271 << 9u)) + (_2543 << 2u)) >> 2u)).x;
                _2553 = _2552 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2553)
                {
                    frontier_phi_61_pred = _2537;
                    frontier_phi_61_pred_1 = _2542;
                    frontier_phi_61_pred_2 = _2541;
                    frontier_phi_61_pred_3 = _2540;
                    frontier_phi_61_pred_4 = _2539;
                    frontier_phi_61_pred_5 = _2538;
                }
                else
                {
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    uint _2667;
                    _2661 = _2537;
                    _2662 = _2538;
                    _2663 = _2539;
                    _2664 = _2540;
                    _2665 = _2541;
                    _2666 = _2542;
                    _2667 = _2552;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    for (;;)
                    {
                        uint _2671 = uint(findLSB(_2667)) + (_2543 << 5u);
                        uint _2668 = (_2667 + 4294967295u) & _2667;
                        uint _2673 = _2671 * 48u;
                        vec4 _2687 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2673)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 3u)).x));
                        uint _2693 = (_2671 * 48u) + 4u;
                        vec4 _2706 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 3u)).x));
                        uint _2712 = (_2671 * 48u) + 8u;
                        vec3 _2723 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2712)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 2u)).x));
                        float _2727 = _2687.x - _2245;
                        float _2728 = _2687.y - _2246;
                        float _2729 = _2687.z - _2247;
                        float _2730 = dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729));
                        float _2733 = inversesqrt(_2730);
                        float _2734 = _2733 * _2727;
                        float _2735 = _2733 * _2728;
                        float _2736 = _2733 * _2729;
                        float _2737 = dot(vec3(_522, _525, _528), vec3(_2734, _2735, _2736));
                        float _2742 = 1.0 - (_2730 * _2687.w);
                        float _4034 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                        float _2743 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                        float _2744 = sqrt(_2730) * _2706.w;
                        float _2747 = 1.39999997615814208984375 / (_2744 + 1.39999997615814208984375);
                        float _2748 = _2747 * _2747;
                        float _2751 = ((1.0 - _2748) * _2737) + _2748;
                        float _2754 = _2744 * _2744;
                        float _2758 = ((isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0))) * _2743) / ((_2754 * 0.699999988079071044921875) + 1.0);
                        float _2762 = (-0.0) - _2245;
                        float _2763 = (-0.0) - _2246;
                        float _2764 = (-0.0) - _2247;
                        float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
                        float _2769 = _2768 * _2762;
                        float _2770 = _2768 * _2763;
                        float _2771 = _2768 * _2764;
                        float _2779 = exp2(log2(1.0 / ((_2754 * 3.5) + 5.0)) * 0.25);
                        float _2780 = 1.0 - _582;
                        float _2787 = sqrt(1.0 - ((1.0 - (_2780 * _2780)) * (1.0 - (_2779 * _2779))));
                        float _2788 = _2787 * _2787;
                        float _2789 = _2788 * _2788;
                        float _2790 = _2769 + _2734;
                        float _2791 = _2770 + _2735;
                        float _2792 = _2771 + _2736;
                        float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
                        float _2800 = dot(vec3(_522, _525, _528), vec3(_2769, _2770, _2771));
                        float _4050 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2803 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                        float _2804 = dot(vec3(_522, _525, _528), vec3(_2796 * _2790, _2796 * _2791, _2796 * _2792));
                        float _4061 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2807 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                        float _2811 = ((_2807 * _2807) * (_2789 + (-1.0))) + 1.0;
                        float _2812 = _2747 * _2788;
                        float _2813 = _2812 * _2812;
                        float _2816 = ((1.0 - _2813) * _2737) + _2813;
                        float _4072 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2817 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                        float _2818 = 1.0 - _2788;
                        float _2828 = (0.5 / (((_2817 * ((_2803 * _2818) + _2788)) + 9.9999999392252902907785028219223e-09) + (((_2817 * _2818) + _2788) * _2803))) * _2817;
                        float _4083 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2839 = (((_2789 * 3.1415927410125732421875) * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) / ((_2811 * _2811) * ((_2754 * 2.1991131305694580078125) + 3.141590118408203125))) * _2743;
                        _2596 = (_2758 * _2706.x) + _2664;
                        _2597 = (_2758 * _2706.y) + _2665;
                        _2598 = (_2758 * _2706.z) + _2666;
                        _2593 = (_2839 * _2723.x) + _2661;
                        _2594 = (_2839 * _2723.y) + _2662;
                        _2595 = (_2839 * _2723.z) + _2663;
                        if (_2668 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2661 = _2593;
                            _2662 = _2594;
                            _2663 = _2595;
                            _2664 = _2596;
                            _2665 = _2597;
                            _2666 = _2598;
                            _2667 = _2668;
                        }
                    }
                    frontier_phi_61_pred = _2593;
                    frontier_phi_61_pred_1 = _2598;
                    frontier_phi_61_pred_2 = _2597;
                    frontier_phi_61_pred_3 = _2596;
                    frontier_phi_61_pred_4 = _2595;
                    frontier_phi_61_pred_5 = _2594;
                }
                _2393 = frontier_phi_61_pred;
                _2403 = frontier_phi_61_pred_1;
                _2401 = frontier_phi_61_pred_2;
                _2399 = frontier_phi_61_pred_3;
                _2397 = frontier_phi_61_pred_4;
                _2395 = frontier_phi_61_pred_5;
                uint _2544 = _2543 + 1u;
                if (_2544 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2537 = _2393;
                    _2538 = _2395;
                    _2539 = _2397;
                    _2540 = _2399;
                    _2541 = _2401;
                    _2542 = _2403;
                    _2543 = _2544;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
        }
        uvec4 _2406 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2407 = _2406.z;
        uint _2409 = (_2407 >> 8u) & 15u;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        if (((4294967295u << _2409) & _2291) == 0u)
        {
            _2505 = _2392;
            _2507 = _2394;
            _2509 = _2396;
            _2511 = _2398;
            _2513 = _2400;
            _2515 = _2402;
        }
        else
        {
            float _2530 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
            float _2531 = _2530 * _2245;
            float _2532 = _2530 * _2246;
            float _2533 = _2530 * _2247;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2409 < ((_2407 >> 12u) & 15u))
            {
                float _2506;
                float _2508;
                float _2510;
                float _2512;
                float _2514;
                float _2516;
                float _2644 = _2392;
                float _2645 = _2394;
                float _2646 = _2396;
                float _2647 = _2398;
                float _2648 = _2400;
                float _2649 = _2402;
                uint _2650 = _2409;
                uint _2659;
                bool _2660;
                for (;;)
                {
                    _2659 = texelFetch(g_lightClassification, int((((_2285 << 5u) + (_2271 << 9u)) + (_2650 << 2u)) >> 2u)).x;
                    _2660 = _2659 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2660)
                    {
                        frontier_phi_67_pred = _2647;
                        frontier_phi_67_pred_1 = _2648;
                        frontier_phi_67_pred_2 = _2649;
                        frontier_phi_67_pred_3 = _2646;
                        frontier_phi_67_pred_4 = _2645;
                        frontier_phi_67_pred_5 = _2644;
                    }
                    else
                    {
                        float _2844;
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _2849;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _2857 = _2644;
                        float _2858 = _2645;
                        float _2859 = _2646;
                        float _2860 = _2647;
                        float _2861 = _2648;
                        float _2862 = _2649;
                        uint _2863 = _2659;
                        uint _2864;
                        vec4 _2889;
                        float _2890;
                        vec4 _2905;
                        vec3 _2917;
                        vec4 _2933;
                        vec4 _2949;
                        float _2995;
                        bool _2996;
                        for (;;)
                        {
                            uint _2874 = ((_2650 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2863));
                            _2864 = (_2863 + 4294967295u) & _2863;
                            uint _2876 = _2874 * 40u;
                            _2889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 3u)).x));
                            _2890 = _2889.w;
                            uint _2892 = (_2874 * 40u) + 4u;
                            _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            uint _2907 = (_2874 * 40u) + 8u;
                            _2917 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x));
                            uint _2920 = (_2874 * 40u) + 16u;
                            _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            uint _2936 = (_2874 * 40u) + 20u;
                            _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            uint _2951 = (_2874 * 40u) + 24u;
                            vec4 _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            uint _2970 = (_2874 * 40u) + 28u;
                            vec4 _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            _2995 = fma(_2247, _2983.z, fma(_2246, _2983.y, _2983.x * _2245)) + _2983.w;
                            _2996 = !((fma(_2247, _2964.z, fma(_2246, _2964.y, _2964.x * _2245)) + _2964.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2996)
                            {
                                float _3023 = _2889.x - _2245;
                                float _3024 = _2889.y - _2246;
                                float _3025 = _2889.z - _2247;
                                float _3026 = dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025));
                                float _3029 = inversesqrt(_3026);
                                float _3030 = _3029 * _3023;
                                float _3031 = _3029 * _3024;
                                float _3032 = _3029 * _3025;
                                float _3036 = 1.0 - (_3026 / (_2890 * _2890));
                                float _4094 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3037 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                                float _3041 = sqrt(_3026) * _2905.w;
                                float _3043 = 1.39999997615814208984375 / (_3041 + 1.39999997615814208984375);
                                float _3044 = _3043 * _3043;
                                float _3047 = ((1.0 - _3044) * dot(vec3(_3030, _3031, _3032), vec3(_522, _525, _528))) + _3044;
                                float _3050 = _3041 * _3041;
                                float _3054 = (fma(_2247, _2933.z, fma(_2246, _2933.y, _2933.x * _2245)) + _2933.w) / _2995;
                                float _3055 = (fma(_2247, _2949.z, fma(_2246, _2949.y, _2949.x * _2245)) + _2949.w) / _2995;
                                float _3059 = 1.0 - dot(vec2(_3054, _3055), vec2(_3054, _3055));
                                float _4110 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3060 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3061 = _3060 * (((isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0))) * _3037) / ((_3050 * 0.699999988079071044921875) + 1.0));
                                float _3073 = exp2(log2(1.0 / ((_3050 * 3.5) + 5.0)) * 0.25);
                                float _3074 = 1.0 - _582;
                                float _3081 = sqrt(1.0 - ((1.0 - (_3074 * _3074)) * (1.0 - (_3073 * _3073))));
                                float _3082 = _3081 * _3081;
                                float _3083 = _3082 * _3082;
                                float _3084 = _3030 - _2531;
                                float _3085 = _3031 - _2532;
                                float _3086 = _3032 - _2533;
                                float _3090 = inversesqrt(dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086)));
                                float _3094 = dot(vec3(_522, _525, _528), vec3((-0.0) - _2531, (-0.0) - _2532, (-0.0) - _2533));
                                float _4121 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3097 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                                float _3098 = dot(vec3(_522, _525, _528), vec3(_3090 * _3084, _3090 * _3085, _3090 * _3086));
                                float _4132 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3101 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                                float _3105 = ((_3101 * _3101) * (_3083 + (-1.0))) + 1.0;
                                float _3106 = _3043 * _3082;
                                float _3107 = _3106 * _3106;
                                float _3113 = ((1.0 - _3107) * dot(vec3(_522, _525, _528), vec3(_3030, _3031, _3032))) + _3107;
                                float _4143 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3114 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                                float _3115 = 1.0 - _3082;
                                float _3125 = (0.5 / (((_3114 * ((_3097 * _3115) + _3082)) + 9.9999999392252902907785028219223e-09) + (((_3114 * _3115) + _3082) * _3097))) * _3114;
                                float _4154 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3135 = (_3060 * _3037) * (((_3083 * 3.1415927410125732421875) * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) / ((_3105 * _3105) * ((_3050 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3135 * _2917.x;
                                frontier_phi_73_pred_1 = _3135 * _2917.y;
                                frontier_phi_73_pred_2 = _3061 * _2905.z;
                                frontier_phi_73_pred_3 = _3061 * _2905.y;
                                frontier_phi_73_pred_4 = _3061 * _2905.x;
                                frontier_phi_73_pred_5 = _3135 * _2917.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3139 = frontier_phi_73_pred;
                            _3140 = frontier_phi_73_pred_1;
                            _3144 = frontier_phi_73_pred_2;
                            _3143 = frontier_phi_73_pred_3;
                            _3142 = frontier_phi_73_pred_4;
                            _3141 = frontier_phi_73_pred_5;
                            _2847 = _3142 + _2860;
                            _2848 = _3143 + _2861;
                            _2849 = _3144 + _2862;
                            _2844 = _3139 + _2857;
                            _2845 = _3140 + _2858;
                            _2846 = _3141 + _2859;
                            if (_2864 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2857 = _2844;
                                _2858 = _2845;
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2864;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2847;
                        frontier_phi_67_pred_1 = _2848;
                        frontier_phi_67_pred_2 = _2849;
                        frontier_phi_67_pred_3 = _2846;
                        frontier_phi_67_pred_4 = _2845;
                        frontier_phi_67_pred_5 = _2844;
                    }
                    _2512 = frontier_phi_67_pred;
                    _2514 = frontier_phi_67_pred_1;
                    _2516 = frontier_phi_67_pred_2;
                    _2510 = frontier_phi_67_pred_3;
                    _2508 = frontier_phi_67_pred_4;
                    _2506 = frontier_phi_67_pred_5;
                    uint _2651 = _2650 + 1u;
                    if (_2651 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2644 = _2506;
                        _2645 = _2508;
                        _2646 = _2510;
                        _2647 = _2512;
                        _2648 = _2514;
                        _2649 = _2516;
                        _2650 = _2651;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2514;
                frontier_phi_55_56_ladder_1 = _2516;
                frontier_phi_55_56_ladder_2 = _2512;
                frontier_phi_55_56_ladder_3 = _2510;
                frontier_phi_55_56_ladder_4 = _2508;
                frontier_phi_55_56_ladder_5 = _2506;
            }
            else
            {
                frontier_phi_55_56_ladder = _2400;
                frontier_phi_55_56_ladder_1 = _2402;
                frontier_phi_55_56_ladder_2 = _2398;
                frontier_phi_55_56_ladder_3 = _2396;
                frontier_phi_55_56_ladder_4 = _2394;
                frontier_phi_55_56_ladder_5 = _2392;
            }
            _2505 = frontier_phi_55_56_ladder_5;
            _2507 = frontier_phi_55_56_ladder_4;
            _2509 = frontier_phi_55_56_ladder_3;
            _2511 = frontier_phi_55_56_ladder_2;
            _2513 = frontier_phi_55_56_ladder;
            _2515 = frontier_phi_55_56_ladder_1;
        }
        float _2520 = isnan(1.0) ? _566 : (isnan(_566) ? 1.0 : min(_566, 1.0));
        _2304 = (_2520 * _2511) + _1756;
        _2306 = (_2520 * _2513) + _1758;
        _2308 = (_2520 * _2515) + _1760;
        _2310 = ((_2505 * 0.039999999105930328369140625) * _2520) + _2089;
        _2312 = ((_2507 * 0.039999999105930328369140625) * _2520) + _2091;
        _2314 = ((_2509 * 0.039999999105930328369140625) * _2520) + _2093;
    }
    else
    {
        _2304 = _1756;
        _2306 = _1758;
        _2308 = _1760;
        _2310 = _2089;
        _2312 = _2091;
        _2314 = _2093;
    }
    float _4170 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _4181 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _4192 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    uint _2334 = _220 + 6u;
    float _2342 = _500 / cbSceneParam._m0[86u].x;
    float _2343 = _501 / cbSceneParam._m0[86u].y;
    vec4 _2357 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2342, _2343, (log2((isnan(cbSceneParam._m0[77u].w) ? _434 : (isnan(_434) ? cbSceneParam._m0[77u].w : min(_434, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2359 = _2357.x;
    float _2360 = _2357.y;
    float _2361 = _2357.z;
    float _2362 = _2357.w;
    float _2455;
    float _2457;
    float _2459;
    float _2461;
    if (_434 > cbSceneParam._m0[78u].w)
    {
        float _2417 = isnan(_434) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _434 : min(cbSceneParam._m0[80u].w, _434));
        float _2418 = _2417 / _434;
        float _2429 = _2418 * _485;
        float _2430 = _486 * _2418;
        float _2431 = (-0.0) - _2430;
        float _2433 = _2418 * _487;
        float _2435 = (cbSceneParam._m0[77u].w * _2431) / _2417;
        float _2436 = _2435 + cbSceneParam._m0[79u].w;
        float _2437 = cbSceneParam._m0[79u].w - _2430;
        float _2443 = sqrt(((_2429 * _2429) + (_2430 * _2430)) + (_2433 * _2433));
        float _2446 = (1.0 - (cbSceneParam._m0[77u].w / _2417)) * _2443;
        float _2451 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2453 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2606;
        if (abs((_2431 - _2435) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2606 = ((((_2436 > 0.0) ? exp2(_2451 * _2436) : (2.0 - exp2(_2453 * _2436))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2446;
        }
        else
        {
            float _2566 = 1.0 / cbSceneParam._m0[80u].x;
            float _2567 = isnan(_2437) ? _2436 : (isnan(_2436) ? _2437 : max(_2436, _2437));
            float _2568 = isnan(_2437) ? _2436 : (isnan(_2436) ? _2437 : min(_2436, _2437));
            float _2577 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : min(_2567, 0.0));
            float _2578 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : min(_2568, 0.0));
            _2606 = ((abs(_2443 / _2431) * cbSceneParam._m0[80u].y) * ((((_2577 - _2578) * 2.0) - ((exp2(_2451 * (isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0)))) - exp2(_2451 * (isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0))))) * _2566)) - ((exp2(_2453 * _2577) - exp2(_2453 * _2578)) * _2566))) + (_2446 * cbSceneParam._m0[80u].z);
        }
        vec4 _2608 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2342, _2343, 1.0), 0.0);
        float _2617 = exp2((_2606 * (-1.44269502162933349609375)) * (1.0 - _2608.w));
        float _2618 = log2(_2617);
        float _2634 = log2(_2362);
        _2455 = (exp2(_2634 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2618 * cbSceneParam._m0[78u].x)) * _2608.x) / cbSceneParam._m0[78u].x)) + _2359;
        _2457 = (exp2(_2634 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2618 * cbSceneParam._m0[78u].y)) * _2608.y) / cbSceneParam._m0[78u].y)) + _2360;
        _2459 = (exp2(_2634 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2618 * cbSceneParam._m0[78u].z)) * _2608.z) / cbSceneParam._m0[78u].z)) + _2361;
        _2461 = _2617 * _2362;
    }
    else
    {
        _2455 = _2359;
        _2457 = _2360;
        _2459 = _2361;
        _2461 = _2362;
    }
    float _2473 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2474 = _2473 == 3.0;
    float _2475 = log2(_2461);
    float _2482 = exp2(_2475 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2304 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _566))) + ((_2310 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _1372)) * cbPerFrame._m0[3u].x));
    float _2483 = exp2(_2475 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2306 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _566))) + ((_2312 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1372)) * cbPerFrame._m0[3u].x));
    float _2484 = exp2(_2475 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2308 + ((isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))) * _566))) + ((_2314 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _1372)) * cbPerFrame._m0[3u].x));
    float _2493 = (_2473 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2493 * (_2474 ? _2482 : (_2482 + (cbSceneParam._m0[72u].w * _2455)));
    SV_Target.y = _2493 * (_2474 ? _2483 : (_2483 + (cbSceneParam._m0[72u].w * _2457)));
    SV_Target.z = _2493 * (_2474 ? _2484 : (_2484 + (cbSceneParam._m0[72u].w * _2459)));
    SV_Target.w = cbInstanceData._m0[_2334].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2334].w;
}


