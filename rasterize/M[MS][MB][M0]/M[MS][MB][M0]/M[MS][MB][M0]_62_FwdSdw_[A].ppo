#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1067;
float _3712;
float _3713;
float _3714;
float _3715;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _354 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _371 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _354) * cbMtdParam._m0[24u].x) + _354) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3724 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _379 = (_372 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _380 = (_372 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _381 = (_372 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _394 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _256) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _257) + cbTextureTilingScale._m0[20u].w));
    vec4 _419 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _438 = _436.x;
    float _439 = _436.y;
    float _440 = _436.z;
    float _449 = ((_419.z - _440) * _372) + _440;
    float _452 = ((((_419.x - _438) * _372) + _438) * 2.0) + (-1.0);
    float _453 = ((((_419.y - _439) * _372) + _439) * 2.0) + (-1.0);
    float _454 = dot(vec2(_452, _453), vec2(_452, _453));
    float _3735 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _459 = sqrt(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))));
    float _464 = _452 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_394.x * 2.0) + (-1.0)));
    float _465 = _453 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_394.y * 2.0) + (-1.0)));
    vec4 _478 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _485 = (((_394.z - _449) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _449;
    float _490 = cbMtdParam._m0[22u].x + _478.w;
    float _493 = fma(_459, _223 * NORMAL.x, fma(_465, _230 * TANGENT.x, (_216 * _208) * _464));
    float _496 = fma(_459, _223 * NORMAL.y, fma(_465, _230 * TANGENT.y, (_216 * _209) * _464));
    float _499 = fma(_459, _223 * NORMAL.z, fma(_465, _230 * TANGENT.z, (_216 * _210) * _464));
    float _503 = inversesqrt(dot(vec3(_493, _496, _499), vec3(_493, _496, _499)));
    float _504 = _503 * _493;
    float _505 = _503 * _496;
    float _506 = _503 * _499;
    float _3746 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _507 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3768 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _3779 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _3790 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _525 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _567 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _577 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _567);
    float _578 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _567);
    float _579 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _567);
    float _583 = inversesqrt(dot(vec3(_577, _578, _579), vec3(_577, _578, _579)));
    float _584 = _577 * _583;
    float _585 = _578 * _583;
    float _586 = _579 * _583;
    vec4 _591 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _593 = _591.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _747 = sqrt(((_577 * _577) + (_578 * _578)) + (_579 * _579));
        float _753 = (cbMatDynParam._m0[5u].x * _747) + cbMatDynParam._m0[5u].y;
        float _3801 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _754 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _758 = (cbMatDynParam._m0[5u].z * _747) + cbMatDynParam._m0[5u].w;
        float _3812 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) - _754)) + _754) < ((_593 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _604 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _605 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _623 = fma(_506, cbSceneParam._m0[5u].z, fma(_505, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _504));
    float _626 = fma(_506, cbSceneParam._m0[6u].z, fma(_505, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _504));
    float _629 = fma(_506, cbSceneParam._m0[7u].z, fma(_505, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _504));
    uint _642 = _236 + 9u;
    uint _643 = _642 + uint(cbMatDynParam._m0[0u].w);
    float _649 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * cbInstanceData._m0[_643].x;
    float _650 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_643].y;
    float _651 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_643].z;
    float _3823 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _3845 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    vec4 _663 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _604, cbSceneParam._m0[86u].y * _605));
    float _667 = ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * TEXCOORD_5.w) * _663.x;
    float _668 = dot(vec3(_504, _505, _506), vec3(_584, _585, _586));
    float _671 = _668 * 2.0;
    float _675 = (_671 * _504) - _584;
    float _676 = (_671 * _505) - _585;
    float _677 = (_671 * _506) - _586;
    float _681 = abs(dot(vec3(_584, _585, _586), vec3(_504, _505, _506)));
    float _3856 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _683 = sqrt(_507);
    float _696 = exp2((_683 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_683 * 3.0));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1066;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _791 = fma(_736, cbModelParam._m0[26u].z, fma(_732, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _728));
        float _795 = fma(_736, cbModelParam._m0[27u].z, fma(_732, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _728));
        float _799 = fma(_736, cbModelParam._m0[28u].z, fma(_732, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _728));
        float _824 = _728 + _504;
        float _825 = _732 + _505;
        float _826 = _736 + _506;
        float _836 = fma(_826, cbModelParam._m0[26u].z, fma(_825, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _824)) - _791;
        float _837 = fma(_826, cbModelParam._m0[27u].z, fma(_825, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _824)) - _795;
        float _838 = fma(_826, cbModelParam._m0[28u].z, fma(_825, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _824)) - _799;
        float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
        float _855 = ((_842 * _836) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_791 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _856 = ((_842 * _837) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_795 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _857 = ((_842 * _838) / cbModelParam._m0[34u].z) + ((((((_799 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        float _894 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_860.x + (-0.5));
        float _896 = _894 * (_860.y + (-0.5));
        float _897 = _894 * (_860.z + (-0.5));
        float _904 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_867.x + (-0.5));
        float _906 = _904 * (_867.y + (-0.5));
        float _907 = _904 * (_867.z + (-0.5));
        float _914 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_874.x + (-0.5));
        float _916 = _914 * (_874.y + (-0.5));
        float _917 = _914 * (_874.z + (-0.5));
        float _924 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_881.x + (-0.5));
        float _926 = _924 * (_881.y + (-0.5));
        float _927 = _924 * (_881.z + (-0.5));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = _895 * 0.5;
        float _932 = _905 * 0.5;
        float _933 = _915 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _948 = (dot(vec3(_504, _505, _506), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _958 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3904 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_960 + 1.0))) + _965) * _928;
        float _975 = _896 * 0.5;
        float _976 = _906 * 0.5;
        float _977 = _916 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_504, _505, _506), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3937 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1002 + 1.0))) + _1007) * _929;
        float _1017 = _897 * 0.5;
        float _1018 = _907 * 0.5;
        float _1019 = _917 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_504, _505, _506), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3970 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1044 + 1.0))) + _1049) * _930;
        _1066 = _897;
        _1068 = _896;
        _1069 = _895;
        _1070 = _907;
        _1071 = _906;
        _1072 = _905;
        _1073 = _917;
        _1074 = _916;
        _1075 = _915;
        _1076 = _930;
        _1077 = _929;
        _1078 = _928;
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
        _1080 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
    }
    else
    {
        _1066 = _1067;
        _1068 = _1067;
        _1069 = _1067;
        _1070 = _1067;
        _1071 = _1067;
        _1072 = _1067;
        _1073 = _1067;
        _1074 = _1067;
        _1075 = _1067;
        _1076 = _1067;
        _1077 = _1067;
        _1078 = _1067;
        _1079 = 0.0;
        _1080 = 0.0;
        _1081 = 0.0;
    }
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1109 = fma(_736, cbModelParam._m0[30u].z, fma(_732, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _728));
        float _1113 = fma(_736, cbModelParam._m0[31u].z, fma(_732, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _728));
        float _1117 = fma(_736, cbModelParam._m0[32u].z, fma(_732, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _728));
        float _1140 = _728 + _504;
        float _1141 = _732 + _505;
        float _1142 = _736 + _506;
        float _1152 = fma(_1142, cbModelParam._m0[30u].z, fma(_1141, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1140)) - _1109;
        float _1153 = fma(_1142, cbModelParam._m0[31u].z, fma(_1141, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1140)) - _1113;
        float _1154 = fma(_1142, cbModelParam._m0[32u].z, fma(_1141, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1140)) - _1117;
        float _1158 = inversesqrt(dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154)));
        float _1171 = ((_1158 * _1152) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1109 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1158 * _1153) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1113 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1158 * _1154) / cbModelParam._m0[35u].z) + ((((((_1117 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        float _1208 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1175.x + (-0.5));
        float _1210 = _1208 * (_1175.y + (-0.5));
        float _1211 = _1208 * (_1175.z + (-0.5));
        float _1218 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1182.x + (-0.5));
        float _1220 = _1218 * (_1182.y + (-0.5));
        float _1221 = _1218 * (_1182.z + (-0.5));
        float _1228 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1189.x + (-0.5));
        float _1230 = _1228 * (_1189.y + (-0.5));
        float _1231 = _1228 * (_1189.z + (-0.5));
        float _1238 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1196.x + (-0.5));
        float _1240 = _1238 * (_1196.y + (-0.5));
        float _1241 = _1238 * (_1196.z + (-0.5));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = _1209 * 0.5;
        float _1246 = _1219 * 0.5;
        float _1247 = _1229 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_504, _505, _506), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4033 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1272 + 1.0))) + _1277) * _1242;
        float _1287 = _1210 * 0.5;
        float _1288 = _1220 * 0.5;
        float _1289 = _1230 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_504, _505, _506), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4066 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1314 + 1.0))) + _1319) * _1243;
        float _1329 = _1211 * 0.5;
        float _1330 = _1221 * 0.5;
        float _1331 = _1231 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_504, _505, _506), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4099 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1356 + 1.0))) + _1361) * _1244;
        _1378 = _1211;
        _1379 = _1210;
        _1380 = _1209;
        _1381 = _1221;
        _1382 = _1220;
        _1383 = _1219;
        _1384 = _1231;
        _1385 = _1230;
        _1386 = _1229;
        _1387 = _1244;
        _1388 = _1243;
        _1389 = _1242;
        _1390 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
    }
    else
    {
        _1378 = _1067;
        _1379 = _1067;
        _1380 = _1067;
        _1381 = _1067;
        _1382 = _1067;
        _1383 = _1067;
        _1384 = _1067;
        _1385 = _1067;
        _1386 = _1067;
        _1387 = _1067;
        _1388 = _1067;
        _1389 = _1067;
        _1390 = 0.0;
        _1391 = 0.0;
        _1392 = 0.0;
    }
    float _1402 = (cbModelParam._m0[1u].x * (_1390 - _1079)) + _1079;
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1080)) + _1080;
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1081)) + _1081;
    float _1425 = fma(_1404, cbSceneParam._m0[89u].z, fma(_1403, cbSceneParam._m0[89u].y, _1402 * cbSceneParam._m0[89u].x));
    float _1428 = fma(_1404, cbSceneParam._m0[90u].z, fma(_1403, cbSceneParam._m0[90u].y, _1402 * cbSceneParam._m0[90u].x));
    float _1431 = fma(_1404, cbSceneParam._m0[91u].z, fma(_1403, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1402));
    float _1446 = _675 * 0.5;
    float _1447 = _676 * 0.5;
    float _1448 = _677 * 0.5;
    float _1449 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1452 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1455 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1378, _1381, _1384, _1387));
    float _1489;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1462 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1066, _1070, _1073, _1076));
        float _1466 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1068, _1071, _1074, _1077));
        float _1470 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1069, _1072, _1075, _1078));
        float _1477 = dot(vec4(cbModelParam._m0[39u]), vec4(_1446, _1447, _1448, 1.0));
        _1489 = dot(vec3(isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1477) ? 0.0 : (isnan(0.0) ? _1477 : max(0.0, _1477))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1489 = 1.0;
    }
    float _1500;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1491 = dot(vec4(cbModelParam._m0[40u]), vec4(_1446, _1447, _1448, 1.0));
        _1500 = dot(vec3(isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1491) ? 0.0 : (isnan(0.0) ? _1491 : max(0.0, _1491))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1500 = 1.0;
    }
    float _1504 = (_1500 * cbModelParam._m0[1u].x) + (_1489 * (1.0 - cbModelParam._m0[1u].x));
    float _1514 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _507);
    float _1515 = isnan(_1514) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1514 : min(cbModelParam._m0[25u].z, _1514));
    float _1597;
    float _1599;
    float _1601;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1564 = fma(_736, cbModelParam._m0[13u].z, fma(_732, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _728)) + cbModelParam._m0[13u].w;
        float _1568 = fma(_736, cbModelParam._m0[14u].z, fma(_732, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _728)) + cbModelParam._m0[14u].w;
        float _1572 = fma(_736, cbModelParam._m0[15u].z, fma(_732, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _728)) + cbModelParam._m0[15u].w;
        float _1575 = fma(_677, cbModelParam._m0[13u].z, fma(_676, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _675));
        float _1578 = fma(_677, cbModelParam._m0[14u].z, fma(_676, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _675));
        float _1581 = fma(_677, cbModelParam._m0[15u].z, fma(_676, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _675));
        float _1609;
        if (_1575 > 0.0)
        {
            _1609 = abs((1.0 - _1564) / _1575);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1564 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1609 = frontier_phi_17_15_ladder;
        }
        float _1780;
        if (_1578 > 0.0)
        {
            _1780 = abs((1.0 - _1568) / _1578);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1568 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1780 = frontier_phi_26_22_ladder;
        }
        float _2075;
        if (_1581 > 0.0)
        {
            _2075 = abs((1.0 - _1572) / _1581);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1572 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2075 = frontier_phi_38_33_ladder;
        }
        float _2077 = isnan(_1780) ? _1609 : (isnan(_1609) ? _1780 : min(_1609, _1780));
        float _2078 = isnan(_2075) ? _2077 : (isnan(_2077) ? _2075 : min(_2077, _2075));
        float _2082 = (_2078 * _1575) + _1564;
        float _2083 = (_2078 * _1578) + _1568;
        float _2084 = (_2078 * _1581) + _1572;
        float _2085 = _2078 * 9.9999997473787516355514526367188e-05;
        float _2087 = (-1.0) - _2085;
        float _2089 = _2085 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2084 > _2089) || ((_2084 < _2087) || ((_2083 > _2089) || ((_2083 < _2087) || ((_2082 < _2087) || (_2082 > _2089))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2229 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2084, cbModelParam._m0[9u].z, fma(_2083, cbModelParam._m0[9u].y, _2082 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2084, cbModelParam._m0[10u].z, fma(_2083, cbModelParam._m0[10u].y, _2082 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2084, cbModelParam._m0[11u].z, fma(_2083, cbModelParam._m0[11u].y, _2082 * cbModelParam._m0[11u].x))), _1515);
            frontier_phi_16_38_ladder = _2229.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2229.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2229.x * cbModelParam._m0[1u].y;
        }
        _1597 = frontier_phi_16_38_ladder_2;
        _1599 = frontier_phi_16_38_ladder_1;
        _1601 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1585 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_675, _676, _677), _1515);
        _1597 = _1585.x * cbModelParam._m0[1u].y;
        _1599 = _1585.y * cbModelParam._m0[1u].y;
        _1601 = _1585.z * cbModelParam._m0[1u].y;
    }
    float _1605 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _507);
    float _1606 = isnan(_1605) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1605 : min(cbModelParam._m0[25u].w, _1605));
    float _1697;
    float _1699;
    float _1701;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1661 = fma(_736, cbModelParam._m0[21u].z, fma(_732, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _728)) + cbModelParam._m0[21u].w;
        float _1665 = fma(_736, cbModelParam._m0[22u].z, fma(_732, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _728)) + cbModelParam._m0[22u].w;
        float _1669 = fma(_736, cbModelParam._m0[23u].z, fma(_732, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _728)) + cbModelParam._m0[23u].w;
        float _1672 = fma(_677, cbModelParam._m0[21u].z, fma(_676, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _675));
        float _1675 = fma(_677, cbModelParam._m0[22u].z, fma(_676, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _675));
        float _1678 = fma(_677, cbModelParam._m0[23u].z, fma(_676, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _675));
        float _1785;
        if (_1672 > 0.0)
        {
            _1785 = abs((1.0 - _1661) / _1672);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1661 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1785 = frontier_phi_28_24_ladder;
        }
        float _2102;
        if (_1675 > 0.0)
        {
            _2102 = abs((1.0 - _1665) / _1675);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1665 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2102 = frontier_phi_40_35_ladder;
        }
        float _2429;
        if (_1678 > 0.0)
        {
            _2429 = abs((1.0 - _1669) / _1678);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1669 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2429 = frontier_phi_50_47_ladder;
        }
        float _2431 = isnan(_2102) ? _1785 : (isnan(_1785) ? _2102 : min(_1785, _2102));
        float _2432 = isnan(_2429) ? _2431 : (isnan(_2431) ? _2429 : min(_2431, _2429));
        float _2436 = (_2432 * _1672) + _1661;
        float _2437 = (_2432 * _1675) + _1665;
        float _2438 = (_2432 * _1678) + _1669;
        float _2439 = _2432 * 9.9999997473787516355514526367188e-05;
        float _2440 = (-1.0) - _2439;
        float _2442 = _2439 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2438 > _2442) || ((_2438 < _2440) || ((_2437 > _2442) || ((_2437 < _2440) || ((_2436 < _2440) || (_2436 > _2442))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2556 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2438, cbModelParam._m0[17u].z, fma(_2437, cbModelParam._m0[17u].y, _2436 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2438, cbModelParam._m0[18u].z, fma(_2437, cbModelParam._m0[18u].y, _2436 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2438, cbModelParam._m0[19u].z, fma(_2437, cbModelParam._m0[19u].y, _2436 * cbModelParam._m0[19u].x))), _1606);
            frontier_phi_25_50_ladder = _2556.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2556.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2556.x * cbModelParam._m0[1u].z;
        }
        _1697 = frontier_phi_25_50_ladder_2;
        _1699 = frontier_phi_25_50_ladder_1;
        _1701 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1681 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_675, _676, _677), _1606);
        _1697 = _1681.x * cbModelParam._m0[1u].z;
        _1699 = _1681.y * cbModelParam._m0[1u].z;
        _1701 = _1681.z * cbModelParam._m0[1u].z;
    }
    float _1713 = ((((1.0 - _696) * ((_683 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_696 * _683)) * _667;
    float _1714 = _1713 * ((cbModelParam._m0[1u].w * (_1697 - _1597)) + _1597);
    float _1715 = _1713 * ((cbModelParam._m0[1u].w * (_1699 - _1599)) + _1599);
    float _1716 = _1713 * ((cbModelParam._m0[1u].w * (_1701 - _1601)) + _1601);
    float _1719 = fma(_1716, cbSceneParam._m0[89u].z, fma(_1715, cbSceneParam._m0[89u].y, _1714 * cbSceneParam._m0[89u].x));
    float _1722 = fma(_1716, cbSceneParam._m0[90u].z, fma(_1715, cbSceneParam._m0[90u].y, _1714 * cbSceneParam._m0[90u].x));
    float _1725 = fma(_1716, cbSceneParam._m0[91u].z, fma(_1715, cbSceneParam._m0[91u].y, _1714 * cbSceneParam._m0[91u].x));
    float _1759 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1763 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1767 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1771 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1772 = _1759 / _1771;
    float _1773 = _1763 / _1771;
    float _1774 = _1767 / _1771;
    float _1921;
    float _1922;
    float _1923;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1801 = ((uint(_1774 > cbSceneParam._m0[59u].y) + uint(_1774 > cbSceneParam._m0[59u].x)) + uint(_1774 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1802 = _1801 + 43u;
        uint _1810 = _1801 + 44u;
        uint _1818 = _1801 + 45u;
        uint _1826 = _1801 + 46u;
        float _1837 = fma(_1771, cbSceneParam._m0[_1802].w, fma(_1767, cbSceneParam._m0[_1802].z, fma(_1763, cbSceneParam._m0[_1802].y, _1759 * cbSceneParam._m0[_1802].x)));
        float _1841 = fma(_1771, cbSceneParam._m0[_1810].w, fma(_1767, cbSceneParam._m0[_1810].z, fma(_1763, cbSceneParam._m0[_1810].y, _1759 * cbSceneParam._m0[_1810].x)));
        float _1849 = fma(_1771, cbSceneParam._m0[_1826].w, fma(_1767, cbSceneParam._m0[_1826].z, fma(_1763, cbSceneParam._m0[_1826].y, _1759 * cbSceneParam._m0[_1826].x)));
        float _1854 = cbSceneParam._m0[33u].z * _1849;
        float _1856 = cbSceneParam._m0[33u].w * _1849;
        float _1859 = fma(_1771, cbSceneParam._m0[_1818].w, fma(_1767, cbSceneParam._m0[_1818].z, fma(_1763, cbSceneParam._m0[_1818].y, _1759 * cbSceneParam._m0[_1818].x))) / _1849;
        float _1907 = (cbSceneParam._m0[33u].x - sqrt(((_1773 * _1773) + (_1772 * _1772)) + (_1774 * _1774))) * cbSceneParam._m0[33u].y;
        float _4225 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1914 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1854 + _1837) / _1849, (_1856 + _1841) / _1849), _1859), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1856 + _1837) / _1849, (_1841 - _1854) / _1849), _1859), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1837 - _1854) / _1849, (_1841 - _1856) / _1849), _1859), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1837 - _1856) / _1849, (_1854 + _1841) / _1849), _1859), 0.0)).x), vec4(0.25)));
        _1921 = 1.0 - (_1914 * cbSceneParam._m0[34u].x);
        _1922 = 1.0 - (_1914 * cbSceneParam._m0[34u].y);
        _1923 = 1.0 - (_1914 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1921 = 1.0;
        _1922 = 1.0;
        _1923 = 1.0;
    }
    float _1987;
    float _1989;
    float _1991;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1975 = fma(_1771, cbSceneParam._m0[63u].w, fma(_1767, cbSceneParam._m0[63u].z, fma(_1763, cbSceneParam._m0[63u].y, _1759 * cbSceneParam._m0[63u].x)));
        float _1976 = fma(_1771, cbSceneParam._m0[60u].w, fma(_1767, cbSceneParam._m0[60u].z, fma(_1763, cbSceneParam._m0[60u].y, _1759 * cbSceneParam._m0[60u].x))) / _1975;
        float _1977 = fma(_1771, cbSceneParam._m0[61u].w, fma(_1767, cbSceneParam._m0[61u].z, fma(_1763, cbSceneParam._m0[61u].y, _1759 * cbSceneParam._m0[61u].x))) / _1975;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1976 >= cbSceneParam._m0[64u].x) && (_1977 >= cbSceneParam._m0[64u].y)) && (_1976 <= cbSceneParam._m0[64u].z)) && (_1977 <= cbSceneParam._m0[64u].w))
        {
            float _2115 = fma(_1771, cbSceneParam._m0[62u].w, fma(_1767, cbSceneParam._m0[62u].z, fma(_1763, cbSceneParam._m0[62u].y, _1759 * cbSceneParam._m0[62u].x))) / _1975;
            float _2119 = isnan(cbSceneParam._m0[41u].w) ? _2115 : (isnan(_2115) ? cbSceneParam._m0[41u].w : max(_2115, cbSceneParam._m0[41u].w));
            float _2162 = (cbSceneParam._m0[33u].x - sqrt(((_1773 * _1773) + (_1772 * _1772)) + (_1774 * _1774))) * cbSceneParam._m0[33u].y;
            float _4241 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
            float _2169 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1976, cbSceneParam._m0[33u].w + _1977), _2119), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1976, _1977 - cbSceneParam._m0[33u].z), _2119), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1976 - cbSceneParam._m0[33u].z, _1977 - cbSceneParam._m0[33u].w), _2119), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1976 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1977), _2119), 0.0)).x), vec4(0.25)));
            float _2173 = 1.0 - (_2169 * cbSceneParam._m0[34u].x);
            float _2174 = 1.0 - (_2169 * cbSceneParam._m0[34u].y);
            float _2175 = 1.0 - (_2169 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2175) ? _1923 : (isnan(_1923) ? _2175 : min(_1923, _2175));
            frontier_phi_37_36_ladder_1 = isnan(_2174) ? _1922 : (isnan(_1922) ? _2174 : min(_1922, _2174));
            frontier_phi_37_36_ladder_2 = isnan(_2173) ? _1921 : (isnan(_1921) ? _2173 : min(_1921, _2173));
        }
        else
        {
            frontier_phi_37_36_ladder = _1923;
            frontier_phi_37_36_ladder_1 = _1922;
            frontier_phi_37_36_ladder_2 = _1921;
        }
        _1987 = frontier_phi_37_36_ladder_2;
        _1989 = frontier_phi_37_36_ladder_1;
        _1991 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1987 = _1921;
        _1989 = _1922;
        _1991 = _1923;
    }
    uvec4 _1996 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1998 = _1996.x * 14u;
    uint _1999 = _1998 + 13u;
    float _2006 = _667 + (-1.0);
    float _2011 = (cbLight._m0[_1999].x * _2006) + 1.0;
    float _2012 = (cbLight._m0[_1999].y * _2006) + 1.0;
    float _2013 = (cbLight._m0[_1999].z * _2006) + 1.0;
    float _2014 = (cbLight._m0[_1999].w * _2006) + 1.0;
    uint _2015 = _1998 + 5u;
    float _2021 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
    uint _2025 = _1998 + 4u;
    float _2034 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
    uint _2038 = _1998 | 1u;
    float _2049 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_504, _505, _506));
    float _2052 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_504, _505, _506));
    float _4277 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _4288 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2057 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * 0.3183098733425140380859375;
    float _2059 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * 0.3183098733425140380859375;
    float _2066 = ((cbLight._m0[_2015].x * _2021) * _2059) + (((cbLight._m0[_2025].x * _1987) * _2034) * _2057);
    float _2067 = ((_2021 * cbLight._m0[_2015].y) * _2059) + (((cbLight._m0[_2025].y * _1989) * _2034) * _2057);
    float _2068 = ((_2021 * cbLight._m0[_2015].z) * _2059) + (((cbLight._m0[_2025].z * _1991) * _2034) * _2057);
    uvec4 _2072 = floatBitsToUint(cbLight._m0[_1998 + 12u]);
    bool _2074 = _2072.x == 0u;
    float _2176;
    float _2178;
    float _2180;
    if (_2074)
    {
        _2176 = _2066;
        _2178 = _2067;
        _2180 = _2068;
    }
    else
    {
        uint _2184 = _1998 + 6u;
        float _2200 = (dot(vec3(cbLight._m0[_1998 + 2u].xyz), vec3(_504, _505, _506)) * 0.5) + 0.5;
        float _2201 = _2200 * _2200;
        float _4299 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2202 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2203 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2176 = (((cbLight._m0[_2184].x * 0.3183098733425140380859375) * _2202) * _2203) + _2066;
        _2178 = (((cbLight._m0[_2184].y * 0.3183098733425140380859375) * _2202) * _2203) + _2067;
        _2180 = (((cbLight._m0[_2184].z * 0.3183098733425140380859375) * _2202) * _2203) + _2068;
    }
    bool _2183 = _2072.y == 0u;
    float _2238;
    float _2240;
    float _2242;
    if (_2183)
    {
        _2238 = _2176;
        _2240 = _2178;
        _2242 = _2180;
    }
    else
    {
        uint _2400 = _1998 + 7u;
        float _2416 = (dot(vec3(cbLight._m0[_1998 + 3u].xyz), vec3(_504, _505, _506)) * 0.5) + 0.5;
        float _2417 = _2416 * _2416;
        float _4315 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2418 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _2419 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2238 = (((cbLight._m0[_2400].x * 0.3183098733425140380859375) * _2418) * _2419) + _2176;
        _2240 = (((cbLight._m0[_2400].y * 0.3183098733425140380859375) * _2418) * _2419) + _2178;
        _2242 = (((cbLight._m0[_2400].z * 0.3183098733425140380859375) * _2418) * _2419) + _2180;
    }
    uint _2245 = _1998 + 8u;
    float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1998].w)) * _507) * 0.949999988079071044921875);
    float _2259 = _2258 * _2258;
    float _2260 = cbLight._m0[_1998].x + _584;
    float _2261 = cbLight._m0[_1998].y + _585;
    float _2262 = cbLight._m0[_1998].z + _586;
    float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
    float _2267 = _2266 * _2260;
    float _2268 = _2266 * _2261;
    float _2269 = _2266 * _2262;
    float _2270 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_1998].xyz));
    float _4331 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _4342 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _2274 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _2275 = dot(vec3(_504, _505, _506), vec3(_2267, _2268, _2269));
    float _4353 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2278 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2279 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_2267, _2268, _2269));
    float _4364 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2283 = _2259 * _2259;
    float _2287 = ((_2278 * _2278) * (_2283 + (-1.0))) + 1.0;
    float _2298 = (exp2(log2(1.0 - (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2299 = 1.0 - _2259;
    float _2310 = (0.5 / (((_2274 * ((_2273 * _2299) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2299) + _2259) * _2273))) * _2273;
    float _4375 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2312 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2283 / ((_2287 * _2287) * 3.141590118408203125));
    uint _2326 = _1998 + 9u;
    float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2038].w)) * _507) * 0.949999988079071044921875);
    float _2338 = _2337 * _2337;
    float _2339 = cbLight._m0[_2038].x + _584;
    float _2340 = cbLight._m0[_2038].y + _585;
    float _2341 = cbLight._m0[_2038].z + _586;
    float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
    float _2346 = _2345 * _2339;
    float _2347 = _2345 * _2340;
    float _2348 = _2345 * _2341;
    float _2349 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2038].xyz));
    float _4386 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _2353 = dot(vec3(_504, _505, _506), vec3(_2346, _2347, _2348));
    float _4397 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2356 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _2357 = dot(vec3(cbLight._m0[_2038].xyz), vec3(_2346, _2347, _2348));
    float _4408 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2361 = _2338 * _2338;
    float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
    float _2374 = (exp2(log2(1.0 - (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2375 = 1.0 - _2338;
    float _2385 = (0.5 / (((_2274 * ((_2352 * _2375) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2375) + _2338) * _2352))) * _2352;
    float _4419 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2387 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
    float _2397 = (((_2374 * cbLight._m0[_2326].x) * _2387) * _2021) + ((((cbLight._m0[_2245].x * _1987) * _2298) * _2312) * _2034);
    float _2398 = (((_2374 * cbLight._m0[_2326].y) * _2387) * _2021) + ((((cbLight._m0[_2245].y * _1989) * _2298) * _2312) * _2034);
    float _2399 = (((_2374 * cbLight._m0[_2326].z) * _2387) * _2021) + ((((cbLight._m0[_2245].z * _1991) * _2298) * _2312) * _2034);
    float _2455;
    float _2457;
    float _2459;
    if (_2074)
    {
        _2455 = _2397;
        _2457 = _2398;
        _2459 = _2399;
    }
    else
    {
        uint _2461 = _1998 + 2u;
        uint _2465 = _1998 + 10u;
        float _2479 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2461].w)) * _507) * 0.949999988079071044921875);
        float _2480 = _2479 * _2479;
        float _2481 = cbLight._m0[_2461].x + _584;
        float _2482 = cbLight._m0[_2461].y + _585;
        float _2483 = cbLight._m0[_2461].z + _586;
        float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
        float _2488 = _2487 * _2481;
        float _2489 = _2487 * _2482;
        float _2490 = _2487 * _2483;
        float _2491 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2461].xyz));
        float _4430 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2495 = dot(vec3(_504, _505, _506), vec3(_2488, _2489, _2490));
        float _4441 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _2499 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_2488, _2489, _2490));
        float _4452 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2503 = _2480 * _2480;
        float _2507 = ((_2498 * _2498) * (_2503 + (-1.0))) + 1.0;
        float _2516 = (exp2(log2(1.0 - (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2517 = 1.0 - _2480;
        float _2527 = (0.5 / (((_2274 * ((_2494 * _2517) + _2480)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2517) + _2480) * _2494))) * _2494;
        float _4463 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2529 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2503 / ((_2507 * _2507) * 3.141590118408203125));
        float _2530 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2455 = (((_2516 * cbLight._m0[_2465].x) * _2529) * _2530) + _2397;
        _2457 = (((_2516 * cbLight._m0[_2465].y) * _2529) * _2530) + _2398;
        _2459 = (((_2516 * cbLight._m0[_2465].z) * _2529) * _2530) + _2399;
    }
    float _2561;
    float _2563;
    float _2565;
    if (_2183)
    {
        _2561 = _2455;
        _2563 = _2457;
        _2565 = _2459;
    }
    else
    {
        uint _2572 = _1998 + 3u;
        uint _2576 = _1998 + 11u;
        float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2572].w)) * _507) * 0.949999988079071044921875);
        float _2591 = _2590 * _2590;
        float _2592 = cbLight._m0[_2572].x + _584;
        float _2593 = cbLight._m0[_2572].y + _585;
        float _2594 = cbLight._m0[_2572].z + _586;
        float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
        float _2599 = _2598 * _2592;
        float _2600 = _2598 * _2593;
        float _2601 = _2598 * _2594;
        float _2602 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2572].xyz));
        float _4479 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2606 = dot(vec3(_504, _505, _506), vec3(_2599, _2600, _2601));
        float _4490 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2610 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_2599, _2600, _2601));
        float _4501 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2614 = _2591 * _2591;
        float _2618 = ((_2609 * _2609) * (_2614 + (-1.0))) + 1.0;
        float _2627 = (exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2628 = 1.0 - _2591;
        float _2638 = (0.5 / (((_2274 * ((_2605 * _2628) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2274 * _2628) + _2591) * _2605))) * _2605;
        float _4512 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2640 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2614 / ((_2618 * _2618) * 3.141590118408203125));
        float _2641 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2561 = (((_2627 * cbLight._m0[_2576].x) * _2640) * _2641) + _2455;
        _2563 = (((_2627 * cbLight._m0[_2576].y) * _2640) * _2641) + _2457;
        _2565 = (((_2627 * cbLight._m0[_2576].z) * _2640) * _2641) + _2459;
    }
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    if (_1996.y == 0u)
    {
        uvec4 _2662 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2663 = _2662.x;
        uint _2674 = uint((float(_2662.y) * floor(float(uint(cbSceneParam._m0[85u].y * _605) / _2663))) + floor(float(uint(cbSceneParam._m0[85u].x * _604) / _2663)));
        float _2684 = (log2(_1774 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2685 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        uint _2688 = uint(isnan(14.0) ? _2685 : (isnan(_2685) ? 14.0 : min(_2685, 14.0)));
        uvec4 _2693 = texelFetch(g_lightClusterGridBuffer, int(((_2688 << 2u) + (_2674 << 6u)) >> 2u));
        uint _2694 = _2693.x;
        uint _2695 = _2662.z;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        if (((((1u << ((_2695 >> 4u) & 15u)) + 4294967295u) & _2694) == 0u) || ((_2695 & 240u) == 0u))
        {
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
        }
        else
        {
            float _2775;
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            uint _2933 = 0u;
            uint _2942;
            bool _2943;
            for (;;)
            {
                _2942 = texelFetch(g_lightClassification, int((((_2688 << 5u) + (_2674 << 9u)) + (_2933 << 2u)) >> 2u)).x;
                _2943 = _2942 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2943)
                {
                    frontier_phi_71_pred = _2932;
                    frontier_phi_71_pred_1 = _2931;
                    frontier_phi_71_pred_2 = _2930;
                    frontier_phi_71_pred_3 = _2929;
                    frontier_phi_71_pred_4 = _2928;
                    frontier_phi_71_pred_5 = _2927;
                }
                else
                {
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    uint _3078;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2932;
                    _3078 = _2942;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    for (;;)
                    {
                        uint _3082 = uint(findLSB(_3078)) + (_2933 << 5u);
                        uint _3079 = (_3078 + 4294967295u) & _3078;
                        uint _3084 = _3082 * 48u;
                        vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 3u)).x));
                        uint _3104 = (_3082 * 48u) + 4u;
                        vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 3u)).x));
                        uint _3123 = (_3082 * 48u) + 8u;
                        vec3 _3134 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x));
                        float _3138 = _3098.x - _1772;
                        float _3139 = _3098.y - _1773;
                        float _3140 = _3098.z - _1774;
                        float _3141 = dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140));
                        float _3144 = inversesqrt(_3141);
                        float _3145 = _3144 * _3138;
                        float _3146 = _3144 * _3139;
                        float _3147 = _3144 * _3140;
                        float _3148 = dot(vec3(_623, _626, _629), vec3(_3145, _3146, _3147));
                        float _3153 = 1.0 - (_3141 * _3098.w);
                        float _4538 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3154 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3155 = sqrt(_3141) * _3117.w;
                        float _3158 = 1.39999997615814208984375 / (_3155 + 1.39999997615814208984375);
                        float _3159 = _3158 * _3158;
                        float _3162 = ((1.0 - _3159) * _3148) + _3159;
                        float _3165 = _3155 * _3155;
                        float _3169 = ((isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0))) * _3154) / ((_3165 * 0.699999988079071044921875) + 1.0);
                        float _3173 = (-0.0) - _1772;
                        float _3174 = (-0.0) - _1773;
                        float _3175 = (-0.0) - _1774;
                        float _3179 = inversesqrt(dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175)));
                        float _3180 = _3179 * _3173;
                        float _3181 = _3179 * _3174;
                        float _3182 = _3179 * _3175;
                        float _3189 = exp2(log2(1.0 / ((_3165 * 3.5) + 5.0)) * 0.25);
                        float _3190 = 1.0 - _683;
                        float _3197 = sqrt(1.0 - ((1.0 - (_3190 * _3190)) * (1.0 - (_3189 * _3189))));
                        float _3198 = _3197 * _3197;
                        float _3199 = _3198 * _3198;
                        float _3200 = _3180 + _3145;
                        float _3201 = _3181 + _3146;
                        float _3202 = _3182 + _3147;
                        float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                        float _3210 = dot(vec3(_623, _626, _629), vec3(_3180, _3181, _3182));
                        float _4554 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3213 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                        float _3214 = dot(vec3(_623, _626, _629), vec3(_3206 * _3200, _3206 * _3201, _3206 * _3202));
                        float _4565 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3217 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3221 = ((_3217 * _3217) * (_3199 + (-1.0))) + 1.0;
                        float _3222 = _3158 * _3198;
                        float _3223 = _3222 * _3222;
                        float _3226 = ((1.0 - _3223) * _3148) + _3223;
                        float _4576 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3227 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3228 = 1.0 - _3198;
                        float _3238 = (0.5 / (((_3227 * ((_3213 * _3228) + _3198)) + 9.9999999392252902907785028219223e-09) + (((_3227 * _3228) + _3198) * _3213))) * _3227;
                        float _4587 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3249 = (((_3199 * 3.1415927410125732421875) * (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) / ((_3221 * _3221) * ((_3165 * 2.1991131305694580078125) + 3.141590118408203125))) * _3154;
                        _3002 = (_3169 * _3117.x) + _3075;
                        _3003 = (_3169 * _3117.y) + _3076;
                        _3004 = (_3169 * _3117.z) + _3077;
                        _2999 = (_3249 * _3134.x) + _3072;
                        _3000 = (_3249 * _3134.y) + _3073;
                        _3001 = (_3249 * _3134.z) + _3074;
                        if (_3079 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3004;
                            _3078 = _3079;
                        }
                    }
                    frontier_phi_71_pred = _3004;
                    frontier_phi_71_pred_1 = _3003;
                    frontier_phi_71_pred_2 = _3002;
                    frontier_phi_71_pred_3 = _3001;
                    frontier_phi_71_pred_4 = _3000;
                    frontier_phi_71_pred_5 = _2999;
                }
                _2785 = frontier_phi_71_pred;
                _2783 = frontier_phi_71_pred_1;
                _2781 = frontier_phi_71_pred_2;
                _2779 = frontier_phi_71_pred_3;
                _2777 = frontier_phi_71_pred_4;
                _2775 = frontier_phi_71_pred_5;
                uint _2934 = _2933 + 1u;
                if (_2934 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2927 = _2775;
                    _2928 = _2777;
                    _2929 = _2779;
                    _2930 = _2781;
                    _2931 = _2783;
                    _2932 = _2785;
                    _2933 = _2934;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
        }
        uvec4 _2788 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2789 = _2788.z;
        uint _2791 = (_2789 >> 8u) & 15u;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        if (((4294967295u << _2791) & _2694) == 0u)
        {
            _2895 = _2774;
            _2897 = _2776;
            _2899 = _2778;
            _2901 = _2780;
            _2903 = _2782;
            _2905 = _2784;
        }
        else
        {
            float _2920 = inversesqrt(dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774)));
            float _2921 = _2920 * _1772;
            float _2922 = _2920 * _1773;
            float _2923 = _2920 * _1774;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2791 < ((_2789 >> 12u) & 15u))
            {
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _3055 = _2774;
                float _3056 = _2776;
                float _3057 = _2778;
                float _3058 = _2780;
                float _3059 = _2782;
                float _3060 = _2784;
                uint _3061 = _2791;
                uint _3070;
                bool _3071;
                for (;;)
                {
                    _3070 = texelFetch(g_lightClassification, int((((_2688 << 5u) + (_2674 << 9u)) + (_3061 << 2u)) >> 2u)).x;
                    _3071 = _3070 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3071)
                    {
                        frontier_phi_82_pred = _3060;
                        frontier_phi_82_pred_1 = _3059;
                        frontier_phi_82_pred_2 = _3058;
                        frontier_phi_82_pred_3 = _3057;
                        frontier_phi_82_pred_4 = _3056;
                        frontier_phi_82_pred_5 = _3055;
                    }
                    else
                    {
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3276 = _3055;
                        float _3277 = _3056;
                        float _3278 = _3057;
                        float _3279 = _3058;
                        float _3280 = _3059;
                        float _3281 = _3060;
                        uint _3282 = _3070;
                        uint _3283;
                        vec4 _3308;
                        float _3309;
                        vec4 _3324;
                        vec3 _3336;
                        vec4 _3351;
                        vec4 _3366;
                        float _3412;
                        bool _3413;
                        for (;;)
                        {
                            uint _3293 = ((_3061 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3282));
                            _3283 = (_3282 + 4294967295u) & _3282;
                            uint _3295 = _3293 * 40u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            _3309 = _3308.w;
                            uint _3311 = (_3293 * 40u) + 4u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3326 = (_3293 * 40u) + 8u;
                            _3336 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x));
                            uint _3338 = (_3293 * 40u) + 16u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3353 = (_3293 * 40u) + 20u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3368 = (_3293 * 40u) + 24u;
                            vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3387 = (_3293 * 40u) + 28u;
                            vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            _3412 = fma(_1774, _3400.z, fma(_1773, _3400.y, _3400.x * _1772)) + _3400.w;
                            _3413 = !((fma(_1774, _3381.z, fma(_1773, _3381.y, _3381.x * _1772)) + _3381.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3413)
                            {
                                float _3440 = _3308.x - _1772;
                                float _3441 = _3308.y - _1773;
                                float _3442 = _3308.z - _1774;
                                float _3443 = dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442));
                                float _3446 = inversesqrt(_3443);
                                float _3447 = _3446 * _3440;
                                float _3448 = _3446 * _3441;
                                float _3449 = _3446 * _3442;
                                float _3453 = 1.0 - (_3443 / (_3309 * _3309));
                                float _4598 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3458 = sqrt(_3443) * _3324.w;
                                float _3460 = 1.39999997615814208984375 / (_3458 + 1.39999997615814208984375);
                                float _3461 = _3460 * _3460;
                                float _3464 = ((1.0 - _3461) * dot(vec3(_3447, _3448, _3449), vec3(_623, _626, _629))) + _3461;
                                float _3467 = _3458 * _3458;
                                float _3471 = (fma(_1774, _3351.z, fma(_1773, _3351.y, _3351.x * _1772)) + _3351.w) / _3412;
                                float _3472 = (fma(_1774, _3366.z, fma(_1773, _3366.y, _3366.x * _1772)) + _3366.w) / _3412;
                                float _3476 = 1.0 - dot(vec2(_3471, _3472), vec2(_3471, _3472));
                                float _4614 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3478 = _3477 * (((isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0))) * _3454) / ((_3467 * 0.699999988079071044921875) + 1.0));
                                float _3490 = exp2(log2(1.0 / ((_3467 * 3.5) + 5.0)) * 0.25);
                                float _3491 = 1.0 - _683;
                                float _3498 = sqrt(1.0 - ((1.0 - (_3491 * _3491)) * (1.0 - (_3490 * _3490))));
                                float _3499 = _3498 * _3498;
                                float _3500 = _3499 * _3499;
                                float _3501 = _3447 - _2921;
                                float _3502 = _3448 - _2922;
                                float _3503 = _3449 - _2923;
                                float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                                float _3511 = dot(vec3(_623, _626, _629), vec3((-0.0) - _2921, (-0.0) - _2922, (-0.0) - _2923));
                                float _4625 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3514 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3515 = dot(vec3(_623, _626, _629), vec3(_3507 * _3501, _3507 * _3502, _3507 * _3503));
                                float _4636 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3518 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3522 = ((_3518 * _3518) * (_3500 + (-1.0))) + 1.0;
                                float _3523 = _3460 * _3499;
                                float _3524 = _3523 * _3523;
                                float _3530 = ((1.0 - _3524) * dot(vec3(_623, _626, _629), vec3(_3447, _3448, _3449))) + _3524;
                                float _4647 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3532 = 1.0 - _3499;
                                float _3542 = (0.5 / (((_3531 * ((_3514 * _3532) + _3499)) + 9.9999999392252902907785028219223e-09) + (((_3531 * _3532) + _3499) * _3514))) * _3531;
                                float _4658 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3552 = (_3477 * _3454) * (((_3500 * 3.1415927410125732421875) * (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) / ((_3522 * _3522) * ((_3467 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3478 * _3324.z;
                                frontier_phi_88_pred_1 = _3478 * _3324.y;
                                frontier_phi_88_pred_2 = _3478 * _3324.x;
                                frontier_phi_88_pred_3 = _3552 * _3336.z;
                                frontier_phi_88_pred_4 = _3552 * _3336.y;
                                frontier_phi_88_pred_5 = _3552 * _3336.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3561 = frontier_phi_88_pred;
                            _3560 = frontier_phi_88_pred_1;
                            _3559 = frontier_phi_88_pred_2;
                            _3558 = frontier_phi_88_pred_3;
                            _3557 = frontier_phi_88_pred_4;
                            _3556 = frontier_phi_88_pred_5;
                            _3266 = _3559 + _3279;
                            _3267 = _3560 + _3280;
                            _3268 = _3561 + _3281;
                            _3263 = _3556 + _3276;
                            _3264 = _3557 + _3277;
                            _3265 = _3558 + _3278;
                            if (_3283 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3283;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3268;
                        frontier_phi_82_pred_1 = _3267;
                        frontier_phi_82_pred_2 = _3266;
                        frontier_phi_82_pred_3 = _3265;
                        frontier_phi_82_pred_4 = _3264;
                        frontier_phi_82_pred_5 = _3263;
                    }
                    _2906 = frontier_phi_82_pred;
                    _2904 = frontier_phi_82_pred_1;
                    _2902 = frontier_phi_82_pred_2;
                    _2900 = frontier_phi_82_pred_3;
                    _2898 = frontier_phi_82_pred_4;
                    _2896 = frontier_phi_82_pred_5;
                    uint _3062 = _3061 + 1u;
                    if (_3062 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3055 = _2896;
                        _3056 = _2898;
                        _3057 = _2900;
                        _3058 = _2902;
                        _3059 = _2904;
                        _3060 = _2906;
                        _3061 = _3062;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2902;
                frontier_phi_63_64_ladder_1 = _2906;
                frontier_phi_63_64_ladder_2 = _2904;
                frontier_phi_63_64_ladder_3 = _2900;
                frontier_phi_63_64_ladder_4 = _2898;
                frontier_phi_63_64_ladder_5 = _2896;
            }
            else
            {
                frontier_phi_63_64_ladder = _2780;
                frontier_phi_63_64_ladder_1 = _2784;
                frontier_phi_63_64_ladder_2 = _2782;
                frontier_phi_63_64_ladder_3 = _2778;
                frontier_phi_63_64_ladder_4 = _2776;
                frontier_phi_63_64_ladder_5 = _2774;
            }
            _2895 = frontier_phi_63_64_ladder_5;
            _2897 = frontier_phi_63_64_ladder_4;
            _2899 = frontier_phi_63_64_ladder_3;
            _2901 = frontier_phi_63_64_ladder;
            _2903 = frontier_phi_63_64_ladder_2;
            _2905 = frontier_phi_63_64_ladder_1;
        }
        float _2910 = isnan(1.0) ? _667 : (isnan(_667) ? 1.0 : min(_667, 1.0));
        _2707 = (_2910 * _2901) + _2238;
        _2709 = (_2910 * _2903) + _2240;
        _2711 = (_2910 * _2905) + _2242;
        _2713 = ((_2895 * 0.039999999105930328369140625) * _2910) + _2561;
        _2715 = ((_2897 * 0.039999999105930328369140625) * _2910) + _2563;
        _2717 = ((_2899 * 0.039999999105930328369140625) * _2910) + _2565;
    }
    else
    {
        _2707 = _2238;
        _2709 = _2240;
        _2711 = _2242;
        _2713 = _2561;
        _2715 = _2563;
        _2717 = _2565;
    }
    float _4674 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4685 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4696 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _2734 = ((isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2707 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _667))) + ((_2713 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1504)) * cbPerFrame._m0[3u].x);
    float _2735 = ((isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2709 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _667))) + ((_2715 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1504)) * cbPerFrame._m0[3u].x);
    float _2736 = ((isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2711 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _667))) + ((_2717 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1504)) * cbPerFrame._m0[3u].x);
    uint _2737 = _236 + 6u;
    float _2745 = _604 / cbSceneParam._m0[86u].x;
    float _2746 = _605 / cbSceneParam._m0[86u].y;
    vec4 _2760 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2745, _2746, (log2((isnan(cbSceneParam._m0[77u].w) ? _525 : (isnan(_525) ? cbSceneParam._m0[77u].w : min(_525, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2762 = _2760.x;
    float _2763 = _2760.y;
    float _2764 = _2760.z;
    float _2765 = _2760.w;
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    if (_525 > cbSceneParam._m0[78u].w)
    {
        float _2799 = isnan(_525) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _525 : min(cbSceneParam._m0[80u].w, _525));
        float _2800 = _2799 / _525;
        float _2811 = _2800 * _577;
        float _2812 = _578 * _2800;
        float _2813 = (-0.0) - _2812;
        float _2815 = _2800 * _579;
        float _2817 = (cbSceneParam._m0[77u].w * _2813) / _2799;
        float _2818 = _2817 + cbSceneParam._m0[79u].w;
        float _2819 = cbSceneParam._m0[79u].w - _2812;
        float _2825 = sqrt(((_2811 * _2811) + (_2812 * _2812)) + (_2815 * _2815));
        float _2828 = (1.0 - (cbSceneParam._m0[77u].w / _2799)) * _2825;
        float _2833 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2835 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3012;
        if (abs((_2813 - _2817) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3012 = ((((_2818 > 0.0) ? exp2(_2833 * _2818) : (2.0 - exp2(_2835 * _2818))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2828;
        }
        else
        {
            float _2956 = 1.0 / cbSceneParam._m0[80u].x;
            float _2957 = isnan(_2819) ? _2818 : (isnan(_2818) ? _2819 : max(_2818, _2819));
            float _2958 = isnan(_2819) ? _2818 : (isnan(_2818) ? _2819 : min(_2818, _2819));
            float _2967 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : min(_2957, 0.0));
            float _2968 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : min(_2958, 0.0));
            _3012 = ((abs(_2825 / _2813) * cbSceneParam._m0[80u].y) * ((((_2967 - _2968) * 2.0) - ((exp2(_2833 * (isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0)))) - exp2(_2833 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0))))) * _2956)) - ((exp2(_2835 * _2967) - exp2(_2835 * _2968)) * _2956))) + (_2828 * cbSceneParam._m0[80u].z);
        }
        vec4 _3014 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2745, _2746, 1.0), 0.0);
        float _3023 = exp2((_3012 * (-1.44269502162933349609375)) * (1.0 - _3014.w));
        float _3024 = log2(_3023);
        float _3040 = log2(_2765);
        _2837 = (exp2(_3040 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].x)) * _3014.x) / cbSceneParam._m0[78u].x)) + _2762;
        _2839 = (exp2(_3040 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].y)) * _3014.y) / cbSceneParam._m0[78u].y)) + _2763;
        _2841 = (exp2(_3040 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3024 * cbSceneParam._m0[78u].z)) * _3014.z) / cbSceneParam._m0[78u].z)) + _2764;
        _2843 = _3023 * _2765;
    }
    else
    {
        _2837 = _2762;
        _2839 = _2763;
        _2841 = _2764;
        _2843 = _2765;
    }
    bool _3050;
    vec4 _2853;
    vec4 _2875;
    float _2877;
    float _2881;
    float _2882;
    float _2883;
    float _2884;
    bool _2894;
    for (;;)
    {
        _2853 = cbMatDynParam._m0[0u];
        float _2855 = roundEven(_2853.y);
        bool _2856 = _2855 == 3.0;
        float _2857 = log2(_2843);
        float _2864 = exp2(_2857 * cbSceneParam._m0[78u].x) * _2734;
        float _2865 = exp2(_2857 * cbSceneParam._m0[78u].y) * _2735;
        float _2866 = exp2(_2857 * cbSceneParam._m0[78u].z) * _2736;
        float _2873 = _593 + (-0.5);
        _2875 = cbMtdParam._m0[1u];
        _2877 = _2875.y * _2873;
        float _2880 = (_2855 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2881 = _2880 * (_2856 ? _2864 : (_2864 + (cbSceneParam._m0[72u].w * _2837)));
        _2882 = _2880 * (_2856 ? _2865 : (_2865 + (cbSceneParam._m0[72u].w * _2839)));
        _2883 = _2880 * (_2856 ? _2866 : (_2866 + (cbSceneParam._m0[72u].w * _2841)));
        _2884 = _2873 * 0.999000012874603271484375;
        _2894 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2894)
        {
            if ((cbInstanceData._m0[_236 + 7u].x + _2884) < 0.5)
            {
                _3050 = true;
                break;
            }
        }
        uint _2991 = _642 + uint(_2853.w);
        if ((cbInstanceData._m0[_2991].w < 1.0) && ((cbInstanceData._m0[_2991].w + _2884) < 0.5))
        {
            _3050 = true;
            break;
        }
        if ((_2877 + 1.0) < _2875.x)
        {
            _3050 = true;
            break;
        }
        _3050 = false;
        break;
    }
    float _3254;
    if (_3050)
    {
        discard_state = true;
        _3254 = 0.0;
    }
    else
    {
        _3254 = cbInstanceData._m0[_2737].w;
    }
    SV_Target.x = _2881;
    SV_Target.y = _2882;
    SV_Target.z = _2883;
    SV_Target.w = _3254;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2737].w;
    discard_exit();
}


