#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1121;
float _3767;
float _3768;
float _3769;
float _3770;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _303 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((_262 * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, (_263 * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _333 = _329.z;
    float _337 = (_329.x * 2.0) + (-1.0);
    float _338 = (_329.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_337, _338), vec2(_337, _338));
    float _3779 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _345 = sqrt(1.0 - (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))));
    float _350 = _337 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_303.x * 2.0) + (-1.0)));
    float _351 = _338 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_303.y * 2.0) + (-1.0)));
    vec4 _364 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _366 = _364.x;
    float _367 = 1.0 - _366;
    float _400 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_366 - _367) * cbMtdParam._m0[24u].w) + _367) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3790 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _401 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _409 = ((((cbMtdParam._m0[10u].x - _288) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _401) + _288;
    float _410 = ((((cbMtdParam._m0[10u].y - _289) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _401) + _289;
    float _411 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _290)) * _401) + _290;
    float _416 = (((_303.z - _333) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _333;
    float _420 = ((cbMtdParam._m0[23u].y - _416) * _401) + _416;
    vec4 _442 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _444 = _442.x;
    float _445 = _442.y;
    float _454 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_231, _232, _233, 0.0));
    vec4 _469 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _262) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _263) + cbTextureTilingScale._m0[18u].w));
    float _471 = _469.x;
    float _476 = fract(_469.w + cbPerFrame._m0[22u].x);
    float _478 = (1.0 - _476) * _471;
    float _483 = ((_476 + (-1.0)) + _471) * 9.0;
    float _485 = ((_471 + (-1.0)) + _476) * 9.0;
    float _486 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _487 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _501 = (_478 * ((_469.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _486 : (isnan(_486) ? 3.0 : min(_486, 3.0))) * 3.1415927410125732421875);
    float _503 = (_478 * ((_469.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _487 : (isnan(_487) ? 3.0 : min(_487, 3.0))) * 3.1415927410125732421875);
    float _507 = inversesqrt(dot(vec3(_501, _503, 1.0), vec3(_501, _503, 1.0)));
    float _523 = (((((0.5 - _444) + ((_501 * 0.5) * _507)) * _454) + _444) * 2.0) + (-1.0);
    float _524 = (((((0.5 - _445) + ((_507 * 0.5) * _503)) * _454) + _445) * 2.0) + (-1.0);
    float _525 = dot(vec2(_523, _524), vec2(_523, _524));
    float _3821 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _541 = ((((cbMtdParam._m0[22u].z * _350) - _350) + _523) * _401) + _350;
    float _542 = ((((cbMtdParam._m0[22u].z * _351) - _351) + _524) * _401) + _351;
    float _543 = (_401 * (sqrt(1.0 - (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) - _345)) + _345;
    float _545 = cbMtdParam._m0[22u].x + _329.w;
    float _548 = fma(_543, _231, fma(_542, _237 * TANGENT.x, (_223 * _215) * _541));
    float _551 = fma(_543, _232, fma(_542, _237 * TANGENT.y, (_223 * _216) * _541));
    float _554 = fma(_543, _233, fma(_542, _237 * TANGENT.z, (_223 * _217) * _541));
    float _558 = inversesqrt(dot(vec3(_548, _551, _554), vec3(_548, _551, _554)));
    float _559 = _558 * _548;
    float _560 = _558 * _551;
    float _561 = _558 * _554;
    float _3832 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _562 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _3854 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _3865 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _3876 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _580 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _631 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _621);
    float _632 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _621);
    float _633 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _621);
    float _637 = inversesqrt(dot(vec3(_631, _632, _633), vec3(_631, _632, _633)));
    float _638 = _631 * _637;
    float _639 = _632 * _637;
    float _640 = _633 * _637;
    vec4 _645 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _647 = _645.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _803 = sqrt(((_631 * _631) + (_632 * _632)) + (_633 * _633));
        float _809 = (cbMatDynParam._m0[5u].x * _803) + cbMatDynParam._m0[5u].y;
        float _3887 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _810 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _814 = (cbMatDynParam._m0[5u].z * _803) + cbMatDynParam._m0[5u].w;
        float _3898 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) - _810)) + _810) < ((_647 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _659 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _660 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _680 = fma(_561, cbSceneParam._m0[5u].z, fma(_560, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _559));
    float _683 = fma(_561, cbSceneParam._m0[6u].z, fma(_560, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _559));
    float _686 = fma(_561, cbSceneParam._m0[7u].z, fma(_560, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _559));
    uint _699 = _243 + 9u;
    uint _700 = _699 + uint(cbMatDynParam._m0[0u].w);
    float _706 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * cbInstanceData._m0[_700].x;
    float _707 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * cbInstanceData._m0[_700].y;
    float _708 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * cbInstanceData._m0[_700].z;
    float _3909 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _3920 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _3931 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    vec4 _720 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _659, cbSceneParam._m0[86u].y * _660));
    float _724 = ((isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * TEXCOORD_5.w) * _720.x;
    float _725 = dot(vec3(_559, _560, _561), vec3(_638, _639, _640));
    float _728 = _725 * 2.0;
    float _732 = (_728 * _559) - _638;
    float _733 = (_728 * _560) - _639;
    float _734 = (_728 * _561) - _640;
    float _738 = abs(dot(vec3(_638, _639, _640), vec3(_559, _560, _561)));
    float _3942 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _740 = sqrt(_562);
    float _752 = exp2((_740 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_740 * 3.0));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1120;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _846 = fma(_792, cbModelParam._m0[26u].z, fma(_788, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _784));
        float _850 = fma(_792, cbModelParam._m0[27u].z, fma(_788, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _784));
        float _854 = fma(_792, cbModelParam._m0[28u].z, fma(_788, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _784));
        float _878 = _784 + _559;
        float _879 = _788 + _560;
        float _880 = _792 + _561;
        float _890 = fma(_880, cbModelParam._m0[26u].z, fma(_879, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _878)) - _846;
        float _891 = fma(_880, cbModelParam._m0[27u].z, fma(_879, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _878)) - _850;
        float _892 = fma(_880, cbModelParam._m0[28u].z, fma(_879, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _878)) - _854;
        float _896 = inversesqrt(dot(vec3(_890, _891, _892), vec3(_890, _891, _892)));
        float _909 = ((_896 * _890) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_846 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_896 * _891) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_850 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_896 * _892) / cbModelParam._m0[34u].z) + ((((((_854 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_909, _910, _911), 0.0);
        float _948 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_914.x + (-0.5));
        float _950 = _948 * (_914.y + (-0.5));
        float _951 = _948 * (_914.z + (-0.5));
        float _958 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_921.x + (-0.5));
        float _960 = _958 * (_921.y + (-0.5));
        float _961 = _958 * (_921.z + (-0.5));
        float _968 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_928.x + (-0.5));
        float _970 = _968 * (_928.y + (-0.5));
        float _971 = _968 * (_928.z + (-0.5));
        float _978 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_935.x + (-0.5));
        float _980 = _978 * (_935.y + (-0.5));
        float _981 = _978 * (_935.z + (-0.5));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = _949 * 0.5;
        float _986 = _959 * 0.5;
        float _987 = _969 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1002 = (dot(vec3(_559, _560, _561), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1012 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3990 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1014 + 1.0))) + _1019) * _982;
        float _1029 = _950 * 0.5;
        float _1030 = _960 * 0.5;
        float _1031 = _970 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_559, _560, _561), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _4023 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1056 + 1.0))) + _1061) * _983;
        float _1071 = _951 * 0.5;
        float _1072 = _961 * 0.5;
        float _1073 = _971 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_559, _560, _561), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _4056 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1098 + 1.0))) + _1103) * _984;
        _1120 = _951;
        _1122 = _950;
        _1123 = _949;
        _1124 = _961;
        _1125 = _960;
        _1126 = _959;
        _1127 = _971;
        _1128 = _970;
        _1129 = _969;
        _1130 = _984;
        _1131 = _983;
        _1132 = _982;
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
        _1134 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1135 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
    }
    else
    {
        _1120 = _1121;
        _1122 = _1121;
        _1123 = _1121;
        _1124 = _1121;
        _1125 = _1121;
        _1126 = _1121;
        _1127 = _1121;
        _1128 = _1121;
        _1129 = _1121;
        _1130 = _1121;
        _1131 = _1121;
        _1132 = _1121;
        _1133 = 0.0;
        _1134 = 0.0;
        _1135 = 0.0;
    }
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1163 = fma(_792, cbModelParam._m0[30u].z, fma(_788, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _784));
        float _1167 = fma(_792, cbModelParam._m0[31u].z, fma(_788, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _784));
        float _1171 = fma(_792, cbModelParam._m0[32u].z, fma(_788, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _784));
        float _1194 = _784 + _559;
        float _1195 = _788 + _560;
        float _1196 = _792 + _561;
        float _1206 = fma(_1196, cbModelParam._m0[30u].z, fma(_1195, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1194)) - _1163;
        float _1207 = fma(_1196, cbModelParam._m0[31u].z, fma(_1195, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1194)) - _1167;
        float _1208 = fma(_1196, cbModelParam._m0[32u].z, fma(_1195, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1194)) - _1171;
        float _1212 = inversesqrt(dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208)));
        float _1225 = ((_1212 * _1206) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1163 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1212 * _1207) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1167 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1212 * _1208) / cbModelParam._m0[35u].z) + ((((((_1171 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1225, _1226, _1227), 0.0);
        float _1262 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1229.x + (-0.5));
        float _1264 = _1262 * (_1229.y + (-0.5));
        float _1265 = _1262 * (_1229.z + (-0.5));
        float _1272 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1236.x + (-0.5));
        float _1274 = _1272 * (_1236.y + (-0.5));
        float _1275 = _1272 * (_1236.z + (-0.5));
        float _1282 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1243.x + (-0.5));
        float _1284 = _1282 * (_1243.y + (-0.5));
        float _1285 = _1282 * (_1243.z + (-0.5));
        float _1292 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1250.x + (-0.5));
        float _1294 = _1292 * (_1250.y + (-0.5));
        float _1295 = _1292 * (_1250.z + (-0.5));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = _1263 * 0.5;
        float _1300 = _1273 * 0.5;
        float _1301 = _1283 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_559, _560, _561), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _4119 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1326 + 1.0))) + _1331) * _1296;
        float _1341 = _1264 * 0.5;
        float _1342 = _1274 * 0.5;
        float _1343 = _1284 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_559, _560, _561), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4152 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1368 + 1.0))) + _1373) * _1297;
        float _1383 = _1265 * 0.5;
        float _1384 = _1275 * 0.5;
        float _1385 = _1285 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_559, _560, _561), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4185 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1410 + 1.0))) + _1415) * _1298;
        _1432 = _1265;
        _1433 = _1264;
        _1434 = _1263;
        _1435 = _1275;
        _1436 = _1274;
        _1437 = _1273;
        _1438 = _1285;
        _1439 = _1284;
        _1440 = _1283;
        _1441 = _1298;
        _1442 = _1297;
        _1443 = _1296;
        _1444 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1445 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1446 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
    }
    else
    {
        _1432 = _1121;
        _1433 = _1121;
        _1434 = _1121;
        _1435 = _1121;
        _1436 = _1121;
        _1437 = _1121;
        _1438 = _1121;
        _1439 = _1121;
        _1440 = _1121;
        _1441 = _1121;
        _1442 = _1121;
        _1443 = _1121;
        _1444 = 0.0;
        _1445 = 0.0;
        _1446 = 0.0;
    }
    float _1456 = (cbModelParam._m0[1u].x * (_1444 - _1133)) + _1133;
    float _1457 = (cbModelParam._m0[1u].x * (_1445 - _1134)) + _1134;
    float _1458 = (cbModelParam._m0[1u].x * (_1446 - _1135)) + _1135;
    float _1479 = fma(_1458, cbSceneParam._m0[89u].z, fma(_1457, cbSceneParam._m0[89u].y, _1456 * cbSceneParam._m0[89u].x));
    float _1482 = fma(_1458, cbSceneParam._m0[90u].z, fma(_1457, cbSceneParam._m0[90u].y, _1456 * cbSceneParam._m0[90u].x));
    float _1485 = fma(_1458, cbSceneParam._m0[91u].z, fma(_1457, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1456));
    float _1500 = _732 * 0.5;
    float _1501 = _733 * 0.5;
    float _1502 = _734 * 0.5;
    float _1503 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1434, _1437, _1440, _1443));
    float _1506 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1433, _1436, _1439, _1442));
    float _1509 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1432, _1435, _1438, _1441));
    float _1543;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1516 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1120, _1124, _1127, _1130));
        float _1520 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1122, _1125, _1128, _1131));
        float _1524 = dot(vec4(_1500, _1501, _1502, 1.0), vec4(_1123, _1126, _1129, _1132));
        float _1531 = dot(vec4(cbModelParam._m0[39u]), vec4(_1500, _1501, _1502, 1.0));
        _1543 = dot(vec3(isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1531) ? 0.0 : (isnan(0.0) ? _1531 : max(0.0, _1531))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1543 = 1.0;
    }
    float _1554;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1545 = dot(vec4(cbModelParam._m0[40u]), vec4(_1500, _1501, _1502, 1.0));
        _1554 = dot(vec3(isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1545) ? 0.0 : (isnan(0.0) ? _1545 : max(0.0, _1545))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1554 = 1.0;
    }
    float _1558 = (_1554 * cbModelParam._m0[1u].x) + (_1543 * (1.0 - cbModelParam._m0[1u].x));
    float _1568 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _562);
    float _1569 = isnan(_1568) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1568 : min(cbModelParam._m0[25u].z, _1568));
    float _1651;
    float _1653;
    float _1655;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1618 = fma(_792, cbModelParam._m0[13u].z, fma(_788, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _784)) + cbModelParam._m0[13u].w;
        float _1622 = fma(_792, cbModelParam._m0[14u].z, fma(_788, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _784)) + cbModelParam._m0[14u].w;
        float _1626 = fma(_792, cbModelParam._m0[15u].z, fma(_788, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _784)) + cbModelParam._m0[15u].w;
        float _1629 = fma(_734, cbModelParam._m0[13u].z, fma(_733, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _732));
        float _1632 = fma(_734, cbModelParam._m0[14u].z, fma(_733, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _732));
        float _1635 = fma(_734, cbModelParam._m0[15u].z, fma(_733, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _732));
        float _1663;
        if (_1629 > 0.0)
        {
            _1663 = abs((1.0 - _1618) / _1629);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1618 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1663 = frontier_phi_17_15_ladder;
        }
        float _1834;
        if (_1632 > 0.0)
        {
            _1834 = abs((1.0 - _1622) / _1632);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1622 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1834 = frontier_phi_26_22_ladder;
        }
        float _2130;
        if (_1635 > 0.0)
        {
            _2130 = abs((1.0 - _1626) / _1635);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1626 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2130 = frontier_phi_38_33_ladder;
        }
        float _2132 = isnan(_1834) ? _1663 : (isnan(_1663) ? _1834 : min(_1663, _1834));
        float _2133 = isnan(_2130) ? _2132 : (isnan(_2132) ? _2130 : min(_2132, _2130));
        float _2137 = (_2133 * _1629) + _1618;
        float _2138 = (_2133 * _1632) + _1622;
        float _2139 = (_2133 * _1635) + _1626;
        float _2140 = _2133 * 9.9999997473787516355514526367188e-05;
        float _2142 = (-1.0) - _2140;
        float _2144 = _2140 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2139 > _2144) || ((_2139 < _2142) || ((_2138 > _2144) || ((_2138 < _2142) || ((_2137 < _2142) || (_2137 > _2144))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2284 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2139, cbModelParam._m0[9u].z, fma(_2138, cbModelParam._m0[9u].y, _2137 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2139, cbModelParam._m0[10u].z, fma(_2138, cbModelParam._m0[10u].y, _2137 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2139, cbModelParam._m0[11u].z, fma(_2138, cbModelParam._m0[11u].y, _2137 * cbModelParam._m0[11u].x))), _1569);
            frontier_phi_16_38_ladder = _2284.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2284.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2284.x * cbModelParam._m0[1u].y;
        }
        _1651 = frontier_phi_16_38_ladder_2;
        _1653 = frontier_phi_16_38_ladder_1;
        _1655 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1639 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_732, _733, _734), _1569);
        _1651 = _1639.x * cbModelParam._m0[1u].y;
        _1653 = _1639.y * cbModelParam._m0[1u].y;
        _1655 = _1639.z * cbModelParam._m0[1u].y;
    }
    float _1659 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _562);
    float _1660 = isnan(_1659) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1659 : min(cbModelParam._m0[25u].w, _1659));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1714 = fma(_792, cbModelParam._m0[21u].z, fma(_788, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _784)) + cbModelParam._m0[21u].w;
        float _1718 = fma(_792, cbModelParam._m0[22u].z, fma(_788, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _784)) + cbModelParam._m0[22u].w;
        float _1722 = fma(_792, cbModelParam._m0[23u].z, fma(_788, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _784)) + cbModelParam._m0[23u].w;
        float _1725 = fma(_734, cbModelParam._m0[21u].z, fma(_733, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _732));
        float _1728 = fma(_734, cbModelParam._m0[22u].z, fma(_733, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _732));
        float _1731 = fma(_734, cbModelParam._m0[23u].z, fma(_733, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _732));
        float _1839;
        if (_1725 > 0.0)
        {
            _1839 = abs((1.0 - _1714) / _1725);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1714 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1839 = frontier_phi_28_24_ladder;
        }
        float _2157;
        if (_1728 > 0.0)
        {
            _2157 = abs((1.0 - _1718) / _1728);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1718 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2157 = frontier_phi_40_35_ladder;
        }
        float _2484;
        if (_1731 > 0.0)
        {
            _2484 = abs((1.0 - _1722) / _1731);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1722 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2484 = frontier_phi_50_47_ladder;
        }
        float _2486 = isnan(_2157) ? _1839 : (isnan(_1839) ? _2157 : min(_1839, _2157));
        float _2487 = isnan(_2484) ? _2486 : (isnan(_2486) ? _2484 : min(_2486, _2484));
        float _2491 = (_2487 * _1725) + _1714;
        float _2492 = (_2487 * _1728) + _1718;
        float _2493 = (_2487 * _1731) + _1722;
        float _2494 = _2487 * 9.9999997473787516355514526367188e-05;
        float _2495 = (-1.0) - _2494;
        float _2497 = _2494 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2493 > _2497) || ((_2493 < _2495) || ((_2492 > _2497) || ((_2492 < _2495) || ((_2491 < _2495) || (_2491 > _2497))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2611 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2493, cbModelParam._m0[17u].z, fma(_2492, cbModelParam._m0[17u].y, _2491 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2493, cbModelParam._m0[18u].z, fma(_2492, cbModelParam._m0[18u].y, _2491 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2493, cbModelParam._m0[19u].z, fma(_2492, cbModelParam._m0[19u].y, _2491 * cbModelParam._m0[19u].x))), _1660);
            frontier_phi_25_50_ladder = _2611.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2611.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2611.x * cbModelParam._m0[1u].z;
        }
        _1750 = frontier_phi_25_50_ladder_2;
        _1752 = frontier_phi_25_50_ladder_1;
        _1754 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_732, _733, _734), _1660);
        _1750 = _1734.x * cbModelParam._m0[1u].z;
        _1752 = _1734.y * cbModelParam._m0[1u].z;
        _1754 = _1734.z * cbModelParam._m0[1u].z;
    }
    float _1766 = ((((1.0 - _752) * ((_740 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_752 * _740)) * _724;
    float _1767 = _1766 * ((cbModelParam._m0[1u].w * (_1750 - _1651)) + _1651);
    float _1768 = _1766 * ((cbModelParam._m0[1u].w * (_1752 - _1653)) + _1653);
    float _1769 = _1766 * ((cbModelParam._m0[1u].w * (_1754 - _1655)) + _1655);
    float _1772 = fma(_1769, cbSceneParam._m0[89u].z, fma(_1768, cbSceneParam._m0[89u].y, _1767 * cbSceneParam._m0[89u].x));
    float _1775 = fma(_1769, cbSceneParam._m0[90u].z, fma(_1768, cbSceneParam._m0[90u].y, _1767 * cbSceneParam._m0[90u].x));
    float _1778 = fma(_1769, cbSceneParam._m0[91u].z, fma(_1768, cbSceneParam._m0[91u].y, _1767 * cbSceneParam._m0[91u].x));
    float _1813 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1817 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1821 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1825 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1826 = _1813 / _1825;
    float _1827 = _1817 / _1825;
    float _1828 = _1821 / _1825;
    float _1975;
    float _1976;
    float _1977;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1855 = ((uint(_1828 > cbSceneParam._m0[59u].y) + uint(_1828 > cbSceneParam._m0[59u].x)) + uint(_1828 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1856 = _1855 + 43u;
        uint _1864 = _1855 + 44u;
        uint _1872 = _1855 + 45u;
        uint _1880 = _1855 + 46u;
        float _1891 = fma(_1825, cbSceneParam._m0[_1856].w, fma(_1821, cbSceneParam._m0[_1856].z, fma(_1817, cbSceneParam._m0[_1856].y, _1813 * cbSceneParam._m0[_1856].x)));
        float _1895 = fma(_1825, cbSceneParam._m0[_1864].w, fma(_1821, cbSceneParam._m0[_1864].z, fma(_1817, cbSceneParam._m0[_1864].y, _1813 * cbSceneParam._m0[_1864].x)));
        float _1903 = fma(_1825, cbSceneParam._m0[_1880].w, fma(_1821, cbSceneParam._m0[_1880].z, fma(_1817, cbSceneParam._m0[_1880].y, _1813 * cbSceneParam._m0[_1880].x)));
        float _1908 = cbSceneParam._m0[33u].z * _1903;
        float _1910 = cbSceneParam._m0[33u].w * _1903;
        float _1913 = fma(_1825, cbSceneParam._m0[_1872].w, fma(_1821, cbSceneParam._m0[_1872].z, fma(_1817, cbSceneParam._m0[_1872].y, _1813 * cbSceneParam._m0[_1872].x))) / _1903;
        float _1961 = (cbSceneParam._m0[33u].x - sqrt(((_1827 * _1827) + (_1826 * _1826)) + (_1828 * _1828))) * cbSceneParam._m0[33u].y;
        float _4311 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1968 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1908 + _1891) / _1903, (_1910 + _1895) / _1903), _1913), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1910 + _1891) / _1903, (_1895 - _1908) / _1903), _1913), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1891 - _1908) / _1903, (_1895 - _1910) / _1903), _1913), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1891 - _1910) / _1903, (_1908 + _1895) / _1903), _1913), 0.0)).x), vec4(0.25)));
        _1975 = 1.0 - (_1968 * cbSceneParam._m0[34u].x);
        _1976 = 1.0 - (_1968 * cbSceneParam._m0[34u].y);
        _1977 = 1.0 - (_1968 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1975 = 1.0;
        _1976 = 1.0;
        _1977 = 1.0;
    }
    float _2041;
    float _2043;
    float _2045;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2029 = fma(_1825, cbSceneParam._m0[63u].w, fma(_1821, cbSceneParam._m0[63u].z, fma(_1817, cbSceneParam._m0[63u].y, _1813 * cbSceneParam._m0[63u].x)));
        float _2030 = fma(_1825, cbSceneParam._m0[60u].w, fma(_1821, cbSceneParam._m0[60u].z, fma(_1817, cbSceneParam._m0[60u].y, _1813 * cbSceneParam._m0[60u].x))) / _2029;
        float _2031 = fma(_1825, cbSceneParam._m0[61u].w, fma(_1821, cbSceneParam._m0[61u].z, fma(_1817, cbSceneParam._m0[61u].y, _1813 * cbSceneParam._m0[61u].x))) / _2029;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2030 >= cbSceneParam._m0[64u].x) && (_2031 >= cbSceneParam._m0[64u].y)) && (_2030 <= cbSceneParam._m0[64u].z)) && (_2031 <= cbSceneParam._m0[64u].w))
        {
            float _2170 = fma(_1825, cbSceneParam._m0[62u].w, fma(_1821, cbSceneParam._m0[62u].z, fma(_1817, cbSceneParam._m0[62u].y, _1813 * cbSceneParam._m0[62u].x))) / _2029;
            float _2174 = isnan(cbSceneParam._m0[41u].w) ? _2170 : (isnan(_2170) ? cbSceneParam._m0[41u].w : max(_2170, cbSceneParam._m0[41u].w));
            float _2217 = (cbSceneParam._m0[33u].x - sqrt(((_1827 * _1827) + (_1826 * _1826)) + (_1828 * _1828))) * cbSceneParam._m0[33u].y;
            float _4327 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
            float _2224 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2030, cbSceneParam._m0[33u].w + _2031), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2030, _2031 - cbSceneParam._m0[33u].z), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2030 - cbSceneParam._m0[33u].z, _2031 - cbSceneParam._m0[33u].w), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2030 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2031), _2174), 0.0)).x), vec4(0.25)));
            float _2228 = 1.0 - (_2224 * cbSceneParam._m0[34u].x);
            float _2229 = 1.0 - (_2224 * cbSceneParam._m0[34u].y);
            float _2230 = 1.0 - (_2224 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2230) ? _1977 : (isnan(_1977) ? _2230 : min(_1977, _2230));
            frontier_phi_37_36_ladder_1 = isnan(_2229) ? _1976 : (isnan(_1976) ? _2229 : min(_1976, _2229));
            frontier_phi_37_36_ladder_2 = isnan(_2228) ? _1975 : (isnan(_1975) ? _2228 : min(_1975, _2228));
        }
        else
        {
            frontier_phi_37_36_ladder = _1977;
            frontier_phi_37_36_ladder_1 = _1976;
            frontier_phi_37_36_ladder_2 = _1975;
        }
        _2041 = frontier_phi_37_36_ladder_2;
        _2043 = frontier_phi_37_36_ladder_1;
        _2045 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2041 = _1975;
        _2043 = _1976;
        _2045 = _1977;
    }
    uvec4 _2050 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _2052 = _2050.x * 14u;
    uint _2053 = _2052 + 13u;
    float _2060 = _724 + (-1.0);
    float _2065 = (cbLight._m0[_2053].x * _2060) + 1.0;
    float _2066 = (cbLight._m0[_2053].y * _2060) + 1.0;
    float _2067 = (cbLight._m0[_2053].z * _2060) + 1.0;
    float _2068 = (cbLight._m0[_2053].w * _2060) + 1.0;
    uint _2069 = _2052 + 5u;
    float _2075 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
    uint _2079 = _2052 + 4u;
    float _2089 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
    uint _2093 = _2052 | 1u;
    float _2104 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_559, _560, _561));
    float _2107 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_559, _560, _561));
    float _4363 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _4374 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2112 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * 0.3183098733425140380859375;
    float _2114 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * 0.3183098733425140380859375;
    float _2121 = ((cbLight._m0[_2069].x * _2075) * _2114) + (((cbLight._m0[_2079].x * _2041) * _2089) * _2112);
    float _2122 = ((_2075 * cbLight._m0[_2069].y) * _2114) + (((cbLight._m0[_2079].y * _2043) * _2089) * _2112);
    float _2123 = ((_2075 * cbLight._m0[_2069].z) * _2114) + (((cbLight._m0[_2079].z * _2045) * _2089) * _2112);
    uvec4 _2127 = floatBitsToUint(cbLight._m0[_2052 + 12u]);
    bool _2129 = _2127.x == 0u;
    float _2231;
    float _2233;
    float _2235;
    if (_2129)
    {
        _2231 = _2121;
        _2233 = _2122;
        _2235 = _2123;
    }
    else
    {
        uint _2239 = _2052 + 6u;
        float _2255 = (dot(vec3(cbLight._m0[_2052 + 2u].xyz), vec3(_559, _560, _561)) * 0.5) + 0.5;
        float _2256 = _2255 * _2255;
        float _4385 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2257 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2258 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2231 = (((cbLight._m0[_2239].x * 0.3183098733425140380859375) * _2257) * _2258) + _2121;
        _2233 = (((cbLight._m0[_2239].y * 0.3183098733425140380859375) * _2257) * _2258) + _2122;
        _2235 = (((cbLight._m0[_2239].z * 0.3183098733425140380859375) * _2257) * _2258) + _2123;
    }
    bool _2238 = _2127.y == 0u;
    float _2293;
    float _2295;
    float _2297;
    if (_2238)
    {
        _2293 = _2231;
        _2295 = _2233;
        _2297 = _2235;
    }
    else
    {
        uint _2455 = _2052 + 7u;
        float _2471 = (dot(vec3(cbLight._m0[_2052 + 3u].xyz), vec3(_559, _560, _561)) * 0.5) + 0.5;
        float _2472 = _2471 * _2471;
        float _4401 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2473 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2474 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2293 = (((cbLight._m0[_2455].x * 0.3183098733425140380859375) * _2473) * _2474) + _2231;
        _2295 = (((cbLight._m0[_2455].y * 0.3183098733425140380859375) * _2473) * _2474) + _2233;
        _2297 = (((cbLight._m0[_2455].z * 0.3183098733425140380859375) * _2473) * _2474) + _2235;
    }
    uint _2300 = _2052 + 8u;
    float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2052].w)) * _562) * 0.949999988079071044921875);
    float _2314 = _2313 * _2313;
    float _2315 = cbLight._m0[_2052].x + _638;
    float _2316 = cbLight._m0[_2052].y + _639;
    float _2317 = cbLight._m0[_2052].z + _640;
    float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
    float _2322 = _2321 * _2315;
    float _2323 = _2321 * _2316;
    float _2324 = _2321 * _2317;
    float _2325 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2052].xyz));
    float _4417 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _4428 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _2329 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2330 = dot(vec3(_559, _560, _561), vec3(_2322, _2323, _2324));
    float _4439 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2334 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_2322, _2323, _2324));
    float _4450 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2338 = _2314 * _2314;
    float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
    float _2353 = (exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2354 = 1.0 - _2314;
    float _2365 = (0.5 / (((_2329 * ((_2328 * _2354) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2354) + _2314) * _2328))) * _2328;
    float _4461 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2367 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
    uint _2381 = _2052 + 9u;
    float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _562) * 0.949999988079071044921875);
    float _2393 = _2392 * _2392;
    float _2394 = cbLight._m0[_2093].x + _638;
    float _2395 = cbLight._m0[_2093].y + _639;
    float _2396 = cbLight._m0[_2093].z + _640;
    float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
    float _2401 = _2400 * _2394;
    float _2402 = _2400 * _2395;
    float _2403 = _2400 * _2396;
    float _2404 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2093].xyz));
    float _4472 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2407 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _2408 = dot(vec3(_559, _560, _561), vec3(_2401, _2402, _2403));
    float _4483 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _2412 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2401, _2402, _2403));
    float _4494 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2416 = _2393 * _2393;
    float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
    float _2429 = (exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2430 = 1.0 - _2393;
    float _2440 = (0.5 / (((_2329 * ((_2407 * _2430) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2430) + _2393) * _2407))) * _2407;
    float _4505 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2442 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
    float _2452 = (((_2429 * cbLight._m0[_2381].x) * _2442) * _2075) + ((((cbLight._m0[_2300].x * _2041) * _2353) * _2367) * _2089);
    float _2453 = (((_2429 * cbLight._m0[_2381].y) * _2442) * _2075) + ((((cbLight._m0[_2300].y * _2043) * _2353) * _2367) * _2089);
    float _2454 = (((_2429 * cbLight._m0[_2381].z) * _2442) * _2075) + ((((cbLight._m0[_2300].z * _2045) * _2353) * _2367) * _2089);
    float _2510;
    float _2512;
    float _2514;
    if (_2129)
    {
        _2510 = _2452;
        _2512 = _2453;
        _2514 = _2454;
    }
    else
    {
        uint _2516 = _2052 + 2u;
        uint _2520 = _2052 + 10u;
        float _2534 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2516].w)) * _562) * 0.949999988079071044921875);
        float _2535 = _2534 * _2534;
        float _2536 = cbLight._m0[_2516].x + _638;
        float _2537 = cbLight._m0[_2516].y + _639;
        float _2538 = cbLight._m0[_2516].z + _640;
        float _2542 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
        float _2543 = _2542 * _2536;
        float _2544 = _2542 * _2537;
        float _2545 = _2542 * _2538;
        float _2546 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2516].xyz));
        float _4516 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2550 = dot(vec3(_559, _560, _561), vec3(_2543, _2544, _2545));
        float _4527 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2554 = dot(vec3(cbLight._m0[_2516].xyz), vec3(_2543, _2544, _2545));
        float _4538 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2558 = _2535 * _2535;
        float _2562 = ((_2553 * _2553) * (_2558 + (-1.0))) + 1.0;
        float _2571 = (exp2(log2(1.0 - (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2572 = 1.0 - _2535;
        float _2582 = (0.5 / (((_2329 * ((_2549 * _2572) + _2535)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2572) + _2535) * _2549))) * _2549;
        float _4549 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2584 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2558 / ((_2562 * _2562) * 3.141590118408203125));
        float _2585 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2510 = (((_2571 * cbLight._m0[_2520].x) * _2584) * _2585) + _2452;
        _2512 = (((_2571 * cbLight._m0[_2520].y) * _2584) * _2585) + _2453;
        _2514 = (((_2571 * cbLight._m0[_2520].z) * _2584) * _2585) + _2454;
    }
    float _2616;
    float _2618;
    float _2620;
    if (_2238)
    {
        _2616 = _2510;
        _2618 = _2512;
        _2620 = _2514;
    }
    else
    {
        uint _2627 = _2052 + 3u;
        uint _2631 = _2052 + 11u;
        float _2645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2627].w)) * _562) * 0.949999988079071044921875);
        float _2646 = _2645 * _2645;
        float _2647 = cbLight._m0[_2627].x + _638;
        float _2648 = cbLight._m0[_2627].y + _639;
        float _2649 = cbLight._m0[_2627].z + _640;
        float _2653 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
        float _2654 = _2653 * _2647;
        float _2655 = _2653 * _2648;
        float _2656 = _2653 * _2649;
        float _2657 = dot(vec3(_559, _560, _561), vec3(cbLight._m0[_2627].xyz));
        float _4565 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2660 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2661 = dot(vec3(_559, _560, _561), vec3(_2654, _2655, _2656));
        float _4576 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2664 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2665 = dot(vec3(cbLight._m0[_2627].xyz), vec3(_2654, _2655, _2656));
        float _4587 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2669 = _2646 * _2646;
        float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
        float _2682 = (exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2683 = 1.0 - _2646;
        float _2693 = (0.5 / (((_2329 * ((_2660 * _2683) + _2646)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2683) + _2646) * _2660))) * _2660;
        float _4598 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2695 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
        float _2696 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2616 = (((_2682 * cbLight._m0[_2631].x) * _2695) * _2696) + _2510;
        _2618 = (((_2682 * cbLight._m0[_2631].y) * _2695) * _2696) + _2512;
        _2620 = (((_2682 * cbLight._m0[_2631].z) * _2695) * _2696) + _2514;
    }
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    if (_2050.y == 0u)
    {
        uvec4 _2717 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2718 = _2717.x;
        uint _2729 = uint((float(_2717.y) * floor(float(uint(cbSceneParam._m0[85u].y * _660) / _2718))) + floor(float(uint(cbSceneParam._m0[85u].x * _659) / _2718)));
        float _2739 = (log2(_1828 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2740 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        uint _2743 = uint(isnan(14.0) ? _2740 : (isnan(_2740) ? 14.0 : min(_2740, 14.0)));
        uvec4 _2748 = texelFetch(g_lightClusterGridBuffer, int(((_2743 << 2u) + (_2729 << 6u)) >> 2u));
        uint _2749 = _2748.x;
        uint _2750 = _2717.z;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        if (((((1u << ((_2750 >> 4u) & 15u)) + 4294967295u) & _2749) == 0u) || ((_2750 & 240u) == 0u))
        {
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
            _2839 = 0.0;
        }
        else
        {
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2838;
            float _2840;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            uint _2988 = 0u;
            uint _2997;
            bool _2998;
            for (;;)
            {
                _2997 = texelFetch(g_lightClassification, int((((_2743 << 5u) + (_2729 << 9u)) + (_2988 << 2u)) >> 2u)).x;
                _2998 = _2997 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2998)
                {
                    frontier_phi_71_pred = _2987;
                    frontier_phi_71_pred_1 = _2986;
                    frontier_phi_71_pred_2 = _2985;
                    frontier_phi_71_pred_3 = _2984;
                    frontier_phi_71_pred_4 = _2983;
                    frontier_phi_71_pred_5 = _2982;
                }
                else
                {
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    uint _3133;
                    _3127 = _2982;
                    _3128 = _2983;
                    _3129 = _2984;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2997;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    for (;;)
                    {
                        uint _3137 = uint(findLSB(_3133)) + (_2988 << 5u);
                        uint _3134 = (_3133 + 4294967295u) & _3133;
                        uint _3139 = _3137 * 48u;
                        vec4 _3153 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3139)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 3u)).x));
                        uint _3159 = (_3137 * 48u) + 4u;
                        vec4 _3172 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 3u)).x));
                        uint _3178 = (_3137 * 48u) + 8u;
                        vec3 _3189 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x));
                        float _3193 = _3153.x - _1826;
                        float _3194 = _3153.y - _1827;
                        float _3195 = _3153.z - _1828;
                        float _3196 = dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195));
                        float _3199 = inversesqrt(_3196);
                        float _3200 = _3199 * _3193;
                        float _3201 = _3199 * _3194;
                        float _3202 = _3199 * _3195;
                        float _3203 = dot(vec3(_680, _683, _686), vec3(_3200, _3201, _3202));
                        float _3208 = 1.0 - (_3196 * _3153.w);
                        float _4624 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3209 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3210 = sqrt(_3196) * _3172.w;
                        float _3213 = 1.39999997615814208984375 / (_3210 + 1.39999997615814208984375);
                        float _3214 = _3213 * _3213;
                        float _3217 = ((1.0 - _3214) * _3203) + _3214;
                        float _3220 = _3210 * _3210;
                        float _3224 = ((isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0))) * _3209) / ((_3220 * 0.699999988079071044921875) + 1.0);
                        float _3228 = (-0.0) - _1826;
                        float _3229 = (-0.0) - _1827;
                        float _3230 = (-0.0) - _1828;
                        float _3234 = inversesqrt(dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230)));
                        float _3235 = _3234 * _3228;
                        float _3236 = _3234 * _3229;
                        float _3237 = _3234 * _3230;
                        float _3244 = exp2(log2(1.0 / ((_3220 * 3.5) + 5.0)) * 0.25);
                        float _3245 = 1.0 - _740;
                        float _3252 = sqrt(1.0 - ((1.0 - (_3245 * _3245)) * (1.0 - (_3244 * _3244))));
                        float _3253 = _3252 * _3252;
                        float _3254 = _3253 * _3253;
                        float _3255 = _3235 + _3200;
                        float _3256 = _3236 + _3201;
                        float _3257 = _3237 + _3202;
                        float _3261 = inversesqrt(dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257)));
                        float _3265 = dot(vec3(_680, _683, _686), vec3(_3235, _3236, _3237));
                        float _4640 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3268 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                        float _3269 = dot(vec3(_680, _683, _686), vec3(_3261 * _3255, _3261 * _3256, _3261 * _3257));
                        float _4651 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3272 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3276 = ((_3272 * _3272) * (_3254 + (-1.0))) + 1.0;
                        float _3277 = _3213 * _3253;
                        float _3278 = _3277 * _3277;
                        float _3281 = ((1.0 - _3278) * _3203) + _3278;
                        float _4662 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3282 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3283 = 1.0 - _3253;
                        float _3293 = (0.5 / (((_3282 * ((_3268 * _3283) + _3253)) + 9.9999999392252902907785028219223e-09) + (((_3282 * _3283) + _3253) * _3268))) * _3282;
                        float _4673 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3303 = (((_3254 * 3.1415927410125732421875) * (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) / ((_3276 * _3276) * ((_3220 * 2.1991131305694580078125) + 3.141590118408203125))) * _3209;
                        _3057 = (_3224 * _3172.x) + _3130;
                        _3058 = (_3224 * _3172.y) + _3131;
                        _3059 = (_3224 * _3172.z) + _3132;
                        _3054 = (_3303 * _3189.x) + _3127;
                        _3055 = (_3303 * _3189.y) + _3128;
                        _3056 = (_3303 * _3189.z) + _3129;
                        if (_3134 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3127 = _3054;
                            _3128 = _3055;
                            _3129 = _3056;
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3134;
                        }
                    }
                    frontier_phi_71_pred = _3059;
                    frontier_phi_71_pred_1 = _3058;
                    frontier_phi_71_pred_2 = _3057;
                    frontier_phi_71_pred_3 = _3056;
                    frontier_phi_71_pred_4 = _3055;
                    frontier_phi_71_pred_5 = _3054;
                }
                _2840 = frontier_phi_71_pred;
                _2838 = frontier_phi_71_pred_1;
                _2836 = frontier_phi_71_pred_2;
                _2834 = frontier_phi_71_pred_3;
                _2832 = frontier_phi_71_pred_4;
                _2830 = frontier_phi_71_pred_5;
                uint _2989 = _2988 + 1u;
                if (_2989 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2982 = _2830;
                    _2983 = _2832;
                    _2984 = _2834;
                    _2985 = _2836;
                    _2986 = _2838;
                    _2987 = _2840;
                    _2988 = _2989;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
            _2839 = _2840;
        }
        uvec4 _2843 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2844 = _2843.z;
        uint _2846 = (_2844 >> 8u) & 15u;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        if (((4294967295u << _2846) & _2749) == 0u)
        {
            _2950 = _2829;
            _2952 = _2831;
            _2954 = _2833;
            _2956 = _2835;
            _2958 = _2837;
            _2960 = _2839;
        }
        else
        {
            float _2975 = inversesqrt(dot(vec3(_1826, _1827, _1828), vec3(_1826, _1827, _1828)));
            float _2976 = _2975 * _1826;
            float _2977 = _2975 * _1827;
            float _2978 = _2975 * _1828;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2846 < ((_2844 >> 12u) & 15u))
            {
                float _2951;
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _3110 = _2829;
                float _3111 = _2831;
                float _3112 = _2833;
                float _3113 = _2835;
                float _3114 = _2837;
                float _3115 = _2839;
                uint _3116 = _2846;
                uint _3125;
                bool _3126;
                for (;;)
                {
                    _3125 = texelFetch(g_lightClassification, int((((_2743 << 5u) + (_2729 << 9u)) + (_3116 << 2u)) >> 2u)).x;
                    _3126 = _3125 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3126)
                    {
                        frontier_phi_82_pred = _3115;
                        frontier_phi_82_pred_1 = _3114;
                        frontier_phi_82_pred_2 = _3113;
                        frontier_phi_82_pred_3 = _3112;
                        frontier_phi_82_pred_4 = _3111;
                        frontier_phi_82_pred_5 = _3110;
                    }
                    else
                    {
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3330 = _3110;
                        float _3331 = _3111;
                        float _3332 = _3112;
                        float _3333 = _3113;
                        float _3334 = _3114;
                        float _3335 = _3115;
                        uint _3336 = _3125;
                        uint _3337;
                        vec4 _3362;
                        float _3363;
                        vec4 _3378;
                        vec3 _3390;
                        vec4 _3406;
                        vec4 _3421;
                        float _3467;
                        bool _3468;
                        for (;;)
                        {
                            uint _3347 = ((_3116 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3336));
                            _3337 = (_3336 + 4294967295u) & _3336;
                            uint _3349 = _3347 * 40u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            _3363 = _3362.w;
                            uint _3365 = (_3347 * 40u) + 4u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3380 = (_3347 * 40u) + 8u;
                            _3390 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x));
                            uint _3393 = (_3347 * 40u) + 16u;
                            _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3408 = (_3347 * 40u) + 20u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3423 = (_3347 * 40u) + 24u;
                            vec4 _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3442 = (_3347 * 40u) + 28u;
                            vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            _3467 = fma(_1828, _3455.z, fma(_1827, _3455.y, _3455.x * _1826)) + _3455.w;
                            _3468 = !((fma(_1828, _3436.z, fma(_1827, _3436.y, _3436.x * _1826)) + _3436.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3468)
                            {
                                float _3495 = _3362.x - _1826;
                                float _3496 = _3362.y - _1827;
                                float _3497 = _3362.z - _1828;
                                float _3498 = dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497));
                                float _3501 = inversesqrt(_3498);
                                float _3502 = _3501 * _3495;
                                float _3503 = _3501 * _3496;
                                float _3504 = _3501 * _3497;
                                float _3508 = 1.0 - (_3498 / (_3363 * _3363));
                                float _4684 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3509 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3513 = sqrt(_3498) * _3378.w;
                                float _3515 = 1.39999997615814208984375 / (_3513 + 1.39999997615814208984375);
                                float _3516 = _3515 * _3515;
                                float _3519 = ((1.0 - _3516) * dot(vec3(_3502, _3503, _3504), vec3(_680, _683, _686))) + _3516;
                                float _3522 = _3513 * _3513;
                                float _3526 = (fma(_1828, _3406.z, fma(_1827, _3406.y, _3406.x * _1826)) + _3406.w) / _3467;
                                float _3527 = (fma(_1828, _3421.z, fma(_1827, _3421.y, _3421.x * _1826)) + _3421.w) / _3467;
                                float _3531 = 1.0 - dot(vec2(_3526, _3527), vec2(_3526, _3527));
                                float _4700 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                                float _3532 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                                float _3533 = _3532 * (((isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0))) * _3509) / ((_3522 * 0.699999988079071044921875) + 1.0));
                                float _3545 = exp2(log2(1.0 / ((_3522 * 3.5) + 5.0)) * 0.25);
                                float _3546 = 1.0 - _740;
                                float _3553 = sqrt(1.0 - ((1.0 - (_3546 * _3546)) * (1.0 - (_3545 * _3545))));
                                float _3554 = _3553 * _3553;
                                float _3555 = _3554 * _3554;
                                float _3556 = _3502 - _2976;
                                float _3557 = _3503 - _2977;
                                float _3558 = _3504 - _2978;
                                float _3562 = inversesqrt(dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558)));
                                float _3566 = dot(vec3(_680, _683, _686), vec3((-0.0) - _2976, (-0.0) - _2977, (-0.0) - _2978));
                                float _4711 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3569 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3570 = dot(vec3(_680, _683, _686), vec3(_3562 * _3556, _3562 * _3557, _3562 * _3558));
                                float _4722 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3573 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3577 = ((_3573 * _3573) * (_3555 + (-1.0))) + 1.0;
                                float _3578 = _3515 * _3554;
                                float _3579 = _3578 * _3578;
                                float _3585 = ((1.0 - _3579) * dot(vec3(_680, _683, _686), vec3(_3502, _3503, _3504))) + _3579;
                                float _4733 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3586 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3587 = 1.0 - _3554;
                                float _3597 = (0.5 / (((_3586 * ((_3569 * _3587) + _3554)) + 9.9999999392252902907785028219223e-09) + (((_3586 * _3587) + _3554) * _3569))) * _3586;
                                float _4744 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3607 = (_3532 * _3509) * (((_3555 * 3.1415927410125732421875) * (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) / ((_3577 * _3577) * ((_3522 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3533 * _3378.z;
                                frontier_phi_88_pred_1 = _3533 * _3378.y;
                                frontier_phi_88_pred_2 = _3533 * _3378.x;
                                frontier_phi_88_pred_3 = _3607 * _3390.z;
                                frontier_phi_88_pred_4 = _3607 * _3390.y;
                                frontier_phi_88_pred_5 = _3607 * _3390.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3616 = frontier_phi_88_pred;
                            _3615 = frontier_phi_88_pred_1;
                            _3614 = frontier_phi_88_pred_2;
                            _3613 = frontier_phi_88_pred_3;
                            _3612 = frontier_phi_88_pred_4;
                            _3611 = frontier_phi_88_pred_5;
                            _3320 = _3614 + _3333;
                            _3321 = _3615 + _3334;
                            _3322 = _3616 + _3335;
                            _3317 = _3611 + _3330;
                            _3318 = _3612 + _3331;
                            _3319 = _3613 + _3332;
                            if (_3337 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3337;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3322;
                        frontier_phi_82_pred_1 = _3321;
                        frontier_phi_82_pred_2 = _3320;
                        frontier_phi_82_pred_3 = _3319;
                        frontier_phi_82_pred_4 = _3318;
                        frontier_phi_82_pred_5 = _3317;
                    }
                    _2961 = frontier_phi_82_pred;
                    _2959 = frontier_phi_82_pred_1;
                    _2957 = frontier_phi_82_pred_2;
                    _2955 = frontier_phi_82_pred_3;
                    _2953 = frontier_phi_82_pred_4;
                    _2951 = frontier_phi_82_pred_5;
                    uint _3117 = _3116 + 1u;
                    if (_3117 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3110 = _2951;
                        _3111 = _2953;
                        _3112 = _2955;
                        _3113 = _2957;
                        _3114 = _2959;
                        _3115 = _2961;
                        _3116 = _3117;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2957;
                frontier_phi_63_64_ladder_1 = _2961;
                frontier_phi_63_64_ladder_2 = _2959;
                frontier_phi_63_64_ladder_3 = _2955;
                frontier_phi_63_64_ladder_4 = _2953;
                frontier_phi_63_64_ladder_5 = _2951;
            }
            else
            {
                frontier_phi_63_64_ladder = _2835;
                frontier_phi_63_64_ladder_1 = _2839;
                frontier_phi_63_64_ladder_2 = _2837;
                frontier_phi_63_64_ladder_3 = _2833;
                frontier_phi_63_64_ladder_4 = _2831;
                frontier_phi_63_64_ladder_5 = _2829;
            }
            _2950 = frontier_phi_63_64_ladder_5;
            _2952 = frontier_phi_63_64_ladder_4;
            _2954 = frontier_phi_63_64_ladder_3;
            _2956 = frontier_phi_63_64_ladder;
            _2958 = frontier_phi_63_64_ladder_2;
            _2960 = frontier_phi_63_64_ladder_1;
        }
        float _2965 = isnan(1.0) ? _724 : (isnan(_724) ? 1.0 : min(_724, 1.0));
        _2762 = (_2965 * _2956) + _2293;
        _2764 = (_2965 * _2958) + _2295;
        _2766 = (_2965 * _2960) + _2297;
        _2768 = ((_2950 * 0.039999999105930328369140625) * _2965) + _2616;
        _2770 = ((_2952 * 0.039999999105930328369140625) * _2965) + _2618;
        _2772 = ((_2954 * 0.039999999105930328369140625) * _2965) + _2620;
    }
    else
    {
        _2762 = _2293;
        _2764 = _2295;
        _2766 = _2297;
        _2768 = _2616;
        _2770 = _2618;
        _2772 = _2620;
    }
    float _4760 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4771 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4782 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _2789 = ((isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * (_2762 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _724))) + ((_2768 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1558)) * cbPerFrame._m0[3u].x);
    float _2790 = ((isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2764 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _724))) + ((_2770 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1558)) * cbPerFrame._m0[3u].x);
    float _2791 = ((isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2766 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _724))) + ((_2772 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1558)) * cbPerFrame._m0[3u].x);
    uint _2792 = _243 + 6u;
    float _2800 = _659 / cbSceneParam._m0[86u].x;
    float _2801 = _660 / cbSceneParam._m0[86u].y;
    vec4 _2815 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2800, _2801, (log2((isnan(cbSceneParam._m0[77u].w) ? _580 : (isnan(_580) ? cbSceneParam._m0[77u].w : min(_580, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2817 = _2815.x;
    float _2818 = _2815.y;
    float _2819 = _2815.z;
    float _2820 = _2815.w;
    float _2892;
    float _2894;
    float _2896;
    float _2898;
    if (_580 > cbSceneParam._m0[78u].w)
    {
        float _2854 = isnan(_580) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _580 : min(cbSceneParam._m0[80u].w, _580));
        float _2855 = _2854 / _580;
        float _2866 = _2855 * _631;
        float _2867 = _632 * _2855;
        float _2868 = (-0.0) - _2867;
        float _2870 = _2855 * _633;
        float _2872 = (cbSceneParam._m0[77u].w * _2868) / _2854;
        float _2873 = _2872 + cbSceneParam._m0[79u].w;
        float _2874 = cbSceneParam._m0[79u].w - _2867;
        float _2880 = sqrt(((_2866 * _2866) + (_2867 * _2867)) + (_2870 * _2870));
        float _2883 = (1.0 - (cbSceneParam._m0[77u].w / _2854)) * _2880;
        float _2888 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2890 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3067;
        if (abs((_2868 - _2872) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3067 = ((((_2873 > 0.0) ? exp2(_2888 * _2873) : (2.0 - exp2(_2890 * _2873))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2883;
        }
        else
        {
            float _3011 = 1.0 / cbSceneParam._m0[80u].x;
            float _3012 = isnan(_2874) ? _2873 : (isnan(_2873) ? _2874 : max(_2873, _2874));
            float _3013 = isnan(_2874) ? _2873 : (isnan(_2873) ? _2874 : min(_2873, _2874));
            float _3022 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : min(_3012, 0.0));
            float _3023 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : min(_3013, 0.0));
            _3067 = ((abs(_2880 / _2868) * cbSceneParam._m0[80u].y) * ((((_3022 - _3023) * 2.0) - ((exp2(_2888 * (isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0)))) - exp2(_2888 * (isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0))))) * _3011)) - ((exp2(_2890 * _3022) - exp2(_2890 * _3023)) * _3011))) + (_2883 * cbSceneParam._m0[80u].z);
        }
        vec4 _3069 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2800, _2801, 1.0), 0.0);
        float _3078 = exp2((_3067 * (-1.44269502162933349609375)) * (1.0 - _3069.w));
        float _3079 = log2(_3078);
        float _3095 = log2(_2820);
        _2892 = (exp2(_3095 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].x)) * _3069.x) / cbSceneParam._m0[78u].x)) + _2817;
        _2894 = (exp2(_3095 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].y)) * _3069.y) / cbSceneParam._m0[78u].y)) + _2818;
        _2896 = (exp2(_3095 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3079 * cbSceneParam._m0[78u].z)) * _3069.z) / cbSceneParam._m0[78u].z)) + _2819;
        _2898 = _3078 * _2820;
    }
    else
    {
        _2892 = _2817;
        _2894 = _2818;
        _2896 = _2819;
        _2898 = _2820;
    }
    bool _3105;
    vec4 _2908;
    vec4 _2930;
    float _2932;
    float _2936;
    float _2937;
    float _2938;
    float _2939;
    bool _2949;
    for (;;)
    {
        _2908 = cbMatDynParam._m0[0u];
        float _2910 = roundEven(_2908.y);
        bool _2911 = _2910 == 3.0;
        float _2912 = log2(_2898);
        float _2919 = exp2(_2912 * cbSceneParam._m0[78u].x) * _2789;
        float _2920 = exp2(_2912 * cbSceneParam._m0[78u].y) * _2790;
        float _2921 = exp2(_2912 * cbSceneParam._m0[78u].z) * _2791;
        float _2928 = _647 + (-0.5);
        _2930 = cbMtdParam._m0[1u];
        _2932 = _2930.y * _2928;
        float _2935 = (_2910 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2936 = _2935 * (_2911 ? _2919 : (_2919 + (cbSceneParam._m0[72u].w * _2892)));
        _2937 = _2935 * (_2911 ? _2920 : (_2920 + (cbSceneParam._m0[72u].w * _2894)));
        _2938 = _2935 * (_2911 ? _2921 : (_2921 + (cbSceneParam._m0[72u].w * _2896)));
        _2939 = _2928 * 0.999000012874603271484375;
        _2949 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2949)
        {
            if ((cbInstanceData._m0[_243 + 7u].x + _2939) < 0.5)
            {
                _3105 = true;
                break;
            }
        }
        uint _3046 = _699 + uint(_2908.w);
        if ((cbInstanceData._m0[_3046].w < 1.0) && ((cbInstanceData._m0[_3046].w + _2939) < 0.5))
        {
            _3105 = true;
            break;
        }
        if ((_2932 + 1.0) < _2930.x)
        {
            _3105 = true;
            break;
        }
        _3105 = false;
        break;
    }
    float _3308;
    if (_3105)
    {
        discard_state = true;
        _3308 = 0.0;
    }
    else
    {
        _3308 = cbInstanceData._m0[_2792].w;
    }
    SV_Target.x = _2936;
    SV_Target.y = _2937;
    SV_Target.z = _2938;
    SV_Target.w = _3308;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2792].w;
    discard_exit();
}


