#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1048;
float _3694;
float _3695;
float _3696;
float _3697;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _270 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _276 = _270.x * cbMtdParam._m0[9u].x;
    float _277 = _270.y * cbMtdParam._m0[9u].y;
    float _278 = _270.z * cbMtdParam._m0[9u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _250) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _251) + cbTextureTilingScale._m0[20u].w));
    vec4 _322 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _326 = _322.z;
    float _330 = (_322.x * 2.0) + (-1.0);
    float _331 = (_322.y * 2.0) + (-1.0);
    float _332 = dot(vec2(_330, _331), vec2(_330, _331));
    float _3706 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _338 = sqrt(1.0 - (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))));
    float _343 = _330 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_296.x * 2.0) + (-1.0)));
    float _344 = _331 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_296.y * 2.0) + (-1.0)));
    float _347 = fma(_338, _218, fma(_344, _225, _343 * _211));
    float _350 = fma(_338, _219, fma(_344, _226, _343 * _212));
    float _353 = fma(_338, _220, fma(_344, _227, _343 * _213));
    float _357 = inversesqrt(dot(vec3(_347, _350, _353), vec3(_347, _350, _353)));
    vec4 _393 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _395 = _393.x;
    float _396 = 1.0 - _395;
    float _405 = (cbMtdParam._m0[19u].x + dot(vec4(_357 * _347, _357 * _350, _357 * _353, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_395 - _396) * cbMtdParam._m0[24u].z) + _396) * cbMtdParam._m0[21u].z);
    float _3717 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _413 = (_406 * (cbMtdParam._m0[17u].x - _276)) + _276;
    float _414 = (_406 * (cbMtdParam._m0[17u].y - _277)) + _277;
    float _415 = (_406 * (cbMtdParam._m0[17u].z - _278)) + _278;
    float _420 = (((_296.z - _326) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _326;
    vec4 _433 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _440 = (_433.x * 2.0) + (-1.0);
    float _441 = (_433.y * 2.0) + (-1.0);
    float _442 = dot(vec2(_440, _441), vec2(_440, _441));
    float _3728 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _450 = ((_433.z - _420) * _406) + _420;
    float _460 = ((sqrt(1.0 - (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) - _338) * _406) + _338;
    float _463 = (((_440 - _343) * _406) + _343) + (cbMtdParam._m0[21u].x * _343);
    float _464 = (((_441 - _344) * _406) + _344) + (cbMtdParam._m0[21u].x * _344);
    float _469 = cbMtdParam._m0[22u].x + _322.w;
    float _472 = fma(_460, _218, fma(_464, _225, _463 * _211));
    float _475 = fma(_460, _219, fma(_464, _226, _463 * _212));
    float _478 = fma(_460, _220, fma(_464, _227, _463 * _213));
    float _482 = inversesqrt(dot(vec3(_472, _475, _478), vec3(_472, _475, _478)));
    float _483 = _482 * _472;
    float _484 = _482 * _475;
    float _485 = _482 * _478;
    float _3739 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _486 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _3750 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _3761 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _3772 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _3783 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _504 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _555 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _545);
    float _556 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _545);
    float _557 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _545);
    float _561 = inversesqrt(dot(vec3(_555, _556, _557), vec3(_555, _556, _557)));
    float _562 = _555 * _561;
    float _563 = _556 * _561;
    float _564 = _557 * _561;
    vec4 _569 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _571 = _569.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _728 = sqrt(((_555 * _555) + (_556 * _556)) + (_557 * _557));
        float _734 = (cbMatDynParam._m0[5u].x * _728) + cbMatDynParam._m0[5u].y;
        float _3794 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _739 = (cbMatDynParam._m0[5u].z * _728) + cbMatDynParam._m0[5u].w;
        float _3805 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) - _735)) + _735) < ((_571 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _583 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _584 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _604 = fma(_485, cbSceneParam._m0[5u].z, fma(_484, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _483));
    float _607 = fma(_485, cbSceneParam._m0[6u].z, fma(_484, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _483));
    float _610 = fma(_485, cbSceneParam._m0[7u].z, fma(_484, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _483));
    uint _623 = _230 + 9u;
    uint _624 = _623 + uint(cbMatDynParam._m0[0u].w);
    float _630 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_624].x;
    float _631 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * cbInstanceData._m0[_624].y;
    float _632 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) * cbInstanceData._m0[_624].z;
    float _3816 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _3827 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _3838 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    vec4 _644 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _583, cbSceneParam._m0[86u].y * _584));
    float _648 = ((isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * TEXCOORD_5.w) * _644.x;
    float _649 = dot(vec3(_483, _484, _485), vec3(_562, _563, _564));
    float _652 = _649 * 2.0;
    float _656 = (_652 * _483) - _562;
    float _657 = (_652 * _484) - _563;
    float _658 = (_652 * _485) - _564;
    float _662 = abs(dot(vec3(_562, _563, _564), vec3(_483, _484, _485)));
    float _3849 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _664 = sqrt(_486);
    float _677 = exp2((_664 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_664 * 3.0));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1047;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _772 = fma(_717, cbModelParam._m0[26u].z, fma(_713, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _709));
        float _776 = fma(_717, cbModelParam._m0[27u].z, fma(_713, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _709));
        float _780 = fma(_717, cbModelParam._m0[28u].z, fma(_713, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _709));
        float _805 = _709 + _483;
        float _806 = _713 + _484;
        float _807 = _717 + _485;
        float _817 = fma(_807, cbModelParam._m0[26u].z, fma(_806, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _805)) - _772;
        float _818 = fma(_807, cbModelParam._m0[27u].z, fma(_806, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _805)) - _776;
        float _819 = fma(_807, cbModelParam._m0[28u].z, fma(_806, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _805)) - _780;
        float _823 = inversesqrt(dot(vec3(_817, _818, _819), vec3(_817, _818, _819)));
        float _836 = ((_823 * _817) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_772 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_823 * _818) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_776 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _838 = ((_823 * _819) / cbModelParam._m0[34u].z) + ((((((_780 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_836, _837, _838), 0.0);
        float _875 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_841.x + (-0.5));
        float _877 = _875 * (_841.y + (-0.5));
        float _878 = _875 * (_841.z + (-0.5));
        float _885 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_848.x + (-0.5));
        float _887 = _885 * (_848.y + (-0.5));
        float _888 = _885 * (_848.z + (-0.5));
        float _895 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_855.x + (-0.5));
        float _897 = _895 * (_855.y + (-0.5));
        float _898 = _895 * (_855.z + (-0.5));
        float _905 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_862.x + (-0.5));
        float _907 = _905 * (_862.y + (-0.5));
        float _908 = _905 * (_862.z + (-0.5));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = _876 * 0.5;
        float _913 = _886 * 0.5;
        float _914 = _896 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _929 = (dot(vec3(_483, _484, _485), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _939 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _941 = _940 * 2.0;
        float _945 = (1.0 - _940) / (_940 + 1.0);
        float _3897 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _955 = ((((1.0 - _946) * (_941 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_941 + 1.0))) + _946) * _909;
        float _956 = _877 * 0.5;
        float _957 = _887 * 0.5;
        float _958 = _897 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _972 = (dot(vec3(_483, _484, _485), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _981 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3930 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_983 + 1.0))) + _988) * _910;
        float _998 = _878 * 0.5;
        float _999 = _888 * 0.5;
        float _1000 = _898 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_483, _484, _485), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3963 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1025 + 1.0))) + _1030) * _911;
        _1047 = _878;
        _1049 = _877;
        _1050 = _876;
        _1051 = _888;
        _1052 = _887;
        _1053 = _886;
        _1054 = _898;
        _1055 = _897;
        _1056 = _896;
        _1057 = _911;
        _1058 = _910;
        _1059 = _909;
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)));
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
    }
    else
    {
        _1047 = _1048;
        _1049 = _1048;
        _1050 = _1048;
        _1051 = _1048;
        _1052 = _1048;
        _1053 = _1048;
        _1054 = _1048;
        _1055 = _1048;
        _1056 = _1048;
        _1057 = _1048;
        _1058 = _1048;
        _1059 = _1048;
        _1060 = 0.0;
        _1061 = 0.0;
        _1062 = 0.0;
    }
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1090 = fma(_717, cbModelParam._m0[30u].z, fma(_713, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _709));
        float _1094 = fma(_717, cbModelParam._m0[31u].z, fma(_713, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _709));
        float _1098 = fma(_717, cbModelParam._m0[32u].z, fma(_713, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _709));
        float _1121 = _709 + _483;
        float _1122 = _713 + _484;
        float _1123 = _717 + _485;
        float _1133 = fma(_1123, cbModelParam._m0[30u].z, fma(_1122, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121)) - _1090;
        float _1134 = fma(_1123, cbModelParam._m0[31u].z, fma(_1122, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121)) - _1094;
        float _1135 = fma(_1123, cbModelParam._m0[32u].z, fma(_1122, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121)) - _1098;
        float _1139 = inversesqrt(dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135)));
        float _1152 = ((_1139 * _1133) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1090 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1139 * _1134) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1094 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1139 * _1135) / cbModelParam._m0[35u].z) + ((((((_1098 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        float _1189 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1156.x + (-0.5));
        float _1191 = _1189 * (_1156.y + (-0.5));
        float _1192 = _1189 * (_1156.z + (-0.5));
        float _1199 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1163.x + (-0.5));
        float _1201 = _1199 * (_1163.y + (-0.5));
        float _1202 = _1199 * (_1163.z + (-0.5));
        float _1209 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1170.x + (-0.5));
        float _1211 = _1209 * (_1170.y + (-0.5));
        float _1212 = _1209 * (_1170.z + (-0.5));
        float _1219 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1177.x + (-0.5));
        float _1221 = _1219 * (_1177.y + (-0.5));
        float _1222 = _1219 * (_1177.z + (-0.5));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = _1190 * 0.5;
        float _1227 = _1200 * 0.5;
        float _1228 = _1210 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_483, _484, _485), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4026 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1253 + 1.0))) + _1258) * _1223;
        float _1268 = _1191 * 0.5;
        float _1269 = _1201 * 0.5;
        float _1270 = _1211 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_483, _484, _485), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4059 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1295 + 1.0))) + _1300) * _1224;
        float _1310 = _1192 * 0.5;
        float _1311 = _1202 * 0.5;
        float _1312 = _1212 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_483, _484, _485), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _4092 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1337 + 1.0))) + _1342) * _1225;
        _1359 = _1192;
        _1360 = _1191;
        _1361 = _1190;
        _1362 = _1202;
        _1363 = _1201;
        _1364 = _1200;
        _1365 = _1212;
        _1366 = _1211;
        _1367 = _1210;
        _1368 = _1225;
        _1369 = _1224;
        _1370 = _1223;
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1048;
        _1360 = _1048;
        _1361 = _1048;
        _1362 = _1048;
        _1363 = _1048;
        _1364 = _1048;
        _1365 = _1048;
        _1366 = _1048;
        _1367 = _1048;
        _1368 = _1048;
        _1369 = _1048;
        _1370 = _1048;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1060)) + _1060;
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1061)) + _1061;
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1062)) + _1062;
    float _1406 = fma(_1385, cbSceneParam._m0[89u].z, fma(_1384, cbSceneParam._m0[89u].y, _1383 * cbSceneParam._m0[89u].x));
    float _1409 = fma(_1385, cbSceneParam._m0[90u].z, fma(_1384, cbSceneParam._m0[90u].y, _1383 * cbSceneParam._m0[90u].x));
    float _1412 = fma(_1385, cbSceneParam._m0[91u].z, fma(_1384, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1383));
    float _1427 = _656 * 0.5;
    float _1428 = _657 * 0.5;
    float _1429 = _658 * 0.5;
    float _1430 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1433 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1436 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1470;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1443 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1047, _1051, _1054, _1057));
        float _1447 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1049, _1052, _1055, _1058));
        float _1451 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1050, _1053, _1056, _1059));
        float _1458 = dot(vec4(cbModelParam._m0[39u]), vec4(_1427, _1428, _1429, 1.0));
        _1470 = dot(vec3(isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1470 = 1.0;
    }
    float _1481;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1472 = dot(vec4(cbModelParam._m0[40u]), vec4(_1427, _1428, _1429, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1472) ? 0.0 : (isnan(0.0) ? _1472 : max(0.0, _1472))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1485 = (_1481 * cbModelParam._m0[1u].x) + (_1470 * (1.0 - cbModelParam._m0[1u].x));
    float _1495 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _486);
    float _1496 = isnan(_1495) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1495 : min(cbModelParam._m0[25u].z, _1495));
    float _1577;
    float _1579;
    float _1581;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1544 = fma(_717, cbModelParam._m0[13u].z, fma(_713, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _709)) + cbModelParam._m0[13u].w;
        float _1548 = fma(_717, cbModelParam._m0[14u].z, fma(_713, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _709)) + cbModelParam._m0[14u].w;
        float _1552 = fma(_717, cbModelParam._m0[15u].z, fma(_713, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _709)) + cbModelParam._m0[15u].w;
        float _1555 = fma(_658, cbModelParam._m0[13u].z, fma(_657, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _656));
        float _1558 = fma(_658, cbModelParam._m0[14u].z, fma(_657, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _656));
        float _1561 = fma(_658, cbModelParam._m0[15u].z, fma(_657, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _656));
        float _1589;
        if (_1555 > 0.0)
        {
            _1589 = abs((1.0 - _1544) / _1555);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1544 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1589 = frontier_phi_17_15_ladder;
        }
        float _1760;
        if (_1558 > 0.0)
        {
            _1760 = abs((1.0 - _1548) / _1558);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1548 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1760 = frontier_phi_26_22_ladder;
        }
        float _2056;
        if (_1561 > 0.0)
        {
            _2056 = abs((1.0 - _1552) / _1561);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1552 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2056 = frontier_phi_38_33_ladder;
        }
        float _2058 = isnan(_1760) ? _1589 : (isnan(_1589) ? _1760 : min(_1589, _1760));
        float _2059 = isnan(_2056) ? _2058 : (isnan(_2058) ? _2056 : min(_2058, _2056));
        float _2063 = (_2059 * _1555) + _1544;
        float _2064 = (_2059 * _1558) + _1548;
        float _2065 = (_2059 * _1561) + _1552;
        float _2066 = _2059 * 9.9999997473787516355514526367188e-05;
        float _2068 = (-1.0) - _2066;
        float _2070 = _2066 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2065 > _2070) || ((_2065 < _2068) || ((_2064 > _2070) || ((_2064 < _2068) || ((_2063 < _2068) || (_2063 > _2070))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2210 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2065, cbModelParam._m0[9u].z, fma(_2064, cbModelParam._m0[9u].y, _2063 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2065, cbModelParam._m0[10u].z, fma(_2064, cbModelParam._m0[10u].y, _2063 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2065, cbModelParam._m0[11u].z, fma(_2064, cbModelParam._m0[11u].y, _2063 * cbModelParam._m0[11u].x))), _1496);
            frontier_phi_16_38_ladder = _2210.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2210.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2210.x * cbModelParam._m0[1u].y;
        }
        _1577 = frontier_phi_16_38_ladder_2;
        _1579 = frontier_phi_16_38_ladder_1;
        _1581 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1565 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_656, _657, _658), _1496);
        _1577 = _1565.x * cbModelParam._m0[1u].y;
        _1579 = _1565.y * cbModelParam._m0[1u].y;
        _1581 = _1565.z * cbModelParam._m0[1u].y;
    }
    float _1585 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _486);
    float _1586 = isnan(_1585) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1585 : min(cbModelParam._m0[25u].w, _1585));
    float _1676;
    float _1678;
    float _1680;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1640 = fma(_717, cbModelParam._m0[21u].z, fma(_713, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _709)) + cbModelParam._m0[21u].w;
        float _1644 = fma(_717, cbModelParam._m0[22u].z, fma(_713, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _709)) + cbModelParam._m0[22u].w;
        float _1648 = fma(_717, cbModelParam._m0[23u].z, fma(_713, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _709)) + cbModelParam._m0[23u].w;
        float _1651 = fma(_658, cbModelParam._m0[21u].z, fma(_657, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _656));
        float _1654 = fma(_658, cbModelParam._m0[22u].z, fma(_657, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _656));
        float _1657 = fma(_658, cbModelParam._m0[23u].z, fma(_657, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _656));
        float _1765;
        if (_1651 > 0.0)
        {
            _1765 = abs((1.0 - _1640) / _1651);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1640 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1765 = frontier_phi_28_24_ladder;
        }
        float _2083;
        if (_1654 > 0.0)
        {
            _2083 = abs((1.0 - _1644) / _1654);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1644 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2083 = frontier_phi_40_35_ladder;
        }
        float _2410;
        if (_1657 > 0.0)
        {
            _2410 = abs((1.0 - _1648) / _1657);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1648 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2410 = frontier_phi_50_47_ladder;
        }
        float _2412 = isnan(_2083) ? _1765 : (isnan(_1765) ? _2083 : min(_1765, _2083));
        float _2413 = isnan(_2410) ? _2412 : (isnan(_2412) ? _2410 : min(_2412, _2410));
        float _2417 = (_2413 * _1651) + _1640;
        float _2418 = (_2413 * _1654) + _1644;
        float _2419 = (_2413 * _1657) + _1648;
        float _2420 = _2413 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2420;
        float _2423 = _2420 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2419 > _2423) || ((_2419 < _2421) || ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 < _2421) || (_2417 > _2423))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2419, cbModelParam._m0[17u].z, fma(_2418, cbModelParam._m0[17u].y, _2417 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2419, cbModelParam._m0[18u].z, fma(_2418, cbModelParam._m0[18u].y, _2417 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2419, cbModelParam._m0[19u].z, fma(_2418, cbModelParam._m0[19u].y, _2417 * cbModelParam._m0[19u].x))), _1586);
            frontier_phi_25_50_ladder = _2537.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2537.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2537.x * cbModelParam._m0[1u].z;
        }
        _1676 = frontier_phi_25_50_ladder_2;
        _1678 = frontier_phi_25_50_ladder_1;
        _1680 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1660 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_656, _657, _658), _1586);
        _1676 = _1660.x * cbModelParam._m0[1u].z;
        _1678 = _1660.y * cbModelParam._m0[1u].z;
        _1680 = _1660.z * cbModelParam._m0[1u].z;
    }
    float _1692 = ((((1.0 - _677) * ((_664 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_677 * _664)) * _648;
    float _1693 = _1692 * ((cbModelParam._m0[1u].w * (_1676 - _1577)) + _1577);
    float _1694 = _1692 * ((cbModelParam._m0[1u].w * (_1678 - _1579)) + _1579);
    float _1695 = _1692 * ((cbModelParam._m0[1u].w * (_1680 - _1581)) + _1581);
    float _1698 = fma(_1695, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1693 * cbSceneParam._m0[89u].x));
    float _1701 = fma(_1695, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1693 * cbSceneParam._m0[90u].x));
    float _1704 = fma(_1695, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, _1693 * cbSceneParam._m0[91u].x));
    float _1739 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1743 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1747 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1751 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1752 = _1739 / _1751;
    float _1753 = _1743 / _1751;
    float _1754 = _1747 / _1751;
    float _1901;
    float _1902;
    float _1903;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1781 = ((uint(_1754 > cbSceneParam._m0[59u].y) + uint(_1754 > cbSceneParam._m0[59u].x)) + uint(_1754 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1782 = _1781 + 43u;
        uint _1790 = _1781 + 44u;
        uint _1798 = _1781 + 45u;
        uint _1806 = _1781 + 46u;
        float _1817 = fma(_1751, cbSceneParam._m0[_1782].w, fma(_1747, cbSceneParam._m0[_1782].z, fma(_1743, cbSceneParam._m0[_1782].y, _1739 * cbSceneParam._m0[_1782].x)));
        float _1821 = fma(_1751, cbSceneParam._m0[_1790].w, fma(_1747, cbSceneParam._m0[_1790].z, fma(_1743, cbSceneParam._m0[_1790].y, _1739 * cbSceneParam._m0[_1790].x)));
        float _1829 = fma(_1751, cbSceneParam._m0[_1806].w, fma(_1747, cbSceneParam._m0[_1806].z, fma(_1743, cbSceneParam._m0[_1806].y, _1739 * cbSceneParam._m0[_1806].x)));
        float _1834 = cbSceneParam._m0[33u].z * _1829;
        float _1836 = cbSceneParam._m0[33u].w * _1829;
        float _1839 = fma(_1751, cbSceneParam._m0[_1798].w, fma(_1747, cbSceneParam._m0[_1798].z, fma(_1743, cbSceneParam._m0[_1798].y, _1739 * cbSceneParam._m0[_1798].x))) / _1829;
        float _1887 = (cbSceneParam._m0[33u].x - sqrt(((_1753 * _1753) + (_1752 * _1752)) + (_1754 * _1754))) * cbSceneParam._m0[33u].y;
        float _4218 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1894 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1834 + _1817) / _1829, (_1836 + _1821) / _1829), _1839), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1836 + _1817) / _1829, (_1821 - _1834) / _1829), _1839), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1817 - _1834) / _1829, (_1821 - _1836) / _1829), _1839), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1817 - _1836) / _1829, (_1834 + _1821) / _1829), _1839), 0.0)).x), vec4(0.25)));
        _1901 = 1.0 - (_1894 * cbSceneParam._m0[34u].x);
        _1902 = 1.0 - (_1894 * cbSceneParam._m0[34u].y);
        _1903 = 1.0 - (_1894 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1901 = 1.0;
        _1902 = 1.0;
        _1903 = 1.0;
    }
    float _1967;
    float _1969;
    float _1971;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1955 = fma(_1751, cbSceneParam._m0[63u].w, fma(_1747, cbSceneParam._m0[63u].z, fma(_1743, cbSceneParam._m0[63u].y, _1739 * cbSceneParam._m0[63u].x)));
        float _1956 = fma(_1751, cbSceneParam._m0[60u].w, fma(_1747, cbSceneParam._m0[60u].z, fma(_1743, cbSceneParam._m0[60u].y, _1739 * cbSceneParam._m0[60u].x))) / _1955;
        float _1957 = fma(_1751, cbSceneParam._m0[61u].w, fma(_1747, cbSceneParam._m0[61u].z, fma(_1743, cbSceneParam._m0[61u].y, _1739 * cbSceneParam._m0[61u].x))) / _1955;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1956 >= cbSceneParam._m0[64u].x) && (_1957 >= cbSceneParam._m0[64u].y)) && (_1956 <= cbSceneParam._m0[64u].z)) && (_1957 <= cbSceneParam._m0[64u].w))
        {
            float _2096 = fma(_1751, cbSceneParam._m0[62u].w, fma(_1747, cbSceneParam._m0[62u].z, fma(_1743, cbSceneParam._m0[62u].y, _1739 * cbSceneParam._m0[62u].x))) / _1955;
            float _2100 = isnan(cbSceneParam._m0[41u].w) ? _2096 : (isnan(_2096) ? cbSceneParam._m0[41u].w : max(_2096, cbSceneParam._m0[41u].w));
            float _2143 = (cbSceneParam._m0[33u].x - sqrt(((_1753 * _1753) + (_1752 * _1752)) + (_1754 * _1754))) * cbSceneParam._m0[33u].y;
            float _4234 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
            float _2150 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1956, cbSceneParam._m0[33u].w + _1957), _2100), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1956, _1957 - cbSceneParam._m0[33u].z), _2100), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1956 - cbSceneParam._m0[33u].z, _1957 - cbSceneParam._m0[33u].w), _2100), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1956 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1957), _2100), 0.0)).x), vec4(0.25)));
            float _2154 = 1.0 - (_2150 * cbSceneParam._m0[34u].x);
            float _2155 = 1.0 - (_2150 * cbSceneParam._m0[34u].y);
            float _2156 = 1.0 - (_2150 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2156) ? _1903 : (isnan(_1903) ? _2156 : min(_1903, _2156));
            frontier_phi_37_36_ladder_1 = isnan(_2155) ? _1902 : (isnan(_1902) ? _2155 : min(_1902, _2155));
            frontier_phi_37_36_ladder_2 = isnan(_2154) ? _1901 : (isnan(_1901) ? _2154 : min(_1901, _2154));
        }
        else
        {
            frontier_phi_37_36_ladder = _1903;
            frontier_phi_37_36_ladder_1 = _1902;
            frontier_phi_37_36_ladder_2 = _1901;
        }
        _1967 = frontier_phi_37_36_ladder_2;
        _1969 = frontier_phi_37_36_ladder_1;
        _1971 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1967 = _1901;
        _1969 = _1902;
        _1971 = _1903;
    }
    uvec4 _1976 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1978 = _1976.x * 14u;
    uint _1979 = _1978 + 13u;
    float _1986 = _648 + (-1.0);
    float _1991 = (cbLight._m0[_1979].x * _1986) + 1.0;
    float _1992 = (cbLight._m0[_1979].y * _1986) + 1.0;
    float _1993 = (cbLight._m0[_1979].z * _1986) + 1.0;
    float _1994 = (cbLight._m0[_1979].w * _1986) + 1.0;
    uint _1995 = _1978 + 5u;
    float _2001 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
    uint _2005 = _1978 + 4u;
    float _2015 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
    uint _2019 = _1978 | 1u;
    float _2030 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_483, _484, _485));
    float _2033 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_483, _484, _485));
    float _4270 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _4281 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2038 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * 0.3183098733425140380859375;
    float _2040 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * 0.3183098733425140380859375;
    float _2047 = ((cbLight._m0[_1995].x * _2001) * _2040) + (((cbLight._m0[_2005].x * _1967) * _2015) * _2038);
    float _2048 = ((_2001 * cbLight._m0[_1995].y) * _2040) + (((cbLight._m0[_2005].y * _1969) * _2015) * _2038);
    float _2049 = ((_2001 * cbLight._m0[_1995].z) * _2040) + (((cbLight._m0[_2005].z * _1971) * _2015) * _2038);
    uvec4 _2053 = floatBitsToUint(cbLight._m0[_1978 + 12u]);
    bool _2055 = _2053.x == 0u;
    float _2157;
    float _2159;
    float _2161;
    if (_2055)
    {
        _2157 = _2047;
        _2159 = _2048;
        _2161 = _2049;
    }
    else
    {
        uint _2165 = _1978 + 6u;
        float _2181 = (dot(vec3(cbLight._m0[_1978 + 2u].xyz), vec3(_483, _484, _485)) * 0.5) + 0.5;
        float _2182 = _2181 * _2181;
        float _4292 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2183 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2184 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2157 = (((cbLight._m0[_2165].x * 0.3183098733425140380859375) * _2183) * _2184) + _2047;
        _2159 = (((cbLight._m0[_2165].y * 0.3183098733425140380859375) * _2183) * _2184) + _2048;
        _2161 = (((cbLight._m0[_2165].z * 0.3183098733425140380859375) * _2183) * _2184) + _2049;
    }
    bool _2164 = _2053.y == 0u;
    float _2219;
    float _2221;
    float _2223;
    if (_2164)
    {
        _2219 = _2157;
        _2221 = _2159;
        _2223 = _2161;
    }
    else
    {
        uint _2381 = _1978 + 7u;
        float _2397 = (dot(vec3(cbLight._m0[_1978 + 3u].xyz), vec3(_483, _484, _485)) * 0.5) + 0.5;
        float _2398 = _2397 * _2397;
        float _4308 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2399 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _2400 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2219 = (((cbLight._m0[_2381].x * 0.3183098733425140380859375) * _2399) * _2400) + _2157;
        _2221 = (((cbLight._m0[_2381].y * 0.3183098733425140380859375) * _2399) * _2400) + _2159;
        _2223 = (((cbLight._m0[_2381].z * 0.3183098733425140380859375) * _2399) * _2400) + _2161;
    }
    uint _2226 = _1978 + 8u;
    float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1978].w)) * _486) * 0.949999988079071044921875);
    float _2240 = _2239 * _2239;
    float _2241 = cbLight._m0[_1978].x + _562;
    float _2242 = cbLight._m0[_1978].y + _563;
    float _2243 = cbLight._m0[_1978].z + _564;
    float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
    float _2248 = _2247 * _2241;
    float _2249 = _2247 * _2242;
    float _2250 = _2247 * _2243;
    float _2251 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_1978].xyz));
    float _4324 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _4335 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _2255 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2256 = dot(vec3(_483, _484, _485), vec3(_2248, _2249, _2250));
    float _4346 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2260 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_2248, _2249, _2250));
    float _4357 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2264 = _2240 * _2240;
    float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
    float _2279 = (exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2280 = 1.0 - _2240;
    float _2291 = (0.5 / (((_2255 * ((_2254 * _2280) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2280) + _2240) * _2254))) * _2254;
    float _4368 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2293 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
    uint _2307 = _1978 + 9u;
    float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _486) * 0.949999988079071044921875);
    float _2319 = _2318 * _2318;
    float _2320 = cbLight._m0[_2019].x + _562;
    float _2321 = cbLight._m0[_2019].y + _563;
    float _2322 = cbLight._m0[_2019].z + _564;
    float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
    float _2327 = _2326 * _2320;
    float _2328 = _2326 * _2321;
    float _2329 = _2326 * _2322;
    float _2330 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_2019].xyz));
    float _4379 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _2334 = dot(vec3(_483, _484, _485), vec3(_2327, _2328, _2329));
    float _4390 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _2338 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2327, _2328, _2329));
    float _4401 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2342 = _2319 * _2319;
    float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
    float _2355 = (exp2(log2(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2356 = 1.0 - _2319;
    float _2366 = (0.5 / (((_2255 * ((_2333 * _2356) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2356) + _2319) * _2333))) * _2333;
    float _4412 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2368 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
    float _2378 = (((_2355 * cbLight._m0[_2307].x) * _2368) * _2001) + ((((cbLight._m0[_2226].x * _1967) * _2279) * _2293) * _2015);
    float _2379 = (((_2355 * cbLight._m0[_2307].y) * _2368) * _2001) + ((((cbLight._m0[_2226].y * _1969) * _2279) * _2293) * _2015);
    float _2380 = (((_2355 * cbLight._m0[_2307].z) * _2368) * _2001) + ((((cbLight._m0[_2226].z * _1971) * _2279) * _2293) * _2015);
    float _2436;
    float _2438;
    float _2440;
    if (_2055)
    {
        _2436 = _2378;
        _2438 = _2379;
        _2440 = _2380;
    }
    else
    {
        uint _2442 = _1978 + 2u;
        uint _2446 = _1978 + 10u;
        float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _486) * 0.949999988079071044921875);
        float _2461 = _2460 * _2460;
        float _2462 = cbLight._m0[_2442].x + _562;
        float _2463 = cbLight._m0[_2442].y + _563;
        float _2464 = cbLight._m0[_2442].z + _564;
        float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
        float _2469 = _2468 * _2462;
        float _2470 = _2468 * _2463;
        float _2471 = _2468 * _2464;
        float _2472 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_2442].xyz));
        float _4423 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2476 = dot(vec3(_483, _484, _485), vec3(_2469, _2470, _2471));
        float _4434 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2480 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2469, _2470, _2471));
        float _4445 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2484 = _2461 * _2461;
        float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
        float _2497 = (exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2498 = 1.0 - _2461;
        float _2508 = (0.5 / (((_2255 * ((_2475 * _2498) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2498) + _2461) * _2475))) * _2475;
        float _4456 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2510 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
        float _2511 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2436 = (((_2497 * cbLight._m0[_2446].x) * _2510) * _2511) + _2378;
        _2438 = (((_2497 * cbLight._m0[_2446].y) * _2510) * _2511) + _2379;
        _2440 = (((_2497 * cbLight._m0[_2446].z) * _2510) * _2511) + _2380;
    }
    float _2542;
    float _2544;
    float _2546;
    if (_2164)
    {
        _2542 = _2436;
        _2544 = _2438;
        _2546 = _2440;
    }
    else
    {
        uint _2553 = _1978 + 3u;
        uint _2557 = _1978 + 11u;
        float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2553].w)) * _486) * 0.949999988079071044921875);
        float _2572 = _2571 * _2571;
        float _2573 = cbLight._m0[_2553].x + _562;
        float _2574 = cbLight._m0[_2553].y + _563;
        float _2575 = cbLight._m0[_2553].z + _564;
        float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
        float _2580 = _2579 * _2573;
        float _2581 = _2579 * _2574;
        float _2582 = _2579 * _2575;
        float _2583 = dot(vec3(_483, _484, _485), vec3(cbLight._m0[_2553].xyz));
        float _4472 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2587 = dot(vec3(_483, _484, _485), vec3(_2580, _2581, _2582));
        float _4483 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2591 = dot(vec3(cbLight._m0[_2553].xyz), vec3(_2580, _2581, _2582));
        float _4494 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2595 = _2572 * _2572;
        float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
        float _2608 = (exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2609 = 1.0 - _2572;
        float _2619 = (0.5 / (((_2255 * ((_2586 * _2609) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2255 * _2609) + _2572) * _2586))) * _2586;
        float _4505 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2621 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
        float _2622 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2542 = (((_2608 * cbLight._m0[_2557].x) * _2621) * _2622) + _2436;
        _2544 = (((_2608 * cbLight._m0[_2557].y) * _2621) * _2622) + _2438;
        _2546 = (((_2608 * cbLight._m0[_2557].z) * _2621) * _2622) + _2440;
    }
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    if (_1976.y == 0u)
    {
        uvec4 _2643 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2644 = _2643.x;
        uint _2655 = uint((float(_2643.y) * floor(float(uint(cbSceneParam._m0[85u].y * _584) / _2644))) + floor(float(uint(cbSceneParam._m0[85u].x * _583) / _2644)));
        float _2665 = (log2(_1754 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2666 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        uint _2669 = uint(isnan(14.0) ? _2666 : (isnan(_2666) ? 14.0 : min(_2666, 14.0)));
        uvec4 _2674 = texelFetch(g_lightClusterGridBuffer, int(((_2669 << 2u) + (_2655 << 6u)) >> 2u));
        uint _2675 = _2674.x;
        uint _2676 = _2643.z;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        if (((((1u << ((_2676 >> 4u) & 15u)) + 4294967295u) & _2675) == 0u) || ((_2676 & 240u) == 0u))
        {
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
        }
        else
        {
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            uint _2914 = 0u;
            uint _2923;
            bool _2924;
            for (;;)
            {
                _2923 = texelFetch(g_lightClassification, int((((_2669 << 5u) + (_2655 << 9u)) + (_2914 << 2u)) >> 2u)).x;
                _2924 = _2923 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2924)
                {
                    frontier_phi_71_pred = _2913;
                    frontier_phi_71_pred_1 = _2912;
                    frontier_phi_71_pred_2 = _2911;
                    frontier_phi_71_pred_3 = _2910;
                    frontier_phi_71_pred_4 = _2909;
                    frontier_phi_71_pred_5 = _2908;
                }
                else
                {
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    uint _3059;
                    _3053 = _2908;
                    _3054 = _2909;
                    _3055 = _2910;
                    _3056 = _2911;
                    _3057 = _2912;
                    _3058 = _2913;
                    _3059 = _2923;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    for (;;)
                    {
                        uint _3063 = uint(findLSB(_3059)) + (_2914 << 5u);
                        uint _3060 = (_3059 + 4294967295u) & _3059;
                        uint _3065 = _3063 * 48u;
                        vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 3u)).x));
                        uint _3085 = (_3063 * 48u) + 4u;
                        vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 3u)).x));
                        uint _3104 = (_3063 * 48u) + 8u;
                        vec3 _3115 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x));
                        float _3119 = _3079.x - _1752;
                        float _3120 = _3079.y - _1753;
                        float _3121 = _3079.z - _1754;
                        float _3122 = dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121));
                        float _3125 = inversesqrt(_3122);
                        float _3126 = _3125 * _3119;
                        float _3127 = _3125 * _3120;
                        float _3128 = _3125 * _3121;
                        float _3129 = dot(vec3(_604, _607, _610), vec3(_3126, _3127, _3128));
                        float _3134 = 1.0 - (_3122 * _3079.w);
                        float _4531 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3135 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3136 = sqrt(_3122) * _3098.w;
                        float _3139 = 1.39999997615814208984375 / (_3136 + 1.39999997615814208984375);
                        float _3140 = _3139 * _3139;
                        float _3143 = ((1.0 - _3140) * _3129) + _3140;
                        float _3146 = _3136 * _3136;
                        float _3150 = ((isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0))) * _3135) / ((_3146 * 0.699999988079071044921875) + 1.0);
                        float _3154 = (-0.0) - _1752;
                        float _3155 = (-0.0) - _1753;
                        float _3156 = (-0.0) - _1754;
                        float _3160 = inversesqrt(dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156)));
                        float _3161 = _3160 * _3154;
                        float _3162 = _3160 * _3155;
                        float _3163 = _3160 * _3156;
                        float _3170 = exp2(log2(1.0 / ((_3146 * 3.5) + 5.0)) * 0.25);
                        float _3171 = 1.0 - _664;
                        float _3178 = sqrt(1.0 - ((1.0 - (_3171 * _3171)) * (1.0 - (_3170 * _3170))));
                        float _3179 = _3178 * _3178;
                        float _3180 = _3179 * _3179;
                        float _3181 = _3161 + _3126;
                        float _3182 = _3162 + _3127;
                        float _3183 = _3163 + _3128;
                        float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                        float _3191 = dot(vec3(_604, _607, _610), vec3(_3161, _3162, _3163));
                        float _4547 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                        float _3195 = dot(vec3(_604, _607, _610), vec3(_3187 * _3181, _3187 * _3182, _3187 * _3183));
                        float _4558 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3198 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3202 = ((_3198 * _3198) * (_3180 + (-1.0))) + 1.0;
                        float _3203 = _3139 * _3179;
                        float _3204 = _3203 * _3203;
                        float _3207 = ((1.0 - _3204) * _3129) + _3204;
                        float _4569 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3208 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                        float _3209 = 1.0 - _3179;
                        float _3219 = (0.5 / (((_3208 * ((_3194 * _3209) + _3179)) + 9.9999999392252902907785028219223e-09) + (((_3208 * _3209) + _3179) * _3194))) * _3208;
                        float _4580 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3230 = (((_3180 * 3.1415927410125732421875) * (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) / ((_3202 * _3202) * ((_3146 * 2.1991131305694580078125) + 3.141590118408203125))) * _3135;
                        _2983 = (_3150 * _3098.x) + _3056;
                        _2984 = (_3150 * _3098.y) + _3057;
                        _2985 = (_3150 * _3098.z) + _3058;
                        _2980 = (_3230 * _3115.x) + _3053;
                        _2981 = (_3230 * _3115.y) + _3054;
                        _2982 = (_3230 * _3115.z) + _3055;
                        if (_3060 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3053 = _2980;
                            _3054 = _2981;
                            _3055 = _2982;
                            _3056 = _2983;
                            _3057 = _2984;
                            _3058 = _2985;
                            _3059 = _3060;
                        }
                    }
                    frontier_phi_71_pred = _2985;
                    frontier_phi_71_pred_1 = _2984;
                    frontier_phi_71_pred_2 = _2983;
                    frontier_phi_71_pred_3 = _2982;
                    frontier_phi_71_pred_4 = _2981;
                    frontier_phi_71_pred_5 = _2980;
                }
                _2766 = frontier_phi_71_pred;
                _2764 = frontier_phi_71_pred_1;
                _2762 = frontier_phi_71_pred_2;
                _2760 = frontier_phi_71_pred_3;
                _2758 = frontier_phi_71_pred_4;
                _2756 = frontier_phi_71_pred_5;
                uint _2915 = _2914 + 1u;
                if (_2915 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2908 = _2756;
                    _2909 = _2758;
                    _2910 = _2760;
                    _2911 = _2762;
                    _2912 = _2764;
                    _2913 = _2766;
                    _2914 = _2915;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
        }
        uvec4 _2769 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2770 = _2769.z;
        uint _2772 = (_2770 >> 8u) & 15u;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        if (((4294967295u << _2772) & _2675) == 0u)
        {
            _2876 = _2755;
            _2878 = _2757;
            _2880 = _2759;
            _2882 = _2761;
            _2884 = _2763;
            _2886 = _2765;
        }
        else
        {
            float _2901 = inversesqrt(dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754)));
            float _2902 = _2901 * _1752;
            float _2903 = _2901 * _1753;
            float _2904 = _2901 * _1754;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2772 < ((_2770 >> 12u) & 15u))
            {
                float _2877;
                float _2879;
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _3036 = _2755;
                float _3037 = _2757;
                float _3038 = _2759;
                float _3039 = _2761;
                float _3040 = _2763;
                float _3041 = _2765;
                uint _3042 = _2772;
                uint _3051;
                bool _3052;
                for (;;)
                {
                    _3051 = texelFetch(g_lightClassification, int((((_2669 << 5u) + (_2655 << 9u)) + (_3042 << 2u)) >> 2u)).x;
                    _3052 = _3051 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3052)
                    {
                        frontier_phi_82_pred = _3041;
                        frontier_phi_82_pred_1 = _3040;
                        frontier_phi_82_pred_2 = _3039;
                        frontier_phi_82_pred_3 = _3038;
                        frontier_phi_82_pred_4 = _3037;
                        frontier_phi_82_pred_5 = _3036;
                    }
                    else
                    {
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3257 = _3036;
                        float _3258 = _3037;
                        float _3259 = _3038;
                        float _3260 = _3039;
                        float _3261 = _3040;
                        float _3262 = _3041;
                        uint _3263 = _3051;
                        uint _3264;
                        vec4 _3289;
                        float _3290;
                        vec4 _3305;
                        vec3 _3317;
                        vec4 _3333;
                        vec4 _3348;
                        float _3394;
                        bool _3395;
                        for (;;)
                        {
                            uint _3274 = ((_3042 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3263));
                            _3264 = (_3263 + 4294967295u) & _3263;
                            uint _3276 = _3274 * 40u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            _3290 = _3289.w;
                            uint _3292 = (_3274 * 40u) + 4u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3307 = (_3274 * 40u) + 8u;
                            _3317 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x));
                            uint _3320 = (_3274 * 40u) + 16u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3335 = (_3274 * 40u) + 20u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3350 = (_3274 * 40u) + 24u;
                            vec4 _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3369 = (_3274 * 40u) + 28u;
                            vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            _3394 = fma(_1754, _3382.z, fma(_1753, _3382.y, _3382.x * _1752)) + _3382.w;
                            _3395 = !((fma(_1754, _3363.z, fma(_1753, _3363.y, _3363.x * _1752)) + _3363.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3395)
                            {
                                float _3422 = _3289.x - _1752;
                                float _3423 = _3289.y - _1753;
                                float _3424 = _3289.z - _1754;
                                float _3425 = dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424));
                                float _3428 = inversesqrt(_3425);
                                float _3429 = _3428 * _3422;
                                float _3430 = _3428 * _3423;
                                float _3431 = _3428 * _3424;
                                float _3435 = 1.0 - (_3425 / (_3290 * _3290));
                                float _4591 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3440 = sqrt(_3425) * _3305.w;
                                float _3442 = 1.39999997615814208984375 / (_3440 + 1.39999997615814208984375);
                                float _3443 = _3442 * _3442;
                                float _3446 = ((1.0 - _3443) * dot(vec3(_3429, _3430, _3431), vec3(_604, _607, _610))) + _3443;
                                float _3449 = _3440 * _3440;
                                float _3453 = (fma(_1754, _3333.z, fma(_1753, _3333.y, _3333.x * _1752)) + _3333.w) / _3394;
                                float _3454 = (fma(_1754, _3348.z, fma(_1753, _3348.y, _3348.x * _1752)) + _3348.w) / _3394;
                                float _3458 = 1.0 - dot(vec2(_3453, _3454), vec2(_3453, _3454));
                                float _4607 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3459 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3460 = _3459 * (((isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0))) * _3436) / ((_3449 * 0.699999988079071044921875) + 1.0));
                                float _3472 = exp2(log2(1.0 / ((_3449 * 3.5) + 5.0)) * 0.25);
                                float _3473 = 1.0 - _664;
                                float _3480 = sqrt(1.0 - ((1.0 - (_3473 * _3473)) * (1.0 - (_3472 * _3472))));
                                float _3481 = _3480 * _3480;
                                float _3482 = _3481 * _3481;
                                float _3483 = _3429 - _2902;
                                float _3484 = _3430 - _2903;
                                float _3485 = _3431 - _2904;
                                float _3489 = inversesqrt(dot(vec3(_3483, _3484, _3485), vec3(_3483, _3484, _3485)));
                                float _3493 = dot(vec3(_604, _607, _610), vec3((-0.0) - _2902, (-0.0) - _2903, (-0.0) - _2904));
                                float _4618 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3496 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3497 = dot(vec3(_604, _607, _610), vec3(_3489 * _3483, _3489 * _3484, _3489 * _3485));
                                float _4629 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3500 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3504 = ((_3500 * _3500) * (_3482 + (-1.0))) + 1.0;
                                float _3505 = _3442 * _3481;
                                float _3506 = _3505 * _3505;
                                float _3512 = ((1.0 - _3506) * dot(vec3(_604, _607, _610), vec3(_3429, _3430, _3431))) + _3506;
                                float _4640 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3513 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3514 = 1.0 - _3481;
                                float _3524 = (0.5 / (((_3513 * ((_3496 * _3514) + _3481)) + 9.9999999392252902907785028219223e-09) + (((_3513 * _3514) + _3481) * _3496))) * _3513;
                                float _4651 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3534 = (_3459 * _3436) * (((_3482 * 3.1415927410125732421875) * (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) / ((_3504 * _3504) * ((_3449 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3460 * _3305.z;
                                frontier_phi_88_pred_1 = _3460 * _3305.y;
                                frontier_phi_88_pred_2 = _3460 * _3305.x;
                                frontier_phi_88_pred_3 = _3534 * _3317.z;
                                frontier_phi_88_pred_4 = _3534 * _3317.y;
                                frontier_phi_88_pred_5 = _3534 * _3317.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3543 = frontier_phi_88_pred;
                            _3542 = frontier_phi_88_pred_1;
                            _3541 = frontier_phi_88_pred_2;
                            _3540 = frontier_phi_88_pred_3;
                            _3539 = frontier_phi_88_pred_4;
                            _3538 = frontier_phi_88_pred_5;
                            _3247 = _3541 + _3260;
                            _3248 = _3542 + _3261;
                            _3249 = _3543 + _3262;
                            _3244 = _3538 + _3257;
                            _3245 = _3539 + _3258;
                            _3246 = _3540 + _3259;
                            if (_3264 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3264;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3249;
                        frontier_phi_82_pred_1 = _3248;
                        frontier_phi_82_pred_2 = _3247;
                        frontier_phi_82_pred_3 = _3246;
                        frontier_phi_82_pred_4 = _3245;
                        frontier_phi_82_pred_5 = _3244;
                    }
                    _2887 = frontier_phi_82_pred;
                    _2885 = frontier_phi_82_pred_1;
                    _2883 = frontier_phi_82_pred_2;
                    _2881 = frontier_phi_82_pred_3;
                    _2879 = frontier_phi_82_pred_4;
                    _2877 = frontier_phi_82_pred_5;
                    uint _3043 = _3042 + 1u;
                    if (_3043 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3036 = _2877;
                        _3037 = _2879;
                        _3038 = _2881;
                        _3039 = _2883;
                        _3040 = _2885;
                        _3041 = _2887;
                        _3042 = _3043;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2883;
                frontier_phi_63_64_ladder_1 = _2887;
                frontier_phi_63_64_ladder_2 = _2885;
                frontier_phi_63_64_ladder_3 = _2881;
                frontier_phi_63_64_ladder_4 = _2879;
                frontier_phi_63_64_ladder_5 = _2877;
            }
            else
            {
                frontier_phi_63_64_ladder = _2761;
                frontier_phi_63_64_ladder_1 = _2765;
                frontier_phi_63_64_ladder_2 = _2763;
                frontier_phi_63_64_ladder_3 = _2759;
                frontier_phi_63_64_ladder_4 = _2757;
                frontier_phi_63_64_ladder_5 = _2755;
            }
            _2876 = frontier_phi_63_64_ladder_5;
            _2878 = frontier_phi_63_64_ladder_4;
            _2880 = frontier_phi_63_64_ladder_3;
            _2882 = frontier_phi_63_64_ladder;
            _2884 = frontier_phi_63_64_ladder_2;
            _2886 = frontier_phi_63_64_ladder_1;
        }
        float _2891 = isnan(1.0) ? _648 : (isnan(_648) ? 1.0 : min(_648, 1.0));
        _2688 = (_2891 * _2882) + _2219;
        _2690 = (_2891 * _2884) + _2221;
        _2692 = (_2891 * _2886) + _2223;
        _2694 = ((_2876 * 0.039999999105930328369140625) * _2891) + _2542;
        _2696 = ((_2878 * 0.039999999105930328369140625) * _2891) + _2544;
        _2698 = ((_2880 * 0.039999999105930328369140625) * _2891) + _2546;
    }
    else
    {
        _2688 = _2219;
        _2690 = _2221;
        _2692 = _2223;
        _2694 = _2542;
        _2696 = _2544;
        _2698 = _2546;
    }
    float _4667 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4678 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4689 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _2715 = ((isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2688 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _648))) + ((_2694 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1485)) * cbPerFrame._m0[3u].x);
    float _2716 = ((isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2690 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _648))) + ((_2696 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _1485)) * cbPerFrame._m0[3u].x);
    float _2717 = ((isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2692 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _648))) + ((_2698 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1485)) * cbPerFrame._m0[3u].x);
    uint _2718 = _230 + 6u;
    float _2726 = _583 / cbSceneParam._m0[86u].x;
    float _2727 = _584 / cbSceneParam._m0[86u].y;
    vec4 _2741 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, (log2((isnan(cbSceneParam._m0[77u].w) ? _504 : (isnan(_504) ? cbSceneParam._m0[77u].w : min(_504, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2743 = _2741.x;
    float _2744 = _2741.y;
    float _2745 = _2741.z;
    float _2746 = _2741.w;
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    if (_504 > cbSceneParam._m0[78u].w)
    {
        float _2780 = isnan(_504) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _504 : min(cbSceneParam._m0[80u].w, _504));
        float _2781 = _2780 / _504;
        float _2792 = _2781 * _555;
        float _2793 = _556 * _2781;
        float _2794 = (-0.0) - _2793;
        float _2796 = _2781 * _557;
        float _2798 = (cbSceneParam._m0[77u].w * _2794) / _2780;
        float _2799 = _2798 + cbSceneParam._m0[79u].w;
        float _2800 = cbSceneParam._m0[79u].w - _2793;
        float _2806 = sqrt(((_2792 * _2792) + (_2793 * _2793)) + (_2796 * _2796));
        float _2809 = (1.0 - (cbSceneParam._m0[77u].w / _2780)) * _2806;
        float _2814 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2816 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2993;
        if (abs((_2794 - _2798) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2993 = ((((_2799 > 0.0) ? exp2(_2814 * _2799) : (2.0 - exp2(_2816 * _2799))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2809;
        }
        else
        {
            float _2937 = 1.0 / cbSceneParam._m0[80u].x;
            float _2938 = isnan(_2800) ? _2799 : (isnan(_2799) ? _2800 : max(_2799, _2800));
            float _2939 = isnan(_2800) ? _2799 : (isnan(_2799) ? _2800 : min(_2799, _2800));
            float _2948 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : min(_2938, 0.0));
            float _2949 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : min(_2939, 0.0));
            _2993 = ((abs(_2806 / _2794) * cbSceneParam._m0[80u].y) * ((((_2948 - _2949) * 2.0) - ((exp2(_2814 * (isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0)))) - exp2(_2814 * (isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0))))) * _2937)) - ((exp2(_2816 * _2948) - exp2(_2816 * _2949)) * _2937))) + (_2809 * cbSceneParam._m0[80u].z);
        }
        vec4 _2995 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, 1.0), 0.0);
        float _3004 = exp2((_2993 * (-1.44269502162933349609375)) * (1.0 - _2995.w));
        float _3005 = log2(_3004);
        float _3021 = log2(_2746);
        _2818 = (exp2(_3021 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3005 * cbSceneParam._m0[78u].x)) * _2995.x) / cbSceneParam._m0[78u].x)) + _2743;
        _2820 = (exp2(_3021 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3005 * cbSceneParam._m0[78u].y)) * _2995.y) / cbSceneParam._m0[78u].y)) + _2744;
        _2822 = (exp2(_3021 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3005 * cbSceneParam._m0[78u].z)) * _2995.z) / cbSceneParam._m0[78u].z)) + _2745;
        _2824 = _3004 * _2746;
    }
    else
    {
        _2818 = _2743;
        _2820 = _2744;
        _2822 = _2745;
        _2824 = _2746;
    }
    bool _3031;
    vec4 _2834;
    vec4 _2856;
    float _2858;
    float _2862;
    float _2863;
    float _2864;
    float _2865;
    bool _2875;
    for (;;)
    {
        _2834 = cbMatDynParam._m0[0u];
        float _2836 = roundEven(_2834.y);
        bool _2837 = _2836 == 3.0;
        float _2838 = log2(_2824);
        float _2845 = exp2(_2838 * cbSceneParam._m0[78u].x) * _2715;
        float _2846 = exp2(_2838 * cbSceneParam._m0[78u].y) * _2716;
        float _2847 = exp2(_2838 * cbSceneParam._m0[78u].z) * _2717;
        float _2854 = _571 + (-0.5);
        _2856 = cbMtdParam._m0[1u];
        _2858 = _2856.y * _2854;
        float _2861 = (_2836 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2862 = _2861 * (_2837 ? _2845 : (_2845 + (cbSceneParam._m0[72u].w * _2818)));
        _2863 = _2861 * (_2837 ? _2846 : (_2846 + (cbSceneParam._m0[72u].w * _2820)));
        _2864 = _2861 * (_2837 ? _2847 : (_2847 + (cbSceneParam._m0[72u].w * _2822)));
        _2865 = _2854 * 0.999000012874603271484375;
        _2875 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2875)
        {
            if ((cbInstanceData._m0[_230 + 7u].x + _2865) < 0.5)
            {
                _3031 = true;
                break;
            }
        }
        uint _2972 = _623 + uint(_2834.w);
        if ((cbInstanceData._m0[_2972].w < 1.0) && ((cbInstanceData._m0[_2972].w + _2865) < 0.5))
        {
            _3031 = true;
            break;
        }
        if ((_2858 + 1.0) < _2856.x)
        {
            _3031 = true;
            break;
        }
        _3031 = false;
        break;
    }
    float _3235;
    if (_3031)
    {
        discard_state = true;
        _3235 = 0.0;
    }
    else
    {
        _3235 = cbInstanceData._m0[_2718].w;
    }
    SV_Target.x = _2862;
    SV_Target.y = _2863;
    SV_Target.z = _2864;
    SV_Target.w = _3235;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2718].w;
    discard_exit();
}


