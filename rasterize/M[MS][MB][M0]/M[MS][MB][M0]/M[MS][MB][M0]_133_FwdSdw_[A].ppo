#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1280;
float _3922;
float _3923;
float _3924;
float _3925;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _370 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _370) * cbMtdParam._m0[24u].x) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3934 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _395 = (_388 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _396 = (_388 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _397 = (_388 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _453 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _455 = _453.x;
    float _456 = _453.y;
    float _457 = _453.z;
    float _466 = ((_436.z - _457) * _388) + _457;
    float _469 = ((((_436.x - _455) * _388) + _455) * 2.0) + (-1.0);
    float _471 = ((((_436.y - _456) * _388) + _456) * 2.0) + (-1.0);
    float _472 = dot(vec2(_469, _471), vec2(_469, _471));
    float _3945 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _477 = sqrt(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))));
    vec4 _493 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _518 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _520 = _518.x;
    float _521 = 1.0 - _520;
    float _527 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _530 = ((isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : min(_527, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _539 = (_530 - ((((((_520 - _521) * cbMtdParam._m0[24u].z) + _521) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _530))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3966 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _540 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _547 = (_540 * ((_416.x * cbMtdParam._m0[18u].x) - _395)) + _395;
    float _548 = (_540 * ((_416.y * cbMtdParam._m0[18u].y) - _396)) + _396;
    float _549 = (_540 * ((_416.z * cbMtdParam._m0[18u].z) - _397)) + _397;
    vec4 _561 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _563 = _561.x;
    float _564 = 1.0 - _563;
    float _591 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_563 - _564) * cbMtdParam._m0[24u].w) + _564) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3977 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _600 = ((((cbMtdParam._m0[10u].x - _547) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _592) + _547;
    float _601 = ((((cbMtdParam._m0[10u].y - _548) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _592) + _548;
    float _602 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _549)) * _592) + _549;
    float _606 = (cbMtdParam._m0[19u].w * (_493.z - _466)) + _466;
    vec4 _620 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _627 = (_620.x * 2.0) + (-1.0);
    float _628 = (_620.y * 2.0) + (-1.0);
    float _629 = dot(vec2(_627, _628), vec2(_627, _628));
    float _3988 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _637 = (_540 * (_620.z - _606)) + _606;
    float _640 = ((cbMtdParam._m0[23u].y - _637) * _592) + _637;
    vec4 _659 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _665 = (_659.x * 2.0) + (-1.0);
    float _666 = (_659.y * 2.0) + (-1.0);
    float _667 = dot(vec2(_665, _666), vec2(_665, _666));
    float _3999 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _675 = (((_493.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _469;
    float _676 = (((_493.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _471;
    float _688 = (((_627 - _675) + (cbMtdParam._m0[21u].x * _675)) * _540) + _675;
    float _689 = (((_628 - _676) + (cbMtdParam._m0[21u].x * _676)) * _540) + _676;
    float _690 = (_540 * (sqrt(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) - _477)) + _477;
    float _701 = (((_665 - _688) + (_688 * cbMtdParam._m0[22u].z)) * _592) + _688;
    float _702 = (((_666 - _689) + (_689 * cbMtdParam._m0[22u].z)) * _592) + _689;
    float _703 = ((sqrt(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) - _690) * _592) + _690;
    float _705 = cbMtdParam._m0[22u].x + _493.w;
    float _708 = fma(_703, _240 * NORMAL.x, fma(_702, _247 * TANGENT.x, (_233 * _225) * _701));
    float _711 = fma(_703, _240 * NORMAL.y, fma(_702, _247 * TANGENT.y, (_233 * _226) * _701));
    float _714 = fma(_703, _240 * NORMAL.z, fma(_702, _247 * TANGENT.z, (_233 * _227) * _701));
    float _718 = inversesqrt(dot(vec3(_708, _711, _714), vec3(_708, _711, _714)));
    float _719 = _718 * _708;
    float _720 = _718 * _711;
    float _721 = _718 * _714;
    float _4010 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _722 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4032 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4043 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4054 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _740 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _791 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _781);
    float _792 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _781);
    float _793 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _781);
    float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
    float _798 = _791 * _797;
    float _799 = _792 * _797;
    float _800 = _793 * _797;
    vec4 _805 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _807 = _805.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _961 = sqrt(((_791 * _791) + (_792 * _792)) + (_793 * _793));
        float _967 = (cbMatDynParam._m0[5u].x * _961) + cbMatDynParam._m0[5u].y;
        float _4065 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _972 = (cbMatDynParam._m0[5u].z * _961) + cbMatDynParam._m0[5u].w;
        float _4076 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) - _968)) + _968) < ((_807 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _818 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _819 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _837 = fma(_721, cbSceneParam._m0[5u].z, fma(_720, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _719));
    float _840 = fma(_721, cbSceneParam._m0[6u].z, fma(_720, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _719));
    float _843 = fma(_721, cbSceneParam._m0[7u].z, fma(_720, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _719));
    uint _856 = _253 + 9u;
    uint _857 = _856 + uint(cbMatDynParam._m0[0u].w);
    float _863 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * cbInstanceData._m0[_857].x;
    float _864 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * cbInstanceData._m0[_857].y;
    float _865 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * cbInstanceData._m0[_857].z;
    float _4087 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _4098 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    vec4 _877 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _818, cbSceneParam._m0[86u].y * _819));
    float _881 = ((isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * TEXCOORD_5.w) * _877.x;
    float _882 = dot(vec3(_719, _720, _721), vec3(_798, _799, _800));
    float _885 = _882 * 2.0;
    float _889 = (_885 * _719) - _798;
    float _890 = (_885 * _720) - _799;
    float _891 = (_885 * _721) - _800;
    float _895 = abs(dot(vec3(_798, _799, _800), vec3(_719, _720, _721)));
    float _4120 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _897 = sqrt(_722);
    float _910 = exp2((_897 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_897 * 3.0));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1279;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1004 = fma(_950, cbModelParam._m0[26u].z, fma(_946, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _942));
        float _1008 = fma(_950, cbModelParam._m0[27u].z, fma(_946, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _942));
        float _1012 = fma(_950, cbModelParam._m0[28u].z, fma(_946, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _942));
        float _1037 = _942 + _719;
        float _1038 = _946 + _720;
        float _1039 = _950 + _721;
        float _1049 = fma(_1039, cbModelParam._m0[26u].z, fma(_1038, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037)) - _1004;
        float _1050 = fma(_1039, cbModelParam._m0[27u].z, fma(_1038, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037)) - _1008;
        float _1051 = fma(_1039, cbModelParam._m0[28u].z, fma(_1038, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037)) - _1012;
        float _1055 = inversesqrt(dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051)));
        float _1068 = ((_1055 * _1049) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1004 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1055 * _1050) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1008 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1055 * _1051) / cbModelParam._m0[34u].z) + ((((((_1012 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        float _1107 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1073.x + (-0.5));
        float _1109 = _1107 * (_1073.y + (-0.5));
        float _1110 = _1107 * (_1073.z + (-0.5));
        float _1117 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1080.x + (-0.5));
        float _1119 = _1117 * (_1080.y + (-0.5));
        float _1120 = _1117 * (_1080.z + (-0.5));
        float _1127 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1087.x + (-0.5));
        float _1129 = _1127 * (_1087.y + (-0.5));
        float _1130 = _1127 * (_1087.z + (-0.5));
        float _1137 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1094.x + (-0.5));
        float _1139 = _1137 * (_1094.y + (-0.5));
        float _1140 = _1137 * (_1094.z + (-0.5));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = _1108 * 0.5;
        float _1145 = _1118 * 0.5;
        float _1146 = _1128 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1161 = (dot(vec3(_719, _720, _721), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1171 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _4168 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1173 + 1.0))) + _1178) * _1141;
        float _1188 = _1109 * 0.5;
        float _1189 = _1119 * 0.5;
        float _1190 = _1129 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_719, _720, _721), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _4179 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _4190 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _4201 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1215 + 1.0))) + _1220) * _1142;
        float _1230 = _1110 * 0.5;
        float _1231 = _1120 * 0.5;
        float _1232 = _1130 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_719, _720, _721), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _4234 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1257 + 1.0))) + _1262) * _1143;
        _1279 = _1110;
        _1281 = _1109;
        _1282 = _1108;
        _1283 = _1120;
        _1284 = _1119;
        _1285 = _1118;
        _1286 = _1130;
        _1287 = _1129;
        _1288 = _1128;
        _1289 = _1143;
        _1290 = _1142;
        _1291 = _1141;
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
    }
    else
    {
        _1279 = _1280;
        _1281 = _1280;
        _1282 = _1280;
        _1283 = _1280;
        _1284 = _1280;
        _1285 = _1280;
        _1286 = _1280;
        _1287 = _1280;
        _1288 = _1280;
        _1289 = _1280;
        _1290 = _1280;
        _1291 = _1280;
        _1292 = 0.0;
        _1293 = 0.0;
        _1294 = 0.0;
    }
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1322 = fma(_950, cbModelParam._m0[30u].z, fma(_946, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _942));
        float _1326 = fma(_950, cbModelParam._m0[31u].z, fma(_946, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _942));
        float _1330 = fma(_950, cbModelParam._m0[32u].z, fma(_946, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _942));
        float _1353 = _942 + _719;
        float _1354 = _946 + _720;
        float _1355 = _950 + _721;
        float _1365 = fma(_1355, cbModelParam._m0[30u].z, fma(_1354, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1353)) - _1322;
        float _1366 = fma(_1355, cbModelParam._m0[31u].z, fma(_1354, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1353)) - _1326;
        float _1367 = fma(_1355, cbModelParam._m0[32u].z, fma(_1354, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1353)) - _1330;
        float _1371 = inversesqrt(dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367)));
        float _1384 = ((_1371 * _1365) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1322 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1371 * _1366) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1326 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1371 * _1367) / cbModelParam._m0[35u].z) + ((((((_1330 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        float _1421 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1388.x + (-0.5));
        float _1423 = _1421 * (_1388.y + (-0.5));
        float _1424 = _1421 * (_1388.z + (-0.5));
        float _1431 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1395.x + (-0.5));
        float _1433 = _1431 * (_1395.y + (-0.5));
        float _1434 = _1431 * (_1395.z + (-0.5));
        float _1441 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1402.x + (-0.5));
        float _1443 = _1441 * (_1402.y + (-0.5));
        float _1444 = _1441 * (_1402.z + (-0.5));
        float _1451 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1409.x + (-0.5));
        float _1453 = _1451 * (_1409.y + (-0.5));
        float _1454 = _1451 * (_1409.z + (-0.5));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = _1422 * 0.5;
        float _1459 = _1432 * 0.5;
        float _1460 = _1442 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_719, _720, _721), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4297 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1485 + 1.0))) + _1490) * _1455;
        float _1500 = _1423 * 0.5;
        float _1501 = _1433 * 0.5;
        float _1502 = _1443 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_719, _720, _721), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4330 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1527 + 1.0))) + _1532) * _1456;
        float _1542 = _1424 * 0.5;
        float _1543 = _1434 * 0.5;
        float _1544 = _1444 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_719, _720, _721), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4363 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1569 + 1.0))) + _1574) * _1457;
        _1591 = _1424;
        _1592 = _1423;
        _1593 = _1422;
        _1594 = _1434;
        _1595 = _1433;
        _1596 = _1432;
        _1597 = _1444;
        _1598 = _1443;
        _1599 = _1442;
        _1600 = _1457;
        _1601 = _1456;
        _1602 = _1455;
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
    }
    else
    {
        _1591 = _1280;
        _1592 = _1280;
        _1593 = _1280;
        _1594 = _1280;
        _1595 = _1280;
        _1596 = _1280;
        _1597 = _1280;
        _1598 = _1280;
        _1599 = _1280;
        _1600 = _1280;
        _1601 = _1280;
        _1602 = _1280;
        _1603 = 0.0;
        _1604 = 0.0;
        _1605 = 0.0;
    }
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1292)) + _1292;
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1293)) + _1293;
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1294)) + _1294;
    float _1638 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1616, cbSceneParam._m0[89u].y, _1615 * cbSceneParam._m0[89u].x));
    float _1641 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1616, cbSceneParam._m0[90u].y, _1615 * cbSceneParam._m0[90u].x));
    float _1644 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1616, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1615));
    float _1659 = _889 * 0.5;
    float _1660 = _890 * 0.5;
    float _1661 = _891 * 0.5;
    float _1662 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1665 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1668 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1702;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1675 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1279, _1283, _1286, _1289));
        float _1679 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1281, _1284, _1287, _1290));
        float _1683 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1282, _1285, _1288, _1291));
        float _1690 = dot(vec4(cbModelParam._m0[39u]), vec4(_1659, _1660, _1661, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1690) ? 0.0 : (isnan(0.0) ? _1690 : max(0.0, _1690))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1713;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1704 = dot(vec4(cbModelParam._m0[40u]), vec4(_1659, _1660, _1661, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1717 = (_1713 * cbModelParam._m0[1u].x) + (_1702 * (1.0 - cbModelParam._m0[1u].x));
    float _1727 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _722);
    float _1728 = isnan(_1727) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1727 : min(cbModelParam._m0[25u].z, _1727));
    float _1808;
    float _1810;
    float _1812;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1775 = fma(_950, cbModelParam._m0[13u].z, fma(_946, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _942)) + cbModelParam._m0[13u].w;
        float _1779 = fma(_950, cbModelParam._m0[14u].z, fma(_946, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _942)) + cbModelParam._m0[14u].w;
        float _1783 = fma(_950, cbModelParam._m0[15u].z, fma(_946, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _942)) + cbModelParam._m0[15u].w;
        float _1786 = fma(_891, cbModelParam._m0[13u].z, fma(_890, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _889));
        float _1789 = fma(_891, cbModelParam._m0[14u].z, fma(_890, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _889));
        float _1792 = fma(_891, cbModelParam._m0[15u].z, fma(_890, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _889));
        float _1820;
        if (_1786 > 0.0)
        {
            _1820 = abs((1.0 - _1775) / _1786);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1775 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1820 = frontier_phi_17_15_ladder;
        }
        float _1989;
        if (_1789 > 0.0)
        {
            _1989 = abs((1.0 - _1779) / _1789);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1779 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1989 = frontier_phi_26_22_ladder;
        }
        float _2284;
        if (_1792 > 0.0)
        {
            _2284 = abs((1.0 - _1783) / _1792);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1783 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2284 = frontier_phi_38_33_ladder;
        }
        float _2286 = isnan(_1989) ? _1820 : (isnan(_1820) ? _1989 : min(_1820, _1989));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1786) + _1775;
        float _2292 = (_2287 * _1789) + _1779;
        float _2293 = (_2287 * _1792) + _1783;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2296 = (-1.0) - _2294;
        float _2298 = _2294 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2293 > _2298) || ((_2293 < _2296) || ((_2292 > _2298) || ((_2292 < _2296) || ((_2291 < _2296) || (_2291 > _2298))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2438 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2293, cbModelParam._m0[9u].z, fma(_2292, cbModelParam._m0[9u].y, _2291 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2293, cbModelParam._m0[10u].z, fma(_2292, cbModelParam._m0[10u].y, _2291 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2293, cbModelParam._m0[11u].z, fma(_2292, cbModelParam._m0[11u].y, _2291 * cbModelParam._m0[11u].x))), _1728);
            frontier_phi_16_38_ladder = _2438.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2438.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2438.x * cbModelParam._m0[1u].y;
        }
        _1808 = frontier_phi_16_38_ladder_2;
        _1810 = frontier_phi_16_38_ladder_1;
        _1812 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1796 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_889, _890, _891), _1728);
        _1808 = _1796.x * cbModelParam._m0[1u].y;
        _1810 = _1796.y * cbModelParam._m0[1u].y;
        _1812 = _1796.z * cbModelParam._m0[1u].y;
    }
    float _1816 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _722);
    float _1817 = isnan(_1816) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1816 : min(cbModelParam._m0[25u].w, _1816));
    float _1906;
    float _1908;
    float _1910;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1870 = fma(_950, cbModelParam._m0[21u].z, fma(_946, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _942)) + cbModelParam._m0[21u].w;
        float _1874 = fma(_950, cbModelParam._m0[22u].z, fma(_946, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _942)) + cbModelParam._m0[22u].w;
        float _1878 = fma(_950, cbModelParam._m0[23u].z, fma(_946, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _942)) + cbModelParam._m0[23u].w;
        float _1881 = fma(_891, cbModelParam._m0[21u].z, fma(_890, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _889));
        float _1884 = fma(_891, cbModelParam._m0[22u].z, fma(_890, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _889));
        float _1887 = fma(_891, cbModelParam._m0[23u].z, fma(_890, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _889));
        float _1994;
        if (_1881 > 0.0)
        {
            _1994 = abs((1.0 - _1870) / _1881);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1870 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1994 = frontier_phi_28_24_ladder;
        }
        float _2311;
        if (_1884 > 0.0)
        {
            _2311 = abs((1.0 - _1874) / _1884);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1874 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2311 = frontier_phi_40_35_ladder;
        }
        float _2638;
        if (_1887 > 0.0)
        {
            _2638 = abs((1.0 - _1878) / _1887);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1878 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2638 = frontier_phi_50_47_ladder;
        }
        float _2640 = isnan(_2311) ? _1994 : (isnan(_1994) ? _2311 : min(_1994, _2311));
        float _2641 = isnan(_2638) ? _2640 : (isnan(_2640) ? _2638 : min(_2640, _2638));
        float _2645 = (_2641 * _1881) + _1870;
        float _2646 = (_2641 * _1884) + _1874;
        float _2647 = (_2641 * _1887) + _1878;
        float _2648 = _2641 * 9.9999997473787516355514526367188e-05;
        float _2649 = (-1.0) - _2648;
        float _2651 = _2648 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2647 > _2651) || ((_2647 < _2649) || ((_2646 > _2651) || ((_2646 < _2649) || ((_2645 < _2649) || (_2645 > _2651))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2647, cbModelParam._m0[17u].z, fma(_2646, cbModelParam._m0[17u].y, _2645 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2647, cbModelParam._m0[18u].z, fma(_2646, cbModelParam._m0[18u].y, _2645 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2647, cbModelParam._m0[19u].z, fma(_2646, cbModelParam._m0[19u].y, _2645 * cbModelParam._m0[19u].x))), _1817);
            frontier_phi_25_50_ladder = _2765.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2765.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2765.x * cbModelParam._m0[1u].z;
        }
        _1906 = frontier_phi_25_50_ladder_2;
        _1908 = frontier_phi_25_50_ladder_1;
        _1910 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1890 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_889, _890, _891), _1817);
        _1906 = _1890.x * cbModelParam._m0[1u].z;
        _1908 = _1890.y * cbModelParam._m0[1u].z;
        _1910 = _1890.z * cbModelParam._m0[1u].z;
    }
    float _1922 = ((((1.0 - _910) * ((_897 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_910 * _897)) * _881;
    float _1923 = _1922 * ((cbModelParam._m0[1u].w * (_1906 - _1808)) + _1808);
    float _1924 = _1922 * ((cbModelParam._m0[1u].w * (_1908 - _1810)) + _1810);
    float _1925 = _1922 * ((cbModelParam._m0[1u].w * (_1910 - _1812)) + _1812);
    float _1928 = fma(_1925, cbSceneParam._m0[89u].z, fma(_1924, cbSceneParam._m0[89u].y, _1923 * cbSceneParam._m0[89u].x));
    float _1931 = fma(_1925, cbSceneParam._m0[90u].z, fma(_1924, cbSceneParam._m0[90u].y, _1923 * cbSceneParam._m0[90u].x));
    float _1934 = fma(_1925, cbSceneParam._m0[91u].z, fma(_1924, cbSceneParam._m0[91u].y, _1923 * cbSceneParam._m0[91u].x));
    float _1968 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1972 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1976 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1980 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1981 = _1968 / _1980;
    float _1982 = _1972 / _1980;
    float _1983 = _1976 / _1980;
    float _2130;
    float _2131;
    float _2132;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2010 = ((uint(_1983 > cbSceneParam._m0[59u].y) + uint(_1983 > cbSceneParam._m0[59u].x)) + uint(_1983 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2011 = _2010 + 43u;
        uint _2019 = _2010 + 44u;
        uint _2027 = _2010 + 45u;
        uint _2035 = _2010 + 46u;
        float _2046 = fma(_1980, cbSceneParam._m0[_2011].w, fma(_1976, cbSceneParam._m0[_2011].z, fma(_1972, cbSceneParam._m0[_2011].y, _1968 * cbSceneParam._m0[_2011].x)));
        float _2050 = fma(_1980, cbSceneParam._m0[_2019].w, fma(_1976, cbSceneParam._m0[_2019].z, fma(_1972, cbSceneParam._m0[_2019].y, _1968 * cbSceneParam._m0[_2019].x)));
        float _2058 = fma(_1980, cbSceneParam._m0[_2035].w, fma(_1976, cbSceneParam._m0[_2035].z, fma(_1972, cbSceneParam._m0[_2035].y, _1968 * cbSceneParam._m0[_2035].x)));
        float _2063 = cbSceneParam._m0[33u].z * _2058;
        float _2065 = cbSceneParam._m0[33u].w * _2058;
        float _2068 = fma(_1980, cbSceneParam._m0[_2027].w, fma(_1976, cbSceneParam._m0[_2027].z, fma(_1972, cbSceneParam._m0[_2027].y, _1968 * cbSceneParam._m0[_2027].x))) / _2058;
        float _2116 = (cbSceneParam._m0[33u].x - sqrt(((_1982 * _1982) + (_1981 * _1981)) + (_1983 * _1983))) * cbSceneParam._m0[33u].y;
        float _4489 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2123 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2063 + _2046) / _2058, (_2065 + _2050) / _2058), _2068), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2065 + _2046) / _2058, (_2050 - _2063) / _2058), _2068), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2046 - _2063) / _2058, (_2050 - _2065) / _2058), _2068), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2046 - _2065) / _2058, (_2063 + _2050) / _2058), _2068), 0.0)).x), vec4(0.25)));
        _2130 = 1.0 - (_2123 * cbSceneParam._m0[34u].x);
        _2131 = 1.0 - (_2123 * cbSceneParam._m0[34u].y);
        _2132 = 1.0 - (_2123 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2130 = 1.0;
        _2131 = 1.0;
        _2132 = 1.0;
    }
    float _2196;
    float _2198;
    float _2200;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2184 = fma(_1980, cbSceneParam._m0[63u].w, fma(_1976, cbSceneParam._m0[63u].z, fma(_1972, cbSceneParam._m0[63u].y, _1968 * cbSceneParam._m0[63u].x)));
        float _2185 = fma(_1980, cbSceneParam._m0[60u].w, fma(_1976, cbSceneParam._m0[60u].z, fma(_1972, cbSceneParam._m0[60u].y, _1968 * cbSceneParam._m0[60u].x))) / _2184;
        float _2186 = fma(_1980, cbSceneParam._m0[61u].w, fma(_1976, cbSceneParam._m0[61u].z, fma(_1972, cbSceneParam._m0[61u].y, _1968 * cbSceneParam._m0[61u].x))) / _2184;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2185 >= cbSceneParam._m0[64u].x) && (_2186 >= cbSceneParam._m0[64u].y)) && (_2185 <= cbSceneParam._m0[64u].z)) && (_2186 <= cbSceneParam._m0[64u].w))
        {
            float _2324 = fma(_1980, cbSceneParam._m0[62u].w, fma(_1976, cbSceneParam._m0[62u].z, fma(_1972, cbSceneParam._m0[62u].y, _1968 * cbSceneParam._m0[62u].x))) / _2184;
            float _2328 = isnan(cbSceneParam._m0[41u].w) ? _2324 : (isnan(_2324) ? cbSceneParam._m0[41u].w : max(_2324, cbSceneParam._m0[41u].w));
            float _2371 = (cbSceneParam._m0[33u].x - sqrt(((_1982 * _1982) + (_1981 * _1981)) + (_1983 * _1983))) * cbSceneParam._m0[33u].y;
            float _4505 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
            float _2378 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2185, cbSceneParam._m0[33u].w + _2186), _2328), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2185, _2186 - cbSceneParam._m0[33u].z), _2328), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2185 - cbSceneParam._m0[33u].z, _2186 - cbSceneParam._m0[33u].w), _2328), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2185 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2186), _2328), 0.0)).x), vec4(0.25)));
            float _2382 = 1.0 - (_2378 * cbSceneParam._m0[34u].x);
            float _2383 = 1.0 - (_2378 * cbSceneParam._m0[34u].y);
            float _2384 = 1.0 - (_2378 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2384) ? _2132 : (isnan(_2132) ? _2384 : min(_2132, _2384));
            frontier_phi_37_36_ladder_1 = isnan(_2383) ? _2131 : (isnan(_2131) ? _2383 : min(_2131, _2383));
            frontier_phi_37_36_ladder_2 = isnan(_2382) ? _2130 : (isnan(_2130) ? _2382 : min(_2130, _2382));
        }
        else
        {
            frontier_phi_37_36_ladder = _2132;
            frontier_phi_37_36_ladder_1 = _2131;
            frontier_phi_37_36_ladder_2 = _2130;
        }
        _2196 = frontier_phi_37_36_ladder_2;
        _2198 = frontier_phi_37_36_ladder_1;
        _2200 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2196 = _2130;
        _2198 = _2131;
        _2200 = _2132;
    }
    uvec4 _2205 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2207 = _2205.x * 14u;
    uint _2208 = _2207 + 13u;
    float _2215 = _881 + (-1.0);
    float _2220 = (cbLight._m0[_2208].x * _2215) + 1.0;
    float _2221 = (cbLight._m0[_2208].y * _2215) + 1.0;
    float _2222 = (cbLight._m0[_2208].z * _2215) + 1.0;
    float _2223 = (cbLight._m0[_2208].w * _2215) + 1.0;
    uint _2224 = _2207 + 5u;
    float _2230 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
    uint _2234 = _2207 + 4u;
    float _2243 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
    uint _2247 = _2207 | 1u;
    float _2258 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_719, _720, _721));
    float _2261 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_719, _720, _721));
    float _4541 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _4552 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2266 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * 0.3183098733425140380859375;
    float _2268 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * 0.3183098733425140380859375;
    float _2275 = ((cbLight._m0[_2224].x * _2230) * _2268) + (((cbLight._m0[_2234].x * _2196) * _2243) * _2266);
    float _2276 = ((_2230 * cbLight._m0[_2224].y) * _2268) + (((cbLight._m0[_2234].y * _2198) * _2243) * _2266);
    float _2277 = ((_2230 * cbLight._m0[_2224].z) * _2268) + (((cbLight._m0[_2234].z * _2200) * _2243) * _2266);
    uvec4 _2281 = floatBitsToUint(cbLight._m0[_2207 + 12u]);
    bool _2283 = _2281.x == 0u;
    float _2385;
    float _2387;
    float _2389;
    if (_2283)
    {
        _2385 = _2275;
        _2387 = _2276;
        _2389 = _2277;
    }
    else
    {
        uint _2393 = _2207 + 6u;
        float _2409 = (dot(vec3(cbLight._m0[_2207 + 2u].xyz), vec3(_719, _720, _721)) * 0.5) + 0.5;
        float _2410 = _2409 * _2409;
        float _4563 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2411 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2412 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2385 = (((cbLight._m0[_2393].x * 0.3183098733425140380859375) * _2411) * _2412) + _2275;
        _2387 = (((cbLight._m0[_2393].y * 0.3183098733425140380859375) * _2411) * _2412) + _2276;
        _2389 = (((cbLight._m0[_2393].z * 0.3183098733425140380859375) * _2411) * _2412) + _2277;
    }
    bool _2392 = _2281.y == 0u;
    float _2447;
    float _2449;
    float _2451;
    if (_2392)
    {
        _2447 = _2385;
        _2449 = _2387;
        _2451 = _2389;
    }
    else
    {
        uint _2609 = _2207 + 7u;
        float _2625 = (dot(vec3(cbLight._m0[_2207 + 3u].xyz), vec3(_719, _720, _721)) * 0.5) + 0.5;
        float _2626 = _2625 * _2625;
        float _4579 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2627 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2628 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2447 = (((cbLight._m0[_2609].x * 0.3183098733425140380859375) * _2627) * _2628) + _2385;
        _2449 = (((cbLight._m0[_2609].y * 0.3183098733425140380859375) * _2627) * _2628) + _2387;
        _2451 = (((cbLight._m0[_2609].z * 0.3183098733425140380859375) * _2627) * _2628) + _2389;
    }
    uint _2454 = _2207 + 8u;
    float _2467 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _722) * 0.949999988079071044921875);
    float _2468 = _2467 * _2467;
    float _2469 = cbLight._m0[_2207].x + _798;
    float _2470 = cbLight._m0[_2207].y + _799;
    float _2471 = cbLight._m0[_2207].z + _800;
    float _2475 = inversesqrt(dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471)));
    float _2476 = _2475 * _2469;
    float _2477 = _2475 * _2470;
    float _2478 = _2475 * _2471;
    float _2479 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2207].xyz));
    float _4595 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2482 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _4606 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _2483 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2484 = dot(vec3(_719, _720, _721), vec3(_2476, _2477, _2478));
    float _4617 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
    float _2488 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2476, _2477, _2478));
    float _4628 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2492 = _2468 * _2468;
    float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
    float _2507 = (exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2508 = 1.0 - _2468;
    float _2519 = (0.5 / (((_2483 * ((_2482 * _2508) + _2468)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2508) + _2468) * _2482))) * _2482;
    float _4639 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2521 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
    uint _2535 = _2207 + 9u;
    float _2546 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _722) * 0.949999988079071044921875);
    float _2547 = _2546 * _2546;
    float _2548 = cbLight._m0[_2247].x + _798;
    float _2549 = cbLight._m0[_2247].y + _799;
    float _2550 = cbLight._m0[_2247].z + _800;
    float _2554 = inversesqrt(dot(vec3(_2548, _2549, _2550), vec3(_2548, _2549, _2550)));
    float _2555 = _2554 * _2548;
    float _2556 = _2554 * _2549;
    float _2557 = _2554 * _2550;
    float _2558 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2247].xyz));
    float _4650 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2561 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _2562 = dot(vec3(_719, _720, _721), vec3(_2555, _2556, _2557));
    float _4661 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2565 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _2566 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2555, _2556, _2557));
    float _4672 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2570 = _2547 * _2547;
    float _2574 = ((_2565 * _2565) * (_2570 + (-1.0))) + 1.0;
    float _2583 = (exp2(log2(1.0 - (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2584 = 1.0 - _2547;
    float _2594 = (0.5 / (((_2483 * ((_2561 * _2584) + _2547)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2584) + _2547) * _2561))) * _2561;
    float _4683 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2596 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2570 / ((_2574 * _2574) * 3.141590118408203125));
    float _2606 = (((_2583 * cbLight._m0[_2535].x) * _2596) * _2230) + ((((cbLight._m0[_2454].x * _2196) * _2507) * _2521) * _2243);
    float _2607 = (((_2583 * cbLight._m0[_2535].y) * _2596) * _2230) + ((((cbLight._m0[_2454].y * _2198) * _2507) * _2521) * _2243);
    float _2608 = (((_2583 * cbLight._m0[_2535].z) * _2596) * _2230) + ((((cbLight._m0[_2454].z * _2200) * _2507) * _2521) * _2243);
    float _2664;
    float _2666;
    float _2668;
    if (_2283)
    {
        _2664 = _2606;
        _2666 = _2607;
        _2668 = _2608;
    }
    else
    {
        uint _2670 = _2207 + 2u;
        uint _2674 = _2207 + 10u;
        float _2688 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2670].w)) * _722) * 0.949999988079071044921875);
        float _2689 = _2688 * _2688;
        float _2690 = cbLight._m0[_2670].x + _798;
        float _2691 = cbLight._m0[_2670].y + _799;
        float _2692 = cbLight._m0[_2670].z + _800;
        float _2696 = inversesqrt(dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692)));
        float _2697 = _2696 * _2690;
        float _2698 = _2696 * _2691;
        float _2699 = _2696 * _2692;
        float _2700 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2670].xyz));
        float _4694 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2703 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2704 = dot(vec3(_719, _720, _721), vec3(_2697, _2698, _2699));
        float _4705 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2707 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2708 = dot(vec3(cbLight._m0[_2670].xyz), vec3(_2697, _2698, _2699));
        float _4716 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2712 = _2689 * _2689;
        float _2716 = ((_2707 * _2707) * (_2712 + (-1.0))) + 1.0;
        float _2725 = (exp2(log2(1.0 - (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2726 = 1.0 - _2689;
        float _2736 = (0.5 / (((_2483 * ((_2703 * _2726) + _2689)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2726) + _2689) * _2703))) * _2703;
        float _4727 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2738 = (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2712 / ((_2716 * _2716) * 3.141590118408203125));
        float _2739 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2664 = (((_2725 * cbLight._m0[_2674].x) * _2738) * _2739) + _2606;
        _2666 = (((_2725 * cbLight._m0[_2674].y) * _2738) * _2739) + _2607;
        _2668 = (((_2725 * cbLight._m0[_2674].z) * _2738) * _2739) + _2608;
    }
    float _2770;
    float _2772;
    float _2774;
    if (_2392)
    {
        _2770 = _2664;
        _2772 = _2666;
        _2774 = _2668;
    }
    else
    {
        uint _2781 = _2207 + 3u;
        uint _2785 = _2207 + 11u;
        float _2799 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2781].w)) * _722) * 0.949999988079071044921875);
        float _2800 = _2799 * _2799;
        float _2801 = cbLight._m0[_2781].x + _798;
        float _2802 = cbLight._m0[_2781].y + _799;
        float _2803 = cbLight._m0[_2781].z + _800;
        float _2807 = inversesqrt(dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803)));
        float _2808 = _2807 * _2801;
        float _2809 = _2807 * _2802;
        float _2810 = _2807 * _2803;
        float _2811 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2781].xyz));
        float _4743 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2814 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2815 = dot(vec3(_719, _720, _721), vec3(_2808, _2809, _2810));
        float _4754 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2818 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _2819 = dot(vec3(cbLight._m0[_2781].xyz), vec3(_2808, _2809, _2810));
        float _4765 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2823 = _2800 * _2800;
        float _2827 = ((_2818 * _2818) * (_2823 + (-1.0))) + 1.0;
        float _2836 = (exp2(log2(1.0 - (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2837 = 1.0 - _2800;
        float _2847 = (0.5 / (((_2483 * ((_2814 * _2837) + _2800)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2837) + _2800) * _2814))) * _2814;
        float _4776 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2849 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2823 / ((_2827 * _2827) * 3.141590118408203125));
        float _2850 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2770 = (((_2836 * cbLight._m0[_2785].x) * _2849) * _2850) + _2664;
        _2772 = (((_2836 * cbLight._m0[_2785].y) * _2849) * _2850) + _2666;
        _2774 = (((_2836 * cbLight._m0[_2785].z) * _2849) * _2850) + _2668;
    }
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    if (_2205.y == 0u)
    {
        uvec4 _2871 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2872 = _2871.x;
        uint _2883 = uint((float(_2871.y) * floor(float(uint(cbSceneParam._m0[85u].y * _819) / _2872))) + floor(float(uint(cbSceneParam._m0[85u].x * _818) / _2872)));
        float _2893 = (log2(_1983 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2894 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        uint _2897 = uint(isnan(14.0) ? _2894 : (isnan(_2894) ? 14.0 : min(_2894, 14.0)));
        uvec4 _2902 = texelFetch(g_lightClusterGridBuffer, int(((_2897 << 2u) + (_2883 << 6u)) >> 2u));
        uint _2903 = _2902.x;
        uint _2904 = _2871.z;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        if (((((1u << ((_2904 >> 4u) & 15u)) + 4294967295u) & _2903) == 0u) || ((_2904 & 240u) == 0u))
        {
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
            _2991 = 0.0;
            _2993 = 0.0;
        }
        else
        {
            float _2984;
            float _2986;
            float _2988;
            float _2990;
            float _2992;
            float _2994;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            uint _3142 = 0u;
            uint _3151;
            bool _3152;
            for (;;)
            {
                _3151 = texelFetch(g_lightClassification, int((((_2897 << 5u) + (_2883 << 9u)) + (_3142 << 2u)) >> 2u)).x;
                _3152 = _3151 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3152)
                {
                    frontier_phi_71_pred = _3141;
                    frontier_phi_71_pred_1 = _3140;
                    frontier_phi_71_pred_2 = _3139;
                    frontier_phi_71_pred_3 = _3138;
                    frontier_phi_71_pred_4 = _3137;
                    frontier_phi_71_pred_5 = _3136;
                }
                else
                {
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    uint _3287;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3140;
                    _3286 = _3141;
                    _3287 = _3151;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    for (;;)
                    {
                        uint _3291 = uint(findLSB(_3287)) + (_3142 << 5u);
                        uint _3288 = (_3287 + 4294967295u) & _3287;
                        uint _3293 = _3291 * 48u;
                        vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3293)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 3u)).x));
                        uint _3313 = (_3291 * 48u) + 4u;
                        vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 3u)).x));
                        uint _3332 = (_3291 * 48u) + 8u;
                        vec3 _3343 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x));
                        float _3347 = _3307.x - _1981;
                        float _3348 = _3307.y - _1982;
                        float _3349 = _3307.z - _1983;
                        float _3350 = dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349));
                        float _3353 = inversesqrt(_3350);
                        float _3354 = _3353 * _3347;
                        float _3355 = _3353 * _3348;
                        float _3356 = _3353 * _3349;
                        float _3357 = dot(vec3(_837, _840, _843), vec3(_3354, _3355, _3356));
                        float _3362 = 1.0 - (_3350 * _3307.w);
                        float _4802 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3363 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3364 = sqrt(_3350) * _3326.w;
                        float _3367 = 1.39999997615814208984375 / (_3364 + 1.39999997615814208984375);
                        float _3368 = _3367 * _3367;
                        float _3371 = ((1.0 - _3368) * _3357) + _3368;
                        float _3374 = _3364 * _3364;
                        float _3378 = ((isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0))) * _3363) / ((_3374 * 0.699999988079071044921875) + 1.0);
                        float _3382 = (-0.0) - _1981;
                        float _3383 = (-0.0) - _1982;
                        float _3384 = (-0.0) - _1983;
                        float _3388 = inversesqrt(dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384)));
                        float _3389 = _3388 * _3382;
                        float _3390 = _3388 * _3383;
                        float _3391 = _3388 * _3384;
                        float _3398 = exp2(log2(1.0 / ((_3374 * 3.5) + 5.0)) * 0.25);
                        float _3399 = 1.0 - _897;
                        float _3406 = sqrt(1.0 - ((1.0 - (_3399 * _3399)) * (1.0 - (_3398 * _3398))));
                        float _3407 = _3406 * _3406;
                        float _3408 = _3407 * _3407;
                        float _3409 = _3389 + _3354;
                        float _3410 = _3390 + _3355;
                        float _3411 = _3391 + _3356;
                        float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                        float _3419 = dot(vec3(_837, _840, _843), vec3(_3389, _3390, _3391));
                        float _4818 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3422 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3423 = dot(vec3(_837, _840, _843), vec3(_3415 * _3409, _3415 * _3410, _3415 * _3411));
                        float _4829 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3426 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3430 = ((_3426 * _3426) * (_3408 + (-1.0))) + 1.0;
                        float _3431 = _3367 * _3407;
                        float _3432 = _3431 * _3431;
                        float _3435 = ((1.0 - _3432) * _3357) + _3432;
                        float _4840 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3436 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                        float _3437 = 1.0 - _3407;
                        float _3447 = (0.5 / (((_3436 * ((_3422 * _3437) + _3407)) + 9.9999999392252902907785028219223e-09) + (((_3436 * _3437) + _3407) * _3422))) * _3436;
                        float _4851 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3458 = (((_3408 * 3.1415927410125732421875) * (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) / ((_3430 * _3430) * ((_3374 * 2.1991131305694580078125) + 3.141590118408203125))) * _3363;
                        _3211 = (_3378 * _3326.x) + _3284;
                        _3212 = (_3378 * _3326.y) + _3285;
                        _3213 = (_3378 * _3326.z) + _3286;
                        _3208 = (_3458 * _3343.x) + _3281;
                        _3209 = (_3458 * _3343.y) + _3282;
                        _3210 = (_3458 * _3343.z) + _3283;
                        if (_3288 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3212;
                            _3286 = _3213;
                            _3287 = _3288;
                        }
                    }
                    frontier_phi_71_pred = _3213;
                    frontier_phi_71_pred_1 = _3212;
                    frontier_phi_71_pred_2 = _3211;
                    frontier_phi_71_pred_3 = _3210;
                    frontier_phi_71_pred_4 = _3209;
                    frontier_phi_71_pred_5 = _3208;
                }
                _2994 = frontier_phi_71_pred;
                _2992 = frontier_phi_71_pred_1;
                _2990 = frontier_phi_71_pred_2;
                _2988 = frontier_phi_71_pred_3;
                _2986 = frontier_phi_71_pred_4;
                _2984 = frontier_phi_71_pred_5;
                uint _3143 = _3142 + 1u;
                if (_3143 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3136 = _2984;
                    _3137 = _2986;
                    _3138 = _2988;
                    _3139 = _2990;
                    _3140 = _2992;
                    _3141 = _2994;
                    _3142 = _3143;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
            _2991 = _2992;
            _2993 = _2994;
        }
        uvec4 _2997 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2998 = _2997.z;
        uint _3000 = (_2998 >> 8u) & 15u;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        if (((4294967295u << _3000) & _2903) == 0u)
        {
            _3104 = _2983;
            _3106 = _2985;
            _3108 = _2987;
            _3110 = _2989;
            _3112 = _2991;
            _3114 = _2993;
        }
        else
        {
            float _3129 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
            float _3130 = _3129 * _1981;
            float _3131 = _3129 * _1982;
            float _3132 = _3129 * _1983;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3000 < ((_2998 >> 12u) & 15u))
            {
                float _3105;
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3264 = _2983;
                float _3265 = _2985;
                float _3266 = _2987;
                float _3267 = _2989;
                float _3268 = _2991;
                float _3269 = _2993;
                uint _3270 = _3000;
                uint _3279;
                bool _3280;
                for (;;)
                {
                    _3279 = texelFetch(g_lightClassification, int((((_2897 << 5u) + (_2883 << 9u)) + (_3270 << 2u)) >> 2u)).x;
                    _3280 = _3279 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3280)
                    {
                        frontier_phi_82_pred = _3269;
                        frontier_phi_82_pred_1 = _3268;
                        frontier_phi_82_pred_2 = _3267;
                        frontier_phi_82_pred_3 = _3266;
                        frontier_phi_82_pred_4 = _3265;
                        frontier_phi_82_pred_5 = _3264;
                    }
                    else
                    {
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3485 = _3264;
                        float _3486 = _3265;
                        float _3487 = _3266;
                        float _3488 = _3267;
                        float _3489 = _3268;
                        float _3490 = _3269;
                        uint _3491 = _3279;
                        uint _3492;
                        vec4 _3517;
                        float _3518;
                        vec4 _3533;
                        vec3 _3545;
                        vec4 _3560;
                        vec4 _3576;
                        float _3622;
                        bool _3623;
                        for (;;)
                        {
                            uint _3502 = ((_3270 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3491));
                            _3492 = (_3491 + 4294967295u) & _3491;
                            uint _3504 = _3502 * 40u;
                            _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            _3518 = _3517.w;
                            uint _3520 = (_3502 * 40u) + 4u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3535 = (_3502 * 40u) + 8u;
                            _3545 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x));
                            uint _3547 = (_3502 * 40u) + 16u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3563 = (_3502 * 40u) + 20u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3578 = (_3502 * 40u) + 24u;
                            vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3597 = (_3502 * 40u) + 28u;
                            vec4 _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            _3622 = fma(_1983, _3610.z, fma(_1982, _3610.y, _3610.x * _1981)) + _3610.w;
                            _3623 = !((fma(_1983, _3591.z, fma(_1982, _3591.y, _3591.x * _1981)) + _3591.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3623)
                            {
                                float _3650 = _3517.x - _1981;
                                float _3651 = _3517.y - _1982;
                                float _3652 = _3517.z - _1983;
                                float _3653 = dot(vec3(_3650, _3651, _3652), vec3(_3650, _3651, _3652));
                                float _3656 = inversesqrt(_3653);
                                float _3657 = _3656 * _3650;
                                float _3658 = _3656 * _3651;
                                float _3659 = _3656 * _3652;
                                float _3663 = 1.0 - (_3653 / (_3518 * _3518));
                                float _4862 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3664 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3668 = sqrt(_3653) * _3533.w;
                                float _3670 = 1.39999997615814208984375 / (_3668 + 1.39999997615814208984375);
                                float _3671 = _3670 * _3670;
                                float _3674 = ((1.0 - _3671) * dot(vec3(_3657, _3658, _3659), vec3(_837, _840, _843))) + _3671;
                                float _3677 = _3668 * _3668;
                                float _3681 = (fma(_1983, _3560.z, fma(_1982, _3560.y, _3560.x * _1981)) + _3560.w) / _3622;
                                float _3682 = (fma(_1983, _3576.z, fma(_1982, _3576.y, _3576.x * _1981)) + _3576.w) / _3622;
                                float _3686 = 1.0 - dot(vec2(_3681, _3682), vec2(_3681, _3682));
                                float _4878 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3687 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3688 = _3687 * (((isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0))) * _3664) / ((_3677 * 0.699999988079071044921875) + 1.0));
                                float _3700 = exp2(log2(1.0 / ((_3677 * 3.5) + 5.0)) * 0.25);
                                float _3701 = 1.0 - _897;
                                float _3708 = sqrt(1.0 - ((1.0 - (_3701 * _3701)) * (1.0 - (_3700 * _3700))));
                                float _3709 = _3708 * _3708;
                                float _3710 = _3709 * _3709;
                                float _3711 = _3657 - _3130;
                                float _3712 = _3658 - _3131;
                                float _3713 = _3659 - _3132;
                                float _3717 = inversesqrt(dot(vec3(_3711, _3712, _3713), vec3(_3711, _3712, _3713)));
                                float _3721 = dot(vec3(_837, _840, _843), vec3((-0.0) - _3130, (-0.0) - _3131, (-0.0) - _3132));
                                float _4889 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3724 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3725 = dot(vec3(_837, _840, _843), vec3(_3717 * _3711, _3717 * _3712, _3717 * _3713));
                                float _4900 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3728 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                                float _3732 = ((_3728 * _3728) * (_3710 + (-1.0))) + 1.0;
                                float _3733 = _3670 * _3709;
                                float _3734 = _3733 * _3733;
                                float _3740 = ((1.0 - _3734) * dot(vec3(_837, _840, _843), vec3(_3657, _3658, _3659))) + _3734;
                                float _4911 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3741 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                                float _3742 = 1.0 - _3709;
                                float _3752 = (0.5 / (((_3741 * ((_3724 * _3742) + _3709)) + 9.9999999392252902907785028219223e-09) + (((_3741 * _3742) + _3709) * _3724))) * _3741;
                                float _4922 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3762 = (_3687 * _3664) * (((_3710 * 3.1415927410125732421875) * (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0)))) / ((_3732 * _3732) * ((_3677 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3688 * _3533.z;
                                frontier_phi_88_pred_1 = _3688 * _3533.y;
                                frontier_phi_88_pred_2 = _3688 * _3533.x;
                                frontier_phi_88_pred_3 = _3762 * _3545.z;
                                frontier_phi_88_pred_4 = _3762 * _3545.y;
                                frontier_phi_88_pred_5 = _3762 * _3545.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3771 = frontier_phi_88_pred;
                            _3770 = frontier_phi_88_pred_1;
                            _3769 = frontier_phi_88_pred_2;
                            _3768 = frontier_phi_88_pred_3;
                            _3767 = frontier_phi_88_pred_4;
                            _3766 = frontier_phi_88_pred_5;
                            _3475 = _3769 + _3488;
                            _3476 = _3770 + _3489;
                            _3477 = _3771 + _3490;
                            _3472 = _3766 + _3485;
                            _3473 = _3767 + _3486;
                            _3474 = _3768 + _3487;
                            if (_3492 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3492;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3477;
                        frontier_phi_82_pred_1 = _3476;
                        frontier_phi_82_pred_2 = _3475;
                        frontier_phi_82_pred_3 = _3474;
                        frontier_phi_82_pred_4 = _3473;
                        frontier_phi_82_pred_5 = _3472;
                    }
                    _3115 = frontier_phi_82_pred;
                    _3113 = frontier_phi_82_pred_1;
                    _3111 = frontier_phi_82_pred_2;
                    _3109 = frontier_phi_82_pred_3;
                    _3107 = frontier_phi_82_pred_4;
                    _3105 = frontier_phi_82_pred_5;
                    uint _3271 = _3270 + 1u;
                    if (_3271 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3264 = _3105;
                        _3265 = _3107;
                        _3266 = _3109;
                        _3267 = _3111;
                        _3268 = _3113;
                        _3269 = _3115;
                        _3270 = _3271;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3111;
                frontier_phi_63_64_ladder_1 = _3115;
                frontier_phi_63_64_ladder_2 = _3113;
                frontier_phi_63_64_ladder_3 = _3109;
                frontier_phi_63_64_ladder_4 = _3107;
                frontier_phi_63_64_ladder_5 = _3105;
            }
            else
            {
                frontier_phi_63_64_ladder = _2989;
                frontier_phi_63_64_ladder_1 = _2993;
                frontier_phi_63_64_ladder_2 = _2991;
                frontier_phi_63_64_ladder_3 = _2987;
                frontier_phi_63_64_ladder_4 = _2985;
                frontier_phi_63_64_ladder_5 = _2983;
            }
            _3104 = frontier_phi_63_64_ladder_5;
            _3106 = frontier_phi_63_64_ladder_4;
            _3108 = frontier_phi_63_64_ladder_3;
            _3110 = frontier_phi_63_64_ladder;
            _3112 = frontier_phi_63_64_ladder_2;
            _3114 = frontier_phi_63_64_ladder_1;
        }
        float _3119 = isnan(1.0) ? _881 : (isnan(_881) ? 1.0 : min(_881, 1.0));
        _2916 = (_3119 * _3110) + _2447;
        _2918 = (_3119 * _3112) + _2449;
        _2920 = (_3119 * _3114) + _2451;
        _2922 = ((_3104 * 0.039999999105930328369140625) * _3119) + _2770;
        _2924 = ((_3106 * 0.039999999105930328369140625) * _3119) + _2772;
        _2926 = ((_3108 * 0.039999999105930328369140625) * _3119) + _2774;
    }
    else
    {
        _2916 = _2447;
        _2918 = _2449;
        _2920 = _2451;
        _2922 = _2770;
        _2924 = _2772;
        _2926 = _2774;
    }
    float _4938 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4949 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4960 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _2943 = ((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2916 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _881))) + ((_2922 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    float _2944 = ((isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2918 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _881))) + ((_2924 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    float _2945 = ((isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0))) * (_2920 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _881))) + ((_2926 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    uint _2946 = _253 + 6u;
    float _2954 = _818 / cbSceneParam._m0[86u].x;
    float _2955 = _819 / cbSceneParam._m0[86u].y;
    vec4 _2969 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2954, _2955, (log2((isnan(cbSceneParam._m0[77u].w) ? _740 : (isnan(_740) ? cbSceneParam._m0[77u].w : min(_740, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2971 = _2969.x;
    float _2972 = _2969.y;
    float _2973 = _2969.z;
    float _2974 = _2969.w;
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    if (_740 > cbSceneParam._m0[78u].w)
    {
        float _3008 = isnan(_740) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _740 : min(cbSceneParam._m0[80u].w, _740));
        float _3009 = _3008 / _740;
        float _3020 = _3009 * _791;
        float _3021 = _792 * _3009;
        float _3022 = (-0.0) - _3021;
        float _3024 = _3009 * _793;
        float _3026 = (cbSceneParam._m0[77u].w * _3022) / _3008;
        float _3027 = _3026 + cbSceneParam._m0[79u].w;
        float _3028 = cbSceneParam._m0[79u].w - _3021;
        float _3034 = sqrt(((_3020 * _3020) + (_3021 * _3021)) + (_3024 * _3024));
        float _3037 = (1.0 - (cbSceneParam._m0[77u].w / _3008)) * _3034;
        float _3042 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3044 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3221;
        if (abs((_3022 - _3026) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3221 = ((((_3027 > 0.0) ? exp2(_3042 * _3027) : (2.0 - exp2(_3044 * _3027))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3037;
        }
        else
        {
            float _3165 = 1.0 / cbSceneParam._m0[80u].x;
            float _3166 = isnan(_3028) ? _3027 : (isnan(_3027) ? _3028 : max(_3027, _3028));
            float _3167 = isnan(_3028) ? _3027 : (isnan(_3027) ? _3028 : min(_3027, _3028));
            float _3176 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : min(_3166, 0.0));
            float _3177 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : min(_3167, 0.0));
            _3221 = ((abs(_3034 / _3022) * cbSceneParam._m0[80u].y) * ((((_3176 - _3177) * 2.0) - ((exp2(_3042 * (isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0)))) - exp2(_3042 * (isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0))))) * _3165)) - ((exp2(_3044 * _3176) - exp2(_3044 * _3177)) * _3165))) + (_3037 * cbSceneParam._m0[80u].z);
        }
        vec4 _3223 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2954, _2955, 1.0), 0.0);
        float _3232 = exp2((_3221 * (-1.44269502162933349609375)) * (1.0 - _3223.w));
        float _3233 = log2(_3232);
        float _3249 = log2(_2974);
        _3046 = (exp2(_3249 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].x)) * _3223.x) / cbSceneParam._m0[78u].x)) + _2971;
        _3048 = (exp2(_3249 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].y)) * _3223.y) / cbSceneParam._m0[78u].y)) + _2972;
        _3050 = (exp2(_3249 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3233 * cbSceneParam._m0[78u].z)) * _3223.z) / cbSceneParam._m0[78u].z)) + _2973;
        _3052 = _3232 * _2974;
    }
    else
    {
        _3046 = _2971;
        _3048 = _2972;
        _3050 = _2973;
        _3052 = _2974;
    }
    bool _3259;
    vec4 _3062;
    vec4 _3084;
    float _3086;
    float _3090;
    float _3091;
    float _3092;
    float _3093;
    bool _3103;
    for (;;)
    {
        _3062 = cbMatDynParam._m0[0u];
        float _3064 = roundEven(_3062.y);
        bool _3065 = _3064 == 3.0;
        float _3066 = log2(_3052);
        float _3073 = exp2(_3066 * cbSceneParam._m0[78u].x) * _2943;
        float _3074 = exp2(_3066 * cbSceneParam._m0[78u].y) * _2944;
        float _3075 = exp2(_3066 * cbSceneParam._m0[78u].z) * _2945;
        float _3082 = _807 + (-0.5);
        _3084 = cbMtdParam._m0[1u];
        _3086 = _3084.y * _3082;
        float _3089 = (_3064 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3090 = _3089 * (_3065 ? _3073 : (_3073 + (cbSceneParam._m0[72u].w * _3046)));
        _3091 = _3089 * (_3065 ? _3074 : (_3074 + (cbSceneParam._m0[72u].w * _3048)));
        _3092 = _3089 * (_3065 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3050)));
        _3093 = _3082 * 0.999000012874603271484375;
        _3103 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3103)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _3093) < 0.5)
            {
                _3259 = true;
                break;
            }
        }
        uint _3200 = _856 + uint(_3062.w);
        if ((cbInstanceData._m0[_3200].w < 1.0) && ((cbInstanceData._m0[_3200].w + _3093) < 0.5))
        {
            _3259 = true;
            break;
        }
        if ((_3086 + 1.0) < _3084.x)
        {
            _3259 = true;
            break;
        }
        _3259 = false;
        break;
    }
    float _3463;
    if (_3259)
    {
        discard_state = true;
        _3463 = 0.0;
    }
    else
    {
        _3463 = cbInstanceData._m0[_2946].w;
    }
    SV_Target.x = _3090;
    SV_Target.y = _3091;
    SV_Target.z = _3092;
    SV_Target.w = _3463;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2946].w;
    discard_exit();
}


