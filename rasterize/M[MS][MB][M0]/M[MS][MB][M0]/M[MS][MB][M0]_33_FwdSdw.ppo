#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1113;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    uint _237 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _237 + 1u;
    uint _246 = _237 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_237].x * cbInstanceData._m0[_237].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _306 = _302.z;
    float _311 = (_302.x * 2.0) + (-1.0);
    float _313 = (_302.y * 2.0) + (-1.0);
    float _314 = dot(vec2(_311, _313), vec2(_311, _313));
    float _3705 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _320 = sqrt(1.0 - (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))));
    float _323 = fma(_320, _225, fma(_313, _232, _311 * _218));
    float _326 = fma(_320, _226, fma(_313, _233, _311 * _219));
    float _329 = fma(_320, _227, fma(_313, _234, _311 * _220));
    float _333 = inversesqrt(dot(vec3(_323, _326, _329), vec3(_323, _326, _329)));
    vec4 _369 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _371 = _369.x;
    float _372 = 1.0 - _371;
    float _379 = ((_371 - _372) * cbMtdParam._m0[24u].z) + _372;
    float _381 = (cbMtdParam._m0[19u].x + dot(vec4(_333 * _323, _333 * _326, _333 * _329, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_379 * cbMtdParam._m0[21u].z);
    float _3716 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _384 = (-0.0) - cbMtdParam._m0[24u].y;
    float _386 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _387 = isnan(1.0) ? _386 : (isnan(_386) ? 1.0 : min(_386, 1.0));
    float _394 = _382 - ((_382 * TEXCOORD_8.x) * _387);
    float _395 = _382 - ((_382 * TEXCOORD_8.y) * _387);
    float _396 = _382 - ((_382 * TEXCOORD_8.z) * _387);
    float _403 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _407 = ((isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : min(_403, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _415 = (_407 - (((_379 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _407))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3747 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _420 = ((_394 * (cbMtdParam._m0[17u].x - _282)) * _416) + _282;
    float _421 = ((_395 * (cbMtdParam._m0[17u].y - _283)) * _416) + _283;
    float _422 = ((_396 * (cbMtdParam._m0[17u].z - _284)) * _416) + _284;
    vec4 _434 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _256) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _257) + cbTextureTilingScale._m0[19u].w));
    float _436 = _434.x;
    float _437 = 1.0 - _436;
    float _466 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_436 - _437) * cbMtdParam._m0[24u].w) + _437) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3758 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _475 = ((((cbMtdParam._m0[10u].x - _420) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _467) + _420;
    float _476 = ((((cbMtdParam._m0[10u].y - _421) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _467) + _421;
    float _477 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _422)) * _467) + _422;
    vec4 _491 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _498 = (_491.x * 2.0) + (-1.0);
    float _499 = (_491.y * 2.0) + (-1.0);
    float _500 = dot(vec2(_498, _499), vec2(_498, _499));
    float _3769 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _509 = (((_491.z - _306) * _394) * _416) + _306;
    float _512 = ((cbMtdParam._m0[23u].y - _509) * _467) + _509;
    vec4 _531 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _256) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _257) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _537 = (_531.x * 2.0) + (-1.0);
    float _538 = (_531.y * 2.0) + (-1.0);
    float _539 = dot(vec2(_537, _538), vec2(_537, _538));
    float _3780 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _559 = (((cbMtdParam._m0[21u].x * _311) + ((_498 - _311) * _394)) * _416) + _311;
    float _560 = (((cbMtdParam._m0[21u].x * _313) + ((_499 - _313) * _395)) * _416) + _313;
    float _561 = (((sqrt(1.0 - (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) - _320) * _396) * _416) + _320;
    float _572 = (((_537 - _559) + (_559 * cbMtdParam._m0[22u].z)) * _467) + _559;
    float _573 = (((_538 - _560) + (_560 * cbMtdParam._m0[22u].z)) * _467) + _560;
    float _574 = ((sqrt(1.0 - (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) - _561) * _467) + _561;
    float _576 = cbMtdParam._m0[22u].x + _302.w;
    float _579 = fma(_574, _225, fma(_573, _232, _572 * _218));
    float _582 = fma(_574, _226, fma(_573, _233, _572 * _219));
    float _585 = fma(_574, _227, fma(_573, _234, _572 * _220));
    float _589 = inversesqrt(dot(vec3(_579, _582, _585), vec3(_579, _582, _585)));
    float _590 = _589 * _579;
    float _591 = _589 * _582;
    float _592 = _589 * _585;
    float _3791 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _593 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _3813 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3824 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3835 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _611 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _651 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _661 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _651);
    float _662 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _651);
    float _663 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _651);
    float _667 = inversesqrt(dot(vec3(_661, _662, _663), vec3(_661, _662, _663)));
    float _668 = _661 * _667;
    float _669 = _662 * _667;
    float _670 = _663 * _667;
    float _676 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _677 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _698 = fma(_592, cbSceneParam._m0[5u].z, fma(_591, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _590));
    float _701 = fma(_592, cbSceneParam._m0[6u].z, fma(_591, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _590));
    float _704 = fma(_592, cbSceneParam._m0[7u].z, fma(_591, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _590));
    uint _718 = (_237 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _724 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_718].x;
    float _725 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) * cbInstanceData._m0[_718].y;
    float _726 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) * cbInstanceData._m0[_718].z;
    float _3846 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    vec4 _738 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _676, cbSceneParam._m0[86u].y * _677));
    float _742 = ((isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * TEXCOORD_5.w) * _738.x;
    float _743 = dot(vec3(_590, _591, _592), vec3(_668, _669, _670));
    float _746 = _743 * 2.0;
    float _750 = (_746 * _590) - _668;
    float _751 = (_746 * _591) - _669;
    float _752 = (_746 * _592) - _670;
    float _756 = abs(dot(vec3(_668, _669, _670), vec3(_590, _591, _592)));
    float _3879 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _758 = sqrt(_593);
    float _771 = exp2((_758 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_758 * 3.0));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1112;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _837 = fma(_811, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _803));
        float _841 = fma(_811, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _803));
        float _845 = fma(_811, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _803));
        float _870 = _803 + _590;
        float _871 = _807 + _591;
        float _872 = _811 + _592;
        float _882 = fma(_872, cbModelParam._m0[26u].z, fma(_871, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _870)) - _837;
        float _883 = fma(_872, cbModelParam._m0[27u].z, fma(_871, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _870)) - _841;
        float _884 = fma(_872, cbModelParam._m0[28u].z, fma(_871, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _870)) - _845;
        float _888 = inversesqrt(dot(vec3(_882, _883, _884), vec3(_882, _883, _884)));
        float _901 = ((_888 * _882) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_837 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_888 * _883) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_841 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_888 * _884) / cbModelParam._m0[34u].z) + ((((((_845 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        float _940 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_906.x + (-0.5));
        float _942 = _940 * (_906.y + (-0.5));
        float _943 = _940 * (_906.z + (-0.5));
        float _950 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_913.x + (-0.5));
        float _952 = _950 * (_913.y + (-0.5));
        float _953 = _950 * (_913.z + (-0.5));
        float _960 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_920.x + (-0.5));
        float _962 = _960 * (_920.y + (-0.5));
        float _963 = _960 * (_920.z + (-0.5));
        float _970 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_927.x + (-0.5));
        float _972 = _970 * (_927.y + (-0.5));
        float _973 = _970 * (_927.z + (-0.5));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = _941 * 0.5;
        float _978 = _951 * 0.5;
        float _979 = _961 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _994 = (dot(vec3(_590, _591, _592), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1004 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3927 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1006 + 1.0))) + _1011) * _974;
        float _1021 = _942 * 0.5;
        float _1022 = _952 * 0.5;
        float _1023 = _962 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_590, _591, _592), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3960 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1048 + 1.0))) + _1053) * _975;
        float _1063 = _943 * 0.5;
        float _1064 = _953 * 0.5;
        float _1065 = _963 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_590, _591, _592), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3993 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1090 + 1.0))) + _1095) * _976;
        _1112 = _943;
        _1114 = _942;
        _1115 = _941;
        _1116 = _953;
        _1117 = _952;
        _1118 = _951;
        _1119 = _963;
        _1120 = _962;
        _1121 = _961;
        _1122 = _976;
        _1123 = _975;
        _1124 = _974;
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
    }
    else
    {
        _1112 = _1113;
        _1114 = _1113;
        _1115 = _1113;
        _1116 = _1113;
        _1117 = _1113;
        _1118 = _1113;
        _1119 = _1113;
        _1120 = _1113;
        _1121 = _1113;
        _1122 = _1113;
        _1123 = _1113;
        _1124 = _1113;
        _1125 = 0.0;
        _1126 = 0.0;
        _1127 = 0.0;
    }
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1152 = fma(_811, cbModelParam._m0[30u].z, fma(_807, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _803));
        float _1156 = fma(_811, cbModelParam._m0[31u].z, fma(_807, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _803));
        float _1160 = fma(_811, cbModelParam._m0[32u].z, fma(_807, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _803));
        float _1183 = _803 + _590;
        float _1184 = _807 + _591;
        float _1185 = _811 + _592;
        float _1195 = fma(_1185, cbModelParam._m0[30u].z, fma(_1184, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1183)) - _1152;
        float _1196 = fma(_1185, cbModelParam._m0[31u].z, fma(_1184, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1183)) - _1156;
        float _1197 = fma(_1185, cbModelParam._m0[32u].z, fma(_1184, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1183)) - _1160;
        float _1201 = inversesqrt(dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197)));
        float _1214 = ((_1201 * _1195) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1152 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1201 * _1196) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1156 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1201 * _1197) / cbModelParam._m0[35u].z) + ((((((_1160 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        float _1251 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1218.x + (-0.5));
        float _1253 = _1251 * (_1218.y + (-0.5));
        float _1254 = _1251 * (_1218.z + (-0.5));
        float _1261 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1225.x + (-0.5));
        float _1263 = _1261 * (_1225.y + (-0.5));
        float _1264 = _1261 * (_1225.z + (-0.5));
        float _1271 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1232.x + (-0.5));
        float _1273 = _1271 * (_1232.y + (-0.5));
        float _1274 = _1271 * (_1232.z + (-0.5));
        float _1281 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1239.x + (-0.5));
        float _1283 = _1281 * (_1239.y + (-0.5));
        float _1284 = _1281 * (_1239.z + (-0.5));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = _1252 * 0.5;
        float _1289 = _1262 * 0.5;
        float _1290 = _1272 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_590, _591, _592), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4056 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1315 + 1.0))) + _1320) * _1285;
        float _1330 = _1253 * 0.5;
        float _1331 = _1263 * 0.5;
        float _1332 = _1273 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_590, _591, _592), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4089 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1357 + 1.0))) + _1362) * _1286;
        float _1372 = _1254 * 0.5;
        float _1373 = _1264 * 0.5;
        float _1374 = _1274 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_590, _591, _592), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4122 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1399 + 1.0))) + _1404) * _1287;
        _1421 = _1254;
        _1422 = _1253;
        _1423 = _1252;
        _1424 = _1264;
        _1425 = _1263;
        _1426 = _1262;
        _1427 = _1274;
        _1428 = _1273;
        _1429 = _1272;
        _1430 = _1287;
        _1431 = _1286;
        _1432 = _1285;
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
    }
    else
    {
        _1421 = _1113;
        _1422 = _1113;
        _1423 = _1113;
        _1424 = _1113;
        _1425 = _1113;
        _1426 = _1113;
        _1427 = _1113;
        _1428 = _1113;
        _1429 = _1113;
        _1430 = _1113;
        _1431 = _1113;
        _1432 = _1113;
        _1433 = 0.0;
        _1434 = 0.0;
        _1435 = 0.0;
    }
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1125)) + _1125;
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1126)) + _1126;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1127)) + _1127;
    float _1468 = fma(_1447, cbSceneParam._m0[89u].z, fma(_1446, cbSceneParam._m0[89u].y, _1445 * cbSceneParam._m0[89u].x));
    float _1471 = fma(_1447, cbSceneParam._m0[90u].z, fma(_1446, cbSceneParam._m0[90u].y, _1445 * cbSceneParam._m0[90u].x));
    float _1474 = fma(_1447, cbSceneParam._m0[91u].z, fma(_1446, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1445));
    float _1489 = _750 * 0.5;
    float _1490 = _751 * 0.5;
    float _1491 = _752 * 0.5;
    float _1492 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1495 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1498 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1532;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1505 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1112, _1116, _1119, _1122));
        float _1509 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1114, _1117, _1120, _1123));
        float _1513 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1115, _1118, _1121, _1124));
        float _1520 = dot(vec4(cbModelParam._m0[39u]), vec4(_1489, _1490, _1491, 1.0));
        _1532 = dot(vec3(isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1520) ? 0.0 : (isnan(0.0) ? _1520 : max(0.0, _1520))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1532 = 1.0;
    }
    float _1543;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1534 = dot(vec4(cbModelParam._m0[40u]), vec4(_1489, _1490, _1491, 1.0));
        _1543 = dot(vec3(isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1543 = 1.0;
    }
    float _1547 = (_1543 * cbModelParam._m0[1u].x) + (_1532 * (1.0 - cbModelParam._m0[1u].x));
    float _1557 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _593);
    float _1558 = isnan(_1557) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1557 : min(cbModelParam._m0[25u].z, _1557));
    float _1639;
    float _1641;
    float _1643;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1606 = fma(_811, cbModelParam._m0[13u].z, fma(_807, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803)) + cbModelParam._m0[13u].w;
        float _1610 = fma(_811, cbModelParam._m0[14u].z, fma(_807, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803)) + cbModelParam._m0[14u].w;
        float _1614 = fma(_811, cbModelParam._m0[15u].z, fma(_807, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803)) + cbModelParam._m0[15u].w;
        float _1617 = fma(_752, cbModelParam._m0[13u].z, fma(_751, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _750));
        float _1620 = fma(_752, cbModelParam._m0[14u].z, fma(_751, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _750));
        float _1623 = fma(_752, cbModelParam._m0[15u].z, fma(_751, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _750));
        float _1651;
        if (_1617 > 0.0)
        {
            _1651 = abs((1.0 - _1606) / _1617);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1606 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1651 = frontier_phi_14_12_ladder;
        }
        float _1822;
        if (_1620 > 0.0)
        {
            _1822 = abs((1.0 - _1610) / _1620);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1610 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1822 = frontier_phi_23_19_ladder;
        }
        float _2118;
        if (_1623 > 0.0)
        {
            _2118 = abs((1.0 - _1614) / _1623);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1614 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2118 = frontier_phi_35_30_ladder;
        }
        float _2120 = isnan(_1822) ? _1651 : (isnan(_1651) ? _1822 : min(_1651, _1822));
        float _2121 = isnan(_2118) ? _2120 : (isnan(_2120) ? _2118 : min(_2120, _2118));
        float _2125 = (_2121 * _1617) + _1606;
        float _2126 = (_2121 * _1620) + _1610;
        float _2127 = (_2121 * _1623) + _1614;
        float _2128 = _2121 * 9.9999997473787516355514526367188e-05;
        float _2130 = (-1.0) - _2128;
        float _2132 = _2128 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2127 > _2132) || ((_2127 < _2130) || ((_2126 > _2132) || ((_2126 < _2130) || ((_2125 < _2130) || (_2125 > _2132))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2272 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2127, cbModelParam._m0[9u].z, fma(_2126, cbModelParam._m0[9u].y, _2125 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2127, cbModelParam._m0[10u].z, fma(_2126, cbModelParam._m0[10u].y, _2125 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2127, cbModelParam._m0[11u].z, fma(_2126, cbModelParam._m0[11u].y, _2125 * cbModelParam._m0[11u].x))), _1558);
            frontier_phi_13_35_ladder = _2272.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2272.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2272.x * cbModelParam._m0[1u].y;
        }
        _1639 = frontier_phi_13_35_ladder_2;
        _1641 = frontier_phi_13_35_ladder_1;
        _1643 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1627 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_750, _751, _752), _1558);
        _1639 = _1627.x * cbModelParam._m0[1u].y;
        _1641 = _1627.y * cbModelParam._m0[1u].y;
        _1643 = _1627.z * cbModelParam._m0[1u].y;
    }
    float _1647 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _593);
    float _1648 = isnan(_1647) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1647 : min(cbModelParam._m0[25u].w, _1647));
    float _1738;
    float _1740;
    float _1742;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1702 = fma(_811, cbModelParam._m0[21u].z, fma(_807, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803)) + cbModelParam._m0[21u].w;
        float _1706 = fma(_811, cbModelParam._m0[22u].z, fma(_807, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803)) + cbModelParam._m0[22u].w;
        float _1710 = fma(_811, cbModelParam._m0[23u].z, fma(_807, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803)) + cbModelParam._m0[23u].w;
        float _1713 = fma(_752, cbModelParam._m0[21u].z, fma(_751, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _750));
        float _1716 = fma(_752, cbModelParam._m0[22u].z, fma(_751, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _750));
        float _1719 = fma(_752, cbModelParam._m0[23u].z, fma(_751, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _750));
        float _1827;
        if (_1713 > 0.0)
        {
            _1827 = abs((1.0 - _1702) / _1713);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1702 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1827 = frontier_phi_25_21_ladder;
        }
        float _2145;
        if (_1716 > 0.0)
        {
            _2145 = abs((1.0 - _1706) / _1716);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1706 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2145 = frontier_phi_37_32_ladder;
        }
        float _2472;
        if (_1719 > 0.0)
        {
            _2472 = abs((1.0 - _1710) / _1719);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1710 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2472 = frontier_phi_47_44_ladder;
        }
        float _2474 = isnan(_2145) ? _1827 : (isnan(_1827) ? _2145 : min(_1827, _2145));
        float _2475 = isnan(_2472) ? _2474 : (isnan(_2474) ? _2472 : min(_2474, _2472));
        float _2479 = (_2475 * _1713) + _1702;
        float _2480 = (_2475 * _1716) + _1706;
        float _2481 = (_2475 * _1719) + _1710;
        float _2482 = _2475 * 9.9999997473787516355514526367188e-05;
        float _2483 = (-1.0) - _2482;
        float _2485 = _2482 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2481 > _2485) || ((_2481 < _2483) || ((_2480 > _2485) || ((_2480 < _2483) || ((_2479 < _2483) || (_2479 > _2485))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2599 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2481, cbModelParam._m0[17u].z, fma(_2480, cbModelParam._m0[17u].y, _2479 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2481, cbModelParam._m0[18u].z, fma(_2480, cbModelParam._m0[18u].y, _2479 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2481, cbModelParam._m0[19u].z, fma(_2480, cbModelParam._m0[19u].y, _2479 * cbModelParam._m0[19u].x))), _1648);
            frontier_phi_22_47_ladder = _2599.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2599.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2599.x * cbModelParam._m0[1u].z;
        }
        _1738 = frontier_phi_22_47_ladder_2;
        _1740 = frontier_phi_22_47_ladder_1;
        _1742 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_750, _751, _752), _1648);
        _1738 = _1722.x * cbModelParam._m0[1u].z;
        _1740 = _1722.y * cbModelParam._m0[1u].z;
        _1742 = _1722.z * cbModelParam._m0[1u].z;
    }
    float _1754 = ((((1.0 - _771) * ((_758 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_771 * _758)) * _742;
    float _1755 = _1754 * ((cbModelParam._m0[1u].w * (_1738 - _1639)) + _1639);
    float _1756 = _1754 * ((cbModelParam._m0[1u].w * (_1740 - _1641)) + _1641);
    float _1757 = _1754 * ((cbModelParam._m0[1u].w * (_1742 - _1643)) + _1643);
    float _1760 = fma(_1757, cbSceneParam._m0[89u].z, fma(_1756, cbSceneParam._m0[89u].y, _1755 * cbSceneParam._m0[89u].x));
    float _1763 = fma(_1757, cbSceneParam._m0[90u].z, fma(_1756, cbSceneParam._m0[90u].y, _1755 * cbSceneParam._m0[90u].x));
    float _1766 = fma(_1757, cbSceneParam._m0[91u].z, fma(_1756, cbSceneParam._m0[91u].y, _1755 * cbSceneParam._m0[91u].x));
    float _1801 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1805 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1809 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1813 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1814 = _1801 / _1813;
    float _1815 = _1805 / _1813;
    float _1816 = _1809 / _1813;
    float _1963;
    float _1964;
    float _1965;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1843 = ((uint(_1816 > cbSceneParam._m0[59u].y) + uint(_1816 > cbSceneParam._m0[59u].x)) + uint(_1816 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1844 = _1843 + 43u;
        uint _1852 = _1843 + 44u;
        uint _1860 = _1843 + 45u;
        uint _1868 = _1843 + 46u;
        float _1879 = fma(_1813, cbSceneParam._m0[_1844].w, fma(_1809, cbSceneParam._m0[_1844].z, fma(_1805, cbSceneParam._m0[_1844].y, _1801 * cbSceneParam._m0[_1844].x)));
        float _1883 = fma(_1813, cbSceneParam._m0[_1852].w, fma(_1809, cbSceneParam._m0[_1852].z, fma(_1805, cbSceneParam._m0[_1852].y, _1801 * cbSceneParam._m0[_1852].x)));
        float _1891 = fma(_1813, cbSceneParam._m0[_1868].w, fma(_1809, cbSceneParam._m0[_1868].z, fma(_1805, cbSceneParam._m0[_1868].y, _1801 * cbSceneParam._m0[_1868].x)));
        float _1896 = cbSceneParam._m0[33u].z * _1891;
        float _1898 = cbSceneParam._m0[33u].w * _1891;
        float _1901 = fma(_1813, cbSceneParam._m0[_1860].w, fma(_1809, cbSceneParam._m0[_1860].z, fma(_1805, cbSceneParam._m0[_1860].y, _1801 * cbSceneParam._m0[_1860].x))) / _1891;
        float _1949 = (cbSceneParam._m0[33u].x - sqrt(((_1815 * _1815) + (_1814 * _1814)) + (_1816 * _1816))) * cbSceneParam._m0[33u].y;
        float _4248 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1956 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1896 + _1879) / _1891, (_1898 + _1883) / _1891), _1901), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1898 + _1879) / _1891, (_1883 - _1896) / _1891), _1901), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1879 - _1896) / _1891, (_1883 - _1898) / _1891), _1901), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1879 - _1898) / _1891, (_1896 + _1883) / _1891), _1901), 0.0)).x), vec4(0.25)));
        _1963 = 1.0 - (_1956 * cbSceneParam._m0[34u].x);
        _1964 = 1.0 - (_1956 * cbSceneParam._m0[34u].y);
        _1965 = 1.0 - (_1956 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1963 = 1.0;
        _1964 = 1.0;
        _1965 = 1.0;
    }
    float _2029;
    float _2031;
    float _2033;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2017 = fma(_1813, cbSceneParam._m0[63u].w, fma(_1809, cbSceneParam._m0[63u].z, fma(_1805, cbSceneParam._m0[63u].y, _1801 * cbSceneParam._m0[63u].x)));
        float _2018 = fma(_1813, cbSceneParam._m0[60u].w, fma(_1809, cbSceneParam._m0[60u].z, fma(_1805, cbSceneParam._m0[60u].y, _1801 * cbSceneParam._m0[60u].x))) / _2017;
        float _2019 = fma(_1813, cbSceneParam._m0[61u].w, fma(_1809, cbSceneParam._m0[61u].z, fma(_1805, cbSceneParam._m0[61u].y, _1801 * cbSceneParam._m0[61u].x))) / _2017;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2018 >= cbSceneParam._m0[64u].x) && (_2019 >= cbSceneParam._m0[64u].y)) && (_2018 <= cbSceneParam._m0[64u].z)) && (_2019 <= cbSceneParam._m0[64u].w))
        {
            float _2158 = fma(_1813, cbSceneParam._m0[62u].w, fma(_1809, cbSceneParam._m0[62u].z, fma(_1805, cbSceneParam._m0[62u].y, _1801 * cbSceneParam._m0[62u].x))) / _2017;
            float _2162 = isnan(cbSceneParam._m0[41u].w) ? _2158 : (isnan(_2158) ? cbSceneParam._m0[41u].w : max(_2158, cbSceneParam._m0[41u].w));
            float _2205 = (cbSceneParam._m0[33u].x - sqrt(((_1815 * _1815) + (_1814 * _1814)) + (_1816 * _1816))) * cbSceneParam._m0[33u].y;
            float _4264 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
            float _2212 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2018, cbSceneParam._m0[33u].w + _2019), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2018, _2019 - cbSceneParam._m0[33u].z), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2018 - cbSceneParam._m0[33u].z, _2019 - cbSceneParam._m0[33u].w), _2162), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2018 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2019), _2162), 0.0)).x), vec4(0.25)));
            float _2216 = 1.0 - (_2212 * cbSceneParam._m0[34u].x);
            float _2217 = 1.0 - (_2212 * cbSceneParam._m0[34u].y);
            float _2218 = 1.0 - (_2212 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2218) ? _1965 : (isnan(_1965) ? _2218 : min(_1965, _2218));
            frontier_phi_34_33_ladder_1 = isnan(_2217) ? _1964 : (isnan(_1964) ? _2217 : min(_1964, _2217));
            frontier_phi_34_33_ladder_2 = isnan(_2216) ? _1963 : (isnan(_1963) ? _2216 : min(_1963, _2216));
        }
        else
        {
            frontier_phi_34_33_ladder = _1965;
            frontier_phi_34_33_ladder_1 = _1964;
            frontier_phi_34_33_ladder_2 = _1963;
        }
        _2029 = frontier_phi_34_33_ladder_2;
        _2031 = frontier_phi_34_33_ladder_1;
        _2033 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2029 = _1963;
        _2031 = _1964;
        _2033 = _1965;
    }
    uvec4 _2038 = floatBitsToUint(cbInstanceData._m0[_237 + 5u]);
    uint _2040 = _2038.x * 14u;
    uint _2041 = _2040 + 13u;
    float _2048 = _742 + (-1.0);
    float _2053 = (cbLight._m0[_2041].x * _2048) + 1.0;
    float _2054 = (cbLight._m0[_2041].y * _2048) + 1.0;
    float _2055 = (cbLight._m0[_2041].z * _2048) + 1.0;
    float _2056 = (cbLight._m0[_2041].w * _2048) + 1.0;
    uint _2057 = _2040 + 5u;
    float _2063 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
    uint _2067 = _2040 + 4u;
    float _2077 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
    uint _2081 = _2040 | 1u;
    float _2092 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_590, _591, _592));
    float _2095 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_590, _591, _592));
    float _4300 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _4311 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2100 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * 0.3183098733425140380859375;
    float _2102 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * 0.3183098733425140380859375;
    float _2109 = ((cbLight._m0[_2057].x * _2063) * _2102) + (((cbLight._m0[_2067].x * _2029) * _2077) * _2100);
    float _2110 = ((_2063 * cbLight._m0[_2057].y) * _2102) + (((cbLight._m0[_2067].y * _2031) * _2077) * _2100);
    float _2111 = ((_2063 * cbLight._m0[_2057].z) * _2102) + (((cbLight._m0[_2067].z * _2033) * _2077) * _2100);
    uvec4 _2115 = floatBitsToUint(cbLight._m0[_2040 + 12u]);
    bool _2117 = _2115.x == 0u;
    float _2219;
    float _2221;
    float _2223;
    if (_2117)
    {
        _2219 = _2109;
        _2221 = _2110;
        _2223 = _2111;
    }
    else
    {
        uint _2227 = _2040 + 6u;
        float _2243 = (dot(vec3(cbLight._m0[_2040 + 2u].xyz), vec3(_590, _591, _592)) * 0.5) + 0.5;
        float _2244 = _2243 * _2243;
        float _4322 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2245 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2246 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
        _2219 = (((cbLight._m0[_2227].x * 0.3183098733425140380859375) * _2245) * _2246) + _2109;
        _2221 = (((cbLight._m0[_2227].y * 0.3183098733425140380859375) * _2245) * _2246) + _2110;
        _2223 = (((cbLight._m0[_2227].z * 0.3183098733425140380859375) * _2245) * _2246) + _2111;
    }
    bool _2226 = _2115.y == 0u;
    float _2281;
    float _2283;
    float _2285;
    if (_2226)
    {
        _2281 = _2219;
        _2283 = _2221;
        _2285 = _2223;
    }
    else
    {
        uint _2443 = _2040 + 7u;
        float _2459 = (dot(vec3(cbLight._m0[_2040 + 3u].xyz), vec3(_590, _591, _592)) * 0.5) + 0.5;
        float _2460 = _2459 * _2459;
        float _4338 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2461 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2462 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2281 = (((cbLight._m0[_2443].x * 0.3183098733425140380859375) * _2461) * _2462) + _2219;
        _2283 = (((cbLight._m0[_2443].y * 0.3183098733425140380859375) * _2461) * _2462) + _2221;
        _2285 = (((cbLight._m0[_2443].z * 0.3183098733425140380859375) * _2461) * _2462) + _2223;
    }
    uint _2288 = _2040 + 8u;
    float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _593) * 0.949999988079071044921875);
    float _2302 = _2301 * _2301;
    float _2303 = cbLight._m0[_2040].x + _668;
    float _2304 = cbLight._m0[_2040].y + _669;
    float _2305 = cbLight._m0[_2040].z + _670;
    float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
    float _2310 = _2309 * _2303;
    float _2311 = _2309 * _2304;
    float _2312 = _2309 * _2305;
    float _2313 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_2040].xyz));
    float _4354 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _4365 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _2317 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2318 = dot(vec3(_590, _591, _592), vec3(_2310, _2311, _2312));
    float _4376 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2322 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2310, _2311, _2312));
    float _4387 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2326 = _2302 * _2302;
    float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
    float _2341 = (exp2(log2(1.0 - (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2342 = 1.0 - _2302;
    float _2353 = (0.5 / (((_2317 * ((_2316 * _2342) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2342) + _2302) * _2316))) * _2316;
    float _4398 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2355 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
    uint _2369 = _2040 + 9u;
    float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _593) * 0.949999988079071044921875);
    float _2381 = _2380 * _2380;
    float _2382 = cbLight._m0[_2081].x + _668;
    float _2383 = cbLight._m0[_2081].y + _669;
    float _2384 = cbLight._m0[_2081].z + _670;
    float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
    float _2389 = _2388 * _2382;
    float _2390 = _2388 * _2383;
    float _2391 = _2388 * _2384;
    float _2392 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_2081].xyz));
    float _4409 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2396 = dot(vec3(_590, _591, _592), vec3(_2389, _2390, _2391));
    float _4420 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _2400 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2389, _2390, _2391));
    float _4431 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2404 = _2381 * _2381;
    float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
    float _2417 = (exp2(log2(1.0 - (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2418 = 1.0 - _2381;
    float _2428 = (0.5 / (((_2317 * ((_2395 * _2418) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2418) + _2381) * _2395))) * _2395;
    float _4442 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2430 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
    float _2440 = (((_2417 * cbLight._m0[_2369].x) * _2430) * _2063) + ((((cbLight._m0[_2288].x * _2029) * _2341) * _2355) * _2077);
    float _2441 = (((_2417 * cbLight._m0[_2369].y) * _2430) * _2063) + ((((cbLight._m0[_2288].y * _2031) * _2341) * _2355) * _2077);
    float _2442 = (((_2417 * cbLight._m0[_2369].z) * _2430) * _2063) + ((((cbLight._m0[_2288].z * _2033) * _2341) * _2355) * _2077);
    float _2498;
    float _2500;
    float _2502;
    if (_2117)
    {
        _2498 = _2440;
        _2500 = _2441;
        _2502 = _2442;
    }
    else
    {
        uint _2504 = _2040 + 2u;
        uint _2508 = _2040 + 10u;
        float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _593) * 0.949999988079071044921875);
        float _2523 = _2522 * _2522;
        float _2524 = cbLight._m0[_2504].x + _668;
        float _2525 = cbLight._m0[_2504].y + _669;
        float _2526 = cbLight._m0[_2504].z + _670;
        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
        float _2531 = _2530 * _2524;
        float _2532 = _2530 * _2525;
        float _2533 = _2530 * _2526;
        float _2534 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_2504].xyz));
        float _4453 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2538 = dot(vec3(_590, _591, _592), vec3(_2531, _2532, _2533));
        float _4464 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2542 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2531, _2532, _2533));
        float _4475 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2546 = _2523 * _2523;
        float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
        float _2559 = (exp2(log2(1.0 - (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2560 = 1.0 - _2523;
        float _2570 = (0.5 / (((_2317 * ((_2537 * _2560) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2560) + _2523) * _2537))) * _2537;
        float _4486 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2572 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
        float _2573 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
        _2498 = (((_2559 * cbLight._m0[_2508].x) * _2572) * _2573) + _2440;
        _2500 = (((_2559 * cbLight._m0[_2508].y) * _2572) * _2573) + _2441;
        _2502 = (((_2559 * cbLight._m0[_2508].z) * _2572) * _2573) + _2442;
    }
    float _2604;
    float _2606;
    float _2608;
    if (_2226)
    {
        _2604 = _2498;
        _2606 = _2500;
        _2608 = _2502;
    }
    else
    {
        uint _2615 = _2040 + 3u;
        uint _2619 = _2040 + 11u;
        float _2633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2615].w)) * _593) * 0.949999988079071044921875);
        float _2634 = _2633 * _2633;
        float _2635 = cbLight._m0[_2615].x + _668;
        float _2636 = cbLight._m0[_2615].y + _669;
        float _2637 = cbLight._m0[_2615].z + _670;
        float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
        float _2642 = _2641 * _2635;
        float _2643 = _2641 * _2636;
        float _2644 = _2641 * _2637;
        float _2645 = dot(vec3(_590, _591, _592), vec3(cbLight._m0[_2615].xyz));
        float _4502 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2649 = dot(vec3(_590, _591, _592), vec3(_2642, _2643, _2644));
        float _4513 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2653 = dot(vec3(cbLight._m0[_2615].xyz), vec3(_2642, _2643, _2644));
        float _4524 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2657 = _2634 * _2634;
        float _2661 = ((_2652 * _2652) * (_2657 + (-1.0))) + 1.0;
        float _2670 = (exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2671 = 1.0 - _2634;
        float _2681 = (0.5 / (((_2317 * ((_2648 * _2671) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2671) + _2634) * _2648))) * _2648;
        float _4535 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2683 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2657 / ((_2661 * _2661) * 3.141590118408203125));
        float _2684 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2604 = (((_2670 * cbLight._m0[_2619].x) * _2683) * _2684) + _2498;
        _2606 = (((_2670 * cbLight._m0[_2619].y) * _2683) * _2684) + _2500;
        _2608 = (((_2670 * cbLight._m0[_2619].z) * _2683) * _2684) + _2502;
    }
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    if (_2038.y == 0u)
    {
        uvec4 _2705 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2706 = _2705.x;
        uint _2717 = uint((float(_2705.y) * floor(float(uint(cbSceneParam._m0[85u].y * _677) / _2706))) + floor(float(uint(cbSceneParam._m0[85u].x * _676) / _2706)));
        float _2727 = (log2(_1816 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2728 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        uint _2731 = uint(isnan(14.0) ? _2728 : (isnan(_2728) ? 14.0 : min(_2728, 14.0)));
        uvec4 _2736 = texelFetch(g_lightClusterGridBuffer, int(((_2731 << 2u) + (_2717 << 6u)) >> 2u));
        uint _2737 = _2736.x;
        uint _2738 = _2705.z;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        if (((((1u << ((_2738 >> 4u) & 15u)) + 4294967295u) & _2737) == 0u) || ((_2738 & 240u) == 0u))
        {
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
        }
        else
        {
            float _2818;
            float _2820;
            float _2822;
            float _2824;
            float _2826;
            float _2828;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            uint _2967 = 0u;
            uint _2976;
            bool _2977;
            for (;;)
            {
                _2976 = texelFetch(g_lightClassification, int((((_2731 << 5u) + (_2717 << 9u)) + (_2967 << 2u)) >> 2u)).x;
                _2977 = _2976 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2977)
                {
                    frontier_phi_66_pred = _2966;
                    frontier_phi_66_pred_1 = _2965;
                    frontier_phi_66_pred_2 = _2964;
                    frontier_phi_66_pred_3 = _2963;
                    frontier_phi_66_pred_4 = _2962;
                    frontier_phi_66_pred_5 = _2961;
                }
                else
                {
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    uint _3091;
                    _3085 = _2961;
                    _3086 = _2962;
                    _3087 = _2963;
                    _3088 = _2964;
                    _3089 = _2965;
                    _3090 = _2966;
                    _3091 = _2976;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    for (;;)
                    {
                        uint _3095 = uint(findLSB(_3091)) + (_2967 << 5u);
                        uint _3092 = (_3091 + 4294967295u) & _3091;
                        uint _3097 = _3095 * 48u;
                        vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3097)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 3u)).x));
                        uint _3117 = (_3095 * 48u) + 4u;
                        vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 3u)).x));
                        uint _3136 = (_3095 * 48u) + 8u;
                        vec3 _3147 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3136)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 2u)).x));
                        float _3151 = _3111.x - _1814;
                        float _3152 = _3111.y - _1815;
                        float _3153 = _3111.z - _1816;
                        float _3154 = dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153));
                        float _3157 = inversesqrt(_3154);
                        float _3158 = _3157 * _3151;
                        float _3159 = _3157 * _3152;
                        float _3160 = _3157 * _3153;
                        float _3161 = dot(vec3(_698, _701, _704), vec3(_3158, _3159, _3160));
                        float _3166 = 1.0 - (_3154 * _3111.w);
                        float _4561 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3167 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                        float _3168 = sqrt(_3154) * _3130.w;
                        float _3171 = 1.39999997615814208984375 / (_3168 + 1.39999997615814208984375);
                        float _3172 = _3171 * _3171;
                        float _3175 = ((1.0 - _3172) * _3161) + _3172;
                        float _3178 = _3168 * _3168;
                        float _3182 = ((isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0))) * _3167) / ((_3178 * 0.699999988079071044921875) + 1.0);
                        float _3186 = (-0.0) - _1814;
                        float _3187 = (-0.0) - _1815;
                        float _3188 = (-0.0) - _1816;
                        float _3192 = inversesqrt(dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188)));
                        float _3193 = _3192 * _3186;
                        float _3194 = _3192 * _3187;
                        float _3195 = _3192 * _3188;
                        float _3202 = exp2(log2(1.0 / ((_3178 * 3.5) + 5.0)) * 0.25);
                        float _3203 = 1.0 - _758;
                        float _3210 = sqrt(1.0 - ((1.0 - (_3203 * _3203)) * (1.0 - (_3202 * _3202))));
                        float _3211 = _3210 * _3210;
                        float _3212 = _3211 * _3211;
                        float _3213 = _3193 + _3158;
                        float _3214 = _3194 + _3159;
                        float _3215 = _3195 + _3160;
                        float _3219 = inversesqrt(dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215)));
                        float _3223 = dot(vec3(_698, _701, _704), vec3(_3193, _3194, _3195));
                        float _4577 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3226 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3227 = dot(vec3(_698, _701, _704), vec3(_3219 * _3213, _3219 * _3214, _3219 * _3215));
                        float _4588 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3230 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3234 = ((_3230 * _3230) * (_3212 + (-1.0))) + 1.0;
                        float _3235 = _3171 * _3211;
                        float _3236 = _3235 * _3235;
                        float _3239 = ((1.0 - _3236) * _3161) + _3236;
                        float _4599 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3240 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3241 = 1.0 - _3211;
                        float _3251 = (0.5 / (((_3240 * ((_3226 * _3241) + _3211)) + 9.9999999392252902907785028219223e-09) + (((_3240 * _3241) + _3211) * _3226))) * _3240;
                        float _4610 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3262 = (((_3212 * 3.1415927410125732421875) * (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) / ((_3234 * _3234) * ((_3178 * 2.1991131305694580078125) + 3.141590118408203125))) * _3167;
                        _3020 = (_3182 * _3130.x) + _3088;
                        _3021 = (_3182 * _3130.y) + _3089;
                        _3022 = (_3182 * _3130.z) + _3090;
                        _3017 = (_3262 * _3147.x) + _3085;
                        _3018 = (_3262 * _3147.y) + _3086;
                        _3019 = (_3262 * _3147.z) + _3087;
                        if (_3092 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3085 = _3017;
                            _3086 = _3018;
                            _3087 = _3019;
                            _3088 = _3020;
                            _3089 = _3021;
                            _3090 = _3022;
                            _3091 = _3092;
                        }
                    }
                    frontier_phi_66_pred = _3022;
                    frontier_phi_66_pred_1 = _3021;
                    frontier_phi_66_pred_2 = _3020;
                    frontier_phi_66_pred_3 = _3019;
                    frontier_phi_66_pred_4 = _3018;
                    frontier_phi_66_pred_5 = _3017;
                }
                _2828 = frontier_phi_66_pred;
                _2826 = frontier_phi_66_pred_1;
                _2824 = frontier_phi_66_pred_2;
                _2822 = frontier_phi_66_pred_3;
                _2820 = frontier_phi_66_pred_4;
                _2818 = frontier_phi_66_pred_5;
                uint _2968 = _2967 + 1u;
                if (_2968 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2961 = _2818;
                    _2962 = _2820;
                    _2963 = _2822;
                    _2964 = _2824;
                    _2965 = _2826;
                    _2966 = _2828;
                    _2967 = _2968;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
        }
        uvec4 _2831 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2832 = _2831.z;
        uint _2834 = (_2832 >> 8u) & 15u;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        if (((4294967295u << _2834) & _2737) == 0u)
        {
            _2929 = _2817;
            _2931 = _2819;
            _2933 = _2821;
            _2935 = _2823;
            _2937 = _2825;
            _2939 = _2827;
        }
        else
        {
            float _2954 = inversesqrt(dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816)));
            float _2955 = _2954 * _1814;
            float _2956 = _2954 * _1815;
            float _2957 = _2954 * _1816;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2834 < ((_2832 >> 12u) & 15u))
            {
                float _2930;
                float _2932;
                float _2934;
                float _2936;
                float _2938;
                float _2940;
                float _3068 = _2817;
                float _3069 = _2819;
                float _3070 = _2821;
                float _3071 = _2823;
                float _3072 = _2825;
                float _3073 = _2827;
                uint _3074 = _2834;
                uint _3083;
                bool _3084;
                for (;;)
                {
                    _3083 = texelFetch(g_lightClassification, int((((_2731 << 5u) + (_2717 << 9u)) + (_3074 << 2u)) >> 2u)).x;
                    _3084 = _3083 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3084)
                    {
                        frontier_phi_72_pred = _3073;
                        frontier_phi_72_pred_1 = _3072;
                        frontier_phi_72_pred_2 = _3071;
                        frontier_phi_72_pred_3 = _3070;
                        frontier_phi_72_pred_4 = _3069;
                        frontier_phi_72_pred_5 = _3068;
                    }
                    else
                    {
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3280 = _3068;
                        float _3281 = _3069;
                        float _3282 = _3070;
                        float _3283 = _3071;
                        float _3284 = _3072;
                        float _3285 = _3073;
                        uint _3286 = _3083;
                        uint _3287;
                        vec4 _3312;
                        float _3313;
                        vec4 _3328;
                        vec3 _3340;
                        vec4 _3356;
                        vec4 _3372;
                        float _3418;
                        bool _3419;
                        for (;;)
                        {
                            uint _3297 = ((_3074 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3286));
                            _3287 = (_3286 + 4294967295u) & _3286;
                            uint _3299 = _3297 * 40u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            _3313 = _3312.w;
                            uint _3315 = (_3297 * 40u) + 4u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3330 = (_3297 * 40u) + 8u;
                            _3340 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x));
                            uint _3343 = (_3297 * 40u) + 16u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3359 = (_3297 * 40u) + 20u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3374 = (_3297 * 40u) + 24u;
                            vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3393 = (_3297 * 40u) + 28u;
                            vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            _3418 = fma(_1816, _3406.z, fma(_1815, _3406.y, _3406.x * _1814)) + _3406.w;
                            _3419 = !((fma(_1816, _3387.z, fma(_1815, _3387.y, _3387.x * _1814)) + _3387.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3419)
                            {
                                float _3446 = _3312.x - _1814;
                                float _3447 = _3312.y - _1815;
                                float _3448 = _3312.z - _1816;
                                float _3449 = dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448));
                                float _3452 = inversesqrt(_3449);
                                float _3453 = _3452 * _3446;
                                float _3454 = _3452 * _3447;
                                float _3455 = _3452 * _3448;
                                float _3459 = 1.0 - (_3449 / (_3313 * _3313));
                                float _4621 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3464 = sqrt(_3449) * _3328.w;
                                float _3466 = 1.39999997615814208984375 / (_3464 + 1.39999997615814208984375);
                                float _3467 = _3466 * _3466;
                                float _3470 = ((1.0 - _3467) * dot(vec3(_3453, _3454, _3455), vec3(_698, _701, _704))) + _3467;
                                float _3473 = _3464 * _3464;
                                float _3477 = (fma(_1816, _3356.z, fma(_1815, _3356.y, _3356.x * _1814)) + _3356.w) / _3418;
                                float _3478 = (fma(_1816, _3372.z, fma(_1815, _3372.y, _3372.x * _1814)) + _3372.w) / _3418;
                                float _3482 = 1.0 - dot(vec2(_3477, _3478), vec2(_3477, _3478));
                                float _4637 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3483 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3484 = _3483 * (((isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0))) * _3460) / ((_3473 * 0.699999988079071044921875) + 1.0));
                                float _3496 = exp2(log2(1.0 / ((_3473 * 3.5) + 5.0)) * 0.25);
                                float _3497 = 1.0 - _758;
                                float _3504 = sqrt(1.0 - ((1.0 - (_3497 * _3497)) * (1.0 - (_3496 * _3496))));
                                float _3505 = _3504 * _3504;
                                float _3506 = _3505 * _3505;
                                float _3507 = _3453 - _2955;
                                float _3508 = _3454 - _2956;
                                float _3509 = _3455 - _2957;
                                float _3513 = inversesqrt(dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509)));
                                float _3517 = dot(vec3(_698, _701, _704), vec3((-0.0) - _2955, (-0.0) - _2956, (-0.0) - _2957));
                                float _4648 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3520 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3521 = dot(vec3(_698, _701, _704), vec3(_3513 * _3507, _3513 * _3508, _3513 * _3509));
                                float _4659 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3524 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3528 = ((_3524 * _3524) * (_3506 + (-1.0))) + 1.0;
                                float _3529 = _3466 * _3505;
                                float _3530 = _3529 * _3529;
                                float _3536 = ((1.0 - _3530) * dot(vec3(_698, _701, _704), vec3(_3453, _3454, _3455))) + _3530;
                                float _4670 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3538 = 1.0 - _3505;
                                float _3548 = (0.5 / (((_3537 * ((_3520 * _3538) + _3505)) + 9.9999999392252902907785028219223e-09) + (((_3537 * _3538) + _3505) * _3520))) * _3537;
                                float _4681 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3558 = (_3483 * _3460) * (((_3506 * 3.1415927410125732421875) * (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) / ((_3528 * _3528) * ((_3473 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3484 * _3328.y;
                                frontier_phi_78_pred_1 = _3484 * _3328.x;
                                frontier_phi_78_pred_2 = _3558 * _3340.z;
                                frontier_phi_78_pred_3 = _3558 * _3340.y;
                                frontier_phi_78_pred_4 = _3558 * _3340.x;
                                frontier_phi_78_pred_5 = _3484 * _3328.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3566 = frontier_phi_78_pred;
                            _3565 = frontier_phi_78_pred_1;
                            _3564 = frontier_phi_78_pred_2;
                            _3563 = frontier_phi_78_pred_3;
                            _3562 = frontier_phi_78_pred_4;
                            _3567 = frontier_phi_78_pred_5;
                            _3270 = _3565 + _3283;
                            _3271 = _3566 + _3284;
                            _3272 = _3567 + _3285;
                            _3267 = _3562 + _3280;
                            _3268 = _3563 + _3281;
                            _3269 = _3564 + _3282;
                            if (_3287 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3287;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3272;
                        frontier_phi_72_pred_1 = _3271;
                        frontier_phi_72_pred_2 = _3270;
                        frontier_phi_72_pred_3 = _3269;
                        frontier_phi_72_pred_4 = _3268;
                        frontier_phi_72_pred_5 = _3267;
                    }
                    _2940 = frontier_phi_72_pred;
                    _2938 = frontier_phi_72_pred_1;
                    _2936 = frontier_phi_72_pred_2;
                    _2934 = frontier_phi_72_pred_3;
                    _2932 = frontier_phi_72_pred_4;
                    _2930 = frontier_phi_72_pred_5;
                    uint _3075 = _3074 + 1u;
                    if (_3075 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3068 = _2930;
                        _3069 = _2932;
                        _3070 = _2934;
                        _3071 = _2936;
                        _3072 = _2938;
                        _3073 = _2940;
                        _3074 = _3075;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2940;
                frontier_phi_60_61_ladder_1 = _2938;
                frontier_phi_60_61_ladder_2 = _2934;
                frontier_phi_60_61_ladder_3 = _2932;
                frontier_phi_60_61_ladder_4 = _2930;
                frontier_phi_60_61_ladder_5 = _2936;
            }
            else
            {
                frontier_phi_60_61_ladder = _2827;
                frontier_phi_60_61_ladder_1 = _2825;
                frontier_phi_60_61_ladder_2 = _2821;
                frontier_phi_60_61_ladder_3 = _2819;
                frontier_phi_60_61_ladder_4 = _2817;
                frontier_phi_60_61_ladder_5 = _2823;
            }
            _2929 = frontier_phi_60_61_ladder_4;
            _2931 = frontier_phi_60_61_ladder_3;
            _2933 = frontier_phi_60_61_ladder_2;
            _2935 = frontier_phi_60_61_ladder_5;
            _2937 = frontier_phi_60_61_ladder_1;
            _2939 = frontier_phi_60_61_ladder;
        }
        float _2944 = isnan(1.0) ? _742 : (isnan(_742) ? 1.0 : min(_742, 1.0));
        _2750 = (_2944 * _2935) + _2281;
        _2752 = (_2944 * _2937) + _2283;
        _2754 = (_2944 * _2939) + _2285;
        _2756 = ((_2929 * 0.039999999105930328369140625) * _2944) + _2604;
        _2758 = ((_2931 * 0.039999999105930328369140625) * _2944) + _2606;
        _2760 = ((_2933 * 0.039999999105930328369140625) * _2944) + _2608;
    }
    else
    {
        _2750 = _2281;
        _2752 = _2283;
        _2754 = _2285;
        _2756 = _2604;
        _2758 = _2606;
        _2760 = _2608;
    }
    float _4697 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4708 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4719 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    uint _2780 = _237 + 6u;
    float _2788 = _676 / cbSceneParam._m0[86u].x;
    float _2789 = _677 / cbSceneParam._m0[86u].y;
    vec4 _2803 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, (log2((isnan(cbSceneParam._m0[77u].w) ? _611 : (isnan(_611) ? cbSceneParam._m0[77u].w : min(_611, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2805 = _2803.x;
    float _2806 = _2803.y;
    float _2807 = _2803.z;
    float _2808 = _2803.w;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    if (_611 > cbSceneParam._m0[78u].w)
    {
        float _2842 = isnan(_611) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _611 : min(cbSceneParam._m0[80u].w, _611));
        float _2843 = _2842 / _611;
        float _2854 = _2843 * _661;
        float _2855 = _662 * _2843;
        float _2856 = (-0.0) - _2855;
        float _2857 = _2843 * _663;
        float _2859 = (cbSceneParam._m0[77u].w * _2856) / _2842;
        float _2860 = _2859 + cbSceneParam._m0[79u].w;
        float _2861 = cbSceneParam._m0[79u].w - _2855;
        float _2867 = sqrt(((_2854 * _2854) + (_2855 * _2855)) + (_2857 * _2857));
        float _2870 = (1.0 - (cbSceneParam._m0[77u].w / _2842)) * _2867;
        float _2875 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2877 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3030;
        if (abs((_2856 - _2859) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3030 = ((((_2860 > 0.0) ? exp2(_2875 * _2860) : (2.0 - exp2(_2877 * _2860))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2870;
        }
        else
        {
            float _2990 = 1.0 / cbSceneParam._m0[80u].x;
            float _2991 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : max(_2860, _2861));
            float _2992 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : min(_2860, _2861));
            float _3001 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : min(_2991, 0.0));
            float _3002 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : min(_2992, 0.0));
            _3030 = ((abs(_2867 / _2856) * cbSceneParam._m0[80u].y) * ((((_3001 - _3002) * 2.0) - ((exp2(_2875 * (isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0)))) - exp2(_2875 * (isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0))))) * _2990)) - ((exp2(_2877 * _3001) - exp2(_2877 * _3002)) * _2990))) + (_2870 * cbSceneParam._m0[80u].z);
        }
        vec4 _3032 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, 1.0), 0.0);
        float _3041 = exp2((_3030 * (-1.44269502162933349609375)) * (1.0 - _3032.w));
        float _3042 = log2(_3041);
        float _3058 = log2(_2808);
        _2879 = (exp2(_3058 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].x)) * _3032.x) / cbSceneParam._m0[78u].x)) + _2805;
        _2881 = (exp2(_3058 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].y)) * _3032.y) / cbSceneParam._m0[78u].y)) + _2806;
        _2883 = (exp2(_3058 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].z)) * _3032.z) / cbSceneParam._m0[78u].z)) + _2807;
        _2885 = _3041 * _2808;
    }
    else
    {
        _2879 = _2805;
        _2881 = _2806;
        _2883 = _2807;
        _2885 = _2808;
    }
    float _2897 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2898 = _2897 == 3.0;
    float _2899 = log2(_2885);
    float _2906 = exp2(_2899 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2750 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _742))) + ((_2756 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1547)) * cbPerFrame._m0[3u].x));
    float _2907 = exp2(_2899 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2752 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _742))) + ((_2758 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1547)) * cbPerFrame._m0[3u].x));
    float _2908 = exp2(_2899 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2754 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _742))) + ((_2760 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1547)) * cbPerFrame._m0[3u].x));
    float _2917 = (_2897 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2917 * (_2898 ? _2906 : (_2906 + (cbSceneParam._m0[72u].w * _2879)));
    SV_Target.y = _2917 * (_2898 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2881)));
    SV_Target.z = _2917 * (_2898 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2883)));
    SV_Target.w = cbInstanceData._m0[_2780].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2780].w;
}


