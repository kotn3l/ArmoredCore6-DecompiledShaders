#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1308;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3898 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3909 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3920 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _397 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _399 = _397.x;
    float _409 = dot(vec4(_399, _397.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _426 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_399 - _409) * cbMtdParam._m0[24u].x) + _409) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3931 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _434 = (_427 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _435 = (_427 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _436 = (_427 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    vec4 _453 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _296) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _297) + cbTextureTilingScale._m0[3u].w));
    vec4 _473 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _475 = _473.x;
    float _485 = dot(vec4(_475, _473.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _499 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_475 - _485) * cbMtdParam._m0[24u].x) + _485) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3942 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _500 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _507 = (_500 * ((_453.x * cbMtdParam._m0[13u].x) - _434)) + _434;
    float _508 = (_500 * ((_453.y * cbMtdParam._m0[13u].y) - _435)) + _435;
    float _509 = (_500 * ((_453.z * cbMtdParam._m0[13u].z) - _436)) + _436;
    float _513 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _507;
    float _516 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _508;
    float _519 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _509;
    float _526 = ((_507 - _513) * (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) + _513;
    float _527 = ((_508 - _516) * (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) + _516;
    float _528 = ((_509 - _519) * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) + _519;
    vec4 _540 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _563 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _580 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _582 = _580.x;
    float _583 = _580.y;
    float _584 = _580.z;
    float _591 = ((_563.x - _582) * _427) + _582;
    float _592 = ((_563.y - _583) * _427) + _583;
    float _593 = ((_563.z - _584) * _427) + _584;
    vec4 _605 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _296) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _297) + cbTextureTilingScale._m0[2u].w));
    float _618 = ((_605.z - _593) * _500) + _593;
    float _621 = ((((_605.x - _591) * _500) + _591) * 2.0) + (-1.0);
    float _622 = ((((_605.y - _592) * _500) + _592) * 2.0) + (-1.0);
    float _623 = dot(vec2(_621, _622), vec2(_621, _622));
    float _3953 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _628 = sqrt(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))));
    vec4 _648 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _660 = (_621 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_540.x * 2.0) + (-1.0)))) + (((_648.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _661 = (_622 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_540.y * 2.0) + (-1.0)))) + (((_648.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _673 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _675 = _673.x;
    float _676 = 1.0 - _675;
    float _702 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_675 - _676) * cbMtdParam._m0[24u].w) + _676) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3964 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _703 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _711 = ((((cbMtdParam._m0[10u].x - _526) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _703) + _526;
    float _712 = ((((cbMtdParam._m0[10u].y - _527) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _703) + _527;
    float _713 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _528)) * _703) + _528;
    float _718 = (((_540.z - _618) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _618;
    float _722 = ((_648.z - _718) * cbMtdParam._m0[19u].w) + _718;
    float _726 = ((cbMtdParam._m0[23u].y - _722) * _703) + _722;
    vec4 _745 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _751 = (_745.x * 2.0) + (-1.0);
    float _752 = (_745.y * 2.0) + (-1.0);
    float _753 = dot(vec2(_751, _752), vec2(_751, _752));
    float _3975 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _769 = (_703 * (((cbMtdParam._m0[22u].z * _660) - _660) + _751)) + _660;
    float _770 = (_703 * (((cbMtdParam._m0[22u].z * _661) - _661) + _752)) + _661;
    float _771 = (_703 * (sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) - _628)) + _628;
    float _773 = cbMtdParam._m0[22u].x + _648.w;
    float _776 = fma(_771, _245 * NORMAL.x, fma(_770, _252 * TANGENT.x, (_238 * _230) * _769));
    float _779 = fma(_771, _245 * NORMAL.y, fma(_770, _252 * TANGENT.y, (_238 * _231) * _769));
    float _782 = fma(_771, _245 * NORMAL.z, fma(_770, _252 * TANGENT.z, (_238 * _232) * _769));
    float _786 = inversesqrt(dot(vec3(_776, _779, _782), vec3(_776, _779, _782)));
    float _787 = _786 * _776;
    float _788 = _786 * _779;
    float _789 = _786 * _782;
    float _3986 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _790 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4008 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4019 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4030 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _808 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _859 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _849);
    float _860 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _849);
    float _861 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _849);
    float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
    float _866 = _859 * _865;
    float _867 = _860 * _865;
    float _868 = _861 * _865;
    float _874 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _875 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _893 = fma(_789, cbSceneParam._m0[5u].z, fma(_788, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _787));
    float _896 = fma(_789, cbSceneParam._m0[6u].z, fma(_788, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _787));
    float _899 = fma(_789, cbSceneParam._m0[7u].z, fma(_788, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _787));
    uint _913 = (_277 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _919 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_913].x;
    float _920 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_913].y;
    float _921 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_913].z;
    float _4041 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _4052 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    vec4 _933 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _874, cbSceneParam._m0[86u].y * _875));
    float _937 = ((isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * TEXCOORD_5.w) * _933.x;
    float _938 = dot(vec3(_787, _788, _789), vec3(_866, _867, _868));
    float _941 = _938 * 2.0;
    float _945 = (_941 * _787) - _866;
    float _946 = (_941 * _788) - _867;
    float _947 = (_941 * _789) - _868;
    float _951 = abs(dot(vec3(_866, _867, _868), vec3(_787, _788, _789)));
    float _4074 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _953 = sqrt(_790);
    float _966 = exp2((_953 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_953 * 3.0));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1307;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1032 = fma(_1006, cbModelParam._m0[26u].z, fma(_1002, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _998));
        float _1036 = fma(_1006, cbModelParam._m0[27u].z, fma(_1002, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _998));
        float _1040 = fma(_1006, cbModelParam._m0[28u].z, fma(_1002, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _998));
        float _1065 = _998 + _787;
        float _1066 = _1002 + _788;
        float _1067 = _1006 + _789;
        float _1077 = fma(_1067, cbModelParam._m0[26u].z, fma(_1066, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1065)) - _1032;
        float _1078 = fma(_1067, cbModelParam._m0[27u].z, fma(_1066, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1065)) - _1036;
        float _1079 = fma(_1067, cbModelParam._m0[28u].z, fma(_1066, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1065)) - _1040;
        float _1083 = inversesqrt(dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079)));
        float _1096 = ((_1083 * _1077) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1032 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1083 * _1078) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1036 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1083 * _1079) / cbModelParam._m0[34u].z) + ((((((_1040 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        float _1135 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1101.x + (-0.5));
        float _1137 = _1135 * (_1101.y + (-0.5));
        float _1138 = _1135 * (_1101.z + (-0.5));
        float _1145 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1108.x + (-0.5));
        float _1147 = _1145 * (_1108.y + (-0.5));
        float _1148 = _1145 * (_1108.z + (-0.5));
        float _1155 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1115.x + (-0.5));
        float _1157 = _1155 * (_1115.y + (-0.5));
        float _1158 = _1155 * (_1115.z + (-0.5));
        float _1165 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1122.x + (-0.5));
        float _1167 = _1165 * (_1122.y + (-0.5));
        float _1168 = _1165 * (_1122.z + (-0.5));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = _1136 * 0.5;
        float _1173 = _1146 * 0.5;
        float _1174 = _1156 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1189 = (dot(vec3(_787, _788, _789), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1199 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _4122 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1201 + 1.0))) + _1206) * _1169;
        float _1216 = _1137 * 0.5;
        float _1217 = _1147 * 0.5;
        float _1218 = _1157 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_787, _788, _789), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _4155 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1243 + 1.0))) + _1248) * _1170;
        float _1258 = _1138 * 0.5;
        float _1259 = _1148 * 0.5;
        float _1260 = _1158 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_787, _788, _789), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _4188 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1285 + 1.0))) + _1290) * _1171;
        _1307 = _1138;
        _1309 = _1137;
        _1310 = _1136;
        _1311 = _1148;
        _1312 = _1147;
        _1313 = _1146;
        _1314 = _1158;
        _1315 = _1157;
        _1316 = _1156;
        _1317 = _1171;
        _1318 = _1170;
        _1319 = _1169;
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1321 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1322 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
    }
    else
    {
        _1307 = _1308;
        _1309 = _1308;
        _1310 = _1308;
        _1311 = _1308;
        _1312 = _1308;
        _1313 = _1308;
        _1314 = _1308;
        _1315 = _1308;
        _1316 = _1308;
        _1317 = _1308;
        _1318 = _1308;
        _1319 = _1308;
        _1320 = 0.0;
        _1321 = 0.0;
        _1322 = 0.0;
    }
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1346 = fma(_1006, cbModelParam._m0[30u].z, fma(_1002, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _998));
        float _1350 = fma(_1006, cbModelParam._m0[31u].z, fma(_1002, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _998));
        float _1354 = fma(_1006, cbModelParam._m0[32u].z, fma(_1002, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _998));
        float _1377 = _998 + _787;
        float _1378 = _1002 + _788;
        float _1379 = _1006 + _789;
        float _1389 = fma(_1379, cbModelParam._m0[30u].z, fma(_1378, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1377)) - _1346;
        float _1390 = fma(_1379, cbModelParam._m0[31u].z, fma(_1378, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1377)) - _1350;
        float _1391 = fma(_1379, cbModelParam._m0[32u].z, fma(_1378, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1377)) - _1354;
        float _1395 = inversesqrt(dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391)));
        float _1408 = ((_1395 * _1389) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1346 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1409 = ((_1395 * _1390) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1350 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1410 = ((_1395 * _1391) / cbModelParam._m0[35u].z) + ((((((_1354 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        float _1445 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1412.x + (-0.5));
        float _1447 = _1445 * (_1412.y + (-0.5));
        float _1448 = _1445 * (_1412.z + (-0.5));
        float _1455 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1419.x + (-0.5));
        float _1457 = _1455 * (_1419.y + (-0.5));
        float _1458 = _1455 * (_1419.z + (-0.5));
        float _1465 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1426.x + (-0.5));
        float _1467 = _1465 * (_1426.y + (-0.5));
        float _1468 = _1465 * (_1426.z + (-0.5));
        float _1475 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1433.x + (-0.5));
        float _1477 = _1475 * (_1433.y + (-0.5));
        float _1478 = _1475 * (_1433.z + (-0.5));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = _1446 * 0.5;
        float _1483 = _1456 * 0.5;
        float _1484 = _1466 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_787, _788, _789), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4251 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1509 + 1.0))) + _1514) * _1479;
        float _1524 = _1447 * 0.5;
        float _1525 = _1457 * 0.5;
        float _1526 = _1467 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_787, _788, _789), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4284 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1551 + 1.0))) + _1556) * _1480;
        float _1566 = _1448 * 0.5;
        float _1567 = _1458 * 0.5;
        float _1568 = _1468 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_787, _788, _789), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4317 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1593 + 1.0))) + _1598) * _1481;
        _1615 = _1448;
        _1616 = _1447;
        _1617 = _1446;
        _1618 = _1458;
        _1619 = _1457;
        _1620 = _1456;
        _1621 = _1468;
        _1622 = _1467;
        _1623 = _1466;
        _1624 = _1481;
        _1625 = _1480;
        _1626 = _1479;
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
    }
    else
    {
        _1615 = _1308;
        _1616 = _1308;
        _1617 = _1308;
        _1618 = _1308;
        _1619 = _1308;
        _1620 = _1308;
        _1621 = _1308;
        _1622 = _1308;
        _1623 = _1308;
        _1624 = _1308;
        _1625 = _1308;
        _1626 = _1308;
        _1627 = 0.0;
        _1628 = 0.0;
        _1629 = 0.0;
    }
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1320)) + _1320;
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1321)) + _1321;
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1322)) + _1322;
    float _1662 = fma(_1641, cbSceneParam._m0[89u].z, fma(_1640, cbSceneParam._m0[89u].y, _1639 * cbSceneParam._m0[89u].x));
    float _1665 = fma(_1641, cbSceneParam._m0[90u].z, fma(_1640, cbSceneParam._m0[90u].y, _1639 * cbSceneParam._m0[90u].x));
    float _1668 = fma(_1641, cbSceneParam._m0[91u].z, fma(_1640, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1639));
    float _1683 = _945 * 0.5;
    float _1684 = _946 * 0.5;
    float _1685 = _947 * 0.5;
    float _1686 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1689 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1692 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1726;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1699 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1307, _1311, _1314, _1317));
        float _1703 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1309, _1312, _1315, _1318));
        float _1707 = dot(vec4(_1683, _1684, _1685, 1.0), vec4(_1310, _1313, _1316, _1319));
        float _1714 = dot(vec4(cbModelParam._m0[39u]), vec4(_1683, _1684, _1685, 1.0));
        _1726 = dot(vec3(isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1714) ? 0.0 : (isnan(0.0) ? _1714 : max(0.0, _1714))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1726 = 1.0;
    }
    float _1737;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1728 = dot(vec4(cbModelParam._m0[40u]), vec4(_1683, _1684, _1685, 1.0));
        _1737 = dot(vec3(isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1728) ? 0.0 : (isnan(0.0) ? _1728 : max(0.0, _1728))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1737 = 1.0;
    }
    float _1741 = (_1737 * cbModelParam._m0[1u].x) + (_1726 * (1.0 - cbModelParam._m0[1u].x));
    float _1751 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _790);
    float _1752 = isnan(_1751) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1751 : min(cbModelParam._m0[25u].z, _1751));
    float _1834;
    float _1836;
    float _1838;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1801 = fma(_1006, cbModelParam._m0[13u].z, fma(_1002, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _998)) + cbModelParam._m0[13u].w;
        float _1805 = fma(_1006, cbModelParam._m0[14u].z, fma(_1002, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _998)) + cbModelParam._m0[14u].w;
        float _1809 = fma(_1006, cbModelParam._m0[15u].z, fma(_1002, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _998)) + cbModelParam._m0[15u].w;
        float _1812 = fma(_947, cbModelParam._m0[13u].z, fma(_946, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945));
        float _1815 = fma(_947, cbModelParam._m0[14u].z, fma(_946, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945));
        float _1818 = fma(_947, cbModelParam._m0[15u].z, fma(_946, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945));
        float _1846;
        if (_1812 > 0.0)
        {
            _1846 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1846 = frontier_phi_14_12_ladder;
        }
        float _2017;
        if (_1815 > 0.0)
        {
            _2017 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2017 = frontier_phi_23_19_ladder;
        }
        float _2312;
        if (_1818 > 0.0)
        {
            _2312 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2312 = frontier_phi_35_30_ladder;
        }
        float _2314 = isnan(_2017) ? _1846 : (isnan(_1846) ? _2017 : min(_1846, _2017));
        float _2315 = isnan(_2312) ? _2314 : (isnan(_2314) ? _2312 : min(_2314, _2312));
        float _2319 = (_2315 * _1812) + _1801;
        float _2320 = (_2315 * _1815) + _1805;
        float _2321 = (_2315 * _1818) + _1809;
        float _2322 = _2315 * 9.9999997473787516355514526367188e-05;
        float _2324 = (-1.0) - _2322;
        float _2326 = _2322 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2321 > _2326) || ((_2321 < _2324) || ((_2320 > _2326) || ((_2320 < _2324) || ((_2319 < _2324) || (_2319 > _2326))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2466 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2321, cbModelParam._m0[9u].z, fma(_2320, cbModelParam._m0[9u].y, _2319 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2321, cbModelParam._m0[10u].z, fma(_2320, cbModelParam._m0[10u].y, _2319 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2321, cbModelParam._m0[11u].z, fma(_2320, cbModelParam._m0[11u].y, _2319 * cbModelParam._m0[11u].x))), _1752);
            frontier_phi_13_35_ladder = _2466.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2466.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2466.x * cbModelParam._m0[1u].y;
        }
        _1834 = frontier_phi_13_35_ladder_2;
        _1836 = frontier_phi_13_35_ladder_1;
        _1838 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1822 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_945, _946, _947), _1752);
        _1834 = _1822.x * cbModelParam._m0[1u].y;
        _1836 = _1822.y * cbModelParam._m0[1u].y;
        _1838 = _1822.z * cbModelParam._m0[1u].y;
    }
    float _1842 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _790);
    float _1843 = isnan(_1842) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1842 : min(cbModelParam._m0[25u].w, _1842));
    float _1934;
    float _1936;
    float _1938;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1898 = fma(_1006, cbModelParam._m0[21u].z, fma(_1002, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _998)) + cbModelParam._m0[21u].w;
        float _1902 = fma(_1006, cbModelParam._m0[22u].z, fma(_1002, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _998)) + cbModelParam._m0[22u].w;
        float _1906 = fma(_1006, cbModelParam._m0[23u].z, fma(_1002, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _998)) + cbModelParam._m0[23u].w;
        float _1909 = fma(_947, cbModelParam._m0[21u].z, fma(_946, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945));
        float _1912 = fma(_947, cbModelParam._m0[22u].z, fma(_946, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945));
        float _1915 = fma(_947, cbModelParam._m0[23u].z, fma(_946, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945));
        float _2022;
        if (_1909 > 0.0)
        {
            _2022 = abs((1.0 - _1898) / _1909);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1898 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2022 = frontier_phi_25_21_ladder;
        }
        float _2339;
        if (_1912 > 0.0)
        {
            _2339 = abs((1.0 - _1902) / _1912);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1902 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2339 = frontier_phi_37_32_ladder;
        }
        float _2666;
        if (_1915 > 0.0)
        {
            _2666 = abs((1.0 - _1906) / _1915);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1906 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2666 = frontier_phi_47_44_ladder;
        }
        float _2668 = isnan(_2339) ? _2022 : (isnan(_2022) ? _2339 : min(_2022, _2339));
        float _2669 = isnan(_2666) ? _2668 : (isnan(_2668) ? _2666 : min(_2668, _2666));
        float _2673 = (_2669 * _1909) + _1898;
        float _2674 = (_2669 * _1912) + _1902;
        float _2675 = (_2669 * _1915) + _1906;
        float _2676 = _2669 * 9.9999997473787516355514526367188e-05;
        float _2677 = (-1.0) - _2676;
        float _2679 = _2676 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2675 > _2679) || ((_2675 < _2677) || ((_2674 > _2679) || ((_2674 < _2677) || ((_2673 < _2677) || (_2673 > _2679))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2793 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2675, cbModelParam._m0[17u].z, fma(_2674, cbModelParam._m0[17u].y, _2673 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2675, cbModelParam._m0[18u].z, fma(_2674, cbModelParam._m0[18u].y, _2673 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2675, cbModelParam._m0[19u].z, fma(_2674, cbModelParam._m0[19u].y, _2673 * cbModelParam._m0[19u].x))), _1843);
            frontier_phi_22_47_ladder = _2793.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2793.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2793.x * cbModelParam._m0[1u].z;
        }
        _1934 = frontier_phi_22_47_ladder_2;
        _1936 = frontier_phi_22_47_ladder_1;
        _1938 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1918 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_945, _946, _947), _1843);
        _1934 = _1918.x * cbModelParam._m0[1u].z;
        _1936 = _1918.y * cbModelParam._m0[1u].z;
        _1938 = _1918.z * cbModelParam._m0[1u].z;
    }
    float _1950 = ((((1.0 - _966) * ((_953 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_966 * _953)) * _937;
    float _1951 = _1950 * ((cbModelParam._m0[1u].w * (_1934 - _1834)) + _1834);
    float _1952 = _1950 * ((cbModelParam._m0[1u].w * (_1936 - _1836)) + _1836);
    float _1953 = _1950 * ((cbModelParam._m0[1u].w * (_1938 - _1838)) + _1838);
    float _1956 = fma(_1953, cbSceneParam._m0[89u].z, fma(_1952, cbSceneParam._m0[89u].y, _1951 * cbSceneParam._m0[89u].x));
    float _1959 = fma(_1953, cbSceneParam._m0[90u].z, fma(_1952, cbSceneParam._m0[90u].y, _1951 * cbSceneParam._m0[90u].x));
    float _1962 = fma(_1953, cbSceneParam._m0[91u].z, fma(_1952, cbSceneParam._m0[91u].y, _1951 * cbSceneParam._m0[91u].x));
    float _1996 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2000 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2004 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2008 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2009 = _1996 / _2008;
    float _2010 = _2000 / _2008;
    float _2011 = _2004 / _2008;
    float _2158;
    float _2159;
    float _2160;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2038 = ((uint(_2011 > cbSceneParam._m0[59u].y) + uint(_2011 > cbSceneParam._m0[59u].x)) + uint(_2011 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2039 = _2038 + 43u;
        uint _2047 = _2038 + 44u;
        uint _2055 = _2038 + 45u;
        uint _2063 = _2038 + 46u;
        float _2074 = fma(_2008, cbSceneParam._m0[_2039].w, fma(_2004, cbSceneParam._m0[_2039].z, fma(_2000, cbSceneParam._m0[_2039].y, _1996 * cbSceneParam._m0[_2039].x)));
        float _2078 = fma(_2008, cbSceneParam._m0[_2047].w, fma(_2004, cbSceneParam._m0[_2047].z, fma(_2000, cbSceneParam._m0[_2047].y, _1996 * cbSceneParam._m0[_2047].x)));
        float _2086 = fma(_2008, cbSceneParam._m0[_2063].w, fma(_2004, cbSceneParam._m0[_2063].z, fma(_2000, cbSceneParam._m0[_2063].y, _1996 * cbSceneParam._m0[_2063].x)));
        float _2091 = cbSceneParam._m0[33u].z * _2086;
        float _2093 = cbSceneParam._m0[33u].w * _2086;
        float _2096 = fma(_2008, cbSceneParam._m0[_2055].w, fma(_2004, cbSceneParam._m0[_2055].z, fma(_2000, cbSceneParam._m0[_2055].y, _1996 * cbSceneParam._m0[_2055].x))) / _2086;
        float _2144 = (cbSceneParam._m0[33u].x - sqrt(((_2010 * _2010) + (_2009 * _2009)) + (_2011 * _2011))) * cbSceneParam._m0[33u].y;
        float _4443 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2151 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2091 + _2074) / _2086, (_2093 + _2078) / _2086), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 + _2074) / _2086, (_2078 - _2091) / _2086), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2074 - _2091) / _2086, (_2078 - _2093) / _2086), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2074 - _2093) / _2086, (_2091 + _2078) / _2086), _2096), 0.0)).x), vec4(0.25)));
        _2158 = 1.0 - (_2151 * cbSceneParam._m0[34u].x);
        _2159 = 1.0 - (_2151 * cbSceneParam._m0[34u].y);
        _2160 = 1.0 - (_2151 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2158 = 1.0;
        _2159 = 1.0;
        _2160 = 1.0;
    }
    float _2224;
    float _2226;
    float _2228;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2212 = fma(_2008, cbSceneParam._m0[63u].w, fma(_2004, cbSceneParam._m0[63u].z, fma(_2000, cbSceneParam._m0[63u].y, _1996 * cbSceneParam._m0[63u].x)));
        float _2213 = fma(_2008, cbSceneParam._m0[60u].w, fma(_2004, cbSceneParam._m0[60u].z, fma(_2000, cbSceneParam._m0[60u].y, _1996 * cbSceneParam._m0[60u].x))) / _2212;
        float _2214 = fma(_2008, cbSceneParam._m0[61u].w, fma(_2004, cbSceneParam._m0[61u].z, fma(_2000, cbSceneParam._m0[61u].y, _1996 * cbSceneParam._m0[61u].x))) / _2212;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2213 >= cbSceneParam._m0[64u].x) && (_2214 >= cbSceneParam._m0[64u].y)) && (_2213 <= cbSceneParam._m0[64u].z)) && (_2214 <= cbSceneParam._m0[64u].w))
        {
            float _2352 = fma(_2008, cbSceneParam._m0[62u].w, fma(_2004, cbSceneParam._m0[62u].z, fma(_2000, cbSceneParam._m0[62u].y, _1996 * cbSceneParam._m0[62u].x))) / _2212;
            float _2356 = isnan(cbSceneParam._m0[41u].w) ? _2352 : (isnan(_2352) ? cbSceneParam._m0[41u].w : max(_2352, cbSceneParam._m0[41u].w));
            float _2399 = (cbSceneParam._m0[33u].x - sqrt(((_2010 * _2010) + (_2009 * _2009)) + (_2011 * _2011))) * cbSceneParam._m0[33u].y;
            float _4459 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
            float _2406 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2213, cbSceneParam._m0[33u].w + _2214), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2213, _2214 - cbSceneParam._m0[33u].z), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2213 - cbSceneParam._m0[33u].z, _2214 - cbSceneParam._m0[33u].w), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2213 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2214), _2356), 0.0)).x), vec4(0.25)));
            float _2410 = 1.0 - (_2406 * cbSceneParam._m0[34u].x);
            float _2411 = 1.0 - (_2406 * cbSceneParam._m0[34u].y);
            float _2412 = 1.0 - (_2406 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2412) ? _2160 : (isnan(_2160) ? _2412 : min(_2160, _2412));
            frontier_phi_34_33_ladder_1 = isnan(_2411) ? _2159 : (isnan(_2159) ? _2411 : min(_2159, _2411));
            frontier_phi_34_33_ladder_2 = isnan(_2410) ? _2158 : (isnan(_2158) ? _2410 : min(_2158, _2410));
        }
        else
        {
            frontier_phi_34_33_ladder = _2160;
            frontier_phi_34_33_ladder_1 = _2159;
            frontier_phi_34_33_ladder_2 = _2158;
        }
        _2224 = frontier_phi_34_33_ladder_2;
        _2226 = frontier_phi_34_33_ladder_1;
        _2228 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2224 = _2158;
        _2226 = _2159;
        _2228 = _2160;
    }
    uvec4 _2233 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2235 = _2233.x * 14u;
    uint _2236 = _2235 + 13u;
    float _2243 = _937 + (-1.0);
    float _2248 = (cbLight._m0[_2236].x * _2243) + 1.0;
    float _2249 = (cbLight._m0[_2236].y * _2243) + 1.0;
    float _2250 = (cbLight._m0[_2236].z * _2243) + 1.0;
    float _2251 = (cbLight._m0[_2236].w * _2243) + 1.0;
    uint _2252 = _2235 + 5u;
    float _2258 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
    uint _2262 = _2235 + 4u;
    float _2271 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
    uint _2275 = _2235 | 1u;
    float _2286 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_787, _788, _789));
    float _2289 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_787, _788, _789));
    float _4495 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _4506 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2294 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 0.3183098733425140380859375;
    float _2296 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * 0.3183098733425140380859375;
    float _2303 = ((cbLight._m0[_2252].x * _2258) * _2296) + (((cbLight._m0[_2262].x * _2224) * _2271) * _2294);
    float _2304 = ((_2258 * cbLight._m0[_2252].y) * _2296) + (((cbLight._m0[_2262].y * _2226) * _2271) * _2294);
    float _2305 = ((_2258 * cbLight._m0[_2252].z) * _2296) + (((cbLight._m0[_2262].z * _2228) * _2271) * _2294);
    uvec4 _2309 = floatBitsToUint(cbLight._m0[_2235 + 12u]);
    bool _2311 = _2309.x == 0u;
    float _2413;
    float _2415;
    float _2417;
    if (_2311)
    {
        _2413 = _2303;
        _2415 = _2304;
        _2417 = _2305;
    }
    else
    {
        uint _2421 = _2235 + 6u;
        float _2437 = (dot(vec3(cbLight._m0[_2235 + 2u].xyz), vec3(_787, _788, _789)) * 0.5) + 0.5;
        float _2438 = _2437 * _2437;
        float _4517 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2439 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2440 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
        _2413 = (((cbLight._m0[_2421].x * 0.3183098733425140380859375) * _2439) * _2440) + _2303;
        _2415 = (((cbLight._m0[_2421].y * 0.3183098733425140380859375) * _2439) * _2440) + _2304;
        _2417 = (((cbLight._m0[_2421].z * 0.3183098733425140380859375) * _2439) * _2440) + _2305;
    }
    bool _2420 = _2309.y == 0u;
    float _2475;
    float _2477;
    float _2479;
    if (_2420)
    {
        _2475 = _2413;
        _2477 = _2415;
        _2479 = _2417;
    }
    else
    {
        uint _2637 = _2235 + 7u;
        float _2653 = (dot(vec3(cbLight._m0[_2235 + 3u].xyz), vec3(_787, _788, _789)) * 0.5) + 0.5;
        float _2654 = _2653 * _2653;
        float _4533 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2655 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2656 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
        _2475 = (((cbLight._m0[_2637].x * 0.3183098733425140380859375) * _2655) * _2656) + _2413;
        _2477 = (((cbLight._m0[_2637].y * 0.3183098733425140380859375) * _2655) * _2656) + _2415;
        _2479 = (((cbLight._m0[_2637].z * 0.3183098733425140380859375) * _2655) * _2656) + _2417;
    }
    uint _2482 = _2235 + 8u;
    float _2495 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2235].w)) * _790) * 0.949999988079071044921875);
    float _2496 = _2495 * _2495;
    float _2497 = cbLight._m0[_2235].x + _866;
    float _2498 = cbLight._m0[_2235].y + _867;
    float _2499 = cbLight._m0[_2235].z + _868;
    float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
    float _2504 = _2503 * _2497;
    float _2505 = _2503 * _2498;
    float _2506 = _2503 * _2499;
    float _2507 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2235].xyz));
    float _4549 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _4560 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _2511 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2512 = dot(vec3(_787, _788, _789), vec3(_2504, _2505, _2506));
    float _4571 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2515 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2516 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_2504, _2505, _2506));
    float _4582 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2520 = _2496 * _2496;
    float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
    float _2535 = (exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2536 = 1.0 - _2496;
    float _2547 = (0.5 / (((_2511 * ((_2510 * _2536) + _2496)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2536) + _2496) * _2510))) * _2510;
    float _4593 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2549 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
    uint _2563 = _2235 + 9u;
    float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _790) * 0.949999988079071044921875);
    float _2575 = _2574 * _2574;
    float _2576 = cbLight._m0[_2275].x + _866;
    float _2577 = cbLight._m0[_2275].y + _867;
    float _2578 = cbLight._m0[_2275].z + _868;
    float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
    float _2583 = _2582 * _2576;
    float _2584 = _2582 * _2577;
    float _2585 = _2582 * _2578;
    float _2586 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2275].xyz));
    float _4604 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2589 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2590 = dot(vec3(_787, _788, _789), vec3(_2583, _2584, _2585));
    float _4615 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2593 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2594 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2583, _2584, _2585));
    float _4626 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2598 = _2575 * _2575;
    float _2602 = ((_2593 * _2593) * (_2598 + (-1.0))) + 1.0;
    float _2611 = (exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2612 = 1.0 - _2575;
    float _2622 = (0.5 / (((_2511 * ((_2589 * _2612) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2612) + _2575) * _2589))) * _2589;
    float _4637 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2624 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2598 / ((_2602 * _2602) * 3.141590118408203125));
    float _2634 = (((_2611 * cbLight._m0[_2563].x) * _2624) * _2258) + ((((cbLight._m0[_2482].x * _2224) * _2535) * _2549) * _2271);
    float _2635 = (((_2611 * cbLight._m0[_2563].y) * _2624) * _2258) + ((((cbLight._m0[_2482].y * _2226) * _2535) * _2549) * _2271);
    float _2636 = (((_2611 * cbLight._m0[_2563].z) * _2624) * _2258) + ((((cbLight._m0[_2482].z * _2228) * _2535) * _2549) * _2271);
    float _2692;
    float _2694;
    float _2696;
    if (_2311)
    {
        _2692 = _2634;
        _2694 = _2635;
        _2696 = _2636;
    }
    else
    {
        uint _2698 = _2235 + 2u;
        uint _2702 = _2235 + 10u;
        float _2716 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2698].w)) * _790) * 0.949999988079071044921875);
        float _2717 = _2716 * _2716;
        float _2718 = cbLight._m0[_2698].x + _866;
        float _2719 = cbLight._m0[_2698].y + _867;
        float _2720 = cbLight._m0[_2698].z + _868;
        float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
        float _2725 = _2724 * _2718;
        float _2726 = _2724 * _2719;
        float _2727 = _2724 * _2720;
        float _2728 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2698].xyz));
        float _4648 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2731 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2732 = dot(vec3(_787, _788, _789), vec3(_2725, _2726, _2727));
        float _4659 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2736 = dot(vec3(cbLight._m0[_2698].xyz), vec3(_2725, _2726, _2727));
        float _4670 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2740 = _2717 * _2717;
        float _2744 = ((_2735 * _2735) * (_2740 + (-1.0))) + 1.0;
        float _2753 = (exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2754 = 1.0 - _2717;
        float _2764 = (0.5 / (((_2511 * ((_2731 * _2754) + _2717)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2754) + _2717) * _2731))) * _2731;
        float _4681 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2766 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2740 / ((_2744 * _2744) * 3.141590118408203125));
        float _2767 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
        _2692 = (((_2753 * cbLight._m0[_2702].x) * _2766) * _2767) + _2634;
        _2694 = (((_2753 * cbLight._m0[_2702].y) * _2766) * _2767) + _2635;
        _2696 = (((_2753 * cbLight._m0[_2702].z) * _2766) * _2767) + _2636;
    }
    float _2798;
    float _2800;
    float _2802;
    if (_2420)
    {
        _2798 = _2692;
        _2800 = _2694;
        _2802 = _2696;
    }
    else
    {
        uint _2809 = _2235 + 3u;
        uint _2813 = _2235 + 11u;
        float _2827 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2809].w)) * _790) * 0.949999988079071044921875);
        float _2828 = _2827 * _2827;
        float _2829 = cbLight._m0[_2809].x + _866;
        float _2830 = cbLight._m0[_2809].y + _867;
        float _2831 = cbLight._m0[_2809].z + _868;
        float _2835 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
        float _2836 = _2835 * _2829;
        float _2837 = _2835 * _2830;
        float _2838 = _2835 * _2831;
        float _2839 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2809].xyz));
        float _4697 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2842 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2843 = dot(vec3(_787, _788, _789), vec3(_2836, _2837, _2838));
        float _4708 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2846 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2847 = dot(vec3(cbLight._m0[_2809].xyz), vec3(_2836, _2837, _2838));
        float _4719 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2851 = _2828 * _2828;
        float _2855 = ((_2846 * _2846) * (_2851 + (-1.0))) + 1.0;
        float _2864 = (exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2865 = 1.0 - _2828;
        float _2875 = (0.5 / (((_2511 * ((_2842 * _2865) + _2828)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2865) + _2828) * _2842))) * _2842;
        float _4730 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2877 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2851 / ((_2855 * _2855) * 3.141590118408203125));
        float _2878 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
        _2798 = (((_2864 * cbLight._m0[_2813].x) * _2877) * _2878) + _2692;
        _2800 = (((_2864 * cbLight._m0[_2813].y) * _2877) * _2878) + _2694;
        _2802 = (((_2864 * cbLight._m0[_2813].z) * _2877) * _2878) + _2696;
    }
    float _2944;
    float _2946;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    if (_2233.y == 0u)
    {
        uvec4 _2899 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2900 = _2899.x;
        uint _2911 = uint((float(_2899.y) * floor(float(uint(cbSceneParam._m0[85u].y * _875) / _2900))) + floor(float(uint(cbSceneParam._m0[85u].x * _874) / _2900)));
        float _2921 = (log2(_2011 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2922 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        uint _2925 = uint(isnan(14.0) ? _2922 : (isnan(_2922) ? 14.0 : min(_2922, 14.0)));
        uvec4 _2930 = texelFetch(g_lightClusterGridBuffer, int(((_2925 << 2u) + (_2911 << 6u)) >> 2u));
        uint _2931 = _2930.x;
        uint _2932 = _2899.z;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        if (((((1u << ((_2932 >> 4u) & 15u)) + 4294967295u) & _2931) == 0u) || ((_2932 & 240u) == 0u))
        {
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
        }
        else
        {
            float _3012;
            float _3014;
            float _3016;
            float _3018;
            float _3020;
            float _3022;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            uint _3162 = 0u;
            uint _3171;
            bool _3172;
            for (;;)
            {
                _3171 = texelFetch(g_lightClassification, int((((_2925 << 5u) + (_2911 << 9u)) + (_3162 << 2u)) >> 2u)).x;
                _3172 = _3171 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3172)
                {
                    frontier_phi_66_pred = _3161;
                    frontier_phi_66_pred_1 = _3160;
                    frontier_phi_66_pred_2 = _3159;
                    frontier_phi_66_pred_3 = _3158;
                    frontier_phi_66_pred_4 = _3157;
                    frontier_phi_66_pred_5 = _3156;
                }
                else
                {
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    uint _3286;
                    _3280 = _3156;
                    _3281 = _3157;
                    _3282 = _3158;
                    _3283 = _3159;
                    _3284 = _3160;
                    _3285 = _3161;
                    _3286 = _3171;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    for (;;)
                    {
                        uint _3290 = uint(findLSB(_3286)) + (_3162 << 5u);
                        uint _3287 = (_3286 + 4294967295u) & _3286;
                        uint _3292 = _3290 * 48u;
                        vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 3u)).x));
                        uint _3312 = (_3290 * 48u) + 4u;
                        vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 3u)).x));
                        uint _3331 = (_3290 * 48u) + 8u;
                        vec3 _3342 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3331)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 2u)).x));
                        float _3346 = _3306.x - _2009;
                        float _3347 = _3306.y - _2010;
                        float _3348 = _3306.z - _2011;
                        float _3349 = dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348));
                        float _3352 = inversesqrt(_3349);
                        float _3353 = _3352 * _3346;
                        float _3354 = _3352 * _3347;
                        float _3355 = _3352 * _3348;
                        float _3356 = dot(vec3(_893, _896, _899), vec3(_3353, _3354, _3355));
                        float _3361 = 1.0 - (_3349 * _3306.w);
                        float _4756 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3362 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3363 = sqrt(_3349) * _3325.w;
                        float _3366 = 1.39999997615814208984375 / (_3363 + 1.39999997615814208984375);
                        float _3367 = _3366 * _3366;
                        float _3370 = ((1.0 - _3367) * _3356) + _3367;
                        float _3373 = _3363 * _3363;
                        float _3377 = ((isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0))) * _3362) / ((_3373 * 0.699999988079071044921875) + 1.0);
                        float _3381 = (-0.0) - _2009;
                        float _3382 = (-0.0) - _2010;
                        float _3383 = (-0.0) - _2011;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3388 = _3387 * _3381;
                        float _3389 = _3387 * _3382;
                        float _3390 = _3387 * _3383;
                        float _3397 = exp2(log2(1.0 / ((_3373 * 3.5) + 5.0)) * 0.25);
                        float _3398 = 1.0 - _953;
                        float _3405 = sqrt(1.0 - ((1.0 - (_3398 * _3398)) * (1.0 - (_3397 * _3397))));
                        float _3406 = _3405 * _3405;
                        float _3407 = _3406 * _3406;
                        float _3408 = _3388 + _3353;
                        float _3409 = _3389 + _3354;
                        float _3410 = _3390 + _3355;
                        float _3414 = inversesqrt(dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410)));
                        float _3418 = dot(vec3(_893, _896, _899), vec3(_3388, _3389, _3390));
                        float _4772 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3421 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3422 = dot(vec3(_893, _896, _899), vec3(_3414 * _3408, _3414 * _3409, _3414 * _3410));
                        float _4783 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3425 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3429 = ((_3425 * _3425) * (_3407 + (-1.0))) + 1.0;
                        float _3430 = _3366 * _3406;
                        float _3431 = _3430 * _3430;
                        float _3434 = ((1.0 - _3431) * _3356) + _3431;
                        float _4794 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3435 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3436 = 1.0 - _3406;
                        float _3446 = (0.5 / (((_3435 * ((_3421 * _3436) + _3406)) + 9.9999999392252902907785028219223e-09) + (((_3435 * _3436) + _3406) * _3421))) * _3435;
                        float _4805 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3457 = (((_3407 * 3.1415927410125732421875) * (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) / ((_3429 * _3429) * ((_3373 * 2.1991131305694580078125) + 3.141590118408203125))) * _3362;
                        _3215 = (_3377 * _3325.x) + _3283;
                        _3216 = (_3377 * _3325.y) + _3284;
                        _3217 = (_3377 * _3325.z) + _3285;
                        _3212 = (_3457 * _3342.x) + _3280;
                        _3213 = (_3457 * _3342.y) + _3281;
                        _3214 = (_3457 * _3342.z) + _3282;
                        if (_3287 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3280 = _3212;
                            _3281 = _3213;
                            _3282 = _3214;
                            _3283 = _3215;
                            _3284 = _3216;
                            _3285 = _3217;
                            _3286 = _3287;
                        }
                    }
                    frontier_phi_66_pred = _3217;
                    frontier_phi_66_pred_1 = _3216;
                    frontier_phi_66_pred_2 = _3215;
                    frontier_phi_66_pred_3 = _3214;
                    frontier_phi_66_pred_4 = _3213;
                    frontier_phi_66_pred_5 = _3212;
                }
                _3022 = frontier_phi_66_pred;
                _3020 = frontier_phi_66_pred_1;
                _3018 = frontier_phi_66_pred_2;
                _3016 = frontier_phi_66_pred_3;
                _3014 = frontier_phi_66_pred_4;
                _3012 = frontier_phi_66_pred_5;
                uint _3163 = _3162 + 1u;
                if (_3163 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3156 = _3012;
                    _3157 = _3014;
                    _3158 = _3016;
                    _3159 = _3018;
                    _3160 = _3020;
                    _3161 = _3022;
                    _3162 = _3163;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
        }
        uvec4 _3025 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3026 = _3025.z;
        uint _3028 = (_3026 >> 8u) & 15u;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        if (((4294967295u << _3028) & _2931) == 0u)
        {
            _3124 = _3011;
            _3126 = _3013;
            _3128 = _3015;
            _3130 = _3017;
            _3132 = _3019;
            _3134 = _3021;
        }
        else
        {
            float _3149 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
            float _3150 = _3149 * _2009;
            float _3151 = _3149 * _2010;
            float _3152 = _3149 * _2011;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3028 < ((_3026 >> 12u) & 15u))
            {
                float _3125;
                float _3127;
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3263 = _3011;
                float _3264 = _3013;
                float _3265 = _3015;
                float _3266 = _3017;
                float _3267 = _3019;
                float _3268 = _3021;
                uint _3269 = _3028;
                uint _3278;
                bool _3279;
                for (;;)
                {
                    _3278 = texelFetch(g_lightClassification, int((((_2925 << 5u) + (_2911 << 9u)) + (_3269 << 2u)) >> 2u)).x;
                    _3279 = _3278 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3279)
                    {
                        frontier_phi_72_pred = _3268;
                        frontier_phi_72_pred_1 = _3267;
                        frontier_phi_72_pred_2 = _3266;
                        frontier_phi_72_pred_3 = _3265;
                        frontier_phi_72_pred_4 = _3264;
                        frontier_phi_72_pred_5 = _3263;
                    }
                    else
                    {
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3475 = _3263;
                        float _3476 = _3264;
                        float _3477 = _3265;
                        float _3478 = _3266;
                        float _3479 = _3267;
                        float _3480 = _3268;
                        uint _3481 = _3278;
                        uint _3482;
                        vec4 _3507;
                        float _3508;
                        vec4 _3523;
                        vec3 _3535;
                        vec4 _3550;
                        vec4 _3565;
                        float _3611;
                        bool _3612;
                        for (;;)
                        {
                            uint _3492 = ((_3269 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3481));
                            _3482 = (_3481 + 4294967295u) & _3481;
                            uint _3494 = _3492 * 40u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            _3508 = _3507.w;
                            uint _3510 = (_3492 * 40u) + 4u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3525 = (_3492 * 40u) + 8u;
                            _3535 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x));
                            uint _3537 = (_3492 * 40u) + 16u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3552 = (_3492 * 40u) + 20u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3567 = (_3492 * 40u) + 24u;
                            vec4 _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3586 = (_3492 * 40u) + 28u;
                            vec4 _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            _3611 = fma(_2011, _3599.z, fma(_2010, _3599.y, _3599.x * _2009)) + _3599.w;
                            _3612 = !((fma(_2011, _3580.z, fma(_2010, _3580.y, _3580.x * _2009)) + _3580.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3612)
                            {
                                float _3639 = _3507.x - _2009;
                                float _3640 = _3507.y - _2010;
                                float _3641 = _3507.z - _2011;
                                float _3642 = dot(vec3(_3639, _3640, _3641), vec3(_3639, _3640, _3641));
                                float _3645 = inversesqrt(_3642);
                                float _3646 = _3645 * _3639;
                                float _3647 = _3645 * _3640;
                                float _3648 = _3645 * _3641;
                                float _3652 = 1.0 - (_3642 / (_3508 * _3508));
                                float _4816 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3653 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3657 = sqrt(_3642) * _3523.w;
                                float _3659 = 1.39999997615814208984375 / (_3657 + 1.39999997615814208984375);
                                float _3660 = _3659 * _3659;
                                float _3663 = ((1.0 - _3660) * dot(vec3(_3646, _3647, _3648), vec3(_893, _896, _899))) + _3660;
                                float _3666 = _3657 * _3657;
                                float _3670 = (fma(_2011, _3550.z, fma(_2010, _3550.y, _3550.x * _2009)) + _3550.w) / _3611;
                                float _3671 = (fma(_2011, _3565.z, fma(_2010, _3565.y, _3565.x * _2009)) + _3565.w) / _3611;
                                float _3675 = 1.0 - dot(vec2(_3670, _3671), vec2(_3670, _3671));
                                float _4832 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3676 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3677 = _3676 * (((isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0))) * _3653) / ((_3666 * 0.699999988079071044921875) + 1.0));
                                float _3689 = exp2(log2(1.0 / ((_3666 * 3.5) + 5.0)) * 0.25);
                                float _3690 = 1.0 - _953;
                                float _3697 = sqrt(1.0 - ((1.0 - (_3690 * _3690)) * (1.0 - (_3689 * _3689))));
                                float _3698 = _3697 * _3697;
                                float _3699 = _3698 * _3698;
                                float _3700 = _3646 - _3150;
                                float _3701 = _3647 - _3151;
                                float _3702 = _3648 - _3152;
                                float _3706 = inversesqrt(dot(vec3(_3700, _3701, _3702), vec3(_3700, _3701, _3702)));
                                float _3710 = dot(vec3(_893, _896, _899), vec3((-0.0) - _3150, (-0.0) - _3151, (-0.0) - _3152));
                                float _4843 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                                float _3713 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3714 = dot(vec3(_893, _896, _899), vec3(_3706 * _3700, _3706 * _3701, _3706 * _3702));
                                float _4854 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3717 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3721 = ((_3717 * _3717) * (_3699 + (-1.0))) + 1.0;
                                float _3722 = _3659 * _3698;
                                float _3723 = _3722 * _3722;
                                float _3729 = ((1.0 - _3723) * dot(vec3(_893, _896, _899), vec3(_3646, _3647, _3648))) + _3723;
                                float _4865 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3730 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3731 = 1.0 - _3698;
                                float _3741 = (0.5 / (((_3730 * ((_3713 * _3731) + _3698)) + 9.9999999392252902907785028219223e-09) + (((_3730 * _3731) + _3698) * _3713))) * _3730;
                                float _4876 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3751 = (_3676 * _3653) * (((_3699 * 3.1415927410125732421875) * (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) / ((_3721 * _3721) * ((_3666 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3677 * _3523.y;
                                frontier_phi_78_pred_1 = _3677 * _3523.x;
                                frontier_phi_78_pred_2 = _3751 * _3535.z;
                                frontier_phi_78_pred_3 = _3751 * _3535.y;
                                frontier_phi_78_pred_4 = _3751 * _3535.x;
                                frontier_phi_78_pred_5 = _3677 * _3523.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3759 = frontier_phi_78_pred;
                            _3758 = frontier_phi_78_pred_1;
                            _3757 = frontier_phi_78_pred_2;
                            _3756 = frontier_phi_78_pred_3;
                            _3755 = frontier_phi_78_pred_4;
                            _3760 = frontier_phi_78_pred_5;
                            _3465 = _3758 + _3478;
                            _3466 = _3759 + _3479;
                            _3467 = _3760 + _3480;
                            _3462 = _3755 + _3475;
                            _3463 = _3756 + _3476;
                            _3464 = _3757 + _3477;
                            if (_3482 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3482;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3467;
                        frontier_phi_72_pred_1 = _3466;
                        frontier_phi_72_pred_2 = _3465;
                        frontier_phi_72_pred_3 = _3464;
                        frontier_phi_72_pred_4 = _3463;
                        frontier_phi_72_pred_5 = _3462;
                    }
                    _3135 = frontier_phi_72_pred;
                    _3133 = frontier_phi_72_pred_1;
                    _3131 = frontier_phi_72_pred_2;
                    _3129 = frontier_phi_72_pred_3;
                    _3127 = frontier_phi_72_pred_4;
                    _3125 = frontier_phi_72_pred_5;
                    uint _3270 = _3269 + 1u;
                    if (_3270 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3263 = _3125;
                        _3264 = _3127;
                        _3265 = _3129;
                        _3266 = _3131;
                        _3267 = _3133;
                        _3268 = _3135;
                        _3269 = _3270;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3135;
                frontier_phi_60_61_ladder_1 = _3133;
                frontier_phi_60_61_ladder_2 = _3129;
                frontier_phi_60_61_ladder_3 = _3127;
                frontier_phi_60_61_ladder_4 = _3125;
                frontier_phi_60_61_ladder_5 = _3131;
            }
            else
            {
                frontier_phi_60_61_ladder = _3021;
                frontier_phi_60_61_ladder_1 = _3019;
                frontier_phi_60_61_ladder_2 = _3015;
                frontier_phi_60_61_ladder_3 = _3013;
                frontier_phi_60_61_ladder_4 = _3011;
                frontier_phi_60_61_ladder_5 = _3017;
            }
            _3124 = frontier_phi_60_61_ladder_4;
            _3126 = frontier_phi_60_61_ladder_3;
            _3128 = frontier_phi_60_61_ladder_2;
            _3130 = frontier_phi_60_61_ladder_5;
            _3132 = frontier_phi_60_61_ladder_1;
            _3134 = frontier_phi_60_61_ladder;
        }
        float _3139 = isnan(1.0) ? _937 : (isnan(_937) ? 1.0 : min(_937, 1.0));
        _2944 = (_3139 * _3130) + _2475;
        _2946 = (_3139 * _3132) + _2477;
        _2948 = (_3139 * _3134) + _2479;
        _2950 = ((_3124 * 0.039999999105930328369140625) * _3139) + _2798;
        _2952 = ((_3126 * 0.039999999105930328369140625) * _3139) + _2800;
        _2954 = ((_3128 * 0.039999999105930328369140625) * _3139) + _2802;
    }
    else
    {
        _2944 = _2475;
        _2946 = _2477;
        _2948 = _2479;
        _2950 = _2798;
        _2952 = _2800;
        _2954 = _2802;
    }
    float _4892 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _4903 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _4914 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    uint _2974 = _277 + 6u;
    float _2982 = _874 / cbSceneParam._m0[86u].x;
    float _2983 = _875 / cbSceneParam._m0[86u].y;
    vec4 _2997 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2982, _2983, (log2((isnan(cbSceneParam._m0[77u].w) ? _808 : (isnan(_808) ? cbSceneParam._m0[77u].w : min(_808, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2999 = _2997.x;
    float _3000 = _2997.y;
    float _3001 = _2997.z;
    float _3002 = _2997.w;
    float _3074;
    float _3076;
    float _3078;
    float _3080;
    if (_808 > cbSceneParam._m0[78u].w)
    {
        float _3036 = isnan(_808) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _808 : min(cbSceneParam._m0[80u].w, _808));
        float _3037 = _3036 / _808;
        float _3048 = _3037 * _859;
        float _3049 = _860 * _3037;
        float _3050 = (-0.0) - _3049;
        float _3052 = _3037 * _861;
        float _3054 = (cbSceneParam._m0[77u].w * _3050) / _3036;
        float _3055 = _3054 + cbSceneParam._m0[79u].w;
        float _3056 = cbSceneParam._m0[79u].w - _3049;
        float _3062 = sqrt(((_3048 * _3048) + (_3049 * _3049)) + (_3052 * _3052));
        float _3065 = (1.0 - (cbSceneParam._m0[77u].w / _3036)) * _3062;
        float _3070 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3072 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3225;
        if (abs((_3050 - _3054) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3225 = ((((_3055 > 0.0) ? exp2(_3070 * _3055) : (2.0 - exp2(_3072 * _3055))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3065;
        }
        else
        {
            float _3185 = 1.0 / cbSceneParam._m0[80u].x;
            float _3186 = isnan(_3056) ? _3055 : (isnan(_3055) ? _3056 : max(_3055, _3056));
            float _3187 = isnan(_3056) ? _3055 : (isnan(_3055) ? _3056 : min(_3055, _3056));
            float _3196 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : min(_3186, 0.0));
            float _3197 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : min(_3187, 0.0));
            _3225 = ((abs(_3062 / _3050) * cbSceneParam._m0[80u].y) * ((((_3196 - _3197) * 2.0) - ((exp2(_3070 * (isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0)))) - exp2(_3070 * (isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))))) * _3185)) - ((exp2(_3072 * _3196) - exp2(_3072 * _3197)) * _3185))) + (_3065 * cbSceneParam._m0[80u].z);
        }
        vec4 _3227 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2982, _2983, 1.0), 0.0);
        float _3236 = exp2((_3225 * (-1.44269502162933349609375)) * (1.0 - _3227.w));
        float _3237 = log2(_3236);
        float _3253 = log2(_3002);
        _3074 = (exp2(_3253 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].x)) * _3227.x) / cbSceneParam._m0[78u].x)) + _2999;
        _3076 = (exp2(_3253 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].y)) * _3227.y) / cbSceneParam._m0[78u].y)) + _3000;
        _3078 = (exp2(_3253 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].z)) * _3227.z) / cbSceneParam._m0[78u].z)) + _3001;
        _3080 = _3236 * _3002;
    }
    else
    {
        _3074 = _2999;
        _3076 = _3000;
        _3078 = _3001;
        _3080 = _3002;
    }
    float _3092 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3093 = _3092 == 3.0;
    float _3094 = log2(_3080);
    float _3101 = exp2(_3094 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2944 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _937))) + ((_2950 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1741)) * cbPerFrame._m0[3u].x));
    float _3102 = exp2(_3094 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2946 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _937))) + ((_2952 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1741)) * cbPerFrame._m0[3u].x));
    float _3103 = exp2(_3094 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2948 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _937))) + ((_2954 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1741)) * cbPerFrame._m0[3u].x));
    float _3112 = (_3092 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3112 * (_3093 ? _3101 : (_3101 + (cbSceneParam._m0[72u].w * _3074)));
    SV_Target.y = _3112 * (_3093 ? _3102 : (_3102 + (cbSceneParam._m0[72u].w * _3076)));
    SV_Target.z = _3112 * (_3093 ? _3103 : (_3103 + (cbSceneParam._m0[72u].w * _3078)));
    SV_Target.w = cbInstanceData._m0[_2974].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2974].w;
}


