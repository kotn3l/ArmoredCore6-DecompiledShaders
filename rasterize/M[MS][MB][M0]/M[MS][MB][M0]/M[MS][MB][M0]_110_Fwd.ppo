#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1110;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _269 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _275 = _269.x * cbMtdParam._m0[11u].x;
    float _276 = _269.y * cbMtdParam._m0[11u].y;
    float _277 = _269.z * cbMtdParam._m0[11u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _248) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _249) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _336 = _334.x;
    float _346 = dot(vec4(_336, _334.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _363 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_336 - _346) * cbMtdParam._m0[24u].x) + _346) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3417 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
    float _371 = (_364 * ((_296.x * cbMtdParam._m0[12u].x) - _275)) + _275;
    float _372 = (_364 * ((_296.y * cbMtdParam._m0[12u].y) - _276)) + _276;
    float _373 = (_364 * ((_296.z * cbMtdParam._m0[12u].z) - _277)) + _277;
    vec4 _391 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _248) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _249) + cbTextureTilingScale._m0[4u].w));
    vec4 _408 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _410 = _408.x;
    float _411 = _408.y;
    float _412 = _408.z;
    float _421 = ((_391.z - _412) * _364) + _412;
    float _424 = ((((_391.x - _410) * _364) + _410) * 2.0) + (-1.0);
    float _426 = ((((_391.y - _411) * _364) + _411) * 2.0) + (-1.0);
    float _427 = dot(vec2(_424, _426), vec2(_424, _426));
    float _3428 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _432 = sqrt(1.0 - (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0))));
    float _435 = fma(_432, _216, fma(_426, _223, _424 * _209));
    float _438 = fma(_432, _217, fma(_426, _224, _424 * _210));
    float _441 = fma(_432, _218, fma(_426, _225, _424 * _211));
    float _445 = inversesqrt(dot(vec3(_435, _438, _441), vec3(_435, _438, _441)));
    vec4 _461 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _489 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _491 = _489.x;
    float _492 = 1.0 - _491;
    float _496 = ((_491 - _492) * cbMtdParam._m0[24u].z) + _492;
    float _498 = (cbMtdParam._m0[19u].x + dot(vec4(_445 * _435, _445 * _438, _445 * _441, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_496 * cbMtdParam._m0[21u].z);
    float _3439 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _514 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_496 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3450 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _515 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _519 = ((_499 * (cbMtdParam._m0[17u].x - _371)) * _515) + _371;
    float _520 = ((_499 * (cbMtdParam._m0[17u].y - _372)) * _515) + _372;
    float _521 = ((_499 * (cbMtdParam._m0[17u].z - _373)) * _515) + _373;
    vec4 _534 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _541 = (_534.x * 2.0) + (-1.0);
    float _542 = (_534.y * 2.0) + (-1.0);
    float _543 = dot(vec2(_541, _542), vec2(_541, _542));
    float _3461 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _552 = (((_534.z - _421) * _499) * _515) + _421;
    float _567 = (((cbMtdParam._m0[21u].x * _424) + ((_541 - _424) * _499)) * _515) + _424;
    float _568 = (((cbMtdParam._m0[21u].x * _426) + ((_542 - _426) * _499)) * _515) + _426;
    float _569 = (((sqrt(1.0 - (isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0)))) - _432) * _499) * _515) + _432;
    float _574 = cbMtdParam._m0[22u].x + _461.w;
    float _577 = fma(_569, _216, fma(_568, _223, _567 * _209));
    float _580 = fma(_569, _217, fma(_568, _224, _567 * _210));
    float _583 = fma(_569, _218, fma(_568, _225, _567 * _211));
    float _587 = inversesqrt(dot(vec3(_577, _580, _583), vec3(_577, _580, _583)));
    float _588 = _587 * _577;
    float _589 = _587 * _580;
    float _590 = _587 * _583;
    float _3472 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _591 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _3483 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _3494 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3505 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _3516 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _609 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _651 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _661 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _651);
    float _662 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _651);
    float _663 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _651);
    float _667 = inversesqrt(dot(vec3(_661, _662, _663), vec3(_661, _662, _663)));
    float _668 = _661 * _667;
    float _669 = _662 * _667;
    float _670 = _663 * _667;
    float _676 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _677 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _695 = fma(_590, cbSceneParam._m0[5u].z, fma(_589, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _588));
    float _698 = fma(_590, cbSceneParam._m0[6u].z, fma(_589, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _588));
    float _701 = fma(_590, cbSceneParam._m0[7u].z, fma(_589, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _588));
    uint _715 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _721 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) * cbInstanceData._m0[_715].x;
    float _722 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) * cbInstanceData._m0[_715].y;
    float _723 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0)))) * cbInstanceData._m0[_715].z;
    float _3527 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _3538 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _3549 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    vec4 _735 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _676, cbSceneParam._m0[86u].y * _677));
    float _739 = ((isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * TEXCOORD_5.w) * _735.x;
    float _740 = dot(vec3(_588, _589, _590), vec3(_668, _669, _670));
    float _743 = _740 * 2.0;
    float _747 = (_743 * _588) - _668;
    float _748 = (_743 * _589) - _669;
    float _749 = (_743 * _590) - _670;
    float _753 = abs(dot(vec3(_668, _669, _670), vec3(_588, _589, _590)));
    float _3560 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _755 = sqrt(_591);
    float _768 = exp2((_755 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_755 * 3.0));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1109;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _834 = fma(_808, cbModelParam._m0[26u].z, fma(_804, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800));
        float _838 = fma(_808, cbModelParam._m0[27u].z, fma(_804, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800));
        float _842 = fma(_808, cbModelParam._m0[28u].z, fma(_804, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800));
        float _867 = _800 + _588;
        float _868 = _804 + _589;
        float _869 = _808 + _590;
        float _879 = fma(_869, cbModelParam._m0[26u].z, fma(_868, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _867)) - _834;
        float _880 = fma(_869, cbModelParam._m0[27u].z, fma(_868, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _867)) - _838;
        float _881 = fma(_869, cbModelParam._m0[28u].z, fma(_868, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _867)) - _842;
        float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
        float _898 = ((_885 * _879) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_834 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_885 * _880) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_838 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_885 * _881) / cbModelParam._m0[34u].z) + ((((((_842 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        float _937 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_903.x + (-0.5));
        float _939 = _937 * (_903.y + (-0.5));
        float _940 = _937 * (_903.z + (-0.5));
        float _947 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_910.x + (-0.5));
        float _949 = _947 * (_910.y + (-0.5));
        float _950 = _947 * (_910.z + (-0.5));
        float _957 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_917.x + (-0.5));
        float _959 = _957 * (_917.y + (-0.5));
        float _960 = _957 * (_917.z + (-0.5));
        float _967 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_924.x + (-0.5));
        float _969 = _967 * (_924.y + (-0.5));
        float _970 = _967 * (_924.z + (-0.5));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = _938 * 0.5;
        float _975 = _948 * 0.5;
        float _976 = _958 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _991 = (dot(vec3(_588, _589, _590), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3586 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1001 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3597 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3608 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * (_1003 + 1.0))) + _1008) * _971;
        float _1018 = _939 * 0.5;
        float _1019 = _949 * 0.5;
        float _1020 = _959 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_588, _589, _590), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3619 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3630 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3641 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * (_1045 + 1.0))) + _1050) * _972;
        float _1060 = _940 * 0.5;
        float _1061 = _950 * 0.5;
        float _1062 = _960 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_588, _589, _590), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3652 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3663 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3674 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_1087 + 1.0))) + _1092) * _973;
        _1109 = _940;
        _1111 = _939;
        _1112 = _938;
        _1113 = _950;
        _1114 = _949;
        _1115 = _948;
        _1116 = _960;
        _1117 = _959;
        _1118 = _958;
        _1119 = _973;
        _1120 = _972;
        _1121 = _971;
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
    }
    else
    {
        _1109 = _1110;
        _1111 = _1110;
        _1112 = _1110;
        _1113 = _1110;
        _1114 = _1110;
        _1115 = _1110;
        _1116 = _1110;
        _1117 = _1110;
        _1118 = _1110;
        _1119 = _1110;
        _1120 = _1110;
        _1121 = _1110;
        _1122 = 0.0;
        _1123 = 0.0;
        _1124 = 0.0;
    }
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1149 = fma(_808, cbModelParam._m0[30u].z, fma(_804, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _800));
        float _1153 = fma(_808, cbModelParam._m0[31u].z, fma(_804, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _800));
        float _1157 = fma(_808, cbModelParam._m0[32u].z, fma(_804, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _800));
        float _1180 = _800 + _588;
        float _1181 = _804 + _589;
        float _1182 = _808 + _590;
        float _1192 = fma(_1182, cbModelParam._m0[30u].z, fma(_1181, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1180)) - _1149;
        float _1193 = fma(_1182, cbModelParam._m0[31u].z, fma(_1181, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1180)) - _1153;
        float _1194 = fma(_1182, cbModelParam._m0[32u].z, fma(_1181, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1180)) - _1157;
        float _1198 = inversesqrt(dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194)));
        float _1211 = ((_1198 * _1192) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1149 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1198 * _1193) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1153 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1198 * _1194) / cbModelParam._m0[35u].z) + ((((((_1157 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        float _1248 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1215.x + (-0.5));
        float _1250 = _1248 * (_1215.y + (-0.5));
        float _1251 = _1248 * (_1215.z + (-0.5));
        float _1258 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1222.x + (-0.5));
        float _1260 = _1258 * (_1222.y + (-0.5));
        float _1261 = _1258 * (_1222.z + (-0.5));
        float _1268 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1229.x + (-0.5));
        float _1270 = _1268 * (_1229.y + (-0.5));
        float _1271 = _1268 * (_1229.z + (-0.5));
        float _1278 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1236.x + (-0.5));
        float _1280 = _1278 * (_1236.y + (-0.5));
        float _1281 = _1278 * (_1236.z + (-0.5));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = _1249 * 0.5;
        float _1286 = _1259 * 0.5;
        float _1287 = _1269 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_588, _589, _590), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _3737 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1312 + 1.0))) + _1317) * _1282;
        float _1327 = _1250 * 0.5;
        float _1328 = _1260 * 0.5;
        float _1329 = _1270 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_588, _589, _590), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3748 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _3759 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _3770 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1354 + 1.0))) + _1359) * _1283;
        float _1369 = _1251 * 0.5;
        float _1370 = _1261 * 0.5;
        float _1371 = _1271 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_588, _589, _590), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _3803 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_1396 + 1.0))) + _1401) * _1284;
        _1418 = _1251;
        _1419 = _1250;
        _1420 = _1249;
        _1421 = _1261;
        _1422 = _1260;
        _1423 = _1259;
        _1424 = _1271;
        _1425 = _1270;
        _1426 = _1269;
        _1427 = _1284;
        _1428 = _1283;
        _1429 = _1282;
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
    }
    else
    {
        _1418 = _1110;
        _1419 = _1110;
        _1420 = _1110;
        _1421 = _1110;
        _1422 = _1110;
        _1423 = _1110;
        _1424 = _1110;
        _1425 = _1110;
        _1426 = _1110;
        _1427 = _1110;
        _1428 = _1110;
        _1429 = _1110;
        _1430 = 0.0;
        _1431 = 0.0;
        _1432 = 0.0;
    }
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1122)) + _1122;
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1123)) + _1123;
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1124)) + _1124;
    float _1465 = fma(_1444, cbSceneParam._m0[89u].z, fma(_1443, cbSceneParam._m0[89u].y, _1442 * cbSceneParam._m0[89u].x));
    float _1468 = fma(_1444, cbSceneParam._m0[90u].z, fma(_1443, cbSceneParam._m0[90u].y, _1442 * cbSceneParam._m0[90u].x));
    float _1471 = fma(_1444, cbSceneParam._m0[91u].z, fma(_1443, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1442));
    float _1486 = _747 * 0.5;
    float _1487 = _748 * 0.5;
    float _1488 = _749 * 0.5;
    float _1489 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1492 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1495 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1529;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1502 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1109, _1113, _1116, _1119));
        float _1506 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1111, _1114, _1117, _1120));
        float _1510 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1112, _1115, _1118, _1121));
        float _1517 = dot(vec4(cbModelParam._m0[39u]), vec4(_1486, _1487, _1488, 1.0));
        _1529 = dot(vec3(isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1517) ? 0.0 : (isnan(0.0) ? _1517 : max(0.0, _1517))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1529 = 1.0;
    }
    float _1540;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1531 = dot(vec4(cbModelParam._m0[40u]), vec4(_1486, _1487, _1488, 1.0));
        _1540 = dot(vec3(isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1531) ? 0.0 : (isnan(0.0) ? _1531 : max(0.0, _1531))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1540 = 1.0;
    }
    float _1544 = (_1540 * cbModelParam._m0[1u].x) + (_1529 * (1.0 - cbModelParam._m0[1u].x));
    float _1554 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _591);
    float _1555 = isnan(_1554) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1554 : min(cbModelParam._m0[25u].z, _1554));
    float _1636;
    float _1638;
    float _1640;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1603 = fma(_808, cbModelParam._m0[13u].z, fma(_804, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _800)) + cbModelParam._m0[13u].w;
        float _1607 = fma(_808, cbModelParam._m0[14u].z, fma(_804, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _800)) + cbModelParam._m0[14u].w;
        float _1611 = fma(_808, cbModelParam._m0[15u].z, fma(_804, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _800)) + cbModelParam._m0[15u].w;
        float _1614 = fma(_749, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747));
        float _1617 = fma(_749, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747));
        float _1620 = fma(_749, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747));
        float _1648;
        if (_1614 > 0.0)
        {
            _1648 = abs((1.0 - _1603) / _1614);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1603 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1648 = frontier_phi_14_12_ladder;
        }
        float _1849;
        if (_1617 > 0.0)
        {
            _1849 = abs((1.0 - _1607) / _1617);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1607 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1849 = frontier_phi_23_19_ladder;
        }
        float _2092;
        if (_1620 > 0.0)
        {
            _2092 = abs((1.0 - _1611) / _1620);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1611 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2092 = frontier_phi_35_30_ladder;
        }
        float _2094 = isnan(_1849) ? _1648 : (isnan(_1648) ? _1849 : min(_1648, _1849));
        float _2095 = isnan(_2092) ? _2094 : (isnan(_2094) ? _2092 : min(_2094, _2092));
        float _2099 = (_2095 * _1614) + _1603;
        float _2100 = (_2095 * _1617) + _1607;
        float _2101 = (_2095 * _1620) + _1611;
        float _2102 = _2095 * 9.9999997473787516355514526367188e-05;
        float _2104 = (-1.0) - _2102;
        float _2106 = _2102 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2101 > _2106) || ((_2101 < _2104) || ((_2100 > _2106) || ((_2100 < _2104) || ((_2099 < _2104) || (_2099 > _2106))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2225 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2101, cbModelParam._m0[9u].z, fma(_2100, cbModelParam._m0[9u].y, _2099 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2101, cbModelParam._m0[10u].z, fma(_2100, cbModelParam._m0[10u].y, _2099 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2101, cbModelParam._m0[11u].z, fma(_2100, cbModelParam._m0[11u].y, _2099 * cbModelParam._m0[11u].x))), _1555);
            frontier_phi_13_35_ladder = _2225.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2225.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2225.x * cbModelParam._m0[1u].y;
        }
        _1636 = frontier_phi_13_35_ladder_2;
        _1638 = frontier_phi_13_35_ladder_1;
        _1640 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1624 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_747, _748, _749), _1555);
        _1636 = _1624.x * cbModelParam._m0[1u].y;
        _1638 = _1624.y * cbModelParam._m0[1u].y;
        _1640 = _1624.z * cbModelParam._m0[1u].y;
    }
    float _1644 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _591);
    float _1645 = isnan(_1644) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1644 : min(cbModelParam._m0[25u].w, _1644));
    float _1735;
    float _1737;
    float _1739;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1699 = fma(_808, cbModelParam._m0[21u].z, fma(_804, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _800)) + cbModelParam._m0[21u].w;
        float _1703 = fma(_808, cbModelParam._m0[22u].z, fma(_804, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _800)) + cbModelParam._m0[22u].w;
        float _1707 = fma(_808, cbModelParam._m0[23u].z, fma(_804, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _800)) + cbModelParam._m0[23u].w;
        float _1710 = fma(_749, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747));
        float _1713 = fma(_749, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747));
        float _1716 = fma(_749, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747));
        float _1854;
        if (_1710 > 0.0)
        {
            _1854 = abs((1.0 - _1699) / _1710);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1699 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1854 = frontier_phi_25_21_ladder;
        }
        float _2119;
        if (_1713 > 0.0)
        {
            _2119 = abs((1.0 - _1703) / _1713);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1703 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2119 = frontier_phi_37_32_ladder;
        }
        float _2324;
        if (_1716 > 0.0)
        {
            _2324 = abs((1.0 - _1707) / _1716);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1707 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2324 = frontier_phi_46_43_ladder;
        }
        float _2326 = isnan(_2119) ? _1854 : (isnan(_1854) ? _2119 : min(_1854, _2119));
        float _2327 = isnan(_2324) ? _2326 : (isnan(_2326) ? _2324 : min(_2326, _2324));
        float _2331 = (_2327 * _1710) + _1699;
        float _2332 = (_2327 * _1713) + _1703;
        float _2333 = (_2327 * _1716) + _1707;
        float _2334 = _2327 * 9.9999997473787516355514526367188e-05;
        float _2335 = (-1.0) - _2334;
        float _2337 = _2334 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2333 > _2337) || ((_2333 < _2335) || ((_2332 > _2337) || ((_2332 < _2335) || ((_2331 < _2335) || (_2331 > _2337))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2532 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2333, cbModelParam._m0[17u].z, fma(_2332, cbModelParam._m0[17u].y, _2331 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2333, cbModelParam._m0[18u].z, fma(_2332, cbModelParam._m0[18u].y, _2331 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2333, cbModelParam._m0[19u].z, fma(_2332, cbModelParam._m0[19u].y, _2331 * cbModelParam._m0[19u].x))), _1645);
            frontier_phi_22_46_ladder = _2532.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2532.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2532.x * cbModelParam._m0[1u].z;
        }
        _1735 = frontier_phi_22_46_ladder_2;
        _1737 = frontier_phi_22_46_ladder_1;
        _1739 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1719 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_747, _748, _749), _1645);
        _1735 = _1719.x * cbModelParam._m0[1u].z;
        _1737 = _1719.y * cbModelParam._m0[1u].z;
        _1739 = _1719.z * cbModelParam._m0[1u].z;
    }
    float _1751 = ((((1.0 - _768) * ((_755 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_768 * _755)) * _739;
    float _1752 = _1751 * ((cbModelParam._m0[1u].w * (_1735 - _1636)) + _1636);
    float _1753 = _1751 * ((cbModelParam._m0[1u].w * (_1737 - _1638)) + _1638);
    float _1754 = _1751 * ((cbModelParam._m0[1u].w * (_1739 - _1640)) + _1640);
    float _1757 = fma(_1754, cbSceneParam._m0[89u].z, fma(_1753, cbSceneParam._m0[89u].y, _1752 * cbSceneParam._m0[89u].x));
    float _1760 = fma(_1754, cbSceneParam._m0[90u].z, fma(_1753, cbSceneParam._m0[90u].y, _1752 * cbSceneParam._m0[90u].x));
    float _1763 = fma(_1754, cbSceneParam._m0[91u].z, fma(_1753, cbSceneParam._m0[91u].y, _1752 * cbSceneParam._m0[91u].x));
    uvec4 _1773 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1775 = _1773.x * 14u;
    uint _1776 = _1775 + 13u;
    float _1783 = _739 + (-1.0);
    float _1788 = (cbLight._m0[_1776].x * _1783) + 1.0;
    float _1789 = (cbLight._m0[_1776].y * _1783) + 1.0;
    float _1790 = (cbLight._m0[_1776].z * _1783) + 1.0;
    float _1791 = (cbLight._m0[_1776].w * _1783) + 1.0;
    uint _1792 = _1775 + 5u;
    float _1798 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
    uint _1802 = _1775 + 4u;
    float _1808 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
    uint _1812 = _1775 | 1u;
    float _1823 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_588, _589, _590));
    float _1826 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_588, _589, _590));
    float _3939 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _3950 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1831 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * 0.3183098733425140380859375;
    float _1833 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * 0.3183098733425140380859375;
    float _1840 = ((cbLight._m0[_1792].x * _1798) * _1833) + ((cbLight._m0[_1802].x * _1808) * _1831);
    float _1841 = ((_1798 * cbLight._m0[_1792].y) * _1833) + ((_1808 * cbLight._m0[_1802].y) * _1831);
    float _1842 = ((_1798 * cbLight._m0[_1792].z) * _1833) + ((_1808 * cbLight._m0[_1802].z) * _1831);
    uvec4 _1846 = floatBitsToUint(cbLight._m0[_1775 + 12u]);
    bool _1848 = _1846.x == 0u;
    float _1859;
    float _1861;
    float _1863;
    if (_1848)
    {
        _1859 = _1840;
        _1861 = _1841;
        _1863 = _1842;
    }
    else
    {
        uint _1867 = _1775 + 6u;
        float _1883 = (dot(vec3(cbLight._m0[_1775 + 2u].xyz), vec3(_588, _589, _590)) * 0.5) + 0.5;
        float _1884 = _1883 * _1883;
        float _3961 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1885 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1886 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _1859 = (((cbLight._m0[_1867].x * 0.3183098733425140380859375) * _1885) * _1886) + _1840;
        _1861 = (((cbLight._m0[_1867].y * 0.3183098733425140380859375) * _1885) * _1886) + _1841;
        _1863 = (((cbLight._m0[_1867].z * 0.3183098733425140380859375) * _1885) * _1886) + _1842;
    }
    bool _1866 = _1846.y == 0u;
    float _1904;
    float _1906;
    float _1908;
    if (_1866)
    {
        _1904 = _1859;
        _1906 = _1861;
        _1908 = _1863;
    }
    else
    {
        uint _2063 = _1775 + 7u;
        float _2079 = (dot(vec3(cbLight._m0[_1775 + 3u].xyz), vec3(_588, _589, _590)) * 0.5) + 0.5;
        float _2080 = _2079 * _2079;
        float _3977 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2081 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _2082 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
        _1904 = (((cbLight._m0[_2063].x * 0.3183098733425140380859375) * _2081) * _2082) + _1859;
        _1906 = (((cbLight._m0[_2063].y * 0.3183098733425140380859375) * _2081) * _2082) + _1861;
        _1908 = (((cbLight._m0[_2063].z * 0.3183098733425140380859375) * _2081) * _2082) + _1863;
    }
    uint _1911 = _1775 + 8u;
    float _1924 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1775].w)) * _591) * 0.949999988079071044921875);
    float _1925 = _1924 * _1924;
    float _1926 = cbLight._m0[_1775].x + _668;
    float _1927 = cbLight._m0[_1775].y + _669;
    float _1928 = cbLight._m0[_1775].z + _670;
    float _1932 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
    float _1933 = _1932 * _1926;
    float _1934 = _1932 * _1927;
    float _1935 = _1932 * _1928;
    float _1936 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_1775].xyz));
    float _3993 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _4004 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _1940 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _1941 = dot(vec3(_588, _589, _590), vec3(_1933, _1934, _1935));
    float _4015 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _1945 = dot(vec3(cbLight._m0[_1775].xyz), vec3(_1933, _1934, _1935));
    float _4026 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1949 = _1925 * _1925;
    float _1953 = ((_1944 * _1944) * (_1949 + (-1.0))) + 1.0;
    float _1964 = (exp2(log2(1.0 - (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1965 = 1.0 - _1925;
    float _1976 = (0.5 / (((_1940 * ((_1939 * _1965) + _1925)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _1965) + _1925) * _1939))) * _1939;
    float _4037 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1978 = (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1949 / ((_1953 * _1953) * 3.141590118408203125));
    uint _1989 = _1775 + 9u;
    float _2000 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1812].w)) * _591) * 0.949999988079071044921875);
    float _2001 = _2000 * _2000;
    float _2002 = cbLight._m0[_1812].x + _668;
    float _2003 = cbLight._m0[_1812].y + _669;
    float _2004 = cbLight._m0[_1812].z + _670;
    float _2008 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
    float _2009 = _2008 * _2002;
    float _2010 = _2008 * _2003;
    float _2011 = _2008 * _2004;
    float _2012 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_1812].xyz));
    float _4048 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _2016 = dot(vec3(_588, _589, _590), vec3(_2009, _2010, _2011));
    float _4059 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _2020 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_2009, _2010, _2011));
    float _4070 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2024 = _2001 * _2001;
    float _2028 = ((_2019 * _2019) * (_2024 + (-1.0))) + 1.0;
    float _2037 = (exp2(log2(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2038 = 1.0 - _2001;
    float _2048 = (0.5 / (((_1940 * ((_2015 * _2038) + _2001)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _2038) + _2001) * _2015))) * _2015;
    float _4081 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2050 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_2024 / ((_2028 * _2028) * 3.141590118408203125));
    float _2060 = (((_2037 * cbLight._m0[_1989].x) * _2050) * _1798) + (((_1964 * cbLight._m0[_1911].x) * _1978) * _1808);
    float _2061 = (((_2037 * cbLight._m0[_1989].y) * _2050) * _1798) + (((_1964 * cbLight._m0[_1911].y) * _1978) * _1808);
    float _2062 = (((_2037 * cbLight._m0[_1989].z) * _2050) * _1798) + (((_1964 * cbLight._m0[_1911].z) * _1978) * _1808);
    float _2124;
    float _2126;
    float _2128;
    if (_1848)
    {
        _2124 = _2060;
        _2126 = _2061;
        _2128 = _2062;
    }
    else
    {
        uint _2130 = _1775 + 2u;
        uint _2134 = _1775 + 10u;
        float _2148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2130].w)) * _591) * 0.949999988079071044921875);
        float _2149 = _2148 * _2148;
        float _2150 = cbLight._m0[_2130].x + _668;
        float _2151 = cbLight._m0[_2130].y + _669;
        float _2152 = cbLight._m0[_2130].z + _670;
        float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
        float _2157 = _2156 * _2150;
        float _2158 = _2156 * _2151;
        float _2159 = _2156 * _2152;
        float _2160 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2130].xyz));
        float _4092 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2163 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _2164 = dot(vec3(_588, _589, _590), vec3(_2157, _2158, _2159));
        float _4103 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2167 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2168 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_2157, _2158, _2159));
        float _4114 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2172 = _2149 * _2149;
        float _2176 = ((_2167 * _2167) * (_2172 + (-1.0))) + 1.0;
        float _2185 = (exp2(log2(1.0 - (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2186 = 1.0 - _2149;
        float _2196 = (0.5 / (((_1940 * ((_2163 * _2186) + _2149)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _2186) + _2149) * _2163))) * _2163;
        float _4125 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2198 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2172 / ((_2176 * _2176) * 3.141590118408203125));
        float _2199 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _2124 = (((_2185 * cbLight._m0[_2134].x) * _2198) * _2199) + _2060;
        _2126 = (((_2185 * cbLight._m0[_2134].y) * _2198) * _2199) + _2061;
        _2128 = (((_2185 * cbLight._m0[_2134].z) * _2198) * _2199) + _2062;
    }
    float _2234;
    float _2236;
    float _2238;
    if (_1866)
    {
        _2234 = _2124;
        _2236 = _2126;
        _2238 = _2128;
    }
    else
    {
        uint _2245 = _1775 + 3u;
        uint _2249 = _1775 + 11u;
        float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _591) * 0.949999988079071044921875);
        float _2264 = _2263 * _2263;
        float _2265 = cbLight._m0[_2245].x + _668;
        float _2266 = cbLight._m0[_2245].y + _669;
        float _2267 = cbLight._m0[_2245].z + _670;
        float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
        float _2272 = _2271 * _2265;
        float _2273 = _2271 * _2266;
        float _2274 = _2271 * _2267;
        float _2275 = dot(vec3(_588, _589, _590), vec3(cbLight._m0[_2245].xyz));
        float _4141 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2279 = dot(vec3(_588, _589, _590), vec3(_2272, _2273, _2274));
        float _4152 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _2283 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2272, _2273, _2274));
        float _4163 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2287 = _2264 * _2264;
        float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
        float _2300 = (exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2301 = 1.0 - _2264;
        float _2311 = (0.5 / (((_1940 * ((_2278 * _2301) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _2301) + _2264) * _2278))) * _2278;
        float _4174 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2313 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
        float _2314 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
        _2234 = (((_2300 * cbLight._m0[_2249].x) * _2313) * _2314) + _2124;
        _2236 = (((_2300 * cbLight._m0[_2249].y) * _2313) * _2314) + _2126;
        _2238 = (((_2300 * cbLight._m0[_2249].z) * _2313) * _2314) + _2128;
    }
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    if (_1773.y == 0u)
    {
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2389;
        float _2391 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2389;
        float _2392 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2389;
        uvec4 _2404 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2405 = _2404.x;
        uint _2416 = uint((float(_2404.y) * floor(float(uint(cbSceneParam._m0[85u].y * _677) / _2405))) + floor(float(uint(cbSceneParam._m0[85u].x * _676) / _2405)));
        float _2426 = (log2(_2392 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2427 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        uint _2430 = uint(isnan(14.0) ? _2427 : (isnan(_2427) ? 14.0 : min(_2427, 14.0)));
        uvec4 _2435 = texelFetch(g_lightClusterGridBuffer, int(((_2430 << 2u) + (_2416 << 6u)) >> 2u));
        uint _2436 = _2435.x;
        uint _2437 = _2404.z;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        if (((((1u << ((_2437 >> 4u) & 15u)) + 4294967295u) & _2436) == 0u) || ((_2437 & 240u) == 0u))
        {
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
            _2545 = 0.0;
            _2547 = 0.0;
        }
        else
        {
            float _2538;
            float _2540;
            float _2542;
            float _2544;
            float _2546;
            float _2548;
            float _2682 = 0.0;
            float _2683 = 0.0;
            float _2684 = 0.0;
            float _2685 = 0.0;
            float _2686 = 0.0;
            float _2687 = 0.0;
            uint _2688 = 0u;
            uint _2697;
            bool _2698;
            for (;;)
            {
                _2697 = texelFetch(g_lightClassification, int((((_2430 << 5u) + (_2416 << 9u)) + (_2688 << 2u)) >> 2u)).x;
                _2698 = _2697 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2698)
                {
                    frontier_phi_61_pred = _2682;
                    frontier_phi_61_pred_1 = _2687;
                    frontier_phi_61_pred_2 = _2686;
                    frontier_phi_61_pred_3 = _2685;
                    frontier_phi_61_pred_4 = _2684;
                    frontier_phi_61_pred_5 = _2683;
                }
                else
                {
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    uint _2812;
                    _2806 = _2682;
                    _2807 = _2683;
                    _2808 = _2684;
                    _2809 = _2685;
                    _2810 = _2686;
                    _2811 = _2687;
                    _2812 = _2697;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    for (;;)
                    {
                        uint _2816 = uint(findLSB(_2812)) + (_2688 << 5u);
                        uint _2813 = (_2812 + 4294967295u) & _2812;
                        uint _2818 = _2816 * 48u;
                        vec4 _2832 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2818)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2818 + 3u)).x));
                        uint _2838 = (_2816 * 48u) + 4u;
                        vec4 _2851 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2838)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 3u)).x));
                        uint _2857 = (_2816 * 48u) + 8u;
                        vec3 _2868 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2857)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2857 + 2u)).x));
                        float _2872 = _2832.x - _2390;
                        float _2873 = _2832.y - _2391;
                        float _2874 = _2832.z - _2392;
                        float _2875 = dot(vec3(_2872, _2873, _2874), vec3(_2872, _2873, _2874));
                        float _2878 = inversesqrt(_2875);
                        float _2879 = _2878 * _2872;
                        float _2880 = _2878 * _2873;
                        float _2881 = _2878 * _2874;
                        float _2882 = dot(vec3(_695, _698, _701), vec3(_2879, _2880, _2881));
                        float _2887 = 1.0 - (_2875 * _2832.w);
                        float _4200 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2888 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                        float _2889 = sqrt(_2875) * _2851.w;
                        float _2892 = 1.39999997615814208984375 / (_2889 + 1.39999997615814208984375);
                        float _2893 = _2892 * _2892;
                        float _2896 = ((1.0 - _2893) * _2882) + _2893;
                        float _2899 = _2889 * _2889;
                        float _2903 = ((isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0))) * _2888) / ((_2899 * 0.699999988079071044921875) + 1.0);
                        float _2907 = (-0.0) - _2390;
                        float _2908 = (-0.0) - _2391;
                        float _2909 = (-0.0) - _2392;
                        float _2913 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
                        float _2914 = _2913 * _2907;
                        float _2915 = _2913 * _2908;
                        float _2916 = _2913 * _2909;
                        float _2924 = exp2(log2(1.0 / ((_2899 * 3.5) + 5.0)) * 0.25);
                        float _2925 = 1.0 - _755;
                        float _2932 = sqrt(1.0 - ((1.0 - (_2925 * _2925)) * (1.0 - (_2924 * _2924))));
                        float _2933 = _2932 * _2932;
                        float _2934 = _2933 * _2933;
                        float _2935 = _2914 + _2879;
                        float _2936 = _2915 + _2880;
                        float _2937 = _2916 + _2881;
                        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
                        float _2945 = dot(vec3(_695, _698, _701), vec3(_2914, _2915, _2916));
                        float _4216 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                        float _2948 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                        float _2949 = dot(vec3(_695, _698, _701), vec3(_2941 * _2935, _2941 * _2936, _2941 * _2937));
                        float _4227 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2952 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                        float _2956 = ((_2952 * _2952) * (_2934 + (-1.0))) + 1.0;
                        float _2957 = _2892 * _2933;
                        float _2958 = _2957 * _2957;
                        float _2961 = ((1.0 - _2958) * _2882) + _2958;
                        float _4238 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2962 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                        float _2963 = 1.0 - _2933;
                        float _2973 = (0.5 / (((_2962 * ((_2948 * _2963) + _2933)) + 9.9999999392252902907785028219223e-09) + (((_2962 * _2963) + _2933) * _2948))) * _2962;
                        float _4249 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2984 = (((_2934 * 3.1415927410125732421875) * (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) / ((_2956 * _2956) * ((_2899 * 2.1991131305694580078125) + 3.141590118408203125))) * _2888;
                        _2741 = (_2903 * _2851.x) + _2809;
                        _2742 = (_2903 * _2851.y) + _2810;
                        _2743 = (_2903 * _2851.z) + _2811;
                        _2738 = (_2984 * _2868.x) + _2806;
                        _2739 = (_2984 * _2868.y) + _2807;
                        _2740 = (_2984 * _2868.z) + _2808;
                        if (_2813 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2806 = _2738;
                            _2807 = _2739;
                            _2808 = _2740;
                            _2809 = _2741;
                            _2810 = _2742;
                            _2811 = _2743;
                            _2812 = _2813;
                        }
                    }
                    frontier_phi_61_pred = _2738;
                    frontier_phi_61_pred_1 = _2743;
                    frontier_phi_61_pred_2 = _2742;
                    frontier_phi_61_pred_3 = _2741;
                    frontier_phi_61_pred_4 = _2740;
                    frontier_phi_61_pred_5 = _2739;
                }
                _2538 = frontier_phi_61_pred;
                _2548 = frontier_phi_61_pred_1;
                _2546 = frontier_phi_61_pred_2;
                _2544 = frontier_phi_61_pred_3;
                _2542 = frontier_phi_61_pred_4;
                _2540 = frontier_phi_61_pred_5;
                uint _2689 = _2688 + 1u;
                if (_2689 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2682 = _2538;
                    _2683 = _2540;
                    _2684 = _2542;
                    _2685 = _2544;
                    _2686 = _2546;
                    _2687 = _2548;
                    _2688 = _2689;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
            _2545 = _2546;
            _2547 = _2548;
        }
        uvec4 _2551 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2552 = _2551.z;
        uint _2554 = (_2552 >> 8u) & 15u;
        float _2650;
        float _2652;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        if (((4294967295u << _2554) & _2436) == 0u)
        {
            _2650 = _2537;
            _2652 = _2539;
            _2654 = _2541;
            _2656 = _2543;
            _2658 = _2545;
            _2660 = _2547;
        }
        else
        {
            float _2675 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
            float _2676 = _2675 * _2390;
            float _2677 = _2675 * _2391;
            float _2678 = _2675 * _2392;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2554 < ((_2552 >> 12u) & 15u))
            {
                float _2651;
                float _2653;
                float _2655;
                float _2657;
                float _2659;
                float _2661;
                float _2789 = _2537;
                float _2790 = _2539;
                float _2791 = _2541;
                float _2792 = _2543;
                float _2793 = _2545;
                float _2794 = _2547;
                uint _2795 = _2554;
                uint _2804;
                bool _2805;
                for (;;)
                {
                    _2804 = texelFetch(g_lightClassification, int((((_2430 << 5u) + (_2416 << 9u)) + (_2795 << 2u)) >> 2u)).x;
                    _2805 = _2804 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2805)
                    {
                        frontier_phi_67_pred = _2792;
                        frontier_phi_67_pred_1 = _2793;
                        frontier_phi_67_pred_2 = _2794;
                        frontier_phi_67_pred_3 = _2791;
                        frontier_phi_67_pred_4 = _2790;
                        frontier_phi_67_pred_5 = _2789;
                    }
                    else
                    {
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2994;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3002 = _2789;
                        float _3003 = _2790;
                        float _3004 = _2791;
                        float _3005 = _2792;
                        float _3006 = _2793;
                        float _3007 = _2794;
                        uint _3008 = _2804;
                        uint _3009;
                        vec4 _3034;
                        float _3035;
                        vec4 _3050;
                        vec3 _3062;
                        vec4 _3077;
                        vec4 _3093;
                        float _3139;
                        bool _3140;
                        for (;;)
                        {
                            uint _3019 = ((_2795 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3008));
                            _3009 = (_3008 + 4294967295u) & _3008;
                            uint _3021 = _3019 * 40u;
                            _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            _3035 = _3034.w;
                            uint _3037 = (_3019 * 40u) + 4u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            uint _3052 = (_3019 * 40u) + 8u;
                            _3062 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x));
                            uint _3064 = (_3019 * 40u) + 16u;
                            _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            uint _3080 = (_3019 * 40u) + 20u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3095 = (_3019 * 40u) + 24u;
                            vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            uint _3114 = (_3019 * 40u) + 28u;
                            vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            _3139 = fma(_2392, _3127.z, fma(_2391, _3127.y, _3127.x * _2390)) + _3127.w;
                            _3140 = !((fma(_2392, _3108.z, fma(_2391, _3108.y, _3108.x * _2390)) + _3108.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3140)
                            {
                                float _3167 = _3034.x - _2390;
                                float _3168 = _3034.y - _2391;
                                float _3169 = _3034.z - _2392;
                                float _3170 = dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169));
                                float _3173 = inversesqrt(_3170);
                                float _3174 = _3173 * _3167;
                                float _3175 = _3173 * _3168;
                                float _3176 = _3173 * _3169;
                                float _3180 = 1.0 - (_3170 / (_3035 * _3035));
                                float _4260 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3181 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3185 = sqrt(_3170) * _3050.w;
                                float _3187 = 1.39999997615814208984375 / (_3185 + 1.39999997615814208984375);
                                float _3188 = _3187 * _3187;
                                float _3191 = ((1.0 - _3188) * dot(vec3(_3174, _3175, _3176), vec3(_695, _698, _701))) + _3188;
                                float _3194 = _3185 * _3185;
                                float _3198 = (fma(_2392, _3077.z, fma(_2391, _3077.y, _3077.x * _2390)) + _3077.w) / _3139;
                                float _3199 = (fma(_2392, _3093.z, fma(_2391, _3093.y, _3093.x * _2390)) + _3093.w) / _3139;
                                float _3203 = 1.0 - dot(vec2(_3198, _3199), vec2(_3198, _3199));
                                float _4276 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3204 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                                float _3205 = _3204 * (((isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))) * _3181) / ((_3194 * 0.699999988079071044921875) + 1.0));
                                float _3217 = exp2(log2(1.0 / ((_3194 * 3.5) + 5.0)) * 0.25);
                                float _3218 = 1.0 - _755;
                                float _3225 = sqrt(1.0 - ((1.0 - (_3218 * _3218)) * (1.0 - (_3217 * _3217))));
                                float _3226 = _3225 * _3225;
                                float _3227 = _3226 * _3226;
                                float _3228 = _3174 - _2676;
                                float _3229 = _3175 - _2677;
                                float _3230 = _3176 - _2678;
                                float _3234 = inversesqrt(dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230)));
                                float _3238 = dot(vec3(_695, _698, _701), vec3((-0.0) - _2676, (-0.0) - _2677, (-0.0) - _2678));
                                float _4287 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3241 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3242 = dot(vec3(_695, _698, _701), vec3(_3234 * _3228, _3234 * _3229, _3234 * _3230));
                                float _4298 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3245 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                                float _3249 = ((_3245 * _3245) * (_3227 + (-1.0))) + 1.0;
                                float _3250 = _3187 * _3226;
                                float _3251 = _3250 * _3250;
                                float _3257 = ((1.0 - _3251) * dot(vec3(_695, _698, _701), vec3(_3174, _3175, _3176))) + _3251;
                                float _4309 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3258 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                                float _3259 = 1.0 - _3226;
                                float _3269 = (0.5 / (((_3258 * ((_3241 * _3259) + _3226)) + 9.9999999392252902907785028219223e-09) + (((_3258 * _3259) + _3226) * _3241))) * _3258;
                                float _4320 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3279 = (_3204 * _3181) * (((_3227 * 3.1415927410125732421875) * (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) / ((_3249 * _3249) * ((_3194 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3279 * _3062.x;
                                frontier_phi_73_pred_1 = _3279 * _3062.y;
                                frontier_phi_73_pred_2 = _3205 * _3050.z;
                                frontier_phi_73_pred_3 = _3205 * _3050.y;
                                frontier_phi_73_pred_4 = _3205 * _3050.x;
                                frontier_phi_73_pred_5 = _3279 * _3062.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3283 = frontier_phi_73_pred;
                            _3284 = frontier_phi_73_pred_1;
                            _3288 = frontier_phi_73_pred_2;
                            _3287 = frontier_phi_73_pred_3;
                            _3286 = frontier_phi_73_pred_4;
                            _3285 = frontier_phi_73_pred_5;
                            _2992 = _3286 + _3005;
                            _2993 = _3287 + _3006;
                            _2994 = _3288 + _3007;
                            _2989 = _3283 + _3002;
                            _2990 = _3284 + _3003;
                            _2991 = _3285 + _3004;
                            if (_3009 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _3009;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2992;
                        frontier_phi_67_pred_1 = _2993;
                        frontier_phi_67_pred_2 = _2994;
                        frontier_phi_67_pred_3 = _2991;
                        frontier_phi_67_pred_4 = _2990;
                        frontier_phi_67_pred_5 = _2989;
                    }
                    _2657 = frontier_phi_67_pred;
                    _2659 = frontier_phi_67_pred_1;
                    _2661 = frontier_phi_67_pred_2;
                    _2655 = frontier_phi_67_pred_3;
                    _2653 = frontier_phi_67_pred_4;
                    _2651 = frontier_phi_67_pred_5;
                    uint _2796 = _2795 + 1u;
                    if (_2796 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2789 = _2651;
                        _2790 = _2653;
                        _2791 = _2655;
                        _2792 = _2657;
                        _2793 = _2659;
                        _2794 = _2661;
                        _2795 = _2796;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2659;
                frontier_phi_55_56_ladder_1 = _2661;
                frontier_phi_55_56_ladder_2 = _2657;
                frontier_phi_55_56_ladder_3 = _2655;
                frontier_phi_55_56_ladder_4 = _2653;
                frontier_phi_55_56_ladder_5 = _2651;
            }
            else
            {
                frontier_phi_55_56_ladder = _2545;
                frontier_phi_55_56_ladder_1 = _2547;
                frontier_phi_55_56_ladder_2 = _2543;
                frontier_phi_55_56_ladder_3 = _2541;
                frontier_phi_55_56_ladder_4 = _2539;
                frontier_phi_55_56_ladder_5 = _2537;
            }
            _2650 = frontier_phi_55_56_ladder_5;
            _2652 = frontier_phi_55_56_ladder_4;
            _2654 = frontier_phi_55_56_ladder_3;
            _2656 = frontier_phi_55_56_ladder_2;
            _2658 = frontier_phi_55_56_ladder;
            _2660 = frontier_phi_55_56_ladder_1;
        }
        float _2665 = isnan(1.0) ? _739 : (isnan(_739) ? 1.0 : min(_739, 1.0));
        _2449 = (_2665 * _2656) + _1904;
        _2451 = (_2665 * _2658) + _1906;
        _2453 = (_2665 * _2660) + _1908;
        _2455 = ((_2650 * 0.039999999105930328369140625) * _2665) + _2234;
        _2457 = ((_2652 * 0.039999999105930328369140625) * _2665) + _2236;
        _2459 = ((_2654 * 0.039999999105930328369140625) * _2665) + _2238;
    }
    else
    {
        _2449 = _1904;
        _2451 = _1906;
        _2453 = _1908;
        _2455 = _2234;
        _2457 = _2236;
        _2459 = _2238;
    }
    float _4336 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4347 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4358 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    uint _2479 = _228 + 6u;
    float _2487 = _676 / cbSceneParam._m0[86u].x;
    float _2488 = _677 / cbSceneParam._m0[86u].y;
    vec4 _2502 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2487, _2488, (log2((isnan(cbSceneParam._m0[77u].w) ? _609 : (isnan(_609) ? cbSceneParam._m0[77u].w : min(_609, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2504 = _2502.x;
    float _2505 = _2502.y;
    float _2506 = _2502.z;
    float _2507 = _2502.w;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    if (_609 > cbSceneParam._m0[78u].w)
    {
        float _2562 = isnan(_609) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _609 : min(cbSceneParam._m0[80u].w, _609));
        float _2563 = _2562 / _609;
        float _2574 = _2563 * _661;
        float _2575 = _662 * _2563;
        float _2576 = (-0.0) - _2575;
        float _2578 = _2563 * _663;
        float _2580 = (cbSceneParam._m0[77u].w * _2576) / _2562;
        float _2581 = _2580 + cbSceneParam._m0[79u].w;
        float _2582 = cbSceneParam._m0[79u].w - _2575;
        float _2588 = sqrt(((_2574 * _2574) + (_2575 * _2575)) + (_2578 * _2578));
        float _2591 = (1.0 - (cbSceneParam._m0[77u].w / _2562)) * _2588;
        float _2596 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2598 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2751;
        if (abs((_2576 - _2580) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2751 = ((((_2581 > 0.0) ? exp2(_2596 * _2581) : (2.0 - exp2(_2598 * _2581))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2591;
        }
        else
        {
            float _2711 = 1.0 / cbSceneParam._m0[80u].x;
            float _2712 = isnan(_2582) ? _2581 : (isnan(_2581) ? _2582 : max(_2581, _2582));
            float _2713 = isnan(_2582) ? _2581 : (isnan(_2581) ? _2582 : min(_2581, _2582));
            float _2722 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : min(_2712, 0.0));
            float _2723 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : min(_2713, 0.0));
            _2751 = ((abs(_2588 / _2576) * cbSceneParam._m0[80u].y) * ((((_2722 - _2723) * 2.0) - ((exp2(_2596 * (isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0)))) - exp2(_2596 * (isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0))))) * _2711)) - ((exp2(_2598 * _2722) - exp2(_2598 * _2723)) * _2711))) + (_2591 * cbSceneParam._m0[80u].z);
        }
        vec4 _2753 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2487, _2488, 1.0), 0.0);
        float _2762 = exp2((_2751 * (-1.44269502162933349609375)) * (1.0 - _2753.w));
        float _2763 = log2(_2762);
        float _2779 = log2(_2507);
        _2600 = (exp2(_2779 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2763 * cbSceneParam._m0[78u].x)) * _2753.x) / cbSceneParam._m0[78u].x)) + _2504;
        _2602 = (exp2(_2779 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2763 * cbSceneParam._m0[78u].y)) * _2753.y) / cbSceneParam._m0[78u].y)) + _2505;
        _2604 = (exp2(_2779 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2763 * cbSceneParam._m0[78u].z)) * _2753.z) / cbSceneParam._m0[78u].z)) + _2506;
        _2606 = _2762 * _2507;
    }
    else
    {
        _2600 = _2504;
        _2602 = _2505;
        _2604 = _2506;
        _2606 = _2507;
    }
    float _2618 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2619 = _2618 == 3.0;
    float _2620 = log2(_2606);
    float _2627 = exp2(_2620 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2449 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _739))) + ((_2455 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1544)) * cbPerFrame._m0[3u].x));
    float _2628 = exp2(_2620 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2451 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _739))) + ((_2457 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1544)) * cbPerFrame._m0[3u].x));
    float _2629 = exp2(_2620 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2453 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _739))) + ((_2459 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1544)) * cbPerFrame._m0[3u].x));
    float _2638 = (_2618 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2638 * (_2619 ? _2627 : (_2627 + (cbSceneParam._m0[72u].w * _2600)));
    SV_Target.y = _2638 * (_2619 ? _2628 : (_2628 + (cbSceneParam._m0[72u].w * _2602)));
    SV_Target.z = _2638 * (_2619 ? _2629 : (_2629 + (cbSceneParam._m0[72u].w * _2604)));
    SV_Target.w = cbInstanceData._m0[_2479].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2479].w;
}


