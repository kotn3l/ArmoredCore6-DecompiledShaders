#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1382;
float _4024;
float _4025;
float _4026;
float _4027;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _369 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _371 = _369.x;
    float _381 = dot(vec4(_371, _369.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _398 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_371 - _381) * cbMtdParam._m0[24u].x) + _381) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4036 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _406 = (_399 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _407 = (_399 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _408 = (_399 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _425 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _445 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _457 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _471 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_447 - _457) * cbMtdParam._m0[24u].x) + _457) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4047 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _479 = (_472 * ((_425.x * cbMtdParam._m0[13u].x) - _406)) + _406;
    float _480 = (_472 * ((_425.y * cbMtdParam._m0[13u].y) - _407)) + _407;
    float _481 = (_472 * ((_425.z * cbMtdParam._m0[13u].z) - _408)) + _408;
    vec4 _498 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _282) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _283) + cbTextureTilingScale._m0[20u].w));
    vec4 _521 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _538 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _540 = _538.x;
    float _541 = _538.y;
    float _542 = _538.z;
    float _549 = ((_521.x - _540) * _399) + _540;
    float _550 = ((_521.y - _541) * _399) + _541;
    float _551 = ((_521.z - _542) * _399) + _542;
    vec4 _563 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _576 = ((_563.z - _551) * _472) + _551;
    float _579 = ((((_563.x - _549) * _472) + _549) * 2.0) + (-1.0);
    float _580 = ((((_563.y - _550) * _472) + _550) * 2.0) + (-1.0);
    float _581 = dot(vec2(_579, _580), vec2(_579, _580));
    float _4058 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _586 = sqrt(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))));
    vec4 _599 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _617 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _619 = _617.x;
    float _620 = 1.0 - _619;
    float _626 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _629 = ((isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : min(_626, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _638 = (_629 - ((((((_619 - _620) * cbMtdParam._m0[24u].z) + _620) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _629))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4079 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _639 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _646 = (_639 * (cbMtdParam._m0[17u].x - _479)) + _479;
    float _647 = (_639 * (cbMtdParam._m0[17u].y - _480)) + _480;
    float _648 = (_639 * (cbMtdParam._m0[17u].z - _481)) + _481;
    vec4 _660 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _662 = _660.x;
    float _663 = 1.0 - _662;
    float _690 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_662 - _663) * cbMtdParam._m0[24u].w) + _663) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4090 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _691 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _699 = ((((cbMtdParam._m0[10u].x - _646) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _691) + _646;
    float _700 = ((((cbMtdParam._m0[10u].y - _647) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _691) + _647;
    float _701 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _648)) * _691) + _648;
    float _706 = (((_498.z - _576) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _576;
    vec4 _720 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _727 = (_720.x * 2.0) + (-1.0);
    float _728 = (_720.y * 2.0) + (-1.0);
    float _729 = dot(vec2(_727, _728), vec2(_727, _728));
    float _4101 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _737 = (_639 * (_720.z - _706)) + _706;
    float _740 = ((cbMtdParam._m0[23u].y - _737) * _691) + _737;
    vec4 _759 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _765 = (_759.x * 2.0) + (-1.0);
    float _766 = (_759.y * 2.0) + (-1.0);
    float _767 = dot(vec2(_765, _766), vec2(_765, _766));
    float _4112 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _777 = _579 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_498.x * 2.0) + (-1.0)));
    float _778 = _580 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_498.y * 2.0) + (-1.0)));
    float _790 = (((_727 - _777) + (cbMtdParam._m0[21u].x * _777)) * _639) + _777;
    float _791 = (((_728 - _778) + (cbMtdParam._m0[21u].x * _778)) * _639) + _778;
    float _792 = (_639 * (sqrt(1.0 - (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) - _586)) + _586;
    float _803 = (((_765 - _790) + (_790 * cbMtdParam._m0[22u].z)) * _691) + _790;
    float _804 = (((_766 - _791) + (_791 * cbMtdParam._m0[22u].z)) * _691) + _791;
    float _805 = ((sqrt(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) - _792) * _691) + _792;
    float _807 = cbMtdParam._m0[22u].x + _599.w;
    float _810 = fma(_805, _250 * NORMAL.x, fma(_804, _257 * TANGENT.x, (_243 * _235) * _803));
    float _813 = fma(_805, _250 * NORMAL.y, fma(_804, _257 * TANGENT.y, (_243 * _236) * _803));
    float _816 = fma(_805, _250 * NORMAL.z, fma(_804, _257 * TANGENT.z, (_243 * _237) * _803));
    float _820 = inversesqrt(dot(vec3(_810, _813, _816), vec3(_810, _813, _816)));
    float _821 = _820 * _810;
    float _822 = _820 * _813;
    float _823 = _820 * _816;
    float _4123 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _824 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _4134 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _4145 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _4156 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _4167 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _842 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _893 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _883);
    float _894 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _883);
    float _895 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _883);
    float _899 = inversesqrt(dot(vec3(_893, _894, _895), vec3(_893, _894, _895)));
    float _900 = _893 * _899;
    float _901 = _894 * _899;
    float _902 = _895 * _899;
    vec4 _907 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _909 = _907.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1063 = sqrt(((_893 * _893) + (_894 * _894)) + (_895 * _895));
        float _1069 = (cbMatDynParam._m0[5u].x * _1063) + cbMatDynParam._m0[5u].y;
        float _4178 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1074 = (cbMatDynParam._m0[5u].z * _1063) + cbMatDynParam._m0[5u].w;
        float _4189 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) - _1070)) + _1070) < ((_909 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _920 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _921 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _939 = fma(_823, cbSceneParam._m0[5u].z, fma(_822, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _821));
    float _942 = fma(_823, cbSceneParam._m0[6u].z, fma(_822, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _821));
    float _945 = fma(_823, cbSceneParam._m0[7u].z, fma(_822, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _821));
    uint _958 = _263 + 9u;
    uint _959 = _958 + uint(cbMatDynParam._m0[0u].w);
    float _965 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * cbInstanceData._m0[_959].x;
    float _966 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) * cbInstanceData._m0[_959].y;
    float _967 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) * cbInstanceData._m0[_959].z;
    float _4200 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _4211 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _4222 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    vec4 _979 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _920, cbSceneParam._m0[86u].y * _921));
    float _983 = ((isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * TEXCOORD_5.w) * _979.x;
    float _984 = dot(vec3(_821, _822, _823), vec3(_900, _901, _902));
    float _987 = _984 * 2.0;
    float _991 = (_987 * _821) - _900;
    float _992 = (_987 * _822) - _901;
    float _993 = (_987 * _823) - _902;
    float _997 = abs(dot(vec3(_900, _901, _902), vec3(_821, _822, _823)));
    float _4233 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _999 = sqrt(_824);
    float _1012 = exp2((_999 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_999 * 3.0));
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1381;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1106 = fma(_1052, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1044));
        float _1110 = fma(_1052, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1044));
        float _1114 = fma(_1052, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1044));
        float _1139 = _1044 + _821;
        float _1140 = _1048 + _822;
        float _1141 = _1052 + _823;
        float _1151 = fma(_1141, cbModelParam._m0[26u].z, fma(_1140, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1139)) - _1106;
        float _1152 = fma(_1141, cbModelParam._m0[27u].z, fma(_1140, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1139)) - _1110;
        float _1153 = fma(_1141, cbModelParam._m0[28u].z, fma(_1140, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1139)) - _1114;
        float _1157 = inversesqrt(dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153)));
        float _1170 = ((_1157 * _1151) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1106 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1157 * _1152) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1110 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1157 * _1153) / cbModelParam._m0[34u].z) + ((((((_1114 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        float _1209 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1175.x + (-0.5));
        float _1211 = _1209 * (_1175.y + (-0.5));
        float _1212 = _1209 * (_1175.z + (-0.5));
        float _1219 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1182.x + (-0.5));
        float _1221 = _1219 * (_1182.y + (-0.5));
        float _1222 = _1219 * (_1182.z + (-0.5));
        float _1229 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1189.x + (-0.5));
        float _1231 = _1229 * (_1189.y + (-0.5));
        float _1232 = _1229 * (_1189.z + (-0.5));
        float _1239 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1196.x + (-0.5));
        float _1241 = _1239 * (_1196.y + (-0.5));
        float _1242 = _1239 * (_1196.z + (-0.5));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = _1210 * 0.5;
        float _1247 = _1220 * 0.5;
        float _1248 = _1230 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1263 = (dot(vec3(_821, _822, _823), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1273 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4281 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1275 + 1.0))) + _1280) * _1243;
        float _1290 = _1211 * 0.5;
        float _1291 = _1221 * 0.5;
        float _1292 = _1231 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_821, _822, _823), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4292 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4303 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4314 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1317 + 1.0))) + _1322) * _1244;
        float _1332 = _1212 * 0.5;
        float _1333 = _1222 * 0.5;
        float _1334 = _1232 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_821, _822, _823), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4325 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4336 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4347 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_1359 + 1.0))) + _1364) * _1245;
        _1381 = _1212;
        _1383 = _1211;
        _1384 = _1210;
        _1385 = _1222;
        _1386 = _1221;
        _1387 = _1220;
        _1388 = _1232;
        _1389 = _1231;
        _1390 = _1230;
        _1391 = _1245;
        _1392 = _1244;
        _1393 = _1243;
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
    }
    else
    {
        _1381 = _1382;
        _1383 = _1382;
        _1384 = _1382;
        _1385 = _1382;
        _1386 = _1382;
        _1387 = _1382;
        _1388 = _1382;
        _1389 = _1382;
        _1390 = _1382;
        _1391 = _1382;
        _1392 = _1382;
        _1393 = _1382;
        _1394 = 0.0;
        _1395 = 0.0;
        _1396 = 0.0;
    }
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1423 = fma(_1052, cbModelParam._m0[30u].z, fma(_1048, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1044));
        float _1427 = fma(_1052, cbModelParam._m0[31u].z, fma(_1048, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1044));
        float _1431 = fma(_1052, cbModelParam._m0[32u].z, fma(_1048, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1044));
        float _1454 = _1044 + _821;
        float _1455 = _1048 + _822;
        float _1456 = _1052 + _823;
        float _1466 = fma(_1456, cbModelParam._m0[30u].z, fma(_1455, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1454)) - _1423;
        float _1467 = fma(_1456, cbModelParam._m0[31u].z, fma(_1455, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1454)) - _1427;
        float _1468 = fma(_1456, cbModelParam._m0[32u].z, fma(_1455, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1454)) - _1431;
        float _1472 = inversesqrt(dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468)));
        float _1485 = ((_1472 * _1466) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1423 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1472 * _1467) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1427 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1487 = ((_1472 * _1468) / cbModelParam._m0[35u].z) + ((((((_1431 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        float _1522 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1489.x + (-0.5));
        float _1524 = _1522 * (_1489.y + (-0.5));
        float _1525 = _1522 * (_1489.z + (-0.5));
        float _1532 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1496.x + (-0.5));
        float _1534 = _1532 * (_1496.y + (-0.5));
        float _1535 = _1532 * (_1496.z + (-0.5));
        float _1542 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1503.x + (-0.5));
        float _1544 = _1542 * (_1503.y + (-0.5));
        float _1545 = _1542 * (_1503.z + (-0.5));
        float _1552 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1510.x + (-0.5));
        float _1554 = _1552 * (_1510.y + (-0.5));
        float _1555 = _1552 * (_1510.z + (-0.5));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = _1523 * 0.5;
        float _1560 = _1533 * 0.5;
        float _1561 = _1543 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_821, _822, _823), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4388 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4399 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4410 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_1586 + 1.0))) + _1591) * _1556;
        float _1601 = _1524 * 0.5;
        float _1602 = _1534 * 0.5;
        float _1603 = _1544 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_821, _822, _823), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4421 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4432 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4443 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_1628 + 1.0))) + _1633) * _1557;
        float _1643 = _1525 * 0.5;
        float _1644 = _1535 * 0.5;
        float _1645 = _1545 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_821, _822, _823), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4454 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4465 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4476 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_1670 + 1.0))) + _1675) * _1558;
        _1692 = _1525;
        _1693 = _1524;
        _1694 = _1523;
        _1695 = _1535;
        _1696 = _1534;
        _1697 = _1533;
        _1698 = _1545;
        _1699 = _1544;
        _1700 = _1543;
        _1701 = _1558;
        _1702 = _1557;
        _1703 = _1556;
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
        _1706 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
    }
    else
    {
        _1692 = _1382;
        _1693 = _1382;
        _1694 = _1382;
        _1695 = _1382;
        _1696 = _1382;
        _1697 = _1382;
        _1698 = _1382;
        _1699 = _1382;
        _1700 = _1382;
        _1701 = _1382;
        _1702 = _1382;
        _1703 = _1382;
        _1704 = 0.0;
        _1705 = 0.0;
        _1706 = 0.0;
    }
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1394)) + _1394;
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1395)) + _1395;
    float _1718 = (cbModelParam._m0[1u].x * (_1706 - _1396)) + _1396;
    float _1739 = fma(_1718, cbSceneParam._m0[89u].z, fma(_1717, cbSceneParam._m0[89u].y, _1716 * cbSceneParam._m0[89u].x));
    float _1742 = fma(_1718, cbSceneParam._m0[90u].z, fma(_1717, cbSceneParam._m0[90u].y, _1716 * cbSceneParam._m0[90u].x));
    float _1745 = fma(_1718, cbSceneParam._m0[91u].z, fma(_1717, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1716));
    float _1760 = _991 * 0.5;
    float _1761 = _992 * 0.5;
    float _1762 = _993 * 0.5;
    float _1763 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1694, _1697, _1700, _1703));
    float _1766 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1769 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1803;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1776 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1381, _1385, _1388, _1391));
        float _1780 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1383, _1386, _1389, _1392));
        float _1784 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1384, _1387, _1390, _1393));
        float _1791 = dot(vec4(cbModelParam._m0[39u]), vec4(_1760, _1761, _1762, 1.0));
        _1803 = dot(vec3(isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1791) ? 0.0 : (isnan(0.0) ? _1791 : max(0.0, _1791))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1803 = 1.0;
    }
    float _1814;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1805 = dot(vec4(cbModelParam._m0[40u]), vec4(_1760, _1761, _1762, 1.0));
        _1814 = dot(vec3(isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1805) ? 0.0 : (isnan(0.0) ? _1805 : max(0.0, _1805))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1814 = 1.0;
    }
    float _1818 = (_1814 * cbModelParam._m0[1u].x) + (_1803 * (1.0 - cbModelParam._m0[1u].x));
    float _1828 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _824);
    float _1829 = isnan(_1828) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1828 : min(cbModelParam._m0[25u].z, _1828));
    float _1910;
    float _1912;
    float _1914;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1877 = fma(_1052, cbModelParam._m0[13u].z, fma(_1048, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1044)) + cbModelParam._m0[13u].w;
        float _1881 = fma(_1052, cbModelParam._m0[14u].z, fma(_1048, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1044)) + cbModelParam._m0[14u].w;
        float _1885 = fma(_1052, cbModelParam._m0[15u].z, fma(_1048, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1044)) + cbModelParam._m0[15u].w;
        float _1888 = fma(_993, cbModelParam._m0[13u].z, fma(_992, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _991));
        float _1891 = fma(_993, cbModelParam._m0[14u].z, fma(_992, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _991));
        float _1894 = fma(_993, cbModelParam._m0[15u].z, fma(_992, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _991));
        float _1922;
        if (_1888 > 0.0)
        {
            _1922 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1922 = frontier_phi_17_15_ladder;
        }
        float _2092;
        if (_1891 > 0.0)
        {
            _2092 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2092 = frontier_phi_26_22_ladder;
        }
        float _2387;
        if (_1894 > 0.0)
        {
            _2387 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2387 = frontier_phi_38_33_ladder;
        }
        float _2389 = isnan(_2092) ? _1922 : (isnan(_1922) ? _2092 : min(_1922, _2092));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1888) + _1877;
        float _2395 = (_2390 * _1891) + _1881;
        float _2396 = (_2390 * _1894) + _1885;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2399 = (-1.0) - _2397;
        float _2401 = _2397 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2396 > _2401) || ((_2396 < _2399) || ((_2395 > _2401) || ((_2395 < _2399) || ((_2394 < _2399) || (_2394 > _2401))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2541 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2396, cbModelParam._m0[9u].z, fma(_2395, cbModelParam._m0[9u].y, _2394 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2396, cbModelParam._m0[10u].z, fma(_2395, cbModelParam._m0[10u].y, _2394 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2396, cbModelParam._m0[11u].z, fma(_2395, cbModelParam._m0[11u].y, _2394 * cbModelParam._m0[11u].x))), _1829);
            frontier_phi_16_38_ladder = _2541.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2541.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2541.x * cbModelParam._m0[1u].y;
        }
        _1910 = frontier_phi_16_38_ladder_2;
        _1912 = frontier_phi_16_38_ladder_1;
        _1914 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1898 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_991, _992, _993), _1829);
        _1910 = _1898.x * cbModelParam._m0[1u].y;
        _1912 = _1898.y * cbModelParam._m0[1u].y;
        _1914 = _1898.z * cbModelParam._m0[1u].y;
    }
    float _1918 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _824);
    float _1919 = isnan(_1918) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1918 : min(cbModelParam._m0[25u].w, _1918));
    float _2009;
    float _2011;
    float _2013;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1973 = fma(_1052, cbModelParam._m0[21u].z, fma(_1048, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1044)) + cbModelParam._m0[21u].w;
        float _1977 = fma(_1052, cbModelParam._m0[22u].z, fma(_1048, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1044)) + cbModelParam._m0[22u].w;
        float _1981 = fma(_1052, cbModelParam._m0[23u].z, fma(_1048, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1044)) + cbModelParam._m0[23u].w;
        float _1984 = fma(_993, cbModelParam._m0[21u].z, fma(_992, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _991));
        float _1987 = fma(_993, cbModelParam._m0[22u].z, fma(_992, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _991));
        float _1990 = fma(_993, cbModelParam._m0[23u].z, fma(_992, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _991));
        float _2097;
        if (_1984 > 0.0)
        {
            _2097 = abs((1.0 - _1973) / _1984);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1973 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2097 = frontier_phi_28_24_ladder;
        }
        float _2414;
        if (_1987 > 0.0)
        {
            _2414 = abs((1.0 - _1977) / _1987);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1977 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2414 = frontier_phi_40_35_ladder;
        }
        float _2741;
        if (_1990 > 0.0)
        {
            _2741 = abs((1.0 - _1981) / _1990);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1981 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2741 = frontier_phi_50_47_ladder;
        }
        float _2743 = isnan(_2414) ? _2097 : (isnan(_2097) ? _2414 : min(_2097, _2414));
        float _2744 = isnan(_2741) ? _2743 : (isnan(_2743) ? _2741 : min(_2743, _2741));
        float _2748 = (_2744 * _1984) + _1973;
        float _2749 = (_2744 * _1987) + _1977;
        float _2750 = (_2744 * _1990) + _1981;
        float _2751 = _2744 * 9.9999997473787516355514526367188e-05;
        float _2752 = (-1.0) - _2751;
        float _2754 = _2751 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2750 > _2754) || ((_2750 < _2752) || ((_2749 > _2754) || ((_2749 < _2752) || ((_2748 < _2752) || (_2748 > _2754))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2868 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2750, cbModelParam._m0[17u].z, fma(_2749, cbModelParam._m0[17u].y, _2748 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2750, cbModelParam._m0[18u].z, fma(_2749, cbModelParam._m0[18u].y, _2748 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2750, cbModelParam._m0[19u].z, fma(_2749, cbModelParam._m0[19u].y, _2748 * cbModelParam._m0[19u].x))), _1919);
            frontier_phi_25_50_ladder = _2868.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2868.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2868.x * cbModelParam._m0[1u].z;
        }
        _2009 = frontier_phi_25_50_ladder_2;
        _2011 = frontier_phi_25_50_ladder_1;
        _2013 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1993 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_991, _992, _993), _1919);
        _2009 = _1993.x * cbModelParam._m0[1u].z;
        _2011 = _1993.y * cbModelParam._m0[1u].z;
        _2013 = _1993.z * cbModelParam._m0[1u].z;
    }
    float _2025 = ((((1.0 - _1012) * ((_999 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1012 * _999)) * _983;
    float _2026 = _2025 * ((cbModelParam._m0[1u].w * (_2009 - _1910)) + _1910);
    float _2027 = _2025 * ((cbModelParam._m0[1u].w * (_2011 - _1912)) + _1912);
    float _2028 = _2025 * ((cbModelParam._m0[1u].w * (_2013 - _1914)) + _1914);
    float _2031 = fma(_2028, cbSceneParam._m0[89u].z, fma(_2027, cbSceneParam._m0[89u].y, _2026 * cbSceneParam._m0[89u].x));
    float _2034 = fma(_2028, cbSceneParam._m0[90u].z, fma(_2027, cbSceneParam._m0[90u].y, _2026 * cbSceneParam._m0[90u].x));
    float _2037 = fma(_2028, cbSceneParam._m0[91u].z, fma(_2027, cbSceneParam._m0[91u].y, _2026 * cbSceneParam._m0[91u].x));
    float _2071 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2075 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2079 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2083 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2084 = _2071 / _2083;
    float _2085 = _2075 / _2083;
    float _2086 = _2079 / _2083;
    float _2233;
    float _2234;
    float _2235;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2113 = ((uint(_2086 > cbSceneParam._m0[59u].y) + uint(_2086 > cbSceneParam._m0[59u].x)) + uint(_2086 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2114 = _2113 + 43u;
        uint _2122 = _2113 + 44u;
        uint _2130 = _2113 + 45u;
        uint _2138 = _2113 + 46u;
        float _2149 = fma(_2083, cbSceneParam._m0[_2114].w, fma(_2079, cbSceneParam._m0[_2114].z, fma(_2075, cbSceneParam._m0[_2114].y, _2071 * cbSceneParam._m0[_2114].x)));
        float _2153 = fma(_2083, cbSceneParam._m0[_2122].w, fma(_2079, cbSceneParam._m0[_2122].z, fma(_2075, cbSceneParam._m0[_2122].y, _2071 * cbSceneParam._m0[_2122].x)));
        float _2161 = fma(_2083, cbSceneParam._m0[_2138].w, fma(_2079, cbSceneParam._m0[_2138].z, fma(_2075, cbSceneParam._m0[_2138].y, _2071 * cbSceneParam._m0[_2138].x)));
        float _2166 = cbSceneParam._m0[33u].z * _2161;
        float _2168 = cbSceneParam._m0[33u].w * _2161;
        float _2171 = fma(_2083, cbSceneParam._m0[_2130].w, fma(_2079, cbSceneParam._m0[_2130].z, fma(_2075, cbSceneParam._m0[_2130].y, _2071 * cbSceneParam._m0[_2130].x))) / _2161;
        float _2219 = (cbSceneParam._m0[33u].x - sqrt(((_2085 * _2085) + (_2084 * _2084)) + (_2086 * _2086))) * cbSceneParam._m0[33u].y;
        float _4602 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2226 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2166 + _2149) / _2161, (_2168 + _2153) / _2161), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2168 + _2149) / _2161, (_2153 - _2166) / _2161), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2149 - _2166) / _2161, (_2153 - _2168) / _2161), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2149 - _2168) / _2161, (_2166 + _2153) / _2161), _2171), 0.0)).x), vec4(0.25)));
        _2233 = 1.0 - (_2226 * cbSceneParam._m0[34u].x);
        _2234 = 1.0 - (_2226 * cbSceneParam._m0[34u].y);
        _2235 = 1.0 - (_2226 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2233 = 1.0;
        _2234 = 1.0;
        _2235 = 1.0;
    }
    float _2299;
    float _2301;
    float _2303;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2287 = fma(_2083, cbSceneParam._m0[63u].w, fma(_2079, cbSceneParam._m0[63u].z, fma(_2075, cbSceneParam._m0[63u].y, _2071 * cbSceneParam._m0[63u].x)));
        float _2288 = fma(_2083, cbSceneParam._m0[60u].w, fma(_2079, cbSceneParam._m0[60u].z, fma(_2075, cbSceneParam._m0[60u].y, _2071 * cbSceneParam._m0[60u].x))) / _2287;
        float _2289 = fma(_2083, cbSceneParam._m0[61u].w, fma(_2079, cbSceneParam._m0[61u].z, fma(_2075, cbSceneParam._m0[61u].y, _2071 * cbSceneParam._m0[61u].x))) / _2287;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2288 >= cbSceneParam._m0[64u].x) && (_2289 >= cbSceneParam._m0[64u].y)) && (_2288 <= cbSceneParam._m0[64u].z)) && (_2289 <= cbSceneParam._m0[64u].w))
        {
            float _2427 = fma(_2083, cbSceneParam._m0[62u].w, fma(_2079, cbSceneParam._m0[62u].z, fma(_2075, cbSceneParam._m0[62u].y, _2071 * cbSceneParam._m0[62u].x))) / _2287;
            float _2431 = isnan(cbSceneParam._m0[41u].w) ? _2427 : (isnan(_2427) ? cbSceneParam._m0[41u].w : max(_2427, cbSceneParam._m0[41u].w));
            float _2474 = (cbSceneParam._m0[33u].x - sqrt(((_2085 * _2085) + (_2084 * _2084)) + (_2086 * _2086))) * cbSceneParam._m0[33u].y;
            float _4618 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
            float _2481 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2288, cbSceneParam._m0[33u].w + _2289), _2431), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2288, _2289 - cbSceneParam._m0[33u].z), _2431), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2288 - cbSceneParam._m0[33u].z, _2289 - cbSceneParam._m0[33u].w), _2431), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2288 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2289), _2431), 0.0)).x), vec4(0.25)));
            float _2485 = 1.0 - (_2481 * cbSceneParam._m0[34u].x);
            float _2486 = 1.0 - (_2481 * cbSceneParam._m0[34u].y);
            float _2487 = 1.0 - (_2481 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2487) ? _2235 : (isnan(_2235) ? _2487 : min(_2235, _2487));
            frontier_phi_37_36_ladder_1 = isnan(_2486) ? _2234 : (isnan(_2234) ? _2486 : min(_2234, _2486));
            frontier_phi_37_36_ladder_2 = isnan(_2485) ? _2233 : (isnan(_2233) ? _2485 : min(_2233, _2485));
        }
        else
        {
            frontier_phi_37_36_ladder = _2235;
            frontier_phi_37_36_ladder_1 = _2234;
            frontier_phi_37_36_ladder_2 = _2233;
        }
        _2299 = frontier_phi_37_36_ladder_2;
        _2301 = frontier_phi_37_36_ladder_1;
        _2303 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2299 = _2233;
        _2301 = _2234;
        _2303 = _2235;
    }
    uvec4 _2308 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2310 = _2308.x * 14u;
    uint _2311 = _2310 + 13u;
    float _2318 = _983 + (-1.0);
    float _2323 = (cbLight._m0[_2311].x * _2318) + 1.0;
    float _2324 = (cbLight._m0[_2311].y * _2318) + 1.0;
    float _2325 = (cbLight._m0[_2311].z * _2318) + 1.0;
    float _2326 = (cbLight._m0[_2311].w * _2318) + 1.0;
    uint _2327 = _2310 + 5u;
    float _2333 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
    uint _2337 = _2310 + 4u;
    float _2346 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
    uint _2350 = _2310 | 1u;
    float _2361 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_821, _822, _823));
    float _2364 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_821, _822, _823));
    float _4654 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _4665 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2369 = (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * 0.3183098733425140380859375;
    float _2371 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * 0.3183098733425140380859375;
    float _2378 = ((cbLight._m0[_2327].x * _2333) * _2371) + (((cbLight._m0[_2337].x * _2299) * _2346) * _2369);
    float _2379 = ((_2333 * cbLight._m0[_2327].y) * _2371) + (((cbLight._m0[_2337].y * _2301) * _2346) * _2369);
    float _2380 = ((_2333 * cbLight._m0[_2327].z) * _2371) + (((cbLight._m0[_2337].z * _2303) * _2346) * _2369);
    uvec4 _2384 = floatBitsToUint(cbLight._m0[_2310 + 12u]);
    bool _2386 = _2384.x == 0u;
    float _2488;
    float _2490;
    float _2492;
    if (_2386)
    {
        _2488 = _2378;
        _2490 = _2379;
        _2492 = _2380;
    }
    else
    {
        uint _2496 = _2310 + 6u;
        float _2512 = (dot(vec3(cbLight._m0[_2310 + 2u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2513 = _2512 * _2512;
        float _4676 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2514 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2515 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2488 = (((cbLight._m0[_2496].x * 0.3183098733425140380859375) * _2514) * _2515) + _2378;
        _2490 = (((cbLight._m0[_2496].y * 0.3183098733425140380859375) * _2514) * _2515) + _2379;
        _2492 = (((cbLight._m0[_2496].z * 0.3183098733425140380859375) * _2514) * _2515) + _2380;
    }
    bool _2495 = _2384.y == 0u;
    float _2550;
    float _2552;
    float _2554;
    if (_2495)
    {
        _2550 = _2488;
        _2552 = _2490;
        _2554 = _2492;
    }
    else
    {
        uint _2712 = _2310 + 7u;
        float _2728 = (dot(vec3(cbLight._m0[_2310 + 3u].xyz), vec3(_821, _822, _823)) * 0.5) + 0.5;
        float _2729 = _2728 * _2728;
        float _4692 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2730 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2731 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2550 = (((cbLight._m0[_2712].x * 0.3183098733425140380859375) * _2730) * _2731) + _2488;
        _2552 = (((cbLight._m0[_2712].y * 0.3183098733425140380859375) * _2730) * _2731) + _2490;
        _2554 = (((cbLight._m0[_2712].z * 0.3183098733425140380859375) * _2730) * _2731) + _2492;
    }
    uint _2557 = _2310 + 8u;
    float _2570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2310].w)) * _824) * 0.949999988079071044921875);
    float _2571 = _2570 * _2570;
    float _2572 = cbLight._m0[_2310].x + _900;
    float _2573 = cbLight._m0[_2310].y + _901;
    float _2574 = cbLight._m0[_2310].z + _902;
    float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
    float _2579 = _2578 * _2572;
    float _2580 = _2578 * _2573;
    float _2581 = _2578 * _2574;
    float _2582 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2310].xyz));
    float _4708 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2585 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
    float _4719 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _2586 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
    float _2587 = dot(vec3(_821, _822, _823), vec3(_2579, _2580, _2581));
    float _4730 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2590 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
    float _2591 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_2579, _2580, _2581));
    float _4741 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2595 = _2571 * _2571;
    float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
    float _2610 = (exp2(log2(1.0 - (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2611 = 1.0 - _2571;
    float _2622 = (0.5 / (((_2586 * ((_2585 * _2611) + _2571)) + 9.9999999392252902907785028219223e-09) + (((_2586 * _2611) + _2571) * _2585))) * _2585;
    float _4752 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2624 = (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
    uint _2638 = _2310 + 9u;
    float _2649 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2350].w)) * _824) * 0.949999988079071044921875);
    float _2650 = _2649 * _2649;
    float _2651 = cbLight._m0[_2350].x + _900;
    float _2652 = cbLight._m0[_2350].y + _901;
    float _2653 = cbLight._m0[_2350].z + _902;
    float _2657 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
    float _2658 = _2657 * _2651;
    float _2659 = _2657 * _2652;
    float _2660 = _2657 * _2653;
    float _2661 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2350].xyz));
    float _4763 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
    float _2665 = dot(vec3(_821, _822, _823), vec3(_2658, _2659, _2660));
    float _4774 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2668 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
    float _2669 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_2658, _2659, _2660));
    float _4785 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2673 = _2650 * _2650;
    float _2677 = ((_2668 * _2668) * (_2673 + (-1.0))) + 1.0;
    float _2686 = (exp2(log2(1.0 - (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2687 = 1.0 - _2650;
    float _2697 = (0.5 / (((_2586 * ((_2664 * _2687) + _2650)) + 9.9999999392252902907785028219223e-09) + (((_2586 * _2687) + _2650) * _2664))) * _2664;
    float _4796 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2699 = (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2673 / ((_2677 * _2677) * 3.141590118408203125));
    float _2709 = (((_2686 * cbLight._m0[_2638].x) * _2699) * _2333) + ((((cbLight._m0[_2557].x * _2299) * _2610) * _2624) * _2346);
    float _2710 = (((_2686 * cbLight._m0[_2638].y) * _2699) * _2333) + ((((cbLight._m0[_2557].y * _2301) * _2610) * _2624) * _2346);
    float _2711 = (((_2686 * cbLight._m0[_2638].z) * _2699) * _2333) + ((((cbLight._m0[_2557].z * _2303) * _2610) * _2624) * _2346);
    float _2767;
    float _2769;
    float _2771;
    if (_2386)
    {
        _2767 = _2709;
        _2769 = _2710;
        _2771 = _2711;
    }
    else
    {
        uint _2773 = _2310 + 2u;
        uint _2777 = _2310 + 10u;
        float _2791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2773].w)) * _824) * 0.949999988079071044921875);
        float _2792 = _2791 * _2791;
        float _2793 = cbLight._m0[_2773].x + _900;
        float _2794 = cbLight._m0[_2773].y + _901;
        float _2795 = cbLight._m0[_2773].z + _902;
        float _2799 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
        float _2800 = _2799 * _2793;
        float _2801 = _2799 * _2794;
        float _2802 = _2799 * _2795;
        float _2803 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2773].xyz));
        float _4807 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2806 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
        float _2807 = dot(vec3(_821, _822, _823), vec3(_2800, _2801, _2802));
        float _4818 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2810 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
        float _2811 = dot(vec3(cbLight._m0[_2773].xyz), vec3(_2800, _2801, _2802));
        float _4829 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2815 = _2792 * _2792;
        float _2819 = ((_2810 * _2810) * (_2815 + (-1.0))) + 1.0;
        float _2828 = (exp2(log2(1.0 - (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2829 = 1.0 - _2792;
        float _2839 = (0.5 / (((_2586 * ((_2806 * _2829) + _2792)) + 9.9999999392252902907785028219223e-09) + (((_2586 * _2829) + _2792) * _2806))) * _2806;
        float _4840 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2841 = (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2815 / ((_2819 * _2819) * 3.141590118408203125));
        float _2842 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2767 = (((_2828 * cbLight._m0[_2777].x) * _2841) * _2842) + _2709;
        _2769 = (((_2828 * cbLight._m0[_2777].y) * _2841) * _2842) + _2710;
        _2771 = (((_2828 * cbLight._m0[_2777].z) * _2841) * _2842) + _2711;
    }
    float _2873;
    float _2875;
    float _2877;
    if (_2495)
    {
        _2873 = _2767;
        _2875 = _2769;
        _2877 = _2771;
    }
    else
    {
        uint _2884 = _2310 + 3u;
        uint _2888 = _2310 + 11u;
        float _2902 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2884].w)) * _824) * 0.949999988079071044921875);
        float _2903 = _2902 * _2902;
        float _2904 = cbLight._m0[_2884].x + _900;
        float _2905 = cbLight._m0[_2884].y + _901;
        float _2906 = cbLight._m0[_2884].z + _902;
        float _2910 = inversesqrt(dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906)));
        float _2911 = _2910 * _2904;
        float _2912 = _2910 * _2905;
        float _2913 = _2910 * _2906;
        float _2914 = dot(vec3(_821, _822, _823), vec3(cbLight._m0[_2884].xyz));
        float _4856 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2917 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
        float _2918 = dot(vec3(_821, _822, _823), vec3(_2911, _2912, _2913));
        float _4867 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2921 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
        float _2922 = dot(vec3(cbLight._m0[_2884].xyz), vec3(_2911, _2912, _2913));
        float _4878 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2926 = _2903 * _2903;
        float _2930 = ((_2921 * _2921) * (_2926 + (-1.0))) + 1.0;
        float _2939 = (exp2(log2(1.0 - (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2940 = 1.0 - _2903;
        float _2950 = (0.5 / (((_2586 * ((_2917 * _2940) + _2903)) + 9.9999999392252902907785028219223e-09) + (((_2586 * _2940) + _2903) * _2917))) * _2917;
        float _4889 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2952 = (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2926 / ((_2930 * _2930) * 3.141590118408203125));
        float _2953 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2873 = (((_2939 * cbLight._m0[_2888].x) * _2952) * _2953) + _2767;
        _2875 = (((_2939 * cbLight._m0[_2888].y) * _2952) * _2953) + _2769;
        _2877 = (((_2939 * cbLight._m0[_2888].z) * _2952) * _2953) + _2771;
    }
    float _3019;
    float _3021;
    float _3023;
    float _3025;
    float _3027;
    float _3029;
    if (_2308.y == 0u)
    {
        uvec4 _2974 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2975 = _2974.x;
        uint _2986 = uint((float(_2974.y) * floor(float(uint(cbSceneParam._m0[85u].y * _921) / _2975))) + floor(float(uint(cbSceneParam._m0[85u].x * _920) / _2975)));
        float _2996 = (log2(_2086 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2997 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        uint _3000 = uint(isnan(14.0) ? _2997 : (isnan(_2997) ? 14.0 : min(_2997, 14.0)));
        uvec4 _3005 = texelFetch(g_lightClusterGridBuffer, int(((_3000 << 2u) + (_2986 << 6u)) >> 2u));
        uint _3006 = _3005.x;
        uint _3007 = _2974.z;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        if (((((1u << ((_3007 >> 4u) & 15u)) + 4294967295u) & _3006) == 0u) || ((_3007 & 240u) == 0u))
        {
            _3086 = 0.0;
            _3088 = 0.0;
            _3090 = 0.0;
            _3092 = 0.0;
            _3094 = 0.0;
            _3096 = 0.0;
        }
        else
        {
            float _3087;
            float _3089;
            float _3091;
            float _3093;
            float _3095;
            float _3097;
            float _3239 = 0.0;
            float _3240 = 0.0;
            float _3241 = 0.0;
            float _3242 = 0.0;
            float _3243 = 0.0;
            float _3244 = 0.0;
            uint _3245 = 0u;
            uint _3254;
            bool _3255;
            for (;;)
            {
                _3254 = texelFetch(g_lightClassification, int((((_3000 << 5u) + (_2986 << 9u)) + (_3245 << 2u)) >> 2u)).x;
                _3255 = _3254 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3255)
                {
                    frontier_phi_71_pred = _3244;
                    frontier_phi_71_pred_1 = _3243;
                    frontier_phi_71_pred_2 = _3242;
                    frontier_phi_71_pred_3 = _3241;
                    frontier_phi_71_pred_4 = _3240;
                    frontier_phi_71_pred_5 = _3239;
                }
                else
                {
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    uint _3390;
                    _3384 = _3239;
                    _3385 = _3240;
                    _3386 = _3241;
                    _3387 = _3242;
                    _3388 = _3243;
                    _3389 = _3244;
                    _3390 = _3254;
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    for (;;)
                    {
                        uint _3394 = uint(findLSB(_3390)) + (_3245 << 5u);
                        uint _3391 = (_3390 + 4294967295u) & _3390;
                        uint _3396 = _3394 * 48u;
                        vec4 _3410 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3396)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 3u)).x));
                        uint _3416 = (_3394 * 48u) + 4u;
                        vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3416)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 3u)).x));
                        uint _3435 = (_3394 * 48u) + 8u;
                        vec3 _3446 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3435)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 2u)).x));
                        float _3450 = _3410.x - _2084;
                        float _3451 = _3410.y - _2085;
                        float _3452 = _3410.z - _2086;
                        float _3453 = dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452));
                        float _3456 = inversesqrt(_3453);
                        float _3457 = _3456 * _3450;
                        float _3458 = _3456 * _3451;
                        float _3459 = _3456 * _3452;
                        float _3460 = dot(vec3(_939, _942, _945), vec3(_3457, _3458, _3459));
                        float _3465 = 1.0 - (_3453 * _3410.w);
                        float _4915 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3466 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                        float _3467 = sqrt(_3453) * _3429.w;
                        float _3470 = 1.39999997615814208984375 / (_3467 + 1.39999997615814208984375);
                        float _3471 = _3470 * _3470;
                        float _3474 = ((1.0 - _3471) * _3460) + _3471;
                        float _3477 = _3467 * _3467;
                        float _3481 = ((isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0))) * _3466) / ((_3477 * 0.699999988079071044921875) + 1.0);
                        float _3485 = (-0.0) - _2084;
                        float _3486 = (-0.0) - _2085;
                        float _3487 = (-0.0) - _2086;
                        float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                        float _3492 = _3491 * _3485;
                        float _3493 = _3491 * _3486;
                        float _3494 = _3491 * _3487;
                        float _3501 = exp2(log2(1.0 / ((_3477 * 3.5) + 5.0)) * 0.25);
                        float _3502 = 1.0 - _999;
                        float _3509 = sqrt(1.0 - ((1.0 - (_3502 * _3502)) * (1.0 - (_3501 * _3501))));
                        float _3510 = _3509 * _3509;
                        float _3511 = _3510 * _3510;
                        float _3512 = _3492 + _3457;
                        float _3513 = _3493 + _3458;
                        float _3514 = _3494 + _3459;
                        float _3518 = inversesqrt(dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514)));
                        float _3522 = dot(vec3(_939, _942, _945), vec3(_3492, _3493, _3494));
                        float _4931 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3525 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                        float _3526 = dot(vec3(_939, _942, _945), vec3(_3518 * _3512, _3518 * _3513, _3518 * _3514));
                        float _4942 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                        float _3529 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
                        float _3533 = ((_3529 * _3529) * (_3511 + (-1.0))) + 1.0;
                        float _3534 = _3470 * _3510;
                        float _3535 = _3534 * _3534;
                        float _3538 = ((1.0 - _3535) * _3460) + _3535;
                        float _4953 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                        float _3539 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                        float _3540 = 1.0 - _3510;
                        float _3550 = (0.5 / (((_3539 * ((_3525 * _3540) + _3510)) + 9.9999999392252902907785028219223e-09) + (((_3539 * _3540) + _3510) * _3525))) * _3539;
                        float _4964 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                        float _3561 = (((_3511 * 3.1415927410125732421875) * (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0)))) / ((_3533 * _3533) * ((_3477 * 2.1991131305694580078125) + 3.141590118408203125))) * _3466;
                        _3314 = (_3481 * _3429.x) + _3387;
                        _3315 = (_3481 * _3429.y) + _3388;
                        _3316 = (_3481 * _3429.z) + _3389;
                        _3311 = (_3561 * _3446.x) + _3384;
                        _3312 = (_3561 * _3446.y) + _3385;
                        _3313 = (_3561 * _3446.z) + _3386;
                        if (_3391 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3384 = _3311;
                            _3385 = _3312;
                            _3386 = _3313;
                            _3387 = _3314;
                            _3388 = _3315;
                            _3389 = _3316;
                            _3390 = _3391;
                        }
                    }
                    frontier_phi_71_pred = _3316;
                    frontier_phi_71_pred_1 = _3315;
                    frontier_phi_71_pred_2 = _3314;
                    frontier_phi_71_pred_3 = _3313;
                    frontier_phi_71_pred_4 = _3312;
                    frontier_phi_71_pred_5 = _3311;
                }
                _3097 = frontier_phi_71_pred;
                _3095 = frontier_phi_71_pred_1;
                _3093 = frontier_phi_71_pred_2;
                _3091 = frontier_phi_71_pred_3;
                _3089 = frontier_phi_71_pred_4;
                _3087 = frontier_phi_71_pred_5;
                uint _3246 = _3245 + 1u;
                if (_3246 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3239 = _3087;
                    _3240 = _3089;
                    _3241 = _3091;
                    _3242 = _3093;
                    _3243 = _3095;
                    _3244 = _3097;
                    _3245 = _3246;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3086 = _3087;
            _3088 = _3089;
            _3090 = _3091;
            _3092 = _3093;
            _3094 = _3095;
            _3096 = _3097;
        }
        uvec4 _3100 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3101 = _3100.z;
        uint _3103 = (_3101 >> 8u) & 15u;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        if (((4294967295u << _3103) & _3006) == 0u)
        {
            _3207 = _3086;
            _3209 = _3088;
            _3211 = _3090;
            _3213 = _3092;
            _3215 = _3094;
            _3217 = _3096;
        }
        else
        {
            float _3232 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
            float _3233 = _3232 * _2084;
            float _3234 = _3232 * _2085;
            float _3235 = _3232 * _2086;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3103 < ((_3101 >> 12u) & 15u))
            {
                float _3208;
                float _3210;
                float _3212;
                float _3214;
                float _3216;
                float _3218;
                float _3367 = _3086;
                float _3368 = _3088;
                float _3369 = _3090;
                float _3370 = _3092;
                float _3371 = _3094;
                float _3372 = _3096;
                uint _3373 = _3103;
                uint _3382;
                bool _3383;
                for (;;)
                {
                    _3382 = texelFetch(g_lightClassification, int((((_3000 << 5u) + (_2986 << 9u)) + (_3373 << 2u)) >> 2u)).x;
                    _3383 = _3382 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3383)
                    {
                        frontier_phi_82_pred = _3372;
                        frontier_phi_82_pred_1 = _3371;
                        frontier_phi_82_pred_2 = _3370;
                        frontier_phi_82_pred_3 = _3369;
                        frontier_phi_82_pred_4 = _3368;
                        frontier_phi_82_pred_5 = _3367;
                    }
                    else
                    {
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3868;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3872;
                        float _3873;
                        float _3588 = _3367;
                        float _3589 = _3368;
                        float _3590 = _3369;
                        float _3591 = _3370;
                        float _3592 = _3371;
                        float _3593 = _3372;
                        uint _3594 = _3382;
                        uint _3595;
                        vec4 _3620;
                        float _3621;
                        vec4 _3636;
                        vec3 _3648;
                        vec4 _3663;
                        vec4 _3678;
                        float _3724;
                        bool _3725;
                        for (;;)
                        {
                            uint _3605 = ((_3373 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3594));
                            _3595 = (_3594 + 4294967295u) & _3594;
                            uint _3607 = _3605 * 40u;
                            _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            _3621 = _3620.w;
                            uint _3623 = (_3605 * 40u) + 4u;
                            _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3638 = (_3605 * 40u) + 8u;
                            _3648 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x));
                            uint _3650 = (_3605 * 40u) + 16u;
                            _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            uint _3665 = (_3605 * 40u) + 20u;
                            _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            uint _3680 = (_3605 * 40u) + 24u;
                            vec4 _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            uint _3699 = (_3605 * 40u) + 28u;
                            vec4 _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            _3724 = fma(_2086, _3712.z, fma(_2085, _3712.y, _3712.x * _2084)) + _3712.w;
                            _3725 = !((fma(_2086, _3693.z, fma(_2085, _3693.y, _3693.x * _2084)) + _3693.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3725)
                            {
                                float _3752 = _3620.x - _2084;
                                float _3753 = _3620.y - _2085;
                                float _3754 = _3620.z - _2086;
                                float _3755 = dot(vec3(_3752, _3753, _3754), vec3(_3752, _3753, _3754));
                                float _3758 = inversesqrt(_3755);
                                float _3759 = _3758 * _3752;
                                float _3760 = _3758 * _3753;
                                float _3761 = _3758 * _3754;
                                float _3765 = 1.0 - (_3755 / (_3621 * _3621));
                                float _4975 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3766 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                                float _3770 = sqrt(_3755) * _3636.w;
                                float _3772 = 1.39999997615814208984375 / (_3770 + 1.39999997615814208984375);
                                float _3773 = _3772 * _3772;
                                float _3776 = ((1.0 - _3773) * dot(vec3(_3759, _3760, _3761), vec3(_939, _942, _945))) + _3773;
                                float _3779 = _3770 * _3770;
                                float _3783 = (fma(_2086, _3663.z, fma(_2085, _3663.y, _3663.x * _2084)) + _3663.w) / _3724;
                                float _3784 = (fma(_2086, _3678.z, fma(_2085, _3678.y, _3678.x * _2084)) + _3678.w) / _3724;
                                float _3788 = 1.0 - dot(vec2(_3783, _3784), vec2(_3783, _3784));
                                float _4991 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3789 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                                float _3790 = _3789 * (((isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0))) * _3766) / ((_3779 * 0.699999988079071044921875) + 1.0));
                                float _3802 = exp2(log2(1.0 / ((_3779 * 3.5) + 5.0)) * 0.25);
                                float _3803 = 1.0 - _999;
                                float _3810 = sqrt(1.0 - ((1.0 - (_3803 * _3803)) * (1.0 - (_3802 * _3802))));
                                float _3811 = _3810 * _3810;
                                float _3812 = _3811 * _3811;
                                float _3813 = _3759 - _3233;
                                float _3814 = _3760 - _3234;
                                float _3815 = _3761 - _3235;
                                float _3819 = inversesqrt(dot(vec3(_3813, _3814, _3815), vec3(_3813, _3814, _3815)));
                                float _3823 = dot(vec3(_939, _942, _945), vec3((-0.0) - _3233, (-0.0) - _3234, (-0.0) - _3235));
                                float _5002 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                                float _3826 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
                                float _3827 = dot(vec3(_939, _942, _945), vec3(_3819 * _3813, _3819 * _3814, _3819 * _3815));
                                float _5013 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3830 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
                                float _3834 = ((_3830 * _3830) * (_3812 + (-1.0))) + 1.0;
                                float _3835 = _3772 * _3811;
                                float _3836 = _3835 * _3835;
                                float _3842 = ((1.0 - _3836) * dot(vec3(_939, _942, _945), vec3(_3759, _3760, _3761))) + _3836;
                                float _5024 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3843 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
                                float _3844 = 1.0 - _3811;
                                float _3854 = (0.5 / (((_3843 * ((_3826 * _3844) + _3811)) + 9.9999999392252902907785028219223e-09) + (((_3843 * _3844) + _3811) * _3826))) * _3843;
                                float _5035 = isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0));
                                float _3864 = (_3789 * _3766) * (((_3812 * 3.1415927410125732421875) * (isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0)))) / ((_3834 * _3834) * ((_3779 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3790 * _3636.z;
                                frontier_phi_88_pred_1 = _3790 * _3636.y;
                                frontier_phi_88_pred_2 = _3790 * _3636.x;
                                frontier_phi_88_pred_3 = _3864 * _3648.z;
                                frontier_phi_88_pred_4 = _3864 * _3648.y;
                                frontier_phi_88_pred_5 = _3864 * _3648.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3873 = frontier_phi_88_pred;
                            _3872 = frontier_phi_88_pred_1;
                            _3871 = frontier_phi_88_pred_2;
                            _3870 = frontier_phi_88_pred_3;
                            _3869 = frontier_phi_88_pred_4;
                            _3868 = frontier_phi_88_pred_5;
                            _3578 = _3871 + _3591;
                            _3579 = _3872 + _3592;
                            _3580 = _3873 + _3593;
                            _3575 = _3868 + _3588;
                            _3576 = _3869 + _3589;
                            _3577 = _3870 + _3590;
                            if (_3595 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3578;
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3595;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3580;
                        frontier_phi_82_pred_1 = _3579;
                        frontier_phi_82_pred_2 = _3578;
                        frontier_phi_82_pred_3 = _3577;
                        frontier_phi_82_pred_4 = _3576;
                        frontier_phi_82_pred_5 = _3575;
                    }
                    _3218 = frontier_phi_82_pred;
                    _3216 = frontier_phi_82_pred_1;
                    _3214 = frontier_phi_82_pred_2;
                    _3212 = frontier_phi_82_pred_3;
                    _3210 = frontier_phi_82_pred_4;
                    _3208 = frontier_phi_82_pred_5;
                    uint _3374 = _3373 + 1u;
                    if (_3374 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3367 = _3208;
                        _3368 = _3210;
                        _3369 = _3212;
                        _3370 = _3214;
                        _3371 = _3216;
                        _3372 = _3218;
                        _3373 = _3374;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3214;
                frontier_phi_63_64_ladder_1 = _3218;
                frontier_phi_63_64_ladder_2 = _3216;
                frontier_phi_63_64_ladder_3 = _3212;
                frontier_phi_63_64_ladder_4 = _3210;
                frontier_phi_63_64_ladder_5 = _3208;
            }
            else
            {
                frontier_phi_63_64_ladder = _3092;
                frontier_phi_63_64_ladder_1 = _3096;
                frontier_phi_63_64_ladder_2 = _3094;
                frontier_phi_63_64_ladder_3 = _3090;
                frontier_phi_63_64_ladder_4 = _3088;
                frontier_phi_63_64_ladder_5 = _3086;
            }
            _3207 = frontier_phi_63_64_ladder_5;
            _3209 = frontier_phi_63_64_ladder_4;
            _3211 = frontier_phi_63_64_ladder_3;
            _3213 = frontier_phi_63_64_ladder;
            _3215 = frontier_phi_63_64_ladder_2;
            _3217 = frontier_phi_63_64_ladder_1;
        }
        float _3222 = isnan(1.0) ? _983 : (isnan(_983) ? 1.0 : min(_983, 1.0));
        _3019 = (_3222 * _3213) + _2550;
        _3021 = (_3222 * _3215) + _2552;
        _3023 = (_3222 * _3217) + _2554;
        _3025 = ((_3207 * 0.039999999105930328369140625) * _3222) + _2873;
        _3027 = ((_3209 * 0.039999999105930328369140625) * _3222) + _2875;
        _3029 = ((_3211 * 0.039999999105930328369140625) * _3222) + _2877;
    }
    else
    {
        _3019 = _2550;
        _3021 = _2552;
        _3023 = _2554;
        _3025 = _2873;
        _3027 = _2875;
        _3029 = _2877;
    }
    float _5051 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _5062 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _5073 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _3046 = ((isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0))) * (_3019 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _983))) + ((_3025 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    float _3047 = ((isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0))) * (_3021 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _983))) + ((_3027 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    float _3048 = ((isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0))) * (_3023 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _983))) + ((_3029 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    uint _3049 = _263 + 6u;
    float _3057 = _920 / cbSceneParam._m0[86u].x;
    float _3058 = _921 / cbSceneParam._m0[86u].y;
    vec4 _3072 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3057, _3058, (log2((isnan(cbSceneParam._m0[77u].w) ? _842 : (isnan(_842) ? cbSceneParam._m0[77u].w : min(_842, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3074 = _3072.x;
    float _3075 = _3072.y;
    float _3076 = _3072.z;
    float _3077 = _3072.w;
    float _3149;
    float _3151;
    float _3153;
    float _3155;
    if (_842 > cbSceneParam._m0[78u].w)
    {
        float _3111 = isnan(_842) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _842 : min(cbSceneParam._m0[80u].w, _842));
        float _3112 = _3111 / _842;
        float _3123 = _3112 * _893;
        float _3124 = _894 * _3112;
        float _3125 = (-0.0) - _3124;
        float _3127 = _3112 * _895;
        float _3129 = (cbSceneParam._m0[77u].w * _3125) / _3111;
        float _3130 = _3129 + cbSceneParam._m0[79u].w;
        float _3131 = cbSceneParam._m0[79u].w - _3124;
        float _3137 = sqrt(((_3123 * _3123) + (_3124 * _3124)) + (_3127 * _3127));
        float _3140 = (1.0 - (cbSceneParam._m0[77u].w / _3111)) * _3137;
        float _3145 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3147 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3324;
        if (abs((_3125 - _3129) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3324 = ((((_3130 > 0.0) ? exp2(_3145 * _3130) : (2.0 - exp2(_3147 * _3130))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3140;
        }
        else
        {
            float _3268 = 1.0 / cbSceneParam._m0[80u].x;
            float _3269 = isnan(_3131) ? _3130 : (isnan(_3130) ? _3131 : max(_3130, _3131));
            float _3270 = isnan(_3131) ? _3130 : (isnan(_3130) ? _3131 : min(_3130, _3131));
            float _3279 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : min(_3269, 0.0));
            float _3280 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : min(_3270, 0.0));
            _3324 = ((abs(_3137 / _3125) * cbSceneParam._m0[80u].y) * ((((_3279 - _3280) * 2.0) - ((exp2(_3145 * (isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0)))) - exp2(_3145 * (isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))))) * _3268)) - ((exp2(_3147 * _3279) - exp2(_3147 * _3280)) * _3268))) + (_3140 * cbSceneParam._m0[80u].z);
        }
        vec4 _3326 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3057, _3058, 1.0), 0.0);
        float _3335 = exp2((_3324 * (-1.44269502162933349609375)) * (1.0 - _3326.w));
        float _3336 = log2(_3335);
        float _3352 = log2(_3077);
        _3149 = (exp2(_3352 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3336 * cbSceneParam._m0[78u].x)) * _3326.x) / cbSceneParam._m0[78u].x)) + _3074;
        _3151 = (exp2(_3352 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3336 * cbSceneParam._m0[78u].y)) * _3326.y) / cbSceneParam._m0[78u].y)) + _3075;
        _3153 = (exp2(_3352 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3336 * cbSceneParam._m0[78u].z)) * _3326.z) / cbSceneParam._m0[78u].z)) + _3076;
        _3155 = _3335 * _3077;
    }
    else
    {
        _3149 = _3074;
        _3151 = _3075;
        _3153 = _3076;
        _3155 = _3077;
    }
    bool _3362;
    vec4 _3165;
    vec4 _3187;
    float _3189;
    float _3193;
    float _3194;
    float _3195;
    float _3196;
    bool _3206;
    for (;;)
    {
        _3165 = cbMatDynParam._m0[0u];
        float _3167 = roundEven(_3165.y);
        bool _3168 = _3167 == 3.0;
        float _3169 = log2(_3155);
        float _3176 = exp2(_3169 * cbSceneParam._m0[78u].x) * _3046;
        float _3177 = exp2(_3169 * cbSceneParam._m0[78u].y) * _3047;
        float _3178 = exp2(_3169 * cbSceneParam._m0[78u].z) * _3048;
        float _3185 = _909 + (-0.5);
        _3187 = cbMtdParam._m0[1u];
        _3189 = _3187.y * _3185;
        float _3192 = (_3167 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3193 = _3192 * (_3168 ? _3176 : (_3176 + (cbSceneParam._m0[72u].w * _3149)));
        _3194 = _3192 * (_3168 ? _3177 : (_3177 + (cbSceneParam._m0[72u].w * _3151)));
        _3195 = _3192 * (_3168 ? _3178 : (_3178 + (cbSceneParam._m0[72u].w * _3153)));
        _3196 = _3185 * 0.999000012874603271484375;
        _3206 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3206)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3196) < 0.5)
            {
                _3362 = true;
                break;
            }
        }
        uint _3303 = _958 + uint(_3165.w);
        if ((cbInstanceData._m0[_3303].w < 1.0) && ((cbInstanceData._m0[_3303].w + _3196) < 0.5))
        {
            _3362 = true;
            break;
        }
        if ((_3189 + 1.0) < _3187.x)
        {
            _3362 = true;
            break;
        }
        _3362 = false;
        break;
    }
    float _3566;
    if (_3362)
    {
        discard_state = true;
        _3566 = 0.0;
    }
    else
    {
        _3566 = cbInstanceData._m0[_3049].w;
    }
    SV_Target.x = _3193;
    SV_Target.y = _3194;
    SV_Target.z = _3195;
    SV_Target.w = _3566;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3049].w;
    discard_exit();
}


