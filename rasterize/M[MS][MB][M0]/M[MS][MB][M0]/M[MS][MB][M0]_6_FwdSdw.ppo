#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1002;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _237 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _237 + 1u;
    uint _246 = _237 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_237].x * cbInstanceData._m0[_237].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((_256 * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, (_257 * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _327 = _323.z;
    float _331 = (_323.x * 2.0) + (-1.0);
    float _332 = (_323.y * 2.0) + (-1.0);
    float _333 = dot(vec2(_331, _332), vec2(_331, _332));
    float _3596 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _339 = sqrt(1.0 - (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))));
    float _344 = _331 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_297.x * 2.0) + (-1.0)));
    float _345 = _332 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_297.y * 2.0) + (-1.0)));
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _256) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _257) + cbTextureTilingScale._m0[19u].w));
    float _360 = _358.x;
    float _361 = 1.0 - _360;
    float _394 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_360 - _361) * cbMtdParam._m0[24u].w) + _361) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3607 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _403 = ((((cbMtdParam._m0[10u].x - _282) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _395) + _282;
    float _404 = ((((cbMtdParam._m0[10u].y - _283) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _395) + _283;
    float _405 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _284)) * _395) + _284;
    float _410 = (((_297.z - _327) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _327;
    float _414 = ((cbMtdParam._m0[23u].y - _410) * _395) + _410;
    vec4 _436 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _256) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _257) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _442 = (_436.x * 2.0) + (-1.0);
    float _443 = (_436.y * 2.0) + (-1.0);
    float _444 = dot(vec2(_442, _443), vec2(_442, _443));
    float _3618 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _460 = (_395 * (((cbMtdParam._m0[22u].z * _344) - _344) + _442)) + _344;
    float _461 = (_395 * (((cbMtdParam._m0[22u].z * _345) - _345) + _443)) + _345;
    float _462 = (_395 * (sqrt(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) - _339)) + _339;
    float _464 = cbMtdParam._m0[22u].x + _323.w;
    float _467 = fma(_462, _224 * NORMAL.x, fma(_461, _231 * TANGENT.x, (_217 * _209) * _460));
    float _470 = fma(_462, _224 * NORMAL.y, fma(_461, _231 * TANGENT.y, (_217 * _210) * _460));
    float _473 = fma(_462, _224 * NORMAL.z, fma(_461, _231 * TANGENT.z, (_217 * _211) * _460));
    float _477 = inversesqrt(dot(vec3(_467, _470, _473), vec3(_467, _470, _473)));
    float _478 = _477 * _467;
    float _479 = _477 * _470;
    float _480 = _477 * _473;
    float _3629 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _481 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3651 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _3662 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _3673 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _499 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _550 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _540);
    float _551 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _540);
    float _552 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _540);
    float _556 = inversesqrt(dot(vec3(_550, _551, _552), vec3(_550, _551, _552)));
    float _557 = _550 * _556;
    float _558 = _551 * _556;
    float _559 = _552 * _556;
    float _565 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _566 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _587 = fma(_480, cbSceneParam._m0[5u].z, fma(_479, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _478));
    float _590 = fma(_480, cbSceneParam._m0[6u].z, fma(_479, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _478));
    float _593 = fma(_480, cbSceneParam._m0[7u].z, fma(_479, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _478));
    uint _607 = (_237 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _613 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_607].x;
    float _614 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_607].y;
    float _615 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) * cbInstanceData._m0[_607].z;
    float _3684 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    vec4 _627 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _565, cbSceneParam._m0[86u].y * _566));
    float _631 = ((isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * TEXCOORD_5.w) * _627.x;
    float _632 = dot(vec3(_478, _479, _480), vec3(_557, _558, _559));
    float _635 = _632 * 2.0;
    float _639 = (_635 * _478) - _557;
    float _640 = (_635 * _479) - _558;
    float _641 = (_635 * _480) - _559;
    float _645 = abs(dot(vec3(_557, _558, _559), vec3(_478, _479, _480)));
    float _3717 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _647 = sqrt(_481);
    float _660 = exp2((_647 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_647 * 3.0));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1001;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _726 = fma(_700, cbModelParam._m0[26u].z, fma(_696, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _692));
        float _730 = fma(_700, cbModelParam._m0[27u].z, fma(_696, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _692));
        float _734 = fma(_700, cbModelParam._m0[28u].z, fma(_696, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _692));
        float _759 = _692 + _478;
        float _760 = _696 + _479;
        float _761 = _700 + _480;
        float _771 = fma(_761, cbModelParam._m0[26u].z, fma(_760, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _759)) - _726;
        float _772 = fma(_761, cbModelParam._m0[27u].z, fma(_760, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _759)) - _730;
        float _773 = fma(_761, cbModelParam._m0[28u].z, fma(_760, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _759)) - _734;
        float _777 = inversesqrt(dot(vec3(_771, _772, _773), vec3(_771, _772, _773)));
        float _790 = ((_777 * _771) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_726 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _791 = ((_777 * _772) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_730 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _792 = ((_777 * _773) / cbModelParam._m0[34u].z) + ((((((_734 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_790, _791, _792), 0.0);
        float _829 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_795.x + (-0.5));
        float _831 = _829 * (_795.y + (-0.5));
        float _832 = _829 * (_795.z + (-0.5));
        float _839 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_802.x + (-0.5));
        float _841 = _839 * (_802.y + (-0.5));
        float _842 = _839 * (_802.z + (-0.5));
        float _849 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_809.x + (-0.5));
        float _851 = _849 * (_809.y + (-0.5));
        float _852 = _849 * (_809.z + (-0.5));
        float _859 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_816.x + (-0.5));
        float _861 = _859 * (_816.y + (-0.5));
        float _862 = _859 * (_816.z + (-0.5));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = _830 * 0.5;
        float _867 = _840 * 0.5;
        float _868 = _850 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _883 = (dot(vec3(_478, _479, _480), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _893 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _894 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _895 = _894 * 2.0;
        float _899 = (1.0 - _894) / (_894 + 1.0);
        float _3765 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _909 = ((((1.0 - _900) * (_895 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_895 + 1.0))) + _900) * _863;
        float _910 = _831 * 0.5;
        float _911 = _841 * 0.5;
        float _912 = _851 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _926 = (dot(vec3(_478, _479, _480), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _935 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3798 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_937 + 1.0))) + _942) * _864;
        float _952 = _832 * 0.5;
        float _953 = _842 * 0.5;
        float _954 = _852 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_478, _479, _480), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3831 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_979 + 1.0))) + _984) * _865;
        _1001 = _832;
        _1003 = _831;
        _1004 = _830;
        _1005 = _842;
        _1006 = _841;
        _1007 = _840;
        _1008 = _852;
        _1009 = _851;
        _1010 = _850;
        _1011 = _865;
        _1012 = _864;
        _1013 = _863;
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0)));
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
    }
    else
    {
        _1001 = _1002;
        _1003 = _1002;
        _1004 = _1002;
        _1005 = _1002;
        _1006 = _1002;
        _1007 = _1002;
        _1008 = _1002;
        _1009 = _1002;
        _1010 = _1002;
        _1011 = _1002;
        _1012 = _1002;
        _1013 = _1002;
        _1014 = 0.0;
        _1015 = 0.0;
        _1016 = 0.0;
    }
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1041 = fma(_700, cbModelParam._m0[30u].z, fma(_696, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _692));
        float _1045 = fma(_700, cbModelParam._m0[31u].z, fma(_696, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _692));
        float _1049 = fma(_700, cbModelParam._m0[32u].z, fma(_696, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _692));
        float _1072 = _692 + _478;
        float _1073 = _696 + _479;
        float _1074 = _700 + _480;
        float _1084 = fma(_1074, cbModelParam._m0[30u].z, fma(_1073, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1072)) - _1041;
        float _1085 = fma(_1074, cbModelParam._m0[31u].z, fma(_1073, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1072)) - _1045;
        float _1086 = fma(_1074, cbModelParam._m0[32u].z, fma(_1073, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1072)) - _1049;
        float _1090 = inversesqrt(dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086)));
        float _1103 = ((_1090 * _1084) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1041 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1090 * _1085) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1045 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1090 * _1086) / cbModelParam._m0[35u].z) + ((((((_1049 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        float _1140 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1107.x + (-0.5));
        float _1142 = _1140 * (_1107.y + (-0.5));
        float _1143 = _1140 * (_1107.z + (-0.5));
        float _1150 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1114.x + (-0.5));
        float _1152 = _1150 * (_1114.y + (-0.5));
        float _1153 = _1150 * (_1114.z + (-0.5));
        float _1160 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1121.x + (-0.5));
        float _1162 = _1160 * (_1121.y + (-0.5));
        float _1163 = _1160 * (_1121.z + (-0.5));
        float _1170 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1128.x + (-0.5));
        float _1172 = _1170 * (_1128.y + (-0.5));
        float _1173 = _1170 * (_1128.z + (-0.5));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = _1141 * 0.5;
        float _1178 = _1151 * 0.5;
        float _1179 = _1161 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_478, _479, _480), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3894 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1204 + 1.0))) + _1209) * _1174;
        float _1219 = _1142 * 0.5;
        float _1220 = _1152 * 0.5;
        float _1221 = _1162 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_478, _479, _480), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3927 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1246 + 1.0))) + _1251) * _1175;
        float _1261 = _1143 * 0.5;
        float _1262 = _1153 * 0.5;
        float _1263 = _1163 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_478, _479, _480), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3960 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1288 + 1.0))) + _1293) * _1176;
        _1310 = _1143;
        _1311 = _1142;
        _1312 = _1141;
        _1313 = _1153;
        _1314 = _1152;
        _1315 = _1151;
        _1316 = _1163;
        _1317 = _1162;
        _1318 = _1161;
        _1319 = _1176;
        _1320 = _1175;
        _1321 = _1174;
        _1322 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1323 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1324 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
    }
    else
    {
        _1310 = _1002;
        _1311 = _1002;
        _1312 = _1002;
        _1313 = _1002;
        _1314 = _1002;
        _1315 = _1002;
        _1316 = _1002;
        _1317 = _1002;
        _1318 = _1002;
        _1319 = _1002;
        _1320 = _1002;
        _1321 = _1002;
        _1322 = 0.0;
        _1323 = 0.0;
        _1324 = 0.0;
    }
    float _1334 = (cbModelParam._m0[1u].x * (_1322 - _1014)) + _1014;
    float _1335 = (cbModelParam._m0[1u].x * (_1323 - _1015)) + _1015;
    float _1336 = (cbModelParam._m0[1u].x * (_1324 - _1016)) + _1016;
    float _1357 = fma(_1336, cbSceneParam._m0[89u].z, fma(_1335, cbSceneParam._m0[89u].y, _1334 * cbSceneParam._m0[89u].x));
    float _1360 = fma(_1336, cbSceneParam._m0[90u].z, fma(_1335, cbSceneParam._m0[90u].y, _1334 * cbSceneParam._m0[90u].x));
    float _1363 = fma(_1336, cbSceneParam._m0[91u].z, fma(_1335, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1334));
    float _1378 = _639 * 0.5;
    float _1379 = _640 * 0.5;
    float _1380 = _641 * 0.5;
    float _1381 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1312, _1315, _1318, _1321));
    float _1384 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1311, _1314, _1317, _1320));
    float _1387 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1421;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1394 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1001, _1005, _1008, _1011));
        float _1398 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1003, _1006, _1009, _1012));
        float _1402 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1004, _1007, _1010, _1013));
        float _1409 = dot(vec4(cbModelParam._m0[39u]), vec4(_1378, _1379, _1380, 1.0));
        _1421 = dot(vec3(isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1409) ? 0.0 : (isnan(0.0) ? _1409 : max(0.0, _1409))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1421 = 1.0;
    }
    float _1432;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1423 = dot(vec4(cbModelParam._m0[40u]), vec4(_1378, _1379, _1380, 1.0));
        _1432 = dot(vec3(isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1423) ? 0.0 : (isnan(0.0) ? _1423 : max(0.0, _1423))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1432 = 1.0;
    }
    float _1436 = (_1432 * cbModelParam._m0[1u].x) + (_1421 * (1.0 - cbModelParam._m0[1u].x));
    float _1446 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _481);
    float _1447 = isnan(_1446) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1446 : min(cbModelParam._m0[25u].z, _1446));
    float _1529;
    float _1531;
    float _1533;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1496 = fma(_700, cbModelParam._m0[13u].z, fma(_696, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _692)) + cbModelParam._m0[13u].w;
        float _1500 = fma(_700, cbModelParam._m0[14u].z, fma(_696, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _692)) + cbModelParam._m0[14u].w;
        float _1504 = fma(_700, cbModelParam._m0[15u].z, fma(_696, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _692)) + cbModelParam._m0[15u].w;
        float _1507 = fma(_641, cbModelParam._m0[13u].z, fma(_640, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _639));
        float _1510 = fma(_641, cbModelParam._m0[14u].z, fma(_640, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _639));
        float _1513 = fma(_641, cbModelParam._m0[15u].z, fma(_640, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _639));
        float _1541;
        if (_1507 > 0.0)
        {
            _1541 = abs((1.0 - _1496) / _1507);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1496 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1541 = frontier_phi_14_12_ladder;
        }
        float _1713;
        if (_1510 > 0.0)
        {
            _1713 = abs((1.0 - _1500) / _1510);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1500 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1713 = frontier_phi_23_19_ladder;
        }
        float _2009;
        if (_1513 > 0.0)
        {
            _2009 = abs((1.0 - _1504) / _1513);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1504 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2009 = frontier_phi_35_30_ladder;
        }
        float _2011 = isnan(_1713) ? _1541 : (isnan(_1541) ? _1713 : min(_1541, _1713));
        float _2012 = isnan(_2009) ? _2011 : (isnan(_2011) ? _2009 : min(_2011, _2009));
        float _2016 = (_2012 * _1507) + _1496;
        float _2017 = (_2012 * _1510) + _1500;
        float _2018 = (_2012 * _1513) + _1504;
        float _2019 = _2012 * 9.9999997473787516355514526367188e-05;
        float _2021 = (-1.0) - _2019;
        float _2023 = _2019 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2018 > _2023) || ((_2018 < _2021) || ((_2017 > _2023) || ((_2017 < _2021) || ((_2016 < _2021) || (_2016 > _2023))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2163 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2018, cbModelParam._m0[9u].z, fma(_2017, cbModelParam._m0[9u].y, _2016 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2018, cbModelParam._m0[10u].z, fma(_2017, cbModelParam._m0[10u].y, _2016 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2018, cbModelParam._m0[11u].z, fma(_2017, cbModelParam._m0[11u].y, _2016 * cbModelParam._m0[11u].x))), _1447);
            frontier_phi_13_35_ladder = _2163.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2163.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2163.x * cbModelParam._m0[1u].y;
        }
        _1529 = frontier_phi_13_35_ladder_2;
        _1531 = frontier_phi_13_35_ladder_1;
        _1533 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1517 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_639, _640, _641), _1447);
        _1529 = _1517.x * cbModelParam._m0[1u].y;
        _1531 = _1517.y * cbModelParam._m0[1u].y;
        _1533 = _1517.z * cbModelParam._m0[1u].y;
    }
    float _1537 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _481);
    float _1538 = isnan(_1537) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1537 : min(cbModelParam._m0[25u].w, _1537));
    float _1629;
    float _1631;
    float _1633;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1593 = fma(_700, cbModelParam._m0[21u].z, fma(_696, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _692)) + cbModelParam._m0[21u].w;
        float _1597 = fma(_700, cbModelParam._m0[22u].z, fma(_696, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _692)) + cbModelParam._m0[22u].w;
        float _1601 = fma(_700, cbModelParam._m0[23u].z, fma(_696, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _692)) + cbModelParam._m0[23u].w;
        float _1604 = fma(_641, cbModelParam._m0[21u].z, fma(_640, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _639));
        float _1607 = fma(_641, cbModelParam._m0[22u].z, fma(_640, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _639));
        float _1610 = fma(_641, cbModelParam._m0[23u].z, fma(_640, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _639));
        float _1718;
        if (_1604 > 0.0)
        {
            _1718 = abs((1.0 - _1593) / _1604);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1593 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1718 = frontier_phi_25_21_ladder;
        }
        float _2036;
        if (_1607 > 0.0)
        {
            _2036 = abs((1.0 - _1597) / _1607);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1597 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2036 = frontier_phi_37_32_ladder;
        }
        float _2363;
        if (_1610 > 0.0)
        {
            _2363 = abs((1.0 - _1601) / _1610);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1601 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2363 = frontier_phi_47_44_ladder;
        }
        float _2365 = isnan(_2036) ? _1718 : (isnan(_1718) ? _2036 : min(_1718, _2036));
        float _2366 = isnan(_2363) ? _2365 : (isnan(_2365) ? _2363 : min(_2365, _2363));
        float _2370 = (_2366 * _1604) + _1593;
        float _2371 = (_2366 * _1607) + _1597;
        float _2372 = (_2366 * _1610) + _1601;
        float _2373 = _2366 * 9.9999997473787516355514526367188e-05;
        float _2374 = (-1.0) - _2373;
        float _2376 = _2373 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2372 > _2376) || ((_2372 < _2374) || ((_2371 > _2376) || ((_2371 < _2374) || ((_2370 < _2374) || (_2370 > _2376))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2490 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2372, cbModelParam._m0[17u].z, fma(_2371, cbModelParam._m0[17u].y, _2370 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2372, cbModelParam._m0[18u].z, fma(_2371, cbModelParam._m0[18u].y, _2370 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2372, cbModelParam._m0[19u].z, fma(_2371, cbModelParam._m0[19u].y, _2370 * cbModelParam._m0[19u].x))), _1538);
            frontier_phi_22_47_ladder = _2490.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2490.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2490.x * cbModelParam._m0[1u].z;
        }
        _1629 = frontier_phi_22_47_ladder_2;
        _1631 = frontier_phi_22_47_ladder_1;
        _1633 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1613 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_639, _640, _641), _1538);
        _1629 = _1613.x * cbModelParam._m0[1u].z;
        _1631 = _1613.y * cbModelParam._m0[1u].z;
        _1633 = _1613.z * cbModelParam._m0[1u].z;
    }
    float _1645 = ((((1.0 - _660) * ((_647 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_660 * _647)) * _631;
    float _1646 = _1645 * ((cbModelParam._m0[1u].w * (_1629 - _1529)) + _1529);
    float _1647 = _1645 * ((cbModelParam._m0[1u].w * (_1631 - _1531)) + _1531);
    float _1648 = _1645 * ((cbModelParam._m0[1u].w * (_1633 - _1533)) + _1533);
    float _1651 = fma(_1648, cbSceneParam._m0[89u].z, fma(_1647, cbSceneParam._m0[89u].y, _1646 * cbSceneParam._m0[89u].x));
    float _1654 = fma(_1648, cbSceneParam._m0[90u].z, fma(_1647, cbSceneParam._m0[90u].y, _1646 * cbSceneParam._m0[90u].x));
    float _1657 = fma(_1648, cbSceneParam._m0[91u].z, fma(_1647, cbSceneParam._m0[91u].y, _1646 * cbSceneParam._m0[91u].x));
    float _1692 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1696 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1700 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1704 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1705 = _1692 / _1704;
    float _1706 = _1696 / _1704;
    float _1707 = _1700 / _1704;
    float _1854;
    float _1855;
    float _1856;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1734 = ((uint(_1707 > cbSceneParam._m0[59u].y) + uint(_1707 > cbSceneParam._m0[59u].x)) + uint(_1707 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1735 = _1734 + 43u;
        uint _1743 = _1734 + 44u;
        uint _1751 = _1734 + 45u;
        uint _1759 = _1734 + 46u;
        float _1770 = fma(_1704, cbSceneParam._m0[_1735].w, fma(_1700, cbSceneParam._m0[_1735].z, fma(_1696, cbSceneParam._m0[_1735].y, _1692 * cbSceneParam._m0[_1735].x)));
        float _1774 = fma(_1704, cbSceneParam._m0[_1743].w, fma(_1700, cbSceneParam._m0[_1743].z, fma(_1696, cbSceneParam._m0[_1743].y, _1692 * cbSceneParam._m0[_1743].x)));
        float _1782 = fma(_1704, cbSceneParam._m0[_1759].w, fma(_1700, cbSceneParam._m0[_1759].z, fma(_1696, cbSceneParam._m0[_1759].y, _1692 * cbSceneParam._m0[_1759].x)));
        float _1787 = cbSceneParam._m0[33u].z * _1782;
        float _1789 = cbSceneParam._m0[33u].w * _1782;
        float _1792 = fma(_1704, cbSceneParam._m0[_1751].w, fma(_1700, cbSceneParam._m0[_1751].z, fma(_1696, cbSceneParam._m0[_1751].y, _1692 * cbSceneParam._m0[_1751].x))) / _1782;
        float _1840 = (cbSceneParam._m0[33u].x - sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707))) * cbSceneParam._m0[33u].y;
        float _4086 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1847 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1787 + _1770) / _1782, (_1789 + _1774) / _1782), _1792), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1789 + _1770) / _1782, (_1774 - _1787) / _1782), _1792), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1770 - _1787) / _1782, (_1774 - _1789) / _1782), _1792), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1770 - _1789) / _1782, (_1787 + _1774) / _1782), _1792), 0.0)).x), vec4(0.25)));
        _1854 = 1.0 - (_1847 * cbSceneParam._m0[34u].x);
        _1855 = 1.0 - (_1847 * cbSceneParam._m0[34u].y);
        _1856 = 1.0 - (_1847 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1854 = 1.0;
        _1855 = 1.0;
        _1856 = 1.0;
    }
    float _1920;
    float _1922;
    float _1924;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1908 = fma(_1704, cbSceneParam._m0[63u].w, fma(_1700, cbSceneParam._m0[63u].z, fma(_1696, cbSceneParam._m0[63u].y, _1692 * cbSceneParam._m0[63u].x)));
        float _1909 = fma(_1704, cbSceneParam._m0[60u].w, fma(_1700, cbSceneParam._m0[60u].z, fma(_1696, cbSceneParam._m0[60u].y, _1692 * cbSceneParam._m0[60u].x))) / _1908;
        float _1910 = fma(_1704, cbSceneParam._m0[61u].w, fma(_1700, cbSceneParam._m0[61u].z, fma(_1696, cbSceneParam._m0[61u].y, _1692 * cbSceneParam._m0[61u].x))) / _1908;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1909 >= cbSceneParam._m0[64u].x) && (_1910 >= cbSceneParam._m0[64u].y)) && (_1909 <= cbSceneParam._m0[64u].z)) && (_1910 <= cbSceneParam._m0[64u].w))
        {
            float _2049 = fma(_1704, cbSceneParam._m0[62u].w, fma(_1700, cbSceneParam._m0[62u].z, fma(_1696, cbSceneParam._m0[62u].y, _1692 * cbSceneParam._m0[62u].x))) / _1908;
            float _2053 = isnan(cbSceneParam._m0[41u].w) ? _2049 : (isnan(_2049) ? cbSceneParam._m0[41u].w : max(_2049, cbSceneParam._m0[41u].w));
            float _2096 = (cbSceneParam._m0[33u].x - sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707))) * cbSceneParam._m0[33u].y;
            float _4102 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
            float _2103 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1909, cbSceneParam._m0[33u].w + _1910), _2053), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1909, _1910 - cbSceneParam._m0[33u].z), _2053), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1909 - cbSceneParam._m0[33u].z, _1910 - cbSceneParam._m0[33u].w), _2053), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1909 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1910), _2053), 0.0)).x), vec4(0.25)));
            float _2107 = 1.0 - (_2103 * cbSceneParam._m0[34u].x);
            float _2108 = 1.0 - (_2103 * cbSceneParam._m0[34u].y);
            float _2109 = 1.0 - (_2103 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2109) ? _1856 : (isnan(_1856) ? _2109 : min(_1856, _2109));
            frontier_phi_34_33_ladder_1 = isnan(_2108) ? _1855 : (isnan(_1855) ? _2108 : min(_1855, _2108));
            frontier_phi_34_33_ladder_2 = isnan(_2107) ? _1854 : (isnan(_1854) ? _2107 : min(_1854, _2107));
        }
        else
        {
            frontier_phi_34_33_ladder = _1856;
            frontier_phi_34_33_ladder_1 = _1855;
            frontier_phi_34_33_ladder_2 = _1854;
        }
        _1920 = frontier_phi_34_33_ladder_2;
        _1922 = frontier_phi_34_33_ladder_1;
        _1924 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1920 = _1854;
        _1922 = _1855;
        _1924 = _1856;
    }
    uvec4 _1929 = floatBitsToUint(cbInstanceData._m0[_237 + 5u]);
    uint _1931 = _1929.x * 14u;
    uint _1932 = _1931 + 13u;
    float _1939 = _631 + (-1.0);
    float _1944 = (cbLight._m0[_1932].x * _1939) + 1.0;
    float _1945 = (cbLight._m0[_1932].y * _1939) + 1.0;
    float _1946 = (cbLight._m0[_1932].z * _1939) + 1.0;
    float _1947 = (cbLight._m0[_1932].w * _1939) + 1.0;
    uint _1948 = _1931 + 5u;
    float _1954 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
    uint _1958 = _1931 + 4u;
    float _1968 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
    uint _1972 = _1931 | 1u;
    float _1983 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_478, _479, _480));
    float _1986 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_478, _479, _480));
    float _4138 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _4149 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1991 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * 0.3183098733425140380859375;
    float _1993 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * 0.3183098733425140380859375;
    float _2000 = ((cbLight._m0[_1948].x * _1954) * _1993) + (((cbLight._m0[_1958].x * _1920) * _1968) * _1991);
    float _2001 = ((_1954 * cbLight._m0[_1948].y) * _1993) + (((cbLight._m0[_1958].y * _1922) * _1968) * _1991);
    float _2002 = ((_1954 * cbLight._m0[_1948].z) * _1993) + (((cbLight._m0[_1958].z * _1924) * _1968) * _1991);
    uvec4 _2006 = floatBitsToUint(cbLight._m0[_1931 + 12u]);
    bool _2008 = _2006.x == 0u;
    float _2110;
    float _2112;
    float _2114;
    if (_2008)
    {
        _2110 = _2000;
        _2112 = _2001;
        _2114 = _2002;
    }
    else
    {
        uint _2118 = _1931 + 6u;
        float _2134 = (dot(vec3(cbLight._m0[_1931 + 2u].xyz), vec3(_478, _479, _480)) * 0.5) + 0.5;
        float _2135 = _2134 * _2134;
        float _4160 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2136 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2137 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2110 = (((cbLight._m0[_2118].x * 0.3183098733425140380859375) * _2136) * _2137) + _2000;
        _2112 = (((cbLight._m0[_2118].y * 0.3183098733425140380859375) * _2136) * _2137) + _2001;
        _2114 = (((cbLight._m0[_2118].z * 0.3183098733425140380859375) * _2136) * _2137) + _2002;
    }
    bool _2117 = _2006.y == 0u;
    float _2172;
    float _2174;
    float _2176;
    if (_2117)
    {
        _2172 = _2110;
        _2174 = _2112;
        _2176 = _2114;
    }
    else
    {
        uint _2334 = _1931 + 7u;
        float _2350 = (dot(vec3(cbLight._m0[_1931 + 3u].xyz), vec3(_478, _479, _480)) * 0.5) + 0.5;
        float _2351 = _2350 * _2350;
        float _4176 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2352 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _2353 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
        _2172 = (((cbLight._m0[_2334].x * 0.3183098733425140380859375) * _2352) * _2353) + _2110;
        _2174 = (((cbLight._m0[_2334].y * 0.3183098733425140380859375) * _2352) * _2353) + _2112;
        _2176 = (((cbLight._m0[_2334].z * 0.3183098733425140380859375) * _2352) * _2353) + _2114;
    }
    uint _2179 = _1931 + 8u;
    float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1931].w)) * _481) * 0.949999988079071044921875);
    float _2193 = _2192 * _2192;
    float _2194 = cbLight._m0[_1931].x + _557;
    float _2195 = cbLight._m0[_1931].y + _558;
    float _2196 = cbLight._m0[_1931].z + _559;
    float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
    float _2201 = _2200 * _2194;
    float _2202 = _2200 * _2195;
    float _2203 = _2200 * _2196;
    float _2204 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_1931].xyz));
    float _4192 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _4203 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _2208 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _2209 = dot(vec3(_478, _479, _480), vec3(_2201, _2202, _2203));
    float _4214 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _2213 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_2201, _2202, _2203));
    float _4225 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2217 = _2193 * _2193;
    float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
    float _2232 = (exp2(log2(1.0 - (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2233 = 1.0 - _2193;
    float _2244 = (0.5 / (((_2208 * ((_2207 * _2233) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2233) + _2193) * _2207))) * _2207;
    float _4236 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2246 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
    uint _2260 = _1931 + 9u;
    float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1972].w)) * _481) * 0.949999988079071044921875);
    float _2272 = _2271 * _2271;
    float _2273 = cbLight._m0[_1972].x + _557;
    float _2274 = cbLight._m0[_1972].y + _558;
    float _2275 = cbLight._m0[_1972].z + _559;
    float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
    float _2280 = _2279 * _2273;
    float _2281 = _2279 * _2274;
    float _2282 = _2279 * _2275;
    float _2283 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_1972].xyz));
    float _4247 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2287 = dot(vec3(_478, _479, _480), vec3(_2280, _2281, _2282));
    float _4258 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2291 = dot(vec3(cbLight._m0[_1972].xyz), vec3(_2280, _2281, _2282));
    float _4269 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2295 = _2272 * _2272;
    float _2299 = ((_2290 * _2290) * (_2295 + (-1.0))) + 1.0;
    float _2308 = (exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2309 = 1.0 - _2272;
    float _2319 = (0.5 / (((_2208 * ((_2286 * _2309) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2309) + _2272) * _2286))) * _2286;
    float _4280 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2321 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2295 / ((_2299 * _2299) * 3.141590118408203125));
    float _2331 = (((_2308 * cbLight._m0[_2260].x) * _2321) * _1954) + ((((cbLight._m0[_2179].x * _1920) * _2232) * _2246) * _1968);
    float _2332 = (((_2308 * cbLight._m0[_2260].y) * _2321) * _1954) + ((((cbLight._m0[_2179].y * _1922) * _2232) * _2246) * _1968);
    float _2333 = (((_2308 * cbLight._m0[_2260].z) * _2321) * _1954) + ((((cbLight._m0[_2179].z * _1924) * _2232) * _2246) * _1968);
    float _2389;
    float _2391;
    float _2393;
    if (_2008)
    {
        _2389 = _2331;
        _2391 = _2332;
        _2393 = _2333;
    }
    else
    {
        uint _2395 = _1931 + 2u;
        uint _2399 = _1931 + 10u;
        float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2395].w)) * _481) * 0.949999988079071044921875);
        float _2414 = _2413 * _2413;
        float _2415 = cbLight._m0[_2395].x + _557;
        float _2416 = cbLight._m0[_2395].y + _558;
        float _2417 = cbLight._m0[_2395].z + _559;
        float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
        float _2422 = _2421 * _2415;
        float _2423 = _2421 * _2416;
        float _2424 = _2421 * _2417;
        float _2425 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_2395].xyz));
        float _4291 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2429 = dot(vec3(_478, _479, _480), vec3(_2422, _2423, _2424));
        float _4302 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2432 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2433 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_2422, _2423, _2424));
        float _4313 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2437 = _2414 * _2414;
        float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
        float _2450 = (exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2451 = 1.0 - _2414;
        float _2461 = (0.5 / (((_2208 * ((_2428 * _2451) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2451) + _2414) * _2428))) * _2428;
        float _4324 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2463 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
        float _2464 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2389 = (((_2450 * cbLight._m0[_2399].x) * _2463) * _2464) + _2331;
        _2391 = (((_2450 * cbLight._m0[_2399].y) * _2463) * _2464) + _2332;
        _2393 = (((_2450 * cbLight._m0[_2399].z) * _2463) * _2464) + _2333;
    }
    float _2495;
    float _2497;
    float _2499;
    if (_2117)
    {
        _2495 = _2389;
        _2497 = _2391;
        _2499 = _2393;
    }
    else
    {
        uint _2506 = _1931 + 3u;
        uint _2510 = _1931 + 11u;
        float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2506].w)) * _481) * 0.949999988079071044921875);
        float _2525 = _2524 * _2524;
        float _2526 = cbLight._m0[_2506].x + _557;
        float _2527 = cbLight._m0[_2506].y + _558;
        float _2528 = cbLight._m0[_2506].z + _559;
        float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
        float _2533 = _2532 * _2526;
        float _2534 = _2532 * _2527;
        float _2535 = _2532 * _2528;
        float _2536 = dot(vec3(_478, _479, _480), vec3(cbLight._m0[_2506].xyz));
        float _4340 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2540 = dot(vec3(_478, _479, _480), vec3(_2533, _2534, _2535));
        float _4351 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2544 = dot(vec3(cbLight._m0[_2506].xyz), vec3(_2533, _2534, _2535));
        float _4362 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2548 = _2525 * _2525;
        float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
        float _2561 = (exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2562 = 1.0 - _2525;
        float _2572 = (0.5 / (((_2208 * ((_2539 * _2562) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2562) + _2525) * _2539))) * _2539;
        float _4373 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2574 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
        float _2575 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
        _2495 = (((_2561 * cbLight._m0[_2510].x) * _2574) * _2575) + _2389;
        _2497 = (((_2561 * cbLight._m0[_2510].y) * _2574) * _2575) + _2391;
        _2499 = (((_2561 * cbLight._m0[_2510].z) * _2574) * _2575) + _2393;
    }
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    if (_1929.y == 0u)
    {
        uvec4 _2596 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2597 = _2596.x;
        uint _2608 = uint((float(_2596.y) * floor(float(uint(cbSceneParam._m0[85u].y * _566) / _2597))) + floor(float(uint(cbSceneParam._m0[85u].x * _565) / _2597)));
        float _2618 = (log2(_1707 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2619 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        uint _2622 = uint(isnan(14.0) ? _2619 : (isnan(_2619) ? 14.0 : min(_2619, 14.0)));
        uvec4 _2627 = texelFetch(g_lightClusterGridBuffer, int(((_2622 << 2u) + (_2608 << 6u)) >> 2u));
        uint _2628 = _2627.x;
        uint _2629 = _2596.z;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        if (((((1u << ((_2629 >> 4u) & 15u)) + 4294967295u) & _2628) == 0u) || ((_2629 & 240u) == 0u))
        {
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
        }
        else
        {
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            uint _2859 = 0u;
            uint _2868;
            bool _2869;
            for (;;)
            {
                _2868 = texelFetch(g_lightClassification, int((((_2622 << 5u) + (_2608 << 9u)) + (_2859 << 2u)) >> 2u)).x;
                _2869 = _2868 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2869)
                {
                    frontier_phi_66_pred = _2858;
                    frontier_phi_66_pred_1 = _2857;
                    frontier_phi_66_pred_2 = _2856;
                    frontier_phi_66_pred_3 = _2855;
                    frontier_phi_66_pred_4 = _2854;
                    frontier_phi_66_pred_5 = _2853;
                }
                else
                {
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    uint _2983;
                    _2977 = _2853;
                    _2978 = _2854;
                    _2979 = _2855;
                    _2980 = _2856;
                    _2981 = _2857;
                    _2982 = _2858;
                    _2983 = _2868;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    for (;;)
                    {
                        uint _2987 = uint(findLSB(_2983)) + (_2859 << 5u);
                        uint _2984 = (_2983 + 4294967295u) & _2983;
                        uint _2989 = _2987 * 48u;
                        vec4 _3003 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2989)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 3u)).x));
                        uint _3009 = (_2987 * 48u) + 4u;
                        vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3009)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 3u)).x));
                        uint _3028 = (_2987 * 48u) + 8u;
                        vec3 _3039 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3028)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 2u)).x));
                        float _3043 = _3003.x - _1705;
                        float _3044 = _3003.y - _1706;
                        float _3045 = _3003.z - _1707;
                        float _3046 = dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045));
                        float _3049 = inversesqrt(_3046);
                        float _3050 = _3049 * _3043;
                        float _3051 = _3049 * _3044;
                        float _3052 = _3049 * _3045;
                        float _3053 = dot(vec3(_587, _590, _593), vec3(_3050, _3051, _3052));
                        float _3058 = 1.0 - (_3046 * _3003.w);
                        float _4399 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3059 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3060 = sqrt(_3046) * _3022.w;
                        float _3063 = 1.39999997615814208984375 / (_3060 + 1.39999997615814208984375);
                        float _3064 = _3063 * _3063;
                        float _3067 = ((1.0 - _3064) * _3053) + _3064;
                        float _3070 = _3060 * _3060;
                        float _3074 = ((isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0))) * _3059) / ((_3070 * 0.699999988079071044921875) + 1.0);
                        float _3078 = (-0.0) - _1705;
                        float _3079 = (-0.0) - _1706;
                        float _3080 = (-0.0) - _1707;
                        float _3084 = inversesqrt(dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080)));
                        float _3085 = _3084 * _3078;
                        float _3086 = _3084 * _3079;
                        float _3087 = _3084 * _3080;
                        float _3094 = exp2(log2(1.0 / ((_3070 * 3.5) + 5.0)) * 0.25);
                        float _3095 = 1.0 - _647;
                        float _3102 = sqrt(1.0 - ((1.0 - (_3095 * _3095)) * (1.0 - (_3094 * _3094))));
                        float _3103 = _3102 * _3102;
                        float _3104 = _3103 * _3103;
                        float _3105 = _3085 + _3050;
                        float _3106 = _3086 + _3051;
                        float _3107 = _3087 + _3052;
                        float _3111 = inversesqrt(dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107)));
                        float _3115 = dot(vec3(_587, _590, _593), vec3(_3085, _3086, _3087));
                        float _4415 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3118 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                        float _3119 = dot(vec3(_587, _590, _593), vec3(_3111 * _3105, _3111 * _3106, _3111 * _3107));
                        float _4426 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3122 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                        float _3126 = ((_3122 * _3122) * (_3104 + (-1.0))) + 1.0;
                        float _3127 = _3063 * _3103;
                        float _3128 = _3127 * _3127;
                        float _3131 = ((1.0 - _3128) * _3053) + _3128;
                        float _4437 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3132 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3133 = 1.0 - _3103;
                        float _3143 = (0.5 / (((_3132 * ((_3118 * _3133) + _3103)) + 9.9999999392252902907785028219223e-09) + (((_3132 * _3133) + _3103) * _3118))) * _3132;
                        float _4448 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3154 = (((_3104 * 3.1415927410125732421875) * (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) / ((_3126 * _3126) * ((_3070 * 2.1991131305694580078125) + 3.141590118408203125))) * _3059;
                        _2912 = (_3074 * _3022.x) + _2980;
                        _2913 = (_3074 * _3022.y) + _2981;
                        _2914 = (_3074 * _3022.z) + _2982;
                        _2909 = (_3154 * _3039.x) + _2977;
                        _2910 = (_3154 * _3039.y) + _2978;
                        _2911 = (_3154 * _3039.z) + _2979;
                        if (_2984 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2977 = _2909;
                            _2978 = _2910;
                            _2979 = _2911;
                            _2980 = _2912;
                            _2981 = _2913;
                            _2982 = _2914;
                            _2983 = _2984;
                        }
                    }
                    frontier_phi_66_pred = _2914;
                    frontier_phi_66_pred_1 = _2913;
                    frontier_phi_66_pred_2 = _2912;
                    frontier_phi_66_pred_3 = _2911;
                    frontier_phi_66_pred_4 = _2910;
                    frontier_phi_66_pred_5 = _2909;
                }
                _2719 = frontier_phi_66_pred;
                _2717 = frontier_phi_66_pred_1;
                _2715 = frontier_phi_66_pred_2;
                _2713 = frontier_phi_66_pred_3;
                _2711 = frontier_phi_66_pred_4;
                _2709 = frontier_phi_66_pred_5;
                uint _2860 = _2859 + 1u;
                if (_2860 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2853 = _2709;
                    _2854 = _2711;
                    _2855 = _2713;
                    _2856 = _2715;
                    _2857 = _2717;
                    _2858 = _2719;
                    _2859 = _2860;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
        }
        uvec4 _2722 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2723 = _2722.z;
        uint _2725 = (_2723 >> 8u) & 15u;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        if (((4294967295u << _2725) & _2628) == 0u)
        {
            _2821 = _2708;
            _2823 = _2710;
            _2825 = _2712;
            _2827 = _2714;
            _2829 = _2716;
            _2831 = _2718;
        }
        else
        {
            float _2846 = inversesqrt(dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707)));
            float _2847 = _2846 * _1705;
            float _2848 = _2846 * _1706;
            float _2849 = _2846 * _1707;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2725 < ((_2723 >> 12u) & 15u))
            {
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2832;
                float _2960 = _2708;
                float _2961 = _2710;
                float _2962 = _2712;
                float _2963 = _2714;
                float _2964 = _2716;
                float _2965 = _2718;
                uint _2966 = _2725;
                uint _2975;
                bool _2976;
                for (;;)
                {
                    _2975 = texelFetch(g_lightClassification, int((((_2622 << 5u) + (_2608 << 9u)) + (_2966 << 2u)) >> 2u)).x;
                    _2976 = _2975 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2976)
                    {
                        frontier_phi_72_pred = _2965;
                        frontier_phi_72_pred_1 = _2964;
                        frontier_phi_72_pred_2 = _2963;
                        frontier_phi_72_pred_3 = _2962;
                        frontier_phi_72_pred_4 = _2961;
                        frontier_phi_72_pred_5 = _2960;
                    }
                    else
                    {
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3172 = _2960;
                        float _3173 = _2961;
                        float _3174 = _2962;
                        float _3175 = _2963;
                        float _3176 = _2964;
                        float _3177 = _2965;
                        uint _3178 = _2975;
                        uint _3179;
                        vec4 _3204;
                        float _3205;
                        vec4 _3220;
                        vec3 _3232;
                        vec4 _3248;
                        vec4 _3263;
                        float _3309;
                        bool _3310;
                        for (;;)
                        {
                            uint _3189 = ((_2966 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3178));
                            _3179 = (_3178 + 4294967295u) & _3178;
                            uint _3191 = _3189 * 40u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            _3205 = _3204.w;
                            uint _3207 = (_3189 * 40u) + 4u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3222 = (_3189 * 40u) + 8u;
                            _3232 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x));
                            uint _3235 = (_3189 * 40u) + 16u;
                            _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            uint _3250 = (_3189 * 40u) + 20u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3265 = (_3189 * 40u) + 24u;
                            vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3284 = (_3189 * 40u) + 28u;
                            vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            _3309 = fma(_1707, _3297.z, fma(_1706, _3297.y, _3297.x * _1705)) + _3297.w;
                            _3310 = !((fma(_1707, _3278.z, fma(_1706, _3278.y, _3278.x * _1705)) + _3278.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3310)
                            {
                                float _3337 = _3204.x - _1705;
                                float _3338 = _3204.y - _1706;
                                float _3339 = _3204.z - _1707;
                                float _3340 = dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339));
                                float _3343 = inversesqrt(_3340);
                                float _3344 = _3343 * _3337;
                                float _3345 = _3343 * _3338;
                                float _3346 = _3343 * _3339;
                                float _3350 = 1.0 - (_3340 / (_3205 * _3205));
                                float _4459 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3355 = sqrt(_3340) * _3220.w;
                                float _3357 = 1.39999997615814208984375 / (_3355 + 1.39999997615814208984375);
                                float _3358 = _3357 * _3357;
                                float _3361 = ((1.0 - _3358) * dot(vec3(_3344, _3345, _3346), vec3(_587, _590, _593))) + _3358;
                                float _3364 = _3355 * _3355;
                                float _3368 = (fma(_1707, _3248.z, fma(_1706, _3248.y, _3248.x * _1705)) + _3248.w) / _3309;
                                float _3369 = (fma(_1707, _3263.z, fma(_1706, _3263.y, _3263.x * _1705)) + _3263.w) / _3309;
                                float _3373 = 1.0 - dot(vec2(_3368, _3369), vec2(_3368, _3369));
                                float _4475 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3375 = _3374 * (((isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0))) * _3351) / ((_3364 * 0.699999988079071044921875) + 1.0));
                                float _3387 = exp2(log2(1.0 / ((_3364 * 3.5) + 5.0)) * 0.25);
                                float _3388 = 1.0 - _647;
                                float _3395 = sqrt(1.0 - ((1.0 - (_3388 * _3388)) * (1.0 - (_3387 * _3387))));
                                float _3396 = _3395 * _3395;
                                float _3397 = _3396 * _3396;
                                float _3398 = _3344 - _2847;
                                float _3399 = _3345 - _2848;
                                float _3400 = _3346 - _2849;
                                float _3404 = inversesqrt(dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400)));
                                float _3408 = dot(vec3(_587, _590, _593), vec3((-0.0) - _2847, (-0.0) - _2848, (-0.0) - _2849));
                                float _4486 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3411 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3412 = dot(vec3(_587, _590, _593), vec3(_3404 * _3398, _3404 * _3399, _3404 * _3400));
                                float _4497 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3415 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3419 = ((_3415 * _3415) * (_3397 + (-1.0))) + 1.0;
                                float _3420 = _3357 * _3396;
                                float _3421 = _3420 * _3420;
                                float _3427 = ((1.0 - _3421) * dot(vec3(_587, _590, _593), vec3(_3344, _3345, _3346))) + _3421;
                                float _4508 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3429 = 1.0 - _3396;
                                float _3439 = (0.5 / (((_3428 * ((_3411 * _3429) + _3396)) + 9.9999999392252902907785028219223e-09) + (((_3428 * _3429) + _3396) * _3411))) * _3428;
                                float _4519 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3449 = (_3374 * _3351) * (((_3397 * 3.1415927410125732421875) * (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) / ((_3419 * _3419) * ((_3364 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3375 * _3220.y;
                                frontier_phi_78_pred_1 = _3375 * _3220.x;
                                frontier_phi_78_pred_2 = _3449 * _3232.z;
                                frontier_phi_78_pred_3 = _3449 * _3232.y;
                                frontier_phi_78_pred_4 = _3449 * _3232.x;
                                frontier_phi_78_pred_5 = _3375 * _3220.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3457 = frontier_phi_78_pred;
                            _3456 = frontier_phi_78_pred_1;
                            _3455 = frontier_phi_78_pred_2;
                            _3454 = frontier_phi_78_pred_3;
                            _3453 = frontier_phi_78_pred_4;
                            _3458 = frontier_phi_78_pred_5;
                            _3162 = _3456 + _3175;
                            _3163 = _3457 + _3176;
                            _3164 = _3458 + _3177;
                            _3159 = _3453 + _3172;
                            _3160 = _3454 + _3173;
                            _3161 = _3455 + _3174;
                            if (_3179 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3179;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3164;
                        frontier_phi_72_pred_1 = _3163;
                        frontier_phi_72_pred_2 = _3162;
                        frontier_phi_72_pred_3 = _3161;
                        frontier_phi_72_pred_4 = _3160;
                        frontier_phi_72_pred_5 = _3159;
                    }
                    _2832 = frontier_phi_72_pred;
                    _2830 = frontier_phi_72_pred_1;
                    _2828 = frontier_phi_72_pred_2;
                    _2826 = frontier_phi_72_pred_3;
                    _2824 = frontier_phi_72_pred_4;
                    _2822 = frontier_phi_72_pred_5;
                    uint _2967 = _2966 + 1u;
                    if (_2967 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2960 = _2822;
                        _2961 = _2824;
                        _2962 = _2826;
                        _2963 = _2828;
                        _2964 = _2830;
                        _2965 = _2832;
                        _2966 = _2967;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2832;
                frontier_phi_60_61_ladder_1 = _2830;
                frontier_phi_60_61_ladder_2 = _2826;
                frontier_phi_60_61_ladder_3 = _2824;
                frontier_phi_60_61_ladder_4 = _2822;
                frontier_phi_60_61_ladder_5 = _2828;
            }
            else
            {
                frontier_phi_60_61_ladder = _2718;
                frontier_phi_60_61_ladder_1 = _2716;
                frontier_phi_60_61_ladder_2 = _2712;
                frontier_phi_60_61_ladder_3 = _2710;
                frontier_phi_60_61_ladder_4 = _2708;
                frontier_phi_60_61_ladder_5 = _2714;
            }
            _2821 = frontier_phi_60_61_ladder_4;
            _2823 = frontier_phi_60_61_ladder_3;
            _2825 = frontier_phi_60_61_ladder_2;
            _2827 = frontier_phi_60_61_ladder_5;
            _2829 = frontier_phi_60_61_ladder_1;
            _2831 = frontier_phi_60_61_ladder;
        }
        float _2836 = isnan(1.0) ? _631 : (isnan(_631) ? 1.0 : min(_631, 1.0));
        _2641 = (_2836 * _2827) + _2172;
        _2643 = (_2836 * _2829) + _2174;
        _2645 = (_2836 * _2831) + _2176;
        _2647 = ((_2821 * 0.039999999105930328369140625) * _2836) + _2495;
        _2649 = ((_2823 * 0.039999999105930328369140625) * _2836) + _2497;
        _2651 = ((_2825 * 0.039999999105930328369140625) * _2836) + _2499;
    }
    else
    {
        _2641 = _2172;
        _2643 = _2174;
        _2645 = _2176;
        _2647 = _2495;
        _2649 = _2497;
        _2651 = _2499;
    }
    float _4535 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _4546 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _4557 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    uint _2671 = _237 + 6u;
    float _2679 = _565 / cbSceneParam._m0[86u].x;
    float _2680 = _566 / cbSceneParam._m0[86u].y;
    vec4 _2694 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2679, _2680, (log2((isnan(cbSceneParam._m0[77u].w) ? _499 : (isnan(_499) ? cbSceneParam._m0[77u].w : min(_499, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2696 = _2694.x;
    float _2697 = _2694.y;
    float _2698 = _2694.z;
    float _2699 = _2694.w;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    if (_499 > cbSceneParam._m0[78u].w)
    {
        float _2733 = isnan(_499) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _499 : min(cbSceneParam._m0[80u].w, _499));
        float _2734 = _2733 / _499;
        float _2745 = _2734 * _550;
        float _2746 = _551 * _2734;
        float _2747 = (-0.0) - _2746;
        float _2749 = _2734 * _552;
        float _2751 = (cbSceneParam._m0[77u].w * _2747) / _2733;
        float _2752 = _2751 + cbSceneParam._m0[79u].w;
        float _2753 = cbSceneParam._m0[79u].w - _2746;
        float _2759 = sqrt(((_2745 * _2745) + (_2746 * _2746)) + (_2749 * _2749));
        float _2762 = (1.0 - (cbSceneParam._m0[77u].w / _2733)) * _2759;
        float _2767 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2769 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2922;
        if (abs((_2747 - _2751) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2922 = ((((_2752 > 0.0) ? exp2(_2767 * _2752) : (2.0 - exp2(_2769 * _2752))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2762;
        }
        else
        {
            float _2882 = 1.0 / cbSceneParam._m0[80u].x;
            float _2883 = isnan(_2753) ? _2752 : (isnan(_2752) ? _2753 : max(_2752, _2753));
            float _2884 = isnan(_2753) ? _2752 : (isnan(_2752) ? _2753 : min(_2752, _2753));
            float _2893 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : min(_2883, 0.0));
            float _2894 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : min(_2884, 0.0));
            _2922 = ((abs(_2759 / _2747) * cbSceneParam._m0[80u].y) * ((((_2893 - _2894) * 2.0) - ((exp2(_2767 * (isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0)))) - exp2(_2767 * (isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0))))) * _2882)) - ((exp2(_2769 * _2893) - exp2(_2769 * _2894)) * _2882))) + (_2762 * cbSceneParam._m0[80u].z);
        }
        vec4 _2924 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2679, _2680, 1.0), 0.0);
        float _2933 = exp2((_2922 * (-1.44269502162933349609375)) * (1.0 - _2924.w));
        float _2934 = log2(_2933);
        float _2950 = log2(_2699);
        _2771 = (exp2(_2950 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2934 * cbSceneParam._m0[78u].x)) * _2924.x) / cbSceneParam._m0[78u].x)) + _2696;
        _2773 = (exp2(_2950 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2934 * cbSceneParam._m0[78u].y)) * _2924.y) / cbSceneParam._m0[78u].y)) + _2697;
        _2775 = (exp2(_2950 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2934 * cbSceneParam._m0[78u].z)) * _2924.z) / cbSceneParam._m0[78u].z)) + _2698;
        _2777 = _2933 * _2699;
    }
    else
    {
        _2771 = _2696;
        _2773 = _2697;
        _2775 = _2698;
        _2777 = _2699;
    }
    float _2789 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2790 = _2789 == 3.0;
    float _2791 = log2(_2777);
    float _2798 = exp2(_2791 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2641 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _631))) + ((_2647 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _1436)) * cbPerFrame._m0[3u].x));
    float _2799 = exp2(_2791 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2643 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _631))) + ((_2649 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1436)) * cbPerFrame._m0[3u].x));
    float _2800 = exp2(_2791 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2645 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _631))) + ((_2651 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _1436)) * cbPerFrame._m0[3u].x));
    float _2809 = (_2789 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2809 * (_2790 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2771)));
    SV_Target.y = _2809 * (_2790 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2773)));
    SV_Target.z = _2809 * (_2790 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2775)));
    SV_Target.w = cbInstanceData._m0[_2671].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2671].w;
}


