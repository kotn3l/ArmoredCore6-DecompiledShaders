#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1295;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3598 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3609 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3620 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _388 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _390 = _388.x;
    float _400 = dot(vec4(_390, _388.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _417 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_390 - _400) * cbMtdParam._m0[24u].x) + _400) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3631 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _425 = (_418 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _426 = (_418 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _427 = (_418 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    vec4 _444 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _287) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _288) + cbTextureTilingScale._m0[3u].w));
    vec4 _464 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _466 = _464.x;
    float _476 = dot(vec4(_466, _464.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _490 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_466 - _476) * cbMtdParam._m0[24u].x) + _476) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3642 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _491 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _498 = (_491 * ((_444.x * cbMtdParam._m0[13u].x) - _425)) + _425;
    float _499 = (_491 * ((_444.y * cbMtdParam._m0[13u].y) - _426)) + _426;
    float _500 = (_491 * ((_444.z * cbMtdParam._m0[13u].z) - _427)) + _427;
    float _504 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _498;
    float _507 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _499;
    float _510 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _500;
    float _517 = ((_498 - _504) * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) + _504;
    float _518 = ((_499 - _507) * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) + _507;
    float _519 = ((_500 - _510) * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) + _510;
    vec4 _538 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _287) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _288) + cbTextureTilingScale._m0[14u].w));
    vec4 _557 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _580 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _597 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _599 = _597.x;
    float _600 = _597.y;
    float _601 = _597.z;
    float _608 = ((_580.x - _599) * _418) + _599;
    float _609 = ((_580.y - _600) * _418) + _600;
    float _610 = ((_580.z - _601) * _418) + _601;
    vec4 _622 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _287) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _288) + cbTextureTilingScale._m0[2u].w));
    float _635 = ((_622.z - _610) * _491) + _610;
    float _638 = ((((_622.x - _608) * _491) + _608) * 2.0) + (-1.0);
    float _639 = ((((_622.y - _609) * _491) + _609) * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _3653 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _645 = sqrt(1.0 - (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))));
    vec4 _658 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _676 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _287) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _288) + cbTextureTilingScale._m0[11u].w));
    float _678 = _676.x;
    float _679 = 1.0 - _678;
    float _692 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_678 - _679) * cbMtdParam._m0[24u].z) + _679) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3664 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _693 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _700 = (_693 * ((_538.x * cbMtdParam._m0[18u].x) - _517)) + _517;
    float _701 = (_693 * ((_538.y * cbMtdParam._m0[18u].y) - _518)) + _518;
    float _702 = (_693 * ((_538.z * cbMtdParam._m0[18u].z) - _519)) + _519;
    float _707 = (((_557.z - _635) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _635;
    vec4 _720 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _287) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _288) + cbTextureTilingScale._m0[15u].w));
    float _727 = (_720.x * 2.0) + (-1.0);
    float _728 = (_720.y * 2.0) + (-1.0);
    float _729 = dot(vec2(_727, _728), vec2(_727, _728));
    float _3675 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _737 = (_693 * (_720.z - _707)) + _707;
    float _742 = _638 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_557.x * 2.0) + (-1.0)));
    float _743 = _639 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_557.y * 2.0) + (-1.0)));
    float _755 = (((_727 - _742) + (cbMtdParam._m0[21u].x * _742)) * _693) + _742;
    float _756 = (((_728 - _743) + (cbMtdParam._m0[21u].x * _743)) * _693) + _743;
    float _757 = (_693 * (sqrt(1.0 - (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) - _645)) + _645;
    float _759 = cbMtdParam._m0[22u].x + _658.w;
    float _762 = fma(_757, _234 * NORMAL.x, fma(_756, _241 * TANGENT.x, (_227 * _219) * _755));
    float _765 = fma(_757, _234 * NORMAL.y, fma(_756, _241 * TANGENT.y, (_227 * _220) * _755));
    float _768 = fma(_757, _234 * NORMAL.z, fma(_756, _241 * TANGENT.z, (_227 * _221) * _755));
    float _772 = inversesqrt(dot(vec3(_762, _765, _768), vec3(_762, _765, _768)));
    float _773 = _772 * _762;
    float _774 = _772 * _765;
    float _775 = _772 * _768;
    float _3686 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _776 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _3697 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _3708 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _3719 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _3730 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _794 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _836 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _846 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _836);
    float _847 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _836);
    float _848 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _836);
    float _852 = inversesqrt(dot(vec3(_846, _847, _848), vec3(_846, _847, _848)));
    float _853 = _846 * _852;
    float _854 = _847 * _852;
    float _855 = _848 * _852;
    float _861 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _862 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _880 = fma(_775, cbSceneParam._m0[5u].z, fma(_774, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _773));
    float _883 = fma(_775, cbSceneParam._m0[6u].z, fma(_774, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _773));
    float _886 = fma(_775, cbSceneParam._m0[7u].z, fma(_774, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _773));
    uint _900 = (_268 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _906 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) * cbInstanceData._m0[_900].x;
    float _907 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) * cbInstanceData._m0[_900].y;
    float _908 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * cbInstanceData._m0[_900].z;
    float _3741 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    vec4 _920 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _861, cbSceneParam._m0[86u].y * _862));
    float _924 = ((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * TEXCOORD_5.w) * _920.x;
    float _925 = dot(vec3(_773, _774, _775), vec3(_853, _854, _855));
    float _928 = _925 * 2.0;
    float _932 = (_928 * _773) - _853;
    float _933 = (_928 * _774) - _854;
    float _934 = (_928 * _775) - _855;
    float _938 = abs(dot(vec3(_853, _854, _855), vec3(_773, _774, _775)));
    float _3774 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _940 = sqrt(_776);
    float _953 = exp2((_940 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_940 * 3.0));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1294;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1019 = fma(_993, cbModelParam._m0[26u].z, fma(_989, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _985));
        float _1023 = fma(_993, cbModelParam._m0[27u].z, fma(_989, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _985));
        float _1027 = fma(_993, cbModelParam._m0[28u].z, fma(_989, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _985));
        float _1052 = _985 + _773;
        float _1053 = _989 + _774;
        float _1054 = _993 + _775;
        float _1064 = fma(_1054, cbModelParam._m0[26u].z, fma(_1053, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1052)) - _1019;
        float _1065 = fma(_1054, cbModelParam._m0[27u].z, fma(_1053, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1052)) - _1023;
        float _1066 = fma(_1054, cbModelParam._m0[28u].z, fma(_1053, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1052)) - _1027;
        float _1070 = inversesqrt(dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066)));
        float _1083 = ((_1070 * _1064) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1019 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1070 * _1065) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1023 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1070 * _1066) / cbModelParam._m0[34u].z) + ((((((_1027 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        float _1122 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1088.x + (-0.5));
        float _1124 = _1122 * (_1088.y + (-0.5));
        float _1125 = _1122 * (_1088.z + (-0.5));
        float _1132 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1095.x + (-0.5));
        float _1134 = _1132 * (_1095.y + (-0.5));
        float _1135 = _1132 * (_1095.z + (-0.5));
        float _1142 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1102.x + (-0.5));
        float _1144 = _1142 * (_1102.y + (-0.5));
        float _1145 = _1142 * (_1102.z + (-0.5));
        float _1152 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1109.x + (-0.5));
        float _1154 = _1152 * (_1109.y + (-0.5));
        float _1155 = _1152 * (_1109.z + (-0.5));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = _1123 * 0.5;
        float _1160 = _1133 * 0.5;
        float _1161 = _1143 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1176 = (dot(vec3(_773, _774, _775), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1186 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3822 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1188 + 1.0))) + _1193) * _1156;
        float _1203 = _1124 * 0.5;
        float _1204 = _1134 * 0.5;
        float _1205 = _1144 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_773, _774, _775), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3855 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1230 + 1.0))) + _1235) * _1157;
        float _1245 = _1125 * 0.5;
        float _1246 = _1135 * 0.5;
        float _1247 = _1145 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_773, _774, _775), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _3888 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1272 + 1.0))) + _1277) * _1158;
        _1294 = _1125;
        _1296 = _1124;
        _1297 = _1123;
        _1298 = _1135;
        _1299 = _1134;
        _1300 = _1133;
        _1301 = _1145;
        _1302 = _1144;
        _1303 = _1143;
        _1304 = _1158;
        _1305 = _1157;
        _1306 = _1156;
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1308 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
    }
    else
    {
        _1294 = _1295;
        _1296 = _1295;
        _1297 = _1295;
        _1298 = _1295;
        _1299 = _1295;
        _1300 = _1295;
        _1301 = _1295;
        _1302 = _1295;
        _1303 = _1295;
        _1304 = _1295;
        _1305 = _1295;
        _1306 = _1295;
        _1307 = 0.0;
        _1308 = 0.0;
        _1309 = 0.0;
    }
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1333 = fma(_993, cbModelParam._m0[30u].z, fma(_989, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _985));
        float _1337 = fma(_993, cbModelParam._m0[31u].z, fma(_989, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _985));
        float _1341 = fma(_993, cbModelParam._m0[32u].z, fma(_989, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _985));
        float _1364 = _985 + _773;
        float _1365 = _989 + _774;
        float _1366 = _993 + _775;
        float _1376 = fma(_1366, cbModelParam._m0[30u].z, fma(_1365, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1364)) - _1333;
        float _1377 = fma(_1366, cbModelParam._m0[31u].z, fma(_1365, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1364)) - _1337;
        float _1378 = fma(_1366, cbModelParam._m0[32u].z, fma(_1365, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1364)) - _1341;
        float _1382 = inversesqrt(dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378)));
        float _1395 = ((_1382 * _1376) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1333 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1382 * _1377) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1337 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1382 * _1378) / cbModelParam._m0[35u].z) + ((((((_1341 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        float _1432 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1399.x + (-0.5));
        float _1434 = _1432 * (_1399.y + (-0.5));
        float _1435 = _1432 * (_1399.z + (-0.5));
        float _1442 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1406.x + (-0.5));
        float _1444 = _1442 * (_1406.y + (-0.5));
        float _1445 = _1442 * (_1406.z + (-0.5));
        float _1452 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1413.x + (-0.5));
        float _1454 = _1452 * (_1413.y + (-0.5));
        float _1455 = _1452 * (_1413.z + (-0.5));
        float _1462 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1420.x + (-0.5));
        float _1464 = _1462 * (_1420.y + (-0.5));
        float _1465 = _1462 * (_1420.z + (-0.5));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = _1433 * 0.5;
        float _1470 = _1443 * 0.5;
        float _1471 = _1453 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_773, _774, _775), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _3951 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1496 + 1.0))) + _1501) * _1466;
        float _1511 = _1434 * 0.5;
        float _1512 = _1444 * 0.5;
        float _1513 = _1454 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_773, _774, _775), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _3984 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1538 + 1.0))) + _1543) * _1467;
        float _1553 = _1435 * 0.5;
        float _1554 = _1445 * 0.5;
        float _1555 = _1455 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_773, _774, _775), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4017 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1580 + 1.0))) + _1585) * _1468;
        _1602 = _1435;
        _1603 = _1434;
        _1604 = _1433;
        _1605 = _1445;
        _1606 = _1444;
        _1607 = _1443;
        _1608 = _1455;
        _1609 = _1454;
        _1610 = _1453;
        _1611 = _1468;
        _1612 = _1467;
        _1613 = _1466;
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
    }
    else
    {
        _1602 = _1295;
        _1603 = _1295;
        _1604 = _1295;
        _1605 = _1295;
        _1606 = _1295;
        _1607 = _1295;
        _1608 = _1295;
        _1609 = _1295;
        _1610 = _1295;
        _1611 = _1295;
        _1612 = _1295;
        _1613 = _1295;
        _1614 = 0.0;
        _1615 = 0.0;
        _1616 = 0.0;
    }
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1307)) + _1307;
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1308)) + _1308;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1309)) + _1309;
    float _1649 = fma(_1628, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1626 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1628, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1626 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1628, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1626));
    float _1670 = _932 * 0.5;
    float _1671 = _933 * 0.5;
    float _1672 = _934 * 0.5;
    float _1673 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1676 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1679 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1713;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1686 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1294, _1298, _1301, _1304));
        float _1690 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1296, _1299, _1302, _1305));
        float _1694 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1297, _1300, _1303, _1306));
        float _1701 = dot(vec4(cbModelParam._m0[39u]), vec4(_1670, _1671, _1672, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1724;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1715 = dot(vec4(cbModelParam._m0[40u]), vec4(_1670, _1671, _1672, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1728 = (_1724 * cbModelParam._m0[1u].x) + (_1713 * (1.0 - cbModelParam._m0[1u].x));
    float _1738 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _776);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1738 : min(cbModelParam._m0[25u].z, _1738));
    float _1819;
    float _1821;
    float _1823;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1786 = fma(_993, cbModelParam._m0[13u].z, fma(_989, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _985)) + cbModelParam._m0[13u].w;
        float _1790 = fma(_993, cbModelParam._m0[14u].z, fma(_989, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _985)) + cbModelParam._m0[14u].w;
        float _1794 = fma(_993, cbModelParam._m0[15u].z, fma(_989, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _985)) + cbModelParam._m0[15u].w;
        float _1797 = fma(_934, cbModelParam._m0[13u].z, fma(_933, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _932));
        float _1800 = fma(_934, cbModelParam._m0[14u].z, fma(_933, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _932));
        float _1803 = fma(_934, cbModelParam._m0[15u].z, fma(_933, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _932));
        float _1831;
        if (_1797 > 0.0)
        {
            _1831 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1831 = frontier_phi_14_12_ladder;
        }
        float _2031;
        if (_1800 > 0.0)
        {
            _2031 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2031 = frontier_phi_23_19_ladder;
        }
        float _2274;
        if (_1803 > 0.0)
        {
            _2274 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2274 = frontier_phi_35_30_ladder;
        }
        float _2276 = isnan(_2031) ? _1831 : (isnan(_1831) ? _2031 : min(_1831, _2031));
        float _2277 = isnan(_2274) ? _2276 : (isnan(_2276) ? _2274 : min(_2276, _2274));
        float _2281 = (_2277 * _1797) + _1786;
        float _2282 = (_2277 * _1800) + _1790;
        float _2283 = (_2277 * _1803) + _1794;
        float _2284 = _2277 * 9.9999997473787516355514526367188e-05;
        float _2286 = (-1.0) - _2284;
        float _2288 = _2284 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2283 > _2288) || ((_2283 < _2286) || ((_2282 > _2288) || ((_2282 < _2286) || ((_2281 < _2286) || (_2281 > _2288))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2407 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2283, cbModelParam._m0[9u].z, fma(_2282, cbModelParam._m0[9u].y, _2281 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2283, cbModelParam._m0[10u].z, fma(_2282, cbModelParam._m0[10u].y, _2281 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2283, cbModelParam._m0[11u].z, fma(_2282, cbModelParam._m0[11u].y, _2281 * cbModelParam._m0[11u].x))), _1739);
            frontier_phi_13_35_ladder = _2407.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2407.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2407.x * cbModelParam._m0[1u].y;
        }
        _1819 = frontier_phi_13_35_ladder_2;
        _1821 = frontier_phi_13_35_ladder_1;
        _1823 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1807 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_932, _933, _934), _1739);
        _1819 = _1807.x * cbModelParam._m0[1u].y;
        _1821 = _1807.y * cbModelParam._m0[1u].y;
        _1823 = _1807.z * cbModelParam._m0[1u].y;
    }
    float _1827 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _776);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1827 : min(cbModelParam._m0[25u].w, _1827));
    float _1917;
    float _1919;
    float _1921;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1881 = fma(_993, cbModelParam._m0[21u].z, fma(_989, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _985)) + cbModelParam._m0[21u].w;
        float _1885 = fma(_993, cbModelParam._m0[22u].z, fma(_989, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _985)) + cbModelParam._m0[22u].w;
        float _1889 = fma(_993, cbModelParam._m0[23u].z, fma(_989, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _985)) + cbModelParam._m0[23u].w;
        float _1892 = fma(_934, cbModelParam._m0[21u].z, fma(_933, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _932));
        float _1895 = fma(_934, cbModelParam._m0[22u].z, fma(_933, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _932));
        float _1898 = fma(_934, cbModelParam._m0[23u].z, fma(_933, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _932));
        float _2036;
        if (_1892 > 0.0)
        {
            _2036 = abs((1.0 - _1881) / _1892);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1881 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2036 = frontier_phi_25_21_ladder;
        }
        float _2301;
        if (_1895 > 0.0)
        {
            _2301 = abs((1.0 - _1885) / _1895);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1885 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2301 = frontier_phi_37_32_ladder;
        }
        float _2506;
        if (_1898 > 0.0)
        {
            _2506 = abs((1.0 - _1889) / _1898);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1889 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2506 = frontier_phi_46_43_ladder;
        }
        float _2508 = isnan(_2301) ? _2036 : (isnan(_2036) ? _2301 : min(_2036, _2301));
        float _2509 = isnan(_2506) ? _2508 : (isnan(_2508) ? _2506 : min(_2508, _2506));
        float _2513 = (_2509 * _1892) + _1881;
        float _2514 = (_2509 * _1895) + _1885;
        float _2515 = (_2509 * _1898) + _1889;
        float _2516 = _2509 * 9.9999997473787516355514526367188e-05;
        float _2517 = (-1.0) - _2516;
        float _2519 = _2516 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2515 > _2519) || ((_2515 < _2517) || ((_2514 > _2519) || ((_2514 < _2517) || ((_2513 < _2517) || (_2513 > _2519))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2714 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2515, cbModelParam._m0[17u].z, fma(_2514, cbModelParam._m0[17u].y, _2513 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2515, cbModelParam._m0[18u].z, fma(_2514, cbModelParam._m0[18u].y, _2513 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2515, cbModelParam._m0[19u].z, fma(_2514, cbModelParam._m0[19u].y, _2513 * cbModelParam._m0[19u].x))), _1828);
            frontier_phi_22_46_ladder = _2714.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2714.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2714.x * cbModelParam._m0[1u].z;
        }
        _1917 = frontier_phi_22_46_ladder_2;
        _1919 = frontier_phi_22_46_ladder_1;
        _1921 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1901 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_932, _933, _934), _1828);
        _1917 = _1901.x * cbModelParam._m0[1u].z;
        _1919 = _1901.y * cbModelParam._m0[1u].z;
        _1921 = _1901.z * cbModelParam._m0[1u].z;
    }
    float _1933 = ((((1.0 - _953) * ((_940 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_953 * _940)) * _924;
    float _1934 = _1933 * ((cbModelParam._m0[1u].w * (_1917 - _1819)) + _1819);
    float _1935 = _1933 * ((cbModelParam._m0[1u].w * (_1919 - _1821)) + _1821);
    float _1936 = _1933 * ((cbModelParam._m0[1u].w * (_1921 - _1823)) + _1823);
    float _1939 = fma(_1936, cbSceneParam._m0[89u].z, fma(_1935, cbSceneParam._m0[89u].y, _1934 * cbSceneParam._m0[89u].x));
    float _1942 = fma(_1936, cbSceneParam._m0[90u].z, fma(_1935, cbSceneParam._m0[90u].y, _1934 * cbSceneParam._m0[90u].x));
    float _1945 = fma(_1936, cbSceneParam._m0[91u].z, fma(_1935, cbSceneParam._m0[91u].y, _1934 * cbSceneParam._m0[91u].x));
    uvec4 _1955 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _1957 = _1955.x * 14u;
    uint _1958 = _1957 + 13u;
    float _1965 = _924 + (-1.0);
    float _1970 = (cbLight._m0[_1958].x * _1965) + 1.0;
    float _1971 = (cbLight._m0[_1958].y * _1965) + 1.0;
    float _1972 = (cbLight._m0[_1958].z * _1965) + 1.0;
    float _1973 = (cbLight._m0[_1958].w * _1965) + 1.0;
    uint _1974 = _1957 + 5u;
    float _1980 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
    uint _1984 = _1957 + 4u;
    float _1990 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
    uint _1994 = _1957 | 1u;
    float _2005 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_773, _774, _775));
    float _2008 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_773, _774, _775));
    float _4153 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _4164 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2013 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * 0.3183098733425140380859375;
    float _2015 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * 0.3183098733425140380859375;
    float _2022 = ((cbLight._m0[_1974].x * _1980) * _2015) + ((cbLight._m0[_1984].x * _1990) * _2013);
    float _2023 = ((_1980 * cbLight._m0[_1974].y) * _2015) + ((_1990 * cbLight._m0[_1984].y) * _2013);
    float _2024 = ((_1980 * cbLight._m0[_1974].z) * _2015) + ((_1990 * cbLight._m0[_1984].z) * _2013);
    uvec4 _2028 = floatBitsToUint(cbLight._m0[_1957 + 12u]);
    bool _2030 = _2028.x == 0u;
    float _2041;
    float _2043;
    float _2045;
    if (_2030)
    {
        _2041 = _2022;
        _2043 = _2023;
        _2045 = _2024;
    }
    else
    {
        uint _2049 = _1957 + 6u;
        float _2065 = (dot(vec3(cbLight._m0[_1957 + 2u].xyz), vec3(_773, _774, _775)) * 0.5) + 0.5;
        float _2066 = _2065 * _2065;
        float _4175 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2067 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2068 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2041 = (((cbLight._m0[_2049].x * 0.3183098733425140380859375) * _2067) * _2068) + _2022;
        _2043 = (((cbLight._m0[_2049].y * 0.3183098733425140380859375) * _2067) * _2068) + _2023;
        _2045 = (((cbLight._m0[_2049].z * 0.3183098733425140380859375) * _2067) * _2068) + _2024;
    }
    bool _2048 = _2028.y == 0u;
    float _2086;
    float _2088;
    float _2090;
    if (_2048)
    {
        _2086 = _2041;
        _2088 = _2043;
        _2090 = _2045;
    }
    else
    {
        uint _2245 = _1957 + 7u;
        float _2261 = (dot(vec3(cbLight._m0[_1957 + 3u].xyz), vec3(_773, _774, _775)) * 0.5) + 0.5;
        float _2262 = _2261 * _2261;
        float _4191 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2263 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _2264 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2086 = (((cbLight._m0[_2245].x * 0.3183098733425140380859375) * _2263) * _2264) + _2041;
        _2088 = (((cbLight._m0[_2245].y * 0.3183098733425140380859375) * _2263) * _2264) + _2043;
        _2090 = (((cbLight._m0[_2245].z * 0.3183098733425140380859375) * _2263) * _2264) + _2045;
    }
    uint _2093 = _1957 + 8u;
    float _2106 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1957].w)) * _776) * 0.949999988079071044921875);
    float _2107 = _2106 * _2106;
    float _2108 = cbLight._m0[_1957].x + _853;
    float _2109 = cbLight._m0[_1957].y + _854;
    float _2110 = cbLight._m0[_1957].z + _855;
    float _2114 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
    float _2115 = _2114 * _2108;
    float _2116 = _2114 * _2109;
    float _2117 = _2114 * _2110;
    float _2118 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_1957].xyz));
    float _4207 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _4218 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _2122 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _2123 = dot(vec3(_773, _774, _775), vec3(_2115, _2116, _2117));
    float _4229 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _2127 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_2115, _2116, _2117));
    float _4240 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2131 = _2107 * _2107;
    float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
    float _2146 = (exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2147 = 1.0 - _2107;
    float _2158 = (0.5 / (((_2122 * ((_2121 * _2147) + _2107)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2147) + _2107) * _2121))) * _2121;
    float _4251 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2160 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
    uint _2171 = _1957 + 9u;
    float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1994].w)) * _776) * 0.949999988079071044921875);
    float _2183 = _2182 * _2182;
    float _2184 = cbLight._m0[_1994].x + _853;
    float _2185 = cbLight._m0[_1994].y + _854;
    float _2186 = cbLight._m0[_1994].z + _855;
    float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
    float _2191 = _2190 * _2184;
    float _2192 = _2190 * _2185;
    float _2193 = _2190 * _2186;
    float _2194 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_1994].xyz));
    float _4262 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2197 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2198 = dot(vec3(_773, _774, _775), vec3(_2191, _2192, _2193));
    float _4273 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2202 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_2191, _2192, _2193));
    float _4284 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2206 = _2183 * _2183;
    float _2210 = ((_2201 * _2201) * (_2206 + (-1.0))) + 1.0;
    float _2219 = (exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2220 = 1.0 - _2183;
    float _2230 = (0.5 / (((_2122 * ((_2197 * _2220) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2220) + _2183) * _2197))) * _2197;
    float _4295 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2232 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2206 / ((_2210 * _2210) * 3.141590118408203125));
    float _2242 = (((_2219 * cbLight._m0[_2171].x) * _2232) * _1980) + (((_2146 * cbLight._m0[_2093].x) * _2160) * _1990);
    float _2243 = (((_2219 * cbLight._m0[_2171].y) * _2232) * _1980) + (((_2146 * cbLight._m0[_2093].y) * _2160) * _1990);
    float _2244 = (((_2219 * cbLight._m0[_2171].z) * _2232) * _1980) + (((_2146 * cbLight._m0[_2093].z) * _2160) * _1990);
    float _2306;
    float _2308;
    float _2310;
    if (_2030)
    {
        _2306 = _2242;
        _2308 = _2243;
        _2310 = _2244;
    }
    else
    {
        uint _2312 = _1957 + 2u;
        uint _2316 = _1957 + 10u;
        float _2330 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _776) * 0.949999988079071044921875);
        float _2331 = _2330 * _2330;
        float _2332 = cbLight._m0[_2312].x + _853;
        float _2333 = cbLight._m0[_2312].y + _854;
        float _2334 = cbLight._m0[_2312].z + _855;
        float _2338 = inversesqrt(dot(vec3(_2332, _2333, _2334), vec3(_2332, _2333, _2334)));
        float _2339 = _2338 * _2332;
        float _2340 = _2338 * _2333;
        float _2341 = _2338 * _2334;
        float _2342 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2312].xyz));
        float _4306 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2346 = dot(vec3(_773, _774, _775), vec3(_2339, _2340, _2341));
        float _4317 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2349 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2350 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2339, _2340, _2341));
        float _4328 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2354 = _2331 * _2331;
        float _2358 = ((_2349 * _2349) * (_2354 + (-1.0))) + 1.0;
        float _2367 = (exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2368 = 1.0 - _2331;
        float _2378 = (0.5 / (((_2122 * ((_2345 * _2368) + _2331)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2368) + _2331) * _2345))) * _2345;
        float _4339 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2380 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2354 / ((_2358 * _2358) * 3.141590118408203125));
        float _2381 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2306 = (((_2367 * cbLight._m0[_2316].x) * _2380) * _2381) + _2242;
        _2308 = (((_2367 * cbLight._m0[_2316].y) * _2380) * _2381) + _2243;
        _2310 = (((_2367 * cbLight._m0[_2316].z) * _2380) * _2381) + _2244;
    }
    float _2416;
    float _2418;
    float _2420;
    if (_2048)
    {
        _2416 = _2306;
        _2418 = _2308;
        _2420 = _2310;
    }
    else
    {
        uint _2427 = _1957 + 3u;
        uint _2431 = _1957 + 11u;
        float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _776) * 0.949999988079071044921875);
        float _2446 = _2445 * _2445;
        float _2447 = cbLight._m0[_2427].x + _853;
        float _2448 = cbLight._m0[_2427].y + _854;
        float _2449 = cbLight._m0[_2427].z + _855;
        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
        float _2454 = _2453 * _2447;
        float _2455 = _2453 * _2448;
        float _2456 = _2453 * _2449;
        float _2457 = dot(vec3(_773, _774, _775), vec3(cbLight._m0[_2427].xyz));
        float _4355 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2461 = dot(vec3(_773, _774, _775), vec3(_2454, _2455, _2456));
        float _4366 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2465 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2454, _2455, _2456));
        float _4377 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2469 = _2446 * _2446;
        float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
        float _2482 = (exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2483 = 1.0 - _2446;
        float _2493 = (0.5 / (((_2122 * ((_2460 * _2483) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2483) + _2446) * _2460))) * _2460;
        float _4388 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2495 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
        float _2496 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2416 = (((_2482 * cbLight._m0[_2431].x) * _2495) * _2496) + _2306;
        _2418 = (((_2482 * cbLight._m0[_2431].y) * _2495) * _2496) + _2308;
        _2420 = (((_2482 * cbLight._m0[_2431].z) * _2495) * _2496) + _2310;
    }
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    float _2639;
    float _2641;
    if (_1955.y == 0u)
    {
        float _2571 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2572 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2571;
        float _2573 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2571;
        float _2574 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2571;
        uvec4 _2586 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2587 = _2586.x;
        uint _2598 = uint((float(_2586.y) * floor(float(uint(cbSceneParam._m0[85u].y * _862) / _2587))) + floor(float(uint(cbSceneParam._m0[85u].x * _861) / _2587)));
        float _2608 = (log2(_2574 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2609 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        uint _2612 = uint(isnan(14.0) ? _2609 : (isnan(_2609) ? 14.0 : min(_2609, 14.0)));
        uvec4 _2617 = texelFetch(g_lightClusterGridBuffer, int(((_2612 << 2u) + (_2598 << 6u)) >> 2u));
        uint _2618 = _2617.x;
        uint _2619 = _2586.z;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        if (((((1u << ((_2619 >> 4u) & 15u)) + 4294967295u) & _2618) == 0u) || ((_2619 & 240u) == 0u))
        {
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
            _2725 = 0.0;
            _2727 = 0.0;
            _2729 = 0.0;
        }
        else
        {
            float _2720;
            float _2722;
            float _2724;
            float _2726;
            float _2728;
            float _2730;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            uint _2870 = 0u;
            uint _2879;
            bool _2880;
            for (;;)
            {
                _2879 = texelFetch(g_lightClassification, int((((_2612 << 5u) + (_2598 << 9u)) + (_2870 << 2u)) >> 2u)).x;
                _2880 = _2879 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2880)
                {
                    frontier_phi_61_pred = _2864;
                    frontier_phi_61_pred_1 = _2869;
                    frontier_phi_61_pred_2 = _2868;
                    frontier_phi_61_pred_3 = _2867;
                    frontier_phi_61_pred_4 = _2866;
                    frontier_phi_61_pred_5 = _2865;
                }
                else
                {
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    uint _2994;
                    _2988 = _2864;
                    _2989 = _2865;
                    _2990 = _2866;
                    _2991 = _2867;
                    _2992 = _2868;
                    _2993 = _2869;
                    _2994 = _2879;
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    for (;;)
                    {
                        uint _2998 = uint(findLSB(_2994)) + (_2870 << 5u);
                        uint _2995 = (_2994 + 4294967295u) & _2994;
                        uint _3000 = _2998 * 48u;
                        vec4 _3014 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3000)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 3u)).x));
                        uint _3020 = (_2998 * 48u) + 4u;
                        vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3020)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 3u)).x));
                        uint _3039 = (_2998 * 48u) + 8u;
                        vec3 _3050 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3039)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 2u)).x));
                        float _3054 = _3014.x - _2572;
                        float _3055 = _3014.y - _2573;
                        float _3056 = _3014.z - _2574;
                        float _3057 = dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056));
                        float _3060 = inversesqrt(_3057);
                        float _3061 = _3060 * _3054;
                        float _3062 = _3060 * _3055;
                        float _3063 = _3060 * _3056;
                        float _3064 = dot(vec3(_880, _883, _886), vec3(_3061, _3062, _3063));
                        float _3069 = 1.0 - (_3057 * _3014.w);
                        float _4414 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3070 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                        float _3071 = sqrt(_3057) * _3033.w;
                        float _3074 = 1.39999997615814208984375 / (_3071 + 1.39999997615814208984375);
                        float _3075 = _3074 * _3074;
                        float _3078 = ((1.0 - _3075) * _3064) + _3075;
                        float _3081 = _3071 * _3071;
                        float _3085 = ((isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0))) * _3070) / ((_3081 * 0.699999988079071044921875) + 1.0);
                        float _3089 = (-0.0) - _2572;
                        float _3090 = (-0.0) - _2573;
                        float _3091 = (-0.0) - _2574;
                        float _3095 = inversesqrt(dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091)));
                        float _3096 = _3095 * _3089;
                        float _3097 = _3095 * _3090;
                        float _3098 = _3095 * _3091;
                        float _3106 = exp2(log2(1.0 / ((_3081 * 3.5) + 5.0)) * 0.25);
                        float _3107 = 1.0 - _940;
                        float _3114 = sqrt(1.0 - ((1.0 - (_3107 * _3107)) * (1.0 - (_3106 * _3106))));
                        float _3115 = _3114 * _3114;
                        float _3116 = _3115 * _3115;
                        float _3117 = _3096 + _3061;
                        float _3118 = _3097 + _3062;
                        float _3119 = _3098 + _3063;
                        float _3123 = inversesqrt(dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119)));
                        float _3127 = dot(vec3(_880, _883, _886), vec3(_3096, _3097, _3098));
                        float _4430 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3130 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3131 = dot(vec3(_880, _883, _886), vec3(_3123 * _3117, _3123 * _3118, _3123 * _3119));
                        float _4441 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3134 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                        float _3138 = ((_3134 * _3134) * (_3116 + (-1.0))) + 1.0;
                        float _3139 = _3074 * _3115;
                        float _3140 = _3139 * _3139;
                        float _3143 = ((1.0 - _3140) * _3064) + _3140;
                        float _4452 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3144 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3145 = 1.0 - _3115;
                        float _3155 = (0.5 / (((_3144 * ((_3130 * _3145) + _3115)) + 9.9999999392252902907785028219223e-09) + (((_3144 * _3145) + _3115) * _3130))) * _3144;
                        float _4463 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3166 = (((_3116 * 3.1415927410125732421875) * (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) / ((_3138 * _3138) * ((_3081 * 2.1991131305694580078125) + 3.141590118408203125))) * _3070;
                        _2923 = (_3085 * _3033.x) + _2991;
                        _2924 = (_3085 * _3033.y) + _2992;
                        _2925 = (_3085 * _3033.z) + _2993;
                        _2920 = (_3166 * _3050.x) + _2988;
                        _2921 = (_3166 * _3050.y) + _2989;
                        _2922 = (_3166 * _3050.z) + _2990;
                        if (_2995 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2988 = _2920;
                            _2989 = _2921;
                            _2990 = _2922;
                            _2991 = _2923;
                            _2992 = _2924;
                            _2993 = _2925;
                            _2994 = _2995;
                        }
                    }
                    frontier_phi_61_pred = _2920;
                    frontier_phi_61_pred_1 = _2925;
                    frontier_phi_61_pred_2 = _2924;
                    frontier_phi_61_pred_3 = _2923;
                    frontier_phi_61_pred_4 = _2922;
                    frontier_phi_61_pred_5 = _2921;
                }
                _2720 = frontier_phi_61_pred;
                _2730 = frontier_phi_61_pred_1;
                _2728 = frontier_phi_61_pred_2;
                _2726 = frontier_phi_61_pred_3;
                _2724 = frontier_phi_61_pred_4;
                _2722 = frontier_phi_61_pred_5;
                uint _2871 = _2870 + 1u;
                if (_2871 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2864 = _2720;
                    _2865 = _2722;
                    _2866 = _2724;
                    _2867 = _2726;
                    _2868 = _2728;
                    _2869 = _2730;
                    _2870 = _2871;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
            _2725 = _2726;
            _2727 = _2728;
            _2729 = _2730;
        }
        uvec4 _2733 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2734 = _2733.z;
        uint _2736 = (_2734 >> 8u) & 15u;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        if (((4294967295u << _2736) & _2618) == 0u)
        {
            _2832 = _2719;
            _2834 = _2721;
            _2836 = _2723;
            _2838 = _2725;
            _2840 = _2727;
            _2842 = _2729;
        }
        else
        {
            float _2857 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
            float _2858 = _2857 * _2572;
            float _2859 = _2857 * _2573;
            float _2860 = _2857 * _2574;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2736 < ((_2734 >> 12u) & 15u))
            {
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2841;
                float _2843;
                float _2971 = _2719;
                float _2972 = _2721;
                float _2973 = _2723;
                float _2974 = _2725;
                float _2975 = _2727;
                float _2976 = _2729;
                uint _2977 = _2736;
                uint _2986;
                bool _2987;
                for (;;)
                {
                    _2986 = texelFetch(g_lightClassification, int((((_2612 << 5u) + (_2598 << 9u)) + (_2977 << 2u)) >> 2u)).x;
                    _2987 = _2986 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2987)
                    {
                        frontier_phi_67_pred = _2974;
                        frontier_phi_67_pred_1 = _2975;
                        frontier_phi_67_pred_2 = _2976;
                        frontier_phi_67_pred_3 = _2973;
                        frontier_phi_67_pred_4 = _2972;
                        frontier_phi_67_pred_5 = _2971;
                    }
                    else
                    {
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3184 = _2971;
                        float _3185 = _2972;
                        float _3186 = _2973;
                        float _3187 = _2974;
                        float _3188 = _2975;
                        float _3189 = _2976;
                        uint _3190 = _2986;
                        uint _3191;
                        vec4 _3216;
                        float _3217;
                        vec4 _3232;
                        vec3 _3244;
                        vec4 _3259;
                        vec4 _3274;
                        float _3320;
                        bool _3321;
                        for (;;)
                        {
                            uint _3201 = ((_2977 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3190));
                            _3191 = (_3190 + 4294967295u) & _3190;
                            uint _3203 = _3201 * 40u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            _3217 = _3216.w;
                            uint _3219 = (_3201 * 40u) + 4u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3234 = (_3201 * 40u) + 8u;
                            _3244 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x));
                            uint _3246 = (_3201 * 40u) + 16u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3261 = (_3201 * 40u) + 20u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3276 = (_3201 * 40u) + 24u;
                            vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3295 = (_3201 * 40u) + 28u;
                            vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            _3320 = fma(_2574, _3308.z, fma(_2573, _3308.y, _3308.x * _2572)) + _3308.w;
                            _3321 = !((fma(_2574, _3289.z, fma(_2573, _3289.y, _3289.x * _2572)) + _3289.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3321)
                            {
                                float _3348 = _3216.x - _2572;
                                float _3349 = _3216.y - _2573;
                                float _3350 = _3216.z - _2574;
                                float _3351 = dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350));
                                float _3354 = inversesqrt(_3351);
                                float _3355 = _3354 * _3348;
                                float _3356 = _3354 * _3349;
                                float _3357 = _3354 * _3350;
                                float _3361 = 1.0 - (_3351 / (_3217 * _3217));
                                float _4474 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3366 = sqrt(_3351) * _3232.w;
                                float _3368 = 1.39999997615814208984375 / (_3366 + 1.39999997615814208984375);
                                float _3369 = _3368 * _3368;
                                float _3372 = ((1.0 - _3369) * dot(vec3(_3355, _3356, _3357), vec3(_880, _883, _886))) + _3369;
                                float _3375 = _3366 * _3366;
                                float _3379 = (fma(_2574, _3259.z, fma(_2573, _3259.y, _3259.x * _2572)) + _3259.w) / _3320;
                                float _3380 = (fma(_2574, _3274.z, fma(_2573, _3274.y, _3274.x * _2572)) + _3274.w) / _3320;
                                float _3384 = 1.0 - dot(vec2(_3379, _3380), vec2(_3379, _3380));
                                float _4490 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3385 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3386 = _3385 * (((isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0))) * _3362) / ((_3375 * 0.699999988079071044921875) + 1.0));
                                float _3398 = exp2(log2(1.0 / ((_3375 * 3.5) + 5.0)) * 0.25);
                                float _3399 = 1.0 - _940;
                                float _3406 = sqrt(1.0 - ((1.0 - (_3399 * _3399)) * (1.0 - (_3398 * _3398))));
                                float _3407 = _3406 * _3406;
                                float _3408 = _3407 * _3407;
                                float _3409 = _3355 - _2858;
                                float _3410 = _3356 - _2859;
                                float _3411 = _3357 - _2860;
                                float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                                float _3419 = dot(vec3(_880, _883, _886), vec3((-0.0) - _2858, (-0.0) - _2859, (-0.0) - _2860));
                                float _4501 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3422 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                                float _3423 = dot(vec3(_880, _883, _886), vec3(_3415 * _3409, _3415 * _3410, _3415 * _3411));
                                float _4512 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3426 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3430 = ((_3426 * _3426) * (_3408 + (-1.0))) + 1.0;
                                float _3431 = _3368 * _3407;
                                float _3432 = _3431 * _3431;
                                float _3438 = ((1.0 - _3432) * dot(vec3(_880, _883, _886), vec3(_3355, _3356, _3357))) + _3432;
                                float _4523 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3439 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3440 = 1.0 - _3407;
                                float _3450 = (0.5 / (((_3439 * ((_3422 * _3440) + _3407)) + 9.9999999392252902907785028219223e-09) + (((_3439 * _3440) + _3407) * _3422))) * _3439;
                                float _4534 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3460 = (_3385 * _3362) * (((_3408 * 3.1415927410125732421875) * (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) / ((_3430 * _3430) * ((_3375 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3460 * _3244.x;
                                frontier_phi_73_pred_1 = _3460 * _3244.y;
                                frontier_phi_73_pred_2 = _3386 * _3232.z;
                                frontier_phi_73_pred_3 = _3386 * _3232.y;
                                frontier_phi_73_pred_4 = _3386 * _3232.x;
                                frontier_phi_73_pred_5 = _3460 * _3244.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3464 = frontier_phi_73_pred;
                            _3465 = frontier_phi_73_pred_1;
                            _3469 = frontier_phi_73_pred_2;
                            _3468 = frontier_phi_73_pred_3;
                            _3467 = frontier_phi_73_pred_4;
                            _3466 = frontier_phi_73_pred_5;
                            _3174 = _3467 + _3187;
                            _3175 = _3468 + _3188;
                            _3176 = _3469 + _3189;
                            _3171 = _3464 + _3184;
                            _3172 = _3465 + _3185;
                            _3173 = _3466 + _3186;
                            if (_3191 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3191;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3174;
                        frontier_phi_67_pred_1 = _3175;
                        frontier_phi_67_pred_2 = _3176;
                        frontier_phi_67_pred_3 = _3173;
                        frontier_phi_67_pred_4 = _3172;
                        frontier_phi_67_pred_5 = _3171;
                    }
                    _2839 = frontier_phi_67_pred;
                    _2841 = frontier_phi_67_pred_1;
                    _2843 = frontier_phi_67_pred_2;
                    _2837 = frontier_phi_67_pred_3;
                    _2835 = frontier_phi_67_pred_4;
                    _2833 = frontier_phi_67_pred_5;
                    uint _2978 = _2977 + 1u;
                    if (_2978 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2971 = _2833;
                        _2972 = _2835;
                        _2973 = _2837;
                        _2974 = _2839;
                        _2975 = _2841;
                        _2976 = _2843;
                        _2977 = _2978;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2841;
                frontier_phi_55_56_ladder_1 = _2843;
                frontier_phi_55_56_ladder_2 = _2839;
                frontier_phi_55_56_ladder_3 = _2837;
                frontier_phi_55_56_ladder_4 = _2835;
                frontier_phi_55_56_ladder_5 = _2833;
            }
            else
            {
                frontier_phi_55_56_ladder = _2727;
                frontier_phi_55_56_ladder_1 = _2729;
                frontier_phi_55_56_ladder_2 = _2725;
                frontier_phi_55_56_ladder_3 = _2723;
                frontier_phi_55_56_ladder_4 = _2721;
                frontier_phi_55_56_ladder_5 = _2719;
            }
            _2832 = frontier_phi_55_56_ladder_5;
            _2834 = frontier_phi_55_56_ladder_4;
            _2836 = frontier_phi_55_56_ladder_3;
            _2838 = frontier_phi_55_56_ladder_2;
            _2840 = frontier_phi_55_56_ladder;
            _2842 = frontier_phi_55_56_ladder_1;
        }
        float _2847 = isnan(1.0) ? _924 : (isnan(_924) ? 1.0 : min(_924, 1.0));
        _2631 = (_2847 * _2838) + _2086;
        _2633 = (_2847 * _2840) + _2088;
        _2635 = (_2847 * _2842) + _2090;
        _2637 = ((_2832 * 0.039999999105930328369140625) * _2847) + _2416;
        _2639 = ((_2834 * 0.039999999105930328369140625) * _2847) + _2418;
        _2641 = ((_2836 * 0.039999999105930328369140625) * _2847) + _2420;
    }
    else
    {
        _2631 = _2086;
        _2633 = _2088;
        _2635 = _2090;
        _2637 = _2416;
        _2639 = _2418;
        _2641 = _2420;
    }
    float _4550 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _4561 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _4572 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    uint _2661 = _268 + 6u;
    float _2669 = _861 / cbSceneParam._m0[86u].x;
    float _2670 = _862 / cbSceneParam._m0[86u].y;
    vec4 _2684 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2669, _2670, (log2((isnan(cbSceneParam._m0[77u].w) ? _794 : (isnan(_794) ? cbSceneParam._m0[77u].w : min(_794, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2686 = _2684.x;
    float _2687 = _2684.y;
    float _2688 = _2684.z;
    float _2689 = _2684.w;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    if (_794 > cbSceneParam._m0[78u].w)
    {
        float _2744 = isnan(_794) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _794 : min(cbSceneParam._m0[80u].w, _794));
        float _2745 = _2744 / _794;
        float _2756 = _2745 * _846;
        float _2757 = _847 * _2745;
        float _2758 = (-0.0) - _2757;
        float _2760 = _2745 * _848;
        float _2762 = (cbSceneParam._m0[77u].w * _2758) / _2744;
        float _2763 = _2762 + cbSceneParam._m0[79u].w;
        float _2764 = cbSceneParam._m0[79u].w - _2757;
        float _2770 = sqrt(((_2756 * _2756) + (_2757 * _2757)) + (_2760 * _2760));
        float _2773 = (1.0 - (cbSceneParam._m0[77u].w / _2744)) * _2770;
        float _2778 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2780 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2933;
        if (abs((_2758 - _2762) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2933 = ((((_2763 > 0.0) ? exp2(_2778 * _2763) : (2.0 - exp2(_2780 * _2763))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2773;
        }
        else
        {
            float _2893 = 1.0 / cbSceneParam._m0[80u].x;
            float _2894 = isnan(_2764) ? _2763 : (isnan(_2763) ? _2764 : max(_2763, _2764));
            float _2895 = isnan(_2764) ? _2763 : (isnan(_2763) ? _2764 : min(_2763, _2764));
            float _2904 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : min(_2894, 0.0));
            float _2905 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : min(_2895, 0.0));
            _2933 = ((abs(_2770 / _2758) * cbSceneParam._m0[80u].y) * ((((_2904 - _2905) * 2.0) - ((exp2(_2778 * (isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0)))) - exp2(_2778 * (isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0))))) * _2893)) - ((exp2(_2780 * _2904) - exp2(_2780 * _2905)) * _2893))) + (_2773 * cbSceneParam._m0[80u].z);
        }
        vec4 _2935 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2669, _2670, 1.0), 0.0);
        float _2944 = exp2((_2933 * (-1.44269502162933349609375)) * (1.0 - _2935.w));
        float _2945 = log2(_2944);
        float _2961 = log2(_2689);
        _2782 = (exp2(_2961 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].x)) * _2935.x) / cbSceneParam._m0[78u].x)) + _2686;
        _2784 = (exp2(_2961 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].y)) * _2935.y) / cbSceneParam._m0[78u].y)) + _2687;
        _2786 = (exp2(_2961 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2945 * cbSceneParam._m0[78u].z)) * _2935.z) / cbSceneParam._m0[78u].z)) + _2688;
        _2788 = _2944 * _2689;
    }
    else
    {
        _2782 = _2686;
        _2784 = _2687;
        _2786 = _2688;
        _2788 = _2689;
    }
    float _2800 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2801 = _2800 == 3.0;
    float _2802 = log2(_2788);
    float _2809 = exp2(_2802 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2631 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _924))) + ((_2637 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1728)) * cbPerFrame._m0[3u].x));
    float _2810 = exp2(_2802 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2633 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _924))) + ((_2639 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1728)) * cbPerFrame._m0[3u].x));
    float _2811 = exp2(_2802 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2635 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _924))) + ((_2641 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1728)) * cbPerFrame._m0[3u].x));
    float _2820 = (_2800 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2820 * (_2801 ? _2809 : (_2809 + (cbSceneParam._m0[72u].w * _2782)));
    SV_Target.y = _2820 * (_2801 ? _2810 : (_2810 + (cbSceneParam._m0[72u].w * _2784)));
    SV_Target.z = _2820 * (_2801 ? _2811 : (_2811 + (cbSceneParam._m0[72u].w * _2786)));
    SV_Target.w = cbInstanceData._m0[_2661].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2661].w;
}


