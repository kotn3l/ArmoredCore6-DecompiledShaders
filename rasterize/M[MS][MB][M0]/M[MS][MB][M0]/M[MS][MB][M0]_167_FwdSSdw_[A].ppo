#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1167;
float _3552;
float _3553;
float _3554;
float _3555;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _347 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _349 = _347.x;
    float _359 = dot(vec4(_349, _347.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _376 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_349 - _359) * cbMtdParam._m0[24u].x) + _359) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3564 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _384 = (_377 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _385 = (_377 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _386 = (_377 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _260) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _261) + cbTextureTilingScale._m0[3u].w));
    vec4 _423 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _435 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _449 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_425 - _435) * cbMtdParam._m0[24u].x) + _435) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3575 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _457 = (_450 * ((_403.x * cbMtdParam._m0[13u].x) - _384)) + _384;
    float _458 = (_450 * ((_403.y * cbMtdParam._m0[13u].y) - _385)) + _385;
    float _459 = (_450 * ((_403.z * cbMtdParam._m0[13u].z) - _386)) + _386;
    vec4 _471 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _494 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _511 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _513 = _511.x;
    float _514 = _511.y;
    float _515 = _511.z;
    float _522 = ((_494.x - _513) * _377) + _513;
    float _523 = ((_494.y - _514) * _377) + _514;
    float _524 = ((_494.z - _515) * _377) + _515;
    vec4 _536 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _261) + cbTextureTilingScale._m0[2u].w));
    float _549 = ((_536.z - _524) * _450) + _524;
    float _552 = ((((_536.x - _522) * _450) + _522) * 2.0) + (-1.0);
    float _553 = ((((_536.y - _523) * _450) + _523) * 2.0) + (-1.0);
    float _554 = dot(vec2(_552, _553), vec2(_552, _553));
    float _3586 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = sqrt(1.0 - (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))));
    float _564 = _552 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_471.x * 2.0) + (-1.0)));
    float _565 = _553 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_471.y * 2.0) + (-1.0)));
    vec4 _578 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _585 = (((_471.z - _549) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _549;
    float _590 = cbMtdParam._m0[22u].x + _578.w;
    float _593 = fma(_559, _227 * NORMAL.x, fma(_565, _234 * TANGENT.x, (_220 * _212) * _564));
    float _596 = fma(_559, _227 * NORMAL.y, fma(_565, _234 * TANGENT.y, (_220 * _213) * _564));
    float _599 = fma(_559, _227 * NORMAL.z, fma(_565, _234 * TANGENT.z, (_220 * _214) * _564));
    float _603 = inversesqrt(dot(vec3(_593, _596, _599), vec3(_593, _596, _599)));
    float _604 = _603 * _593;
    float _605 = _603 * _596;
    float _606 = _603 * _599;
    float _3597 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _607 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _3608 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _3619 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3630 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3641 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _625 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _667 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _677 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _667);
    float _678 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _667);
    float _679 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _667);
    float _683 = inversesqrt(dot(vec3(_677, _678, _679), vec3(_677, _678, _679)));
    float _684 = _677 * _683;
    float _685 = _678 * _683;
    float _686 = _679 * _683;
    vec4 _691 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _693 = _691.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _847 = sqrt(((_677 * _677) + (_678 * _678)) + (_679 * _679));
        float _853 = (cbMatDynParam._m0[5u].x * _847) + cbMatDynParam._m0[5u].y;
        float _3652 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _858 = (cbMatDynParam._m0[5u].z * _847) + cbMatDynParam._m0[5u].w;
        float _3663 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) - _854)) + _854) < ((_693 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _704 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _705 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _723 = fma(_606, cbSceneParam._m0[5u].z, fma(_605, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _604));
    float _726 = fma(_606, cbSceneParam._m0[6u].z, fma(_605, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _604));
    float _729 = fma(_606, cbSceneParam._m0[7u].z, fma(_605, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _604));
    uint _742 = _240 + 9u;
    uint _743 = _742 + uint(cbMatDynParam._m0[0u].w);
    float _749 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) * cbInstanceData._m0[_743].x;
    float _750 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * cbInstanceData._m0[_743].y;
    float _751 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * cbInstanceData._m0[_743].z;
    float _3674 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _3696 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    vec4 _763 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _704, cbSceneParam._m0[86u].y * _705));
    float _767 = ((isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * TEXCOORD_5.w) * _763.x;
    float _768 = dot(vec3(_604, _605, _606), vec3(_684, _685, _686));
    float _771 = _768 * 2.0;
    float _775 = (_771 * _604) - _684;
    float _776 = (_771 * _605) - _685;
    float _777 = (_771 * _606) - _686;
    float _781 = abs(dot(vec3(_684, _685, _686), vec3(_604, _605, _606)));
    float _3707 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _783 = sqrt(_607);
    float _796 = exp2((_783 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_783 * 3.0));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _836 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1166;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _891 = fma(_836, cbModelParam._m0[26u].z, fma(_832, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _828));
        float _895 = fma(_836, cbModelParam._m0[27u].z, fma(_832, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _828));
        float _899 = fma(_836, cbModelParam._m0[28u].z, fma(_832, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _828));
        float _924 = _828 + _604;
        float _925 = _832 + _605;
        float _926 = _836 + _606;
        float _936 = fma(_926, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _924)) - _891;
        float _937 = fma(_926, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _924)) - _895;
        float _938 = fma(_926, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _924)) - _899;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_891 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_895 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[34u].z) + ((((((_899 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _994 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_960.x + (-0.5));
        float _996 = _994 * (_960.y + (-0.5));
        float _997 = _994 * (_960.z + (-0.5));
        float _1004 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_967.x + (-0.5));
        float _1006 = _1004 * (_967.y + (-0.5));
        float _1007 = _1004 * (_967.z + (-0.5));
        float _1014 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_974.x + (-0.5));
        float _1016 = _1014 * (_974.y + (-0.5));
        float _1017 = _1014 * (_974.z + (-0.5));
        float _1024 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_981.x + (-0.5));
        float _1026 = _1024 * (_981.y + (-0.5));
        float _1027 = _1024 * (_981.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1048 = (dot(vec3(_604, _605, _606), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1058 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3755 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1060 + 1.0))) + _1065) * _1028;
        float _1075 = _996 * 0.5;
        float _1076 = _1006 * 0.5;
        float _1077 = _1016 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_604, _605, _606), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3788 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1102 + 1.0))) + _1107) * _1029;
        float _1117 = _997 * 0.5;
        float _1118 = _1007 * 0.5;
        float _1119 = _1017 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_604, _605, _606), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3821 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1144 + 1.0))) + _1149) * _1030;
        _1166 = _997;
        _1168 = _996;
        _1169 = _995;
        _1170 = _1007;
        _1171 = _1006;
        _1172 = _1005;
        _1173 = _1017;
        _1174 = _1016;
        _1175 = _1015;
        _1176 = _1030;
        _1177 = _1029;
        _1178 = _1028;
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _1167;
        _1168 = _1167;
        _1169 = _1167;
        _1170 = _1167;
        _1171 = _1167;
        _1172 = _1167;
        _1173 = _1167;
        _1174 = _1167;
        _1175 = _1167;
        _1176 = _1167;
        _1177 = _1167;
        _1178 = _1167;
        _1179 = 0.0;
        _1180 = 0.0;
        _1181 = 0.0;
    }
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1208 = fma(_836, cbModelParam._m0[30u].z, fma(_832, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _828));
        float _1212 = fma(_836, cbModelParam._m0[31u].z, fma(_832, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _828));
        float _1216 = fma(_836, cbModelParam._m0[32u].z, fma(_832, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _828));
        float _1239 = _828 + _604;
        float _1240 = _832 + _605;
        float _1241 = _836 + _606;
        float _1251 = fma(_1241, cbModelParam._m0[30u].z, fma(_1240, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1239)) - _1208;
        float _1252 = fma(_1241, cbModelParam._m0[31u].z, fma(_1240, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1239)) - _1212;
        float _1253 = fma(_1241, cbModelParam._m0[32u].z, fma(_1240, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1239)) - _1216;
        float _1257 = inversesqrt(dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253)));
        float _1270 = ((_1257 * _1251) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1208 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1257 * _1252) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1212 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1257 * _1253) / cbModelParam._m0[35u].z) + ((((((_1216 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        float _1307 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1274.x + (-0.5));
        float _1309 = _1307 * (_1274.y + (-0.5));
        float _1310 = _1307 * (_1274.z + (-0.5));
        float _1317 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1281.x + (-0.5));
        float _1319 = _1317 * (_1281.y + (-0.5));
        float _1320 = _1317 * (_1281.z + (-0.5));
        float _1327 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1288.x + (-0.5));
        float _1329 = _1327 * (_1288.y + (-0.5));
        float _1330 = _1327 * (_1288.z + (-0.5));
        float _1337 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1295.x + (-0.5));
        float _1339 = _1337 * (_1295.y + (-0.5));
        float _1340 = _1337 * (_1295.z + (-0.5));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = _1308 * 0.5;
        float _1345 = _1318 * 0.5;
        float _1346 = _1328 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_604, _605, _606), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3884 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1371 + 1.0))) + _1376) * _1341;
        float _1386 = _1309 * 0.5;
        float _1387 = _1319 * 0.5;
        float _1388 = _1329 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_604, _605, _606), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _3917 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1413 + 1.0))) + _1418) * _1342;
        float _1428 = _1310 * 0.5;
        float _1429 = _1320 * 0.5;
        float _1430 = _1330 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_604, _605, _606), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _3950 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1455 + 1.0))) + _1460) * _1343;
        _1477 = _1310;
        _1478 = _1309;
        _1479 = _1308;
        _1480 = _1320;
        _1481 = _1319;
        _1482 = _1318;
        _1483 = _1330;
        _1484 = _1329;
        _1485 = _1328;
        _1486 = _1343;
        _1487 = _1342;
        _1488 = _1341;
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
    }
    else
    {
        _1477 = _1167;
        _1478 = _1167;
        _1479 = _1167;
        _1480 = _1167;
        _1481 = _1167;
        _1482 = _1167;
        _1483 = _1167;
        _1484 = _1167;
        _1485 = _1167;
        _1486 = _1167;
        _1487 = _1167;
        _1488 = _1167;
        _1489 = 0.0;
        _1490 = 0.0;
        _1491 = 0.0;
    }
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1179)) + _1179;
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1180)) + _1180;
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1181)) + _1181;
    float _1524 = fma(_1503, cbSceneParam._m0[89u].z, fma(_1502, cbSceneParam._m0[89u].y, _1501 * cbSceneParam._m0[89u].x));
    float _1527 = fma(_1503, cbSceneParam._m0[90u].z, fma(_1502, cbSceneParam._m0[90u].y, _1501 * cbSceneParam._m0[90u].x));
    float _1530 = fma(_1503, cbSceneParam._m0[91u].z, fma(_1502, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1501));
    float _1545 = _775 * 0.5;
    float _1546 = _776 * 0.5;
    float _1547 = _777 * 0.5;
    float _1548 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1551 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1554 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1588;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1561 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1166, _1170, _1173, _1176));
        float _1565 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1569 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1576 = dot(vec4(cbModelParam._m0[39u]), vec4(_1545, _1546, _1547, 1.0));
        _1588 = dot(vec3(isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1576) ? 0.0 : (isnan(0.0) ? _1576 : max(0.0, _1576))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1588 = 1.0;
    }
    float _1599;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1590 = dot(vec4(cbModelParam._m0[40u]), vec4(_1545, _1546, _1547, 1.0));
        _1599 = dot(vec3(isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1590) ? 0.0 : (isnan(0.0) ? _1590 : max(0.0, _1590))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1599 = 1.0;
    }
    float _1603 = (_1599 * cbModelParam._m0[1u].x) + (_1588 * (1.0 - cbModelParam._m0[1u].x));
    float _1613 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _607);
    float _1614 = isnan(_1613) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1613 : min(cbModelParam._m0[25u].z, _1613));
    float _1696;
    float _1698;
    float _1700;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1663 = fma(_836, cbModelParam._m0[13u].z, fma(_832, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _828)) + cbModelParam._m0[13u].w;
        float _1667 = fma(_836, cbModelParam._m0[14u].z, fma(_832, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _828)) + cbModelParam._m0[14u].w;
        float _1671 = fma(_836, cbModelParam._m0[15u].z, fma(_832, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _828)) + cbModelParam._m0[15u].w;
        float _1674 = fma(_777, cbModelParam._m0[13u].z, fma(_776, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _775));
        float _1677 = fma(_777, cbModelParam._m0[14u].z, fma(_776, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _775));
        float _1680 = fma(_777, cbModelParam._m0[15u].z, fma(_776, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _775));
        float _1708;
        if (_1674 > 0.0)
        {
            _1708 = abs((1.0 - _1663) / _1674);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1663 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1708 = frontier_phi_17_15_ladder;
        }
        float _1931;
        if (_1677 > 0.0)
        {
            _1931 = abs((1.0 - _1667) / _1677);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1667 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1931 = frontier_phi_26_22_ladder;
        }
        float _2177;
        if (_1680 > 0.0)
        {
            _2177 = abs((1.0 - _1671) / _1680);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1671 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2177 = frontier_phi_38_33_ladder;
        }
        float _2179 = isnan(_1931) ? _1708 : (isnan(_1708) ? _1931 : min(_1708, _1931));
        float _2180 = isnan(_2177) ? _2179 : (isnan(_2179) ? _2177 : min(_2179, _2177));
        float _2184 = (_2180 * _1674) + _1663;
        float _2185 = (_2180 * _1677) + _1667;
        float _2186 = (_2180 * _1680) + _1671;
        float _2187 = _2180 * 9.9999997473787516355514526367188e-05;
        float _2189 = (-1.0) - _2187;
        float _2191 = _2187 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2186 > _2191) || ((_2186 < _2189) || ((_2185 > _2191) || ((_2185 < _2189) || ((_2184 < _2189) || (_2184 > _2191))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2310 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2186, cbModelParam._m0[9u].z, fma(_2185, cbModelParam._m0[9u].y, _2184 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2186, cbModelParam._m0[10u].z, fma(_2185, cbModelParam._m0[10u].y, _2184 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2186, cbModelParam._m0[11u].z, fma(_2185, cbModelParam._m0[11u].y, _2184 * cbModelParam._m0[11u].x))), _1614);
            frontier_phi_16_38_ladder = _2310.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2310.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2310.x * cbModelParam._m0[1u].y;
        }
        _1696 = frontier_phi_16_38_ladder_2;
        _1698 = frontier_phi_16_38_ladder_1;
        _1700 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1684 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_775, _776, _777), _1614);
        _1696 = _1684.x * cbModelParam._m0[1u].y;
        _1698 = _1684.y * cbModelParam._m0[1u].y;
        _1700 = _1684.z * cbModelParam._m0[1u].y;
    }
    float _1704 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _607);
    float _1705 = isnan(_1704) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1704 : min(cbModelParam._m0[25u].w, _1704));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1760 = fma(_836, cbModelParam._m0[21u].z, fma(_832, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _828)) + cbModelParam._m0[21u].w;
        float _1764 = fma(_836, cbModelParam._m0[22u].z, fma(_832, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _828)) + cbModelParam._m0[22u].w;
        float _1768 = fma(_836, cbModelParam._m0[23u].z, fma(_832, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _828)) + cbModelParam._m0[23u].w;
        float _1771 = fma(_777, cbModelParam._m0[21u].z, fma(_776, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _775));
        float _1774 = fma(_777, cbModelParam._m0[22u].z, fma(_776, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _775));
        float _1777 = fma(_777, cbModelParam._m0[23u].z, fma(_776, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _775));
        float _1936;
        if (_1771 > 0.0)
        {
            _1936 = abs((1.0 - _1760) / _1771);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1760 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1936 = frontier_phi_28_24_ladder;
        }
        float _2204;
        if (_1774 > 0.0)
        {
            _2204 = abs((1.0 - _1764) / _1774);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1764 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2204 = frontier_phi_40_35_ladder;
        }
        float _2409;
        if (_1777 > 0.0)
        {
            _2409 = abs((1.0 - _1768) / _1777);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1768 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2409 = frontier_phi_49_46_ladder;
        }
        float _2411 = isnan(_2204) ? _1936 : (isnan(_1936) ? _2204 : min(_1936, _2204));
        float _2412 = isnan(_2409) ? _2411 : (isnan(_2411) ? _2409 : min(_2411, _2409));
        float _2416 = (_2412 * _1771) + _1760;
        float _2417 = (_2412 * _1774) + _1764;
        float _2418 = (_2412 * _1777) + _1768;
        float _2419 = _2412 * 9.9999997473787516355514526367188e-05;
        float _2420 = (-1.0) - _2419;
        float _2422 = _2419 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2418 > _2422) || ((_2418 < _2420) || ((_2417 > _2422) || ((_2417 < _2420) || ((_2416 < _2420) || (_2416 > _2422))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2617 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2418, cbModelParam._m0[17u].z, fma(_2417, cbModelParam._m0[17u].y, _2416 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2418, cbModelParam._m0[18u].z, fma(_2417, cbModelParam._m0[18u].y, _2416 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2418, cbModelParam._m0[19u].z, fma(_2417, cbModelParam._m0[19u].y, _2416 * cbModelParam._m0[19u].x))), _1705);
            frontier_phi_25_49_ladder = _2617.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2617.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2617.x * cbModelParam._m0[1u].z;
        }
        _1796 = frontier_phi_25_49_ladder_2;
        _1798 = frontier_phi_25_49_ladder_1;
        _1800 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_775, _776, _777), _1705);
        _1796 = _1780.x * cbModelParam._m0[1u].z;
        _1798 = _1780.y * cbModelParam._m0[1u].z;
        _1800 = _1780.z * cbModelParam._m0[1u].z;
    }
    float _1812 = ((((1.0 - _796) * ((_783 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_796 * _783)) * _767;
    float _1813 = _1812 * ((cbModelParam._m0[1u].w * (_1796 - _1696)) + _1696);
    float _1814 = _1812 * ((cbModelParam._m0[1u].w * (_1798 - _1698)) + _1698);
    float _1815 = _1812 * ((cbModelParam._m0[1u].w * (_1800 - _1700)) + _1700);
    float _1818 = fma(_1815, cbSceneParam._m0[89u].z, fma(_1814, cbSceneParam._m0[89u].y, _1813 * cbSceneParam._m0[89u].x));
    float _1821 = fma(_1815, cbSceneParam._m0[90u].z, fma(_1814, cbSceneParam._m0[90u].y, _1813 * cbSceneParam._m0[90u].x));
    float _1824 = fma(_1815, cbSceneParam._m0[91u].z, fma(_1814, cbSceneParam._m0[91u].y, _1813 * cbSceneParam._m0[91u].x));
    vec4 _1832 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_704, _705));
    float _1834 = _1832.w;
    float _1846 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1834);
    float _1847 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1834);
    float _1848 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1834);
    uvec4 _1852 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1854 = _1852.x * 14u;
    uint _1855 = _1854 + 13u;
    float _1862 = _767 + (-1.0);
    float _1867 = (cbLight._m0[_1855].x * _1862) + 1.0;
    float _1868 = (cbLight._m0[_1855].y * _1862) + 1.0;
    float _1869 = (cbLight._m0[_1855].z * _1862) + 1.0;
    float _1870 = (cbLight._m0[_1855].w * _1862) + 1.0;
    uint _1871 = _1854 + 5u;
    float _1877 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
    uint _1881 = _1854 + 4u;
    float _1890 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
    uint _1894 = _1854 | 1u;
    float _1905 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_604, _605, _606));
    float _1908 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_604, _605, _606));
    float _4086 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _4097 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1913 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * 0.3183098733425140380859375;
    float _1915 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 0.3183098733425140380859375;
    float _1922 = ((cbLight._m0[_1871].x * _1877) * _1915) + (((cbLight._m0[_1881].x * _1846) * _1890) * _1913);
    float _1923 = ((_1877 * cbLight._m0[_1871].y) * _1915) + (((cbLight._m0[_1881].y * _1847) * _1890) * _1913);
    float _1924 = ((_1877 * cbLight._m0[_1871].z) * _1915) + (((cbLight._m0[_1881].z * _1848) * _1890) * _1913);
    uvec4 _1928 = floatBitsToUint(cbLight._m0[_1854 + 12u]);
    bool _1930 = _1928.x == 0u;
    float _1941;
    float _1943;
    float _1945;
    if (_1930)
    {
        _1941 = _1922;
        _1943 = _1923;
        _1945 = _1924;
    }
    else
    {
        uint _1949 = _1854 + 6u;
        float _1965 = (dot(vec3(cbLight._m0[_1854 + 2u].xyz), vec3(_604, _605, _606)) * 0.5) + 0.5;
        float _1966 = _1965 * _1965;
        float _4108 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1967 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1968 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _1941 = (((cbLight._m0[_1949].x * 0.3183098733425140380859375) * _1967) * _1968) + _1922;
        _1943 = (((cbLight._m0[_1949].y * 0.3183098733425140380859375) * _1967) * _1968) + _1923;
        _1945 = (((cbLight._m0[_1949].z * 0.3183098733425140380859375) * _1967) * _1968) + _1924;
    }
    bool _1948 = _1928.y == 0u;
    float _1986;
    float _1988;
    float _1990;
    if (_1948)
    {
        _1986 = _1941;
        _1988 = _1943;
        _1990 = _1945;
    }
    else
    {
        uint _2148 = _1854 + 7u;
        float _2164 = (dot(vec3(cbLight._m0[_1854 + 3u].xyz), vec3(_604, _605, _606)) * 0.5) + 0.5;
        float _2165 = _2164 * _2164;
        float _4124 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2166 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2167 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _1986 = (((cbLight._m0[_2148].x * 0.3183098733425140380859375) * _2166) * _2167) + _1941;
        _1988 = (((cbLight._m0[_2148].y * 0.3183098733425140380859375) * _2166) * _2167) + _1943;
        _1990 = (((cbLight._m0[_2148].z * 0.3183098733425140380859375) * _2166) * _2167) + _1945;
    }
    uint _1993 = _1854 + 8u;
    float _2006 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1854].w)) * _607) * 0.949999988079071044921875);
    float _2007 = _2006 * _2006;
    float _2008 = cbLight._m0[_1854].x + _684;
    float _2009 = cbLight._m0[_1854].y + _685;
    float _2010 = cbLight._m0[_1854].z + _686;
    float _2014 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
    float _2015 = _2014 * _2008;
    float _2016 = _2014 * _2009;
    float _2017 = _2014 * _2010;
    float _2018 = dot(vec3(_604, _605, _606), vec3(cbLight._m0[_1854].xyz));
    float _4140 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _2022 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2023 = dot(vec3(_604, _605, _606), vec3(_2015, _2016, _2017));
    float _4162 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2027 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_2015, _2016, _2017));
    float _4173 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2031 = _2007 * _2007;
    float _2035 = ((_2026 * _2026) * (_2031 + (-1.0))) + 1.0;
    float _2046 = (exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2047 = 1.0 - _2007;
    float _2058 = (0.5 / (((_2022 * ((_2021 * _2047) + _2007)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2047) + _2007) * _2021))) * _2021;
    float _4184 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2060 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2031 / ((_2035 * _2035) * 3.141590118408203125));
    uint _2074 = _1854 + 9u;
    float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1894].w)) * _607) * 0.949999988079071044921875);
    float _2086 = _2085 * _2085;
    float _2087 = cbLight._m0[_1894].x + _684;
    float _2088 = cbLight._m0[_1894].y + _685;
    float _2089 = cbLight._m0[_1894].z + _686;
    float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
    float _2094 = _2093 * _2087;
    float _2095 = _2093 * _2088;
    float _2096 = _2093 * _2089;
    float _2097 = dot(vec3(_604, _605, _606), vec3(cbLight._m0[_1894].xyz));
    float _4195 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _2101 = dot(vec3(_604, _605, _606), vec3(_2094, _2095, _2096));
    float _4206 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _2105 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_2094, _2095, _2096));
    float _4217 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2109 = _2086 * _2086;
    float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
    float _2122 = (exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2123 = 1.0 - _2086;
    float _2133 = (0.5 / (((_2022 * ((_2100 * _2123) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2123) + _2086) * _2100))) * _2100;
    float _4228 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2135 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
    float _2145 = (((_2122 * cbLight._m0[_2074].x) * _2135) * _1877) + ((((cbLight._m0[_1993].x * _1846) * _2046) * _2060) * _1890);
    float _2146 = (((_2122 * cbLight._m0[_2074].y) * _2135) * _1877) + ((((cbLight._m0[_1993].y * _1847) * _2046) * _2060) * _1890);
    float _2147 = (((_2122 * cbLight._m0[_2074].z) * _2135) * _1877) + ((((cbLight._m0[_1993].z * _1848) * _2046) * _2060) * _1890);
    float _2209;
    float _2211;
    float _2213;
    if (_1930)
    {
        _2209 = _2145;
        _2211 = _2146;
        _2213 = _2147;
    }
    else
    {
        uint _2215 = _1854 + 2u;
        uint _2219 = _1854 + 10u;
        float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2215].w)) * _607) * 0.949999988079071044921875);
        float _2234 = _2233 * _2233;
        float _2235 = cbLight._m0[_2215].x + _684;
        float _2236 = cbLight._m0[_2215].y + _685;
        float _2237 = cbLight._m0[_2215].z + _686;
        float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
        float _2242 = _2241 * _2235;
        float _2243 = _2241 * _2236;
        float _2244 = _2241 * _2237;
        float _2245 = dot(vec3(_604, _605, _606), vec3(cbLight._m0[_2215].xyz));
        float _4239 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2249 = dot(vec3(_604, _605, _606), vec3(_2242, _2243, _2244));
        float _4250 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2252 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2253 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_2242, _2243, _2244));
        float _4261 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2257 = _2234 * _2234;
        float _2261 = ((_2252 * _2252) * (_2257 + (-1.0))) + 1.0;
        float _2270 = (exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2271 = 1.0 - _2234;
        float _2281 = (0.5 / (((_2022 * ((_2248 * _2271) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2271) + _2234) * _2248))) * _2248;
        float _4272 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2283 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2257 / ((_2261 * _2261) * 3.141590118408203125));
        float _2284 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _2209 = (((_2270 * cbLight._m0[_2219].x) * _2283) * _2284) + _2145;
        _2211 = (((_2270 * cbLight._m0[_2219].y) * _2283) * _2284) + _2146;
        _2213 = (((_2270 * cbLight._m0[_2219].z) * _2283) * _2284) + _2147;
    }
    float _2319;
    float _2321;
    float _2323;
    if (_1948)
    {
        _2319 = _2209;
        _2321 = _2211;
        _2323 = _2213;
    }
    else
    {
        uint _2330 = _1854 + 3u;
        uint _2334 = _1854 + 11u;
        float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _607) * 0.949999988079071044921875);
        float _2349 = _2348 * _2348;
        float _2350 = cbLight._m0[_2330].x + _684;
        float _2351 = cbLight._m0[_2330].y + _685;
        float _2352 = cbLight._m0[_2330].z + _686;
        float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
        float _2357 = _2356 * _2350;
        float _2358 = _2356 * _2351;
        float _2359 = _2356 * _2352;
        float _2360 = dot(vec3(_604, _605, _606), vec3(cbLight._m0[_2330].xyz));
        float _4288 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2364 = dot(vec3(_604, _605, _606), vec3(_2357, _2358, _2359));
        float _4299 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2368 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2357, _2358, _2359));
        float _4310 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2372 = _2349 * _2349;
        float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
        float _2385 = (exp2(log2(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2386 = 1.0 - _2349;
        float _2396 = (0.5 / (((_2022 * ((_2363 * _2386) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2386) + _2349) * _2363))) * _2363;
        float _4321 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2398 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
        float _2399 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _2319 = (((_2385 * cbLight._m0[_2334].x) * _2398) * _2399) + _2209;
        _2321 = (((_2385 * cbLight._m0[_2334].y) * _2398) * _2399) + _2211;
        _2323 = (((_2385 * cbLight._m0[_2334].z) * _2398) * _2399) + _2213;
    }
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    if (_1852.y == 0u)
    {
        float _2474 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2474;
        float _2476 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2474;
        float _2477 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2474;
        uvec4 _2489 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2490 = _2489.x;
        uint _2501 = uint((float(_2489.y) * floor(float(uint(cbSceneParam._m0[85u].y * _705) / _2490))) + floor(float(uint(cbSceneParam._m0[85u].x * _704) / _2490)));
        float _2511 = (log2(_2477 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2512 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        uint _2515 = uint(isnan(14.0) ? _2512 : (isnan(_2512) ? 14.0 : min(_2512, 14.0)));
        uvec4 _2520 = texelFetch(g_lightClusterGridBuffer, int(((_2515 << 2u) + (_2501 << 6u)) >> 2u));
        uint _2521 = _2520.x;
        uint _2522 = _2489.z;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        if (((((1u << ((_2522 >> 4u) & 15u)) + 4294967295u) & _2521) == 0u) || ((_2522 & 240u) == 0u))
        {
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
        }
        else
        {
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2631;
            float _2633;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            uint _2781 = 0u;
            uint _2790;
            bool _2791;
            for (;;)
            {
                _2790 = texelFetch(g_lightClassification, int((((_2515 << 5u) + (_2501 << 9u)) + (_2781 << 2u)) >> 2u)).x;
                _2791 = _2790 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2791)
                {
                    frontier_phi_66_pred = _2775;
                    frontier_phi_66_pred_1 = _2780;
                    frontier_phi_66_pred_2 = _2779;
                    frontier_phi_66_pred_3 = _2778;
                    frontier_phi_66_pred_4 = _2777;
                    frontier_phi_66_pred_5 = _2776;
                }
                else
                {
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    uint _2926;
                    _2920 = _2775;
                    _2921 = _2776;
                    _2922 = _2777;
                    _2923 = _2778;
                    _2924 = _2779;
                    _2925 = _2780;
                    _2926 = _2790;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    for (;;)
                    {
                        uint _2930 = uint(findLSB(_2926)) + (_2781 << 5u);
                        uint _2927 = (_2926 + 4294967295u) & _2926;
                        uint _2932 = _2930 * 48u;
                        vec4 _2946 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 3u)).x));
                        uint _2952 = (_2930 * 48u) + 4u;
                        vec4 _2965 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2952)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 3u)).x));
                        uint _2971 = (_2930 * 48u) + 8u;
                        vec3 _2982 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2971)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 2u)).x));
                        float _2986 = _2946.x - _2475;
                        float _2987 = _2946.y - _2476;
                        float _2988 = _2946.z - _2477;
                        float _2989 = dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988));
                        float _2992 = inversesqrt(_2989);
                        float _2993 = _2992 * _2986;
                        float _2994 = _2992 * _2987;
                        float _2995 = _2992 * _2988;
                        float _2996 = dot(vec3(_723, _726, _729), vec3(_2993, _2994, _2995));
                        float _3001 = 1.0 - (_2989 * _2946.w);
                        float _4347 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3002 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _3003 = sqrt(_2989) * _2965.w;
                        float _3006 = 1.39999997615814208984375 / (_3003 + 1.39999997615814208984375);
                        float _3007 = _3006 * _3006;
                        float _3010 = ((1.0 - _3007) * _2996) + _3007;
                        float _3013 = _3003 * _3003;
                        float _3017 = ((isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0))) * _3002) / ((_3013 * 0.699999988079071044921875) + 1.0);
                        float _3021 = (-0.0) - _2475;
                        float _3022 = (-0.0) - _2476;
                        float _3023 = (-0.0) - _2477;
                        float _3027 = inversesqrt(dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023)));
                        float _3028 = _3027 * _3021;
                        float _3029 = _3027 * _3022;
                        float _3030 = _3027 * _3023;
                        float _3038 = exp2(log2(1.0 / ((_3013 * 3.5) + 5.0)) * 0.25);
                        float _3039 = 1.0 - _783;
                        float _3046 = sqrt(1.0 - ((1.0 - (_3039 * _3039)) * (1.0 - (_3038 * _3038))));
                        float _3047 = _3046 * _3046;
                        float _3048 = _3047 * _3047;
                        float _3049 = _3028 + _2993;
                        float _3050 = _3029 + _2994;
                        float _3051 = _3030 + _2995;
                        float _3055 = inversesqrt(dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051)));
                        float _3059 = dot(vec3(_723, _726, _729), vec3(_3028, _3029, _3030));
                        float _4363 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3062 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3063 = dot(vec3(_723, _726, _729), vec3(_3055 * _3049, _3055 * _3050, _3055 * _3051));
                        float _4374 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3066 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                        float _3070 = ((_3066 * _3066) * (_3048 + (-1.0))) + 1.0;
                        float _3071 = _3006 * _3047;
                        float _3072 = _3071 * _3071;
                        float _3075 = ((1.0 - _3072) * _2996) + _3072;
                        float _4385 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3076 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3077 = 1.0 - _3047;
                        float _3087 = (0.5 / (((_3076 * ((_3062 * _3077) + _3047)) + 9.9999999392252902907785028219223e-09) + (((_3076 * _3077) + _3047) * _3062))) * _3076;
                        float _4396 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3098 = (((_3048 * 3.1415927410125732421875) * (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) / ((_3070 * _3070) * ((_3013 * 2.1991131305694580078125) + 3.141590118408203125))) * _3002;
                        _2850 = (_3017 * _2965.x) + _2923;
                        _2851 = (_3017 * _2965.y) + _2924;
                        _2852 = (_3017 * _2965.z) + _2925;
                        _2847 = (_3098 * _2982.x) + _2920;
                        _2848 = (_3098 * _2982.y) + _2921;
                        _2849 = (_3098 * _2982.z) + _2922;
                        if (_2927 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2920 = _2847;
                            _2921 = _2848;
                            _2922 = _2849;
                            _2923 = _2850;
                            _2924 = _2851;
                            _2925 = _2852;
                            _2926 = _2927;
                        }
                    }
                    frontier_phi_66_pred = _2847;
                    frontier_phi_66_pred_1 = _2852;
                    frontier_phi_66_pred_2 = _2851;
                    frontier_phi_66_pred_3 = _2850;
                    frontier_phi_66_pred_4 = _2849;
                    frontier_phi_66_pred_5 = _2848;
                }
                _2623 = frontier_phi_66_pred;
                _2633 = frontier_phi_66_pred_1;
                _2631 = frontier_phi_66_pred_2;
                _2629 = frontier_phi_66_pred_3;
                _2627 = frontier_phi_66_pred_4;
                _2625 = frontier_phi_66_pred_5;
                uint _2782 = _2781 + 1u;
                if (_2782 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2775 = _2623;
                    _2776 = _2625;
                    _2777 = _2627;
                    _2778 = _2629;
                    _2779 = _2631;
                    _2780 = _2633;
                    _2781 = _2782;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
        }
        uvec4 _2636 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2637 = _2636.z;
        uint _2639 = (_2637 >> 8u) & 15u;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        if (((4294967295u << _2639) & _2521) == 0u)
        {
            _2743 = _2622;
            _2745 = _2624;
            _2747 = _2626;
            _2749 = _2628;
            _2751 = _2630;
            _2753 = _2632;
        }
        else
        {
            float _2768 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
            float _2769 = _2768 * _2475;
            float _2770 = _2768 * _2476;
            float _2771 = _2768 * _2477;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2639 < ((_2637 >> 12u) & 15u))
            {
                float _2744;
                float _2746;
                float _2748;
                float _2750;
                float _2752;
                float _2754;
                float _2903 = _2622;
                float _2904 = _2624;
                float _2905 = _2626;
                float _2906 = _2628;
                float _2907 = _2630;
                float _2908 = _2632;
                uint _2909 = _2639;
                uint _2918;
                bool _2919;
                for (;;)
                {
                    _2918 = texelFetch(g_lightClassification, int((((_2515 << 5u) + (_2501 << 9u)) + (_2909 << 2u)) >> 2u)).x;
                    _2919 = _2918 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2919)
                    {
                        frontier_phi_77_pred = _2908;
                        frontier_phi_77_pred_1 = _2907;
                        frontier_phi_77_pred_2 = _2906;
                        frontier_phi_77_pred_3 = _2905;
                        frontier_phi_77_pred_4 = _2904;
                        frontier_phi_77_pred_5 = _2903;
                    }
                    else
                    {
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3125 = _2903;
                        float _3126 = _2904;
                        float _3127 = _2905;
                        float _3128 = _2906;
                        float _3129 = _2907;
                        float _3130 = _2908;
                        uint _3131 = _2918;
                        uint _3132;
                        vec4 _3157;
                        float _3158;
                        vec4 _3173;
                        vec3 _3185;
                        vec4 _3200;
                        vec4 _3215;
                        float _3261;
                        bool _3262;
                        for (;;)
                        {
                            uint _3142 = ((_2909 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3131));
                            _3132 = (_3131 + 4294967295u) & _3131;
                            uint _3144 = _3142 * 40u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            _3158 = _3157.w;
                            uint _3160 = (_3142 * 40u) + 4u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3175 = (_3142 * 40u) + 8u;
                            _3185 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x));
                            uint _3187 = (_3142 * 40u) + 16u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            uint _3202 = (_3142 * 40u) + 20u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3217 = (_3142 * 40u) + 24u;
                            vec4 _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            uint _3236 = (_3142 * 40u) + 28u;
                            vec4 _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            _3261 = fma(_2477, _3249.z, fma(_2476, _3249.y, _3249.x * _2475)) + _3249.w;
                            _3262 = !((fma(_2477, _3230.z, fma(_2476, _3230.y, _3230.x * _2475)) + _3230.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3262)
                            {
                                float _3289 = _3157.x - _2475;
                                float _3290 = _3157.y - _2476;
                                float _3291 = _3157.z - _2477;
                                float _3292 = dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291));
                                float _3295 = inversesqrt(_3292);
                                float _3296 = _3295 * _3289;
                                float _3297 = _3295 * _3290;
                                float _3298 = _3295 * _3291;
                                float _3302 = 1.0 - (_3292 / (_3158 * _3158));
                                float _4407 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3303 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3307 = sqrt(_3292) * _3173.w;
                                float _3309 = 1.39999997615814208984375 / (_3307 + 1.39999997615814208984375);
                                float _3310 = _3309 * _3309;
                                float _3313 = ((1.0 - _3310) * dot(vec3(_3296, _3297, _3298), vec3(_723, _726, _729))) + _3310;
                                float _3316 = _3307 * _3307;
                                float _3320 = (fma(_2477, _3200.z, fma(_2476, _3200.y, _3200.x * _2475)) + _3200.w) / _3261;
                                float _3321 = (fma(_2477, _3215.z, fma(_2476, _3215.y, _3215.x * _2475)) + _3215.w) / _3261;
                                float _3325 = 1.0 - dot(vec2(_3320, _3321), vec2(_3320, _3321));
                                float _4423 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3326 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3327 = _3326 * (((isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0))) * _3303) / ((_3316 * 0.699999988079071044921875) + 1.0));
                                float _3339 = exp2(log2(1.0 / ((_3316 * 3.5) + 5.0)) * 0.25);
                                float _3340 = 1.0 - _783;
                                float _3347 = sqrt(1.0 - ((1.0 - (_3340 * _3340)) * (1.0 - (_3339 * _3339))));
                                float _3348 = _3347 * _3347;
                                float _3349 = _3348 * _3348;
                                float _3350 = _3296 - _2769;
                                float _3351 = _3297 - _2770;
                                float _3352 = _3298 - _2771;
                                float _3356 = inversesqrt(dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352)));
                                float _3360 = dot(vec3(_723, _726, _729), vec3((-0.0) - _2769, (-0.0) - _2770, (-0.0) - _2771));
                                float _4434 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3363 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3364 = dot(vec3(_723, _726, _729), vec3(_3356 * _3350, _3356 * _3351, _3356 * _3352));
                                float _4445 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3367 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3371 = ((_3367 * _3367) * (_3349 + (-1.0))) + 1.0;
                                float _3372 = _3309 * _3348;
                                float _3373 = _3372 * _3372;
                                float _3379 = ((1.0 - _3373) * dot(vec3(_723, _726, _729), vec3(_3296, _3297, _3298))) + _3373;
                                float _4456 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3380 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3381 = 1.0 - _3348;
                                float _3391 = (0.5 / (((_3380 * ((_3363 * _3381) + _3348)) + 9.9999999392252902907785028219223e-09) + (((_3380 * _3381) + _3348) * _3363))) * _3380;
                                float _4467 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3401 = (_3326 * _3303) * (((_3349 * 3.1415927410125732421875) * (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) / ((_3371 * _3371) * ((_3316 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3327 * _3173.y;
                                frontier_phi_83_pred_1 = _3327 * _3173.x;
                                frontier_phi_83_pred_2 = _3401 * _3185.z;
                                frontier_phi_83_pred_3 = _3401 * _3185.y;
                                frontier_phi_83_pred_4 = _3401 * _3185.x;
                                frontier_phi_83_pred_5 = _3327 * _3173.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3409 = frontier_phi_83_pred;
                            _3408 = frontier_phi_83_pred_1;
                            _3407 = frontier_phi_83_pred_2;
                            _3406 = frontier_phi_83_pred_3;
                            _3405 = frontier_phi_83_pred_4;
                            _3410 = frontier_phi_83_pred_5;
                            _3115 = _3408 + _3128;
                            _3116 = _3409 + _3129;
                            _3117 = _3410 + _3130;
                            _3112 = _3405 + _3125;
                            _3113 = _3406 + _3126;
                            _3114 = _3407 + _3127;
                            if (_3132 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3132;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3117;
                        frontier_phi_77_pred_1 = _3116;
                        frontier_phi_77_pred_2 = _3115;
                        frontier_phi_77_pred_3 = _3114;
                        frontier_phi_77_pred_4 = _3113;
                        frontier_phi_77_pred_5 = _3112;
                    }
                    _2754 = frontier_phi_77_pred;
                    _2752 = frontier_phi_77_pred_1;
                    _2750 = frontier_phi_77_pred_2;
                    _2748 = frontier_phi_77_pred_3;
                    _2746 = frontier_phi_77_pred_4;
                    _2744 = frontier_phi_77_pred_5;
                    uint _2910 = _2909 + 1u;
                    if (_2910 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2903 = _2744;
                        _2904 = _2746;
                        _2905 = _2748;
                        _2906 = _2750;
                        _2907 = _2752;
                        _2908 = _2754;
                        _2909 = _2910;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2748;
                frontier_phi_58_59_ladder_1 = _2754;
                frontier_phi_58_59_ladder_2 = _2752;
                frontier_phi_58_59_ladder_3 = _2750;
                frontier_phi_58_59_ladder_4 = _2746;
                frontier_phi_58_59_ladder_5 = _2744;
            }
            else
            {
                frontier_phi_58_59_ladder = _2626;
                frontier_phi_58_59_ladder_1 = _2632;
                frontier_phi_58_59_ladder_2 = _2630;
                frontier_phi_58_59_ladder_3 = _2628;
                frontier_phi_58_59_ladder_4 = _2624;
                frontier_phi_58_59_ladder_5 = _2622;
            }
            _2743 = frontier_phi_58_59_ladder_5;
            _2745 = frontier_phi_58_59_ladder_4;
            _2747 = frontier_phi_58_59_ladder;
            _2749 = frontier_phi_58_59_ladder_3;
            _2751 = frontier_phi_58_59_ladder_2;
            _2753 = frontier_phi_58_59_ladder_1;
        }
        float _2758 = isnan(1.0) ? _767 : (isnan(_767) ? 1.0 : min(_767, 1.0));
        _2534 = (_2758 * _2749) + _1986;
        _2536 = (_2758 * _2751) + _1988;
        _2538 = (_2758 * _2753) + _1990;
        _2540 = ((_2743 * 0.039999999105930328369140625) * _2758) + _2319;
        _2542 = ((_2745 * 0.039999999105930328369140625) * _2758) + _2321;
        _2544 = ((_2747 * 0.039999999105930328369140625) * _2758) + _2323;
    }
    else
    {
        _2534 = _1986;
        _2536 = _1988;
        _2538 = _1990;
        _2540 = _2319;
        _2542 = _2321;
        _2544 = _2323;
    }
    float _4483 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4494 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4505 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _2561 = ((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2534 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _767))) + ((_2540 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1603)) * cbPerFrame._m0[3u].x);
    float _2562 = ((isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2536 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _767))) + ((_2542 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1603)) * cbPerFrame._m0[3u].x);
    float _2563 = ((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2538 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _767))) + ((_2544 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1603)) * cbPerFrame._m0[3u].x);
    uint _2564 = _240 + 6u;
    float _2572 = _704 / cbSceneParam._m0[86u].x;
    float _2573 = _705 / cbSceneParam._m0[86u].y;
    vec4 _2587 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2572, _2573, (log2((isnan(cbSceneParam._m0[77u].w) ? _625 : (isnan(_625) ? cbSceneParam._m0[77u].w : min(_625, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2589 = _2587.x;
    float _2590 = _2587.y;
    float _2591 = _2587.z;
    float _2592 = _2587.w;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    if (_625 > cbSceneParam._m0[78u].w)
    {
        float _2647 = isnan(_625) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _625 : min(cbSceneParam._m0[80u].w, _625));
        float _2648 = _2647 / _625;
        float _2659 = _2648 * _677;
        float _2660 = _678 * _2648;
        float _2661 = (-0.0) - _2660;
        float _2663 = _2648 * _679;
        float _2665 = (cbSceneParam._m0[77u].w * _2661) / _2647;
        float _2666 = _2665 + cbSceneParam._m0[79u].w;
        float _2667 = cbSceneParam._m0[79u].w - _2660;
        float _2673 = sqrt(((_2659 * _2659) + (_2660 * _2660)) + (_2663 * _2663));
        float _2676 = (1.0 - (cbSceneParam._m0[77u].w / _2647)) * _2673;
        float _2681 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2683 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2860;
        if (abs((_2661 - _2665) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2860 = ((((_2666 > 0.0) ? exp2(_2681 * _2666) : (2.0 - exp2(_2683 * _2666))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2676;
        }
        else
        {
            float _2804 = 1.0 / cbSceneParam._m0[80u].x;
            float _2805 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : max(_2666, _2667));
            float _2806 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : min(_2666, _2667));
            float _2815 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : min(_2805, 0.0));
            float _2816 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : min(_2806, 0.0));
            _2860 = ((abs(_2673 / _2661) * cbSceneParam._m0[80u].y) * ((((_2815 - _2816) * 2.0) - ((exp2(_2681 * (isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0)))) - exp2(_2681 * (isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0))))) * _2804)) - ((exp2(_2683 * _2815) - exp2(_2683 * _2816)) * _2804))) + (_2676 * cbSceneParam._m0[80u].z);
        }
        vec4 _2862 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2572, _2573, 1.0), 0.0);
        float _2871 = exp2((_2860 * (-1.44269502162933349609375)) * (1.0 - _2862.w));
        float _2872 = log2(_2871);
        float _2888 = log2(_2592);
        _2685 = (exp2(_2888 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2872 * cbSceneParam._m0[78u].x)) * _2862.x) / cbSceneParam._m0[78u].x)) + _2589;
        _2687 = (exp2(_2888 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2872 * cbSceneParam._m0[78u].y)) * _2862.y) / cbSceneParam._m0[78u].y)) + _2590;
        _2689 = (exp2(_2888 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2872 * cbSceneParam._m0[78u].z)) * _2862.z) / cbSceneParam._m0[78u].z)) + _2591;
        _2691 = _2871 * _2592;
    }
    else
    {
        _2685 = _2589;
        _2687 = _2590;
        _2689 = _2591;
        _2691 = _2592;
    }
    bool _2898;
    vec4 _2701;
    vec4 _2723;
    float _2725;
    float _2729;
    float _2730;
    float _2731;
    float _2732;
    bool _2742;
    for (;;)
    {
        _2701 = cbMatDynParam._m0[0u];
        float _2703 = roundEven(_2701.y);
        bool _2704 = _2703 == 3.0;
        float _2705 = log2(_2691);
        float _2712 = exp2(_2705 * cbSceneParam._m0[78u].x) * _2561;
        float _2713 = exp2(_2705 * cbSceneParam._m0[78u].y) * _2562;
        float _2714 = exp2(_2705 * cbSceneParam._m0[78u].z) * _2563;
        float _2721 = _693 + (-0.5);
        _2723 = cbMtdParam._m0[1u];
        _2725 = _2723.y * _2721;
        float _2728 = (_2703 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2729 = _2728 * (_2704 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2685)));
        _2730 = _2728 * (_2704 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2687)));
        _2731 = _2728 * (_2704 ? _2714 : (_2714 + (cbSceneParam._m0[72u].w * _2689)));
        _2732 = _2721 * 0.999000012874603271484375;
        _2742 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2742)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _2732) < 0.5)
            {
                _2898 = true;
                break;
            }
        }
        uint _2839 = _742 + uint(_2701.w);
        if ((cbInstanceData._m0[_2839].w < 1.0) && ((cbInstanceData._m0[_2839].w + _2732) < 0.5))
        {
            _2898 = true;
            break;
        }
        if ((_2725 + 1.0) < _2723.x)
        {
            _2898 = true;
            break;
        }
        _2898 = false;
        break;
    }
    float _3103;
    if (_2898)
    {
        discard_state = true;
        _3103 = 0.0;
    }
    else
    {
        _3103 = cbInstanceData._m0[_2564].w;
    }
    SV_Target.x = _2729;
    SV_Target.y = _2730;
    SV_Target.z = _2731;
    SV_Target.w = _3103;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2564].w;
    discard_exit();
}


