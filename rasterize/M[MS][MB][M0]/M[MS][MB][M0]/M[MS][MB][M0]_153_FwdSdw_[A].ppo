#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1222;
float _3863;
float _3864;
float _3865;
float _3866;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _362 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _362) * cbMtdParam._m0[24u].x) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3875 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _387 = (_380 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _388 = (_380 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _389 = (_380 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _408 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _428 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _455 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _472 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _474 = _472.x;
    float _475 = _472.y;
    float _476 = _472.z;
    float _485 = ((_455.z - _476) * _380) + _476;
    float _488 = ((((_455.x - _474) * _380) + _474) * 2.0) + (-1.0);
    float _489 = ((((_455.y - _475) * _380) + _475) * 2.0) + (-1.0);
    float _490 = dot(vec2(_488, _489), vec2(_488, _489));
    float _3886 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _495 = sqrt(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))));
    float _498 = _488 + ((((_428.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _499 = _489 + ((((_428.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _502 = fma(_495, _232, fma(_499, _239, _498 * _225));
    float _505 = fma(_495, _233, fma(_499, _240, _498 * _226));
    float _508 = fma(_495, _234, fma(_499, _241, _498 * _227));
    float _512 = inversesqrt(dot(vec3(_502, _505, _508), vec3(_502, _505, _508)));
    vec4 _528 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _556 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _558 = _556.x;
    float _559 = 1.0 - _558;
    float _563 = ((_558 - _559) * cbMtdParam._m0[24u].z) + _559;
    float _565 = (cbMtdParam._m0[19u].x + dot(vec4(_512 * _502, _512 * _505, _512 * _508, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_563 * cbMtdParam._m0[21u].z);
    float _3897 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _581 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_563 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3908 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _586 = ((_566 * ((_408.x * cbMtdParam._m0[18u].x) - _387)) * _582) + _387;
    float _587 = ((_566 * ((_408.y * cbMtdParam._m0[18u].y) - _388)) * _582) + _388;
    float _588 = ((_566 * ((_408.z * cbMtdParam._m0[18u].z) - _389)) * _582) + _389;
    float _593 = (((_428.z - _485) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _485;
    vec4 _606 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _613 = (_606.x * 2.0) + (-1.0);
    float _614 = (_606.y * 2.0) + (-1.0);
    float _615 = dot(vec2(_613, _614), vec2(_613, _614));
    float _3919 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _624 = (((_606.z - _593) * _566) * _582) + _593;
    float _639 = (((cbMtdParam._m0[21u].x * _498) + ((_613 - _498) * _566)) * _582) + _498;
    float _640 = (((cbMtdParam._m0[21u].x * _499) + ((_614 - _499) * _566)) * _582) + _499;
    float _641 = (((sqrt(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) - _495) * _566) * _582) + _495;
    float _646 = cbMtdParam._m0[22u].x + _528.w;
    float _649 = fma(_641, _232, fma(_640, _239, _639 * _225));
    float _652 = fma(_641, _233, fma(_640, _240, _639 * _226));
    float _655 = fma(_641, _234, fma(_640, _241, _639 * _227));
    float _659 = inversesqrt(dot(vec3(_649, _652, _655), vec3(_649, _652, _655)));
    float _660 = _659 * _649;
    float _661 = _659 * _652;
    float _662 = _659 * _655;
    float _3930 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _663 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _3952 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _3963 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _3974 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _681 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _733 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _723);
    float _734 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _723);
    float _735 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _723);
    float _739 = inversesqrt(dot(vec3(_733, _734, _735), vec3(_733, _734, _735)));
    float _740 = _733 * _739;
    float _741 = _734 * _739;
    float _742 = _735 * _739;
    vec4 _747 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _749 = _747.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _903 = sqrt(((_733 * _733) + (_734 * _734)) + (_735 * _735));
        float _909 = (cbMatDynParam._m0[5u].x * _903) + cbMatDynParam._m0[5u].y;
        float _3985 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _914 = (cbMatDynParam._m0[5u].z * _903) + cbMatDynParam._m0[5u].w;
        float _3996 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) - _910)) + _910) < ((_749 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _760 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _761 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _779 = fma(_662, cbSceneParam._m0[5u].z, fma(_661, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _660));
    float _782 = fma(_662, cbSceneParam._m0[6u].z, fma(_661, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _660));
    float _785 = fma(_662, cbSceneParam._m0[7u].z, fma(_661, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _660));
    uint _798 = _244 + 9u;
    uint _799 = _798 + uint(cbMatDynParam._m0[0u].w);
    float _805 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * cbInstanceData._m0[_799].x;
    float _806 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * cbInstanceData._m0[_799].y;
    float _807 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * cbInstanceData._m0[_799].z;
    float _4007 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    vec4 _819 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _760, cbSceneParam._m0[86u].y * _761));
    float _823 = ((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * TEXCOORD_5.w) * _819.x;
    float _824 = dot(vec3(_660, _661, _662), vec3(_740, _741, _742));
    float _827 = _824 * 2.0;
    float _831 = (_827 * _660) - _740;
    float _832 = (_827 * _661) - _741;
    float _833 = (_827 * _662) - _742;
    float _837 = abs(dot(vec3(_740, _741, _742), vec3(_660, _661, _662)));
    float _4040 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _839 = sqrt(_663);
    float _852 = exp2((_839 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_839 * 3.0));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1221;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _946 = fma(_892, cbModelParam._m0[26u].z, fma(_888, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _884));
        float _950 = fma(_892, cbModelParam._m0[27u].z, fma(_888, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _884));
        float _954 = fma(_892, cbModelParam._m0[28u].z, fma(_888, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _884));
        float _979 = _884 + _660;
        float _980 = _888 + _661;
        float _981 = _892 + _662;
        float _991 = fma(_981, cbModelParam._m0[26u].z, fma(_980, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _979)) - _946;
        float _992 = fma(_981, cbModelParam._m0[27u].z, fma(_980, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _979)) - _950;
        float _993 = fma(_981, cbModelParam._m0[28u].z, fma(_980, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _979)) - _954;
        float _997 = inversesqrt(dot(vec3(_991, _992, _993), vec3(_991, _992, _993)));
        float _1010 = ((_997 * _991) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_946 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_997 * _992) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_950 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_997 * _993) / cbModelParam._m0[34u].z) + ((((((_954 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1010, _1011, _1012), 0.0);
        float _1049 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1015.x + (-0.5));
        float _1051 = _1049 * (_1015.y + (-0.5));
        float _1052 = _1049 * (_1015.z + (-0.5));
        float _1059 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = _1059 * (_1022.x + (-0.5));
        float _1061 = _1059 * (_1022.y + (-0.5));
        float _1062 = _1059 * (_1022.z + (-0.5));
        float _1069 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1029.x + (-0.5));
        float _1071 = _1069 * (_1029.y + (-0.5));
        float _1072 = _1069 * (_1029.z + (-0.5));
        float _1079 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1036.x + (-0.5));
        float _1081 = _1079 * (_1036.y + (-0.5));
        float _1082 = _1079 * (_1036.z + (-0.5));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = _1050 * 0.5;
        float _1087 = _1060 * 0.5;
        float _1088 = _1070 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1103 = (dot(vec3(_660, _661, _662), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1113 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _4088 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1115 + 1.0))) + _1120) * _1083;
        float _1130 = _1051 * 0.5;
        float _1131 = _1061 * 0.5;
        float _1132 = _1071 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_660, _661, _662), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _4121 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1157 + 1.0))) + _1162) * _1084;
        float _1172 = _1052 * 0.5;
        float _1173 = _1062 * 0.5;
        float _1174 = _1072 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_660, _661, _662), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _4154 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1199 + 1.0))) + _1204) * _1085;
        _1221 = _1052;
        _1223 = _1051;
        _1224 = _1050;
        _1225 = _1062;
        _1226 = _1061;
        _1227 = _1060;
        _1228 = _1072;
        _1229 = _1071;
        _1230 = _1070;
        _1231 = _1085;
        _1232 = _1084;
        _1233 = _1083;
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1235 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1236 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
    }
    else
    {
        _1221 = _1222;
        _1223 = _1222;
        _1224 = _1222;
        _1225 = _1222;
        _1226 = _1222;
        _1227 = _1222;
        _1228 = _1222;
        _1229 = _1222;
        _1230 = _1222;
        _1231 = _1222;
        _1232 = _1222;
        _1233 = _1222;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1264 = fma(_892, cbModelParam._m0[30u].z, fma(_888, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _884));
        float _1268 = fma(_892, cbModelParam._m0[31u].z, fma(_888, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _884));
        float _1272 = fma(_892, cbModelParam._m0[32u].z, fma(_888, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _884));
        float _1295 = _884 + _660;
        float _1296 = _888 + _661;
        float _1297 = _892 + _662;
        float _1307 = fma(_1297, cbModelParam._m0[30u].z, fma(_1296, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1295)) - _1264;
        float _1308 = fma(_1297, cbModelParam._m0[31u].z, fma(_1296, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1295)) - _1268;
        float _1309 = fma(_1297, cbModelParam._m0[32u].z, fma(_1296, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1295)) - _1272;
        float _1313 = inversesqrt(dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309)));
        float _1326 = ((_1313 * _1307) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1264 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1313 * _1308) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1268 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1313 * _1309) / cbModelParam._m0[35u].z) + ((((((_1272 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        float _1363 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1330.x + (-0.5));
        float _1365 = _1363 * (_1330.y + (-0.5));
        float _1366 = _1363 * (_1330.z + (-0.5));
        float _1373 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1337.x + (-0.5));
        float _1375 = _1373 * (_1337.y + (-0.5));
        float _1376 = _1373 * (_1337.z + (-0.5));
        float _1383 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1344.x + (-0.5));
        float _1385 = _1383 * (_1344.y + (-0.5));
        float _1386 = _1383 * (_1344.z + (-0.5));
        float _1393 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1351.x + (-0.5));
        float _1395 = _1393 * (_1351.y + (-0.5));
        float _1396 = _1393 * (_1351.z + (-0.5));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = _1364 * 0.5;
        float _1401 = _1374 * 0.5;
        float _1402 = _1384 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_660, _661, _662), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4217 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1427 + 1.0))) + _1432) * _1397;
        float _1442 = _1365 * 0.5;
        float _1443 = _1375 * 0.5;
        float _1444 = _1385 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_660, _661, _662), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4250 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1469 + 1.0))) + _1474) * _1398;
        float _1484 = _1366 * 0.5;
        float _1485 = _1376 * 0.5;
        float _1486 = _1386 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_660, _661, _662), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4283 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1511 + 1.0))) + _1516) * _1399;
        _1533 = _1366;
        _1534 = _1365;
        _1535 = _1364;
        _1536 = _1376;
        _1537 = _1375;
        _1538 = _1374;
        _1539 = _1386;
        _1540 = _1385;
        _1541 = _1384;
        _1542 = _1399;
        _1543 = _1398;
        _1544 = _1397;
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
    }
    else
    {
        _1533 = _1222;
        _1534 = _1222;
        _1535 = _1222;
        _1536 = _1222;
        _1537 = _1222;
        _1538 = _1222;
        _1539 = _1222;
        _1540 = _1222;
        _1541 = _1222;
        _1542 = _1222;
        _1543 = _1222;
        _1544 = _1222;
        _1545 = 0.0;
        _1546 = 0.0;
        _1547 = 0.0;
    }
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1234)) + _1234;
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1235)) + _1235;
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1236)) + _1236;
    float _1580 = fma(_1559, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1557 * cbSceneParam._m0[89u].x));
    float _1583 = fma(_1559, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1557 * cbSceneParam._m0[90u].x));
    float _1586 = fma(_1559, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1557));
    float _1601 = _831 * 0.5;
    float _1602 = _832 * 0.5;
    float _1603 = _833 * 0.5;
    float _1604 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1607 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1610 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1644;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1617 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1221, _1225, _1228, _1231));
        float _1621 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1223, _1226, _1229, _1232));
        float _1625 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1224, _1227, _1230, _1233));
        float _1632 = dot(vec4(cbModelParam._m0[39u]), vec4(_1601, _1602, _1603, 1.0));
        _1644 = dot(vec3(isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1632) ? 0.0 : (isnan(0.0) ? _1632 : max(0.0, _1632))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1644 = 1.0;
    }
    float _1655;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1646 = dot(vec4(cbModelParam._m0[40u]), vec4(_1601, _1602, _1603, 1.0));
        _1655 = dot(vec3(isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1646) ? 0.0 : (isnan(0.0) ? _1646 : max(0.0, _1646))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1655 = 1.0;
    }
    float _1659 = (_1655 * cbModelParam._m0[1u].x) + (_1644 * (1.0 - cbModelParam._m0[1u].x));
    float _1669 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _663);
    float _1670 = isnan(_1669) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1669 : min(cbModelParam._m0[25u].z, _1669));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1717 = fma(_892, cbModelParam._m0[13u].z, fma(_888, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _884)) + cbModelParam._m0[13u].w;
        float _1721 = fma(_892, cbModelParam._m0[14u].z, fma(_888, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _884)) + cbModelParam._m0[14u].w;
        float _1725 = fma(_892, cbModelParam._m0[15u].z, fma(_888, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _884)) + cbModelParam._m0[15u].w;
        float _1728 = fma(_833, cbModelParam._m0[13u].z, fma(_832, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _831));
        float _1731 = fma(_833, cbModelParam._m0[14u].z, fma(_832, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _831));
        float _1734 = fma(_833, cbModelParam._m0[15u].z, fma(_832, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _831));
        float _1762;
        if (_1728 > 0.0)
        {
            _1762 = abs((1.0 - _1717) / _1728);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1717 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1762 = frontier_phi_17_15_ladder;
        }
        float _1931;
        if (_1731 > 0.0)
        {
            _1931 = abs((1.0 - _1721) / _1731);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1721 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1931 = frontier_phi_26_22_ladder;
        }
        float _2226;
        if (_1734 > 0.0)
        {
            _2226 = abs((1.0 - _1725) / _1734);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1725 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2226 = frontier_phi_38_33_ladder;
        }
        float _2228 = isnan(_1931) ? _1762 : (isnan(_1762) ? _1931 : min(_1762, _1931));
        float _2229 = isnan(_2226) ? _2228 : (isnan(_2228) ? _2226 : min(_2228, _2226));
        float _2233 = (_2229 * _1728) + _1717;
        float _2234 = (_2229 * _1731) + _1721;
        float _2235 = (_2229 * _1734) + _1725;
        float _2236 = _2229 * 9.9999997473787516355514526367188e-05;
        float _2238 = (-1.0) - _2236;
        float _2240 = _2236 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2235 > _2240) || ((_2235 < _2238) || ((_2234 > _2240) || ((_2234 < _2238) || ((_2233 < _2238) || (_2233 > _2240))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2380 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2235, cbModelParam._m0[9u].z, fma(_2234, cbModelParam._m0[9u].y, _2233 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2235, cbModelParam._m0[10u].z, fma(_2234, cbModelParam._m0[10u].y, _2233 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2235, cbModelParam._m0[11u].z, fma(_2234, cbModelParam._m0[11u].y, _2233 * cbModelParam._m0[11u].x))), _1670);
            frontier_phi_16_38_ladder = _2380.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2380.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2380.x * cbModelParam._m0[1u].y;
        }
        _1750 = frontier_phi_16_38_ladder_2;
        _1752 = frontier_phi_16_38_ladder_1;
        _1754 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_831, _832, _833), _1670);
        _1750 = _1738.x * cbModelParam._m0[1u].y;
        _1752 = _1738.y * cbModelParam._m0[1u].y;
        _1754 = _1738.z * cbModelParam._m0[1u].y;
    }
    float _1758 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _663);
    float _1759 = isnan(_1758) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1758 : min(cbModelParam._m0[25u].w, _1758));
    float _1848;
    float _1850;
    float _1852;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1812 = fma(_892, cbModelParam._m0[21u].z, fma(_888, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _884)) + cbModelParam._m0[21u].w;
        float _1816 = fma(_892, cbModelParam._m0[22u].z, fma(_888, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _884)) + cbModelParam._m0[22u].w;
        float _1820 = fma(_892, cbModelParam._m0[23u].z, fma(_888, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _884)) + cbModelParam._m0[23u].w;
        float _1823 = fma(_833, cbModelParam._m0[21u].z, fma(_832, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _831));
        float _1826 = fma(_833, cbModelParam._m0[22u].z, fma(_832, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _831));
        float _1829 = fma(_833, cbModelParam._m0[23u].z, fma(_832, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _831));
        float _1936;
        if (_1823 > 0.0)
        {
            _1936 = abs((1.0 - _1812) / _1823);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1812 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1936 = frontier_phi_28_24_ladder;
        }
        float _2253;
        if (_1826 > 0.0)
        {
            _2253 = abs((1.0 - _1816) / _1826);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1816 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2253 = frontier_phi_40_35_ladder;
        }
        float _2580;
        if (_1829 > 0.0)
        {
            _2580 = abs((1.0 - _1820) / _1829);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1820 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2580 = frontier_phi_50_47_ladder;
        }
        float _2582 = isnan(_2253) ? _1936 : (isnan(_1936) ? _2253 : min(_1936, _2253));
        float _2583 = isnan(_2580) ? _2582 : (isnan(_2582) ? _2580 : min(_2582, _2580));
        float _2587 = (_2583 * _1823) + _1812;
        float _2588 = (_2583 * _1826) + _1816;
        float _2589 = (_2583 * _1829) + _1820;
        float _2590 = _2583 * 9.9999997473787516355514526367188e-05;
        float _2591 = (-1.0) - _2590;
        float _2593 = _2590 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2589 > _2593) || ((_2589 < _2591) || ((_2588 > _2593) || ((_2588 < _2591) || ((_2587 < _2591) || (_2587 > _2593))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2707 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2589, cbModelParam._m0[17u].z, fma(_2588, cbModelParam._m0[17u].y, _2587 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2589, cbModelParam._m0[18u].z, fma(_2588, cbModelParam._m0[18u].y, _2587 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2589, cbModelParam._m0[19u].z, fma(_2588, cbModelParam._m0[19u].y, _2587 * cbModelParam._m0[19u].x))), _1759);
            frontier_phi_25_50_ladder = _2707.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2707.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2707.x * cbModelParam._m0[1u].z;
        }
        _1848 = frontier_phi_25_50_ladder_2;
        _1850 = frontier_phi_25_50_ladder_1;
        _1852 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1832 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_831, _832, _833), _1759);
        _1848 = _1832.x * cbModelParam._m0[1u].z;
        _1850 = _1832.y * cbModelParam._m0[1u].z;
        _1852 = _1832.z * cbModelParam._m0[1u].z;
    }
    float _1864 = ((((1.0 - _852) * ((_839 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_852 * _839)) * _823;
    float _1865 = _1864 * ((cbModelParam._m0[1u].w * (_1848 - _1750)) + _1750);
    float _1866 = _1864 * ((cbModelParam._m0[1u].w * (_1850 - _1752)) + _1752);
    float _1867 = _1864 * ((cbModelParam._m0[1u].w * (_1852 - _1754)) + _1754);
    float _1870 = fma(_1867, cbSceneParam._m0[89u].z, fma(_1866, cbSceneParam._m0[89u].y, _1865 * cbSceneParam._m0[89u].x));
    float _1873 = fma(_1867, cbSceneParam._m0[90u].z, fma(_1866, cbSceneParam._m0[90u].y, _1865 * cbSceneParam._m0[90u].x));
    float _1876 = fma(_1867, cbSceneParam._m0[91u].z, fma(_1866, cbSceneParam._m0[91u].y, _1865 * cbSceneParam._m0[91u].x));
    float _1910 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1914 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1918 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1922 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1923 = _1910 / _1922;
    float _1924 = _1914 / _1922;
    float _1925 = _1918 / _1922;
    float _2072;
    float _2073;
    float _2074;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1952 = ((uint(_1925 > cbSceneParam._m0[59u].y) + uint(_1925 > cbSceneParam._m0[59u].x)) + uint(_1925 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1953 = _1952 + 43u;
        uint _1961 = _1952 + 44u;
        uint _1969 = _1952 + 45u;
        uint _1977 = _1952 + 46u;
        float _1988 = fma(_1922, cbSceneParam._m0[_1953].w, fma(_1918, cbSceneParam._m0[_1953].z, fma(_1914, cbSceneParam._m0[_1953].y, _1910 * cbSceneParam._m0[_1953].x)));
        float _1992 = fma(_1922, cbSceneParam._m0[_1961].w, fma(_1918, cbSceneParam._m0[_1961].z, fma(_1914, cbSceneParam._m0[_1961].y, _1910 * cbSceneParam._m0[_1961].x)));
        float _2000 = fma(_1922, cbSceneParam._m0[_1977].w, fma(_1918, cbSceneParam._m0[_1977].z, fma(_1914, cbSceneParam._m0[_1977].y, _1910 * cbSceneParam._m0[_1977].x)));
        float _2005 = cbSceneParam._m0[33u].z * _2000;
        float _2007 = cbSceneParam._m0[33u].w * _2000;
        float _2010 = fma(_1922, cbSceneParam._m0[_1969].w, fma(_1918, cbSceneParam._m0[_1969].z, fma(_1914, cbSceneParam._m0[_1969].y, _1910 * cbSceneParam._m0[_1969].x))) / _2000;
        float _2058 = (cbSceneParam._m0[33u].x - sqrt(((_1924 * _1924) + (_1923 * _1923)) + (_1925 * _1925))) * cbSceneParam._m0[33u].y;
        float _4409 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2065 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2005 + _1988) / _2000, (_2007 + _1992) / _2000), _2010), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2007 + _1988) / _2000, (_1992 - _2005) / _2000), _2010), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1988 - _2005) / _2000, (_1992 - _2007) / _2000), _2010), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1988 - _2007) / _2000, (_2005 + _1992) / _2000), _2010), 0.0)).x), vec4(0.25)));
        _2072 = 1.0 - (_2065 * cbSceneParam._m0[34u].x);
        _2073 = 1.0 - (_2065 * cbSceneParam._m0[34u].y);
        _2074 = 1.0 - (_2065 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2072 = 1.0;
        _2073 = 1.0;
        _2074 = 1.0;
    }
    float _2138;
    float _2140;
    float _2142;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2126 = fma(_1922, cbSceneParam._m0[63u].w, fma(_1918, cbSceneParam._m0[63u].z, fma(_1914, cbSceneParam._m0[63u].y, _1910 * cbSceneParam._m0[63u].x)));
        float _2127 = fma(_1922, cbSceneParam._m0[60u].w, fma(_1918, cbSceneParam._m0[60u].z, fma(_1914, cbSceneParam._m0[60u].y, _1910 * cbSceneParam._m0[60u].x))) / _2126;
        float _2128 = fma(_1922, cbSceneParam._m0[61u].w, fma(_1918, cbSceneParam._m0[61u].z, fma(_1914, cbSceneParam._m0[61u].y, _1910 * cbSceneParam._m0[61u].x))) / _2126;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2127 >= cbSceneParam._m0[64u].x) && (_2128 >= cbSceneParam._m0[64u].y)) && (_2127 <= cbSceneParam._m0[64u].z)) && (_2128 <= cbSceneParam._m0[64u].w))
        {
            float _2266 = fma(_1922, cbSceneParam._m0[62u].w, fma(_1918, cbSceneParam._m0[62u].z, fma(_1914, cbSceneParam._m0[62u].y, _1910 * cbSceneParam._m0[62u].x))) / _2126;
            float _2270 = isnan(cbSceneParam._m0[41u].w) ? _2266 : (isnan(_2266) ? cbSceneParam._m0[41u].w : max(_2266, cbSceneParam._m0[41u].w));
            float _2313 = (cbSceneParam._m0[33u].x - sqrt(((_1924 * _1924) + (_1923 * _1923)) + (_1925 * _1925))) * cbSceneParam._m0[33u].y;
            float _4425 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
            float _2320 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2127, cbSceneParam._m0[33u].w + _2128), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2127, _2128 - cbSceneParam._m0[33u].z), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2127 - cbSceneParam._m0[33u].z, _2128 - cbSceneParam._m0[33u].w), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2127 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2128), _2270), 0.0)).x), vec4(0.25)));
            float _2324 = 1.0 - (_2320 * cbSceneParam._m0[34u].x);
            float _2325 = 1.0 - (_2320 * cbSceneParam._m0[34u].y);
            float _2326 = 1.0 - (_2320 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2326) ? _2074 : (isnan(_2074) ? _2326 : min(_2074, _2326));
            frontier_phi_37_36_ladder_1 = isnan(_2325) ? _2073 : (isnan(_2073) ? _2325 : min(_2073, _2325));
            frontier_phi_37_36_ladder_2 = isnan(_2324) ? _2072 : (isnan(_2072) ? _2324 : min(_2072, _2324));
        }
        else
        {
            frontier_phi_37_36_ladder = _2074;
            frontier_phi_37_36_ladder_1 = _2073;
            frontier_phi_37_36_ladder_2 = _2072;
        }
        _2138 = frontier_phi_37_36_ladder_2;
        _2140 = frontier_phi_37_36_ladder_1;
        _2142 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2138 = _2072;
        _2140 = _2073;
        _2142 = _2074;
    }
    uvec4 _2147 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2149 = _2147.x * 14u;
    uint _2150 = _2149 + 13u;
    float _2157 = _823 + (-1.0);
    float _2162 = (cbLight._m0[_2150].x * _2157) + 1.0;
    float _2163 = (cbLight._m0[_2150].y * _2157) + 1.0;
    float _2164 = (cbLight._m0[_2150].z * _2157) + 1.0;
    float _2165 = (cbLight._m0[_2150].w * _2157) + 1.0;
    uint _2166 = _2149 + 5u;
    float _2172 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
    uint _2176 = _2149 + 4u;
    float _2185 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
    uint _2189 = _2149 | 1u;
    float _2200 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_660, _661, _662));
    float _2203 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_660, _661, _662));
    float _4461 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _4472 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2208 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * 0.3183098733425140380859375;
    float _2210 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * 0.3183098733425140380859375;
    float _2217 = ((cbLight._m0[_2166].x * _2172) * _2210) + (((cbLight._m0[_2176].x * _2138) * _2185) * _2208);
    float _2218 = ((_2172 * cbLight._m0[_2166].y) * _2210) + (((cbLight._m0[_2176].y * _2140) * _2185) * _2208);
    float _2219 = ((_2172 * cbLight._m0[_2166].z) * _2210) + (((cbLight._m0[_2176].z * _2142) * _2185) * _2208);
    uvec4 _2223 = floatBitsToUint(cbLight._m0[_2149 + 12u]);
    bool _2225 = _2223.x == 0u;
    float _2327;
    float _2329;
    float _2331;
    if (_2225)
    {
        _2327 = _2217;
        _2329 = _2218;
        _2331 = _2219;
    }
    else
    {
        uint _2335 = _2149 + 6u;
        float _2351 = (dot(vec3(cbLight._m0[_2149 + 2u].xyz), vec3(_660, _661, _662)) * 0.5) + 0.5;
        float _2352 = _2351 * _2351;
        float _4483 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2353 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2354 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2327 = (((cbLight._m0[_2335].x * 0.3183098733425140380859375) * _2353) * _2354) + _2217;
        _2329 = (((cbLight._m0[_2335].y * 0.3183098733425140380859375) * _2353) * _2354) + _2218;
        _2331 = (((cbLight._m0[_2335].z * 0.3183098733425140380859375) * _2353) * _2354) + _2219;
    }
    bool _2334 = _2223.y == 0u;
    float _2389;
    float _2391;
    float _2393;
    if (_2334)
    {
        _2389 = _2327;
        _2391 = _2329;
        _2393 = _2331;
    }
    else
    {
        uint _2551 = _2149 + 7u;
        float _2567 = (dot(vec3(cbLight._m0[_2149 + 3u].xyz), vec3(_660, _661, _662)) * 0.5) + 0.5;
        float _2568 = _2567 * _2567;
        float _4499 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2569 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2570 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2389 = (((cbLight._m0[_2551].x * 0.3183098733425140380859375) * _2569) * _2570) + _2327;
        _2391 = (((cbLight._m0[_2551].y * 0.3183098733425140380859375) * _2569) * _2570) + _2329;
        _2393 = (((cbLight._m0[_2551].z * 0.3183098733425140380859375) * _2569) * _2570) + _2331;
    }
    uint _2396 = _2149 + 8u;
    float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _663) * 0.949999988079071044921875);
    float _2410 = _2409 * _2409;
    float _2411 = cbLight._m0[_2149].x + _740;
    float _2412 = cbLight._m0[_2149].y + _741;
    float _2413 = cbLight._m0[_2149].z + _742;
    float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
    float _2418 = _2417 * _2411;
    float _2419 = _2417 * _2412;
    float _2420 = _2417 * _2413;
    float _2421 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2149].xyz));
    float _4515 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _4526 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _2425 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _2426 = dot(vec3(_660, _661, _662), vec3(_2418, _2419, _2420));
    float _4537 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _2430 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2418, _2419, _2420));
    float _4548 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2434 = _2410 * _2410;
    float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
    float _2449 = (exp2(log2(1.0 - (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2450 = 1.0 - _2410;
    float _2461 = (0.5 / (((_2425 * ((_2424 * _2450) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2450) + _2410) * _2424))) * _2424;
    float _4559 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2463 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
    uint _2477 = _2149 + 9u;
    float _2488 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _663) * 0.949999988079071044921875);
    float _2489 = _2488 * _2488;
    float _2490 = cbLight._m0[_2189].x + _740;
    float _2491 = cbLight._m0[_2189].y + _741;
    float _2492 = cbLight._m0[_2189].z + _742;
    float _2496 = inversesqrt(dot(vec3(_2490, _2491, _2492), vec3(_2490, _2491, _2492)));
    float _2497 = _2496 * _2490;
    float _2498 = _2496 * _2491;
    float _2499 = _2496 * _2492;
    float _2500 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2189].xyz));
    float _4570 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2503 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _2504 = dot(vec3(_660, _661, _662), vec3(_2497, _2498, _2499));
    float _4581 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2507 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _2508 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2497, _2498, _2499));
    float _4592 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2512 = _2489 * _2489;
    float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
    float _2525 = (exp2(log2(1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2526 = 1.0 - _2489;
    float _2536 = (0.5 / (((_2425 * ((_2503 * _2526) + _2489)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2526) + _2489) * _2503))) * _2503;
    float _4603 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2538 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
    float _2548 = (((_2525 * cbLight._m0[_2477].x) * _2538) * _2172) + ((((cbLight._m0[_2396].x * _2138) * _2449) * _2463) * _2185);
    float _2549 = (((_2525 * cbLight._m0[_2477].y) * _2538) * _2172) + ((((cbLight._m0[_2396].y * _2140) * _2449) * _2463) * _2185);
    float _2550 = (((_2525 * cbLight._m0[_2477].z) * _2538) * _2172) + ((((cbLight._m0[_2396].z * _2142) * _2449) * _2463) * _2185);
    float _2606;
    float _2608;
    float _2610;
    if (_2225)
    {
        _2606 = _2548;
        _2608 = _2549;
        _2610 = _2550;
    }
    else
    {
        uint _2612 = _2149 + 2u;
        uint _2616 = _2149 + 10u;
        float _2630 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2612].w)) * _663) * 0.949999988079071044921875);
        float _2631 = _2630 * _2630;
        float _2632 = cbLight._m0[_2612].x + _740;
        float _2633 = cbLight._m0[_2612].y + _741;
        float _2634 = cbLight._m0[_2612].z + _742;
        float _2638 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
        float _2639 = _2638 * _2632;
        float _2640 = _2638 * _2633;
        float _2641 = _2638 * _2634;
        float _2642 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2612].xyz));
        float _4614 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2646 = dot(vec3(_660, _661, _662), vec3(_2639, _2640, _2641));
        float _4625 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2649 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2650 = dot(vec3(cbLight._m0[_2612].xyz), vec3(_2639, _2640, _2641));
        float _4636 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2654 = _2631 * _2631;
        float _2658 = ((_2649 * _2649) * (_2654 + (-1.0))) + 1.0;
        float _2667 = (exp2(log2(1.0 - (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2668 = 1.0 - _2631;
        float _2678 = (0.5 / (((_2425 * ((_2645 * _2668) + _2631)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2668) + _2631) * _2645))) * _2645;
        float _4647 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2680 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2654 / ((_2658 * _2658) * 3.141590118408203125));
        float _2681 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2606 = (((_2667 * cbLight._m0[_2616].x) * _2680) * _2681) + _2548;
        _2608 = (((_2667 * cbLight._m0[_2616].y) * _2680) * _2681) + _2549;
        _2610 = (((_2667 * cbLight._m0[_2616].z) * _2680) * _2681) + _2550;
    }
    float _2712;
    float _2714;
    float _2716;
    if (_2334)
    {
        _2712 = _2606;
        _2714 = _2608;
        _2716 = _2610;
    }
    else
    {
        uint _2723 = _2149 + 3u;
        uint _2727 = _2149 + 11u;
        float _2741 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2723].w)) * _663) * 0.949999988079071044921875);
        float _2742 = _2741 * _2741;
        float _2743 = cbLight._m0[_2723].x + _740;
        float _2744 = cbLight._m0[_2723].y + _741;
        float _2745 = cbLight._m0[_2723].z + _742;
        float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
        float _2750 = _2749 * _2743;
        float _2751 = _2749 * _2744;
        float _2752 = _2749 * _2745;
        float _2753 = dot(vec3(_660, _661, _662), vec3(cbLight._m0[_2723].xyz));
        float _4663 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2756 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2757 = dot(vec3(_660, _661, _662), vec3(_2750, _2751, _2752));
        float _4674 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2760 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2761 = dot(vec3(cbLight._m0[_2723].xyz), vec3(_2750, _2751, _2752));
        float _4685 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2765 = _2742 * _2742;
        float _2769 = ((_2760 * _2760) * (_2765 + (-1.0))) + 1.0;
        float _2778 = (exp2(log2(1.0 - (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2779 = 1.0 - _2742;
        float _2789 = (0.5 / (((_2425 * ((_2756 * _2779) + _2742)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2779) + _2742) * _2756))) * _2756;
        float _4696 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2791 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2765 / ((_2769 * _2769) * 3.141590118408203125));
        float _2792 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2712 = (((_2778 * cbLight._m0[_2727].x) * _2791) * _2792) + _2606;
        _2714 = (((_2778 * cbLight._m0[_2727].y) * _2791) * _2792) + _2608;
        _2716 = (((_2778 * cbLight._m0[_2727].z) * _2791) * _2792) + _2610;
    }
    float _2858;
    float _2860;
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    if (_2147.y == 0u)
    {
        uvec4 _2813 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2814 = _2813.x;
        uint _2825 = uint((float(_2813.y) * floor(float(uint(cbSceneParam._m0[85u].y * _761) / _2814))) + floor(float(uint(cbSceneParam._m0[85u].x * _760) / _2814)));
        float _2835 = (log2(_1925 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2836 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        uint _2839 = uint(isnan(14.0) ? _2836 : (isnan(_2836) ? 14.0 : min(_2836, 14.0)));
        uvec4 _2844 = texelFetch(g_lightClusterGridBuffer, int(((_2839 << 2u) + (_2825 << 6u)) >> 2u));
        uint _2845 = _2844.x;
        uint _2846 = _2813.z;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        if (((((1u << ((_2846 >> 4u) & 15u)) + 4294967295u) & _2845) == 0u) || ((_2846 & 240u) == 0u))
        {
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
        }
        else
        {
            float _2926;
            float _2928;
            float _2930;
            float _2932;
            float _2934;
            float _2936;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            uint _3084 = 0u;
            uint _3093;
            bool _3094;
            for (;;)
            {
                _3093 = texelFetch(g_lightClassification, int((((_2839 << 5u) + (_2825 << 9u)) + (_3084 << 2u)) >> 2u)).x;
                _3094 = _3093 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3094)
                {
                    frontier_phi_71_pred = _3083;
                    frontier_phi_71_pred_1 = _3082;
                    frontier_phi_71_pred_2 = _3081;
                    frontier_phi_71_pred_3 = _3080;
                    frontier_phi_71_pred_4 = _3079;
                    frontier_phi_71_pred_5 = _3078;
                }
                else
                {
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    uint _3229;
                    _3223 = _3078;
                    _3224 = _3079;
                    _3225 = _3080;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3093;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    for (;;)
                    {
                        uint _3233 = uint(findLSB(_3229)) + (_3084 << 5u);
                        uint _3230 = (_3229 + 4294967295u) & _3229;
                        uint _3235 = _3233 * 48u;
                        vec4 _3249 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 3u)).x));
                        uint _3255 = (_3233 * 48u) + 4u;
                        vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3255)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 3u)).x));
                        uint _3274 = (_3233 * 48u) + 8u;
                        vec3 _3285 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x));
                        float _3289 = _3249.x - _1923;
                        float _3290 = _3249.y - _1924;
                        float _3291 = _3249.z - _1925;
                        float _3292 = dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291));
                        float _3295 = inversesqrt(_3292);
                        float _3296 = _3295 * _3289;
                        float _3297 = _3295 * _3290;
                        float _3298 = _3295 * _3291;
                        float _3299 = dot(vec3(_779, _782, _785), vec3(_3296, _3297, _3298));
                        float _3304 = 1.0 - (_3292 * _3249.w);
                        float _4722 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3305 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                        float _3306 = sqrt(_3292) * _3268.w;
                        float _3309 = 1.39999997615814208984375 / (_3306 + 1.39999997615814208984375);
                        float _3310 = _3309 * _3309;
                        float _3313 = ((1.0 - _3310) * _3299) + _3310;
                        float _3316 = _3306 * _3306;
                        float _3320 = ((isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0))) * _3305) / ((_3316 * 0.699999988079071044921875) + 1.0);
                        float _3324 = (-0.0) - _1923;
                        float _3325 = (-0.0) - _1924;
                        float _3326 = (-0.0) - _1925;
                        float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                        float _3331 = _3330 * _3324;
                        float _3332 = _3330 * _3325;
                        float _3333 = _3330 * _3326;
                        float _3340 = exp2(log2(1.0 / ((_3316 * 3.5) + 5.0)) * 0.25);
                        float _3341 = 1.0 - _839;
                        float _3348 = sqrt(1.0 - ((1.0 - (_3341 * _3341)) * (1.0 - (_3340 * _3340))));
                        float _3349 = _3348 * _3348;
                        float _3350 = _3349 * _3349;
                        float _3351 = _3331 + _3296;
                        float _3352 = _3332 + _3297;
                        float _3353 = _3333 + _3298;
                        float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                        float _3361 = dot(vec3(_779, _782, _785), vec3(_3331, _3332, _3333));
                        float _4738 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3364 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3365 = dot(vec3(_779, _782, _785), vec3(_3357 * _3351, _3357 * _3352, _3357 * _3353));
                        float _4749 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3368 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                        float _3372 = ((_3368 * _3368) * (_3350 + (-1.0))) + 1.0;
                        float _3373 = _3309 * _3349;
                        float _3374 = _3373 * _3373;
                        float _3377 = ((1.0 - _3374) * _3299) + _3374;
                        float _4760 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3378 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3379 = 1.0 - _3349;
                        float _3389 = (0.5 / (((_3378 * ((_3364 * _3379) + _3349)) + 9.9999999392252902907785028219223e-09) + (((_3378 * _3379) + _3349) * _3364))) * _3378;
                        float _4771 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3400 = (((_3350 * 3.1415927410125732421875) * (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) / ((_3372 * _3372) * ((_3316 * 2.1991131305694580078125) + 3.141590118408203125))) * _3305;
                        _3153 = (_3320 * _3268.x) + _3226;
                        _3154 = (_3320 * _3268.y) + _3227;
                        _3155 = (_3320 * _3268.z) + _3228;
                        _3150 = (_3400 * _3285.x) + _3223;
                        _3151 = (_3400 * _3285.y) + _3224;
                        _3152 = (_3400 * _3285.z) + _3225;
                        if (_3230 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3223 = _3150;
                            _3224 = _3151;
                            _3225 = _3152;
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3230;
                        }
                    }
                    frontier_phi_71_pred = _3155;
                    frontier_phi_71_pred_1 = _3154;
                    frontier_phi_71_pred_2 = _3153;
                    frontier_phi_71_pred_3 = _3152;
                    frontier_phi_71_pred_4 = _3151;
                    frontier_phi_71_pred_5 = _3150;
                }
                _2936 = frontier_phi_71_pred;
                _2934 = frontier_phi_71_pred_1;
                _2932 = frontier_phi_71_pred_2;
                _2930 = frontier_phi_71_pred_3;
                _2928 = frontier_phi_71_pred_4;
                _2926 = frontier_phi_71_pred_5;
                uint _3085 = _3084 + 1u;
                if (_3085 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3078 = _2926;
                    _3079 = _2928;
                    _3080 = _2930;
                    _3081 = _2932;
                    _3082 = _2934;
                    _3083 = _2936;
                    _3084 = _3085;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
        }
        uvec4 _2939 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2940 = _2939.z;
        uint _2942 = (_2940 >> 8u) & 15u;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        if (((4294967295u << _2942) & _2845) == 0u)
        {
            _3046 = _2925;
            _3048 = _2927;
            _3050 = _2929;
            _3052 = _2931;
            _3054 = _2933;
            _3056 = _2935;
        }
        else
        {
            float _3071 = inversesqrt(dot(vec3(_1923, _1924, _1925), vec3(_1923, _1924, _1925)));
            float _3072 = _3071 * _1923;
            float _3073 = _3071 * _1924;
            float _3074 = _3071 * _1925;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2942 < ((_2940 >> 12u) & 15u))
            {
                float _3047;
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3206 = _2925;
                float _3207 = _2927;
                float _3208 = _2929;
                float _3209 = _2931;
                float _3210 = _2933;
                float _3211 = _2935;
                uint _3212 = _2942;
                uint _3221;
                bool _3222;
                for (;;)
                {
                    _3221 = texelFetch(g_lightClassification, int((((_2839 << 5u) + (_2825 << 9u)) + (_3212 << 2u)) >> 2u)).x;
                    _3222 = _3221 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3222)
                    {
                        frontier_phi_82_pred = _3211;
                        frontier_phi_82_pred_1 = _3210;
                        frontier_phi_82_pred_2 = _3209;
                        frontier_phi_82_pred_3 = _3208;
                        frontier_phi_82_pred_4 = _3207;
                        frontier_phi_82_pred_5 = _3206;
                    }
                    else
                    {
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3427 = _3206;
                        float _3428 = _3207;
                        float _3429 = _3208;
                        float _3430 = _3209;
                        float _3431 = _3210;
                        float _3432 = _3211;
                        uint _3433 = _3221;
                        uint _3434;
                        vec4 _3459;
                        float _3460;
                        vec4 _3475;
                        vec3 _3487;
                        vec4 _3502;
                        vec4 _3517;
                        float _3563;
                        bool _3564;
                        for (;;)
                        {
                            uint _3444 = ((_3212 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3433));
                            _3434 = (_3433 + 4294967295u) & _3433;
                            uint _3446 = _3444 * 40u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            _3460 = _3459.w;
                            uint _3462 = (_3444 * 40u) + 4u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3477 = (_3444 * 40u) + 8u;
                            _3487 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x));
                            uint _3489 = (_3444 * 40u) + 16u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            uint _3504 = (_3444 * 40u) + 20u;
                            _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            uint _3519 = (_3444 * 40u) + 24u;
                            vec4 _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            uint _3538 = (_3444 * 40u) + 28u;
                            vec4 _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            _3563 = fma(_1925, _3551.z, fma(_1924, _3551.y, _3551.x * _1923)) + _3551.w;
                            _3564 = !((fma(_1925, _3532.z, fma(_1924, _3532.y, _3532.x * _1923)) + _3532.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3564)
                            {
                                float _3591 = _3459.x - _1923;
                                float _3592 = _3459.y - _1924;
                                float _3593 = _3459.z - _1925;
                                float _3594 = dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593));
                                float _3597 = inversesqrt(_3594);
                                float _3598 = _3597 * _3591;
                                float _3599 = _3597 * _3592;
                                float _3600 = _3597 * _3593;
                                float _3604 = 1.0 - (_3594 / (_3460 * _3460));
                                float _4782 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3605 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                                float _3609 = sqrt(_3594) * _3475.w;
                                float _3611 = 1.39999997615814208984375 / (_3609 + 1.39999997615814208984375);
                                float _3612 = _3611 * _3611;
                                float _3615 = ((1.0 - _3612) * dot(vec3(_3598, _3599, _3600), vec3(_779, _782, _785))) + _3612;
                                float _3618 = _3609 * _3609;
                                float _3622 = (fma(_1925, _3502.z, fma(_1924, _3502.y, _3502.x * _1923)) + _3502.w) / _3563;
                                float _3623 = (fma(_1925, _3517.z, fma(_1924, _3517.y, _3517.x * _1923)) + _3517.w) / _3563;
                                float _3627 = 1.0 - dot(vec2(_3622, _3623), vec2(_3622, _3623));
                                float _4798 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3628 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3629 = _3628 * (((isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0))) * _3605) / ((_3618 * 0.699999988079071044921875) + 1.0));
                                float _3641 = exp2(log2(1.0 / ((_3618 * 3.5) + 5.0)) * 0.25);
                                float _3642 = 1.0 - _839;
                                float _3649 = sqrt(1.0 - ((1.0 - (_3642 * _3642)) * (1.0 - (_3641 * _3641))));
                                float _3650 = _3649 * _3649;
                                float _3651 = _3650 * _3650;
                                float _3652 = _3598 - _3072;
                                float _3653 = _3599 - _3073;
                                float _3654 = _3600 - _3074;
                                float _3658 = inversesqrt(dot(vec3(_3652, _3653, _3654), vec3(_3652, _3653, _3654)));
                                float _3662 = dot(vec3(_779, _782, _785), vec3((-0.0) - _3072, (-0.0) - _3073, (-0.0) - _3074));
                                float _4809 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3665 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3666 = dot(vec3(_779, _782, _785), vec3(_3658 * _3652, _3658 * _3653, _3658 * _3654));
                                float _4820 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3669 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3673 = ((_3669 * _3669) * (_3651 + (-1.0))) + 1.0;
                                float _3674 = _3611 * _3650;
                                float _3675 = _3674 * _3674;
                                float _3681 = ((1.0 - _3675) * dot(vec3(_779, _782, _785), vec3(_3598, _3599, _3600))) + _3675;
                                float _4831 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3682 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3683 = 1.0 - _3650;
                                float _3693 = (0.5 / (((_3682 * ((_3665 * _3683) + _3650)) + 9.9999999392252902907785028219223e-09) + (((_3682 * _3683) + _3650) * _3665))) * _3682;
                                float _4842 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3703 = (_3628 * _3605) * (((_3651 * 3.1415927410125732421875) * (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0)))) / ((_3673 * _3673) * ((_3618 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3629 * _3475.z;
                                frontier_phi_88_pred_1 = _3629 * _3475.y;
                                frontier_phi_88_pred_2 = _3629 * _3475.x;
                                frontier_phi_88_pred_3 = _3703 * _3487.z;
                                frontier_phi_88_pred_4 = _3703 * _3487.y;
                                frontier_phi_88_pred_5 = _3703 * _3487.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3712 = frontier_phi_88_pred;
                            _3711 = frontier_phi_88_pred_1;
                            _3710 = frontier_phi_88_pred_2;
                            _3709 = frontier_phi_88_pred_3;
                            _3708 = frontier_phi_88_pred_4;
                            _3707 = frontier_phi_88_pred_5;
                            _3417 = _3710 + _3430;
                            _3418 = _3711 + _3431;
                            _3419 = _3712 + _3432;
                            _3414 = _3707 + _3427;
                            _3415 = _3708 + _3428;
                            _3416 = _3709 + _3429;
                            if (_3434 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3434;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3419;
                        frontier_phi_82_pred_1 = _3418;
                        frontier_phi_82_pred_2 = _3417;
                        frontier_phi_82_pred_3 = _3416;
                        frontier_phi_82_pred_4 = _3415;
                        frontier_phi_82_pred_5 = _3414;
                    }
                    _3057 = frontier_phi_82_pred;
                    _3055 = frontier_phi_82_pred_1;
                    _3053 = frontier_phi_82_pred_2;
                    _3051 = frontier_phi_82_pred_3;
                    _3049 = frontier_phi_82_pred_4;
                    _3047 = frontier_phi_82_pred_5;
                    uint _3213 = _3212 + 1u;
                    if (_3213 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3206 = _3047;
                        _3207 = _3049;
                        _3208 = _3051;
                        _3209 = _3053;
                        _3210 = _3055;
                        _3211 = _3057;
                        _3212 = _3213;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3053;
                frontier_phi_63_64_ladder_1 = _3057;
                frontier_phi_63_64_ladder_2 = _3055;
                frontier_phi_63_64_ladder_3 = _3051;
                frontier_phi_63_64_ladder_4 = _3049;
                frontier_phi_63_64_ladder_5 = _3047;
            }
            else
            {
                frontier_phi_63_64_ladder = _2931;
                frontier_phi_63_64_ladder_1 = _2935;
                frontier_phi_63_64_ladder_2 = _2933;
                frontier_phi_63_64_ladder_3 = _2929;
                frontier_phi_63_64_ladder_4 = _2927;
                frontier_phi_63_64_ladder_5 = _2925;
            }
            _3046 = frontier_phi_63_64_ladder_5;
            _3048 = frontier_phi_63_64_ladder_4;
            _3050 = frontier_phi_63_64_ladder_3;
            _3052 = frontier_phi_63_64_ladder;
            _3054 = frontier_phi_63_64_ladder_2;
            _3056 = frontier_phi_63_64_ladder_1;
        }
        float _3061 = isnan(1.0) ? _823 : (isnan(_823) ? 1.0 : min(_823, 1.0));
        _2858 = (_3061 * _3052) + _2389;
        _2860 = (_3061 * _3054) + _2391;
        _2862 = (_3061 * _3056) + _2393;
        _2864 = ((_3046 * 0.039999999105930328369140625) * _3061) + _2712;
        _2866 = ((_3048 * 0.039999999105930328369140625) * _3061) + _2714;
        _2868 = ((_3050 * 0.039999999105930328369140625) * _3061) + _2716;
    }
    else
    {
        _2858 = _2389;
        _2860 = _2391;
        _2862 = _2393;
        _2864 = _2712;
        _2866 = _2714;
        _2868 = _2716;
    }
    float _4858 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4869 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4880 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _2885 = ((isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2858 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _823))) + ((_2864 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1659)) * cbPerFrame._m0[3u].x);
    float _2886 = ((isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2860 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _823))) + ((_2866 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1659)) * cbPerFrame._m0[3u].x);
    float _2887 = ((isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2862 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _823))) + ((_2868 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1659)) * cbPerFrame._m0[3u].x);
    uint _2888 = _244 + 6u;
    float _2896 = _760 / cbSceneParam._m0[86u].x;
    float _2897 = _761 / cbSceneParam._m0[86u].y;
    vec4 _2911 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2896, _2897, (log2((isnan(cbSceneParam._m0[77u].w) ? _681 : (isnan(_681) ? cbSceneParam._m0[77u].w : min(_681, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2913 = _2911.x;
    float _2914 = _2911.y;
    float _2915 = _2911.z;
    float _2916 = _2911.w;
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    if (_681 > cbSceneParam._m0[78u].w)
    {
        float _2950 = isnan(_681) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _681 : min(cbSceneParam._m0[80u].w, _681));
        float _2951 = _2950 / _681;
        float _2962 = _2951 * _733;
        float _2963 = _734 * _2951;
        float _2964 = (-0.0) - _2963;
        float _2966 = _2951 * _735;
        float _2968 = (cbSceneParam._m0[77u].w * _2964) / _2950;
        float _2969 = _2968 + cbSceneParam._m0[79u].w;
        float _2970 = cbSceneParam._m0[79u].w - _2963;
        float _2976 = sqrt(((_2962 * _2962) + (_2963 * _2963)) + (_2966 * _2966));
        float _2979 = (1.0 - (cbSceneParam._m0[77u].w / _2950)) * _2976;
        float _2984 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2986 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3163;
        if (abs((_2964 - _2968) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3163 = ((((_2969 > 0.0) ? exp2(_2984 * _2969) : (2.0 - exp2(_2986 * _2969))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2979;
        }
        else
        {
            float _3107 = 1.0 / cbSceneParam._m0[80u].x;
            float _3108 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : max(_2969, _2970));
            float _3109 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : min(_2969, _2970));
            float _3118 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : min(_3108, 0.0));
            float _3119 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : min(_3109, 0.0));
            _3163 = ((abs(_2976 / _2964) * cbSceneParam._m0[80u].y) * ((((_3118 - _3119) * 2.0) - ((exp2(_2984 * (isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0)))) - exp2(_2984 * (isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0))))) * _3107)) - ((exp2(_2986 * _3118) - exp2(_2986 * _3119)) * _3107))) + (_2979 * cbSceneParam._m0[80u].z);
        }
        vec4 _3165 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2896, _2897, 1.0), 0.0);
        float _3174 = exp2((_3163 * (-1.44269502162933349609375)) * (1.0 - _3165.w));
        float _3175 = log2(_3174);
        float _3191 = log2(_2916);
        _2988 = (exp2(_3191 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].x)) * _3165.x) / cbSceneParam._m0[78u].x)) + _2913;
        _2990 = (exp2(_3191 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].y)) * _3165.y) / cbSceneParam._m0[78u].y)) + _2914;
        _2992 = (exp2(_3191 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].z)) * _3165.z) / cbSceneParam._m0[78u].z)) + _2915;
        _2994 = _3174 * _2916;
    }
    else
    {
        _2988 = _2913;
        _2990 = _2914;
        _2992 = _2915;
        _2994 = _2916;
    }
    bool _3201;
    vec4 _3004;
    vec4 _3026;
    float _3028;
    float _3032;
    float _3033;
    float _3034;
    float _3035;
    bool _3045;
    for (;;)
    {
        _3004 = cbMatDynParam._m0[0u];
        float _3006 = roundEven(_3004.y);
        bool _3007 = _3006 == 3.0;
        float _3008 = log2(_2994);
        float _3015 = exp2(_3008 * cbSceneParam._m0[78u].x) * _2885;
        float _3016 = exp2(_3008 * cbSceneParam._m0[78u].y) * _2886;
        float _3017 = exp2(_3008 * cbSceneParam._m0[78u].z) * _2887;
        float _3024 = _749 + (-0.5);
        _3026 = cbMtdParam._m0[1u];
        _3028 = _3026.y * _3024;
        float _3031 = (_3006 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3032 = _3031 * (_3007 ? _3015 : (_3015 + (cbSceneParam._m0[72u].w * _2988)));
        _3033 = _3031 * (_3007 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2990)));
        _3034 = _3031 * (_3007 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2992)));
        _3035 = _3024 * 0.999000012874603271484375;
        _3045 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3045)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _3035) < 0.5)
            {
                _3201 = true;
                break;
            }
        }
        uint _3142 = _798 + uint(_3004.w);
        if ((cbInstanceData._m0[_3142].w < 1.0) && ((cbInstanceData._m0[_3142].w + _3035) < 0.5))
        {
            _3201 = true;
            break;
        }
        if ((_3028 + 1.0) < _3026.x)
        {
            _3201 = true;
            break;
        }
        _3201 = false;
        break;
    }
    float _3405;
    if (_3201)
    {
        discard_state = true;
        _3405 = 0.0;
    }
    else
    {
        _3405 = cbInstanceData._m0[_2888].w;
    }
    SV_Target.x = _3032;
    SV_Target.y = _3033;
    SV_Target.z = _3034;
    SV_Target.w = _3405;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2888].w;
    discard_exit();
}


