#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _935;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _197 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _198 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _199 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_197, _198, _199), vec3(_197, _198, _199)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _235 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _236 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3271 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3282 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3293 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _251 = _246 + 1u;
    uint _255 = _246 + 2u;
    float _264 = sqrt(((cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x));
    float _265 = _264 * TEXCOORD.z;
    float _266 = _264 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _265) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _266) + cbTextureTilingScale._m0[13u].w));
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _307 = _302.x * cbMtdParam._m0[9u].x;
    float _308 = _302.y * cbMtdParam._m0[9u].y;
    float _309 = _302.z * cbMtdParam._m0[9u].z;
    float _313 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _279.x) * _307;
    float _316 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _279.y) * _308;
    float _319 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _279.z) * _309;
    float _326 = ((_307 - _313) * (isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0)))) + _313;
    float _327 = ((_308 - _316) * (isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0)))) + _316;
    float _328 = ((_309 - _319) * (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0)))) + _319;
    vec4 _341 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _265) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _266) + cbTextureTilingScale._m0[20u].w));
    vec4 _367 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _371 = _367.z;
    float _375 = (_367.x * 2.0) + (-1.0);
    float _376 = (_367.y * 2.0) + (-1.0);
    float _377 = dot(vec2(_375, _376), vec2(_375, _376));
    float _3304 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _382 = sqrt(1.0 - (isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0))));
    float _387 = _375 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_341.x * 2.0) + (-1.0)));
    float _388 = _376 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_341.y * 2.0) + (-1.0)));
    float _393 = (((_341.z - _371) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _371;
    float _395 = cbMtdParam._m0[22u].x + _367.w;
    float _398 = fma(_382, _212 * NORMAL.x, fma(_388, _219 * TANGENT.x, (_205 * _197) * _387));
    float _401 = fma(_382, _212 * NORMAL.y, fma(_388, _219 * TANGENT.y, (_205 * _198) * _387));
    float _404 = fma(_382, _212 * NORMAL.z, fma(_388, _219 * TANGENT.z, (_205 * _199) * _387));
    float _408 = inversesqrt(dot(vec3(_398, _401, _404), vec3(_398, _401, _404)));
    float _409 = _408 * _398;
    float _410 = _408 * _401;
    float _411 = _408 * _404;
    float _3315 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _412 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
    float _3326 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _3337 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3348 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _3359 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _430 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _472 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _482 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _472);
    float _483 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _472);
    float _484 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _472);
    float _488 = inversesqrt(dot(vec3(_482, _483, _484), vec3(_482, _483, _484)));
    float _489 = _482 * _488;
    float _490 = _483 * _488;
    float _491 = _484 * _488;
    float _497 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _498 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _519 = fma(_411, cbSceneParam._m0[5u].z, fma(_410, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _409));
    float _522 = fma(_411, cbSceneParam._m0[6u].z, fma(_410, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _409));
    float _525 = fma(_411, cbSceneParam._m0[7u].z, fma(_410, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _409));
    uint _539 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _545 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0)))) * cbInstanceData._m0[_539].x;
    float _546 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0)))) * cbInstanceData._m0[_539].y;
    float _547 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0)))) * cbInstanceData._m0[_539].z;
    float _3370 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _548 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
    float _3381 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _549 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
    float _3392 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _550 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
    vec4 _559 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _497, cbSceneParam._m0[86u].y * _498));
    float _563 = ((isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0))) * TEXCOORD_5.w) * _559.x;
    float _564 = dot(vec3(_409, _410, _411), vec3(_489, _490, _491));
    float _567 = _564 * 2.0;
    float _571 = (_567 * _409) - _489;
    float _572 = (_567 * _410) - _490;
    float _573 = (_567 * _411) - _491;
    float _577 = abs(dot(vec3(_489, _490, _491), vec3(_409, _410, _411)));
    float _3403 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _579 = sqrt(_412);
    float _592 = exp2((_579 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_579 * 3.0));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _628 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _632 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _934;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _659 = fma(_632, cbModelParam._m0[26u].z, fma(_628, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _624));
        float _663 = fma(_632, cbModelParam._m0[27u].z, fma(_628, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _624));
        float _667 = fma(_632, cbModelParam._m0[28u].z, fma(_628, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _624));
        float _692 = _624 + _409;
        float _693 = _628 + _410;
        float _694 = _632 + _411;
        float _704 = fma(_694, cbModelParam._m0[26u].z, fma(_693, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _692)) - _659;
        float _705 = fma(_694, cbModelParam._m0[27u].z, fma(_693, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _692)) - _663;
        float _706 = fma(_694, cbModelParam._m0[28u].z, fma(_693, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _692)) - _667;
        float _710 = inversesqrt(dot(vec3(_704, _705, _706), vec3(_704, _705, _706)));
        float _723 = ((_710 * _704) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_659 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _724 = ((_710 * _705) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_663 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _725 = ((_710 * _706) / cbModelParam._m0[34u].z) + ((((((_667 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_723, _724, _725), 0.0);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_723, _724, _725), 0.0);
        vec4 _742 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_723, _724, _725), 0.0);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_723, _724, _725), 0.0);
        float _762 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _763 = _762 * (_728.x + (-0.5));
        float _764 = _762 * (_728.y + (-0.5));
        float _765 = _762 * (_728.z + (-0.5));
        float _772 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _773 = _772 * (_735.x + (-0.5));
        float _774 = _772 * (_735.y + (-0.5));
        float _775 = _772 * (_735.z + (-0.5));
        float _782 = exp2((_742.w + (-0.5)) * 20.0) * 2.0;
        float _783 = _782 * (_742.x + (-0.5));
        float _784 = _782 * (_742.y + (-0.5));
        float _785 = _782 * (_742.z + (-0.5));
        float _792 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _793 = _792 * (_749.x + (-0.5));
        float _794 = _792 * (_749.y + (-0.5));
        float _795 = _792 * (_749.z + (-0.5));
        float _796 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _797 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _798 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _799 = _763 * 0.5;
        float _800 = _773 * 0.5;
        float _801 = _783 * 0.5;
        float _802 = dot(vec3(_799, _800, _801), vec3(_799, _800, _801));
        float _807 = (_802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_802);
        float _816 = (dot(vec3(_409, _410, _411), vec3(_807 * _799, _807 * _800, _807 * _801)) + 1.0) * 0.5;
        float _3429 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _826 = sqrt(((_800 * _800) + (_799 * _799)) + (_801 * _801)) / (_796 + 9.9999997473787516355514526367188e-06);
        float _3440 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _828 = _827 * 2.0;
        float _832 = (1.0 - _827) / (_827 + 1.0);
        float _3451 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _842 = ((((1.0 - _833) * (_828 + 2.0)) * exp2(log2(isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))) * (_828 + 1.0))) + _833) * _796;
        float _843 = _764 * 0.5;
        float _844 = _774 * 0.5;
        float _845 = _784 * 0.5;
        float _846 = dot(vec3(_843, _844, _845), vec3(_843, _844, _845));
        float _851 = (_846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_846);
        float _859 = (dot(vec3(_409, _410, _411), vec3(_851 * _843, _851 * _844, _851 * _845)) + 1.0) * 0.5;
        float _3462 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _868 = sqrt(((_844 * _844) + (_843 * _843)) + (_845 * _845)) / (_797 + 9.9999997473787516355514526367188e-06);
        float _3473 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _870 = _869 * 2.0;
        float _874 = (1.0 - _869) / (_869 + 1.0);
        float _3484 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _884 = ((((1.0 - _875) * (_870 + 2.0)) * exp2(log2(isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * (_870 + 1.0))) + _875) * _797;
        float _885 = _765 * 0.5;
        float _886 = _775 * 0.5;
        float _887 = _785 * 0.5;
        float _888 = dot(vec3(_885, _886, _887), vec3(_885, _886, _887));
        float _893 = (_888 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_888);
        float _901 = (dot(vec3(_409, _410, _411), vec3(_893 * _885, _893 * _886, _893 * _887)) + 1.0) * 0.5;
        float _3495 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _910 = sqrt(((_886 * _886) + (_885 * _885)) + (_887 * _887)) / (_798 + 9.9999997473787516355514526367188e-06);
        float _3506 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _912 = _911 * 2.0;
        float _916 = (1.0 - _911) / (_911 + 1.0);
        float _3517 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _926 = ((((1.0 - _917) * (_912 + 2.0)) * exp2(log2(isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * (_912 + 1.0))) + _917) * _798;
        _934 = _765;
        _936 = _764;
        _937 = _763;
        _938 = _775;
        _939 = _774;
        _940 = _773;
        _941 = _785;
        _942 = _784;
        _943 = _783;
        _944 = _798;
        _945 = _797;
        _946 = _796;
        _947 = cbModelParam._m0[36u].z * (isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0)));
        _948 = cbModelParam._m0[36u].z * (isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)));
        _949 = cbModelParam._m0[36u].z * (isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0)));
    }
    else
    {
        _934 = _935;
        _936 = _935;
        _937 = _935;
        _938 = _935;
        _939 = _935;
        _940 = _935;
        _941 = _935;
        _942 = _935;
        _943 = _935;
        _944 = _935;
        _945 = _935;
        _946 = _935;
        _947 = 0.0;
        _948 = 0.0;
        _949 = 0.0;
    }
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _974 = fma(_632, cbModelParam._m0[30u].z, fma(_628, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _624));
        float _978 = fma(_632, cbModelParam._m0[31u].z, fma(_628, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _624));
        float _982 = fma(_632, cbModelParam._m0[32u].z, fma(_628, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _624));
        float _1005 = _624 + _409;
        float _1006 = _628 + _410;
        float _1007 = _632 + _411;
        float _1017 = fma(_1007, cbModelParam._m0[30u].z, fma(_1006, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1005)) - _974;
        float _1018 = fma(_1007, cbModelParam._m0[31u].z, fma(_1006, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1005)) - _978;
        float _1019 = fma(_1007, cbModelParam._m0[32u].z, fma(_1006, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1005)) - _982;
        float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
        float _1036 = ((_1023 * _1017) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_974 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1023 * _1018) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_978 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1023 * _1019) / cbModelParam._m0[35u].z) + ((((((_982 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        float _1073 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1040.x + (-0.5));
        float _1075 = _1073 * (_1040.y + (-0.5));
        float _1076 = _1073 * (_1040.z + (-0.5));
        float _1083 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1047.x + (-0.5));
        float _1085 = _1083 * (_1047.y + (-0.5));
        float _1086 = _1083 * (_1047.z + (-0.5));
        float _1093 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1054.x + (-0.5));
        float _1095 = _1093 * (_1054.y + (-0.5));
        float _1096 = _1093 * (_1054.z + (-0.5));
        float _1103 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1061.x + (-0.5));
        float _1105 = _1103 * (_1061.y + (-0.5));
        float _1106 = _1103 * (_1061.z + (-0.5));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = _1074 * 0.5;
        float _1111 = _1084 * 0.5;
        float _1112 = _1094 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_409, _410, _411), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3580 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_1137 + 1.0))) + _1142) * _1107;
        float _1152 = _1075 * 0.5;
        float _1153 = _1085 * 0.5;
        float _1154 = _1095 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_409, _410, _411), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3613 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_1179 + 1.0))) + _1184) * _1108;
        float _1194 = _1076 * 0.5;
        float _1195 = _1086 * 0.5;
        float _1196 = _1096 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_409, _410, _411), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3646 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_1221 + 1.0))) + _1226) * _1109;
        _1243 = _1076;
        _1244 = _1075;
        _1245 = _1074;
        _1246 = _1086;
        _1247 = _1085;
        _1248 = _1084;
        _1249 = _1096;
        _1250 = _1095;
        _1251 = _1094;
        _1252 = _1109;
        _1253 = _1108;
        _1254 = _1107;
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1256 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
    }
    else
    {
        _1243 = _935;
        _1244 = _935;
        _1245 = _935;
        _1246 = _935;
        _1247 = _935;
        _1248 = _935;
        _1249 = _935;
        _1250 = _935;
        _1251 = _935;
        _1252 = _935;
        _1253 = _935;
        _1254 = _935;
        _1255 = 0.0;
        _1256 = 0.0;
        _1257 = 0.0;
    }
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _947)) + _947;
    float _1268 = (cbModelParam._m0[1u].x * (_1256 - _948)) + _948;
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _949)) + _949;
    float _1290 = fma(_1269, cbSceneParam._m0[89u].z, fma(_1268, cbSceneParam._m0[89u].y, _1267 * cbSceneParam._m0[89u].x));
    float _1293 = fma(_1269, cbSceneParam._m0[90u].z, fma(_1268, cbSceneParam._m0[90u].y, _1267 * cbSceneParam._m0[90u].x));
    float _1296 = fma(_1269, cbSceneParam._m0[91u].z, fma(_1268, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1267));
    float _1311 = _571 * 0.5;
    float _1312 = _572 * 0.5;
    float _1313 = _573 * 0.5;
    float _1314 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1317 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1244, _1247, _1250, _1253));
    float _1320 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1354;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1327 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_934, _938, _941, _944));
        float _1331 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_936, _939, _942, _945));
        float _1335 = dot(vec4(_1311, _1312, _1313, 1.0), vec4(_937, _940, _943, _946));
        float _1342 = dot(vec4(cbModelParam._m0[39u]), vec4(_1311, _1312, _1313, 1.0));
        _1354 = dot(vec3(isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)), isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1342) ? 0.0 : (isnan(0.0) ? _1342 : max(0.0, _1342))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1354 = 1.0;
    }
    float _1365;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1356 = dot(vec4(cbModelParam._m0[40u]), vec4(_1311, _1312, _1313, 1.0));
        _1365 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)), isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1356) ? 0.0 : (isnan(0.0) ? _1356 : max(0.0, _1356))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1365 = 1.0;
    }
    float _1369 = (_1365 * cbModelParam._m0[1u].x) + (_1354 * (1.0 - cbModelParam._m0[1u].x));
    float _1379 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _412);
    float _1380 = isnan(_1379) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1379 : min(cbModelParam._m0[25u].z, _1379));
    float _1462;
    float _1464;
    float _1466;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1429 = fma(_632, cbModelParam._m0[13u].z, fma(_628, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _624)) + cbModelParam._m0[13u].w;
        float _1433 = fma(_632, cbModelParam._m0[14u].z, fma(_628, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _624)) + cbModelParam._m0[14u].w;
        float _1437 = fma(_632, cbModelParam._m0[15u].z, fma(_628, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _624)) + cbModelParam._m0[15u].w;
        float _1440 = fma(_573, cbModelParam._m0[13u].z, fma(_572, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _571));
        float _1443 = fma(_573, cbModelParam._m0[14u].z, fma(_572, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _571));
        float _1446 = fma(_573, cbModelParam._m0[15u].z, fma(_572, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _571));
        float _1474;
        if (_1440 > 0.0)
        {
            _1474 = abs((1.0 - _1429) / _1440);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1429 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1474 = frontier_phi_14_12_ladder;
        }
        float _1700;
        if (_1443 > 0.0)
        {
            _1700 = abs((1.0 - _1433) / _1443);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1433 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1700 = frontier_phi_23_19_ladder;
        }
        float _1946;
        if (_1446 > 0.0)
        {
            _1946 = abs((1.0 - _1437) / _1446);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1437 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1946 = frontier_phi_35_30_ladder;
        }
        float _1948 = isnan(_1700) ? _1474 : (isnan(_1474) ? _1700 : min(_1474, _1700));
        float _1949 = isnan(_1946) ? _1948 : (isnan(_1948) ? _1946 : min(_1948, _1946));
        float _1953 = (_1949 * _1440) + _1429;
        float _1954 = (_1949 * _1443) + _1433;
        float _1955 = (_1949 * _1446) + _1437;
        float _1956 = _1949 * 9.9999997473787516355514526367188e-05;
        float _1958 = (-1.0) - _1956;
        float _1960 = _1956 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1955 > _1960) || ((_1955 < _1958) || ((_1954 > _1960) || ((_1954 < _1958) || ((_1953 < _1958) || (_1953 > _1960))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2079 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1955, cbModelParam._m0[9u].z, fma(_1954, cbModelParam._m0[9u].y, _1953 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1955, cbModelParam._m0[10u].z, fma(_1954, cbModelParam._m0[10u].y, _1953 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1955, cbModelParam._m0[11u].z, fma(_1954, cbModelParam._m0[11u].y, _1953 * cbModelParam._m0[11u].x))), _1380);
            frontier_phi_13_35_ladder = _2079.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2079.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2079.x * cbModelParam._m0[1u].y;
        }
        _1462 = frontier_phi_13_35_ladder_2;
        _1464 = frontier_phi_13_35_ladder_1;
        _1466 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1450 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_571, _572, _573), _1380);
        _1462 = _1450.x * cbModelParam._m0[1u].y;
        _1464 = _1450.y * cbModelParam._m0[1u].y;
        _1466 = _1450.z * cbModelParam._m0[1u].y;
    }
    float _1470 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _412);
    float _1471 = isnan(_1470) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1470 : min(cbModelParam._m0[25u].w, _1470));
    float _1563;
    float _1565;
    float _1567;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1527 = fma(_632, cbModelParam._m0[21u].z, fma(_628, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _624)) + cbModelParam._m0[21u].w;
        float _1531 = fma(_632, cbModelParam._m0[22u].z, fma(_628, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _624)) + cbModelParam._m0[22u].w;
        float _1535 = fma(_632, cbModelParam._m0[23u].z, fma(_628, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _624)) + cbModelParam._m0[23u].w;
        float _1538 = fma(_573, cbModelParam._m0[21u].z, fma(_572, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _571));
        float _1541 = fma(_573, cbModelParam._m0[22u].z, fma(_572, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _571));
        float _1544 = fma(_573, cbModelParam._m0[23u].z, fma(_572, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _571));
        float _1705;
        if (_1538 > 0.0)
        {
            _1705 = abs((1.0 - _1527) / _1538);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1527 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1705 = frontier_phi_25_21_ladder;
        }
        float _1973;
        if (_1541 > 0.0)
        {
            _1973 = abs((1.0 - _1531) / _1541);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1531 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1973 = frontier_phi_37_32_ladder;
        }
        float _2178;
        if (_1544 > 0.0)
        {
            _2178 = abs((1.0 - _1535) / _1544);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1535 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2178 = frontier_phi_46_43_ladder;
        }
        float _2180 = isnan(_1973) ? _1705 : (isnan(_1705) ? _1973 : min(_1705, _1973));
        float _2181 = isnan(_2178) ? _2180 : (isnan(_2180) ? _2178 : min(_2180, _2178));
        float _2185 = (_2181 * _1538) + _1527;
        float _2186 = (_2181 * _1541) + _1531;
        float _2187 = (_2181 * _1544) + _1535;
        float _2188 = _2181 * 9.9999997473787516355514526367188e-05;
        float _2189 = (-1.0) - _2188;
        float _2191 = _2188 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2187 > _2191) || ((_2187 < _2189) || ((_2186 > _2191) || ((_2186 < _2189) || ((_2185 < _2189) || (_2185 > _2191))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2386 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2187, cbModelParam._m0[17u].z, fma(_2186, cbModelParam._m0[17u].y, _2185 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2187, cbModelParam._m0[18u].z, fma(_2186, cbModelParam._m0[18u].y, _2185 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2187, cbModelParam._m0[19u].z, fma(_2186, cbModelParam._m0[19u].y, _2185 * cbModelParam._m0[19u].x))), _1471);
            frontier_phi_22_46_ladder = _2386.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2386.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2386.x * cbModelParam._m0[1u].z;
        }
        _1563 = frontier_phi_22_46_ladder_2;
        _1565 = frontier_phi_22_46_ladder_1;
        _1567 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1547 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_571, _572, _573), _1471);
        _1563 = _1547.x * cbModelParam._m0[1u].z;
        _1565 = _1547.y * cbModelParam._m0[1u].z;
        _1567 = _1547.z * cbModelParam._m0[1u].z;
    }
    float _1579 = ((((1.0 - _592) * ((_579 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_592 * _579)) * _563;
    float _1580 = _1579 * ((cbModelParam._m0[1u].w * (_1563 - _1462)) + _1462);
    float _1581 = _1579 * ((cbModelParam._m0[1u].w * (_1565 - _1464)) + _1464);
    float _1582 = _1579 * ((cbModelParam._m0[1u].w * (_1567 - _1466)) + _1466);
    float _1585 = fma(_1582, cbSceneParam._m0[89u].z, fma(_1581, cbSceneParam._m0[89u].y, _1580 * cbSceneParam._m0[89u].x));
    float _1588 = fma(_1582, cbSceneParam._m0[90u].z, fma(_1581, cbSceneParam._m0[90u].y, _1580 * cbSceneParam._m0[90u].x));
    float _1591 = fma(_1582, cbSceneParam._m0[91u].z, fma(_1581, cbSceneParam._m0[91u].y, _1580 * cbSceneParam._m0[91u].x));
    vec4 _1599 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_497, _498));
    float _1601 = _1599.w;
    float _1613 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1601);
    float _1614 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1601);
    float _1615 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1601);
    uvec4 _1619 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _1621 = _1619.x * 14u;
    uint _1622 = _1621 + 13u;
    float _1629 = _563 + (-1.0);
    float _1634 = (cbLight._m0[_1622].x * _1629) + 1.0;
    float _1635 = (cbLight._m0[_1622].y * _1629) + 1.0;
    float _1636 = (cbLight._m0[_1622].z * _1629) + 1.0;
    float _1637 = (cbLight._m0[_1622].w * _1629) + 1.0;
    uint _1638 = _1621 + 5u;
    float _1644 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
    uint _1648 = _1621 + 4u;
    float _1658 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
    uint _1662 = _1621 | 1u;
    float _1673 = dot(vec3(cbLight._m0[_1621].xyz), vec3(_409, _410, _411));
    float _1676 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_409, _410, _411));
    float _3782 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
    float _3793 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1681 = (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * 0.3183098733425140380859375;
    float _1683 = (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * 0.3183098733425140380859375;
    float _1690 = ((cbLight._m0[_1638].x * _1644) * _1683) + (((cbLight._m0[_1648].x * _1613) * _1658) * _1681);
    float _1691 = ((_1644 * cbLight._m0[_1638].y) * _1683) + (((cbLight._m0[_1648].y * _1614) * _1658) * _1681);
    float _1692 = ((_1644 * cbLight._m0[_1638].z) * _1683) + (((cbLight._m0[_1648].z * _1615) * _1658) * _1681);
    uvec4 _1697 = floatBitsToUint(cbLight._m0[_1621 + 12u]);
    bool _1699 = _1697.x == 0u;
    float _1710;
    float _1712;
    float _1714;
    if (_1699)
    {
        _1710 = _1690;
        _1712 = _1691;
        _1714 = _1692;
    }
    else
    {
        uint _1718 = _1621 + 6u;
        float _1734 = (dot(vec3(cbLight._m0[_1621 + 2u].xyz), vec3(_409, _410, _411)) * 0.5) + 0.5;
        float _1735 = _1734 * _1734;
        float _3804 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1737 = isnan(1.0) ? _1636 : (isnan(_1636) ? 1.0 : min(_1636, 1.0));
        _1710 = (((cbLight._m0[_1718].x * 0.3183098733425140380859375) * _1736) * _1737) + _1690;
        _1712 = (((cbLight._m0[_1718].y * 0.3183098733425140380859375) * _1736) * _1737) + _1691;
        _1714 = (((cbLight._m0[_1718].z * 0.3183098733425140380859375) * _1736) * _1737) + _1692;
    }
    bool _1717 = _1697.y == 0u;
    float _1755;
    float _1757;
    float _1759;
    if (_1717)
    {
        _1755 = _1710;
        _1757 = _1712;
        _1759 = _1714;
    }
    else
    {
        uint _1917 = _1621 + 7u;
        float _1933 = (dot(vec3(cbLight._m0[_1621 + 3u].xyz), vec3(_409, _410, _411)) * 0.5) + 0.5;
        float _1934 = _1933 * _1933;
        float _3820 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1935 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1936 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
        _1755 = (((cbLight._m0[_1917].x * 0.3183098733425140380859375) * _1935) * _1936) + _1710;
        _1757 = (((cbLight._m0[_1917].y * 0.3183098733425140380859375) * _1935) * _1936) + _1712;
        _1759 = (((cbLight._m0[_1917].z * 0.3183098733425140380859375) * _1935) * _1936) + _1714;
    }
    uint _1762 = _1621 + 8u;
    float _1775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1621].w)) * _412) * 0.949999988079071044921875);
    float _1776 = _1775 * _1775;
    float _1777 = cbLight._m0[_1621].x + _489;
    float _1778 = cbLight._m0[_1621].y + _490;
    float _1779 = cbLight._m0[_1621].z + _491;
    float _1783 = inversesqrt(dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779)));
    float _1784 = _1783 * _1777;
    float _1785 = _1783 * _1778;
    float _1786 = _1783 * _1779;
    float _1787 = dot(vec3(_409, _410, _411), vec3(cbLight._m0[_1621].xyz));
    float _3836 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _3847 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _1791 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _1792 = dot(vec3(_409, _410, _411), vec3(_1784, _1785, _1786));
    float _3858 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _1796 = dot(vec3(cbLight._m0[_1621].xyz), vec3(_1784, _1785, _1786));
    float _3869 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1800 = _1776 * _1776;
    float _1804 = ((_1795 * _1795) * (_1800 + (-1.0))) + 1.0;
    float _1815 = (exp2(log2(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1816 = 1.0 - _1776;
    float _1827 = (0.5 / (((_1791 * ((_1790 * _1816) + _1776)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _1816) + _1776) * _1790))) * _1790;
    float _3880 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1829 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1800 / ((_1804 * _1804) * 3.141590118408203125));
    uint _1843 = _1621 + 9u;
    float _1854 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1662].w)) * _412) * 0.949999988079071044921875);
    float _1855 = _1854 * _1854;
    float _1856 = cbLight._m0[_1662].x + _489;
    float _1857 = cbLight._m0[_1662].y + _490;
    float _1858 = cbLight._m0[_1662].z + _491;
    float _1862 = inversesqrt(dot(vec3(_1856, _1857, _1858), vec3(_1856, _1857, _1858)));
    float _1863 = _1862 * _1856;
    float _1864 = _1862 * _1857;
    float _1865 = _1862 * _1858;
    float _1866 = dot(vec3(_409, _410, _411), vec3(cbLight._m0[_1662].xyz));
    float _3891 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1869 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _1870 = dot(vec3(_409, _410, _411), vec3(_1863, _1864, _1865));
    float _3902 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1873 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _1874 = dot(vec3(cbLight._m0[_1662].xyz), vec3(_1863, _1864, _1865));
    float _3913 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1878 = _1855 * _1855;
    float _1882 = ((_1873 * _1873) * (_1878 + (-1.0))) + 1.0;
    float _1891 = (exp2(log2(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1892 = 1.0 - _1855;
    float _1902 = (0.5 / (((_1791 * ((_1869 * _1892) + _1855)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _1892) + _1855) * _1869))) * _1869;
    float _3924 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1904 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1878 / ((_1882 * _1882) * 3.141590118408203125));
    float _1914 = (((_1891 * cbLight._m0[_1843].x) * _1904) * _1644) + ((((cbLight._m0[_1762].x * _1613) * _1815) * _1829) * _1658);
    float _1915 = (((_1891 * cbLight._m0[_1843].y) * _1904) * _1644) + ((((cbLight._m0[_1762].y * _1614) * _1815) * _1829) * _1658);
    float _1916 = (((_1891 * cbLight._m0[_1843].z) * _1904) * _1644) + ((((cbLight._m0[_1762].z * _1615) * _1815) * _1829) * _1658);
    float _1978;
    float _1980;
    float _1982;
    if (_1699)
    {
        _1978 = _1914;
        _1980 = _1915;
        _1982 = _1916;
    }
    else
    {
        uint _1984 = _1621 + 2u;
        uint _1988 = _1621 + 10u;
        float _2002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1984].w)) * _412) * 0.949999988079071044921875);
        float _2003 = _2002 * _2002;
        float _2004 = cbLight._m0[_1984].x + _489;
        float _2005 = cbLight._m0[_1984].y + _490;
        float _2006 = cbLight._m0[_1984].z + _491;
        float _2010 = inversesqrt(dot(vec3(_2004, _2005, _2006), vec3(_2004, _2005, _2006)));
        float _2011 = _2010 * _2004;
        float _2012 = _2010 * _2005;
        float _2013 = _2010 * _2006;
        float _2014 = dot(vec3(_409, _410, _411), vec3(cbLight._m0[_1984].xyz));
        float _3935 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2017 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _2018 = dot(vec3(_409, _410, _411), vec3(_2011, _2012, _2013));
        float _3946 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2021 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _2022 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_2011, _2012, _2013));
        float _3957 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2026 = _2003 * _2003;
        float _2030 = ((_2021 * _2021) * (_2026 + (-1.0))) + 1.0;
        float _2039 = (exp2(log2(1.0 - (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2040 = 1.0 - _2003;
        float _2050 = (0.5 / (((_1791 * ((_2017 * _2040) + _2003)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _2040) + _2003) * _2017))) * _2017;
        float _3968 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2052 = (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_2026 / ((_2030 * _2030) * 3.141590118408203125));
        float _2053 = isnan(1.0) ? _1636 : (isnan(_1636) ? 1.0 : min(_1636, 1.0));
        _1978 = (((_2039 * cbLight._m0[_1988].x) * _2052) * _2053) + _1914;
        _1980 = (((_2039 * cbLight._m0[_1988].y) * _2052) * _2053) + _1915;
        _1982 = (((_2039 * cbLight._m0[_1988].z) * _2052) * _2053) + _1916;
    }
    float _2088;
    float _2090;
    float _2092;
    if (_1717)
    {
        _2088 = _1978;
        _2090 = _1980;
        _2092 = _1982;
    }
    else
    {
        uint _2099 = _1621 + 3u;
        uint _2103 = _1621 + 11u;
        float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _412) * 0.949999988079071044921875);
        float _2118 = _2117 * _2117;
        float _2119 = cbLight._m0[_2099].x + _489;
        float _2120 = cbLight._m0[_2099].y + _490;
        float _2121 = cbLight._m0[_2099].z + _491;
        float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
        float _2126 = _2125 * _2119;
        float _2127 = _2125 * _2120;
        float _2128 = _2125 * _2121;
        float _2129 = dot(vec3(_409, _410, _411), vec3(cbLight._m0[_2099].xyz));
        float _3984 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _2133 = dot(vec3(_409, _410, _411), vec3(_2126, _2127, _2128));
        float _3995 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _2137 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2126, _2127, _2128));
        float _4006 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2141 = _2118 * _2118;
        float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
        float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2155 = 1.0 - _2118;
        float _2165 = (0.5 / (((_1791 * ((_2132 * _2155) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_1791 * _2155) + _2118) * _2132))) * _2132;
        float _4017 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2167 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
        float _2168 = isnan(1.0) ? _1637 : (isnan(_1637) ? 1.0 : min(_1637, 1.0));
        _2088 = (((_2154 * cbLight._m0[_2103].x) * _2167) * _2168) + _1978;
        _2090 = (((_2154 * cbLight._m0[_2103].y) * _2167) * _2168) + _1980;
        _2092 = (((_2154 * cbLight._m0[_2103].z) * _2167) * _2168) + _1982;
    }
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    if (_1619.y == 0u)
    {
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2243;
        float _2245 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2243;
        float _2246 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2243;
        uvec4 _2258 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2259 = _2258.x;
        uint _2270 = uint((float(_2258.y) * floor(float(uint(cbSceneParam._m0[85u].y * _498) / _2259))) + floor(float(uint(cbSceneParam._m0[85u].x * _497) / _2259)));
        float _2280 = (log2(_2246 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2281 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        uint _2284 = uint(isnan(14.0) ? _2281 : (isnan(_2281) ? 14.0 : min(_2281, 14.0)));
        uvec4 _2289 = texelFetch(g_lightClusterGridBuffer, int(((_2284 << 2u) + (_2270 << 6u)) >> 2u));
        uint _2290 = _2289.x;
        uint _2291 = _2258.z;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        float _2399;
        float _2401;
        if (((((1u << ((_2291 >> 4u) & 15u)) + 4294967295u) & _2290) == 0u) || ((_2291 & 240u) == 0u))
        {
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
            _2399 = 0.0;
            _2401 = 0.0;
        }
        else
        {
            float _2392;
            float _2394;
            float _2396;
            float _2398;
            float _2400;
            float _2402;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            uint _2542 = 0u;
            uint _2551;
            bool _2552;
            for (;;)
            {
                _2551 = texelFetch(g_lightClassification, int((((_2284 << 5u) + (_2270 << 9u)) + (_2542 << 2u)) >> 2u)).x;
                _2552 = _2551 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2552)
                {
                    frontier_phi_61_pred = _2536;
                    frontier_phi_61_pred_1 = _2541;
                    frontier_phi_61_pred_2 = _2540;
                    frontier_phi_61_pred_3 = _2539;
                    frontier_phi_61_pred_4 = _2538;
                    frontier_phi_61_pred_5 = _2537;
                }
                else
                {
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    uint _2666;
                    _2660 = _2536;
                    _2661 = _2537;
                    _2662 = _2538;
                    _2663 = _2539;
                    _2664 = _2540;
                    _2665 = _2541;
                    _2666 = _2551;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    for (;;)
                    {
                        uint _2670 = uint(findLSB(_2666)) + (_2542 << 5u);
                        uint _2667 = (_2666 + 4294967295u) & _2666;
                        uint _2672 = _2670 * 48u;
                        vec4 _2686 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2672)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 3u)).x));
                        uint _2692 = (_2670 * 48u) + 4u;
                        vec4 _2705 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2692)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 3u)).x));
                        uint _2711 = (_2670 * 48u) + 8u;
                        vec3 _2722 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2711)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2711 + 2u)).x));
                        float _2726 = _2686.x - _2244;
                        float _2727 = _2686.y - _2245;
                        float _2728 = _2686.z - _2246;
                        float _2729 = dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728));
                        float _2732 = inversesqrt(_2729);
                        float _2733 = _2732 * _2726;
                        float _2734 = _2732 * _2727;
                        float _2735 = _2732 * _2728;
                        float _2736 = dot(vec3(_519, _522, _525), vec3(_2733, _2734, _2735));
                        float _2741 = 1.0 - (_2729 * _2686.w);
                        float _4043 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
                        float _2742 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
                        float _2743 = sqrt(_2729) * _2705.w;
                        float _2746 = 1.39999997615814208984375 / (_2743 + 1.39999997615814208984375);
                        float _2747 = _2746 * _2746;
                        float _2750 = ((1.0 - _2747) * _2736) + _2747;
                        float _2753 = _2743 * _2743;
                        float _2757 = ((isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0))) * _2742) / ((_2753 * 0.699999988079071044921875) + 1.0);
                        float _2761 = (-0.0) - _2244;
                        float _2762 = (-0.0) - _2245;
                        float _2763 = (-0.0) - _2246;
                        float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
                        float _2768 = _2767 * _2761;
                        float _2769 = _2767 * _2762;
                        float _2770 = _2767 * _2763;
                        float _2778 = exp2(log2(1.0 / ((_2753 * 3.5) + 5.0)) * 0.25);
                        float _2779 = 1.0 - _579;
                        float _2786 = sqrt(1.0 - ((1.0 - (_2779 * _2779)) * (1.0 - (_2778 * _2778))));
                        float _2787 = _2786 * _2786;
                        float _2788 = _2787 * _2787;
                        float _2789 = _2768 + _2733;
                        float _2790 = _2769 + _2734;
                        float _2791 = _2770 + _2735;
                        float _2795 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
                        float _2799 = dot(vec3(_519, _522, _525), vec3(_2768, _2769, _2770));
                        float _4059 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2802 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                        float _2803 = dot(vec3(_519, _522, _525), vec3(_2795 * _2789, _2795 * _2790, _2795 * _2791));
                        float _4070 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2806 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                        float _2810 = ((_2806 * _2806) * (_2788 + (-1.0))) + 1.0;
                        float _2811 = _2746 * _2787;
                        float _2812 = _2811 * _2811;
                        float _2815 = ((1.0 - _2812) * _2736) + _2812;
                        float _4081 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                        float _2816 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2817 = 1.0 - _2787;
                        float _2827 = (0.5 / (((_2816 * ((_2802 * _2817) + _2787)) + 9.9999999392252902907785028219223e-09) + (((_2816 * _2817) + _2787) * _2802))) * _2816;
                        float _4092 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2838 = (((_2788 * 3.1415927410125732421875) * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) / ((_2810 * _2810) * ((_2753 * 2.1991131305694580078125) + 3.141590118408203125))) * _2742;
                        _2595 = (_2757 * _2705.x) + _2663;
                        _2596 = (_2757 * _2705.y) + _2664;
                        _2597 = (_2757 * _2705.z) + _2665;
                        _2592 = (_2838 * _2722.x) + _2660;
                        _2593 = (_2838 * _2722.y) + _2661;
                        _2594 = (_2838 * _2722.z) + _2662;
                        if (_2667 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2660 = _2592;
                            _2661 = _2593;
                            _2662 = _2594;
                            _2663 = _2595;
                            _2664 = _2596;
                            _2665 = _2597;
                            _2666 = _2667;
                        }
                    }
                    frontier_phi_61_pred = _2592;
                    frontier_phi_61_pred_1 = _2597;
                    frontier_phi_61_pred_2 = _2596;
                    frontier_phi_61_pred_3 = _2595;
                    frontier_phi_61_pred_4 = _2594;
                    frontier_phi_61_pred_5 = _2593;
                }
                _2392 = frontier_phi_61_pred;
                _2402 = frontier_phi_61_pred_1;
                _2400 = frontier_phi_61_pred_2;
                _2398 = frontier_phi_61_pred_3;
                _2396 = frontier_phi_61_pred_4;
                _2394 = frontier_phi_61_pred_5;
                uint _2543 = _2542 + 1u;
                if (_2543 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2536 = _2392;
                    _2537 = _2394;
                    _2538 = _2396;
                    _2539 = _2398;
                    _2540 = _2400;
                    _2541 = _2402;
                    _2542 = _2543;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
            _2399 = _2400;
            _2401 = _2402;
        }
        uvec4 _2405 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2406 = _2405.z;
        uint _2408 = (_2406 >> 8u) & 15u;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        if (((4294967295u << _2408) & _2290) == 0u)
        {
            _2504 = _2391;
            _2506 = _2393;
            _2508 = _2395;
            _2510 = _2397;
            _2512 = _2399;
            _2514 = _2401;
        }
        else
        {
            float _2529 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
            float _2530 = _2529 * _2244;
            float _2531 = _2529 * _2245;
            float _2532 = _2529 * _2246;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2408 < ((_2406 >> 12u) & 15u))
            {
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2513;
                float _2515;
                float _2643 = _2391;
                float _2644 = _2393;
                float _2645 = _2395;
                float _2646 = _2397;
                float _2647 = _2399;
                float _2648 = _2401;
                uint _2649 = _2408;
                uint _2658;
                bool _2659;
                for (;;)
                {
                    _2658 = texelFetch(g_lightClassification, int((((_2284 << 5u) + (_2270 << 9u)) + (_2649 << 2u)) >> 2u)).x;
                    _2659 = _2658 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2659)
                    {
                        frontier_phi_67_pred = _2646;
                        frontier_phi_67_pred_1 = _2647;
                        frontier_phi_67_pred_2 = _2648;
                        frontier_phi_67_pred_3 = _2645;
                        frontier_phi_67_pred_4 = _2644;
                        frontier_phi_67_pred_5 = _2643;
                    }
                    else
                    {
                        float _2843;
                        float _2844;
                        float _2845;
                        float _2846;
                        float _2847;
                        float _2848;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _2856 = _2643;
                        float _2857 = _2644;
                        float _2858 = _2645;
                        float _2859 = _2646;
                        float _2860 = _2647;
                        float _2861 = _2648;
                        uint _2862 = _2658;
                        uint _2863;
                        vec4 _2888;
                        float _2889;
                        vec4 _2904;
                        vec3 _2916;
                        vec4 _2931;
                        vec4 _2946;
                        float _2993;
                        bool _2994;
                        for (;;)
                        {
                            uint _2873 = ((_2649 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2862));
                            _2863 = (_2862 + 4294967295u) & _2862;
                            uint _2875 = _2873 * 40u;
                            _2888 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 3u)).x));
                            _2889 = _2888.w;
                            uint _2891 = (_2873 * 40u) + 4u;
                            _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            uint _2906 = (_2873 * 40u) + 8u;
                            _2916 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x));
                            uint _2918 = (_2873 * 40u) + 16u;
                            _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            uint _2933 = (_2873 * 40u) + 20u;
                            _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            uint _2949 = (_2873 * 40u) + 24u;
                            vec4 _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2968 = (_2873 * 40u) + 28u;
                            vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            _2993 = fma(_2246, _2981.z, fma(_2245, _2981.y, _2981.x * _2244)) + _2981.w;
                            _2994 = !((fma(_2246, _2962.z, fma(_2245, _2962.y, _2962.x * _2244)) + _2962.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2994)
                            {
                                float _3021 = _2888.x - _2244;
                                float _3022 = _2888.y - _2245;
                                float _3023 = _2888.z - _2246;
                                float _3024 = dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023));
                                float _3027 = inversesqrt(_3024);
                                float _3028 = _3027 * _3021;
                                float _3029 = _3027 * _3022;
                                float _3030 = _3027 * _3023;
                                float _3034 = 1.0 - (_3024 / (_2889 * _2889));
                                float _4103 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3035 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                                float _3039 = sqrt(_3024) * _2904.w;
                                float _3041 = 1.39999997615814208984375 / (_3039 + 1.39999997615814208984375);
                                float _3042 = _3041 * _3041;
                                float _3045 = ((1.0 - _3042) * dot(vec3(_3028, _3029, _3030), vec3(_519, _522, _525))) + _3042;
                                float _3048 = _3039 * _3039;
                                float _3052 = (fma(_2246, _2931.z, fma(_2245, _2931.y, _2931.x * _2244)) + _2931.w) / _2993;
                                float _3053 = (fma(_2246, _2946.z, fma(_2245, _2946.y, _2946.x * _2244)) + _2946.w) / _2993;
                                float _3057 = 1.0 - dot(vec2(_3052, _3053), vec2(_3052, _3053));
                                float _4119 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3058 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                                float _3059 = _3058 * (((isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0))) * _3035) / ((_3048 * 0.699999988079071044921875) + 1.0));
                                float _3071 = exp2(log2(1.0 / ((_3048 * 3.5) + 5.0)) * 0.25);
                                float _3072 = 1.0 - _579;
                                float _3079 = sqrt(1.0 - ((1.0 - (_3072 * _3072)) * (1.0 - (_3071 * _3071))));
                                float _3080 = _3079 * _3079;
                                float _3081 = _3080 * _3080;
                                float _3082 = _3028 - _2530;
                                float _3083 = _3029 - _2531;
                                float _3084 = _3030 - _2532;
                                float _3088 = inversesqrt(dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084)));
                                float _3092 = dot(vec3(_519, _522, _525), vec3((-0.0) - _2530, (-0.0) - _2531, (-0.0) - _2532));
                                float _4130 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3095 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                                float _3096 = dot(vec3(_519, _522, _525), vec3(_3088 * _3082, _3088 * _3083, _3088 * _3084));
                                float _4141 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3099 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3103 = ((_3099 * _3099) * (_3081 + (-1.0))) + 1.0;
                                float _3104 = _3041 * _3080;
                                float _3105 = _3104 * _3104;
                                float _3111 = ((1.0 - _3105) * dot(vec3(_519, _522, _525), vec3(_3028, _3029, _3030))) + _3105;
                                float _4152 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3113 = 1.0 - _3080;
                                float _3123 = (0.5 / (((_3112 * ((_3095 * _3113) + _3080)) + 9.9999999392252902907785028219223e-09) + (((_3112 * _3113) + _3080) * _3095))) * _3112;
                                float _4163 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3133 = (_3058 * _3035) * (((_3081 * 3.1415927410125732421875) * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) / ((_3103 * _3103) * ((_3048 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3133 * _2916.x;
                                frontier_phi_73_pred_1 = _3133 * _2916.y;
                                frontier_phi_73_pred_2 = _3059 * _2904.z;
                                frontier_phi_73_pred_3 = _3059 * _2904.y;
                                frontier_phi_73_pred_4 = _3059 * _2904.x;
                                frontier_phi_73_pred_5 = _3133 * _2916.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3137 = frontier_phi_73_pred;
                            _3138 = frontier_phi_73_pred_1;
                            _3142 = frontier_phi_73_pred_2;
                            _3141 = frontier_phi_73_pred_3;
                            _3140 = frontier_phi_73_pred_4;
                            _3139 = frontier_phi_73_pred_5;
                            _2846 = _3140 + _2859;
                            _2847 = _3141 + _2860;
                            _2848 = _3142 + _2861;
                            _2843 = _3137 + _2856;
                            _2844 = _3138 + _2857;
                            _2845 = _3139 + _2858;
                            if (_2863 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2856 = _2843;
                                _2857 = _2844;
                                _2858 = _2845;
                                _2859 = _2846;
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2863;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2846;
                        frontier_phi_67_pred_1 = _2847;
                        frontier_phi_67_pred_2 = _2848;
                        frontier_phi_67_pred_3 = _2845;
                        frontier_phi_67_pred_4 = _2844;
                        frontier_phi_67_pred_5 = _2843;
                    }
                    _2511 = frontier_phi_67_pred;
                    _2513 = frontier_phi_67_pred_1;
                    _2515 = frontier_phi_67_pred_2;
                    _2509 = frontier_phi_67_pred_3;
                    _2507 = frontier_phi_67_pred_4;
                    _2505 = frontier_phi_67_pred_5;
                    uint _2650 = _2649 + 1u;
                    if (_2650 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2643 = _2505;
                        _2644 = _2507;
                        _2645 = _2509;
                        _2646 = _2511;
                        _2647 = _2513;
                        _2648 = _2515;
                        _2649 = _2650;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2513;
                frontier_phi_55_56_ladder_1 = _2515;
                frontier_phi_55_56_ladder_2 = _2511;
                frontier_phi_55_56_ladder_3 = _2509;
                frontier_phi_55_56_ladder_4 = _2507;
                frontier_phi_55_56_ladder_5 = _2505;
            }
            else
            {
                frontier_phi_55_56_ladder = _2399;
                frontier_phi_55_56_ladder_1 = _2401;
                frontier_phi_55_56_ladder_2 = _2397;
                frontier_phi_55_56_ladder_3 = _2395;
                frontier_phi_55_56_ladder_4 = _2393;
                frontier_phi_55_56_ladder_5 = _2391;
            }
            _2504 = frontier_phi_55_56_ladder_5;
            _2506 = frontier_phi_55_56_ladder_4;
            _2508 = frontier_phi_55_56_ladder_3;
            _2510 = frontier_phi_55_56_ladder_2;
            _2512 = frontier_phi_55_56_ladder;
            _2514 = frontier_phi_55_56_ladder_1;
        }
        float _2519 = isnan(1.0) ? _563 : (isnan(_563) ? 1.0 : min(_563, 1.0));
        _2303 = (_2519 * _2510) + _1755;
        _2305 = (_2519 * _2512) + _1757;
        _2307 = (_2519 * _2514) + _1759;
        _2309 = ((_2504 * 0.039999999105930328369140625) * _2519) + _2088;
        _2311 = ((_2506 * 0.039999999105930328369140625) * _2519) + _2090;
        _2313 = ((_2508 * 0.039999999105930328369140625) * _2519) + _2092;
    }
    else
    {
        _2303 = _1755;
        _2305 = _1757;
        _2307 = _1759;
        _2309 = _2088;
        _2311 = _2090;
        _2313 = _2092;
    }
    float _4179 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4190 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _4201 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    uint _2333 = _246 + 6u;
    float _2341 = _497 / cbSceneParam._m0[86u].x;
    float _2342 = _498 / cbSceneParam._m0[86u].y;
    vec4 _2356 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2341, _2342, (log2((isnan(cbSceneParam._m0[77u].w) ? _430 : (isnan(_430) ? cbSceneParam._m0[77u].w : min(_430, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2358 = _2356.x;
    float _2359 = _2356.y;
    float _2360 = _2356.z;
    float _2361 = _2356.w;
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    if (_430 > cbSceneParam._m0[78u].w)
    {
        float _2416 = isnan(_430) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _430 : min(cbSceneParam._m0[80u].w, _430));
        float _2417 = _2416 / _430;
        float _2428 = _2417 * _482;
        float _2429 = _483 * _2417;
        float _2430 = (-0.0) - _2429;
        float _2432 = _2417 * _484;
        float _2434 = (cbSceneParam._m0[77u].w * _2430) / _2416;
        float _2435 = _2434 + cbSceneParam._m0[79u].w;
        float _2436 = cbSceneParam._m0[79u].w - _2429;
        float _2442 = sqrt(((_2428 * _2428) + (_2429 * _2429)) + (_2432 * _2432));
        float _2445 = (1.0 - (cbSceneParam._m0[77u].w / _2416)) * _2442;
        float _2450 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2452 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2605;
        if (abs((_2430 - _2434) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2605 = ((((_2435 > 0.0) ? exp2(_2450 * _2435) : (2.0 - exp2(_2452 * _2435))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2445;
        }
        else
        {
            float _2565 = 1.0 / cbSceneParam._m0[80u].x;
            float _2566 = isnan(_2436) ? _2435 : (isnan(_2435) ? _2436 : max(_2435, _2436));
            float _2567 = isnan(_2436) ? _2435 : (isnan(_2435) ? _2436 : min(_2435, _2436));
            float _2576 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : min(_2566, 0.0));
            float _2577 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : min(_2567, 0.0));
            _2605 = ((abs(_2442 / _2430) * cbSceneParam._m0[80u].y) * ((((_2576 - _2577) * 2.0) - ((exp2(_2450 * (isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0)))) - exp2(_2450 * (isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0))))) * _2565)) - ((exp2(_2452 * _2576) - exp2(_2452 * _2577)) * _2565))) + (_2445 * cbSceneParam._m0[80u].z);
        }
        vec4 _2607 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2341, _2342, 1.0), 0.0);
        float _2616 = exp2((_2605 * (-1.44269502162933349609375)) * (1.0 - _2607.w));
        float _2617 = log2(_2616);
        float _2633 = log2(_2361);
        _2454 = (exp2(_2633 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].x)) * _2607.x) / cbSceneParam._m0[78u].x)) + _2358;
        _2456 = (exp2(_2633 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].y)) * _2607.y) / cbSceneParam._m0[78u].y)) + _2359;
        _2458 = (exp2(_2633 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].z)) * _2607.z) / cbSceneParam._m0[78u].z)) + _2360;
        _2460 = _2616 * _2361;
    }
    else
    {
        _2454 = _2358;
        _2456 = _2359;
        _2458 = _2360;
        _2460 = _2361;
    }
    float _2472 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2473 = _2472 == 3.0;
    float _2474 = log2(_2460);
    float _2481 = exp2(_2474 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2303 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _563))) + ((_2309 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _1369)) * cbPerFrame._m0[3u].x));
    float _2482 = exp2(_2474 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_2305 + ((isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0))) * _563))) + ((_2311 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _1369)) * cbPerFrame._m0[3u].x));
    float _2483 = exp2(_2474 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2307 + ((isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0))) * _563))) + ((_2313 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1369)) * cbPerFrame._m0[3u].x));
    float _2492 = (_2472 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2492 * (_2473 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2454)));
    SV_Target.y = _2492 * (_2473 ? _2482 : (_2482 + (cbSceneParam._m0[72u].w * _2456)));
    SV_Target.z = _2492 * (_2473 ? _2483 : (_2483 + (cbSceneParam._m0[72u].w * _2458)));
    SV_Target.w = cbInstanceData._m0[_2333].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2333].w;
}


