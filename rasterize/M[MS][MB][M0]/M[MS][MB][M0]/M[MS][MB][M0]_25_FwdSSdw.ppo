#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1089;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    uint _233 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _233 + 1u;
    uint _242 = _233 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_233].x * cbInstanceData._m0[_233].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _278 = _272.x * cbMtdParam._m0[9u].x;
    float _279 = _272.y * cbMtdParam._m0[9u].y;
    float _280 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _302 = _298.z;
    float _307 = (_298.x * 2.0) + (-1.0);
    float _309 = (_298.y * 2.0) + (-1.0);
    float _310 = dot(vec2(_307, _309), vec2(_307, _309));
    float _3422 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _316 = sqrt(1.0 - (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))));
    float _319 = fma(_316, _221, fma(_309, _228, _307 * _214));
    float _322 = fma(_316, _222, fma(_309, _229, _307 * _215));
    float _325 = fma(_316, _223, fma(_309, _230, _307 * _216));
    float _329 = inversesqrt(dot(vec3(_319, _322, _325), vec3(_319, _322, _325)));
    vec4 _365 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _367 = _365.x;
    float _368 = 1.0 - _367;
    float _377 = (cbMtdParam._m0[19u].x + dot(vec4(_329 * _319, _329 * _322, _329 * _325, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_367 - _368) * cbMtdParam._m0[24u].z) + _368) * cbMtdParam._m0[21u].z);
    float _3433 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _380 = (-0.0) - cbMtdParam._m0[24u].y;
    float _382 = isnan(0.0) ? _380 : (isnan(_380) ? 0.0 : max(_380, 0.0));
    float _383 = isnan(1.0) ? _382 : (isnan(_382) ? 1.0 : min(_382, 1.0));
    float _390 = _378 - ((_378 * TEXCOORD_8.x) * _383);
    float _391 = _378 - ((_378 * TEXCOORD_8.y) * _383);
    float _392 = _378 - ((_378 * TEXCOORD_8.z) * _383);
    float _399 = (_390 * (cbMtdParam._m0[17u].x - _278)) + _278;
    float _400 = (_391 * (cbMtdParam._m0[17u].y - _279)) + _279;
    float _401 = (_392 * (cbMtdParam._m0[17u].z - _280)) + _280;
    vec4 _413 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _252) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _253) + cbTextureTilingScale._m0[19u].w));
    float _415 = _413.x;
    float _416 = 1.0 - _415;
    float _446 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_415 - _416) * cbMtdParam._m0[24u].w) + _416) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3454 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _455 = ((((cbMtdParam._m0[10u].x - _399) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _447) + _399;
    float _456 = ((((cbMtdParam._m0[10u].y - _400) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _447) + _400;
    float _457 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _401)) * _447) + _401;
    vec4 _471 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _478 = (_471.x * 2.0) + (-1.0);
    float _479 = (_471.y * 2.0) + (-1.0);
    float _480 = dot(vec2(_478, _479), vec2(_478, _479));
    float _3465 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _488 = ((_471.z - _302) * _390) + _302;
    float _491 = ((cbMtdParam._m0[23u].y - _488) * _447) + _488;
    vec4 _510 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _252) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _253) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _516 = (_510.x * 2.0) + (-1.0);
    float _517 = (_510.y * 2.0) + (-1.0);
    float _518 = dot(vec2(_516, _517), vec2(_516, _517));
    float _3476 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _533 = ((sqrt(1.0 - (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0)))) - _316) * _392) + _316;
    float _536 = (((_478 - _307) * _390) + _307) + (cbMtdParam._m0[21u].x * _307);
    float _537 = (((_479 - _309) * _391) + _309) + (cbMtdParam._m0[21u].x * _309);
    float _548 = (((_516 - _536) + (_536 * cbMtdParam._m0[22u].z)) * _447) + _536;
    float _549 = (((_517 - _537) + (_537 * cbMtdParam._m0[22u].z)) * _447) + _537;
    float _550 = (_447 * (sqrt(1.0 - (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) - _533)) + _533;
    float _552 = cbMtdParam._m0[22u].x + _298.w;
    float _555 = fma(_550, _221, fma(_549, _228, _548 * _214));
    float _558 = fma(_550, _222, fma(_549, _229, _548 * _215));
    float _561 = fma(_550, _223, fma(_549, _230, _548 * _216));
    float _565 = inversesqrt(dot(vec3(_555, _558, _561), vec3(_555, _558, _561)));
    float _566 = _565 * _555;
    float _567 = _565 * _558;
    float _568 = _565 * _561;
    float _3487 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _569 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _3498 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _3509 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3520 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3531 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _587 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _637 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _627);
    float _638 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _627);
    float _639 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _627);
    float _643 = inversesqrt(dot(vec3(_637, _638, _639), vec3(_637, _638, _639)));
    float _644 = _637 * _643;
    float _645 = _638 * _643;
    float _646 = _639 * _643;
    float _652 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _653 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _674 = fma(_568, cbSceneParam._m0[5u].z, fma(_567, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _566));
    float _677 = fma(_568, cbSceneParam._m0[6u].z, fma(_567, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _566));
    float _680 = fma(_568, cbSceneParam._m0[7u].z, fma(_567, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _566));
    uint _694 = (_233 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _700 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) * cbInstanceData._m0[_694].x;
    float _701 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)))) * cbInstanceData._m0[_694].y;
    float _702 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0)))) * cbInstanceData._m0[_694].z;
    float _3542 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _703 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _3553 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _704 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _3564 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    vec4 _714 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _652, cbSceneParam._m0[86u].y * _653));
    float _718 = ((isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) * TEXCOORD_5.w) * _714.x;
    float _719 = dot(vec3(_566, _567, _568), vec3(_644, _645, _646));
    float _722 = _719 * 2.0;
    float _726 = (_722 * _566) - _644;
    float _727 = (_722 * _567) - _645;
    float _728 = (_722 * _568) - _646;
    float _732 = abs(dot(vec3(_644, _645, _646), vec3(_566, _567, _568)));
    float _3575 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _734 = sqrt(_569);
    float _747 = exp2((_734 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_734 * 3.0));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1088;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _813 = fma(_787, cbModelParam._m0[26u].z, fma(_783, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _779));
        float _817 = fma(_787, cbModelParam._m0[27u].z, fma(_783, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _779));
        float _821 = fma(_787, cbModelParam._m0[28u].z, fma(_783, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _779));
        float _846 = _779 + _566;
        float _847 = _783 + _567;
        float _848 = _787 + _568;
        float _858 = fma(_848, cbModelParam._m0[26u].z, fma(_847, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _846)) - _813;
        float _859 = fma(_848, cbModelParam._m0[27u].z, fma(_847, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _846)) - _817;
        float _860 = fma(_848, cbModelParam._m0[28u].z, fma(_847, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _846)) - _821;
        float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
        float _877 = ((_864 * _858) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_813 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_864 * _859) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_817 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_864 * _860) / cbModelParam._m0[34u].z) + ((((((_821 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        float _916 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_882.x + (-0.5));
        float _918 = _916 * (_882.y + (-0.5));
        float _919 = _916 * (_882.z + (-0.5));
        float _926 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_889.x + (-0.5));
        float _928 = _926 * (_889.y + (-0.5));
        float _929 = _926 * (_889.z + (-0.5));
        float _936 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_896.x + (-0.5));
        float _938 = _936 * (_896.y + (-0.5));
        float _939 = _936 * (_896.z + (-0.5));
        float _946 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_903.x + (-0.5));
        float _948 = _946 * (_903.y + (-0.5));
        float _949 = _946 * (_903.z + (-0.5));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = _917 * 0.5;
        float _954 = _927 * 0.5;
        float _955 = _937 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _970 = (dot(vec3(_566, _567, _568), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _980 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3623 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_982 + 1.0))) + _987) * _950;
        float _997 = _918 * 0.5;
        float _998 = _928 * 0.5;
        float _999 = _938 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_566, _567, _568), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3656 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1024 + 1.0))) + _1029) * _951;
        float _1039 = _919 * 0.5;
        float _1040 = _929 * 0.5;
        float _1041 = _939 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_566, _567, _568), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3689 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1066 + 1.0))) + _1071) * _952;
        _1088 = _919;
        _1090 = _918;
        _1091 = _917;
        _1092 = _929;
        _1093 = _928;
        _1094 = _927;
        _1095 = _939;
        _1096 = _938;
        _1097 = _937;
        _1098 = _952;
        _1099 = _951;
        _1100 = _950;
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
    }
    else
    {
        _1088 = _1089;
        _1090 = _1089;
        _1091 = _1089;
        _1092 = _1089;
        _1093 = _1089;
        _1094 = _1089;
        _1095 = _1089;
        _1096 = _1089;
        _1097 = _1089;
        _1098 = _1089;
        _1099 = _1089;
        _1100 = _1089;
        _1101 = 0.0;
        _1102 = 0.0;
        _1103 = 0.0;
    }
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1128 = fma(_787, cbModelParam._m0[30u].z, fma(_783, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _779));
        float _1132 = fma(_787, cbModelParam._m0[31u].z, fma(_783, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _779));
        float _1136 = fma(_787, cbModelParam._m0[32u].z, fma(_783, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _779));
        float _1159 = _779 + _566;
        float _1160 = _783 + _567;
        float _1161 = _787 + _568;
        float _1171 = fma(_1161, cbModelParam._m0[30u].z, fma(_1160, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1159)) - _1128;
        float _1172 = fma(_1161, cbModelParam._m0[31u].z, fma(_1160, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1159)) - _1132;
        float _1173 = fma(_1161, cbModelParam._m0[32u].z, fma(_1160, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1159)) - _1136;
        float _1177 = inversesqrt(dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173)));
        float _1190 = ((_1177 * _1171) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1128 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1177 * _1172) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1132 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1177 * _1173) / cbModelParam._m0[35u].z) + ((((((_1136 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        float _1227 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1194.x + (-0.5));
        float _1229 = _1227 * (_1194.y + (-0.5));
        float _1230 = _1227 * (_1194.z + (-0.5));
        float _1237 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1201.x + (-0.5));
        float _1239 = _1237 * (_1201.y + (-0.5));
        float _1240 = _1237 * (_1201.z + (-0.5));
        float _1247 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1208.x + (-0.5));
        float _1249 = _1247 * (_1208.y + (-0.5));
        float _1250 = _1247 * (_1208.z + (-0.5));
        float _1257 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1215.x + (-0.5));
        float _1259 = _1257 * (_1215.y + (-0.5));
        float _1260 = _1257 * (_1215.z + (-0.5));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = _1228 * 0.5;
        float _1265 = _1238 * 0.5;
        float _1266 = _1248 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_566, _567, _568), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _3752 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1291 + 1.0))) + _1296) * _1261;
        float _1306 = _1229 * 0.5;
        float _1307 = _1239 * 0.5;
        float _1308 = _1249 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_566, _567, _568), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _3785 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1333 + 1.0))) + _1338) * _1262;
        float _1348 = _1230 * 0.5;
        float _1349 = _1240 * 0.5;
        float _1350 = _1250 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_566, _567, _568), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _3818 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1375 + 1.0))) + _1380) * _1263;
        _1397 = _1230;
        _1398 = _1229;
        _1399 = _1228;
        _1400 = _1240;
        _1401 = _1239;
        _1402 = _1238;
        _1403 = _1250;
        _1404 = _1249;
        _1405 = _1248;
        _1406 = _1263;
        _1407 = _1262;
        _1408 = _1261;
        _1409 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1410 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1411 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
    }
    else
    {
        _1397 = _1089;
        _1398 = _1089;
        _1399 = _1089;
        _1400 = _1089;
        _1401 = _1089;
        _1402 = _1089;
        _1403 = _1089;
        _1404 = _1089;
        _1405 = _1089;
        _1406 = _1089;
        _1407 = _1089;
        _1408 = _1089;
        _1409 = 0.0;
        _1410 = 0.0;
        _1411 = 0.0;
    }
    float _1421 = (cbModelParam._m0[1u].x * (_1409 - _1101)) + _1101;
    float _1422 = (cbModelParam._m0[1u].x * (_1410 - _1102)) + _1102;
    float _1423 = (cbModelParam._m0[1u].x * (_1411 - _1103)) + _1103;
    float _1444 = fma(_1423, cbSceneParam._m0[89u].z, fma(_1422, cbSceneParam._m0[89u].y, _1421 * cbSceneParam._m0[89u].x));
    float _1447 = fma(_1423, cbSceneParam._m0[90u].z, fma(_1422, cbSceneParam._m0[90u].y, _1421 * cbSceneParam._m0[90u].x));
    float _1450 = fma(_1423, cbSceneParam._m0[91u].z, fma(_1422, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1421));
    float _1465 = _726 * 0.5;
    float _1466 = _727 * 0.5;
    float _1467 = _728 * 0.5;
    float _1468 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1399, _1402, _1405, _1408));
    float _1471 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1398, _1401, _1404, _1407));
    float _1474 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1397, _1400, _1403, _1406));
    float _1508;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1481 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1088, _1092, _1095, _1098));
        float _1485 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1090, _1093, _1096, _1099));
        float _1489 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1091, _1094, _1097, _1100));
        float _1496 = dot(vec4(cbModelParam._m0[39u]), vec4(_1465, _1466, _1467, 1.0));
        _1508 = dot(vec3(isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1496) ? 0.0 : (isnan(0.0) ? _1496 : max(0.0, _1496))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1508 = 1.0;
    }
    float _1519;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1510 = dot(vec4(cbModelParam._m0[40u]), vec4(_1465, _1466, _1467, 1.0));
        _1519 = dot(vec3(isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1510) ? 0.0 : (isnan(0.0) ? _1510 : max(0.0, _1510))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1519 = 1.0;
    }
    float _1523 = (_1519 * cbModelParam._m0[1u].x) + (_1508 * (1.0 - cbModelParam._m0[1u].x));
    float _1533 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _569);
    float _1534 = isnan(_1533) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1533 : min(cbModelParam._m0[25u].z, _1533));
    float _1615;
    float _1617;
    float _1619;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1582 = fma(_787, cbModelParam._m0[13u].z, fma(_783, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _779)) + cbModelParam._m0[13u].w;
        float _1586 = fma(_787, cbModelParam._m0[14u].z, fma(_783, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _779)) + cbModelParam._m0[14u].w;
        float _1590 = fma(_787, cbModelParam._m0[15u].z, fma(_783, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _779)) + cbModelParam._m0[15u].w;
        float _1593 = fma(_728, cbModelParam._m0[13u].z, fma(_727, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _726));
        float _1596 = fma(_728, cbModelParam._m0[14u].z, fma(_727, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _726));
        float _1599 = fma(_728, cbModelParam._m0[15u].z, fma(_727, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _726));
        float _1627;
        if (_1593 > 0.0)
        {
            _1627 = abs((1.0 - _1582) / _1593);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1582 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1627 = frontier_phi_14_12_ladder;
        }
        float _1851;
        if (_1596 > 0.0)
        {
            _1851 = abs((1.0 - _1586) / _1596);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1586 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1851 = frontier_phi_23_19_ladder;
        }
        float _2097;
        if (_1599 > 0.0)
        {
            _2097 = abs((1.0 - _1590) / _1599);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1590 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2097 = frontier_phi_35_30_ladder;
        }
        float _2099 = isnan(_1851) ? _1627 : (isnan(_1627) ? _1851 : min(_1627, _1851));
        float _2100 = isnan(_2097) ? _2099 : (isnan(_2099) ? _2097 : min(_2099, _2097));
        float _2104 = (_2100 * _1593) + _1582;
        float _2105 = (_2100 * _1596) + _1586;
        float _2106 = (_2100 * _1599) + _1590;
        float _2107 = _2100 * 9.9999997473787516355514526367188e-05;
        float _2109 = (-1.0) - _2107;
        float _2111 = _2107 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2106 > _2111) || ((_2106 < _2109) || ((_2105 > _2111) || ((_2105 < _2109) || ((_2104 < _2109) || (_2104 > _2111))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2230 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2106, cbModelParam._m0[9u].z, fma(_2105, cbModelParam._m0[9u].y, _2104 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2106, cbModelParam._m0[10u].z, fma(_2105, cbModelParam._m0[10u].y, _2104 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2106, cbModelParam._m0[11u].z, fma(_2105, cbModelParam._m0[11u].y, _2104 * cbModelParam._m0[11u].x))), _1534);
            frontier_phi_13_35_ladder = _2230.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2230.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2230.x * cbModelParam._m0[1u].y;
        }
        _1615 = frontier_phi_13_35_ladder_2;
        _1617 = frontier_phi_13_35_ladder_1;
        _1619 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1603 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_726, _727, _728), _1534);
        _1615 = _1603.x * cbModelParam._m0[1u].y;
        _1617 = _1603.y * cbModelParam._m0[1u].y;
        _1619 = _1603.z * cbModelParam._m0[1u].y;
    }
    float _1623 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _569);
    float _1624 = isnan(_1623) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1623 : min(cbModelParam._m0[25u].w, _1623));
    float _1714;
    float _1716;
    float _1718;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1678 = fma(_787, cbModelParam._m0[21u].z, fma(_783, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _779)) + cbModelParam._m0[21u].w;
        float _1682 = fma(_787, cbModelParam._m0[22u].z, fma(_783, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _779)) + cbModelParam._m0[22u].w;
        float _1686 = fma(_787, cbModelParam._m0[23u].z, fma(_783, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _779)) + cbModelParam._m0[23u].w;
        float _1689 = fma(_728, cbModelParam._m0[21u].z, fma(_727, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _726));
        float _1692 = fma(_728, cbModelParam._m0[22u].z, fma(_727, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _726));
        float _1695 = fma(_728, cbModelParam._m0[23u].z, fma(_727, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _726));
        float _1856;
        if (_1689 > 0.0)
        {
            _1856 = abs((1.0 - _1678) / _1689);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1678 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1856 = frontier_phi_25_21_ladder;
        }
        float _2124;
        if (_1692 > 0.0)
        {
            _2124 = abs((1.0 - _1682) / _1692);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1682 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2124 = frontier_phi_37_32_ladder;
        }
        float _2329;
        if (_1695 > 0.0)
        {
            _2329 = abs((1.0 - _1686) / _1695);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1686 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2329 = frontier_phi_46_43_ladder;
        }
        float _2331 = isnan(_2124) ? _1856 : (isnan(_1856) ? _2124 : min(_1856, _2124));
        float _2332 = isnan(_2329) ? _2331 : (isnan(_2331) ? _2329 : min(_2331, _2329));
        float _2336 = (_2332 * _1689) + _1678;
        float _2337 = (_2332 * _1692) + _1682;
        float _2338 = (_2332 * _1695) + _1686;
        float _2339 = _2332 * 9.9999997473787516355514526367188e-05;
        float _2340 = (-1.0) - _2339;
        float _2342 = _2339 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2338 > _2342) || ((_2338 < _2340) || ((_2337 > _2342) || ((_2337 < _2340) || ((_2336 < _2340) || (_2336 > _2342))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2338, cbModelParam._m0[17u].z, fma(_2337, cbModelParam._m0[17u].y, _2336 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2338, cbModelParam._m0[18u].z, fma(_2337, cbModelParam._m0[18u].y, _2336 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2338, cbModelParam._m0[19u].z, fma(_2337, cbModelParam._m0[19u].y, _2336 * cbModelParam._m0[19u].x))), _1624);
            frontier_phi_22_46_ladder = _2537.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2537.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2537.x * cbModelParam._m0[1u].z;
        }
        _1714 = frontier_phi_22_46_ladder_2;
        _1716 = frontier_phi_22_46_ladder_1;
        _1718 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1698 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_726, _727, _728), _1624);
        _1714 = _1698.x * cbModelParam._m0[1u].z;
        _1716 = _1698.y * cbModelParam._m0[1u].z;
        _1718 = _1698.z * cbModelParam._m0[1u].z;
    }
    float _1730 = ((((1.0 - _747) * ((_734 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_747 * _734)) * _718;
    float _1731 = _1730 * ((cbModelParam._m0[1u].w * (_1714 - _1615)) + _1615);
    float _1732 = _1730 * ((cbModelParam._m0[1u].w * (_1716 - _1617)) + _1617);
    float _1733 = _1730 * ((cbModelParam._m0[1u].w * (_1718 - _1619)) + _1619);
    float _1736 = fma(_1733, cbSceneParam._m0[89u].z, fma(_1732, cbSceneParam._m0[89u].y, _1731 * cbSceneParam._m0[89u].x));
    float _1739 = fma(_1733, cbSceneParam._m0[90u].z, fma(_1732, cbSceneParam._m0[90u].y, _1731 * cbSceneParam._m0[90u].x));
    float _1742 = fma(_1733, cbSceneParam._m0[91u].z, fma(_1732, cbSceneParam._m0[91u].y, _1731 * cbSceneParam._m0[91u].x));
    vec4 _1750 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_652, _653));
    float _1752 = _1750.w;
    float _1764 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1752);
    float _1765 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1752);
    float _1766 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1752);
    uvec4 _1770 = floatBitsToUint(cbInstanceData._m0[_233 + 5u]);
    uint _1772 = _1770.x * 14u;
    uint _1773 = _1772 + 13u;
    float _1780 = _718 + (-1.0);
    float _1785 = (cbLight._m0[_1773].x * _1780) + 1.0;
    float _1786 = (cbLight._m0[_1773].y * _1780) + 1.0;
    float _1787 = (cbLight._m0[_1773].z * _1780) + 1.0;
    float _1788 = (cbLight._m0[_1773].w * _1780) + 1.0;
    uint _1789 = _1772 + 5u;
    float _1795 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
    uint _1799 = _1772 + 4u;
    float _1809 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
    uint _1813 = _1772 | 1u;
    float _1824 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_566, _567, _568));
    float _1827 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_566, _567, _568));
    float _3954 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _3965 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1832 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * 0.3183098733425140380859375;
    float _1834 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * 0.3183098733425140380859375;
    float _1841 = ((cbLight._m0[_1789].x * _1795) * _1834) + (((cbLight._m0[_1799].x * _1764) * _1809) * _1832);
    float _1842 = ((_1795 * cbLight._m0[_1789].y) * _1834) + (((cbLight._m0[_1799].y * _1765) * _1809) * _1832);
    float _1843 = ((_1795 * cbLight._m0[_1789].z) * _1834) + (((cbLight._m0[_1799].z * _1766) * _1809) * _1832);
    uvec4 _1848 = floatBitsToUint(cbLight._m0[_1772 + 12u]);
    bool _1850 = _1848.x == 0u;
    float _1861;
    float _1863;
    float _1865;
    if (_1850)
    {
        _1861 = _1841;
        _1863 = _1842;
        _1865 = _1843;
    }
    else
    {
        uint _1869 = _1772 + 6u;
        float _1885 = (dot(vec3(cbLight._m0[_1772 + 2u].xyz), vec3(_566, _567, _568)) * 0.5) + 0.5;
        float _1886 = _1885 * _1885;
        float _3976 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1888 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _1861 = (((cbLight._m0[_1869].x * 0.3183098733425140380859375) * _1887) * _1888) + _1841;
        _1863 = (((cbLight._m0[_1869].y * 0.3183098733425140380859375) * _1887) * _1888) + _1842;
        _1865 = (((cbLight._m0[_1869].z * 0.3183098733425140380859375) * _1887) * _1888) + _1843;
    }
    bool _1868 = _1848.y == 0u;
    float _1906;
    float _1908;
    float _1910;
    if (_1868)
    {
        _1906 = _1861;
        _1908 = _1863;
        _1910 = _1865;
    }
    else
    {
        uint _2068 = _1772 + 7u;
        float _2084 = (dot(vec3(cbLight._m0[_1772 + 3u].xyz), vec3(_566, _567, _568)) * 0.5) + 0.5;
        float _2085 = _2084 * _2084;
        float _3992 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2086 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _2087 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _1906 = (((cbLight._m0[_2068].x * 0.3183098733425140380859375) * _2086) * _2087) + _1861;
        _1908 = (((cbLight._m0[_2068].y * 0.3183098733425140380859375) * _2086) * _2087) + _1863;
        _1910 = (((cbLight._m0[_2068].z * 0.3183098733425140380859375) * _2086) * _2087) + _1865;
    }
    uint _1913 = _1772 + 8u;
    float _1926 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1772].w)) * _569) * 0.949999988079071044921875);
    float _1927 = _1926 * _1926;
    float _1928 = cbLight._m0[_1772].x + _644;
    float _1929 = cbLight._m0[_1772].y + _645;
    float _1930 = cbLight._m0[_1772].z + _646;
    float _1934 = inversesqrt(dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930)));
    float _1935 = _1934 * _1928;
    float _1936 = _1934 * _1929;
    float _1937 = _1934 * _1930;
    float _1938 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_1772].xyz));
    float _4008 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1941 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _1942 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _1943 = dot(vec3(_566, _567, _568), vec3(_1935, _1936, _1937));
    float _4030 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1946 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _1947 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_1935, _1936, _1937));
    float _4041 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1951 = _1927 * _1927;
    float _1955 = ((_1946 * _1946) * (_1951 + (-1.0))) + 1.0;
    float _1966 = (exp2(log2(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1967 = 1.0 - _1927;
    float _1978 = (0.5 / (((_1942 * ((_1941 * _1967) + _1927)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _1967) + _1927) * _1941))) * _1941;
    float _4052 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1980 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1951 / ((_1955 * _1955) * 3.141590118408203125));
    uint _1994 = _1772 + 9u;
    float _2005 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1813].w)) * _569) * 0.949999988079071044921875);
    float _2006 = _2005 * _2005;
    float _2007 = cbLight._m0[_1813].x + _644;
    float _2008 = cbLight._m0[_1813].y + _645;
    float _2009 = cbLight._m0[_1813].z + _646;
    float _2013 = inversesqrt(dot(vec3(_2007, _2008, _2009), vec3(_2007, _2008, _2009)));
    float _2014 = _2013 * _2007;
    float _2015 = _2013 * _2008;
    float _2016 = _2013 * _2009;
    float _2017 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_1813].xyz));
    float _4063 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _2021 = dot(vec3(_566, _567, _568), vec3(_2014, _2015, _2016));
    float _4074 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _2025 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_2014, _2015, _2016));
    float _4085 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2029 = _2006 * _2006;
    float _2033 = ((_2024 * _2024) * (_2029 + (-1.0))) + 1.0;
    float _2042 = (exp2(log2(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2043 = 1.0 - _2006;
    float _2053 = (0.5 / (((_1942 * ((_2020 * _2043) + _2006)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _2043) + _2006) * _2020))) * _2020;
    float _4096 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2055 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_2029 / ((_2033 * _2033) * 3.141590118408203125));
    float _2065 = (((_2042 * cbLight._m0[_1994].x) * _2055) * _1795) + ((((cbLight._m0[_1913].x * _1764) * _1966) * _1980) * _1809);
    float _2066 = (((_2042 * cbLight._m0[_1994].y) * _2055) * _1795) + ((((cbLight._m0[_1913].y * _1765) * _1966) * _1980) * _1809);
    float _2067 = (((_2042 * cbLight._m0[_1994].z) * _2055) * _1795) + ((((cbLight._m0[_1913].z * _1766) * _1966) * _1980) * _1809);
    float _2129;
    float _2131;
    float _2133;
    if (_1850)
    {
        _2129 = _2065;
        _2131 = _2066;
        _2133 = _2067;
    }
    else
    {
        uint _2135 = _1772 + 2u;
        uint _2139 = _1772 + 10u;
        float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2135].w)) * _569) * 0.949999988079071044921875);
        float _2154 = _2153 * _2153;
        float _2155 = cbLight._m0[_2135].x + _644;
        float _2156 = cbLight._m0[_2135].y + _645;
        float _2157 = cbLight._m0[_2135].z + _646;
        float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
        float _2162 = _2161 * _2155;
        float _2163 = _2161 * _2156;
        float _2164 = _2161 * _2157;
        float _2165 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2135].xyz));
        float _4107 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2168 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _2169 = dot(vec3(_566, _567, _568), vec3(_2162, _2163, _2164));
        float _4118 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2172 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2173 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2162, _2163, _2164));
        float _4129 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2177 = _2154 * _2154;
        float _2181 = ((_2172 * _2172) * (_2177 + (-1.0))) + 1.0;
        float _2190 = (exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2191 = 1.0 - _2154;
        float _2201 = (0.5 / (((_1942 * ((_2168 * _2191) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _2191) + _2154) * _2168))) * _2168;
        float _4140 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2203 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2177 / ((_2181 * _2181) * 3.141590118408203125));
        float _2204 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _2129 = (((_2190 * cbLight._m0[_2139].x) * _2203) * _2204) + _2065;
        _2131 = (((_2190 * cbLight._m0[_2139].y) * _2203) * _2204) + _2066;
        _2133 = (((_2190 * cbLight._m0[_2139].z) * _2203) * _2204) + _2067;
    }
    float _2239;
    float _2241;
    float _2243;
    if (_1868)
    {
        _2239 = _2129;
        _2241 = _2131;
        _2243 = _2133;
    }
    else
    {
        uint _2250 = _1772 + 3u;
        uint _2254 = _1772 + 11u;
        float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2250].w)) * _569) * 0.949999988079071044921875);
        float _2269 = _2268 * _2268;
        float _2270 = cbLight._m0[_2250].x + _644;
        float _2271 = cbLight._m0[_2250].y + _645;
        float _2272 = cbLight._m0[_2250].z + _646;
        float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
        float _2277 = _2276 * _2270;
        float _2278 = _2276 * _2271;
        float _2279 = _2276 * _2272;
        float _2280 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2250].xyz));
        float _4156 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2283 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2284 = dot(vec3(_566, _567, _568), vec3(_2277, _2278, _2279));
        float _4167 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2287 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _2288 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_2277, _2278, _2279));
        float _4178 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2292 = _2269 * _2269;
        float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
        float _2305 = (exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2306 = 1.0 - _2269;
        float _2316 = (0.5 / (((_1942 * ((_2283 * _2306) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_1942 * _2306) + _2269) * _2283))) * _2283;
        float _4189 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2318 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
        float _2319 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _2239 = (((_2305 * cbLight._m0[_2254].x) * _2318) * _2319) + _2129;
        _2241 = (((_2305 * cbLight._m0[_2254].y) * _2318) * _2319) + _2131;
        _2243 = (((_2305 * cbLight._m0[_2254].z) * _2318) * _2319) + _2133;
    }
    float _2454;
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    float _2464;
    if (_1770.y == 0u)
    {
        float _2394 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2395 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2394;
        float _2396 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2394;
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2394;
        uvec4 _2409 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2410 = _2409.x;
        uint _2421 = uint((float(_2409.y) * floor(float(uint(cbSceneParam._m0[85u].y * _653) / _2410))) + floor(float(uint(cbSceneParam._m0[85u].x * _652) / _2410)));
        float _2431 = (log2(_2397 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2432 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        uint _2435 = uint(isnan(14.0) ? _2432 : (isnan(_2432) ? 14.0 : min(_2432, 14.0)));
        uvec4 _2440 = texelFetch(g_lightClusterGridBuffer, int(((_2435 << 2u) + (_2421 << 6u)) >> 2u));
        uint _2441 = _2440.x;
        uint _2442 = _2409.z;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        if (((((1u << ((_2442 >> 4u) & 15u)) + 4294967295u) & _2441) == 0u) || ((_2442 & 240u) == 0u))
        {
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
        }
        else
        {
            float _2543;
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2686 = 0.0;
            float _2687 = 0.0;
            float _2688 = 0.0;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            uint _2692 = 0u;
            uint _2701;
            bool _2702;
            for (;;)
            {
                _2701 = texelFetch(g_lightClassification, int((((_2435 << 5u) + (_2421 << 9u)) + (_2692 << 2u)) >> 2u)).x;
                _2702 = _2701 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2702)
                {
                    frontier_phi_61_pred = _2686;
                    frontier_phi_61_pred_1 = _2691;
                    frontier_phi_61_pred_2 = _2690;
                    frontier_phi_61_pred_3 = _2689;
                    frontier_phi_61_pred_4 = _2688;
                    frontier_phi_61_pred_5 = _2687;
                }
                else
                {
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    uint _2816;
                    _2810 = _2686;
                    _2811 = _2687;
                    _2812 = _2688;
                    _2813 = _2689;
                    _2814 = _2690;
                    _2815 = _2691;
                    _2816 = _2701;
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    for (;;)
                    {
                        uint _2820 = uint(findLSB(_2816)) + (_2692 << 5u);
                        uint _2817 = (_2816 + 4294967295u) & _2816;
                        uint _2822 = _2820 * 48u;
                        vec4 _2836 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2822)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 3u)).x));
                        uint _2842 = (_2820 * 48u) + 4u;
                        vec4 _2855 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2842)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 3u)).x));
                        uint _2861 = (_2820 * 48u) + 8u;
                        vec3 _2872 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2861)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 2u)).x));
                        float _2876 = _2836.x - _2395;
                        float _2877 = _2836.y - _2396;
                        float _2878 = _2836.z - _2397;
                        float _2879 = dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878));
                        float _2882 = inversesqrt(_2879);
                        float _2883 = _2882 * _2876;
                        float _2884 = _2882 * _2877;
                        float _2885 = _2882 * _2878;
                        float _2886 = dot(vec3(_674, _677, _680), vec3(_2883, _2884, _2885));
                        float _2891 = 1.0 - (_2879 * _2836.w);
                        float _4215 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2892 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                        float _2893 = sqrt(_2879) * _2855.w;
                        float _2896 = 1.39999997615814208984375 / (_2893 + 1.39999997615814208984375);
                        float _2897 = _2896 * _2896;
                        float _2900 = ((1.0 - _2897) * _2886) + _2897;
                        float _2903 = _2893 * _2893;
                        float _2907 = ((isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0))) * _2892) / ((_2903 * 0.699999988079071044921875) + 1.0);
                        float _2911 = (-0.0) - _2395;
                        float _2912 = (-0.0) - _2396;
                        float _2913 = (-0.0) - _2397;
                        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
                        float _2918 = _2917 * _2911;
                        float _2919 = _2917 * _2912;
                        float _2920 = _2917 * _2913;
                        float _2928 = exp2(log2(1.0 / ((_2903 * 3.5) + 5.0)) * 0.25);
                        float _2929 = 1.0 - _734;
                        float _2936 = sqrt(1.0 - ((1.0 - (_2929 * _2929)) * (1.0 - (_2928 * _2928))));
                        float _2937 = _2936 * _2936;
                        float _2938 = _2937 * _2937;
                        float _2939 = _2918 + _2883;
                        float _2940 = _2919 + _2884;
                        float _2941 = _2920 + _2885;
                        float _2945 = inversesqrt(dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941)));
                        float _2949 = dot(vec3(_674, _677, _680), vec3(_2918, _2919, _2920));
                        float _4231 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2952 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                        float _2953 = dot(vec3(_674, _677, _680), vec3(_2945 * _2939, _2945 * _2940, _2945 * _2941));
                        float _4242 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2956 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                        float _2960 = ((_2956 * _2956) * (_2938 + (-1.0))) + 1.0;
                        float _2961 = _2896 * _2937;
                        float _2962 = _2961 * _2961;
                        float _2965 = ((1.0 - _2962) * _2886) + _2962;
                        float _4253 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2966 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                        float _2967 = 1.0 - _2937;
                        float _2977 = (0.5 / (((_2966 * ((_2952 * _2967) + _2937)) + 9.9999999392252902907785028219223e-09) + (((_2966 * _2967) + _2937) * _2952))) * _2966;
                        float _4264 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2988 = (((_2938 * 3.1415927410125732421875) * (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) / ((_2960 * _2960) * ((_2903 * 2.1991131305694580078125) + 3.141590118408203125))) * _2892;
                        _2745 = (_2907 * _2855.x) + _2813;
                        _2746 = (_2907 * _2855.y) + _2814;
                        _2747 = (_2907 * _2855.z) + _2815;
                        _2742 = (_2988 * _2872.x) + _2810;
                        _2743 = (_2988 * _2872.y) + _2811;
                        _2744 = (_2988 * _2872.z) + _2812;
                        if (_2817 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2810 = _2742;
                            _2811 = _2743;
                            _2812 = _2744;
                            _2813 = _2745;
                            _2814 = _2746;
                            _2815 = _2747;
                            _2816 = _2817;
                        }
                    }
                    frontier_phi_61_pred = _2742;
                    frontier_phi_61_pred_1 = _2747;
                    frontier_phi_61_pred_2 = _2746;
                    frontier_phi_61_pred_3 = _2745;
                    frontier_phi_61_pred_4 = _2744;
                    frontier_phi_61_pred_5 = _2743;
                }
                _2543 = frontier_phi_61_pred;
                _2553 = frontier_phi_61_pred_1;
                _2551 = frontier_phi_61_pred_2;
                _2549 = frontier_phi_61_pred_3;
                _2547 = frontier_phi_61_pred_4;
                _2545 = frontier_phi_61_pred_5;
                uint _2693 = _2692 + 1u;
                if (_2693 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2686 = _2543;
                    _2687 = _2545;
                    _2688 = _2547;
                    _2689 = _2549;
                    _2690 = _2551;
                    _2691 = _2553;
                    _2692 = _2693;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
        }
        uvec4 _2556 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2557 = _2556.z;
        uint _2559 = (_2557 >> 8u) & 15u;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        if (((4294967295u << _2559) & _2441) == 0u)
        {
            _2654 = _2542;
            _2656 = _2544;
            _2658 = _2546;
            _2660 = _2548;
            _2662 = _2550;
            _2664 = _2552;
        }
        else
        {
            float _2679 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
            float _2680 = _2679 * _2395;
            float _2681 = _2679 * _2396;
            float _2682 = _2679 * _2397;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2559 < ((_2557 >> 12u) & 15u))
            {
                float _2655;
                float _2657;
                float _2659;
                float _2661;
                float _2663;
                float _2665;
                float _2793 = _2542;
                float _2794 = _2544;
                float _2795 = _2546;
                float _2796 = _2548;
                float _2797 = _2550;
                float _2798 = _2552;
                uint _2799 = _2559;
                uint _2808;
                bool _2809;
                for (;;)
                {
                    _2808 = texelFetch(g_lightClassification, int((((_2435 << 5u) + (_2421 << 9u)) + (_2799 << 2u)) >> 2u)).x;
                    _2809 = _2808 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2809)
                    {
                        frontier_phi_67_pred = _2796;
                        frontier_phi_67_pred_1 = _2797;
                        frontier_phi_67_pred_2 = _2798;
                        frontier_phi_67_pred_3 = _2795;
                        frontier_phi_67_pred_4 = _2794;
                        frontier_phi_67_pred_5 = _2793;
                    }
                    else
                    {
                        float _2993;
                        float _2994;
                        float _2995;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3006 = _2793;
                        float _3007 = _2794;
                        float _3008 = _2795;
                        float _3009 = _2796;
                        float _3010 = _2797;
                        float _3011 = _2798;
                        uint _3012 = _2808;
                        uint _3013;
                        vec4 _3038;
                        float _3039;
                        vec4 _3054;
                        vec3 _3066;
                        vec4 _3082;
                        vec4 _3098;
                        float _3144;
                        bool _3145;
                        for (;;)
                        {
                            uint _3023 = ((_2799 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3012));
                            _3013 = (_3012 + 4294967295u) & _3012;
                            uint _3025 = _3023 * 40u;
                            _3038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 3u)).x));
                            _3039 = _3038.w;
                            uint _3041 = (_3023 * 40u) + 4u;
                            _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            uint _3056 = (_3023 * 40u) + 8u;
                            _3066 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x));
                            uint _3069 = (_3023 * 40u) + 16u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3085 = (_3023 * 40u) + 20u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3100 = (_3023 * 40u) + 24u;
                            vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3119 = (_3023 * 40u) + 28u;
                            vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            _3144 = fma(_2397, _3132.z, fma(_2396, _3132.y, _3132.x * _2395)) + _3132.w;
                            _3145 = !((fma(_2397, _3113.z, fma(_2396, _3113.y, _3113.x * _2395)) + _3113.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3145)
                            {
                                float _3172 = _3038.x - _2395;
                                float _3173 = _3038.y - _2396;
                                float _3174 = _3038.z - _2397;
                                float _3175 = dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174));
                                float _3178 = inversesqrt(_3175);
                                float _3179 = _3178 * _3172;
                                float _3180 = _3178 * _3173;
                                float _3181 = _3178 * _3174;
                                float _3185 = 1.0 - (_3175 / (_3039 * _3039));
                                float _4275 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3186 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3190 = sqrt(_3175) * _3054.w;
                                float _3192 = 1.39999997615814208984375 / (_3190 + 1.39999997615814208984375);
                                float _3193 = _3192 * _3192;
                                float _3196 = ((1.0 - _3193) * dot(vec3(_3179, _3180, _3181), vec3(_674, _677, _680))) + _3193;
                                float _3199 = _3190 * _3190;
                                float _3203 = (fma(_2397, _3082.z, fma(_2396, _3082.y, _3082.x * _2395)) + _3082.w) / _3144;
                                float _3204 = (fma(_2397, _3098.z, fma(_2396, _3098.y, _3098.x * _2395)) + _3098.w) / _3144;
                                float _3208 = 1.0 - dot(vec2(_3203, _3204), vec2(_3203, _3204));
                                float _4291 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3209 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3210 = _3209 * (((isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0))) * _3186) / ((_3199 * 0.699999988079071044921875) + 1.0));
                                float _3222 = exp2(log2(1.0 / ((_3199 * 3.5) + 5.0)) * 0.25);
                                float _3223 = 1.0 - _734;
                                float _3230 = sqrt(1.0 - ((1.0 - (_3223 * _3223)) * (1.0 - (_3222 * _3222))));
                                float _3231 = _3230 * _3230;
                                float _3232 = _3231 * _3231;
                                float _3233 = _3179 - _2680;
                                float _3234 = _3180 - _2681;
                                float _3235 = _3181 - _2682;
                                float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                                float _3243 = dot(vec3(_674, _677, _680), vec3((-0.0) - _2680, (-0.0) - _2681, (-0.0) - _2682));
                                float _4302 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3246 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                                float _3247 = dot(vec3(_674, _677, _680), vec3(_3239 * _3233, _3239 * _3234, _3239 * _3235));
                                float _4313 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3250 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3254 = ((_3250 * _3250) * (_3232 + (-1.0))) + 1.0;
                                float _3255 = _3192 * _3231;
                                float _3256 = _3255 * _3255;
                                float _3262 = ((1.0 - _3256) * dot(vec3(_674, _677, _680), vec3(_3179, _3180, _3181))) + _3256;
                                float _4324 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3263 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                                float _3264 = 1.0 - _3231;
                                float _3274 = (0.5 / (((_3263 * ((_3246 * _3264) + _3231)) + 9.9999999392252902907785028219223e-09) + (((_3263 * _3264) + _3231) * _3246))) * _3263;
                                float _4335 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3284 = (_3209 * _3186) * (((_3232 * 3.1415927410125732421875) * (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) / ((_3254 * _3254) * ((_3199 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3284 * _3066.x;
                                frontier_phi_73_pred_1 = _3284 * _3066.y;
                                frontier_phi_73_pred_2 = _3210 * _3054.z;
                                frontier_phi_73_pred_3 = _3210 * _3054.y;
                                frontier_phi_73_pred_4 = _3210 * _3054.x;
                                frontier_phi_73_pred_5 = _3284 * _3066.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3288 = frontier_phi_73_pred;
                            _3289 = frontier_phi_73_pred_1;
                            _3293 = frontier_phi_73_pred_2;
                            _3292 = frontier_phi_73_pred_3;
                            _3291 = frontier_phi_73_pred_4;
                            _3290 = frontier_phi_73_pred_5;
                            _2996 = _3291 + _3009;
                            _2997 = _3292 + _3010;
                            _2998 = _3293 + _3011;
                            _2993 = _3288 + _3006;
                            _2994 = _3289 + _3007;
                            _2995 = _3290 + _3008;
                            if (_3013 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _3013;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2996;
                        frontier_phi_67_pred_1 = _2997;
                        frontier_phi_67_pred_2 = _2998;
                        frontier_phi_67_pred_3 = _2995;
                        frontier_phi_67_pred_4 = _2994;
                        frontier_phi_67_pred_5 = _2993;
                    }
                    _2661 = frontier_phi_67_pred;
                    _2663 = frontier_phi_67_pred_1;
                    _2665 = frontier_phi_67_pred_2;
                    _2659 = frontier_phi_67_pred_3;
                    _2657 = frontier_phi_67_pred_4;
                    _2655 = frontier_phi_67_pred_5;
                    uint _2800 = _2799 + 1u;
                    if (_2800 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2793 = _2655;
                        _2794 = _2657;
                        _2795 = _2659;
                        _2796 = _2661;
                        _2797 = _2663;
                        _2798 = _2665;
                        _2799 = _2800;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2663;
                frontier_phi_55_56_ladder_1 = _2665;
                frontier_phi_55_56_ladder_2 = _2661;
                frontier_phi_55_56_ladder_3 = _2659;
                frontier_phi_55_56_ladder_4 = _2657;
                frontier_phi_55_56_ladder_5 = _2655;
            }
            else
            {
                frontier_phi_55_56_ladder = _2550;
                frontier_phi_55_56_ladder_1 = _2552;
                frontier_phi_55_56_ladder_2 = _2548;
                frontier_phi_55_56_ladder_3 = _2546;
                frontier_phi_55_56_ladder_4 = _2544;
                frontier_phi_55_56_ladder_5 = _2542;
            }
            _2654 = frontier_phi_55_56_ladder_5;
            _2656 = frontier_phi_55_56_ladder_4;
            _2658 = frontier_phi_55_56_ladder_3;
            _2660 = frontier_phi_55_56_ladder_2;
            _2662 = frontier_phi_55_56_ladder;
            _2664 = frontier_phi_55_56_ladder_1;
        }
        float _2669 = isnan(1.0) ? _718 : (isnan(_718) ? 1.0 : min(_718, 1.0));
        _2454 = (_2669 * _2660) + _1906;
        _2456 = (_2669 * _2662) + _1908;
        _2458 = (_2669 * _2664) + _1910;
        _2460 = ((_2654 * 0.039999999105930328369140625) * _2669) + _2239;
        _2462 = ((_2656 * 0.039999999105930328369140625) * _2669) + _2241;
        _2464 = ((_2658 * 0.039999999105930328369140625) * _2669) + _2243;
    }
    else
    {
        _2454 = _1906;
        _2456 = _1908;
        _2458 = _1910;
        _2460 = _2239;
        _2462 = _2241;
        _2464 = _2243;
    }
    float _4351 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _4362 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _4373 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    uint _2484 = _233 + 6u;
    float _2492 = _652 / cbSceneParam._m0[86u].x;
    float _2493 = _653 / cbSceneParam._m0[86u].y;
    vec4 _2507 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2492, _2493, (log2((isnan(cbSceneParam._m0[77u].w) ? _587 : (isnan(_587) ? cbSceneParam._m0[77u].w : min(_587, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2509 = _2507.x;
    float _2510 = _2507.y;
    float _2511 = _2507.z;
    float _2512 = _2507.w;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    if (_587 > cbSceneParam._m0[78u].w)
    {
        float _2567 = isnan(_587) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _587 : min(cbSceneParam._m0[80u].w, _587));
        float _2568 = _2567 / _587;
        float _2579 = _2568 * _637;
        float _2580 = _638 * _2568;
        float _2581 = (-0.0) - _2580;
        float _2582 = _2568 * _639;
        float _2584 = (cbSceneParam._m0[77u].w * _2581) / _2567;
        float _2585 = _2584 + cbSceneParam._m0[79u].w;
        float _2586 = cbSceneParam._m0[79u].w - _2580;
        float _2592 = sqrt(((_2579 * _2579) + (_2580 * _2580)) + (_2582 * _2582));
        float _2595 = (1.0 - (cbSceneParam._m0[77u].w / _2567)) * _2592;
        float _2600 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2602 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2755;
        if (abs((_2581 - _2584) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2755 = ((((_2585 > 0.0) ? exp2(_2600 * _2585) : (2.0 - exp2(_2602 * _2585))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2595;
        }
        else
        {
            float _2715 = 1.0 / cbSceneParam._m0[80u].x;
            float _2716 = isnan(_2586) ? _2585 : (isnan(_2585) ? _2586 : max(_2585, _2586));
            float _2717 = isnan(_2586) ? _2585 : (isnan(_2585) ? _2586 : min(_2585, _2586));
            float _2726 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : min(_2716, 0.0));
            float _2727 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : min(_2717, 0.0));
            _2755 = ((abs(_2592 / _2581) * cbSceneParam._m0[80u].y) * ((((_2726 - _2727) * 2.0) - ((exp2(_2600 * (isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0)))) - exp2(_2600 * (isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0))))) * _2715)) - ((exp2(_2602 * _2726) - exp2(_2602 * _2727)) * _2715))) + (_2595 * cbSceneParam._m0[80u].z);
        }
        vec4 _2757 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2492, _2493, 1.0), 0.0);
        float _2766 = exp2((_2755 * (-1.44269502162933349609375)) * (1.0 - _2757.w));
        float _2767 = log2(_2766);
        float _2783 = log2(_2512);
        _2604 = (exp2(_2783 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2767 * cbSceneParam._m0[78u].x)) * _2757.x) / cbSceneParam._m0[78u].x)) + _2509;
        _2606 = (exp2(_2783 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2767 * cbSceneParam._m0[78u].y)) * _2757.y) / cbSceneParam._m0[78u].y)) + _2510;
        _2608 = (exp2(_2783 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2767 * cbSceneParam._m0[78u].z)) * _2757.z) / cbSceneParam._m0[78u].z)) + _2511;
        _2610 = _2766 * _2512;
    }
    else
    {
        _2604 = _2509;
        _2606 = _2510;
        _2608 = _2511;
        _2610 = _2512;
    }
    float _2622 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2623 = _2622 == 3.0;
    float _2624 = log2(_2610);
    float _2631 = exp2(_2624 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2454 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _718))) + ((_2460 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1523)) * cbPerFrame._m0[3u].x));
    float _2632 = exp2(_2624 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2456 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _718))) + ((_2462 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1523)) * cbPerFrame._m0[3u].x));
    float _2633 = exp2(_2624 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2458 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _718))) + ((_2464 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1523)) * cbPerFrame._m0[3u].x));
    float _2642 = (_2622 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2642 * (_2623 ? _2631 : (_2631 + (cbSceneParam._m0[72u].w * _2604)));
    SV_Target.y = _2642 * (_2623 ? _2632 : (_2632 + (cbSceneParam._m0[72u].w * _2606)));
    SV_Target.z = _2642 * (_2623 ? _2633 : (_2633 + (cbSceneParam._m0[72u].w * _2608)));
    SV_Target.w = cbInstanceData._m0[_2484].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2484].w;
}


