#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1384;
float _4026;
float _4027;
float _4028;
float _4029;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4038 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _4049 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4060 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _412 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _412) * cbMtdParam._m0[24u].x) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4071 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _437 = (_430 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _438 = (_430 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _439 = (_430 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _443 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _437;
    float _446 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _438;
    float _449 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _439;
    float _456 = ((_437 - _443) * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) + _443;
    float _457 = ((_438 - _446) * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) + _446;
    float _458 = ((_439 - _449) * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) + _449;
    vec4 _476 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _520 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _522 = _520.x;
    float _523 = _520.y;
    float _524 = _520.z;
    float _533 = ((_503.z - _524) * _430) + _524;
    float _536 = ((((_503.x - _522) * _430) + _522) * 2.0) + (-1.0);
    float _537 = ((((_503.y - _523) * _430) + _523) * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _4082 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _543 = sqrt(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))));
    float _546 = _536 + ((((_476.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _547 = _537 + ((((_476.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _550 = fma(_543, _250, fma(_547, _257, _546 * _243));
    float _553 = fma(_543, _251, fma(_547, _258, _546 * _244));
    float _556 = fma(_543, _252, fma(_547, _259, _546 * _245));
    float _560 = inversesqrt(dot(vec3(_550, _553, _556), vec3(_550, _553, _556)));
    vec4 _576 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _604 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _606 = _604.x;
    float _607 = 1.0 - _606;
    float _611 = ((_606 - _607) * cbMtdParam._m0[24u].z) + _607;
    float _613 = (cbMtdParam._m0[19u].x + dot(vec4(_560 * _550, _560 * _553, _560 * _556, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_611 * cbMtdParam._m0[21u].z);
    float _4093 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _614 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _616 = (-0.0) - cbMtdParam._m0[24u].y;
    float _618 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _618 : (isnan(_618) ? 1.0 : min(_618, 1.0));
    float _626 = _614 - ((_614 * TEXCOORD_8.x) * _619);
    float _627 = _614 - ((_614 * TEXCOORD_8.y) * _619);
    float _628 = _614 - ((_614 * TEXCOORD_8.z) * _619);
    float _635 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _639 = ((isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : min(_635, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _647 = (_639 - (((_611 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _639))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4124 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _648 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _652 = ((_626 * (cbMtdParam._m0[17u].x - _456)) * _648) + _456;
    float _653 = ((_627 * (cbMtdParam._m0[17u].y - _457)) * _648) + _457;
    float _654 = ((_628 * (cbMtdParam._m0[17u].z - _458)) * _648) + _458;
    vec4 _666 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _668 = _666.x;
    float _669 = 1.0 - _668;
    float _694 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_668 - _669) * cbMtdParam._m0[24u].w) + _669) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4135 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _703 = ((((cbMtdParam._m0[10u].x - _652) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _695) + _652;
    float _704 = ((((cbMtdParam._m0[10u].y - _653) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _695) + _653;
    float _705 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _654)) * _695) + _654;
    float _710 = (((_476.z - _533) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _533;
    vec4 _724 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _731 = (_724.x * 2.0) + (-1.0);
    float _732 = (_724.y * 2.0) + (-1.0);
    float _733 = dot(vec2(_731, _732), vec2(_731, _732));
    float _4146 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _742 = (((_724.z - _710) * _626) * _648) + _710;
    float _745 = ((cbMtdParam._m0[23u].y - _742) * _695) + _742;
    vec4 _764 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _770 = (_764.x * 2.0) + (-1.0);
    float _771 = (_764.y * 2.0) + (-1.0);
    float _772 = dot(vec2(_770, _771), vec2(_770, _771));
    float _4157 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _792 = (((cbMtdParam._m0[21u].x * _546) + ((_731 - _546) * _626)) * _648) + _546;
    float _793 = (((cbMtdParam._m0[21u].x * _547) + ((_732 - _547) * _627)) * _648) + _547;
    float _794 = (((sqrt(1.0 - (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) - _543) * _628) * _648) + _543;
    float _805 = (((_770 - _792) + (_792 * cbMtdParam._m0[22u].z)) * _695) + _792;
    float _806 = (((_771 - _793) + (_793 * cbMtdParam._m0[22u].z)) * _695) + _793;
    float _807 = ((sqrt(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) - _794) * _695) + _794;
    float _809 = cbMtdParam._m0[22u].x + _576.w;
    float _812 = fma(_807, _250, fma(_806, _257, _805 * _243));
    float _815 = fma(_807, _251, fma(_806, _258, _805 * _244));
    float _818 = fma(_807, _252, fma(_806, _259, _805 * _245));
    float _822 = inversesqrt(dot(vec3(_812, _815, _818), vec3(_812, _815, _818)));
    float _823 = _822 * _812;
    float _824 = _822 * _815;
    float _825 = _822 * _818;
    float _4168 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _826 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _4179 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4190 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _4201 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _4212 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _844 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _895 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _885);
    float _896 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _885);
    float _897 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _885);
    float _901 = inversesqrt(dot(vec3(_895, _896, _897), vec3(_895, _896, _897)));
    float _902 = _895 * _901;
    float _903 = _896 * _901;
    float _904 = _897 * _901;
    vec4 _909 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _911 = _909.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1065 = sqrt(((_895 * _895) + (_896 * _896)) + (_897 * _897));
        float _1071 = (cbMatDynParam._m0[5u].x * _1065) + cbMatDynParam._m0[5u].y;
        float _4223 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1076 = (cbMatDynParam._m0[5u].z * _1065) + cbMatDynParam._m0[5u].w;
        float _4234 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) - _1072)) + _1072) < ((_911 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _922 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _923 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _941 = fma(_825, cbSceneParam._m0[5u].z, fma(_824, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _823));
    float _944 = fma(_825, cbSceneParam._m0[6u].z, fma(_824, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _823));
    float _947 = fma(_825, cbSceneParam._m0[7u].z, fma(_824, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _823));
    uint _960 = _281 + 9u;
    uint _961 = _960 + uint(cbMatDynParam._m0[0u].w);
    float _967 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * cbInstanceData._m0[_961].x;
    float _968 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * cbInstanceData._m0[_961].y;
    float _969 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * cbInstanceData._m0[_961].z;
    float _4245 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _4256 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _4267 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _972 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    vec4 _981 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _922, cbSceneParam._m0[86u].y * _923));
    float _985 = ((isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * TEXCOORD_5.w) * _981.x;
    float _986 = dot(vec3(_823, _824, _825), vec3(_902, _903, _904));
    float _989 = _986 * 2.0;
    float _993 = (_989 * _823) - _902;
    float _994 = (_989 * _824) - _903;
    float _995 = (_989 * _825) - _904;
    float _999 = abs(dot(vec3(_902, _903, _904), vec3(_823, _824, _825)));
    float _4278 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1001 = sqrt(_826);
    float _1014 = exp2((_1001 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1001 * 3.0));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1383;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1108 = fma(_1054, cbModelParam._m0[26u].z, fma(_1050, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1046));
        float _1112 = fma(_1054, cbModelParam._m0[27u].z, fma(_1050, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1046));
        float _1116 = fma(_1054, cbModelParam._m0[28u].z, fma(_1050, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1046));
        float _1141 = _1046 + _823;
        float _1142 = _1050 + _824;
        float _1143 = _1054 + _825;
        float _1153 = fma(_1143, cbModelParam._m0[26u].z, fma(_1142, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1141)) - _1108;
        float _1154 = fma(_1143, cbModelParam._m0[27u].z, fma(_1142, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1141)) - _1112;
        float _1155 = fma(_1143, cbModelParam._m0[28u].z, fma(_1142, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1141)) - _1116;
        float _1159 = inversesqrt(dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155)));
        float _1172 = ((_1159 * _1153) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1108 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1159 * _1154) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1112 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1159 * _1155) / cbModelParam._m0[34u].z) + ((((((_1116 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        float _1211 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1177.x + (-0.5));
        float _1213 = _1211 * (_1177.y + (-0.5));
        float _1214 = _1211 * (_1177.z + (-0.5));
        float _1221 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1184.x + (-0.5));
        float _1223 = _1221 * (_1184.y + (-0.5));
        float _1224 = _1221 * (_1184.z + (-0.5));
        float _1231 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1191.x + (-0.5));
        float _1233 = _1231 * (_1191.y + (-0.5));
        float _1234 = _1231 * (_1191.z + (-0.5));
        float _1241 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1198.x + (-0.5));
        float _1243 = _1241 * (_1198.y + (-0.5));
        float _1244 = _1241 * (_1198.z + (-0.5));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = _1212 * 0.5;
        float _1249 = _1222 * 0.5;
        float _1250 = _1232 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1265 = (dot(vec3(_823, _824, _825), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1275 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _4326 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1277 + 1.0))) + _1282) * _1245;
        float _1292 = _1213 * 0.5;
        float _1293 = _1223 * 0.5;
        float _1294 = _1233 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_823, _824, _825), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4359 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1319 + 1.0))) + _1324) * _1246;
        float _1334 = _1214 * 0.5;
        float _1335 = _1224 * 0.5;
        float _1336 = _1234 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_823, _824, _825), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4370 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4381 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _4392 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_1361 + 1.0))) + _1366) * _1247;
        _1383 = _1214;
        _1385 = _1213;
        _1386 = _1212;
        _1387 = _1224;
        _1388 = _1223;
        _1389 = _1222;
        _1390 = _1234;
        _1391 = _1233;
        _1392 = _1232;
        _1393 = _1247;
        _1394 = _1246;
        _1395 = _1245;
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1397 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1398 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
    }
    else
    {
        _1383 = _1384;
        _1385 = _1384;
        _1386 = _1384;
        _1387 = _1384;
        _1388 = _1384;
        _1389 = _1384;
        _1390 = _1384;
        _1391 = _1384;
        _1392 = _1384;
        _1393 = _1384;
        _1394 = _1384;
        _1395 = _1384;
        _1396 = 0.0;
        _1397 = 0.0;
        _1398 = 0.0;
    }
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1426 = fma(_1054, cbModelParam._m0[30u].z, fma(_1050, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1046));
        float _1430 = fma(_1054, cbModelParam._m0[31u].z, fma(_1050, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1046));
        float _1434 = fma(_1054, cbModelParam._m0[32u].z, fma(_1050, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1046));
        float _1457 = _1046 + _823;
        float _1458 = _1050 + _824;
        float _1459 = _1054 + _825;
        float _1469 = fma(_1459, cbModelParam._m0[30u].z, fma(_1458, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1457)) - _1426;
        float _1470 = fma(_1459, cbModelParam._m0[31u].z, fma(_1458, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1457)) - _1430;
        float _1471 = fma(_1459, cbModelParam._m0[32u].z, fma(_1458, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1457)) - _1434;
        float _1475 = inversesqrt(dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471)));
        float _1488 = ((_1475 * _1469) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1426 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1489 = ((_1475 * _1470) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1430 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1490 = ((_1475 * _1471) / cbModelParam._m0[35u].z) + ((((((_1434 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        float _1525 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1492.x + (-0.5));
        float _1527 = _1525 * (_1492.y + (-0.5));
        float _1528 = _1525 * (_1492.z + (-0.5));
        float _1535 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1499.x + (-0.5));
        float _1537 = _1535 * (_1499.y + (-0.5));
        float _1538 = _1535 * (_1499.z + (-0.5));
        float _1545 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1506.x + (-0.5));
        float _1547 = _1545 * (_1506.y + (-0.5));
        float _1548 = _1545 * (_1506.z + (-0.5));
        float _1555 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1513.x + (-0.5));
        float _1557 = _1555 * (_1513.y + (-0.5));
        float _1558 = _1555 * (_1513.z + (-0.5));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = _1526 * 0.5;
        float _1563 = _1536 * 0.5;
        float _1564 = _1546 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_823, _824, _825), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4433 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4444 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4455 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_1589 + 1.0))) + _1594) * _1559;
        float _1604 = _1527 * 0.5;
        float _1605 = _1537 * 0.5;
        float _1606 = _1547 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_823, _824, _825), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4466 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4477 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4488 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_1631 + 1.0))) + _1636) * _1560;
        float _1646 = _1528 * 0.5;
        float _1647 = _1538 * 0.5;
        float _1648 = _1548 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_823, _824, _825), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4499 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4510 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4521 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_1673 + 1.0))) + _1678) * _1561;
        _1695 = _1528;
        _1696 = _1527;
        _1697 = _1526;
        _1698 = _1538;
        _1699 = _1537;
        _1700 = _1536;
        _1701 = _1548;
        _1702 = _1547;
        _1703 = _1546;
        _1704 = _1561;
        _1705 = _1560;
        _1706 = _1559;
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
    }
    else
    {
        _1695 = _1384;
        _1696 = _1384;
        _1697 = _1384;
        _1698 = _1384;
        _1699 = _1384;
        _1700 = _1384;
        _1701 = _1384;
        _1702 = _1384;
        _1703 = _1384;
        _1704 = _1384;
        _1705 = _1384;
        _1706 = _1384;
        _1707 = 0.0;
        _1708 = 0.0;
        _1709 = 0.0;
    }
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1396)) + _1396;
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1397)) + _1397;
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1398)) + _1398;
    float _1742 = fma(_1721, cbSceneParam._m0[89u].z, fma(_1720, cbSceneParam._m0[89u].y, _1719 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1721, cbSceneParam._m0[90u].z, fma(_1720, cbSceneParam._m0[90u].y, _1719 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1721, cbSceneParam._m0[91u].z, fma(_1720, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1719));
    float _1763 = _993 * 0.5;
    float _1764 = _994 * 0.5;
    float _1765 = _995 * 0.5;
    float _1766 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1769 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1772 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1806;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1779 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1383, _1387, _1390, _1393));
        float _1783 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1385, _1388, _1391, _1394));
        float _1787 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1386, _1389, _1392, _1395));
        float _1794 = dot(vec4(cbModelParam._m0[39u]), vec4(_1763, _1764, _1765, 1.0));
        _1806 = dot(vec3(isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1794) ? 0.0 : (isnan(0.0) ? _1794 : max(0.0, _1794))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1806 = 1.0;
    }
    float _1817;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1808 = dot(vec4(cbModelParam._m0[40u]), vec4(_1763, _1764, _1765, 1.0));
        _1817 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1817 = 1.0;
    }
    float _1821 = (_1817 * cbModelParam._m0[1u].x) + (_1806 * (1.0 - cbModelParam._m0[1u].x));
    float _1831 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _826);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1831 : min(cbModelParam._m0[25u].z, _1831));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1880 = fma(_1054, cbModelParam._m0[13u].z, fma(_1050, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1046)) + cbModelParam._m0[13u].w;
        float _1884 = fma(_1054, cbModelParam._m0[14u].z, fma(_1050, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1046)) + cbModelParam._m0[14u].w;
        float _1888 = fma(_1054, cbModelParam._m0[15u].z, fma(_1050, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1046)) + cbModelParam._m0[15u].w;
        float _1891 = fma(_995, cbModelParam._m0[13u].z, fma(_994, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993));
        float _1894 = fma(_995, cbModelParam._m0[14u].z, fma(_994, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993));
        float _1897 = fma(_995, cbModelParam._m0[15u].z, fma(_994, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993));
        float _1925;
        if (_1891 > 0.0)
        {
            _1925 = abs((1.0 - _1880) / _1891);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1880 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1925 = frontier_phi_17_15_ladder;
        }
        float _2095;
        if (_1894 > 0.0)
        {
            _2095 = abs((1.0 - _1884) / _1894);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1884 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2095 = frontier_phi_26_22_ladder;
        }
        float _2390;
        if (_1897 > 0.0)
        {
            _2390 = abs((1.0 - _1888) / _1897);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1888 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2390 = frontier_phi_38_33_ladder;
        }
        float _2392 = isnan(_2095) ? _1925 : (isnan(_1925) ? _2095 : min(_1925, _2095));
        float _2393 = isnan(_2390) ? _2392 : (isnan(_2392) ? _2390 : min(_2392, _2390));
        float _2397 = (_2393 * _1891) + _1880;
        float _2398 = (_2393 * _1894) + _1884;
        float _2399 = (_2393 * _1897) + _1888;
        float _2400 = _2393 * 9.9999997473787516355514526367188e-05;
        float _2402 = (-1.0) - _2400;
        float _2404 = _2400 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2399 > _2404) || ((_2399 < _2402) || ((_2398 > _2404) || ((_2398 < _2402) || ((_2397 < _2402) || (_2397 > _2404))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2544 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2399, cbModelParam._m0[9u].z, fma(_2398, cbModelParam._m0[9u].y, _2397 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2399, cbModelParam._m0[10u].z, fma(_2398, cbModelParam._m0[10u].y, _2397 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2399, cbModelParam._m0[11u].z, fma(_2398, cbModelParam._m0[11u].y, _2397 * cbModelParam._m0[11u].x))), _1832);
            frontier_phi_16_38_ladder = _2544.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2544.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2544.x * cbModelParam._m0[1u].y;
        }
        _1913 = frontier_phi_16_38_ladder_2;
        _1915 = frontier_phi_16_38_ladder_1;
        _1917 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1901 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_993, _994, _995), _1832);
        _1913 = _1901.x * cbModelParam._m0[1u].y;
        _1915 = _1901.y * cbModelParam._m0[1u].y;
        _1917 = _1901.z * cbModelParam._m0[1u].y;
    }
    float _1921 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _826);
    float _1922 = isnan(_1921) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1921 : min(cbModelParam._m0[25u].w, _1921));
    float _2012;
    float _2014;
    float _2016;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1976 = fma(_1054, cbModelParam._m0[21u].z, fma(_1050, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1046)) + cbModelParam._m0[21u].w;
        float _1980 = fma(_1054, cbModelParam._m0[22u].z, fma(_1050, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1046)) + cbModelParam._m0[22u].w;
        float _1984 = fma(_1054, cbModelParam._m0[23u].z, fma(_1050, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1046)) + cbModelParam._m0[23u].w;
        float _1987 = fma(_995, cbModelParam._m0[21u].z, fma(_994, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993));
        float _1990 = fma(_995, cbModelParam._m0[22u].z, fma(_994, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993));
        float _1993 = fma(_995, cbModelParam._m0[23u].z, fma(_994, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993));
        float _2100;
        if (_1987 > 0.0)
        {
            _2100 = abs((1.0 - _1976) / _1987);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1976 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2100 = frontier_phi_28_24_ladder;
        }
        float _2417;
        if (_1990 > 0.0)
        {
            _2417 = abs((1.0 - _1980) / _1990);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1980 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2417 = frontier_phi_40_35_ladder;
        }
        float _2744;
        if (_1993 > 0.0)
        {
            _2744 = abs((1.0 - _1984) / _1993);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1984 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2744 = frontier_phi_50_47_ladder;
        }
        float _2746 = isnan(_2417) ? _2100 : (isnan(_2100) ? _2417 : min(_2100, _2417));
        float _2747 = isnan(_2744) ? _2746 : (isnan(_2746) ? _2744 : min(_2746, _2744));
        float _2751 = (_2747 * _1987) + _1976;
        float _2752 = (_2747 * _1990) + _1980;
        float _2753 = (_2747 * _1993) + _1984;
        float _2754 = _2747 * 9.9999997473787516355514526367188e-05;
        float _2755 = (-1.0) - _2754;
        float _2757 = _2754 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2753 > _2757) || ((_2753 < _2755) || ((_2752 > _2757) || ((_2752 < _2755) || ((_2751 < _2755) || (_2751 > _2757))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2871 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2753, cbModelParam._m0[17u].z, fma(_2752, cbModelParam._m0[17u].y, _2751 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2753, cbModelParam._m0[18u].z, fma(_2752, cbModelParam._m0[18u].y, _2751 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2753, cbModelParam._m0[19u].z, fma(_2752, cbModelParam._m0[19u].y, _2751 * cbModelParam._m0[19u].x))), _1922);
            frontier_phi_25_50_ladder = _2871.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2871.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2871.x * cbModelParam._m0[1u].z;
        }
        _2012 = frontier_phi_25_50_ladder_2;
        _2014 = frontier_phi_25_50_ladder_1;
        _2016 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1996 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_993, _994, _995), _1922);
        _2012 = _1996.x * cbModelParam._m0[1u].z;
        _2014 = _1996.y * cbModelParam._m0[1u].z;
        _2016 = _1996.z * cbModelParam._m0[1u].z;
    }
    float _2028 = ((((1.0 - _1014) * ((_1001 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1014 * _1001)) * _985;
    float _2029 = _2028 * ((cbModelParam._m0[1u].w * (_2012 - _1913)) + _1913);
    float _2030 = _2028 * ((cbModelParam._m0[1u].w * (_2014 - _1915)) + _1915);
    float _2031 = _2028 * ((cbModelParam._m0[1u].w * (_2016 - _1917)) + _1917);
    float _2034 = fma(_2031, cbSceneParam._m0[89u].z, fma(_2030, cbSceneParam._m0[89u].y, _2029 * cbSceneParam._m0[89u].x));
    float _2037 = fma(_2031, cbSceneParam._m0[90u].z, fma(_2030, cbSceneParam._m0[90u].y, _2029 * cbSceneParam._m0[90u].x));
    float _2040 = fma(_2031, cbSceneParam._m0[91u].z, fma(_2030, cbSceneParam._m0[91u].y, _2029 * cbSceneParam._m0[91u].x));
    float _2074 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2078 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2082 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2086 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2087 = _2074 / _2086;
    float _2088 = _2078 / _2086;
    float _2089 = _2082 / _2086;
    float _2236;
    float _2237;
    float _2238;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2116 = ((uint(_2089 > cbSceneParam._m0[59u].y) + uint(_2089 > cbSceneParam._m0[59u].x)) + uint(_2089 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2117 = _2116 + 43u;
        uint _2125 = _2116 + 44u;
        uint _2133 = _2116 + 45u;
        uint _2141 = _2116 + 46u;
        float _2152 = fma(_2086, cbSceneParam._m0[_2117].w, fma(_2082, cbSceneParam._m0[_2117].z, fma(_2078, cbSceneParam._m0[_2117].y, _2074 * cbSceneParam._m0[_2117].x)));
        float _2156 = fma(_2086, cbSceneParam._m0[_2125].w, fma(_2082, cbSceneParam._m0[_2125].z, fma(_2078, cbSceneParam._m0[_2125].y, _2074 * cbSceneParam._m0[_2125].x)));
        float _2164 = fma(_2086, cbSceneParam._m0[_2141].w, fma(_2082, cbSceneParam._m0[_2141].z, fma(_2078, cbSceneParam._m0[_2141].y, _2074 * cbSceneParam._m0[_2141].x)));
        float _2169 = cbSceneParam._m0[33u].z * _2164;
        float _2171 = cbSceneParam._m0[33u].w * _2164;
        float _2174 = fma(_2086, cbSceneParam._m0[_2133].w, fma(_2082, cbSceneParam._m0[_2133].z, fma(_2078, cbSceneParam._m0[_2133].y, _2074 * cbSceneParam._m0[_2133].x))) / _2164;
        float _2222 = (cbSceneParam._m0[33u].x - sqrt(((_2088 * _2088) + (_2087 * _2087)) + (_2089 * _2089))) * cbSceneParam._m0[33u].y;
        float _4647 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2229 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2169 + _2152) / _2164, (_2171 + _2156) / _2164), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2171 + _2152) / _2164, (_2156 - _2169) / _2164), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2152 - _2169) / _2164, (_2156 - _2171) / _2164), _2174), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2152 - _2171) / _2164, (_2169 + _2156) / _2164), _2174), 0.0)).x), vec4(0.25)));
        _2236 = 1.0 - (_2229 * cbSceneParam._m0[34u].x);
        _2237 = 1.0 - (_2229 * cbSceneParam._m0[34u].y);
        _2238 = 1.0 - (_2229 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2236 = 1.0;
        _2237 = 1.0;
        _2238 = 1.0;
    }
    float _2302;
    float _2304;
    float _2306;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2290 = fma(_2086, cbSceneParam._m0[63u].w, fma(_2082, cbSceneParam._m0[63u].z, fma(_2078, cbSceneParam._m0[63u].y, _2074 * cbSceneParam._m0[63u].x)));
        float _2291 = fma(_2086, cbSceneParam._m0[60u].w, fma(_2082, cbSceneParam._m0[60u].z, fma(_2078, cbSceneParam._m0[60u].y, _2074 * cbSceneParam._m0[60u].x))) / _2290;
        float _2292 = fma(_2086, cbSceneParam._m0[61u].w, fma(_2082, cbSceneParam._m0[61u].z, fma(_2078, cbSceneParam._m0[61u].y, _2074 * cbSceneParam._m0[61u].x))) / _2290;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2291 >= cbSceneParam._m0[64u].x) && (_2292 >= cbSceneParam._m0[64u].y)) && (_2291 <= cbSceneParam._m0[64u].z)) && (_2292 <= cbSceneParam._m0[64u].w))
        {
            float _2430 = fma(_2086, cbSceneParam._m0[62u].w, fma(_2082, cbSceneParam._m0[62u].z, fma(_2078, cbSceneParam._m0[62u].y, _2074 * cbSceneParam._m0[62u].x))) / _2290;
            float _2434 = isnan(cbSceneParam._m0[41u].w) ? _2430 : (isnan(_2430) ? cbSceneParam._m0[41u].w : max(_2430, cbSceneParam._m0[41u].w));
            float _2477 = (cbSceneParam._m0[33u].x - sqrt(((_2088 * _2088) + (_2087 * _2087)) + (_2089 * _2089))) * cbSceneParam._m0[33u].y;
            float _4663 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
            float _2484 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2291, cbSceneParam._m0[33u].w + _2292), _2434), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2291, _2292 - cbSceneParam._m0[33u].z), _2434), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2291 - cbSceneParam._m0[33u].z, _2292 - cbSceneParam._m0[33u].w), _2434), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2291 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2292), _2434), 0.0)).x), vec4(0.25)));
            float _2488 = 1.0 - (_2484 * cbSceneParam._m0[34u].x);
            float _2489 = 1.0 - (_2484 * cbSceneParam._m0[34u].y);
            float _2490 = 1.0 - (_2484 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2490) ? _2238 : (isnan(_2238) ? _2490 : min(_2238, _2490));
            frontier_phi_37_36_ladder_1 = isnan(_2489) ? _2237 : (isnan(_2237) ? _2489 : min(_2237, _2489));
            frontier_phi_37_36_ladder_2 = isnan(_2488) ? _2236 : (isnan(_2236) ? _2488 : min(_2236, _2488));
        }
        else
        {
            frontier_phi_37_36_ladder = _2238;
            frontier_phi_37_36_ladder_1 = _2237;
            frontier_phi_37_36_ladder_2 = _2236;
        }
        _2302 = frontier_phi_37_36_ladder_2;
        _2304 = frontier_phi_37_36_ladder_1;
        _2306 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2302 = _2236;
        _2304 = _2237;
        _2306 = _2238;
    }
    uvec4 _2311 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2313 = _2311.x * 14u;
    uint _2314 = _2313 + 13u;
    float _2321 = _985 + (-1.0);
    float _2326 = (cbLight._m0[_2314].x * _2321) + 1.0;
    float _2327 = (cbLight._m0[_2314].y * _2321) + 1.0;
    float _2328 = (cbLight._m0[_2314].z * _2321) + 1.0;
    float _2329 = (cbLight._m0[_2314].w * _2321) + 1.0;
    uint _2330 = _2313 + 5u;
    float _2336 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
    uint _2340 = _2313 + 4u;
    float _2349 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
    uint _2353 = _2313 | 1u;
    float _2364 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_823, _824, _825));
    float _2367 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_823, _824, _825));
    float _4699 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _4710 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2372 = (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * 0.3183098733425140380859375;
    float _2374 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * 0.3183098733425140380859375;
    float _2381 = ((cbLight._m0[_2330].x * _2336) * _2374) + (((cbLight._m0[_2340].x * _2302) * _2349) * _2372);
    float _2382 = ((_2336 * cbLight._m0[_2330].y) * _2374) + (((cbLight._m0[_2340].y * _2304) * _2349) * _2372);
    float _2383 = ((_2336 * cbLight._m0[_2330].z) * _2374) + (((cbLight._m0[_2340].z * _2306) * _2349) * _2372);
    uvec4 _2387 = floatBitsToUint(cbLight._m0[_2313 + 12u]);
    bool _2389 = _2387.x == 0u;
    float _2491;
    float _2493;
    float _2495;
    if (_2389)
    {
        _2491 = _2381;
        _2493 = _2382;
        _2495 = _2383;
    }
    else
    {
        uint _2499 = _2313 + 6u;
        float _2515 = (dot(vec3(cbLight._m0[_2313 + 2u].xyz), vec3(_823, _824, _825)) * 0.5) + 0.5;
        float _2516 = _2515 * _2515;
        float _4721 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2517 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2518 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2491 = (((cbLight._m0[_2499].x * 0.3183098733425140380859375) * _2517) * _2518) + _2381;
        _2493 = (((cbLight._m0[_2499].y * 0.3183098733425140380859375) * _2517) * _2518) + _2382;
        _2495 = (((cbLight._m0[_2499].z * 0.3183098733425140380859375) * _2517) * _2518) + _2383;
    }
    bool _2498 = _2387.y == 0u;
    float _2553;
    float _2555;
    float _2557;
    if (_2498)
    {
        _2553 = _2491;
        _2555 = _2493;
        _2557 = _2495;
    }
    else
    {
        uint _2715 = _2313 + 7u;
        float _2731 = (dot(vec3(cbLight._m0[_2313 + 3u].xyz), vec3(_823, _824, _825)) * 0.5) + 0.5;
        float _2732 = _2731 * _2731;
        float _4737 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2733 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2734 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2553 = (((cbLight._m0[_2715].x * 0.3183098733425140380859375) * _2733) * _2734) + _2491;
        _2555 = (((cbLight._m0[_2715].y * 0.3183098733425140380859375) * _2733) * _2734) + _2493;
        _2557 = (((cbLight._m0[_2715].z * 0.3183098733425140380859375) * _2733) * _2734) + _2495;
    }
    uint _2560 = _2313 + 8u;
    float _2573 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2313].w)) * _826) * 0.949999988079071044921875);
    float _2574 = _2573 * _2573;
    float _2575 = cbLight._m0[_2313].x + _902;
    float _2576 = cbLight._m0[_2313].y + _903;
    float _2577 = cbLight._m0[_2313].z + _904;
    float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
    float _2582 = _2581 * _2575;
    float _2583 = _2581 * _2576;
    float _2584 = _2581 * _2577;
    float _2585 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2313].xyz));
    float _4753 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2588 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _4764 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _2589 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
    float _2590 = dot(vec3(_823, _824, _825), vec3(_2582, _2583, _2584));
    float _4775 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2593 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
    float _2594 = dot(vec3(cbLight._m0[_2313].xyz), vec3(_2582, _2583, _2584));
    float _4786 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2598 = _2574 * _2574;
    float _2602 = ((_2593 * _2593) * (_2598 + (-1.0))) + 1.0;
    float _2613 = (exp2(log2(1.0 - (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2614 = 1.0 - _2574;
    float _2625 = (0.5 / (((_2589 * ((_2588 * _2614) + _2574)) + 9.9999999392252902907785028219223e-09) + (((_2589 * _2614) + _2574) * _2588))) * _2588;
    float _4797 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2627 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2598 / ((_2602 * _2602) * 3.141590118408203125));
    uint _2641 = _2313 + 9u;
    float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2353].w)) * _826) * 0.949999988079071044921875);
    float _2653 = _2652 * _2652;
    float _2654 = cbLight._m0[_2353].x + _902;
    float _2655 = cbLight._m0[_2353].y + _903;
    float _2656 = cbLight._m0[_2353].z + _904;
    float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
    float _2661 = _2660 * _2654;
    float _2662 = _2660 * _2655;
    float _2663 = _2660 * _2656;
    float _2664 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2353].xyz));
    float _4808 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2667 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
    float _2668 = dot(vec3(_823, _824, _825), vec3(_2661, _2662, _2663));
    float _4819 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2671 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
    float _2672 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_2661, _2662, _2663));
    float _4830 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2676 = _2653 * _2653;
    float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
    float _2689 = (exp2(log2(1.0 - (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2690 = 1.0 - _2653;
    float _2700 = (0.5 / (((_2589 * ((_2667 * _2690) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2589 * _2690) + _2653) * _2667))) * _2667;
    float _4841 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
    float _2702 = (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
    float _2712 = (((_2689 * cbLight._m0[_2641].x) * _2702) * _2336) + ((((cbLight._m0[_2560].x * _2302) * _2613) * _2627) * _2349);
    float _2713 = (((_2689 * cbLight._m0[_2641].y) * _2702) * _2336) + ((((cbLight._m0[_2560].y * _2304) * _2613) * _2627) * _2349);
    float _2714 = (((_2689 * cbLight._m0[_2641].z) * _2702) * _2336) + ((((cbLight._m0[_2560].z * _2306) * _2613) * _2627) * _2349);
    float _2770;
    float _2772;
    float _2774;
    if (_2389)
    {
        _2770 = _2712;
        _2772 = _2713;
        _2774 = _2714;
    }
    else
    {
        uint _2776 = _2313 + 2u;
        uint _2780 = _2313 + 10u;
        float _2794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2776].w)) * _826) * 0.949999988079071044921875);
        float _2795 = _2794 * _2794;
        float _2796 = cbLight._m0[_2776].x + _902;
        float _2797 = cbLight._m0[_2776].y + _903;
        float _2798 = cbLight._m0[_2776].z + _904;
        float _2802 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
        float _2803 = _2802 * _2796;
        float _2804 = _2802 * _2797;
        float _2805 = _2802 * _2798;
        float _2806 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2776].xyz));
        float _4852 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _2810 = dot(vec3(_823, _824, _825), vec3(_2803, _2804, _2805));
        float _4863 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
        float _2814 = dot(vec3(cbLight._m0[_2776].xyz), vec3(_2803, _2804, _2805));
        float _4874 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2818 = _2795 * _2795;
        float _2822 = ((_2813 * _2813) * (_2818 + (-1.0))) + 1.0;
        float _2831 = (exp2(log2(1.0 - (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2832 = 1.0 - _2795;
        float _2842 = (0.5 / (((_2589 * ((_2809 * _2832) + _2795)) + 9.9999999392252902907785028219223e-09) + (((_2589 * _2832) + _2795) * _2809))) * _2809;
        float _4885 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2844 = (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2818 / ((_2822 * _2822) * 3.141590118408203125));
        float _2845 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2770 = (((_2831 * cbLight._m0[_2780].x) * _2844) * _2845) + _2712;
        _2772 = (((_2831 * cbLight._m0[_2780].y) * _2844) * _2845) + _2713;
        _2774 = (((_2831 * cbLight._m0[_2780].z) * _2844) * _2845) + _2714;
    }
    float _2876;
    float _2878;
    float _2880;
    if (_2498)
    {
        _2876 = _2770;
        _2878 = _2772;
        _2880 = _2774;
    }
    else
    {
        uint _2887 = _2313 + 3u;
        uint _2891 = _2313 + 11u;
        float _2905 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2887].w)) * _826) * 0.949999988079071044921875);
        float _2906 = _2905 * _2905;
        float _2907 = cbLight._m0[_2887].x + _902;
        float _2908 = cbLight._m0[_2887].y + _903;
        float _2909 = cbLight._m0[_2887].z + _904;
        float _2913 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
        float _2914 = _2913 * _2907;
        float _2915 = _2913 * _2908;
        float _2916 = _2913 * _2909;
        float _2917 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2887].xyz));
        float _4901 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2920 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
        float _2921 = dot(vec3(_823, _824, _825), vec3(_2914, _2915, _2916));
        float _4912 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2924 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
        float _2925 = dot(vec3(cbLight._m0[_2887].xyz), vec3(_2914, _2915, _2916));
        float _4923 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2929 = _2906 * _2906;
        float _2933 = ((_2924 * _2924) * (_2929 + (-1.0))) + 1.0;
        float _2942 = (exp2(log2(1.0 - (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2943 = 1.0 - _2906;
        float _2953 = (0.5 / (((_2589 * ((_2920 * _2943) + _2906)) + 9.9999999392252902907785028219223e-09) + (((_2589 * _2943) + _2906) * _2920))) * _2920;
        float _4934 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2955 = (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * (_2929 / ((_2933 * _2933) * 3.141590118408203125));
        float _2956 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
        _2876 = (((_2942 * cbLight._m0[_2891].x) * _2955) * _2956) + _2770;
        _2878 = (((_2942 * cbLight._m0[_2891].y) * _2955) * _2956) + _2772;
        _2880 = (((_2942 * cbLight._m0[_2891].z) * _2955) * _2956) + _2774;
    }
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    if (_2311.y == 0u)
    {
        uvec4 _2977 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2978 = _2977.x;
        uint _2989 = uint((float(_2977.y) * floor(float(uint(cbSceneParam._m0[85u].y * _923) / _2978))) + floor(float(uint(cbSceneParam._m0[85u].x * _922) / _2978)));
        float _2999 = (log2(_2089 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3000 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
        uint _3003 = uint(isnan(14.0) ? _3000 : (isnan(_3000) ? 14.0 : min(_3000, 14.0)));
        uvec4 _3008 = texelFetch(g_lightClusterGridBuffer, int(((_3003 << 2u) + (_2989 << 6u)) >> 2u));
        uint _3009 = _3008.x;
        uint _3010 = _2977.z;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        if (((((1u << ((_3010 >> 4u) & 15u)) + 4294967295u) & _3009) == 0u) || ((_3010 & 240u) == 0u))
        {
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
        }
        else
        {
            float _3090;
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3100;
            float _3241 = 0.0;
            float _3242 = 0.0;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            float _3246 = 0.0;
            uint _3247 = 0u;
            uint _3256;
            bool _3257;
            for (;;)
            {
                _3256 = texelFetch(g_lightClassification, int((((_3003 << 5u) + (_2989 << 9u)) + (_3247 << 2u)) >> 2u)).x;
                _3257 = _3256 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3257)
                {
                    frontier_phi_71_pred = _3246;
                    frontier_phi_71_pred_1 = _3245;
                    frontier_phi_71_pred_2 = _3244;
                    frontier_phi_71_pred_3 = _3243;
                    frontier_phi_71_pred_4 = _3242;
                    frontier_phi_71_pred_5 = _3241;
                }
                else
                {
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    uint _3392;
                    _3386 = _3241;
                    _3387 = _3242;
                    _3388 = _3243;
                    _3389 = _3244;
                    _3390 = _3245;
                    _3391 = _3246;
                    _3392 = _3256;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    for (;;)
                    {
                        uint _3396 = uint(findLSB(_3392)) + (_3247 << 5u);
                        uint _3393 = (_3392 + 4294967295u) & _3392;
                        uint _3398 = _3396 * 48u;
                        vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3398)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 3u)).x));
                        uint _3418 = (_3396 * 48u) + 4u;
                        vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3418)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 3u)).x));
                        uint _3437 = (_3396 * 48u) + 8u;
                        vec3 _3448 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3437)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 2u)).x));
                        float _3452 = _3412.x - _2087;
                        float _3453 = _3412.y - _2088;
                        float _3454 = _3412.z - _2089;
                        float _3455 = dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454));
                        float _3458 = inversesqrt(_3455);
                        float _3459 = _3458 * _3452;
                        float _3460 = _3458 * _3453;
                        float _3461 = _3458 * _3454;
                        float _3462 = dot(vec3(_941, _944, _947), vec3(_3459, _3460, _3461));
                        float _3467 = 1.0 - (_3455 * _3412.w);
                        float _4960 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3468 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                        float _3469 = sqrt(_3455) * _3431.w;
                        float _3472 = 1.39999997615814208984375 / (_3469 + 1.39999997615814208984375);
                        float _3473 = _3472 * _3472;
                        float _3476 = ((1.0 - _3473) * _3462) + _3473;
                        float _3479 = _3469 * _3469;
                        float _3483 = ((isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0))) * _3468) / ((_3479 * 0.699999988079071044921875) + 1.0);
                        float _3487 = (-0.0) - _2087;
                        float _3488 = (-0.0) - _2088;
                        float _3489 = (-0.0) - _2089;
                        float _3493 = inversesqrt(dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489)));
                        float _3494 = _3493 * _3487;
                        float _3495 = _3493 * _3488;
                        float _3496 = _3493 * _3489;
                        float _3503 = exp2(log2(1.0 / ((_3479 * 3.5) + 5.0)) * 0.25);
                        float _3504 = 1.0 - _1001;
                        float _3511 = sqrt(1.0 - ((1.0 - (_3504 * _3504)) * (1.0 - (_3503 * _3503))));
                        float _3512 = _3511 * _3511;
                        float _3513 = _3512 * _3512;
                        float _3514 = _3494 + _3459;
                        float _3515 = _3495 + _3460;
                        float _3516 = _3496 + _3461;
                        float _3520 = inversesqrt(dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516)));
                        float _3524 = dot(vec3(_941, _944, _947), vec3(_3494, _3495, _3496));
                        float _4976 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                        float _3527 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                        float _3528 = dot(vec3(_941, _944, _947), vec3(_3520 * _3514, _3520 * _3515, _3520 * _3516));
                        float _4987 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                        float _3531 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                        float _3535 = ((_3531 * _3531) * (_3513 + (-1.0))) + 1.0;
                        float _3536 = _3472 * _3512;
                        float _3537 = _3536 * _3536;
                        float _3540 = ((1.0 - _3537) * _3462) + _3537;
                        float _4998 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                        float _3541 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                        float _3542 = 1.0 - _3512;
                        float _3552 = (0.5 / (((_3541 * ((_3527 * _3542) + _3512)) + 9.9999999392252902907785028219223e-09) + (((_3541 * _3542) + _3512) * _3527))) * _3541;
                        float _5009 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                        float _3563 = (((_3513 * 3.1415927410125732421875) * (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0)))) / ((_3535 * _3535) * ((_3479 * 2.1991131305694580078125) + 3.141590118408203125))) * _3468;
                        _3316 = (_3483 * _3431.x) + _3389;
                        _3317 = (_3483 * _3431.y) + _3390;
                        _3318 = (_3483 * _3431.z) + _3391;
                        _3313 = (_3563 * _3448.x) + _3386;
                        _3314 = (_3563 * _3448.y) + _3387;
                        _3315 = (_3563 * _3448.z) + _3388;
                        if (_3393 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3386 = _3313;
                            _3387 = _3314;
                            _3388 = _3315;
                            _3389 = _3316;
                            _3390 = _3317;
                            _3391 = _3318;
                            _3392 = _3393;
                        }
                    }
                    frontier_phi_71_pred = _3318;
                    frontier_phi_71_pred_1 = _3317;
                    frontier_phi_71_pred_2 = _3316;
                    frontier_phi_71_pred_3 = _3315;
                    frontier_phi_71_pred_4 = _3314;
                    frontier_phi_71_pred_5 = _3313;
                }
                _3100 = frontier_phi_71_pred;
                _3098 = frontier_phi_71_pred_1;
                _3096 = frontier_phi_71_pred_2;
                _3094 = frontier_phi_71_pred_3;
                _3092 = frontier_phi_71_pred_4;
                _3090 = frontier_phi_71_pred_5;
                uint _3248 = _3247 + 1u;
                if (_3248 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3241 = _3090;
                    _3242 = _3092;
                    _3243 = _3094;
                    _3244 = _3096;
                    _3245 = _3098;
                    _3246 = _3100;
                    _3247 = _3248;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
        }
        uvec4 _3103 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3104 = _3103.z;
        uint _3106 = (_3104 >> 8u) & 15u;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        float _3217;
        float _3219;
        if (((4294967295u << _3106) & _3009) == 0u)
        {
            _3209 = _3089;
            _3211 = _3091;
            _3213 = _3093;
            _3215 = _3095;
            _3217 = _3097;
            _3219 = _3099;
        }
        else
        {
            float _3234 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
            float _3235 = _3234 * _2087;
            float _3236 = _3234 * _2088;
            float _3237 = _3234 * _2089;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3106 < ((_3104 >> 12u) & 15u))
            {
                float _3210;
                float _3212;
                float _3214;
                float _3216;
                float _3218;
                float _3220;
                float _3369 = _3089;
                float _3370 = _3091;
                float _3371 = _3093;
                float _3372 = _3095;
                float _3373 = _3097;
                float _3374 = _3099;
                uint _3375 = _3106;
                uint _3384;
                bool _3385;
                for (;;)
                {
                    _3384 = texelFetch(g_lightClassification, int((((_3003 << 5u) + (_2989 << 9u)) + (_3375 << 2u)) >> 2u)).x;
                    _3385 = _3384 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3385)
                    {
                        frontier_phi_82_pred = _3374;
                        frontier_phi_82_pred_1 = _3373;
                        frontier_phi_82_pred_2 = _3372;
                        frontier_phi_82_pred_3 = _3371;
                        frontier_phi_82_pred_4 = _3370;
                        frontier_phi_82_pred_5 = _3369;
                    }
                    else
                    {
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3870;
                        float _3871;
                        float _3872;
                        float _3873;
                        float _3874;
                        float _3875;
                        float _3590 = _3369;
                        float _3591 = _3370;
                        float _3592 = _3371;
                        float _3593 = _3372;
                        float _3594 = _3373;
                        float _3595 = _3374;
                        uint _3596 = _3384;
                        uint _3597;
                        vec4 _3622;
                        float _3623;
                        vec4 _3638;
                        vec3 _3650;
                        vec4 _3665;
                        vec4 _3680;
                        float _3726;
                        bool _3727;
                        for (;;)
                        {
                            uint _3607 = ((_3375 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3596));
                            _3597 = (_3596 + 4294967295u) & _3596;
                            uint _3609 = _3607 * 40u;
                            _3622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 3u)).x));
                            _3623 = _3622.w;
                            uint _3625 = (_3607 * 40u) + 4u;
                            _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3640 = (_3607 * 40u) + 8u;
                            _3650 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x));
                            uint _3652 = (_3607 * 40u) + 16u;
                            _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            uint _3667 = (_3607 * 40u) + 20u;
                            _3680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 3u)).x));
                            uint _3682 = (_3607 * 40u) + 24u;
                            vec4 _3695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 3u)).x));
                            uint _3701 = (_3607 * 40u) + 28u;
                            vec4 _3714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 3u)).x));
                            _3726 = fma(_2089, _3714.z, fma(_2088, _3714.y, _3714.x * _2087)) + _3714.w;
                            _3727 = !((fma(_2089, _3695.z, fma(_2088, _3695.y, _3695.x * _2087)) + _3695.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3727)
                            {
                                float _3754 = _3622.x - _2087;
                                float _3755 = _3622.y - _2088;
                                float _3756 = _3622.z - _2089;
                                float _3757 = dot(vec3(_3754, _3755, _3756), vec3(_3754, _3755, _3756));
                                float _3760 = inversesqrt(_3757);
                                float _3761 = _3760 * _3754;
                                float _3762 = _3760 * _3755;
                                float _3763 = _3760 * _3756;
                                float _3767 = 1.0 - (_3757 / (_3623 * _3623));
                                float _5020 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3768 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3772 = sqrt(_3757) * _3638.w;
                                float _3774 = 1.39999997615814208984375 / (_3772 + 1.39999997615814208984375);
                                float _3775 = _3774 * _3774;
                                float _3778 = ((1.0 - _3775) * dot(vec3(_3761, _3762, _3763), vec3(_941, _944, _947))) + _3775;
                                float _3781 = _3772 * _3772;
                                float _3785 = (fma(_2089, _3665.z, fma(_2088, _3665.y, _3665.x * _2087)) + _3665.w) / _3726;
                                float _3786 = (fma(_2089, _3680.z, fma(_2088, _3680.y, _3680.x * _2087)) + _3680.w) / _3726;
                                float _3790 = 1.0 - dot(vec2(_3785, _3786), vec2(_3785, _3786));
                                float _5036 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3791 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                                float _3792 = _3791 * (((isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0))) * _3768) / ((_3781 * 0.699999988079071044921875) + 1.0));
                                float _3804 = exp2(log2(1.0 / ((_3781 * 3.5) + 5.0)) * 0.25);
                                float _3805 = 1.0 - _1001;
                                float _3812 = sqrt(1.0 - ((1.0 - (_3805 * _3805)) * (1.0 - (_3804 * _3804))));
                                float _3813 = _3812 * _3812;
                                float _3814 = _3813 * _3813;
                                float _3815 = _3761 - _3235;
                                float _3816 = _3762 - _3236;
                                float _3817 = _3763 - _3237;
                                float _3821 = inversesqrt(dot(vec3(_3815, _3816, _3817), vec3(_3815, _3816, _3817)));
                                float _3825 = dot(vec3(_941, _944, _947), vec3((-0.0) - _3235, (-0.0) - _3236, (-0.0) - _3237));
                                float _5047 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3828 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                                float _3829 = dot(vec3(_941, _944, _947), vec3(_3821 * _3815, _3821 * _3816, _3821 * _3817));
                                float _5058 = isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0));
                                float _3832 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
                                float _3836 = ((_3832 * _3832) * (_3814 + (-1.0))) + 1.0;
                                float _3837 = _3774 * _3813;
                                float _3838 = _3837 * _3837;
                                float _3844 = ((1.0 - _3838) * dot(vec3(_941, _944, _947), vec3(_3761, _3762, _3763))) + _3838;
                                float _5069 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3845 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
                                float _3846 = 1.0 - _3813;
                                float _3856 = (0.5 / (((_3845 * ((_3828 * _3846) + _3813)) + 9.9999999392252902907785028219223e-09) + (((_3845 * _3846) + _3813) * _3828))) * _3845;
                                float _5080 = isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : max(_3856, 0.0));
                                float _3866 = (_3791 * _3768) * (((_3814 * 3.1415927410125732421875) * (isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0)))) / ((_3836 * _3836) * ((_3781 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3792 * _3638.z;
                                frontier_phi_88_pred_1 = _3792 * _3638.y;
                                frontier_phi_88_pred_2 = _3792 * _3638.x;
                                frontier_phi_88_pred_3 = _3866 * _3650.z;
                                frontier_phi_88_pred_4 = _3866 * _3650.y;
                                frontier_phi_88_pred_5 = _3866 * _3650.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3875 = frontier_phi_88_pred;
                            _3874 = frontier_phi_88_pred_1;
                            _3873 = frontier_phi_88_pred_2;
                            _3872 = frontier_phi_88_pred_3;
                            _3871 = frontier_phi_88_pred_4;
                            _3870 = frontier_phi_88_pred_5;
                            _3580 = _3873 + _3593;
                            _3581 = _3874 + _3594;
                            _3582 = _3875 + _3595;
                            _3577 = _3870 + _3590;
                            _3578 = _3871 + _3591;
                            _3579 = _3872 + _3592;
                            if (_3597 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3590 = _3577;
                                _3591 = _3578;
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3581;
                                _3595 = _3582;
                                _3596 = _3597;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3582;
                        frontier_phi_82_pred_1 = _3581;
                        frontier_phi_82_pred_2 = _3580;
                        frontier_phi_82_pred_3 = _3579;
                        frontier_phi_82_pred_4 = _3578;
                        frontier_phi_82_pred_5 = _3577;
                    }
                    _3220 = frontier_phi_82_pred;
                    _3218 = frontier_phi_82_pred_1;
                    _3216 = frontier_phi_82_pred_2;
                    _3214 = frontier_phi_82_pred_3;
                    _3212 = frontier_phi_82_pred_4;
                    _3210 = frontier_phi_82_pred_5;
                    uint _3376 = _3375 + 1u;
                    if (_3376 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3369 = _3210;
                        _3370 = _3212;
                        _3371 = _3214;
                        _3372 = _3216;
                        _3373 = _3218;
                        _3374 = _3220;
                        _3375 = _3376;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3216;
                frontier_phi_63_64_ladder_1 = _3220;
                frontier_phi_63_64_ladder_2 = _3218;
                frontier_phi_63_64_ladder_3 = _3214;
                frontier_phi_63_64_ladder_4 = _3212;
                frontier_phi_63_64_ladder_5 = _3210;
            }
            else
            {
                frontier_phi_63_64_ladder = _3095;
                frontier_phi_63_64_ladder_1 = _3099;
                frontier_phi_63_64_ladder_2 = _3097;
                frontier_phi_63_64_ladder_3 = _3093;
                frontier_phi_63_64_ladder_4 = _3091;
                frontier_phi_63_64_ladder_5 = _3089;
            }
            _3209 = frontier_phi_63_64_ladder_5;
            _3211 = frontier_phi_63_64_ladder_4;
            _3213 = frontier_phi_63_64_ladder_3;
            _3215 = frontier_phi_63_64_ladder;
            _3217 = frontier_phi_63_64_ladder_2;
            _3219 = frontier_phi_63_64_ladder_1;
        }
        float _3224 = isnan(1.0) ? _985 : (isnan(_985) ? 1.0 : min(_985, 1.0));
        _3022 = (_3224 * _3215) + _2553;
        _3024 = (_3224 * _3217) + _2555;
        _3026 = (_3224 * _3219) + _2557;
        _3028 = ((_3209 * 0.039999999105930328369140625) * _3224) + _2876;
        _3030 = ((_3211 * 0.039999999105930328369140625) * _3224) + _2878;
        _3032 = ((_3213 * 0.039999999105930328369140625) * _3224) + _2880;
    }
    else
    {
        _3022 = _2553;
        _3024 = _2555;
        _3026 = _2557;
        _3028 = _2876;
        _3030 = _2878;
        _3032 = _2880;
    }
    float _5096 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _5107 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _5118 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _3049 = ((isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0))) * (_3022 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _985))) + ((_3028 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1821)) * cbPerFrame._m0[3u].x);
    float _3050 = ((isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0))) * (_3024 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _985))) + ((_3030 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1821)) * cbPerFrame._m0[3u].x);
    float _3051 = ((isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0))) * (_3026 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _985))) + ((_3032 + ((isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0))) * _1821)) * cbPerFrame._m0[3u].x);
    uint _3052 = _281 + 6u;
    float _3060 = _922 / cbSceneParam._m0[86u].x;
    float _3061 = _923 / cbSceneParam._m0[86u].y;
    vec4 _3075 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3060, _3061, (log2((isnan(cbSceneParam._m0[77u].w) ? _844 : (isnan(_844) ? cbSceneParam._m0[77u].w : min(_844, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3077 = _3075.x;
    float _3078 = _3075.y;
    float _3079 = _3075.z;
    float _3080 = _3075.w;
    float _3151;
    float _3153;
    float _3155;
    float _3157;
    if (_844 > cbSceneParam._m0[78u].w)
    {
        float _3114 = isnan(_844) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _844 : min(cbSceneParam._m0[80u].w, _844));
        float _3115 = _3114 / _844;
        float _3126 = _3115 * _895;
        float _3127 = _896 * _3115;
        float _3128 = (-0.0) - _3127;
        float _3129 = _3115 * _897;
        float _3131 = (cbSceneParam._m0[77u].w * _3128) / _3114;
        float _3132 = _3131 + cbSceneParam._m0[79u].w;
        float _3133 = cbSceneParam._m0[79u].w - _3127;
        float _3139 = sqrt(((_3126 * _3126) + (_3127 * _3127)) + (_3129 * _3129));
        float _3142 = (1.0 - (cbSceneParam._m0[77u].w / _3114)) * _3139;
        float _3147 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3149 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3326;
        if (abs((_3128 - _3131) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3326 = ((((_3132 > 0.0) ? exp2(_3147 * _3132) : (2.0 - exp2(_3149 * _3132))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3142;
        }
        else
        {
            float _3270 = 1.0 / cbSceneParam._m0[80u].x;
            float _3271 = isnan(_3133) ? _3132 : (isnan(_3132) ? _3133 : max(_3132, _3133));
            float _3272 = isnan(_3133) ? _3132 : (isnan(_3132) ? _3133 : min(_3132, _3133));
            float _3281 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : min(_3271, 0.0));
            float _3282 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : min(_3272, 0.0));
            _3326 = ((abs(_3139 / _3128) * cbSceneParam._m0[80u].y) * ((((_3281 - _3282) * 2.0) - ((exp2(_3147 * (isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0)))) - exp2(_3147 * (isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0))))) * _3270)) - ((exp2(_3149 * _3281) - exp2(_3149 * _3282)) * _3270))) + (_3142 * cbSceneParam._m0[80u].z);
        }
        vec4 _3328 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3060, _3061, 1.0), 0.0);
        float _3337 = exp2((_3326 * (-1.44269502162933349609375)) * (1.0 - _3328.w));
        float _3338 = log2(_3337);
        float _3354 = log2(_3080);
        _3151 = (exp2(_3354 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3338 * cbSceneParam._m0[78u].x)) * _3328.x) / cbSceneParam._m0[78u].x)) + _3077;
        _3153 = (exp2(_3354 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3338 * cbSceneParam._m0[78u].y)) * _3328.y) / cbSceneParam._m0[78u].y)) + _3078;
        _3155 = (exp2(_3354 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3338 * cbSceneParam._m0[78u].z)) * _3328.z) / cbSceneParam._m0[78u].z)) + _3079;
        _3157 = _3337 * _3080;
    }
    else
    {
        _3151 = _3077;
        _3153 = _3078;
        _3155 = _3079;
        _3157 = _3080;
    }
    bool _3364;
    vec4 _3167;
    vec4 _3189;
    float _3191;
    float _3195;
    float _3196;
    float _3197;
    float _3198;
    bool _3208;
    for (;;)
    {
        _3167 = cbMatDynParam._m0[0u];
        float _3169 = roundEven(_3167.y);
        bool _3170 = _3169 == 3.0;
        float _3171 = log2(_3157);
        float _3178 = exp2(_3171 * cbSceneParam._m0[78u].x) * _3049;
        float _3179 = exp2(_3171 * cbSceneParam._m0[78u].y) * _3050;
        float _3180 = exp2(_3171 * cbSceneParam._m0[78u].z) * _3051;
        float _3187 = _911 + (-0.5);
        _3189 = cbMtdParam._m0[1u];
        _3191 = _3189.y * _3187;
        float _3194 = (_3169 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3195 = _3194 * (_3170 ? _3178 : (_3178 + (cbSceneParam._m0[72u].w * _3151)));
        _3196 = _3194 * (_3170 ? _3179 : (_3179 + (cbSceneParam._m0[72u].w * _3153)));
        _3197 = _3194 * (_3170 ? _3180 : (_3180 + (cbSceneParam._m0[72u].w * _3155)));
        _3198 = _3187 * 0.999000012874603271484375;
        _3208 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3208)
        {
            if ((cbInstanceData._m0[_281 + 7u].x + _3198) < 0.5)
            {
                _3364 = true;
                break;
            }
        }
        uint _3305 = _960 + uint(_3167.w);
        if ((cbInstanceData._m0[_3305].w < 1.0) && ((cbInstanceData._m0[_3305].w + _3198) < 0.5))
        {
            _3364 = true;
            break;
        }
        if ((_3191 + 1.0) < _3189.x)
        {
            _3364 = true;
            break;
        }
        _3364 = false;
        break;
    }
    float _3568;
    if (_3364)
    {
        discard_state = true;
        _3568 = 0.0;
    }
    else
    {
        _3568 = cbInstanceData._m0[_3052].w;
    }
    SV_Target.x = _3195;
    SV_Target.y = _3196;
    SV_Target.z = _3197;
    SV_Target.w = _3568;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3052].w;
    discard_exit();
}


