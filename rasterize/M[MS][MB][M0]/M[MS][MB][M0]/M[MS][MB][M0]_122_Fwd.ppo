#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1356;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _235 = _234 * _226;
    float _236 = _234 * _227;
    float _237 = _234 * _228;
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = _248 * TANGENT.x;
    float _250 = _248 * TANGENT.y;
    float _251 = _248 * TANGENT.z;
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3661 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3672 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3683 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _392 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _404 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _421 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_394 - _404) * cbMtdParam._m0[24u].x) + _404) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3694 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _429 = (_422 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _430 = (_422 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _431 = (_422 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    float _435 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _429;
    float _438 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _430;
    float _441 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _431;
    float _448 = ((_429 - _435) * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) + _435;
    float _449 = ((_430 - _438) * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) + _438;
    float _450 = ((_431 - _441) * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) + _441;
    vec4 _468 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _495 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _512 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _514 = _512.x;
    float _515 = _512.y;
    float _516 = _512.z;
    float _525 = ((_495.z - _516) * _422) + _516;
    float _528 = ((((_495.x - _514) * _422) + _514) * 2.0) + (-1.0);
    float _529 = ((((_495.y - _515) * _422) + _515) * 2.0) + (-1.0);
    float _530 = dot(vec2(_528, _529), vec2(_528, _529));
    float _3705 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _535 = sqrt(1.0 - (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))));
    vec4 _555 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _567 = (_528 + ((((_468.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_555.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _568 = (_529 + ((((_468.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_555.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _571 = fma(_535, _242, fma(_568, _249, _567 * _235));
    float _574 = fma(_535, _243, fma(_568, _250, _567 * _236));
    float _577 = fma(_535, _244, fma(_568, _251, _567 * _237));
    float _581 = inversesqrt(dot(vec3(_571, _574, _577), vec3(_571, _574, _577)));
    vec4 _610 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _612 = _610.x;
    float _613 = 1.0 - _612;
    float _617 = ((_612 - _613) * cbMtdParam._m0[24u].z) + _613;
    float _619 = (cbMtdParam._m0[19u].x + dot(vec4(_581 * _571, _581 * _574, _581 * _577, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_617 * cbMtdParam._m0[21u].z);
    float _3716 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _622 = (-0.0) - cbMtdParam._m0[24u].y;
    float _624 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _624 : (isnan(_624) ? 1.0 : min(_624, 1.0));
    float _632 = _620 - ((_620 * TEXCOORD_8.x) * _625);
    float _633 = _620 - ((_620 * TEXCOORD_8.y) * _625);
    float _634 = _620 - ((_620 * TEXCOORD_8.z) * _625);
    float _641 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _645 = ((isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : min(_641, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _653 = (_645 - (((_617 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _645))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3747 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _654 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _658 = ((_632 * (cbMtdParam._m0[17u].x - _448)) * _654) + _448;
    float _659 = ((_633 * (cbMtdParam._m0[17u].y - _449)) * _654) + _449;
    float _660 = ((_634 * (cbMtdParam._m0[17u].z - _450)) * _654) + _450;
    vec4 _672 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _674 = _672.x;
    float _675 = 1.0 - _674;
    float _700 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_674 - _675) * cbMtdParam._m0[24u].w) + _675) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3758 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _709 = ((((cbMtdParam._m0[10u].x - _658) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _701) + _658;
    float _710 = ((((cbMtdParam._m0[10u].y - _659) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _701) + _659;
    float _711 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _660)) * _701) + _660;
    float _716 = (((_468.z - _525) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _525;
    float _720 = ((_555.z - _716) * cbMtdParam._m0[19u].w) + _716;
    vec4 _734 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _741 = (_734.x * 2.0) + (-1.0);
    float _742 = (_734.y * 2.0) + (-1.0);
    float _743 = dot(vec2(_741, _742), vec2(_741, _742));
    float _3769 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _752 = (((_734.z - _720) * _632) * _654) + _720;
    float _755 = ((cbMtdParam._m0[23u].y - _752) * _701) + _752;
    vec4 _774 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _780 = (_774.x * 2.0) + (-1.0);
    float _781 = (_774.y * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _3780 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _802 = (((cbMtdParam._m0[21u].x * _567) + ((_741 - _567) * _632)) * _654) + _567;
    float _803 = (((cbMtdParam._m0[21u].x * _568) + ((_742 - _568) * _633)) * _654) + _568;
    float _804 = (((sqrt(1.0 - (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) - _535) * _634) * _654) + _535;
    float _815 = (((_780 - _802) + (_802 * cbMtdParam._m0[22u].z)) * _701) + _802;
    float _816 = (((_781 - _803) + (_803 * cbMtdParam._m0[22u].z)) * _701) + _803;
    float _817 = ((sqrt(1.0 - (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) - _804) * _701) + _804;
    float _821 = cbMtdParam._m0[22u].x + _555.w;
    float _824 = fma(_817, _242, fma(_816, _249, _815 * _235));
    float _827 = fma(_817, _243, fma(_816, _250, _815 * _236));
    float _830 = fma(_817, _244, fma(_816, _251, _815 * _237));
    float _834 = inversesqrt(dot(vec3(_824, _827, _830), vec3(_824, _827, _830)));
    float _835 = _834 * _824;
    float _836 = _834 * _827;
    float _837 = _834 * _830;
    float _3791 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _838 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _3813 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _3824 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _3835 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _856 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _907 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _897);
    float _908 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _897);
    float _909 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _897);
    float _913 = inversesqrt(dot(vec3(_907, _908, _909), vec3(_907, _908, _909)));
    float _914 = _907 * _913;
    float _915 = _908 * _913;
    float _916 = _909 * _913;
    float _922 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _923 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _941 = fma(_837, cbSceneParam._m0[5u].z, fma(_836, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _835));
    float _944 = fma(_837, cbSceneParam._m0[6u].z, fma(_836, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _835));
    float _947 = fma(_837, cbSceneParam._m0[7u].z, fma(_836, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _835));
    uint _961 = (_273 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _967 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_961].x;
    float _968 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) * cbInstanceData._m0[_961].y;
    float _969 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) * cbInstanceData._m0[_961].z;
    float _3846 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _972 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    vec4 _981 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _922, cbSceneParam._m0[86u].y * _923));
    float _985 = ((isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * TEXCOORD_5.w) * _981.x;
    float _986 = dot(vec3(_835, _836, _837), vec3(_914, _915, _916));
    float _989 = _986 * 2.0;
    float _993 = (_989 * _835) - _914;
    float _994 = (_989 * _836) - _915;
    float _995 = (_989 * _837) - _916;
    float _999 = abs(dot(vec3(_914, _915, _916), vec3(_835, _836, _837)));
    float _3879 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1001 = sqrt(_838);
    float _1014 = exp2((_1001 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1001 * 3.0));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1355;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1080 = fma(_1054, cbModelParam._m0[26u].z, fma(_1050, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1046));
        float _1084 = fma(_1054, cbModelParam._m0[27u].z, fma(_1050, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1046));
        float _1088 = fma(_1054, cbModelParam._m0[28u].z, fma(_1050, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1046));
        float _1113 = _1046 + _835;
        float _1114 = _1050 + _836;
        float _1115 = _1054 + _837;
        float _1125 = fma(_1115, cbModelParam._m0[26u].z, fma(_1114, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1113)) - _1080;
        float _1126 = fma(_1115, cbModelParam._m0[27u].z, fma(_1114, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1113)) - _1084;
        float _1127 = fma(_1115, cbModelParam._m0[28u].z, fma(_1114, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1113)) - _1088;
        float _1131 = inversesqrt(dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127)));
        float _1144 = ((_1131 * _1125) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1080 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1131 * _1126) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1084 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1131 * _1127) / cbModelParam._m0[34u].z) + ((((((_1088 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        float _1183 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1149.x + (-0.5));
        float _1185 = _1183 * (_1149.y + (-0.5));
        float _1186 = _1183 * (_1149.z + (-0.5));
        float _1193 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1156.x + (-0.5));
        float _1195 = _1193 * (_1156.y + (-0.5));
        float _1196 = _1193 * (_1156.z + (-0.5));
        float _1203 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1163.x + (-0.5));
        float _1205 = _1203 * (_1163.y + (-0.5));
        float _1206 = _1203 * (_1163.z + (-0.5));
        float _1213 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1170.x + (-0.5));
        float _1215 = _1213 * (_1170.y + (-0.5));
        float _1216 = _1213 * (_1170.z + (-0.5));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = _1184 * 0.5;
        float _1221 = _1194 * 0.5;
        float _1222 = _1204 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1237 = (dot(vec3(_835, _836, _837), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1247 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3927 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1249 + 1.0))) + _1254) * _1217;
        float _1264 = _1185 * 0.5;
        float _1265 = _1195 * 0.5;
        float _1266 = _1205 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_835, _836, _837), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _3960 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1291 + 1.0))) + _1296) * _1218;
        float _1306 = _1186 * 0.5;
        float _1307 = _1196 * 0.5;
        float _1308 = _1206 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_835, _836, _837), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _3993 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1333 + 1.0))) + _1338) * _1219;
        _1355 = _1186;
        _1357 = _1185;
        _1358 = _1184;
        _1359 = _1196;
        _1360 = _1195;
        _1361 = _1194;
        _1362 = _1206;
        _1363 = _1205;
        _1364 = _1204;
        _1365 = _1219;
        _1366 = _1218;
        _1367 = _1217;
        _1368 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
    }
    else
    {
        _1355 = _1356;
        _1357 = _1356;
        _1358 = _1356;
        _1359 = _1356;
        _1360 = _1356;
        _1361 = _1356;
        _1362 = _1356;
        _1363 = _1356;
        _1364 = _1356;
        _1365 = _1356;
        _1366 = _1356;
        _1367 = _1356;
        _1368 = 0.0;
        _1369 = 0.0;
        _1370 = 0.0;
    }
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1395 = fma(_1054, cbModelParam._m0[30u].z, fma(_1050, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1046));
        float _1399 = fma(_1054, cbModelParam._m0[31u].z, fma(_1050, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1046));
        float _1403 = fma(_1054, cbModelParam._m0[32u].z, fma(_1050, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1046));
        float _1426 = _1046 + _835;
        float _1427 = _1050 + _836;
        float _1428 = _1054 + _837;
        float _1438 = fma(_1428, cbModelParam._m0[30u].z, fma(_1427, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1426)) - _1395;
        float _1439 = fma(_1428, cbModelParam._m0[31u].z, fma(_1427, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1426)) - _1399;
        float _1440 = fma(_1428, cbModelParam._m0[32u].z, fma(_1427, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1426)) - _1403;
        float _1444 = inversesqrt(dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440)));
        float _1457 = ((_1444 * _1438) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1395 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1458 = ((_1444 * _1439) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1399 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1459 = ((_1444 * _1440) / cbModelParam._m0[35u].z) + ((((((_1403 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        float _1494 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1461.x + (-0.5));
        float _1496 = _1494 * (_1461.y + (-0.5));
        float _1497 = _1494 * (_1461.z + (-0.5));
        float _1504 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1468.x + (-0.5));
        float _1506 = _1504 * (_1468.y + (-0.5));
        float _1507 = _1504 * (_1468.z + (-0.5));
        float _1514 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1475.x + (-0.5));
        float _1516 = _1514 * (_1475.y + (-0.5));
        float _1517 = _1514 * (_1475.z + (-0.5));
        float _1524 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1482.x + (-0.5));
        float _1526 = _1524 * (_1482.y + (-0.5));
        float _1527 = _1524 * (_1482.z + (-0.5));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = _1495 * 0.5;
        float _1532 = _1505 * 0.5;
        float _1533 = _1515 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_835, _836, _837), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4056 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1558 + 1.0))) + _1563) * _1528;
        float _1573 = _1496 * 0.5;
        float _1574 = _1506 * 0.5;
        float _1575 = _1516 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_835, _836, _837), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4089 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1600 + 1.0))) + _1605) * _1529;
        float _1615 = _1497 * 0.5;
        float _1616 = _1507 * 0.5;
        float _1617 = _1517 * 0.5;
        float _1618 = dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617));
        float _1623 = (_1618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1618);
        float _1631 = (dot(vec3(_835, _836, _837), vec3(_1623 * _1615, _1623 * _1616, _1623 * _1617)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1640 = sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1642 = _1641 * 2.0;
        float _1646 = (1.0 - _1641) / (_1641 + 1.0);
        float _4122 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1656 = ((((1.0 - _1647) * (_1642 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1642 + 1.0))) + _1647) * _1530;
        _1664 = _1497;
        _1665 = _1496;
        _1666 = _1495;
        _1667 = _1507;
        _1668 = _1506;
        _1669 = _1505;
        _1670 = _1517;
        _1671 = _1516;
        _1672 = _1515;
        _1673 = _1530;
        _1674 = _1529;
        _1675 = _1528;
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)));
    }
    else
    {
        _1664 = _1356;
        _1665 = _1356;
        _1666 = _1356;
        _1667 = _1356;
        _1668 = _1356;
        _1669 = _1356;
        _1670 = _1356;
        _1671 = _1356;
        _1672 = _1356;
        _1673 = _1356;
        _1674 = _1356;
        _1675 = _1356;
        _1676 = 0.0;
        _1677 = 0.0;
        _1678 = 0.0;
    }
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1368)) + _1368;
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1369)) + _1369;
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1370)) + _1370;
    float _1711 = fma(_1690, cbSceneParam._m0[89u].z, fma(_1689, cbSceneParam._m0[89u].y, _1688 * cbSceneParam._m0[89u].x));
    float _1714 = fma(_1690, cbSceneParam._m0[90u].z, fma(_1689, cbSceneParam._m0[90u].y, _1688 * cbSceneParam._m0[90u].x));
    float _1717 = fma(_1690, cbSceneParam._m0[91u].z, fma(_1689, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1688));
    float _1732 = _993 * 0.5;
    float _1733 = _994 * 0.5;
    float _1734 = _995 * 0.5;
    float _1735 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1738 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1741 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1775;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1748 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1355, _1359, _1362, _1365));
        float _1752 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1357, _1360, _1363, _1366));
        float _1756 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1358, _1361, _1364, _1367));
        float _1763 = dot(vec4(cbModelParam._m0[39u]), vec4(_1732, _1733, _1734, 1.0));
        _1775 = dot(vec3(isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1763) ? 0.0 : (isnan(0.0) ? _1763 : max(0.0, _1763))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1775 = 1.0;
    }
    float _1786;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1777 = dot(vec4(cbModelParam._m0[40u]), vec4(_1732, _1733, _1734, 1.0));
        _1786 = dot(vec3(isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1777) ? 0.0 : (isnan(0.0) ? _1777 : max(0.0, _1777))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1786 = 1.0;
    }
    float _1790 = (_1786 * cbModelParam._m0[1u].x) + (_1775 * (1.0 - cbModelParam._m0[1u].x));
    float _1800 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _838);
    float _1801 = isnan(_1800) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1800 : min(cbModelParam._m0[25u].z, _1800));
    float _1882;
    float _1884;
    float _1886;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1849 = fma(_1054, cbModelParam._m0[13u].z, fma(_1050, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1046)) + cbModelParam._m0[13u].w;
        float _1853 = fma(_1054, cbModelParam._m0[14u].z, fma(_1050, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1046)) + cbModelParam._m0[14u].w;
        float _1857 = fma(_1054, cbModelParam._m0[15u].z, fma(_1050, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1046)) + cbModelParam._m0[15u].w;
        float _1860 = fma(_995, cbModelParam._m0[13u].z, fma(_994, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993));
        float _1863 = fma(_995, cbModelParam._m0[14u].z, fma(_994, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993));
        float _1866 = fma(_995, cbModelParam._m0[15u].z, fma(_994, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993));
        float _1894;
        if (_1860 > 0.0)
        {
            _1894 = abs((1.0 - _1849) / _1860);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1849 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1894 = frontier_phi_14_12_ladder;
        }
        float _2095;
        if (_1863 > 0.0)
        {
            _2095 = abs((1.0 - _1853) / _1863);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1853 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2095 = frontier_phi_23_19_ladder;
        }
        float _2338;
        if (_1866 > 0.0)
        {
            _2338 = abs((1.0 - _1857) / _1866);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1857 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2338 = frontier_phi_35_30_ladder;
        }
        float _2340 = isnan(_2095) ? _1894 : (isnan(_1894) ? _2095 : min(_1894, _2095));
        float _2341 = isnan(_2338) ? _2340 : (isnan(_2340) ? _2338 : min(_2340, _2338));
        float _2345 = (_2341 * _1860) + _1849;
        float _2346 = (_2341 * _1863) + _1853;
        float _2347 = (_2341 * _1866) + _1857;
        float _2348 = _2341 * 9.9999997473787516355514526367188e-05;
        float _2350 = (-1.0) - _2348;
        float _2352 = _2348 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2347 > _2352) || ((_2347 < _2350) || ((_2346 > _2352) || ((_2346 < _2350) || ((_2345 < _2350) || (_2345 > _2352))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2471 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2347, cbModelParam._m0[9u].z, fma(_2346, cbModelParam._m0[9u].y, _2345 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2347, cbModelParam._m0[10u].z, fma(_2346, cbModelParam._m0[10u].y, _2345 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2347, cbModelParam._m0[11u].z, fma(_2346, cbModelParam._m0[11u].y, _2345 * cbModelParam._m0[11u].x))), _1801);
            frontier_phi_13_35_ladder = _2471.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2471.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2471.x * cbModelParam._m0[1u].y;
        }
        _1882 = frontier_phi_13_35_ladder_2;
        _1884 = frontier_phi_13_35_ladder_1;
        _1886 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1870 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_993, _994, _995), _1801);
        _1882 = _1870.x * cbModelParam._m0[1u].y;
        _1884 = _1870.y * cbModelParam._m0[1u].y;
        _1886 = _1870.z * cbModelParam._m0[1u].y;
    }
    float _1890 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _838);
    float _1891 = isnan(_1890) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1890 : min(cbModelParam._m0[25u].w, _1890));
    float _1981;
    float _1983;
    float _1985;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1945 = fma(_1054, cbModelParam._m0[21u].z, fma(_1050, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1046)) + cbModelParam._m0[21u].w;
        float _1949 = fma(_1054, cbModelParam._m0[22u].z, fma(_1050, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1046)) + cbModelParam._m0[22u].w;
        float _1953 = fma(_1054, cbModelParam._m0[23u].z, fma(_1050, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1046)) + cbModelParam._m0[23u].w;
        float _1956 = fma(_995, cbModelParam._m0[21u].z, fma(_994, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993));
        float _1959 = fma(_995, cbModelParam._m0[22u].z, fma(_994, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993));
        float _1962 = fma(_995, cbModelParam._m0[23u].z, fma(_994, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993));
        float _2100;
        if (_1956 > 0.0)
        {
            _2100 = abs((1.0 - _1945) / _1956);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1945 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2100 = frontier_phi_25_21_ladder;
        }
        float _2365;
        if (_1959 > 0.0)
        {
            _2365 = abs((1.0 - _1949) / _1959);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1949 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2365 = frontier_phi_37_32_ladder;
        }
        float _2570;
        if (_1962 > 0.0)
        {
            _2570 = abs((1.0 - _1953) / _1962);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1953 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2570 = frontier_phi_46_43_ladder;
        }
        float _2572 = isnan(_2365) ? _2100 : (isnan(_2100) ? _2365 : min(_2100, _2365));
        float _2573 = isnan(_2570) ? _2572 : (isnan(_2572) ? _2570 : min(_2572, _2570));
        float _2577 = (_2573 * _1956) + _1945;
        float _2578 = (_2573 * _1959) + _1949;
        float _2579 = (_2573 * _1962) + _1953;
        float _2580 = _2573 * 9.9999997473787516355514526367188e-05;
        float _2581 = (-1.0) - _2580;
        float _2583 = _2580 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2579 > _2583) || ((_2579 < _2581) || ((_2578 > _2583) || ((_2578 < _2581) || ((_2577 < _2581) || (_2577 > _2583))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2778 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2579, cbModelParam._m0[17u].z, fma(_2578, cbModelParam._m0[17u].y, _2577 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2579, cbModelParam._m0[18u].z, fma(_2578, cbModelParam._m0[18u].y, _2577 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2579, cbModelParam._m0[19u].z, fma(_2578, cbModelParam._m0[19u].y, _2577 * cbModelParam._m0[19u].x))), _1891);
            frontier_phi_22_46_ladder = _2778.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2778.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2778.x * cbModelParam._m0[1u].z;
        }
        _1981 = frontier_phi_22_46_ladder_2;
        _1983 = frontier_phi_22_46_ladder_1;
        _1985 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1965 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_993, _994, _995), _1891);
        _1981 = _1965.x * cbModelParam._m0[1u].z;
        _1983 = _1965.y * cbModelParam._m0[1u].z;
        _1985 = _1965.z * cbModelParam._m0[1u].z;
    }
    float _1997 = ((((1.0 - _1014) * ((_1001 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1014 * _1001)) * _985;
    float _1998 = _1997 * ((cbModelParam._m0[1u].w * (_1981 - _1882)) + _1882);
    float _1999 = _1997 * ((cbModelParam._m0[1u].w * (_1983 - _1884)) + _1884);
    float _2000 = _1997 * ((cbModelParam._m0[1u].w * (_1985 - _1886)) + _1886);
    float _2003 = fma(_2000, cbSceneParam._m0[89u].z, fma(_1999, cbSceneParam._m0[89u].y, _1998 * cbSceneParam._m0[89u].x));
    float _2006 = fma(_2000, cbSceneParam._m0[90u].z, fma(_1999, cbSceneParam._m0[90u].y, _1998 * cbSceneParam._m0[90u].x));
    float _2009 = fma(_2000, cbSceneParam._m0[91u].z, fma(_1999, cbSceneParam._m0[91u].y, _1998 * cbSceneParam._m0[91u].x));
    uvec4 _2019 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2021 = _2019.x * 14u;
    uint _2022 = _2021 + 13u;
    float _2029 = _985 + (-1.0);
    float _2034 = (cbLight._m0[_2022].x * _2029) + 1.0;
    float _2035 = (cbLight._m0[_2022].y * _2029) + 1.0;
    float _2036 = (cbLight._m0[_2022].z * _2029) + 1.0;
    float _2037 = (cbLight._m0[_2022].w * _2029) + 1.0;
    uint _2038 = _2021 + 5u;
    float _2044 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
    uint _2048 = _2021 + 4u;
    float _2054 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
    uint _2058 = _2021 | 1u;
    float _2069 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_835, _836, _837));
    float _2072 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_835, _836, _837));
    float _4258 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _4269 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2077 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * 0.3183098733425140380859375;
    float _2079 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * 0.3183098733425140380859375;
    float _2086 = ((cbLight._m0[_2038].x * _2044) * _2079) + ((cbLight._m0[_2048].x * _2054) * _2077);
    float _2087 = ((_2044 * cbLight._m0[_2038].y) * _2079) + ((_2054 * cbLight._m0[_2048].y) * _2077);
    float _2088 = ((_2044 * cbLight._m0[_2038].z) * _2079) + ((_2054 * cbLight._m0[_2048].z) * _2077);
    uvec4 _2092 = floatBitsToUint(cbLight._m0[_2021 + 12u]);
    bool _2094 = _2092.x == 0u;
    float _2105;
    float _2107;
    float _2109;
    if (_2094)
    {
        _2105 = _2086;
        _2107 = _2087;
        _2109 = _2088;
    }
    else
    {
        uint _2113 = _2021 + 6u;
        float _2129 = (dot(vec3(cbLight._m0[_2021 + 2u].xyz), vec3(_835, _836, _837)) * 0.5) + 0.5;
        float _2130 = _2129 * _2129;
        float _4280 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2131 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2132 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2105 = (((cbLight._m0[_2113].x * 0.3183098733425140380859375) * _2131) * _2132) + _2086;
        _2107 = (((cbLight._m0[_2113].y * 0.3183098733425140380859375) * _2131) * _2132) + _2087;
        _2109 = (((cbLight._m0[_2113].z * 0.3183098733425140380859375) * _2131) * _2132) + _2088;
    }
    bool _2112 = _2092.y == 0u;
    float _2150;
    float _2152;
    float _2154;
    if (_2112)
    {
        _2150 = _2105;
        _2152 = _2107;
        _2154 = _2109;
    }
    else
    {
        uint _2309 = _2021 + 7u;
        float _2325 = (dot(vec3(cbLight._m0[_2021 + 3u].xyz), vec3(_835, _836, _837)) * 0.5) + 0.5;
        float _2326 = _2325 * _2325;
        float _4296 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2327 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _2328 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2150 = (((cbLight._m0[_2309].x * 0.3183098733425140380859375) * _2327) * _2328) + _2105;
        _2152 = (((cbLight._m0[_2309].y * 0.3183098733425140380859375) * _2327) * _2328) + _2107;
        _2154 = (((cbLight._m0[_2309].z * 0.3183098733425140380859375) * _2327) * _2328) + _2109;
    }
    uint _2157 = _2021 + 8u;
    float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2021].w)) * _838) * 0.949999988079071044921875);
    float _2171 = _2170 * _2170;
    float _2172 = cbLight._m0[_2021].x + _914;
    float _2173 = cbLight._m0[_2021].y + _915;
    float _2174 = cbLight._m0[_2021].z + _916;
    float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
    float _2179 = _2178 * _2172;
    float _2180 = _2178 * _2173;
    float _2181 = _2178 * _2174;
    float _2182 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2021].xyz));
    float _4312 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _4323 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _2186 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2187 = dot(vec3(_835, _836, _837), vec3(_2179, _2180, _2181));
    float _4334 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2191 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_2179, _2180, _2181));
    float _4345 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2195 = _2171 * _2171;
    float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
    float _2210 = (exp2(log2(1.0 - (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2211 = 1.0 - _2171;
    float _2222 = (0.5 / (((_2186 * ((_2185 * _2211) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2211) + _2171) * _2185))) * _2185;
    float _4356 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2224 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
    uint _2235 = _2021 + 9u;
    float _2246 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _838) * 0.949999988079071044921875);
    float _2247 = _2246 * _2246;
    float _2248 = cbLight._m0[_2058].x + _914;
    float _2249 = cbLight._m0[_2058].y + _915;
    float _2250 = cbLight._m0[_2058].z + _916;
    float _2254 = inversesqrt(dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250)));
    float _2255 = _2254 * _2248;
    float _2256 = _2254 * _2249;
    float _2257 = _2254 * _2250;
    float _2258 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2058].xyz));
    float _4367 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _2262 = dot(vec3(_835, _836, _837), vec3(_2255, _2256, _2257));
    float _4378 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2266 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2255, _2256, _2257));
    float _4389 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2270 = _2247 * _2247;
    float _2274 = ((_2265 * _2265) * (_2270 + (-1.0))) + 1.0;
    float _2283 = (exp2(log2(1.0 - (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2284 = 1.0 - _2247;
    float _2294 = (0.5 / (((_2186 * ((_2261 * _2284) + _2247)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2284) + _2247) * _2261))) * _2261;
    float _4400 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2296 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2270 / ((_2274 * _2274) * 3.141590118408203125));
    float _2306 = (((_2283 * cbLight._m0[_2235].x) * _2296) * _2044) + (((_2210 * cbLight._m0[_2157].x) * _2224) * _2054);
    float _2307 = (((_2283 * cbLight._m0[_2235].y) * _2296) * _2044) + (((_2210 * cbLight._m0[_2157].y) * _2224) * _2054);
    float _2308 = (((_2283 * cbLight._m0[_2235].z) * _2296) * _2044) + (((_2210 * cbLight._m0[_2157].z) * _2224) * _2054);
    float _2370;
    float _2372;
    float _2374;
    if (_2094)
    {
        _2370 = _2306;
        _2372 = _2307;
        _2374 = _2308;
    }
    else
    {
        uint _2376 = _2021 + 2u;
        uint _2380 = _2021 + 10u;
        float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2376].w)) * _838) * 0.949999988079071044921875);
        float _2395 = _2394 * _2394;
        float _2396 = cbLight._m0[_2376].x + _914;
        float _2397 = cbLight._m0[_2376].y + _915;
        float _2398 = cbLight._m0[_2376].z + _916;
        float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
        float _2403 = _2402 * _2396;
        float _2404 = _2402 * _2397;
        float _2405 = _2402 * _2398;
        float _2406 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2376].xyz));
        float _4411 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2410 = dot(vec3(_835, _836, _837), vec3(_2403, _2404, _2405));
        float _4422 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2413 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2414 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_2403, _2404, _2405));
        float _4433 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2418 = _2395 * _2395;
        float _2422 = ((_2413 * _2413) * (_2418 + (-1.0))) + 1.0;
        float _2431 = (exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2432 = 1.0 - _2395;
        float _2442 = (0.5 / (((_2186 * ((_2409 * _2432) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2432) + _2395) * _2409))) * _2409;
        float _4444 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2444 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2418 / ((_2422 * _2422) * 3.141590118408203125));
        float _2445 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2370 = (((_2431 * cbLight._m0[_2380].x) * _2444) * _2445) + _2306;
        _2372 = (((_2431 * cbLight._m0[_2380].y) * _2444) * _2445) + _2307;
        _2374 = (((_2431 * cbLight._m0[_2380].z) * _2444) * _2445) + _2308;
    }
    float _2480;
    float _2482;
    float _2484;
    if (_2112)
    {
        _2480 = _2370;
        _2482 = _2372;
        _2484 = _2374;
    }
    else
    {
        uint _2491 = _2021 + 3u;
        uint _2495 = _2021 + 11u;
        float _2509 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2491].w)) * _838) * 0.949999988079071044921875);
        float _2510 = _2509 * _2509;
        float _2511 = cbLight._m0[_2491].x + _914;
        float _2512 = cbLight._m0[_2491].y + _915;
        float _2513 = cbLight._m0[_2491].z + _916;
        float _2517 = inversesqrt(dot(vec3(_2511, _2512, _2513), vec3(_2511, _2512, _2513)));
        float _2518 = _2517 * _2511;
        float _2519 = _2517 * _2512;
        float _2520 = _2517 * _2513;
        float _2521 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2491].xyz));
        float _4460 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2524 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2525 = dot(vec3(_835, _836, _837), vec3(_2518, _2519, _2520));
        float _4471 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2528 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2529 = dot(vec3(cbLight._m0[_2491].xyz), vec3(_2518, _2519, _2520));
        float _4482 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2533 = _2510 * _2510;
        float _2537 = ((_2528 * _2528) * (_2533 + (-1.0))) + 1.0;
        float _2546 = (exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2547 = 1.0 - _2510;
        float _2557 = (0.5 / (((_2186 * ((_2524 * _2547) + _2510)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2547) + _2510) * _2524))) * _2524;
        float _4493 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2559 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2533 / ((_2537 * _2537) * 3.141590118408203125));
        float _2560 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2480 = (((_2546 * cbLight._m0[_2495].x) * _2559) * _2560) + _2370;
        _2482 = (((_2546 * cbLight._m0[_2495].y) * _2559) * _2560) + _2372;
        _2484 = (((_2546 * cbLight._m0[_2495].z) * _2559) * _2560) + _2374;
    }
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    if (_2019.y == 0u)
    {
        float _2635 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2636 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2635;
        float _2637 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2635;
        float _2638 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2635;
        uvec4 _2650 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2651 = _2650.x;
        uint _2662 = uint((float(_2650.y) * floor(float(uint(cbSceneParam._m0[85u].y * _923) / _2651))) + floor(float(uint(cbSceneParam._m0[85u].x * _922) / _2651)));
        float _2672 = (log2(_2638 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2673 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        uint _2676 = uint(isnan(14.0) ? _2673 : (isnan(_2673) ? 14.0 : min(_2673, 14.0)));
        uvec4 _2681 = texelFetch(g_lightClusterGridBuffer, int(((_2676 << 2u) + (_2662 << 6u)) >> 2u));
        uint _2682 = _2681.x;
        uint _2683 = _2650.z;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        if (((((1u << ((_2683 >> 4u) & 15u)) + 4294967295u) & _2682) == 0u) || ((_2683 & 240u) == 0u))
        {
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
            _2791 = 0.0;
            _2793 = 0.0;
        }
        else
        {
            float _2784;
            float _2786;
            float _2788;
            float _2790;
            float _2792;
            float _2794;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            uint _2933 = 0u;
            uint _2942;
            bool _2943;
            for (;;)
            {
                _2942 = texelFetch(g_lightClassification, int((((_2676 << 5u) + (_2662 << 9u)) + (_2933 << 2u)) >> 2u)).x;
                _2943 = _2942 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2943)
                {
                    frontier_phi_61_pred = _2927;
                    frontier_phi_61_pred_1 = _2932;
                    frontier_phi_61_pred_2 = _2931;
                    frontier_phi_61_pred_3 = _2930;
                    frontier_phi_61_pred_4 = _2929;
                    frontier_phi_61_pred_5 = _2928;
                }
                else
                {
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    uint _3057;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2942;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    for (;;)
                    {
                        uint _3061 = uint(findLSB(_3057)) + (_2933 << 5u);
                        uint _3058 = (_3057 + 4294967295u) & _3057;
                        uint _3063 = _3061 * 48u;
                        vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 3u)).x));
                        uint _3083 = (_3061 * 48u) + 4u;
                        vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 3u)).x));
                        uint _3102 = (_3061 * 48u) + 8u;
                        vec3 _3113 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3102)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 2u)).x));
                        float _3117 = _3077.x - _2636;
                        float _3118 = _3077.y - _2637;
                        float _3119 = _3077.z - _2638;
                        float _3120 = dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119));
                        float _3123 = inversesqrt(_3120);
                        float _3124 = _3123 * _3117;
                        float _3125 = _3123 * _3118;
                        float _3126 = _3123 * _3119;
                        float _3127 = dot(vec3(_941, _944, _947), vec3(_3124, _3125, _3126));
                        float _3132 = 1.0 - (_3120 * _3077.w);
                        float _4519 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3133 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3134 = sqrt(_3120) * _3096.w;
                        float _3137 = 1.39999997615814208984375 / (_3134 + 1.39999997615814208984375);
                        float _3138 = _3137 * _3137;
                        float _3141 = ((1.0 - _3138) * _3127) + _3138;
                        float _3144 = _3134 * _3134;
                        float _3148 = ((isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))) * _3133) / ((_3144 * 0.699999988079071044921875) + 1.0);
                        float _3152 = (-0.0) - _2636;
                        float _3153 = (-0.0) - _2637;
                        float _3154 = (-0.0) - _2638;
                        float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                        float _3159 = _3158 * _3152;
                        float _3160 = _3158 * _3153;
                        float _3161 = _3158 * _3154;
                        float _3169 = exp2(log2(1.0 / ((_3144 * 3.5) + 5.0)) * 0.25);
                        float _3170 = 1.0 - _1001;
                        float _3177 = sqrt(1.0 - ((1.0 - (_3170 * _3170)) * (1.0 - (_3169 * _3169))));
                        float _3178 = _3177 * _3177;
                        float _3179 = _3178 * _3178;
                        float _3180 = _3159 + _3124;
                        float _3181 = _3160 + _3125;
                        float _3182 = _3161 + _3126;
                        float _3186 = inversesqrt(dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182)));
                        float _3190 = dot(vec3(_941, _944, _947), vec3(_3159, _3160, _3161));
                        float _4535 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3193 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3194 = dot(vec3(_941, _944, _947), vec3(_3186 * _3180, _3186 * _3181, _3186 * _3182));
                        float _4546 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3197 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3201 = ((_3197 * _3197) * (_3179 + (-1.0))) + 1.0;
                        float _3202 = _3137 * _3178;
                        float _3203 = _3202 * _3202;
                        float _3206 = ((1.0 - _3203) * _3127) + _3203;
                        float _4557 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3207 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3208 = 1.0 - _3178;
                        float _3218 = (0.5 / (((_3207 * ((_3193 * _3208) + _3178)) + 9.9999999392252902907785028219223e-09) + (((_3207 * _3208) + _3178) * _3193))) * _3207;
                        float _4568 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3229 = (((_3179 * 3.1415927410125732421875) * (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) / ((_3201 * _3201) * ((_3144 * 2.1991131305694580078125) + 3.141590118408203125))) * _3133;
                        _2986 = (_3148 * _3096.x) + _3054;
                        _2987 = (_3148 * _3096.y) + _3055;
                        _2988 = (_3148 * _3096.z) + _3056;
                        _2983 = (_3229 * _3113.x) + _3051;
                        _2984 = (_3229 * _3113.y) + _3052;
                        _2985 = (_3229 * _3113.z) + _3053;
                        if (_3058 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _3058;
                        }
                    }
                    frontier_phi_61_pred = _2983;
                    frontier_phi_61_pred_1 = _2988;
                    frontier_phi_61_pred_2 = _2987;
                    frontier_phi_61_pred_3 = _2986;
                    frontier_phi_61_pred_4 = _2985;
                    frontier_phi_61_pred_5 = _2984;
                }
                _2784 = frontier_phi_61_pred;
                _2794 = frontier_phi_61_pred_1;
                _2792 = frontier_phi_61_pred_2;
                _2790 = frontier_phi_61_pred_3;
                _2788 = frontier_phi_61_pred_4;
                _2786 = frontier_phi_61_pred_5;
                uint _2934 = _2933 + 1u;
                if (_2934 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2927 = _2784;
                    _2928 = _2786;
                    _2929 = _2788;
                    _2930 = _2790;
                    _2931 = _2792;
                    _2932 = _2794;
                    _2933 = _2934;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
            _2791 = _2792;
            _2793 = _2794;
        }
        uvec4 _2797 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2798 = _2797.z;
        uint _2800 = (_2798 >> 8u) & 15u;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        if (((4294967295u << _2800) & _2682) == 0u)
        {
            _2895 = _2783;
            _2897 = _2785;
            _2899 = _2787;
            _2901 = _2789;
            _2903 = _2791;
            _2905 = _2793;
        }
        else
        {
            float _2920 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
            float _2921 = _2920 * _2636;
            float _2922 = _2920 * _2637;
            float _2923 = _2920 * _2638;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2800 < ((_2798 >> 12u) & 15u))
            {
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _3034 = _2783;
                float _3035 = _2785;
                float _3036 = _2787;
                float _3037 = _2789;
                float _3038 = _2791;
                float _3039 = _2793;
                uint _3040 = _2800;
                uint _3049;
                bool _3050;
                for (;;)
                {
                    _3049 = texelFetch(g_lightClassification, int((((_2676 << 5u) + (_2662 << 9u)) + (_3040 << 2u)) >> 2u)).x;
                    _3050 = _3049 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3050)
                    {
                        frontier_phi_67_pred = _3037;
                        frontier_phi_67_pred_1 = _3038;
                        frontier_phi_67_pred_2 = _3039;
                        frontier_phi_67_pred_3 = _3036;
                        frontier_phi_67_pred_4 = _3035;
                        frontier_phi_67_pred_5 = _3034;
                    }
                    else
                    {
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3247 = _3034;
                        float _3248 = _3035;
                        float _3249 = _3036;
                        float _3250 = _3037;
                        float _3251 = _3038;
                        float _3252 = _3039;
                        uint _3253 = _3049;
                        uint _3254;
                        vec4 _3279;
                        float _3280;
                        vec4 _3295;
                        vec3 _3307;
                        vec4 _3322;
                        vec4 _3337;
                        float _3383;
                        bool _3384;
                        for (;;)
                        {
                            uint _3264 = ((_3040 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3253));
                            _3254 = (_3253 + 4294967295u) & _3253;
                            uint _3266 = _3264 * 40u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            _3280 = _3279.w;
                            uint _3282 = (_3264 * 40u) + 4u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3297 = (_3264 * 40u) + 8u;
                            _3307 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x));
                            uint _3309 = (_3264 * 40u) + 16u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3324 = (_3264 * 40u) + 20u;
                            _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3339 = (_3264 * 40u) + 24u;
                            vec4 _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3358 = (_3264 * 40u) + 28u;
                            vec4 _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            _3383 = fma(_2638, _3371.z, fma(_2637, _3371.y, _3371.x * _2636)) + _3371.w;
                            _3384 = !((fma(_2638, _3352.z, fma(_2637, _3352.y, _3352.x * _2636)) + _3352.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3384)
                            {
                                float _3411 = _3279.x - _2636;
                                float _3412 = _3279.y - _2637;
                                float _3413 = _3279.z - _2638;
                                float _3414 = dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413));
                                float _3417 = inversesqrt(_3414);
                                float _3418 = _3417 * _3411;
                                float _3419 = _3417 * _3412;
                                float _3420 = _3417 * _3413;
                                float _3424 = 1.0 - (_3414 / (_3280 * _3280));
                                float _4579 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3425 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3429 = sqrt(_3414) * _3295.w;
                                float _3431 = 1.39999997615814208984375 / (_3429 + 1.39999997615814208984375);
                                float _3432 = _3431 * _3431;
                                float _3435 = ((1.0 - _3432) * dot(vec3(_3418, _3419, _3420), vec3(_941, _944, _947))) + _3432;
                                float _3438 = _3429 * _3429;
                                float _3442 = (fma(_2638, _3322.z, fma(_2637, _3322.y, _3322.x * _2636)) + _3322.w) / _3383;
                                float _3443 = (fma(_2638, _3337.z, fma(_2637, _3337.y, _3337.x * _2636)) + _3337.w) / _3383;
                                float _3447 = 1.0 - dot(vec2(_3442, _3443), vec2(_3442, _3443));
                                float _4595 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3449 = _3448 * (((isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0))) * _3425) / ((_3438 * 0.699999988079071044921875) + 1.0));
                                float _3461 = exp2(log2(1.0 / ((_3438 * 3.5) + 5.0)) * 0.25);
                                float _3462 = 1.0 - _1001;
                                float _3469 = sqrt(1.0 - ((1.0 - (_3462 * _3462)) * (1.0 - (_3461 * _3461))));
                                float _3470 = _3469 * _3469;
                                float _3471 = _3470 * _3470;
                                float _3472 = _3418 - _2921;
                                float _3473 = _3419 - _2922;
                                float _3474 = _3420 - _2923;
                                float _3478 = inversesqrt(dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474)));
                                float _3482 = dot(vec3(_941, _944, _947), vec3((-0.0) - _2921, (-0.0) - _2922, (-0.0) - _2923));
                                float _4606 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3485 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3486 = dot(vec3(_941, _944, _947), vec3(_3478 * _3472, _3478 * _3473, _3478 * _3474));
                                float _4617 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3489 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3493 = ((_3489 * _3489) * (_3471 + (-1.0))) + 1.0;
                                float _3494 = _3431 * _3470;
                                float _3495 = _3494 * _3494;
                                float _3501 = ((1.0 - _3495) * dot(vec3(_941, _944, _947), vec3(_3418, _3419, _3420))) + _3495;
                                float _4628 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3503 = 1.0 - _3470;
                                float _3513 = (0.5 / (((_3502 * ((_3485 * _3503) + _3470)) + 9.9999999392252902907785028219223e-09) + (((_3502 * _3503) + _3470) * _3485))) * _3502;
                                float _4639 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3523 = (_3448 * _3425) * (((_3471 * 3.1415927410125732421875) * (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) / ((_3493 * _3493) * ((_3438 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3523 * _3307.x;
                                frontier_phi_73_pred_1 = _3523 * _3307.y;
                                frontier_phi_73_pred_2 = _3449 * _3295.z;
                                frontier_phi_73_pred_3 = _3449 * _3295.y;
                                frontier_phi_73_pred_4 = _3449 * _3295.x;
                                frontier_phi_73_pred_5 = _3523 * _3307.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3527 = frontier_phi_73_pred;
                            _3528 = frontier_phi_73_pred_1;
                            _3532 = frontier_phi_73_pred_2;
                            _3531 = frontier_phi_73_pred_3;
                            _3530 = frontier_phi_73_pred_4;
                            _3529 = frontier_phi_73_pred_5;
                            _3237 = _3530 + _3250;
                            _3238 = _3531 + _3251;
                            _3239 = _3532 + _3252;
                            _3234 = _3527 + _3247;
                            _3235 = _3528 + _3248;
                            _3236 = _3529 + _3249;
                            if (_3254 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3254;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3237;
                        frontier_phi_67_pred_1 = _3238;
                        frontier_phi_67_pred_2 = _3239;
                        frontier_phi_67_pred_3 = _3236;
                        frontier_phi_67_pred_4 = _3235;
                        frontier_phi_67_pred_5 = _3234;
                    }
                    _2902 = frontier_phi_67_pred;
                    _2904 = frontier_phi_67_pred_1;
                    _2906 = frontier_phi_67_pred_2;
                    _2900 = frontier_phi_67_pred_3;
                    _2898 = frontier_phi_67_pred_4;
                    _2896 = frontier_phi_67_pred_5;
                    uint _3041 = _3040 + 1u;
                    if (_3041 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3034 = _2896;
                        _3035 = _2898;
                        _3036 = _2900;
                        _3037 = _2902;
                        _3038 = _2904;
                        _3039 = _2906;
                        _3040 = _3041;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2904;
                frontier_phi_55_56_ladder_1 = _2906;
                frontier_phi_55_56_ladder_2 = _2902;
                frontier_phi_55_56_ladder_3 = _2900;
                frontier_phi_55_56_ladder_4 = _2898;
                frontier_phi_55_56_ladder_5 = _2896;
            }
            else
            {
                frontier_phi_55_56_ladder = _2791;
                frontier_phi_55_56_ladder_1 = _2793;
                frontier_phi_55_56_ladder_2 = _2789;
                frontier_phi_55_56_ladder_3 = _2787;
                frontier_phi_55_56_ladder_4 = _2785;
                frontier_phi_55_56_ladder_5 = _2783;
            }
            _2895 = frontier_phi_55_56_ladder_5;
            _2897 = frontier_phi_55_56_ladder_4;
            _2899 = frontier_phi_55_56_ladder_3;
            _2901 = frontier_phi_55_56_ladder_2;
            _2903 = frontier_phi_55_56_ladder;
            _2905 = frontier_phi_55_56_ladder_1;
        }
        float _2910 = isnan(1.0) ? _985 : (isnan(_985) ? 1.0 : min(_985, 1.0));
        _2695 = (_2910 * _2901) + _2150;
        _2697 = (_2910 * _2903) + _2152;
        _2699 = (_2910 * _2905) + _2154;
        _2701 = ((_2895 * 0.039999999105930328369140625) * _2910) + _2480;
        _2703 = ((_2897 * 0.039999999105930328369140625) * _2910) + _2482;
        _2705 = ((_2899 * 0.039999999105930328369140625) * _2910) + _2484;
    }
    else
    {
        _2695 = _2150;
        _2697 = _2152;
        _2699 = _2154;
        _2701 = _2480;
        _2703 = _2482;
        _2705 = _2484;
    }
    float _4655 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _4666 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _4677 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    uint _2725 = _273 + 6u;
    float _2733 = _922 / cbSceneParam._m0[86u].x;
    float _2734 = _923 / cbSceneParam._m0[86u].y;
    vec4 _2748 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2733, _2734, (log2((isnan(cbSceneParam._m0[77u].w) ? _856 : (isnan(_856) ? cbSceneParam._m0[77u].w : min(_856, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2750 = _2748.x;
    float _2751 = _2748.y;
    float _2752 = _2748.z;
    float _2753 = _2748.w;
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    if (_856 > cbSceneParam._m0[78u].w)
    {
        float _2808 = isnan(_856) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _856 : min(cbSceneParam._m0[80u].w, _856));
        float _2809 = _2808 / _856;
        float _2820 = _2809 * _907;
        float _2821 = _908 * _2809;
        float _2822 = (-0.0) - _2821;
        float _2823 = _2809 * _909;
        float _2825 = (cbSceneParam._m0[77u].w * _2822) / _2808;
        float _2826 = _2825 + cbSceneParam._m0[79u].w;
        float _2827 = cbSceneParam._m0[79u].w - _2821;
        float _2833 = sqrt(((_2820 * _2820) + (_2821 * _2821)) + (_2823 * _2823));
        float _2836 = (1.0 - (cbSceneParam._m0[77u].w / _2808)) * _2833;
        float _2841 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2843 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2996;
        if (abs((_2822 - _2825) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2996 = ((((_2826 > 0.0) ? exp2(_2841 * _2826) : (2.0 - exp2(_2843 * _2826))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2836;
        }
        else
        {
            float _2956 = 1.0 / cbSceneParam._m0[80u].x;
            float _2957 = isnan(_2827) ? _2826 : (isnan(_2826) ? _2827 : max(_2826, _2827));
            float _2958 = isnan(_2827) ? _2826 : (isnan(_2826) ? _2827 : min(_2826, _2827));
            float _2967 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : min(_2957, 0.0));
            float _2968 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : min(_2958, 0.0));
            _2996 = ((abs(_2833 / _2822) * cbSceneParam._m0[80u].y) * ((((_2967 - _2968) * 2.0) - ((exp2(_2841 * (isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0)))) - exp2(_2841 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0))))) * _2956)) - ((exp2(_2843 * _2967) - exp2(_2843 * _2968)) * _2956))) + (_2836 * cbSceneParam._m0[80u].z);
        }
        vec4 _2998 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2733, _2734, 1.0), 0.0);
        float _3007 = exp2((_2996 * (-1.44269502162933349609375)) * (1.0 - _2998.w));
        float _3008 = log2(_3007);
        float _3024 = log2(_2753);
        _2845 = (exp2(_3024 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3008 * cbSceneParam._m0[78u].x)) * _2998.x) / cbSceneParam._m0[78u].x)) + _2750;
        _2847 = (exp2(_3024 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3008 * cbSceneParam._m0[78u].y)) * _2998.y) / cbSceneParam._m0[78u].y)) + _2751;
        _2849 = (exp2(_3024 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3008 * cbSceneParam._m0[78u].z)) * _2998.z) / cbSceneParam._m0[78u].z)) + _2752;
        _2851 = _3007 * _2753;
    }
    else
    {
        _2845 = _2750;
        _2847 = _2751;
        _2849 = _2752;
        _2851 = _2753;
    }
    float _2863 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2864 = _2863 == 3.0;
    float _2865 = log2(_2851);
    float _2872 = exp2(_2865 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2695 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _985))) + ((_2701 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1790)) * cbPerFrame._m0[3u].x));
    float _2873 = exp2(_2865 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2697 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _985))) + ((_2703 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1790)) * cbPerFrame._m0[3u].x));
    float _2874 = exp2(_2865 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2699 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _985))) + ((_2705 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1790)) * cbPerFrame._m0[3u].x));
    float _2883 = (_2863 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2883 * (_2864 ? _2872 : (_2872 + (cbSceneParam._m0[72u].w * _2845)));
    SV_Target.y = _2883 * (_2864 ? _2873 : (_2873 + (cbSceneParam._m0[72u].w * _2847)));
    SV_Target.z = _2883 * (_2864 ? _2874 : (_2874 + (cbSceneParam._m0[72u].w * _2849)));
    SV_Target.w = cbInstanceData._m0[_2725].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2725].w;
}


