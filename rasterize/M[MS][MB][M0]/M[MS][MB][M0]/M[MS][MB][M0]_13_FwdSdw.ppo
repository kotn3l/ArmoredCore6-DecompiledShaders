#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _940;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _222 = uint(roundEven(NORMAL.w)) * 13u;
    uint _228 = _222 + 1u;
    uint _232 = _222 + 2u;
    float _241 = sqrt(((cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x) + (cbInstanceData._m0[_222].x * cbInstanceData._m0[_222].x)) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x));
    float _242 = _241 * TEXCOORD.z;
    float _243 = _241 * TEXCOORD.w;
    vec4 _262 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    vec4 _288 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _292 = _288.z;
    float _297 = (_288.x * 2.0) + (-1.0);
    float _299 = (_288.y * 2.0) + (-1.0);
    float _300 = dot(vec2(_297, _299), vec2(_297, _299));
    float _3534 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _306 = sqrt(1.0 - (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))));
    vec4 _323 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _242) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _243) + cbTextureTilingScale._m0[11u].w));
    float _325 = _323.x;
    float _326 = 1.0 - _325;
    float _342 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_325 - _326) * cbMtdParam._m0[24u].z) + _326) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3545 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _343 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _350 = (_343 * (cbMtdParam._m0[17u].x - _268)) + _268;
    float _351 = (_343 * (cbMtdParam._m0[17u].y - _269)) + _269;
    float _352 = (_343 * (cbMtdParam._m0[17u].z - _270)) + _270;
    vec4 _365 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _242) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _243) + cbTextureTilingScale._m0[15u].w));
    float _372 = (_365.x * 2.0) + (-1.0);
    float _373 = (_365.y * 2.0) + (-1.0);
    float _374 = dot(vec2(_372, _373), vec2(_372, _373));
    float _3556 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _382 = (_343 * (_365.z - _292)) + _292;
    float _394 = (((_372 - _297) + (cbMtdParam._m0[21u].x * _297)) * _343) + _297;
    float _395 = (((_373 - _299) + (cbMtdParam._m0[21u].x * _299)) * _343) + _299;
    float _396 = (_343 * (sqrt(1.0 - (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) - _306)) + _306;
    float _401 = cbMtdParam._m0[22u].x + _288.w;
    float _404 = fma(_396, _209 * NORMAL.x, fma(_395, _216 * TANGENT.x, (_202 * _194) * _394));
    float _407 = fma(_396, _209 * NORMAL.y, fma(_395, _216 * TANGENT.y, (_202 * _195) * _394));
    float _410 = fma(_396, _209 * NORMAL.z, fma(_395, _216 * TANGENT.z, (_202 * _196) * _394));
    float _414 = inversesqrt(dot(vec3(_404, _407, _410), vec3(_404, _407, _410)));
    float _415 = _414 * _404;
    float _416 = _414 * _407;
    float _417 = _414 * _410;
    float _3567 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _418 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _3578 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3589 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _3600 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _3611 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _436 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _477 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _487 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _477);
    float _488 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _477);
    float _489 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _477);
    float _493 = inversesqrt(dot(vec3(_487, _488, _489), vec3(_487, _488, _489)));
    float _494 = _487 * _493;
    float _495 = _488 * _493;
    float _496 = _489 * _493;
    float _502 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _503 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _524 = fma(_417, cbSceneParam._m0[5u].z, fma(_416, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _415));
    float _527 = fma(_417, cbSceneParam._m0[6u].z, fma(_416, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _415));
    float _530 = fma(_417, cbSceneParam._m0[7u].z, fma(_416, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _415));
    uint _544 = (_222 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _550 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) * cbInstanceData._m0[_544].x;
    float _551 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) * cbInstanceData._m0[_544].y;
    float _552 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) * cbInstanceData._m0[_544].z;
    float _3622 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _553 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _3633 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _554 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _3644 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _555 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    vec4 _564 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _502, cbSceneParam._m0[86u].y * _503));
    float _568 = ((isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * TEXCOORD_5.w) * _564.x;
    float _569 = dot(vec3(_415, _416, _417), vec3(_494, _495, _496));
    float _572 = _569 * 2.0;
    float _576 = (_572 * _415) - _494;
    float _577 = (_572 * _416) - _495;
    float _578 = (_572 * _417) - _496;
    float _582 = abs(dot(vec3(_494, _495, _496), vec3(_415, _416, _417)));
    float _3655 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _584 = sqrt(_418);
    float _597 = exp2((_584 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_584 * 3.0));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _939;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _664 = fma(_637, cbModelParam._m0[26u].z, fma(_633, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _629));
        float _668 = fma(_637, cbModelParam._m0[27u].z, fma(_633, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _629));
        float _672 = fma(_637, cbModelParam._m0[28u].z, fma(_633, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _629));
        float _697 = _629 + _415;
        float _698 = _633 + _416;
        float _699 = _637 + _417;
        float _709 = fma(_699, cbModelParam._m0[26u].z, fma(_698, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _697)) - _664;
        float _710 = fma(_699, cbModelParam._m0[27u].z, fma(_698, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _697)) - _668;
        float _711 = fma(_699, cbModelParam._m0[28u].z, fma(_698, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _697)) - _672;
        float _715 = inversesqrt(dot(vec3(_709, _710, _711), vec3(_709, _710, _711)));
        float _728 = ((_715 * _709) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_664 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _729 = ((_715 * _710) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_668 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _730 = ((_715 * _711) / cbModelParam._m0[34u].z) + ((((((_672 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_728, _729, _730), 0.0);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_728, _729, _730), 0.0);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_728, _729, _730), 0.0);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_728, _729, _730), 0.0);
        float _767 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_733.x + (-0.5));
        float _769 = _767 * (_733.y + (-0.5));
        float _770 = _767 * (_733.z + (-0.5));
        float _777 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_740.x + (-0.5));
        float _779 = _777 * (_740.y + (-0.5));
        float _780 = _777 * (_740.z + (-0.5));
        float _787 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_747.x + (-0.5));
        float _789 = _787 * (_747.y + (-0.5));
        float _790 = _787 * (_747.z + (-0.5));
        float _797 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _798 = _797 * (_754.x + (-0.5));
        float _799 = _797 * (_754.y + (-0.5));
        float _800 = _797 * (_754.z + (-0.5));
        float _801 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _802 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _803 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _804 = _768 * 0.5;
        float _805 = _778 * 0.5;
        float _806 = _788 * 0.5;
        float _807 = dot(vec3(_804, _805, _806), vec3(_804, _805, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _821 = (dot(vec3(_415, _416, _417), vec3(_812 * _804, _812 * _805, _812 * _806)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _831 = sqrt(((_805 * _805) + (_804 * _804)) + (_806 * _806)) / (_801 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _833 = _832 * 2.0;
        float _837 = (1.0 - _832) / (_832 + 1.0);
        float _3703 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _847 = ((((1.0 - _838) * (_833 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_833 + 1.0))) + _838) * _801;
        float _848 = _769 * 0.5;
        float _849 = _779 * 0.5;
        float _850 = _789 * 0.5;
        float _851 = dot(vec3(_848, _849, _850), vec3(_848, _849, _850));
        float _856 = (_851 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_851);
        float _864 = (dot(vec3(_415, _416, _417), vec3(_856 * _848, _856 * _849, _856 * _850)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _873 = sqrt(((_849 * _849) + (_848 * _848)) + (_850 * _850)) / (_802 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _875 = _874 * 2.0;
        float _879 = (1.0 - _874) / (_874 + 1.0);
        float _3736 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _889 = ((((1.0 - _880) * (_875 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_875 + 1.0))) + _880) * _802;
        float _890 = _770 * 0.5;
        float _891 = _780 * 0.5;
        float _892 = _790 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _906 = (dot(vec3(_415, _416, _417), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _915 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_803 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _917 = _916 * 2.0;
        float _921 = (1.0 - _916) / (_916 + 1.0);
        float _3769 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _931 = ((((1.0 - _922) * (_917 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_917 + 1.0))) + _922) * _803;
        _939 = _770;
        _941 = _769;
        _942 = _768;
        _943 = _780;
        _944 = _779;
        _945 = _778;
        _946 = _790;
        _947 = _789;
        _948 = _788;
        _949 = _803;
        _950 = _802;
        _951 = _801;
        _952 = cbModelParam._m0[36u].z * (isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0)));
        _953 = cbModelParam._m0[36u].z * (isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0)));
        _954 = cbModelParam._m0[36u].z * (isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0)));
    }
    else
    {
        _939 = _940;
        _941 = _940;
        _942 = _940;
        _943 = _940;
        _944 = _940;
        _945 = _940;
        _946 = _940;
        _947 = _940;
        _948 = _940;
        _949 = _940;
        _950 = _940;
        _951 = _940;
        _952 = 0.0;
        _953 = 0.0;
        _954 = 0.0;
    }
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _979 = fma(_637, cbModelParam._m0[30u].z, fma(_633, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _629));
        float _983 = fma(_637, cbModelParam._m0[31u].z, fma(_633, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _629));
        float _987 = fma(_637, cbModelParam._m0[32u].z, fma(_633, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _629));
        float _1010 = _629 + _415;
        float _1011 = _633 + _416;
        float _1012 = _637 + _417;
        float _1022 = fma(_1012, cbModelParam._m0[30u].z, fma(_1011, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1010)) - _979;
        float _1023 = fma(_1012, cbModelParam._m0[31u].z, fma(_1011, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1010)) - _983;
        float _1024 = fma(_1012, cbModelParam._m0[32u].z, fma(_1011, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1010)) - _987;
        float _1028 = inversesqrt(dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024)));
        float _1041 = ((_1028 * _1022) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_979 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1028 * _1023) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_983 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1028 * _1024) / cbModelParam._m0[35u].z) + ((((((_987 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        float _1078 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1045.x + (-0.5));
        float _1080 = _1078 * (_1045.y + (-0.5));
        float _1081 = _1078 * (_1045.z + (-0.5));
        float _1088 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1052.x + (-0.5));
        float _1090 = _1088 * (_1052.y + (-0.5));
        float _1091 = _1088 * (_1052.z + (-0.5));
        float _1098 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1059.x + (-0.5));
        float _1100 = _1098 * (_1059.y + (-0.5));
        float _1101 = _1098 * (_1059.z + (-0.5));
        float _1108 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1066.x + (-0.5));
        float _1110 = _1108 * (_1066.y + (-0.5));
        float _1111 = _1108 * (_1066.z + (-0.5));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = _1079 * 0.5;
        float _1116 = _1089 * 0.5;
        float _1117 = _1099 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_415, _416, _417), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3832 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1142 + 1.0))) + _1147) * _1112;
        float _1157 = _1080 * 0.5;
        float _1158 = _1090 * 0.5;
        float _1159 = _1100 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_415, _416, _417), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3865 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1184 + 1.0))) + _1189) * _1113;
        float _1199 = _1081 * 0.5;
        float _1200 = _1091 * 0.5;
        float _1201 = _1101 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_415, _416, _417), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3898 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1226 + 1.0))) + _1231) * _1114;
        _1248 = _1081;
        _1249 = _1080;
        _1250 = _1079;
        _1251 = _1091;
        _1252 = _1090;
        _1253 = _1089;
        _1254 = _1101;
        _1255 = _1100;
        _1256 = _1099;
        _1257 = _1114;
        _1258 = _1113;
        _1259 = _1112;
        _1260 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1261 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1262 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
    }
    else
    {
        _1248 = _940;
        _1249 = _940;
        _1250 = _940;
        _1251 = _940;
        _1252 = _940;
        _1253 = _940;
        _1254 = _940;
        _1255 = _940;
        _1256 = _940;
        _1257 = _940;
        _1258 = _940;
        _1259 = _940;
        _1260 = 0.0;
        _1261 = 0.0;
        _1262 = 0.0;
    }
    float _1272 = (cbModelParam._m0[1u].x * (_1260 - _952)) + _952;
    float _1273 = (cbModelParam._m0[1u].x * (_1261 - _953)) + _953;
    float _1274 = (cbModelParam._m0[1u].x * (_1262 - _954)) + _954;
    float _1295 = fma(_1274, cbSceneParam._m0[89u].z, fma(_1273, cbSceneParam._m0[89u].y, _1272 * cbSceneParam._m0[89u].x));
    float _1298 = fma(_1274, cbSceneParam._m0[90u].z, fma(_1273, cbSceneParam._m0[90u].y, _1272 * cbSceneParam._m0[90u].x));
    float _1301 = fma(_1274, cbSceneParam._m0[91u].z, fma(_1273, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1272));
    float _1316 = _576 * 0.5;
    float _1317 = _577 * 0.5;
    float _1318 = _578 * 0.5;
    float _1319 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_1250, _1253, _1256, _1259));
    float _1322 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_1249, _1252, _1255, _1258));
    float _1325 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_1248, _1251, _1254, _1257));
    float _1359;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1332 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_939, _943, _946, _949));
        float _1336 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_941, _944, _947, _950));
        float _1340 = dot(vec4(_1316, _1317, _1318, 1.0), vec4(_942, _945, _948, _951));
        float _1347 = dot(vec4(cbModelParam._m0[39u]), vec4(_1316, _1317, _1318, 1.0));
        _1359 = dot(vec3(isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)), isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1347) ? 0.0 : (isnan(0.0) ? _1347 : max(0.0, _1347))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1359 = 1.0;
    }
    float _1370;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1361 = dot(vec4(cbModelParam._m0[40u]), vec4(_1316, _1317, _1318, 1.0));
        _1370 = dot(vec3(isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)), isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1361) ? 0.0 : (isnan(0.0) ? _1361 : max(0.0, _1361))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1370 = 1.0;
    }
    float _1374 = (_1370 * cbModelParam._m0[1u].x) + (_1359 * (1.0 - cbModelParam._m0[1u].x));
    float _1384 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _418);
    float _1385 = isnan(_1384) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1384 : min(cbModelParam._m0[25u].z, _1384));
    float _1466;
    float _1468;
    float _1470;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1433 = fma(_637, cbModelParam._m0[13u].z, fma(_633, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _629)) + cbModelParam._m0[13u].w;
        float _1437 = fma(_637, cbModelParam._m0[14u].z, fma(_633, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _629)) + cbModelParam._m0[14u].w;
        float _1441 = fma(_637, cbModelParam._m0[15u].z, fma(_633, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _629)) + cbModelParam._m0[15u].w;
        float _1444 = fma(_578, cbModelParam._m0[13u].z, fma(_577, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _576));
        float _1447 = fma(_578, cbModelParam._m0[14u].z, fma(_577, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _576));
        float _1450 = fma(_578, cbModelParam._m0[15u].z, fma(_577, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _576));
        float _1478;
        if (_1444 > 0.0)
        {
            _1478 = abs((1.0 - _1433) / _1444);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1433 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1478 = frontier_phi_14_12_ladder;
        }
        float _1650;
        if (_1447 > 0.0)
        {
            _1650 = abs((1.0 - _1437) / _1447);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1447 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1437 + 1.0) / _1447);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1650 = frontier_phi_23_19_ladder;
        }
        float _1946;
        if (_1450 > 0.0)
        {
            _1946 = abs((1.0 - _1441) / _1450);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1441 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1946 = frontier_phi_35_30_ladder;
        }
        float _1948 = isnan(_1650) ? _1478 : (isnan(_1478) ? _1650 : min(_1478, _1650));
        float _1949 = isnan(_1946) ? _1948 : (isnan(_1948) ? _1946 : min(_1948, _1946));
        float _1953 = (_1949 * _1444) + _1433;
        float _1954 = (_1949 * _1447) + _1437;
        float _1955 = (_1949 * _1450) + _1441;
        float _1956 = _1949 * 9.9999997473787516355514526367188e-05;
        float _1958 = (-1.0) - _1956;
        float _1960 = _1956 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1955 > _1960) || ((_1955 < _1958) || ((_1954 > _1960) || ((_1954 < _1958) || ((_1953 < _1958) || (_1953 > _1960))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2100 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1955, cbModelParam._m0[9u].z, fma(_1954, cbModelParam._m0[9u].y, _1953 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1955, cbModelParam._m0[10u].z, fma(_1954, cbModelParam._m0[10u].y, _1953 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1955, cbModelParam._m0[11u].z, fma(_1954, cbModelParam._m0[11u].y, _1953 * cbModelParam._m0[11u].x))), _1385);
            frontier_phi_13_35_ladder = _2100.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2100.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2100.x * cbModelParam._m0[1u].y;
        }
        _1466 = frontier_phi_13_35_ladder_2;
        _1468 = frontier_phi_13_35_ladder_1;
        _1470 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1454 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_576, _577, _578), _1385);
        _1466 = _1454.x * cbModelParam._m0[1u].y;
        _1468 = _1454.y * cbModelParam._m0[1u].y;
        _1470 = _1454.z * cbModelParam._m0[1u].y;
    }
    float _1474 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _418);
    float _1475 = isnan(_1474) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1474 : min(cbModelParam._m0[25u].w, _1474));
    float _1566;
    float _1568;
    float _1570;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1530 = fma(_637, cbModelParam._m0[21u].z, fma(_633, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _629)) + cbModelParam._m0[21u].w;
        float _1534 = fma(_637, cbModelParam._m0[22u].z, fma(_633, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _629)) + cbModelParam._m0[22u].w;
        float _1538 = fma(_637, cbModelParam._m0[23u].z, fma(_633, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _629)) + cbModelParam._m0[23u].w;
        float _1541 = fma(_578, cbModelParam._m0[21u].z, fma(_577, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _576));
        float _1544 = fma(_578, cbModelParam._m0[22u].z, fma(_577, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _576));
        float _1547 = fma(_578, cbModelParam._m0[23u].z, fma(_577, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _576));
        float _1655;
        if (_1541 > 0.0)
        {
            _1655 = abs((1.0 - _1530) / _1541);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1530 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1655 = frontier_phi_25_21_ladder;
        }
        float _1973;
        if (_1544 > 0.0)
        {
            _1973 = abs((1.0 - _1534) / _1544);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1534 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1973 = frontier_phi_37_32_ladder;
        }
        float _2300;
        if (_1547 > 0.0)
        {
            _2300 = abs((1.0 - _1538) / _1547);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1538 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2300 = frontier_phi_47_44_ladder;
        }
        float _2302 = isnan(_1973) ? _1655 : (isnan(_1655) ? _1973 : min(_1655, _1973));
        float _2303 = isnan(_2300) ? _2302 : (isnan(_2302) ? _2300 : min(_2302, _2300));
        float _2307 = (_2303 * _1541) + _1530;
        float _2308 = (_2303 * _1544) + _1534;
        float _2309 = (_2303 * _1547) + _1538;
        float _2310 = _2303 * 9.9999997473787516355514526367188e-05;
        float _2311 = (-1.0) - _2310;
        float _2313 = _2310 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2309 > _2313) || ((_2309 < _2311) || ((_2308 > _2313) || ((_2308 < _2311) || ((_2307 < _2311) || (_2307 > _2313))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2427 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2309, cbModelParam._m0[17u].z, fma(_2308, cbModelParam._m0[17u].y, _2307 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2309, cbModelParam._m0[18u].z, fma(_2308, cbModelParam._m0[18u].y, _2307 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2309, cbModelParam._m0[19u].z, fma(_2308, cbModelParam._m0[19u].y, _2307 * cbModelParam._m0[19u].x))), _1475);
            frontier_phi_22_47_ladder = _2427.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2427.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2427.x * cbModelParam._m0[1u].z;
        }
        _1566 = frontier_phi_22_47_ladder_2;
        _1568 = frontier_phi_22_47_ladder_1;
        _1570 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1550 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_576, _577, _578), _1475);
        _1566 = _1550.x * cbModelParam._m0[1u].z;
        _1568 = _1550.y * cbModelParam._m0[1u].z;
        _1570 = _1550.z * cbModelParam._m0[1u].z;
    }
    float _1582 = ((((1.0 - _597) * ((_584 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_597 * _584)) * _568;
    float _1583 = _1582 * ((cbModelParam._m0[1u].w * (_1566 - _1466)) + _1466);
    float _1584 = _1582 * ((cbModelParam._m0[1u].w * (_1568 - _1468)) + _1468);
    float _1585 = _1582 * ((cbModelParam._m0[1u].w * (_1570 - _1470)) + _1470);
    float _1588 = fma(_1585, cbSceneParam._m0[89u].z, fma(_1584, cbSceneParam._m0[89u].y, _1583 * cbSceneParam._m0[89u].x));
    float _1591 = fma(_1585, cbSceneParam._m0[90u].z, fma(_1584, cbSceneParam._m0[90u].y, _1583 * cbSceneParam._m0[90u].x));
    float _1594 = fma(_1585, cbSceneParam._m0[91u].z, fma(_1584, cbSceneParam._m0[91u].y, _1583 * cbSceneParam._m0[91u].x));
    float _1629 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1633 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1637 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1641 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1642 = _1629 / _1641;
    float _1643 = _1633 / _1641;
    float _1644 = _1637 / _1641;
    float _1791;
    float _1792;
    float _1793;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1671 = ((uint(_1644 > cbSceneParam._m0[59u].y) + uint(_1644 > cbSceneParam._m0[59u].x)) + uint(_1644 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1672 = _1671 + 43u;
        uint _1680 = _1671 + 44u;
        uint _1688 = _1671 + 45u;
        uint _1696 = _1671 + 46u;
        float _1707 = fma(_1641, cbSceneParam._m0[_1672].w, fma(_1637, cbSceneParam._m0[_1672].z, fma(_1633, cbSceneParam._m0[_1672].y, _1629 * cbSceneParam._m0[_1672].x)));
        float _1711 = fma(_1641, cbSceneParam._m0[_1680].w, fma(_1637, cbSceneParam._m0[_1680].z, fma(_1633, cbSceneParam._m0[_1680].y, _1629 * cbSceneParam._m0[_1680].x)));
        float _1719 = fma(_1641, cbSceneParam._m0[_1696].w, fma(_1637, cbSceneParam._m0[_1696].z, fma(_1633, cbSceneParam._m0[_1696].y, _1629 * cbSceneParam._m0[_1696].x)));
        float _1724 = cbSceneParam._m0[33u].z * _1719;
        float _1726 = cbSceneParam._m0[33u].w * _1719;
        float _1729 = fma(_1641, cbSceneParam._m0[_1688].w, fma(_1637, cbSceneParam._m0[_1688].z, fma(_1633, cbSceneParam._m0[_1688].y, _1629 * cbSceneParam._m0[_1688].x))) / _1719;
        float _1777 = (cbSceneParam._m0[33u].x - sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644))) * cbSceneParam._m0[33u].y;
        float _4024 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1784 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1724 + _1707) / _1719, (_1726 + _1711) / _1719), _1729), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1726 + _1707) / _1719, (_1711 - _1724) / _1719), _1729), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1707 - _1724) / _1719, (_1711 - _1726) / _1719), _1729), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1707 - _1726) / _1719, (_1724 + _1711) / _1719), _1729), 0.0)).x), vec4(0.25)));
        _1791 = 1.0 - (_1784 * cbSceneParam._m0[34u].x);
        _1792 = 1.0 - (_1784 * cbSceneParam._m0[34u].y);
        _1793 = 1.0 - (_1784 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1791 = 1.0;
        _1792 = 1.0;
        _1793 = 1.0;
    }
    float _1857;
    float _1859;
    float _1861;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1845 = fma(_1641, cbSceneParam._m0[63u].w, fma(_1637, cbSceneParam._m0[63u].z, fma(_1633, cbSceneParam._m0[63u].y, _1629 * cbSceneParam._m0[63u].x)));
        float _1846 = fma(_1641, cbSceneParam._m0[60u].w, fma(_1637, cbSceneParam._m0[60u].z, fma(_1633, cbSceneParam._m0[60u].y, _1629 * cbSceneParam._m0[60u].x))) / _1845;
        float _1847 = fma(_1641, cbSceneParam._m0[61u].w, fma(_1637, cbSceneParam._m0[61u].z, fma(_1633, cbSceneParam._m0[61u].y, _1629 * cbSceneParam._m0[61u].x))) / _1845;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1846 >= cbSceneParam._m0[64u].x) && (_1847 >= cbSceneParam._m0[64u].y)) && (_1846 <= cbSceneParam._m0[64u].z)) && (_1847 <= cbSceneParam._m0[64u].w))
        {
            float _1986 = fma(_1641, cbSceneParam._m0[62u].w, fma(_1637, cbSceneParam._m0[62u].z, fma(_1633, cbSceneParam._m0[62u].y, _1629 * cbSceneParam._m0[62u].x))) / _1845;
            float _1990 = isnan(cbSceneParam._m0[41u].w) ? _1986 : (isnan(_1986) ? cbSceneParam._m0[41u].w : max(_1986, cbSceneParam._m0[41u].w));
            float _2033 = (cbSceneParam._m0[33u].x - sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644))) * cbSceneParam._m0[33u].y;
            float _4040 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
            float _2040 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1846, cbSceneParam._m0[33u].w + _1847), _1990), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1846, _1847 - cbSceneParam._m0[33u].z), _1990), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1846 - cbSceneParam._m0[33u].z, _1847 - cbSceneParam._m0[33u].w), _1990), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1846 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1847), _1990), 0.0)).x), vec4(0.25)));
            float _2044 = 1.0 - (_2040 * cbSceneParam._m0[34u].x);
            float _2045 = 1.0 - (_2040 * cbSceneParam._m0[34u].y);
            float _2046 = 1.0 - (_2040 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2046) ? _1793 : (isnan(_1793) ? _2046 : min(_1793, _2046));
            frontier_phi_34_33_ladder_1 = isnan(_2045) ? _1792 : (isnan(_1792) ? _2045 : min(_1792, _2045));
            frontier_phi_34_33_ladder_2 = isnan(_2044) ? _1791 : (isnan(_1791) ? _2044 : min(_1791, _2044));
        }
        else
        {
            frontier_phi_34_33_ladder = _1793;
            frontier_phi_34_33_ladder_1 = _1792;
            frontier_phi_34_33_ladder_2 = _1791;
        }
        _1857 = frontier_phi_34_33_ladder_2;
        _1859 = frontier_phi_34_33_ladder_1;
        _1861 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1857 = _1791;
        _1859 = _1792;
        _1861 = _1793;
    }
    uvec4 _1866 = floatBitsToUint(cbInstanceData._m0[_222 + 5u]);
    uint _1868 = _1866.x * 14u;
    uint _1869 = _1868 + 13u;
    float _1876 = _568 + (-1.0);
    float _1881 = (cbLight._m0[_1869].x * _1876) + 1.0;
    float _1882 = (cbLight._m0[_1869].y * _1876) + 1.0;
    float _1883 = (cbLight._m0[_1869].z * _1876) + 1.0;
    float _1884 = (cbLight._m0[_1869].w * _1876) + 1.0;
    uint _1885 = _1868 + 5u;
    float _1891 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
    uint _1895 = _1868 + 4u;
    float _1905 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
    uint _1909 = _1868 | 1u;
    float _1920 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_415, _416, _417));
    float _1923 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_415, _416, _417));
    float _4076 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _4087 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1928 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.3183098733425140380859375;
    float _1930 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.3183098733425140380859375;
    float _1937 = ((cbLight._m0[_1885].x * _1891) * _1930) + (((cbLight._m0[_1895].x * _1857) * _1905) * _1928);
    float _1938 = ((_1891 * cbLight._m0[_1885].y) * _1930) + (((cbLight._m0[_1895].y * _1859) * _1905) * _1928);
    float _1939 = ((_1891 * cbLight._m0[_1885].z) * _1930) + (((cbLight._m0[_1895].z * _1861) * _1905) * _1928);
    uvec4 _1943 = floatBitsToUint(cbLight._m0[_1868 + 12u]);
    bool _1945 = _1943.x == 0u;
    float _2047;
    float _2049;
    float _2051;
    if (_1945)
    {
        _2047 = _1937;
        _2049 = _1938;
        _2051 = _1939;
    }
    else
    {
        uint _2055 = _1868 + 6u;
        float _2071 = (dot(vec3(cbLight._m0[_1868 + 2u].xyz), vec3(_415, _416, _417)) * 0.5) + 0.5;
        float _2072 = _2071 * _2071;
        float _4098 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2073 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2074 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
        _2047 = (((cbLight._m0[_2055].x * 0.3183098733425140380859375) * _2073) * _2074) + _1937;
        _2049 = (((cbLight._m0[_2055].y * 0.3183098733425140380859375) * _2073) * _2074) + _1938;
        _2051 = (((cbLight._m0[_2055].z * 0.3183098733425140380859375) * _2073) * _2074) + _1939;
    }
    bool _2054 = _1943.y == 0u;
    float _2109;
    float _2111;
    float _2113;
    if (_2054)
    {
        _2109 = _2047;
        _2111 = _2049;
        _2113 = _2051;
    }
    else
    {
        uint _2271 = _1868 + 7u;
        float _2287 = (dot(vec3(cbLight._m0[_1868 + 3u].xyz), vec3(_415, _416, _417)) * 0.5) + 0.5;
        float _2288 = _2287 * _2287;
        float _4114 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2289 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2290 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _2109 = (((cbLight._m0[_2271].x * 0.3183098733425140380859375) * _2289) * _2290) + _2047;
        _2111 = (((cbLight._m0[_2271].y * 0.3183098733425140380859375) * _2289) * _2290) + _2049;
        _2113 = (((cbLight._m0[_2271].z * 0.3183098733425140380859375) * _2289) * _2290) + _2051;
    }
    uint _2116 = _1868 + 8u;
    float _2129 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1868].w)) * _418) * 0.949999988079071044921875);
    float _2130 = _2129 * _2129;
    float _2131 = cbLight._m0[_1868].x + _494;
    float _2132 = cbLight._m0[_1868].y + _495;
    float _2133 = cbLight._m0[_1868].z + _496;
    float _2137 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
    float _2138 = _2137 * _2131;
    float _2139 = _2137 * _2132;
    float _2140 = _2137 * _2133;
    float _2141 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1868].xyz));
    float _4130 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _2145 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2146 = dot(vec3(_415, _416, _417), vec3(_2138, _2139, _2140));
    float _4152 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2150 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_2138, _2139, _2140));
    float _4163 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2154 = _2130 * _2130;
    float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
    float _2169 = (exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2170 = 1.0 - _2130;
    float _2181 = (0.5 / (((_2145 * ((_2144 * _2170) + _2130)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2170) + _2130) * _2144))) * _2144;
    float _4174 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2183 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
    uint _2197 = _1868 + 9u;
    float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1909].w)) * _418) * 0.949999988079071044921875);
    float _2209 = _2208 * _2208;
    float _2210 = cbLight._m0[_1909].x + _494;
    float _2211 = cbLight._m0[_1909].y + _495;
    float _2212 = cbLight._m0[_1909].z + _496;
    float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
    float _2217 = _2216 * _2210;
    float _2218 = _2216 * _2211;
    float _2219 = _2216 * _2212;
    float _2220 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1909].xyz));
    float _4185 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _2224 = dot(vec3(_415, _416, _417), vec3(_2217, _2218, _2219));
    float _4196 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _2228 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_2217, _2218, _2219));
    float _4207 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2232 = _2209 * _2209;
    float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
    float _2245 = (exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2246 = 1.0 - _2209;
    float _2256 = (0.5 / (((_2145 * ((_2223 * _2246) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2246) + _2209) * _2223))) * _2223;
    float _4218 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2258 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
    float _2268 = (((_2245 * cbLight._m0[_2197].x) * _2258) * _1891) + ((((cbLight._m0[_2116].x * _1857) * _2169) * _2183) * _1905);
    float _2269 = (((_2245 * cbLight._m0[_2197].y) * _2258) * _1891) + ((((cbLight._m0[_2116].y * _1859) * _2169) * _2183) * _1905);
    float _2270 = (((_2245 * cbLight._m0[_2197].z) * _2258) * _1891) + ((((cbLight._m0[_2116].z * _1861) * _2169) * _2183) * _1905);
    float _2326;
    float _2328;
    float _2330;
    if (_1945)
    {
        _2326 = _2268;
        _2328 = _2269;
        _2330 = _2270;
    }
    else
    {
        uint _2332 = _1868 + 2u;
        uint _2336 = _1868 + 10u;
        float _2350 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _418) * 0.949999988079071044921875);
        float _2351 = _2350 * _2350;
        float _2352 = cbLight._m0[_2332].x + _494;
        float _2353 = cbLight._m0[_2332].y + _495;
        float _2354 = cbLight._m0[_2332].z + _496;
        float _2358 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
        float _2359 = _2358 * _2352;
        float _2360 = _2358 * _2353;
        float _2361 = _2358 * _2354;
        float _2362 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_2332].xyz));
        float _4229 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2365 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2366 = dot(vec3(_415, _416, _417), vec3(_2359, _2360, _2361));
        float _4240 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2369 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2370 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2359, _2360, _2361));
        float _4251 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2374 = _2351 * _2351;
        float _2378 = ((_2369 * _2369) * (_2374 + (-1.0))) + 1.0;
        float _2387 = (exp2(log2(1.0 - (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2388 = 1.0 - _2351;
        float _2398 = (0.5 / (((_2145 * ((_2365 * _2388) + _2351)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2388) + _2351) * _2365))) * _2365;
        float _4262 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2400 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2374 / ((_2378 * _2378) * 3.141590118408203125));
        float _2401 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
        _2326 = (((_2387 * cbLight._m0[_2336].x) * _2400) * _2401) + _2268;
        _2328 = (((_2387 * cbLight._m0[_2336].y) * _2400) * _2401) + _2269;
        _2330 = (((_2387 * cbLight._m0[_2336].z) * _2400) * _2401) + _2270;
    }
    float _2432;
    float _2434;
    float _2436;
    if (_2054)
    {
        _2432 = _2326;
        _2434 = _2328;
        _2436 = _2330;
    }
    else
    {
        uint _2443 = _1868 + 3u;
        uint _2447 = _1868 + 11u;
        float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2443].w)) * _418) * 0.949999988079071044921875);
        float _2462 = _2461 * _2461;
        float _2463 = cbLight._m0[_2443].x + _494;
        float _2464 = cbLight._m0[_2443].y + _495;
        float _2465 = cbLight._m0[_2443].z + _496;
        float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
        float _2470 = _2469 * _2463;
        float _2471 = _2469 * _2464;
        float _2472 = _2469 * _2465;
        float _2473 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_2443].xyz));
        float _4278 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2476 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2477 = dot(vec3(_415, _416, _417), vec3(_2470, _2471, _2472));
        float _4289 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2481 = dot(vec3(cbLight._m0[_2443].xyz), vec3(_2470, _2471, _2472));
        float _4300 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2485 = _2462 * _2462;
        float _2489 = ((_2480 * _2480) * (_2485 + (-1.0))) + 1.0;
        float _2498 = (exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2499 = 1.0 - _2462;
        float _2509 = (0.5 / (((_2145 * ((_2476 * _2499) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2499) + _2462) * _2476))) * _2476;
        float _4311 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2511 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2485 / ((_2489 * _2489) * 3.141590118408203125));
        float _2512 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _2432 = (((_2498 * cbLight._m0[_2447].x) * _2511) * _2512) + _2326;
        _2434 = (((_2498 * cbLight._m0[_2447].y) * _2511) * _2512) + _2328;
        _2436 = (((_2498 * cbLight._m0[_2447].z) * _2511) * _2512) + _2330;
    }
    float _2578;
    float _2580;
    float _2582;
    float _2584;
    float _2586;
    float _2588;
    if (_1866.y == 0u)
    {
        uvec4 _2533 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2534 = _2533.x;
        uint _2545 = uint((float(_2533.y) * floor(float(uint(cbSceneParam._m0[85u].y * _503) / _2534))) + floor(float(uint(cbSceneParam._m0[85u].x * _502) / _2534)));
        float _2555 = (log2(_1644 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2556 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        uint _2559 = uint(isnan(14.0) ? _2556 : (isnan(_2556) ? 14.0 : min(_2556, 14.0)));
        uvec4 _2564 = texelFetch(g_lightClusterGridBuffer, int(((_2559 << 2u) + (_2545 << 6u)) >> 2u));
        uint _2565 = _2564.x;
        uint _2566 = _2533.z;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        if (((((1u << ((_2566 >> 4u) & 15u)) + 4294967295u) & _2565) == 0u) || ((_2566 & 240u) == 0u))
        {
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
        }
        else
        {
            float _2646;
            float _2648;
            float _2650;
            float _2652;
            float _2654;
            float _2656;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            float _2795 = 0.0;
            uint _2796 = 0u;
            uint _2805;
            bool _2806;
            for (;;)
            {
                _2805 = texelFetch(g_lightClassification, int((((_2559 << 5u) + (_2545 << 9u)) + (_2796 << 2u)) >> 2u)).x;
                _2806 = _2805 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2806)
                {
                    frontier_phi_66_pred = _2795;
                    frontier_phi_66_pred_1 = _2794;
                    frontier_phi_66_pred_2 = _2793;
                    frontier_phi_66_pred_3 = _2792;
                    frontier_phi_66_pred_4 = _2791;
                    frontier_phi_66_pred_5 = _2790;
                }
                else
                {
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    uint _2920;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2792;
                    _2917 = _2793;
                    _2918 = _2794;
                    _2919 = _2795;
                    _2920 = _2805;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    for (;;)
                    {
                        uint _2924 = uint(findLSB(_2920)) + (_2796 << 5u);
                        uint _2921 = (_2920 + 4294967295u) & _2920;
                        uint _2926 = _2924 * 48u;
                        vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 3u)).x));
                        uint _2946 = (_2924 * 48u) + 4u;
                        vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 3u)).x));
                        uint _2965 = (_2924 * 48u) + 8u;
                        vec3 _2976 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2965)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 2u)).x));
                        float _2980 = _2940.x - _1642;
                        float _2981 = _2940.y - _1643;
                        float _2982 = _2940.z - _1644;
                        float _2983 = dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982));
                        float _2986 = inversesqrt(_2983);
                        float _2987 = _2986 * _2980;
                        float _2988 = _2986 * _2981;
                        float _2989 = _2986 * _2982;
                        float _2990 = dot(vec3(_524, _527, _530), vec3(_2987, _2988, _2989));
                        float _2995 = 1.0 - (_2983 * _2940.w);
                        float _4337 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2996 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _2997 = sqrt(_2983) * _2959.w;
                        float _3000 = 1.39999997615814208984375 / (_2997 + 1.39999997615814208984375);
                        float _3001 = _3000 * _3000;
                        float _3004 = ((1.0 - _3001) * _2990) + _3001;
                        float _3007 = _2997 * _2997;
                        float _3011 = ((isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0))) * _2996) / ((_3007 * 0.699999988079071044921875) + 1.0);
                        float _3015 = (-0.0) - _1642;
                        float _3016 = (-0.0) - _1643;
                        float _3017 = (-0.0) - _1644;
                        float _3021 = inversesqrt(dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017)));
                        float _3022 = _3021 * _3015;
                        float _3023 = _3021 * _3016;
                        float _3024 = _3021 * _3017;
                        float _3031 = exp2(log2(1.0 / ((_3007 * 3.5) + 5.0)) * 0.25);
                        float _3032 = 1.0 - _584;
                        float _3039 = sqrt(1.0 - ((1.0 - (_3032 * _3032)) * (1.0 - (_3031 * _3031))));
                        float _3040 = _3039 * _3039;
                        float _3041 = _3040 * _3040;
                        float _3042 = _3022 + _2987;
                        float _3043 = _3023 + _2988;
                        float _3044 = _3024 + _2989;
                        float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                        float _3052 = dot(vec3(_524, _527, _530), vec3(_3022, _3023, _3024));
                        float _4353 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3055 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _3056 = dot(vec3(_524, _527, _530), vec3(_3048 * _3042, _3048 * _3043, _3048 * _3044));
                        float _4364 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3059 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3063 = ((_3059 * _3059) * (_3041 + (-1.0))) + 1.0;
                        float _3064 = _3000 * _3040;
                        float _3065 = _3064 * _3064;
                        float _3068 = ((1.0 - _3065) * _2990) + _3065;
                        float _4375 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3069 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _3070 = 1.0 - _3040;
                        float _3080 = (0.5 / (((_3069 * ((_3055 * _3070) + _3040)) + 9.9999999392252902907785028219223e-09) + (((_3069 * _3070) + _3040) * _3055))) * _3069;
                        float _4386 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3091 = (((_3041 * 3.1415927410125732421875) * (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) / ((_3063 * _3063) * ((_3007 * 2.1991131305694580078125) + 3.141590118408203125))) * _2996;
                        _2849 = (_3011 * _2959.x) + _2917;
                        _2850 = (_3011 * _2959.y) + _2918;
                        _2851 = (_3011 * _2959.z) + _2919;
                        _2846 = (_3091 * _2976.x) + _2914;
                        _2847 = (_3091 * _2976.y) + _2915;
                        _2848 = (_3091 * _2976.z) + _2916;
                        if (_2921 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2848;
                            _2917 = _2849;
                            _2918 = _2850;
                            _2919 = _2851;
                            _2920 = _2921;
                        }
                    }
                    frontier_phi_66_pred = _2851;
                    frontier_phi_66_pred_1 = _2850;
                    frontier_phi_66_pred_2 = _2849;
                    frontier_phi_66_pred_3 = _2848;
                    frontier_phi_66_pred_4 = _2847;
                    frontier_phi_66_pred_5 = _2846;
                }
                _2656 = frontier_phi_66_pred;
                _2654 = frontier_phi_66_pred_1;
                _2652 = frontier_phi_66_pred_2;
                _2650 = frontier_phi_66_pred_3;
                _2648 = frontier_phi_66_pred_4;
                _2646 = frontier_phi_66_pred_5;
                uint _2797 = _2796 + 1u;
                if (_2797 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2790 = _2646;
                    _2791 = _2648;
                    _2792 = _2650;
                    _2793 = _2652;
                    _2794 = _2654;
                    _2795 = _2656;
                    _2796 = _2797;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
        }
        uvec4 _2659 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2660 = _2659.z;
        uint _2662 = (_2660 >> 8u) & 15u;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        if (((4294967295u << _2662) & _2565) == 0u)
        {
            _2758 = _2645;
            _2760 = _2647;
            _2762 = _2649;
            _2764 = _2651;
            _2766 = _2653;
            _2768 = _2655;
        }
        else
        {
            float _2783 = inversesqrt(dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644)));
            float _2784 = _2783 * _1642;
            float _2785 = _2783 * _1643;
            float _2786 = _2783 * _1644;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2662 < ((_2660 >> 12u) & 15u))
            {
                float _2759;
                float _2761;
                float _2763;
                float _2765;
                float _2767;
                float _2769;
                float _2897 = _2645;
                float _2898 = _2647;
                float _2899 = _2649;
                float _2900 = _2651;
                float _2901 = _2653;
                float _2902 = _2655;
                uint _2903 = _2662;
                uint _2912;
                bool _2913;
                for (;;)
                {
                    _2912 = texelFetch(g_lightClassification, int((((_2559 << 5u) + (_2545 << 9u)) + (_2903 << 2u)) >> 2u)).x;
                    _2913 = _2912 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2913)
                    {
                        frontier_phi_72_pred = _2902;
                        frontier_phi_72_pred_1 = _2901;
                        frontier_phi_72_pred_2 = _2900;
                        frontier_phi_72_pred_3 = _2899;
                        frontier_phi_72_pred_4 = _2898;
                        frontier_phi_72_pred_5 = _2897;
                    }
                    else
                    {
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3109 = _2897;
                        float _3110 = _2898;
                        float _3111 = _2899;
                        float _3112 = _2900;
                        float _3113 = _2901;
                        float _3114 = _2902;
                        uint _3115 = _2912;
                        uint _3116;
                        vec4 _3141;
                        float _3142;
                        vec4 _3157;
                        vec3 _3169;
                        vec4 _3185;
                        vec4 _3201;
                        float _3247;
                        bool _3248;
                        for (;;)
                        {
                            uint _3126 = ((_2903 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3115));
                            _3116 = (_3115 + 4294967295u) & _3115;
                            uint _3128 = _3126 * 40u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            _3142 = _3141.w;
                            uint _3144 = (_3126 * 40u) + 4u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3159 = (_3126 * 40u) + 8u;
                            _3169 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x));
                            uint _3172 = (_3126 * 40u) + 16u;
                            _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3188 = (_3126 * 40u) + 20u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3203 = (_3126 * 40u) + 24u;
                            vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3222 = (_3126 * 40u) + 28u;
                            vec4 _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            _3247 = fma(_1644, _3235.z, fma(_1643, _3235.y, _3235.x * _1642)) + _3235.w;
                            _3248 = !((fma(_1644, _3216.z, fma(_1643, _3216.y, _3216.x * _1642)) + _3216.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3248)
                            {
                                float _3275 = _3141.x - _1642;
                                float _3276 = _3141.y - _1643;
                                float _3277 = _3141.z - _1644;
                                float _3278 = dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277));
                                float _3281 = inversesqrt(_3278);
                                float _3282 = _3281 * _3275;
                                float _3283 = _3281 * _3276;
                                float _3284 = _3281 * _3277;
                                float _3288 = 1.0 - (_3278 / (_3142 * _3142));
                                float _4397 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3289 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3293 = sqrt(_3278) * _3157.w;
                                float _3295 = 1.39999997615814208984375 / (_3293 + 1.39999997615814208984375);
                                float _3296 = _3295 * _3295;
                                float _3299 = ((1.0 - _3296) * dot(vec3(_3282, _3283, _3284), vec3(_524, _527, _530))) + _3296;
                                float _3302 = _3293 * _3293;
                                float _3306 = (fma(_1644, _3185.z, fma(_1643, _3185.y, _3185.x * _1642)) + _3185.w) / _3247;
                                float _3307 = (fma(_1644, _3201.z, fma(_1643, _3201.y, _3201.x * _1642)) + _3201.w) / _3247;
                                float _3311 = 1.0 - dot(vec2(_3306, _3307), vec2(_3306, _3307));
                                float _4413 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3312 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3313 = _3312 * (((isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0))) * _3289) / ((_3302 * 0.699999988079071044921875) + 1.0));
                                float _3325 = exp2(log2(1.0 / ((_3302 * 3.5) + 5.0)) * 0.25);
                                float _3326 = 1.0 - _584;
                                float _3333 = sqrt(1.0 - ((1.0 - (_3326 * _3326)) * (1.0 - (_3325 * _3325))));
                                float _3334 = _3333 * _3333;
                                float _3335 = _3334 * _3334;
                                float _3336 = _3282 - _2784;
                                float _3337 = _3283 - _2785;
                                float _3338 = _3284 - _2786;
                                float _3342 = inversesqrt(dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338)));
                                float _3346 = dot(vec3(_524, _527, _530), vec3((-0.0) - _2784, (-0.0) - _2785, (-0.0) - _2786));
                                float _4424 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3349 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3350 = dot(vec3(_524, _527, _530), vec3(_3342 * _3336, _3342 * _3337, _3342 * _3338));
                                float _4435 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3353 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3357 = ((_3353 * _3353) * (_3335 + (-1.0))) + 1.0;
                                float _3358 = _3295 * _3334;
                                float _3359 = _3358 * _3358;
                                float _3365 = ((1.0 - _3359) * dot(vec3(_524, _527, _530), vec3(_3282, _3283, _3284))) + _3359;
                                float _4446 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3366 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3367 = 1.0 - _3334;
                                float _3377 = (0.5 / (((_3366 * ((_3349 * _3367) + _3334)) + 9.9999999392252902907785028219223e-09) + (((_3366 * _3367) + _3334) * _3349))) * _3366;
                                float _4457 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3387 = (_3312 * _3289) * (((_3335 * 3.1415927410125732421875) * (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) / ((_3357 * _3357) * ((_3302 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3313 * _3157.y;
                                frontier_phi_78_pred_1 = _3313 * _3157.x;
                                frontier_phi_78_pred_2 = _3387 * _3169.z;
                                frontier_phi_78_pred_3 = _3387 * _3169.y;
                                frontier_phi_78_pred_4 = _3387 * _3169.x;
                                frontier_phi_78_pred_5 = _3313 * _3157.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3395 = frontier_phi_78_pred;
                            _3394 = frontier_phi_78_pred_1;
                            _3393 = frontier_phi_78_pred_2;
                            _3392 = frontier_phi_78_pred_3;
                            _3391 = frontier_phi_78_pred_4;
                            _3396 = frontier_phi_78_pred_5;
                            _3099 = _3394 + _3112;
                            _3100 = _3395 + _3113;
                            _3101 = _3396 + _3114;
                            _3096 = _3391 + _3109;
                            _3097 = _3392 + _3110;
                            _3098 = _3393 + _3111;
                            if (_3116 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3116;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3101;
                        frontier_phi_72_pred_1 = _3100;
                        frontier_phi_72_pred_2 = _3099;
                        frontier_phi_72_pred_3 = _3098;
                        frontier_phi_72_pred_4 = _3097;
                        frontier_phi_72_pred_5 = _3096;
                    }
                    _2769 = frontier_phi_72_pred;
                    _2767 = frontier_phi_72_pred_1;
                    _2765 = frontier_phi_72_pred_2;
                    _2763 = frontier_phi_72_pred_3;
                    _2761 = frontier_phi_72_pred_4;
                    _2759 = frontier_phi_72_pred_5;
                    uint _2904 = _2903 + 1u;
                    if (_2904 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2897 = _2759;
                        _2898 = _2761;
                        _2899 = _2763;
                        _2900 = _2765;
                        _2901 = _2767;
                        _2902 = _2769;
                        _2903 = _2904;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2769;
                frontier_phi_60_61_ladder_1 = _2767;
                frontier_phi_60_61_ladder_2 = _2763;
                frontier_phi_60_61_ladder_3 = _2761;
                frontier_phi_60_61_ladder_4 = _2759;
                frontier_phi_60_61_ladder_5 = _2765;
            }
            else
            {
                frontier_phi_60_61_ladder = _2655;
                frontier_phi_60_61_ladder_1 = _2653;
                frontier_phi_60_61_ladder_2 = _2649;
                frontier_phi_60_61_ladder_3 = _2647;
                frontier_phi_60_61_ladder_4 = _2645;
                frontier_phi_60_61_ladder_5 = _2651;
            }
            _2758 = frontier_phi_60_61_ladder_4;
            _2760 = frontier_phi_60_61_ladder_3;
            _2762 = frontier_phi_60_61_ladder_2;
            _2764 = frontier_phi_60_61_ladder_5;
            _2766 = frontier_phi_60_61_ladder_1;
            _2768 = frontier_phi_60_61_ladder;
        }
        float _2773 = isnan(1.0) ? _568 : (isnan(_568) ? 1.0 : min(_568, 1.0));
        _2578 = (_2773 * _2764) + _2109;
        _2580 = (_2773 * _2766) + _2111;
        _2582 = (_2773 * _2768) + _2113;
        _2584 = ((_2758 * 0.039999999105930328369140625) * _2773) + _2432;
        _2586 = ((_2760 * 0.039999999105930328369140625) * _2773) + _2434;
        _2588 = ((_2762 * 0.039999999105930328369140625) * _2773) + _2436;
    }
    else
    {
        _2578 = _2109;
        _2580 = _2111;
        _2582 = _2113;
        _2584 = _2432;
        _2586 = _2434;
        _2588 = _2436;
    }
    float _4473 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _4484 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _4495 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    uint _2608 = _222 + 6u;
    float _2616 = _502 / cbSceneParam._m0[86u].x;
    float _2617 = _503 / cbSceneParam._m0[86u].y;
    vec4 _2631 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2616, _2617, (log2((isnan(cbSceneParam._m0[77u].w) ? _436 : (isnan(_436) ? cbSceneParam._m0[77u].w : min(_436, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2633 = _2631.x;
    float _2634 = _2631.y;
    float _2635 = _2631.z;
    float _2636 = _2631.w;
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    if (_436 > cbSceneParam._m0[78u].w)
    {
        float _2670 = isnan(_436) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _436 : min(cbSceneParam._m0[80u].w, _436));
        float _2671 = _2670 / _436;
        float _2682 = _2671 * _487;
        float _2683 = _488 * _2671;
        float _2684 = (-0.0) - _2683;
        float _2686 = _2671 * _489;
        float _2688 = (cbSceneParam._m0[77u].w * _2684) / _2670;
        float _2689 = _2688 + cbSceneParam._m0[79u].w;
        float _2690 = cbSceneParam._m0[79u].w - _2683;
        float _2696 = sqrt(((_2682 * _2682) + (_2683 * _2683)) + (_2686 * _2686));
        float _2699 = (1.0 - (cbSceneParam._m0[77u].w / _2670)) * _2696;
        float _2704 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2706 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2859;
        if (abs((_2684 - _2688) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2859 = ((((_2689 > 0.0) ? exp2(_2704 * _2689) : (2.0 - exp2(_2706 * _2689))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2699;
        }
        else
        {
            float _2819 = 1.0 / cbSceneParam._m0[80u].x;
            float _2820 = isnan(_2690) ? _2689 : (isnan(_2689) ? _2690 : max(_2689, _2690));
            float _2821 = isnan(_2690) ? _2689 : (isnan(_2689) ? _2690 : min(_2689, _2690));
            float _2830 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : min(_2820, 0.0));
            float _2831 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : min(_2821, 0.0));
            _2859 = ((abs(_2696 / _2684) * cbSceneParam._m0[80u].y) * ((((_2830 - _2831) * 2.0) - ((exp2(_2704 * (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0)))) - exp2(_2704 * (isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0))))) * _2819)) - ((exp2(_2706 * _2830) - exp2(_2706 * _2831)) * _2819))) + (_2699 * cbSceneParam._m0[80u].z);
        }
        vec4 _2861 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2616, _2617, 1.0), 0.0);
        float _2870 = exp2((_2859 * (-1.44269502162933349609375)) * (1.0 - _2861.w));
        float _2871 = log2(_2870);
        float _2887 = log2(_2636);
        _2708 = (exp2(_2887 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2871 * cbSceneParam._m0[78u].x)) * _2861.x) / cbSceneParam._m0[78u].x)) + _2633;
        _2710 = (exp2(_2887 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2871 * cbSceneParam._m0[78u].y)) * _2861.y) / cbSceneParam._m0[78u].y)) + _2634;
        _2712 = (exp2(_2887 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2871 * cbSceneParam._m0[78u].z)) * _2861.z) / cbSceneParam._m0[78u].z)) + _2635;
        _2714 = _2870 * _2636;
    }
    else
    {
        _2708 = _2633;
        _2710 = _2634;
        _2712 = _2635;
        _2714 = _2636;
    }
    float _2726 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2727 = _2726 == 3.0;
    float _2728 = log2(_2714);
    float _2735 = exp2(_2728 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2578 + ((isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))) * _568))) + ((_2584 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _1374)) * cbPerFrame._m0[3u].x));
    float _2736 = exp2(_2728 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2580 + ((isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))) * _568))) + ((_2586 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _1374)) * cbPerFrame._m0[3u].x));
    float _2737 = exp2(_2728 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2582 + ((isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))) * _568))) + ((_2588 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _1374)) * cbPerFrame._m0[3u].x));
    float _2746 = (_2726 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2746 * (_2727 ? _2735 : (_2735 + (cbSceneParam._m0[72u].w * _2708)));
    SV_Target.y = _2746 * (_2727 ? _2736 : (_2736 + (cbSceneParam._m0[72u].w * _2710)));
    SV_Target.z = _2746 * (_2727 ? _2737 : (_2737 + (cbSceneParam._m0[72u].w * _2712)));
    SV_Target.w = cbInstanceData._m0[_2608].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2608].w;
}


