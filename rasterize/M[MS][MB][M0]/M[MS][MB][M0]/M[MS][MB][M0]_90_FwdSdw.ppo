#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1236;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _370 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _370) * cbMtdParam._m0[24u].x) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3825 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _395 = (_388 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _396 = (_388 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _397 = (_388 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _415 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _272) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _273) + cbTextureTilingScale._m0[20u].w));
    vec4 _440 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _457 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _459 = _457.x;
    float _460 = _457.y;
    float _461 = _457.z;
    float _470 = ((_440.z - _461) * _388) + _461;
    float _473 = ((((_440.x - _459) * _388) + _459) * 2.0) + (-1.0);
    float _474 = ((((_440.y - _460) * _388) + _460) * 2.0) + (-1.0);
    float _475 = dot(vec2(_473, _474), vec2(_473, _474));
    float _3836 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _480 = sqrt(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))));
    vec4 _493 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _511 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _513 = _511.x;
    float _514 = 1.0 - _513;
    float _520 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _523 = ((isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : min(_520, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _532 = (_523 - ((((((_513 - _514) * cbMtdParam._m0[24u].z) + _514) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _523))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3857 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _533 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _540 = (_533 * (cbMtdParam._m0[17u].x - _395)) + _395;
    float _541 = (_533 * (cbMtdParam._m0[17u].y - _396)) + _396;
    float _542 = (_533 * (cbMtdParam._m0[17u].z - _397)) + _397;
    vec4 _554 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _556 = _554.x;
    float _557 = 1.0 - _556;
    float _584 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_556 - _557) * cbMtdParam._m0[24u].w) + _557) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3868 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _585 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _593 = ((((cbMtdParam._m0[10u].x - _540) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _585) + _540;
    float _594 = ((((cbMtdParam._m0[10u].y - _541) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _585) + _541;
    float _595 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _542)) * _585) + _542;
    float _600 = (((_415.z - _470) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _470;
    vec4 _614 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _621 = (_614.x * 2.0) + (-1.0);
    float _622 = (_614.y * 2.0) + (-1.0);
    float _623 = dot(vec2(_621, _622), vec2(_621, _622));
    float _3879 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _631 = (_533 * (_614.z - _600)) + _600;
    float _634 = ((cbMtdParam._m0[23u].y - _631) * _585) + _631;
    vec4 _653 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _659 = (_653.x * 2.0) + (-1.0);
    float _660 = (_653.y * 2.0) + (-1.0);
    float _661 = dot(vec2(_659, _660), vec2(_659, _660));
    float _3890 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _671 = _473 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_415.x * 2.0) + (-1.0)));
    float _672 = _474 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_415.y * 2.0) + (-1.0)));
    float _684 = (((_621 - _671) + (cbMtdParam._m0[21u].x * _671)) * _533) + _671;
    float _685 = (((_622 - _672) + (cbMtdParam._m0[21u].x * _672)) * _533) + _672;
    float _686 = (_533 * (sqrt(1.0 - (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) - _480)) + _480;
    float _697 = (((_659 - _684) + (_684 * cbMtdParam._m0[22u].z)) * _585) + _684;
    float _698 = (((_660 - _685) + (_685 * cbMtdParam._m0[22u].z)) * _585) + _685;
    float _699 = ((sqrt(1.0 - (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) - _686) * _585) + _686;
    float _701 = cbMtdParam._m0[22u].x + _493.w;
    float _704 = fma(_699, _240 * NORMAL.x, fma(_698, _247 * TANGENT.x, (_233 * _225) * _697));
    float _707 = fma(_699, _240 * NORMAL.y, fma(_698, _247 * TANGENT.y, (_233 * _226) * _697));
    float _710 = fma(_699, _240 * NORMAL.z, fma(_698, _247 * TANGENT.z, (_233 * _227) * _697));
    float _714 = inversesqrt(dot(vec3(_704, _707, _710), vec3(_704, _707, _710)));
    float _715 = _714 * _704;
    float _716 = _714 * _707;
    float _717 = _714 * _710;
    float _3901 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _718 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _3912 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _3923 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _3934 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3945 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _736 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _787 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _777);
    float _788 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _777);
    float _789 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _777);
    float _793 = inversesqrt(dot(vec3(_787, _788, _789), vec3(_787, _788, _789)));
    float _794 = _787 * _793;
    float _795 = _788 * _793;
    float _796 = _789 * _793;
    float _802 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _803 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _821 = fma(_717, cbSceneParam._m0[5u].z, fma(_716, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _715));
    float _824 = fma(_717, cbSceneParam._m0[6u].z, fma(_716, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _715));
    float _827 = fma(_717, cbSceneParam._m0[7u].z, fma(_716, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _715));
    uint _841 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _847 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_841].x;
    float _848 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * cbInstanceData._m0[_841].y;
    float _849 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * cbInstanceData._m0[_841].z;
    float _3956 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    vec4 _861 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _802, cbSceneParam._m0[86u].y * _803));
    float _865 = ((isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * TEXCOORD_5.w) * _861.x;
    float _866 = dot(vec3(_715, _716, _717), vec3(_794, _795, _796));
    float _869 = _866 * 2.0;
    float _873 = (_869 * _715) - _794;
    float _874 = (_869 * _716) - _795;
    float _875 = (_869 * _717) - _796;
    float _879 = abs(dot(vec3(_794, _795, _796), vec3(_715, _716, _717)));
    float _3989 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _881 = sqrt(_718);
    float _894 = exp2((_881 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_881 * 3.0));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1235;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _960 = fma(_934, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926));
        float _964 = fma(_934, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926));
        float _968 = fma(_934, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926));
        float _993 = _926 + _715;
        float _994 = _930 + _716;
        float _995 = _934 + _717;
        float _1005 = fma(_995, cbModelParam._m0[26u].z, fma(_994, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _993)) - _960;
        float _1006 = fma(_995, cbModelParam._m0[27u].z, fma(_994, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _993)) - _964;
        float _1007 = fma(_995, cbModelParam._m0[28u].z, fma(_994, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _993)) - _968;
        float _1011 = inversesqrt(dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007)));
        float _1024 = ((_1011 * _1005) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_960 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1011 * _1006) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_964 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1011 * _1007) / cbModelParam._m0[34u].z) + ((((((_968 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        float _1063 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1029.x + (-0.5));
        float _1065 = _1063 * (_1029.y + (-0.5));
        float _1066 = _1063 * (_1029.z + (-0.5));
        float _1073 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1036.x + (-0.5));
        float _1075 = _1073 * (_1036.y + (-0.5));
        float _1076 = _1073 * (_1036.z + (-0.5));
        float _1083 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1043.x + (-0.5));
        float _1085 = _1083 * (_1043.y + (-0.5));
        float _1086 = _1083 * (_1043.z + (-0.5));
        float _1093 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1050.x + (-0.5));
        float _1095 = _1093 * (_1050.y + (-0.5));
        float _1096 = _1093 * (_1050.z + (-0.5));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = _1064 * 0.5;
        float _1101 = _1074 * 0.5;
        float _1102 = _1084 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1117 = (dot(vec3(_715, _716, _717), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1127 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _4037 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1129 + 1.0))) + _1134) * _1097;
        float _1144 = _1065 * 0.5;
        float _1145 = _1075 * 0.5;
        float _1146 = _1085 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_715, _716, _717), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _4070 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1171 + 1.0))) + _1176) * _1098;
        float _1186 = _1066 * 0.5;
        float _1187 = _1076 * 0.5;
        float _1188 = _1086 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_715, _716, _717), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _4103 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1213 + 1.0))) + _1218) * _1099;
        _1235 = _1066;
        _1237 = _1065;
        _1238 = _1064;
        _1239 = _1076;
        _1240 = _1075;
        _1241 = _1074;
        _1242 = _1086;
        _1243 = _1085;
        _1244 = _1084;
        _1245 = _1099;
        _1246 = _1098;
        _1247 = _1097;
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
    }
    else
    {
        _1235 = _1236;
        _1237 = _1236;
        _1238 = _1236;
        _1239 = _1236;
        _1240 = _1236;
        _1241 = _1236;
        _1242 = _1236;
        _1243 = _1236;
        _1244 = _1236;
        _1245 = _1236;
        _1246 = _1236;
        _1247 = _1236;
        _1248 = 0.0;
        _1249 = 0.0;
        _1250 = 0.0;
    }
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1275 = fma(_934, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926));
        float _1279 = fma(_934, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926));
        float _1283 = fma(_934, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926));
        float _1306 = _926 + _715;
        float _1307 = _930 + _716;
        float _1308 = _934 + _717;
        float _1318 = fma(_1308, cbModelParam._m0[30u].z, fma(_1307, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1306)) - _1275;
        float _1319 = fma(_1308, cbModelParam._m0[31u].z, fma(_1307, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1306)) - _1279;
        float _1320 = fma(_1308, cbModelParam._m0[32u].z, fma(_1307, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1306)) - _1283;
        float _1324 = inversesqrt(dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320)));
        float _1337 = ((_1324 * _1318) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1275 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1338 = ((_1324 * _1319) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1279 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1339 = ((_1324 * _1320) / cbModelParam._m0[35u].z) + ((((((_1283 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        float _1374 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1341.x + (-0.5));
        float _1376 = _1374 * (_1341.y + (-0.5));
        float _1377 = _1374 * (_1341.z + (-0.5));
        float _1384 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1348.x + (-0.5));
        float _1386 = _1384 * (_1348.y + (-0.5));
        float _1387 = _1384 * (_1348.z + (-0.5));
        float _1394 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1355.x + (-0.5));
        float _1396 = _1394 * (_1355.y + (-0.5));
        float _1397 = _1394 * (_1355.z + (-0.5));
        float _1404 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1362.x + (-0.5));
        float _1406 = _1404 * (_1362.y + (-0.5));
        float _1407 = _1404 * (_1362.z + (-0.5));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = _1375 * 0.5;
        float _1412 = _1385 * 0.5;
        float _1413 = _1395 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_715, _716, _717), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _4166 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1438 + 1.0))) + _1443) * _1408;
        float _1453 = _1376 * 0.5;
        float _1454 = _1386 * 0.5;
        float _1455 = _1396 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_715, _716, _717), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _4199 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1480 + 1.0))) + _1485) * _1409;
        float _1495 = _1377 * 0.5;
        float _1496 = _1387 * 0.5;
        float _1497 = _1397 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_715, _716, _717), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4232 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1522 + 1.0))) + _1527) * _1410;
        _1544 = _1377;
        _1545 = _1376;
        _1546 = _1375;
        _1547 = _1387;
        _1548 = _1386;
        _1549 = _1385;
        _1550 = _1397;
        _1551 = _1396;
        _1552 = _1395;
        _1553 = _1410;
        _1554 = _1409;
        _1555 = _1408;
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
        _1557 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
    }
    else
    {
        _1544 = _1236;
        _1545 = _1236;
        _1546 = _1236;
        _1547 = _1236;
        _1548 = _1236;
        _1549 = _1236;
        _1550 = _1236;
        _1551 = _1236;
        _1552 = _1236;
        _1553 = _1236;
        _1554 = _1236;
        _1555 = _1236;
        _1556 = 0.0;
        _1557 = 0.0;
        _1558 = 0.0;
    }
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1248)) + _1248;
    float _1569 = (cbModelParam._m0[1u].x * (_1557 - _1249)) + _1249;
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1250)) + _1250;
    float _1591 = fma(_1570, cbSceneParam._m0[89u].z, fma(_1569, cbSceneParam._m0[89u].y, _1568 * cbSceneParam._m0[89u].x));
    float _1594 = fma(_1570, cbSceneParam._m0[90u].z, fma(_1569, cbSceneParam._m0[90u].y, _1568 * cbSceneParam._m0[90u].x));
    float _1597 = fma(_1570, cbSceneParam._m0[91u].z, fma(_1569, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1568));
    float _1612 = _873 * 0.5;
    float _1613 = _874 * 0.5;
    float _1614 = _875 * 0.5;
    float _1615 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1618 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1545, _1548, _1551, _1554));
    float _1621 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1655;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1628 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1235, _1239, _1242, _1245));
        float _1632 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1237, _1240, _1243, _1246));
        float _1636 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1238, _1241, _1244, _1247));
        float _1643 = dot(vec4(cbModelParam._m0[39u]), vec4(_1612, _1613, _1614, 1.0));
        _1655 = dot(vec3(isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1643) ? 0.0 : (isnan(0.0) ? _1643 : max(0.0, _1643))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1655 = 1.0;
    }
    float _1666;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1657 = dot(vec4(cbModelParam._m0[40u]), vec4(_1612, _1613, _1614, 1.0));
        _1666 = dot(vec3(isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1657) ? 0.0 : (isnan(0.0) ? _1657 : max(0.0, _1657))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1666 = 1.0;
    }
    float _1670 = (_1666 * cbModelParam._m0[1u].x) + (_1655 * (1.0 - cbModelParam._m0[1u].x));
    float _1680 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _718);
    float _1681 = isnan(_1680) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1680 : min(cbModelParam._m0[25u].z, _1680));
    float _1762;
    float _1764;
    float _1766;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1729 = fma(_934, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _926)) + cbModelParam._m0[13u].w;
        float _1733 = fma(_934, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _926)) + cbModelParam._m0[14u].w;
        float _1737 = fma(_934, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _926)) + cbModelParam._m0[15u].w;
        float _1740 = fma(_875, cbModelParam._m0[13u].z, fma(_874, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _873));
        float _1743 = fma(_875, cbModelParam._m0[14u].z, fma(_874, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _873));
        float _1746 = fma(_875, cbModelParam._m0[15u].z, fma(_874, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _873));
        float _1774;
        if (_1740 > 0.0)
        {
            _1774 = abs((1.0 - _1729) / _1740);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1729 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1774 = frontier_phi_14_12_ladder;
        }
        float _1944;
        if (_1743 > 0.0)
        {
            _1944 = abs((1.0 - _1733) / _1743);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1733 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1944 = frontier_phi_23_19_ladder;
        }
        float _2239;
        if (_1746 > 0.0)
        {
            _2239 = abs((1.0 - _1737) / _1746);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1737 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2239 = frontier_phi_35_30_ladder;
        }
        float _2241 = isnan(_1944) ? _1774 : (isnan(_1774) ? _1944 : min(_1774, _1944));
        float _2242 = isnan(_2239) ? _2241 : (isnan(_2241) ? _2239 : min(_2241, _2239));
        float _2246 = (_2242 * _1740) + _1729;
        float _2247 = (_2242 * _1743) + _1733;
        float _2248 = (_2242 * _1746) + _1737;
        float _2249 = _2242 * 9.9999997473787516355514526367188e-05;
        float _2251 = (-1.0) - _2249;
        float _2253 = _2249 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2248 > _2253) || ((_2248 < _2251) || ((_2247 > _2253) || ((_2247 < _2251) || ((_2246 < _2251) || (_2246 > _2253))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2393 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2248, cbModelParam._m0[9u].z, fma(_2247, cbModelParam._m0[9u].y, _2246 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2248, cbModelParam._m0[10u].z, fma(_2247, cbModelParam._m0[10u].y, _2246 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2248, cbModelParam._m0[11u].z, fma(_2247, cbModelParam._m0[11u].y, _2246 * cbModelParam._m0[11u].x))), _1681);
            frontier_phi_13_35_ladder = _2393.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2393.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2393.x * cbModelParam._m0[1u].y;
        }
        _1762 = frontier_phi_13_35_ladder_2;
        _1764 = frontier_phi_13_35_ladder_1;
        _1766 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1750 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_873, _874, _875), _1681);
        _1762 = _1750.x * cbModelParam._m0[1u].y;
        _1764 = _1750.y * cbModelParam._m0[1u].y;
        _1766 = _1750.z * cbModelParam._m0[1u].y;
    }
    float _1770 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _718);
    float _1771 = isnan(_1770) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1770 : min(cbModelParam._m0[25u].w, _1770));
    float _1861;
    float _1863;
    float _1865;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1825 = fma(_934, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _926)) + cbModelParam._m0[21u].w;
        float _1829 = fma(_934, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _926)) + cbModelParam._m0[22u].w;
        float _1833 = fma(_934, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _926)) + cbModelParam._m0[23u].w;
        float _1836 = fma(_875, cbModelParam._m0[21u].z, fma(_874, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _873));
        float _1839 = fma(_875, cbModelParam._m0[22u].z, fma(_874, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _873));
        float _1842 = fma(_875, cbModelParam._m0[23u].z, fma(_874, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _873));
        float _1949;
        if (_1836 > 0.0)
        {
            _1949 = abs((1.0 - _1825) / _1836);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1825 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1949 = frontier_phi_25_21_ladder;
        }
        float _2266;
        if (_1839 > 0.0)
        {
            _2266 = abs((1.0 - _1829) / _1839);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1829 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2266 = frontier_phi_37_32_ladder;
        }
        float _2593;
        if (_1842 > 0.0)
        {
            _2593 = abs((1.0 - _1833) / _1842);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1833 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2593 = frontier_phi_47_44_ladder;
        }
        float _2595 = isnan(_2266) ? _1949 : (isnan(_1949) ? _2266 : min(_1949, _2266));
        float _2596 = isnan(_2593) ? _2595 : (isnan(_2595) ? _2593 : min(_2595, _2593));
        float _2600 = (_2596 * _1836) + _1825;
        float _2601 = (_2596 * _1839) + _1829;
        float _2602 = (_2596 * _1842) + _1833;
        float _2603 = _2596 * 9.9999997473787516355514526367188e-05;
        float _2604 = (-1.0) - _2603;
        float _2606 = _2603 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2602 > _2606) || ((_2602 < _2604) || ((_2601 > _2606) || ((_2601 < _2604) || ((_2600 < _2604) || (_2600 > _2606))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2720 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2602, cbModelParam._m0[17u].z, fma(_2601, cbModelParam._m0[17u].y, _2600 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2602, cbModelParam._m0[18u].z, fma(_2601, cbModelParam._m0[18u].y, _2600 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2602, cbModelParam._m0[19u].z, fma(_2601, cbModelParam._m0[19u].y, _2600 * cbModelParam._m0[19u].x))), _1771);
            frontier_phi_22_47_ladder = _2720.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2720.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2720.x * cbModelParam._m0[1u].z;
        }
        _1861 = frontier_phi_22_47_ladder_2;
        _1863 = frontier_phi_22_47_ladder_1;
        _1865 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_873, _874, _875), _1771);
        _1861 = _1845.x * cbModelParam._m0[1u].z;
        _1863 = _1845.y * cbModelParam._m0[1u].z;
        _1865 = _1845.z * cbModelParam._m0[1u].z;
    }
    float _1877 = ((((1.0 - _894) * ((_881 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_894 * _881)) * _865;
    float _1878 = _1877 * ((cbModelParam._m0[1u].w * (_1861 - _1762)) + _1762);
    float _1879 = _1877 * ((cbModelParam._m0[1u].w * (_1863 - _1764)) + _1764);
    float _1880 = _1877 * ((cbModelParam._m0[1u].w * (_1865 - _1766)) + _1766);
    float _1883 = fma(_1880, cbSceneParam._m0[89u].z, fma(_1879, cbSceneParam._m0[89u].y, _1878 * cbSceneParam._m0[89u].x));
    float _1886 = fma(_1880, cbSceneParam._m0[90u].z, fma(_1879, cbSceneParam._m0[90u].y, _1878 * cbSceneParam._m0[90u].x));
    float _1889 = fma(_1880, cbSceneParam._m0[91u].z, fma(_1879, cbSceneParam._m0[91u].y, _1878 * cbSceneParam._m0[91u].x));
    float _1923 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1927 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1931 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1935 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1936 = _1923 / _1935;
    float _1937 = _1927 / _1935;
    float _1938 = _1931 / _1935;
    float _2085;
    float _2086;
    float _2087;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1965 = ((uint(_1938 > cbSceneParam._m0[59u].y) + uint(_1938 > cbSceneParam._m0[59u].x)) + uint(_1938 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1966 = _1965 + 43u;
        uint _1974 = _1965 + 44u;
        uint _1982 = _1965 + 45u;
        uint _1990 = _1965 + 46u;
        float _2001 = fma(_1935, cbSceneParam._m0[_1966].w, fma(_1931, cbSceneParam._m0[_1966].z, fma(_1927, cbSceneParam._m0[_1966].y, _1923 * cbSceneParam._m0[_1966].x)));
        float _2005 = fma(_1935, cbSceneParam._m0[_1974].w, fma(_1931, cbSceneParam._m0[_1974].z, fma(_1927, cbSceneParam._m0[_1974].y, _1923 * cbSceneParam._m0[_1974].x)));
        float _2013 = fma(_1935, cbSceneParam._m0[_1990].w, fma(_1931, cbSceneParam._m0[_1990].z, fma(_1927, cbSceneParam._m0[_1990].y, _1923 * cbSceneParam._m0[_1990].x)));
        float _2018 = cbSceneParam._m0[33u].z * _2013;
        float _2020 = cbSceneParam._m0[33u].w * _2013;
        float _2023 = fma(_1935, cbSceneParam._m0[_1982].w, fma(_1931, cbSceneParam._m0[_1982].z, fma(_1927, cbSceneParam._m0[_1982].y, _1923 * cbSceneParam._m0[_1982].x))) / _2013;
        float _2071 = (cbSceneParam._m0[33u].x - sqrt(((_1937 * _1937) + (_1936 * _1936)) + (_1938 * _1938))) * cbSceneParam._m0[33u].y;
        float _4358 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2078 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2018 + _2001) / _2013, (_2020 + _2005) / _2013), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2020 + _2001) / _2013, (_2005 - _2018) / _2013), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2001 - _2018) / _2013, (_2005 - _2020) / _2013), _2023), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2001 - _2020) / _2013, (_2018 + _2005) / _2013), _2023), 0.0)).x), vec4(0.25)));
        _2085 = 1.0 - (_2078 * cbSceneParam._m0[34u].x);
        _2086 = 1.0 - (_2078 * cbSceneParam._m0[34u].y);
        _2087 = 1.0 - (_2078 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2085 = 1.0;
        _2086 = 1.0;
        _2087 = 1.0;
    }
    float _2151;
    float _2153;
    float _2155;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2139 = fma(_1935, cbSceneParam._m0[63u].w, fma(_1931, cbSceneParam._m0[63u].z, fma(_1927, cbSceneParam._m0[63u].y, _1923 * cbSceneParam._m0[63u].x)));
        float _2140 = fma(_1935, cbSceneParam._m0[60u].w, fma(_1931, cbSceneParam._m0[60u].z, fma(_1927, cbSceneParam._m0[60u].y, _1923 * cbSceneParam._m0[60u].x))) / _2139;
        float _2141 = fma(_1935, cbSceneParam._m0[61u].w, fma(_1931, cbSceneParam._m0[61u].z, fma(_1927, cbSceneParam._m0[61u].y, _1923 * cbSceneParam._m0[61u].x))) / _2139;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2140 >= cbSceneParam._m0[64u].x) && (_2141 >= cbSceneParam._m0[64u].y)) && (_2140 <= cbSceneParam._m0[64u].z)) && (_2141 <= cbSceneParam._m0[64u].w))
        {
            float _2279 = fma(_1935, cbSceneParam._m0[62u].w, fma(_1931, cbSceneParam._m0[62u].z, fma(_1927, cbSceneParam._m0[62u].y, _1923 * cbSceneParam._m0[62u].x))) / _2139;
            float _2283 = isnan(cbSceneParam._m0[41u].w) ? _2279 : (isnan(_2279) ? cbSceneParam._m0[41u].w : max(_2279, cbSceneParam._m0[41u].w));
            float _2326 = (cbSceneParam._m0[33u].x - sqrt(((_1937 * _1937) + (_1936 * _1936)) + (_1938 * _1938))) * cbSceneParam._m0[33u].y;
            float _4374 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
            float _2333 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2140, cbSceneParam._m0[33u].w + _2141), _2283), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2140, _2141 - cbSceneParam._m0[33u].z), _2283), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2140 - cbSceneParam._m0[33u].z, _2141 - cbSceneParam._m0[33u].w), _2283), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2140 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2141), _2283), 0.0)).x), vec4(0.25)));
            float _2337 = 1.0 - (_2333 * cbSceneParam._m0[34u].x);
            float _2338 = 1.0 - (_2333 * cbSceneParam._m0[34u].y);
            float _2339 = 1.0 - (_2333 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2339) ? _2087 : (isnan(_2087) ? _2339 : min(_2087, _2339));
            frontier_phi_34_33_ladder_1 = isnan(_2338) ? _2086 : (isnan(_2086) ? _2338 : min(_2086, _2338));
            frontier_phi_34_33_ladder_2 = isnan(_2337) ? _2085 : (isnan(_2085) ? _2337 : min(_2085, _2337));
        }
        else
        {
            frontier_phi_34_33_ladder = _2087;
            frontier_phi_34_33_ladder_1 = _2086;
            frontier_phi_34_33_ladder_2 = _2085;
        }
        _2151 = frontier_phi_34_33_ladder_2;
        _2153 = frontier_phi_34_33_ladder_1;
        _2155 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2151 = _2085;
        _2153 = _2086;
        _2155 = _2087;
    }
    uvec4 _2160 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2162 = _2160.x * 14u;
    uint _2163 = _2162 + 13u;
    float _2170 = _865 + (-1.0);
    float _2175 = (cbLight._m0[_2163].x * _2170) + 1.0;
    float _2176 = (cbLight._m0[_2163].y * _2170) + 1.0;
    float _2177 = (cbLight._m0[_2163].z * _2170) + 1.0;
    float _2178 = (cbLight._m0[_2163].w * _2170) + 1.0;
    uint _2179 = _2162 + 5u;
    float _2185 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
    uint _2189 = _2162 + 4u;
    float _2198 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
    uint _2202 = _2162 | 1u;
    float _2213 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_715, _716, _717));
    float _2216 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_715, _716, _717));
    float _4410 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _4421 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2221 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * 0.3183098733425140380859375;
    float _2223 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * 0.3183098733425140380859375;
    float _2230 = ((cbLight._m0[_2179].x * _2185) * _2223) + (((cbLight._m0[_2189].x * _2151) * _2198) * _2221);
    float _2231 = ((_2185 * cbLight._m0[_2179].y) * _2223) + (((cbLight._m0[_2189].y * _2153) * _2198) * _2221);
    float _2232 = ((_2185 * cbLight._m0[_2179].z) * _2223) + (((cbLight._m0[_2189].z * _2155) * _2198) * _2221);
    uvec4 _2236 = floatBitsToUint(cbLight._m0[_2162 + 12u]);
    bool _2238 = _2236.x == 0u;
    float _2340;
    float _2342;
    float _2344;
    if (_2238)
    {
        _2340 = _2230;
        _2342 = _2231;
        _2344 = _2232;
    }
    else
    {
        uint _2348 = _2162 + 6u;
        float _2364 = (dot(vec3(cbLight._m0[_2162 + 2u].xyz), vec3(_715, _716, _717)) * 0.5) + 0.5;
        float _2365 = _2364 * _2364;
        float _4432 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2366 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2367 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2340 = (((cbLight._m0[_2348].x * 0.3183098733425140380859375) * _2366) * _2367) + _2230;
        _2342 = (((cbLight._m0[_2348].y * 0.3183098733425140380859375) * _2366) * _2367) + _2231;
        _2344 = (((cbLight._m0[_2348].z * 0.3183098733425140380859375) * _2366) * _2367) + _2232;
    }
    bool _2347 = _2236.y == 0u;
    float _2402;
    float _2404;
    float _2406;
    if (_2347)
    {
        _2402 = _2340;
        _2404 = _2342;
        _2406 = _2344;
    }
    else
    {
        uint _2564 = _2162 + 7u;
        float _2580 = (dot(vec3(cbLight._m0[_2162 + 3u].xyz), vec3(_715, _716, _717)) * 0.5) + 0.5;
        float _2581 = _2580 * _2580;
        float _4448 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2582 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2583 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2402 = (((cbLight._m0[_2564].x * 0.3183098733425140380859375) * _2582) * _2583) + _2340;
        _2404 = (((cbLight._m0[_2564].y * 0.3183098733425140380859375) * _2582) * _2583) + _2342;
        _2406 = (((cbLight._m0[_2564].z * 0.3183098733425140380859375) * _2582) * _2583) + _2344;
    }
    uint _2409 = _2162 + 8u;
    float _2422 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _718) * 0.949999988079071044921875);
    float _2423 = _2422 * _2422;
    float _2424 = cbLight._m0[_2162].x + _794;
    float _2425 = cbLight._m0[_2162].y + _795;
    float _2426 = cbLight._m0[_2162].z + _796;
    float _2430 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
    float _2431 = _2430 * _2424;
    float _2432 = _2430 * _2425;
    float _2433 = _2430 * _2426;
    float _2434 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2162].xyz));
    float _4464 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _4475 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _2438 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2439 = dot(vec3(_715, _716, _717), vec3(_2431, _2432, _2433));
    float _4486 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2443 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2431, _2432, _2433));
    float _4497 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2447 = _2423 * _2423;
    float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
    float _2462 = (exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2463 = 1.0 - _2423;
    float _2474 = (0.5 / (((_2438 * ((_2437 * _2463) + _2423)) + 9.9999999392252902907785028219223e-09) + (((_2438 * _2463) + _2423) * _2437))) * _2437;
    float _4508 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2476 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
    uint _2490 = _2162 + 9u;
    float _2501 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2202].w)) * _718) * 0.949999988079071044921875);
    float _2502 = _2501 * _2501;
    float _2503 = cbLight._m0[_2202].x + _794;
    float _2504 = cbLight._m0[_2202].y + _795;
    float _2505 = cbLight._m0[_2202].z + _796;
    float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
    float _2510 = _2509 * _2503;
    float _2511 = _2509 * _2504;
    float _2512 = _2509 * _2505;
    float _2513 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2202].xyz));
    float _4519 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2516 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _2517 = dot(vec3(_715, _716, _717), vec3(_2510, _2511, _2512));
    float _4530 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2520 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _2521 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_2510, _2511, _2512));
    float _4541 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2525 = _2502 * _2502;
    float _2529 = ((_2520 * _2520) * (_2525 + (-1.0))) + 1.0;
    float _2538 = (exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2539 = 1.0 - _2502;
    float _2549 = (0.5 / (((_2438 * ((_2516 * _2539) + _2502)) + 9.9999999392252902907785028219223e-09) + (((_2438 * _2539) + _2502) * _2516))) * _2516;
    float _4552 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2551 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2525 / ((_2529 * _2529) * 3.141590118408203125));
    float _2561 = (((_2538 * cbLight._m0[_2490].x) * _2551) * _2185) + ((((cbLight._m0[_2409].x * _2151) * _2462) * _2476) * _2198);
    float _2562 = (((_2538 * cbLight._m0[_2490].y) * _2551) * _2185) + ((((cbLight._m0[_2409].y * _2153) * _2462) * _2476) * _2198);
    float _2563 = (((_2538 * cbLight._m0[_2490].z) * _2551) * _2185) + ((((cbLight._m0[_2409].z * _2155) * _2462) * _2476) * _2198);
    float _2619;
    float _2621;
    float _2623;
    if (_2238)
    {
        _2619 = _2561;
        _2621 = _2562;
        _2623 = _2563;
    }
    else
    {
        uint _2625 = _2162 + 2u;
        uint _2629 = _2162 + 10u;
        float _2643 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2625].w)) * _718) * 0.949999988079071044921875);
        float _2644 = _2643 * _2643;
        float _2645 = cbLight._m0[_2625].x + _794;
        float _2646 = cbLight._m0[_2625].y + _795;
        float _2647 = cbLight._m0[_2625].z + _796;
        float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
        float _2652 = _2651 * _2645;
        float _2653 = _2651 * _2646;
        float _2654 = _2651 * _2647;
        float _2655 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2625].xyz));
        float _4563 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2659 = dot(vec3(_715, _716, _717), vec3(_2652, _2653, _2654));
        float _4574 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2663 = dot(vec3(cbLight._m0[_2625].xyz), vec3(_2652, _2653, _2654));
        float _4585 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2667 = _2644 * _2644;
        float _2671 = ((_2662 * _2662) * (_2667 + (-1.0))) + 1.0;
        float _2680 = (exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2681 = 1.0 - _2644;
        float _2691 = (0.5 / (((_2438 * ((_2658 * _2681) + _2644)) + 9.9999999392252902907785028219223e-09) + (((_2438 * _2681) + _2644) * _2658))) * _2658;
        float _4596 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2693 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2667 / ((_2671 * _2671) * 3.141590118408203125));
        float _2694 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
        _2619 = (((_2680 * cbLight._m0[_2629].x) * _2693) * _2694) + _2561;
        _2621 = (((_2680 * cbLight._m0[_2629].y) * _2693) * _2694) + _2562;
        _2623 = (((_2680 * cbLight._m0[_2629].z) * _2693) * _2694) + _2563;
    }
    float _2725;
    float _2727;
    float _2729;
    if (_2347)
    {
        _2725 = _2619;
        _2727 = _2621;
        _2729 = _2623;
    }
    else
    {
        uint _2736 = _2162 + 3u;
        uint _2740 = _2162 + 11u;
        float _2754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2736].w)) * _718) * 0.949999988079071044921875);
        float _2755 = _2754 * _2754;
        float _2756 = cbLight._m0[_2736].x + _794;
        float _2757 = cbLight._m0[_2736].y + _795;
        float _2758 = cbLight._m0[_2736].z + _796;
        float _2762 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
        float _2763 = _2762 * _2756;
        float _2764 = _2762 * _2757;
        float _2765 = _2762 * _2758;
        float _2766 = dot(vec3(_715, _716, _717), vec3(cbLight._m0[_2736].xyz));
        float _4612 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2769 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2770 = dot(vec3(_715, _716, _717), vec3(_2763, _2764, _2765));
        float _4623 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2773 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2774 = dot(vec3(cbLight._m0[_2736].xyz), vec3(_2763, _2764, _2765));
        float _4634 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2778 = _2755 * _2755;
        float _2782 = ((_2773 * _2773) * (_2778 + (-1.0))) + 1.0;
        float _2791 = (exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2792 = 1.0 - _2755;
        float _2802 = (0.5 / (((_2438 * ((_2769 * _2792) + _2755)) + 9.9999999392252902907785028219223e-09) + (((_2438 * _2792) + _2755) * _2769))) * _2769;
        float _4645 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2804 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2778 / ((_2782 * _2782) * 3.141590118408203125));
        float _2805 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2725 = (((_2791 * cbLight._m0[_2740].x) * _2804) * _2805) + _2619;
        _2727 = (((_2791 * cbLight._m0[_2740].y) * _2804) * _2805) + _2621;
        _2729 = (((_2791 * cbLight._m0[_2740].z) * _2804) * _2805) + _2623;
    }
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    if (_2160.y == 0u)
    {
        uvec4 _2826 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2827 = _2826.x;
        uint _2838 = uint((float(_2826.y) * floor(float(uint(cbSceneParam._m0[85u].y * _803) / _2827))) + floor(float(uint(cbSceneParam._m0[85u].x * _802) / _2827)));
        float _2848 = (log2(_1938 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2849 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        uint _2852 = uint(isnan(14.0) ? _2849 : (isnan(_2849) ? 14.0 : min(_2849, 14.0)));
        uvec4 _2857 = texelFetch(g_lightClusterGridBuffer, int(((_2852 << 2u) + (_2838 << 6u)) >> 2u));
        uint _2858 = _2857.x;
        uint _2859 = _2826.z;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        if (((((1u << ((_2859 >> 4u) & 15u)) + 4294967295u) & _2858) == 0u) || ((_2859 & 240u) == 0u))
        {
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
        }
        else
        {
            float _2939;
            float _2941;
            float _2943;
            float _2945;
            float _2947;
            float _2949;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            uint _3089 = 0u;
            uint _3098;
            bool _3099;
            for (;;)
            {
                _3098 = texelFetch(g_lightClassification, int((((_2852 << 5u) + (_2838 << 9u)) + (_3089 << 2u)) >> 2u)).x;
                _3099 = _3098 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3099)
                {
                    frontier_phi_66_pred = _3088;
                    frontier_phi_66_pred_1 = _3087;
                    frontier_phi_66_pred_2 = _3086;
                    frontier_phi_66_pred_3 = _3085;
                    frontier_phi_66_pred_4 = _3084;
                    frontier_phi_66_pred_5 = _3083;
                }
                else
                {
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    uint _3213;
                    _3207 = _3083;
                    _3208 = _3084;
                    _3209 = _3085;
                    _3210 = _3086;
                    _3211 = _3087;
                    _3212 = _3088;
                    _3213 = _3098;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    for (;;)
                    {
                        uint _3217 = uint(findLSB(_3213)) + (_3089 << 5u);
                        uint _3214 = (_3213 + 4294967295u) & _3213;
                        uint _3219 = _3217 * 48u;
                        vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 3u)).x));
                        uint _3239 = (_3217 * 48u) + 4u;
                        vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3239)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3239 + 3u)).x));
                        uint _3258 = (_3217 * 48u) + 8u;
                        vec3 _3269 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x));
                        float _3273 = _3233.x - _1936;
                        float _3274 = _3233.y - _1937;
                        float _3275 = _3233.z - _1938;
                        float _3276 = dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275));
                        float _3279 = inversesqrt(_3276);
                        float _3280 = _3279 * _3273;
                        float _3281 = _3279 * _3274;
                        float _3282 = _3279 * _3275;
                        float _3283 = dot(vec3(_821, _824, _827), vec3(_3280, _3281, _3282));
                        float _3288 = 1.0 - (_3276 * _3233.w);
                        float _4671 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3289 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3290 = sqrt(_3276) * _3252.w;
                        float _3293 = 1.39999997615814208984375 / (_3290 + 1.39999997615814208984375);
                        float _3294 = _3293 * _3293;
                        float _3297 = ((1.0 - _3294) * _3283) + _3294;
                        float _3300 = _3290 * _3290;
                        float _3304 = ((isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0))) * _3289) / ((_3300 * 0.699999988079071044921875) + 1.0);
                        float _3308 = (-0.0) - _1936;
                        float _3309 = (-0.0) - _1937;
                        float _3310 = (-0.0) - _1938;
                        float _3314 = inversesqrt(dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310)));
                        float _3315 = _3314 * _3308;
                        float _3316 = _3314 * _3309;
                        float _3317 = _3314 * _3310;
                        float _3324 = exp2(log2(1.0 / ((_3300 * 3.5) + 5.0)) * 0.25);
                        float _3325 = 1.0 - _881;
                        float _3332 = sqrt(1.0 - ((1.0 - (_3325 * _3325)) * (1.0 - (_3324 * _3324))));
                        float _3333 = _3332 * _3332;
                        float _3334 = _3333 * _3333;
                        float _3335 = _3315 + _3280;
                        float _3336 = _3316 + _3281;
                        float _3337 = _3317 + _3282;
                        float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                        float _3345 = dot(vec3(_821, _824, _827), vec3(_3315, _3316, _3317));
                        float _4687 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3348 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                        float _3349 = dot(vec3(_821, _824, _827), vec3(_3341 * _3335, _3341 * _3336, _3341 * _3337));
                        float _4698 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3352 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                        float _3356 = ((_3352 * _3352) * (_3334 + (-1.0))) + 1.0;
                        float _3357 = _3293 * _3333;
                        float _3358 = _3357 * _3357;
                        float _3361 = ((1.0 - _3358) * _3283) + _3358;
                        float _4709 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3362 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                        float _3363 = 1.0 - _3333;
                        float _3373 = (0.5 / (((_3362 * ((_3348 * _3363) + _3333)) + 9.9999999392252902907785028219223e-09) + (((_3362 * _3363) + _3333) * _3348))) * _3362;
                        float _4720 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3384 = (((_3334 * 3.1415927410125732421875) * (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) / ((_3356 * _3356) * ((_3300 * 2.1991131305694580078125) + 3.141590118408203125))) * _3289;
                        _3142 = (_3304 * _3252.x) + _3210;
                        _3143 = (_3304 * _3252.y) + _3211;
                        _3144 = (_3304 * _3252.z) + _3212;
                        _3139 = (_3384 * _3269.x) + _3207;
                        _3140 = (_3384 * _3269.y) + _3208;
                        _3141 = (_3384 * _3269.z) + _3209;
                        if (_3214 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3207 = _3139;
                            _3208 = _3140;
                            _3209 = _3141;
                            _3210 = _3142;
                            _3211 = _3143;
                            _3212 = _3144;
                            _3213 = _3214;
                        }
                    }
                    frontier_phi_66_pred = _3144;
                    frontier_phi_66_pred_1 = _3143;
                    frontier_phi_66_pred_2 = _3142;
                    frontier_phi_66_pred_3 = _3141;
                    frontier_phi_66_pred_4 = _3140;
                    frontier_phi_66_pred_5 = _3139;
                }
                _2949 = frontier_phi_66_pred;
                _2947 = frontier_phi_66_pred_1;
                _2945 = frontier_phi_66_pred_2;
                _2943 = frontier_phi_66_pred_3;
                _2941 = frontier_phi_66_pred_4;
                _2939 = frontier_phi_66_pred_5;
                uint _3090 = _3089 + 1u;
                if (_3090 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3083 = _2939;
                    _3084 = _2941;
                    _3085 = _2943;
                    _3086 = _2945;
                    _3087 = _2947;
                    _3088 = _2949;
                    _3089 = _3090;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
        }
        uvec4 _2952 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2953 = _2952.z;
        uint _2955 = (_2953 >> 8u) & 15u;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        if (((4294967295u << _2955) & _2858) == 0u)
        {
            _3051 = _2938;
            _3053 = _2940;
            _3055 = _2942;
            _3057 = _2944;
            _3059 = _2946;
            _3061 = _2948;
        }
        else
        {
            float _3076 = inversesqrt(dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938)));
            float _3077 = _3076 * _1936;
            float _3078 = _3076 * _1937;
            float _3079 = _3076 * _1938;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2955 < ((_2953 >> 12u) & 15u))
            {
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3062;
                float _3190 = _2938;
                float _3191 = _2940;
                float _3192 = _2942;
                float _3193 = _2944;
                float _3194 = _2946;
                float _3195 = _2948;
                uint _3196 = _2955;
                uint _3205;
                bool _3206;
                for (;;)
                {
                    _3205 = texelFetch(g_lightClassification, int((((_2852 << 5u) + (_2838 << 9u)) + (_3196 << 2u)) >> 2u)).x;
                    _3206 = _3205 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3206)
                    {
                        frontier_phi_72_pred = _3195;
                        frontier_phi_72_pred_1 = _3194;
                        frontier_phi_72_pred_2 = _3193;
                        frontier_phi_72_pred_3 = _3192;
                        frontier_phi_72_pred_4 = _3191;
                        frontier_phi_72_pred_5 = _3190;
                    }
                    else
                    {
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3402 = _3190;
                        float _3403 = _3191;
                        float _3404 = _3192;
                        float _3405 = _3193;
                        float _3406 = _3194;
                        float _3407 = _3195;
                        uint _3408 = _3205;
                        uint _3409;
                        vec4 _3434;
                        float _3435;
                        vec4 _3450;
                        vec3 _3462;
                        vec4 _3477;
                        vec4 _3492;
                        float _3538;
                        bool _3539;
                        for (;;)
                        {
                            uint _3419 = ((_3196 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3408));
                            _3409 = (_3408 + 4294967295u) & _3408;
                            uint _3421 = _3419 * 40u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            _3435 = _3434.w;
                            uint _3437 = (_3419 * 40u) + 4u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3452 = (_3419 * 40u) + 8u;
                            _3462 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x));
                            uint _3464 = (_3419 * 40u) + 16u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3479 = (_3419 * 40u) + 20u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3494 = (_3419 * 40u) + 24u;
                            vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3513 = (_3419 * 40u) + 28u;
                            vec4 _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            _3538 = fma(_1938, _3526.z, fma(_1937, _3526.y, _3526.x * _1936)) + _3526.w;
                            _3539 = !((fma(_1938, _3507.z, fma(_1937, _3507.y, _3507.x * _1936)) + _3507.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3539)
                            {
                                float _3566 = _3434.x - _1936;
                                float _3567 = _3434.y - _1937;
                                float _3568 = _3434.z - _1938;
                                float _3569 = dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568));
                                float _3572 = inversesqrt(_3569);
                                float _3573 = _3572 * _3566;
                                float _3574 = _3572 * _3567;
                                float _3575 = _3572 * _3568;
                                float _3579 = 1.0 - (_3569 / (_3435 * _3435));
                                float _4731 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3584 = sqrt(_3569) * _3450.w;
                                float _3586 = 1.39999997615814208984375 / (_3584 + 1.39999997615814208984375);
                                float _3587 = _3586 * _3586;
                                float _3590 = ((1.0 - _3587) * dot(vec3(_3573, _3574, _3575), vec3(_821, _824, _827))) + _3587;
                                float _3593 = _3584 * _3584;
                                float _3597 = (fma(_1938, _3477.z, fma(_1937, _3477.y, _3477.x * _1936)) + _3477.w) / _3538;
                                float _3598 = (fma(_1938, _3492.z, fma(_1937, _3492.y, _3492.x * _1936)) + _3492.w) / _3538;
                                float _3602 = 1.0 - dot(vec2(_3597, _3598), vec2(_3597, _3598));
                                float _4747 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3603 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3604 = _3603 * (((isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0))) * _3580) / ((_3593 * 0.699999988079071044921875) + 1.0));
                                float _3616 = exp2(log2(1.0 / ((_3593 * 3.5) + 5.0)) * 0.25);
                                float _3617 = 1.0 - _881;
                                float _3624 = sqrt(1.0 - ((1.0 - (_3617 * _3617)) * (1.0 - (_3616 * _3616))));
                                float _3625 = _3624 * _3624;
                                float _3626 = _3625 * _3625;
                                float _3627 = _3573 - _3077;
                                float _3628 = _3574 - _3078;
                                float _3629 = _3575 - _3079;
                                float _3633 = inversesqrt(dot(vec3(_3627, _3628, _3629), vec3(_3627, _3628, _3629)));
                                float _3637 = dot(vec3(_821, _824, _827), vec3((-0.0) - _3077, (-0.0) - _3078, (-0.0) - _3079));
                                float _4758 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3640 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3641 = dot(vec3(_821, _824, _827), vec3(_3633 * _3627, _3633 * _3628, _3633 * _3629));
                                float _4769 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3644 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3648 = ((_3644 * _3644) * (_3626 + (-1.0))) + 1.0;
                                float _3649 = _3586 * _3625;
                                float _3650 = _3649 * _3649;
                                float _3656 = ((1.0 - _3650) * dot(vec3(_821, _824, _827), vec3(_3573, _3574, _3575))) + _3650;
                                float _4780 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3657 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3658 = 1.0 - _3625;
                                float _3668 = (0.5 / (((_3657 * ((_3640 * _3658) + _3625)) + 9.9999999392252902907785028219223e-09) + (((_3657 * _3658) + _3625) * _3640))) * _3657;
                                float _4791 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3678 = (_3603 * _3580) * (((_3626 * 3.1415927410125732421875) * (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) / ((_3648 * _3648) * ((_3593 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3604 * _3450.y;
                                frontier_phi_78_pred_1 = _3604 * _3450.x;
                                frontier_phi_78_pred_2 = _3678 * _3462.z;
                                frontier_phi_78_pred_3 = _3678 * _3462.y;
                                frontier_phi_78_pred_4 = _3678 * _3462.x;
                                frontier_phi_78_pred_5 = _3604 * _3450.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3686 = frontier_phi_78_pred;
                            _3685 = frontier_phi_78_pred_1;
                            _3684 = frontier_phi_78_pred_2;
                            _3683 = frontier_phi_78_pred_3;
                            _3682 = frontier_phi_78_pred_4;
                            _3687 = frontier_phi_78_pred_5;
                            _3392 = _3685 + _3405;
                            _3393 = _3686 + _3406;
                            _3394 = _3687 + _3407;
                            _3389 = _3682 + _3402;
                            _3390 = _3683 + _3403;
                            _3391 = _3684 + _3404;
                            if (_3409 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3409;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3394;
                        frontier_phi_72_pred_1 = _3393;
                        frontier_phi_72_pred_2 = _3392;
                        frontier_phi_72_pred_3 = _3391;
                        frontier_phi_72_pred_4 = _3390;
                        frontier_phi_72_pred_5 = _3389;
                    }
                    _3062 = frontier_phi_72_pred;
                    _3060 = frontier_phi_72_pred_1;
                    _3058 = frontier_phi_72_pred_2;
                    _3056 = frontier_phi_72_pred_3;
                    _3054 = frontier_phi_72_pred_4;
                    _3052 = frontier_phi_72_pred_5;
                    uint _3197 = _3196 + 1u;
                    if (_3197 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3190 = _3052;
                        _3191 = _3054;
                        _3192 = _3056;
                        _3193 = _3058;
                        _3194 = _3060;
                        _3195 = _3062;
                        _3196 = _3197;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3062;
                frontier_phi_60_61_ladder_1 = _3060;
                frontier_phi_60_61_ladder_2 = _3056;
                frontier_phi_60_61_ladder_3 = _3054;
                frontier_phi_60_61_ladder_4 = _3052;
                frontier_phi_60_61_ladder_5 = _3058;
            }
            else
            {
                frontier_phi_60_61_ladder = _2948;
                frontier_phi_60_61_ladder_1 = _2946;
                frontier_phi_60_61_ladder_2 = _2942;
                frontier_phi_60_61_ladder_3 = _2940;
                frontier_phi_60_61_ladder_4 = _2938;
                frontier_phi_60_61_ladder_5 = _2944;
            }
            _3051 = frontier_phi_60_61_ladder_4;
            _3053 = frontier_phi_60_61_ladder_3;
            _3055 = frontier_phi_60_61_ladder_2;
            _3057 = frontier_phi_60_61_ladder_5;
            _3059 = frontier_phi_60_61_ladder_1;
            _3061 = frontier_phi_60_61_ladder;
        }
        float _3066 = isnan(1.0) ? _865 : (isnan(_865) ? 1.0 : min(_865, 1.0));
        _2871 = (_3066 * _3057) + _2402;
        _2873 = (_3066 * _3059) + _2404;
        _2875 = (_3066 * _3061) + _2406;
        _2877 = ((_3051 * 0.039999999105930328369140625) * _3066) + _2725;
        _2879 = ((_3053 * 0.039999999105930328369140625) * _3066) + _2727;
        _2881 = ((_3055 * 0.039999999105930328369140625) * _3066) + _2729;
    }
    else
    {
        _2871 = _2402;
        _2873 = _2404;
        _2875 = _2406;
        _2877 = _2725;
        _2879 = _2727;
        _2881 = _2729;
    }
    float _4807 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4818 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4829 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    uint _2901 = _253 + 6u;
    float _2909 = _802 / cbSceneParam._m0[86u].x;
    float _2910 = _803 / cbSceneParam._m0[86u].y;
    vec4 _2924 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2909, _2910, (log2((isnan(cbSceneParam._m0[77u].w) ? _736 : (isnan(_736) ? cbSceneParam._m0[77u].w : min(_736, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2926 = _2924.x;
    float _2927 = _2924.y;
    float _2928 = _2924.z;
    float _2929 = _2924.w;
    float _3001;
    float _3003;
    float _3005;
    float _3007;
    if (_736 > cbSceneParam._m0[78u].w)
    {
        float _2963 = isnan(_736) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _736 : min(cbSceneParam._m0[80u].w, _736));
        float _2964 = _2963 / _736;
        float _2975 = _2964 * _787;
        float _2976 = _788 * _2964;
        float _2977 = (-0.0) - _2976;
        float _2979 = _2964 * _789;
        float _2981 = (cbSceneParam._m0[77u].w * _2977) / _2963;
        float _2982 = _2981 + cbSceneParam._m0[79u].w;
        float _2983 = cbSceneParam._m0[79u].w - _2976;
        float _2989 = sqrt(((_2975 * _2975) + (_2976 * _2976)) + (_2979 * _2979));
        float _2992 = (1.0 - (cbSceneParam._m0[77u].w / _2963)) * _2989;
        float _2997 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2999 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3152;
        if (abs((_2977 - _2981) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3152 = ((((_2982 > 0.0) ? exp2(_2997 * _2982) : (2.0 - exp2(_2999 * _2982))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2992;
        }
        else
        {
            float _3112 = 1.0 / cbSceneParam._m0[80u].x;
            float _3113 = isnan(_2983) ? _2982 : (isnan(_2982) ? _2983 : max(_2982, _2983));
            float _3114 = isnan(_2983) ? _2982 : (isnan(_2982) ? _2983 : min(_2982, _2983));
            float _3123 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : min(_3113, 0.0));
            float _3124 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : min(_3114, 0.0));
            _3152 = ((abs(_2989 / _2977) * cbSceneParam._m0[80u].y) * ((((_3123 - _3124) * 2.0) - ((exp2(_2997 * (isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0)))) - exp2(_2997 * (isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0))))) * _3112)) - ((exp2(_2999 * _3123) - exp2(_2999 * _3124)) * _3112))) + (_2992 * cbSceneParam._m0[80u].z);
        }
        vec4 _3154 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2909, _2910, 1.0), 0.0);
        float _3163 = exp2((_3152 * (-1.44269502162933349609375)) * (1.0 - _3154.w));
        float _3164 = log2(_3163);
        float _3180 = log2(_2929);
        _3001 = (exp2(_3180 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].x)) * _3154.x) / cbSceneParam._m0[78u].x)) + _2926;
        _3003 = (exp2(_3180 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].y)) * _3154.y) / cbSceneParam._m0[78u].y)) + _2927;
        _3005 = (exp2(_3180 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3164 * cbSceneParam._m0[78u].z)) * _3154.z) / cbSceneParam._m0[78u].z)) + _2928;
        _3007 = _3163 * _2929;
    }
    else
    {
        _3001 = _2926;
        _3003 = _2927;
        _3005 = _2928;
        _3007 = _2929;
    }
    float _3019 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3020 = _3019 == 3.0;
    float _3021 = log2(_3007);
    float _3028 = exp2(_3021 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2871 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _865))) + ((_2877 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1670)) * cbPerFrame._m0[3u].x));
    float _3029 = exp2(_3021 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2873 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _865))) + ((_2879 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1670)) * cbPerFrame._m0[3u].x));
    float _3030 = exp2(_3021 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))) * (_2875 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _865))) + ((_2881 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1670)) * cbPerFrame._m0[3u].x));
    float _3039 = (_3019 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3039 * (_3020 ? _3028 : (_3028 + (cbSceneParam._m0[72u].w * _3001)));
    SV_Target.y = _3039 * (_3020 ? _3029 : (_3029 + (cbSceneParam._m0[72u].w * _3003)));
    SV_Target.z = _3039 * (_3020 ? _3030 : (_3030 + (cbSceneParam._m0[72u].w * _3005)));
    SV_Target.w = cbInstanceData._m0[_2901].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2901].w;
}


