#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1162;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _356 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _356) * cbMtdParam._m0[24u].x) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3469 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _381 = (_374 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _382 = (_374 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _383 = (_374 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _413 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _415 = _413.x;
    float _416 = _413.y;
    float _417 = _413.z;
    float _426 = ((_396.z - _417) * _374) + _417;
    float _429 = ((((_396.x - _415) * _374) + _415) * 2.0) + (-1.0);
    float _431 = ((((_396.y - _416) * _374) + _416) * 2.0) + (-1.0);
    float _432 = dot(vec2(_429, _431), vec2(_429, _431));
    float _3480 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _437 = sqrt(1.0 - (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))));
    vec4 _450 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _464 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _466 = _464.x;
    float _467 = 1.0 - _466;
    float _495 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_466 - _467) * cbMtdParam._m0[24u].w) + _467) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3491 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _496 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _504 = ((((cbMtdParam._m0[10u].x - _381) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _496) + _381;
    float _505 = ((((cbMtdParam._m0[10u].y - _382) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _496) + _382;
    float _506 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _383)) * _496) + _383;
    float _510 = ((cbMtdParam._m0[23u].y - _426) * _496) + _426;
    vec4 _529 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _531 = _529.x;
    float _532 = _529.y;
    float _538 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_227, _228, _229, 0.0));
    vec4 _553 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _258) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _259) + cbTextureTilingScale._m0[18u].w));
    float _555 = _553.x;
    float _560 = fract(_553.w + cbPerFrame._m0[22u].x);
    float _562 = (1.0 - _560) * _555;
    float _567 = ((_560 + (-1.0)) + _555) * 9.0;
    float _569 = ((_555 + (-1.0)) + _560) * 9.0;
    float _570 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _571 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _585 = (_562 * ((_553.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _570 : (isnan(_570) ? 3.0 : min(_570, 3.0))) * 3.1415927410125732421875);
    float _587 = (_562 * ((_553.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _571 : (isnan(_571) ? 3.0 : min(_571, 3.0))) * 3.1415927410125732421875);
    float _591 = inversesqrt(dot(vec3(_585, _587, 1.0), vec3(_585, _587, 1.0)));
    float _607 = (((((0.5 - _531) + ((_585 * 0.5) * _591)) * _538) + _531) * 2.0) + (-1.0);
    float _608 = (((((0.5 - _532) + ((_591 * 0.5) * _587)) * _538) + _532) * 2.0) + (-1.0);
    float _609 = dot(vec2(_607, _608), vec2(_607, _608));
    float _3522 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _625 = ((((cbMtdParam._m0[22u].z * _429) - _429) + _607) * _496) + _429;
    float _626 = ((((cbMtdParam._m0[22u].z * _431) - _431) + _608) * _496) + _431;
    float _627 = (_496 * (sqrt(1.0 - (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) - _437)) + _437;
    float _629 = cbMtdParam._m0[22u].x + _450.w;
    float _632 = fma(_627, _227, fma(_626, _233 * TANGENT.x, (_219 * _211) * _625));
    float _635 = fma(_627, _228, fma(_626, _233 * TANGENT.y, (_219 * _212) * _625));
    float _638 = fma(_627, _229, fma(_626, _233 * TANGENT.z, (_219 * _213) * _625));
    float _642 = inversesqrt(dot(vec3(_632, _635, _638), vec3(_632, _635, _638)));
    float _643 = _642 * _632;
    float _644 = _642 * _635;
    float _645 = _642 * _638;
    float _3533 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _646 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3555 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _3566 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3577 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _664 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _715 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _705);
    float _716 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _705);
    float _717 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _705);
    float _721 = inversesqrt(dot(vec3(_715, _716, _717), vec3(_715, _716, _717)));
    float _722 = _715 * _721;
    float _723 = _716 * _721;
    float _724 = _717 * _721;
    float _730 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _731 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _749 = fma(_645, cbSceneParam._m0[5u].z, fma(_644, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _643));
    float _752 = fma(_645, cbSceneParam._m0[6u].z, fma(_644, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _643));
    float _755 = fma(_645, cbSceneParam._m0[7u].z, fma(_644, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _643));
    uint _769 = (_239 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _775 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) * cbInstanceData._m0[_769].x;
    float _776 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_769].y;
    float _777 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * cbInstanceData._m0[_769].z;
    float _3588 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _778 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _3599 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _779 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _780 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    vec4 _789 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _730, cbSceneParam._m0[86u].y * _731));
    float _793 = ((isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * TEXCOORD_5.w) * _789.x;
    float _794 = dot(vec3(_643, _644, _645), vec3(_722, _723, _724));
    float _797 = _794 * 2.0;
    float _801 = (_797 * _643) - _722;
    float _802 = (_797 * _644) - _723;
    float _803 = (_797 * _645) - _724;
    float _807 = abs(dot(vec3(_722, _723, _724), vec3(_643, _644, _645)));
    float _3621 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _809 = sqrt(_646);
    float _821 = exp2((_809 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_809 * 3.0));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1161;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _887 = fma(_861, cbModelParam._m0[26u].z, fma(_857, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _853));
        float _891 = fma(_861, cbModelParam._m0[27u].z, fma(_857, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _853));
        float _895 = fma(_861, cbModelParam._m0[28u].z, fma(_857, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _853));
        float _919 = _853 + _643;
        float _920 = _857 + _644;
        float _921 = _861 + _645;
        float _931 = fma(_921, cbModelParam._m0[26u].z, fma(_920, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _919)) - _887;
        float _932 = fma(_921, cbModelParam._m0[27u].z, fma(_920, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _919)) - _891;
        float _933 = fma(_921, cbModelParam._m0[28u].z, fma(_920, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _919)) - _895;
        float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
        float _950 = ((_937 * _931) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_887 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_937 * _932) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_891 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_937 * _933) / cbModelParam._m0[34u].z) + ((((((_895 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        float _989 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_955.x + (-0.5));
        float _991 = _989 * (_955.y + (-0.5));
        float _992 = _989 * (_955.z + (-0.5));
        float _999 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_962.x + (-0.5));
        float _1001 = _999 * (_962.y + (-0.5));
        float _1002 = _999 * (_962.z + (-0.5));
        float _1009 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_969.x + (-0.5));
        float _1011 = _1009 * (_969.y + (-0.5));
        float _1012 = _1009 * (_969.z + (-0.5));
        float _1019 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_976.x + (-0.5));
        float _1021 = _1019 * (_976.y + (-0.5));
        float _1022 = _1019 * (_976.z + (-0.5));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = _990 * 0.5;
        float _1027 = _1000 * 0.5;
        float _1028 = _1010 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1043 = (dot(vec3(_643, _644, _645), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1053 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3669 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1055 + 1.0))) + _1060) * _1023;
        float _1070 = _991 * 0.5;
        float _1071 = _1001 * 0.5;
        float _1072 = _1011 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_643, _644, _645), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3702 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1097 + 1.0))) + _1102) * _1024;
        float _1112 = _992 * 0.5;
        float _1113 = _1002 * 0.5;
        float _1114 = _1012 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_643, _644, _645), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3735 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1139 + 1.0))) + _1144) * _1025;
        _1161 = _992;
        _1163 = _991;
        _1164 = _990;
        _1165 = _1002;
        _1166 = _1001;
        _1167 = _1000;
        _1168 = _1012;
        _1169 = _1011;
        _1170 = _1010;
        _1171 = _1025;
        _1172 = _1024;
        _1173 = _1023;
        _1174 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
        _1175 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1176 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
    }
    else
    {
        _1161 = _1162;
        _1163 = _1162;
        _1164 = _1162;
        _1165 = _1162;
        _1166 = _1162;
        _1167 = _1162;
        _1168 = _1162;
        _1169 = _1162;
        _1170 = _1162;
        _1171 = _1162;
        _1172 = _1162;
        _1173 = _1162;
        _1174 = 0.0;
        _1175 = 0.0;
        _1176 = 0.0;
    }
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1201 = fma(_861, cbModelParam._m0[30u].z, fma(_857, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _853));
        float _1205 = fma(_861, cbModelParam._m0[31u].z, fma(_857, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _853));
        float _1209 = fma(_861, cbModelParam._m0[32u].z, fma(_857, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _853));
        float _1232 = _853 + _643;
        float _1233 = _857 + _644;
        float _1234 = _861 + _645;
        float _1244 = fma(_1234, cbModelParam._m0[30u].z, fma(_1233, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1232)) - _1201;
        float _1245 = fma(_1234, cbModelParam._m0[31u].z, fma(_1233, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1232)) - _1205;
        float _1246 = fma(_1234, cbModelParam._m0[32u].z, fma(_1233, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1232)) - _1209;
        float _1250 = inversesqrt(dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246)));
        float _1263 = ((_1250 * _1244) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1201 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1250 * _1245) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1205 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1250 * _1246) / cbModelParam._m0[35u].z) + ((((((_1209 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        float _1300 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1267.x + (-0.5));
        float _1302 = _1300 * (_1267.y + (-0.5));
        float _1303 = _1300 * (_1267.z + (-0.5));
        float _1310 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1274.x + (-0.5));
        float _1312 = _1310 * (_1274.y + (-0.5));
        float _1313 = _1310 * (_1274.z + (-0.5));
        float _1320 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1281.x + (-0.5));
        float _1322 = _1320 * (_1281.y + (-0.5));
        float _1323 = _1320 * (_1281.z + (-0.5));
        float _1330 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1288.x + (-0.5));
        float _1332 = _1330 * (_1288.y + (-0.5));
        float _1333 = _1330 * (_1288.z + (-0.5));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = _1301 * 0.5;
        float _1338 = _1311 * 0.5;
        float _1339 = _1321 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_643, _644, _645), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _3798 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1364 + 1.0))) + _1369) * _1334;
        float _1379 = _1302 * 0.5;
        float _1380 = _1312 * 0.5;
        float _1381 = _1322 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_643, _644, _645), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _3831 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1406 + 1.0))) + _1411) * _1335;
        float _1421 = _1303 * 0.5;
        float _1422 = _1313 * 0.5;
        float _1423 = _1323 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_643, _644, _645), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _3864 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1448 + 1.0))) + _1453) * _1336;
        _1470 = _1303;
        _1471 = _1302;
        _1472 = _1301;
        _1473 = _1313;
        _1474 = _1312;
        _1475 = _1311;
        _1476 = _1323;
        _1477 = _1322;
        _1478 = _1321;
        _1479 = _1336;
        _1480 = _1335;
        _1481 = _1334;
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1483 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1484 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
    }
    else
    {
        _1470 = _1162;
        _1471 = _1162;
        _1472 = _1162;
        _1473 = _1162;
        _1474 = _1162;
        _1475 = _1162;
        _1476 = _1162;
        _1477 = _1162;
        _1478 = _1162;
        _1479 = _1162;
        _1480 = _1162;
        _1481 = _1162;
        _1482 = 0.0;
        _1483 = 0.0;
        _1484 = 0.0;
    }
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1174)) + _1174;
    float _1495 = (cbModelParam._m0[1u].x * (_1483 - _1175)) + _1175;
    float _1496 = (cbModelParam._m0[1u].x * (_1484 - _1176)) + _1176;
    float _1517 = fma(_1496, cbSceneParam._m0[89u].z, fma(_1495, cbSceneParam._m0[89u].y, _1494 * cbSceneParam._m0[89u].x));
    float _1520 = fma(_1496, cbSceneParam._m0[90u].z, fma(_1495, cbSceneParam._m0[90u].y, _1494 * cbSceneParam._m0[90u].x));
    float _1523 = fma(_1496, cbSceneParam._m0[91u].z, fma(_1495, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1494));
    float _1538 = _801 * 0.5;
    float _1539 = _802 * 0.5;
    float _1540 = _803 * 0.5;
    float _1541 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1472, _1475, _1478, _1481));
    float _1544 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1471, _1474, _1477, _1480));
    float _1547 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1581;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1554 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1161, _1165, _1168, _1171));
        float _1558 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1163, _1166, _1169, _1172));
        float _1562 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1164, _1167, _1170, _1173));
        float _1569 = dot(vec4(cbModelParam._m0[39u]), vec4(_1538, _1539, _1540, 1.0));
        _1581 = dot(vec3(isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1569) ? 0.0 : (isnan(0.0) ? _1569 : max(0.0, _1569))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1581 = 1.0;
    }
    float _1592;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1583 = dot(vec4(cbModelParam._m0[40u]), vec4(_1538, _1539, _1540, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1583) ? 0.0 : (isnan(0.0) ? _1583 : max(0.0, _1583))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1596 = (_1592 * cbModelParam._m0[1u].x) + (_1581 * (1.0 - cbModelParam._m0[1u].x));
    float _1606 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _646);
    float _1607 = isnan(_1606) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1606 : min(cbModelParam._m0[25u].z, _1606));
    float _1689;
    float _1691;
    float _1693;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1656 = fma(_861, cbModelParam._m0[13u].z, fma(_857, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _853)) + cbModelParam._m0[13u].w;
        float _1660 = fma(_861, cbModelParam._m0[14u].z, fma(_857, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _853)) + cbModelParam._m0[14u].w;
        float _1664 = fma(_861, cbModelParam._m0[15u].z, fma(_857, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _853)) + cbModelParam._m0[15u].w;
        float _1667 = fma(_803, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801));
        float _1670 = fma(_803, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801));
        float _1673 = fma(_803, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801));
        float _1701;
        if (_1667 > 0.0)
        {
            _1701 = abs((1.0 - _1656) / _1667);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1656 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1701 = frontier_phi_14_12_ladder;
        }
        float _1902;
        if (_1670 > 0.0)
        {
            _1902 = abs((1.0 - _1660) / _1670);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1660 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1902 = frontier_phi_23_19_ladder;
        }
        float _2145;
        if (_1673 > 0.0)
        {
            _2145 = abs((1.0 - _1664) / _1673);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1664 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2145 = frontier_phi_35_30_ladder;
        }
        float _2147 = isnan(_1902) ? _1701 : (isnan(_1701) ? _1902 : min(_1701, _1902));
        float _2148 = isnan(_2145) ? _2147 : (isnan(_2147) ? _2145 : min(_2147, _2145));
        float _2152 = (_2148 * _1667) + _1656;
        float _2153 = (_2148 * _1670) + _1660;
        float _2154 = (_2148 * _1673) + _1664;
        float _2155 = _2148 * 9.9999997473787516355514526367188e-05;
        float _2157 = (-1.0) - _2155;
        float _2159 = _2155 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2154 > _2159) || ((_2154 < _2157) || ((_2153 > _2159) || ((_2153 < _2157) || ((_2152 < _2157) || (_2152 > _2159))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2278 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2154, cbModelParam._m0[9u].z, fma(_2153, cbModelParam._m0[9u].y, _2152 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2154, cbModelParam._m0[10u].z, fma(_2153, cbModelParam._m0[10u].y, _2152 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2154, cbModelParam._m0[11u].z, fma(_2153, cbModelParam._m0[11u].y, _2152 * cbModelParam._m0[11u].x))), _1607);
            frontier_phi_13_35_ladder = _2278.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2278.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2278.x * cbModelParam._m0[1u].y;
        }
        _1689 = frontier_phi_13_35_ladder_2;
        _1691 = frontier_phi_13_35_ladder_1;
        _1693 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1677 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_801, _802, _803), _1607);
        _1689 = _1677.x * cbModelParam._m0[1u].y;
        _1691 = _1677.y * cbModelParam._m0[1u].y;
        _1693 = _1677.z * cbModelParam._m0[1u].y;
    }
    float _1697 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _646);
    float _1698 = isnan(_1697) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1697 : min(cbModelParam._m0[25u].w, _1697));
    float _1788;
    float _1790;
    float _1792;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1752 = fma(_861, cbModelParam._m0[21u].z, fma(_857, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _853)) + cbModelParam._m0[21u].w;
        float _1756 = fma(_861, cbModelParam._m0[22u].z, fma(_857, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _853)) + cbModelParam._m0[22u].w;
        float _1760 = fma(_861, cbModelParam._m0[23u].z, fma(_857, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _853)) + cbModelParam._m0[23u].w;
        float _1763 = fma(_803, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801));
        float _1766 = fma(_803, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801));
        float _1769 = fma(_803, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801));
        float _1907;
        if (_1763 > 0.0)
        {
            _1907 = abs((1.0 - _1752) / _1763);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1752 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1907 = frontier_phi_25_21_ladder;
        }
        float _2172;
        if (_1766 > 0.0)
        {
            _2172 = abs((1.0 - _1756) / _1766);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1756 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2172 = frontier_phi_37_32_ladder;
        }
        float _2377;
        if (_1769 > 0.0)
        {
            _2377 = abs((1.0 - _1760) / _1769);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1760 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2377 = frontier_phi_46_43_ladder;
        }
        float _2379 = isnan(_2172) ? _1907 : (isnan(_1907) ? _2172 : min(_1907, _2172));
        float _2380 = isnan(_2377) ? _2379 : (isnan(_2379) ? _2377 : min(_2379, _2377));
        float _2384 = (_2380 * _1763) + _1752;
        float _2385 = (_2380 * _1766) + _1756;
        float _2386 = (_2380 * _1769) + _1760;
        float _2387 = _2380 * 9.9999997473787516355514526367188e-05;
        float _2388 = (-1.0) - _2387;
        float _2390 = _2387 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2386 > _2390) || ((_2386 < _2388) || ((_2385 > _2390) || ((_2385 < _2388) || ((_2384 < _2388) || (_2384 > _2390))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2585 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2386, cbModelParam._m0[17u].z, fma(_2385, cbModelParam._m0[17u].y, _2384 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2386, cbModelParam._m0[18u].z, fma(_2385, cbModelParam._m0[18u].y, _2384 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2386, cbModelParam._m0[19u].z, fma(_2385, cbModelParam._m0[19u].y, _2384 * cbModelParam._m0[19u].x))), _1698);
            frontier_phi_22_46_ladder = _2585.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2585.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2585.x * cbModelParam._m0[1u].z;
        }
        _1788 = frontier_phi_22_46_ladder_2;
        _1790 = frontier_phi_22_46_ladder_1;
        _1792 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1772 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_801, _802, _803), _1698);
        _1788 = _1772.x * cbModelParam._m0[1u].z;
        _1790 = _1772.y * cbModelParam._m0[1u].z;
        _1792 = _1772.z * cbModelParam._m0[1u].z;
    }
    float _1804 = ((((1.0 - _821) * ((_809 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_821 * _809)) * _793;
    float _1805 = _1804 * ((cbModelParam._m0[1u].w * (_1788 - _1689)) + _1689);
    float _1806 = _1804 * ((cbModelParam._m0[1u].w * (_1790 - _1691)) + _1691);
    float _1807 = _1804 * ((cbModelParam._m0[1u].w * (_1792 - _1693)) + _1693);
    float _1810 = fma(_1807, cbSceneParam._m0[89u].z, fma(_1806, cbSceneParam._m0[89u].y, _1805 * cbSceneParam._m0[89u].x));
    float _1813 = fma(_1807, cbSceneParam._m0[90u].z, fma(_1806, cbSceneParam._m0[90u].y, _1805 * cbSceneParam._m0[90u].x));
    float _1816 = fma(_1807, cbSceneParam._m0[91u].z, fma(_1806, cbSceneParam._m0[91u].y, _1805 * cbSceneParam._m0[91u].x));
    uvec4 _1826 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _1828 = _1826.x * 14u;
    uint _1829 = _1828 + 13u;
    float _1836 = _793 + (-1.0);
    float _1841 = (cbLight._m0[_1829].x * _1836) + 1.0;
    float _1842 = (cbLight._m0[_1829].y * _1836) + 1.0;
    float _1843 = (cbLight._m0[_1829].z * _1836) + 1.0;
    float _1844 = (cbLight._m0[_1829].w * _1836) + 1.0;
    uint _1845 = _1828 + 5u;
    float _1851 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
    uint _1855 = _1828 + 4u;
    float _1861 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
    uint _1865 = _1828 | 1u;
    float _1876 = dot(vec3(cbLight._m0[_1828].xyz), vec3(_643, _644, _645));
    float _1879 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_643, _644, _645));
    float _4000 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _4011 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1884 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * 0.3183098733425140380859375;
    float _1886 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.3183098733425140380859375;
    float _1893 = ((cbLight._m0[_1845].x * _1851) * _1886) + ((cbLight._m0[_1855].x * _1861) * _1884);
    float _1894 = ((_1851 * cbLight._m0[_1845].y) * _1886) + ((_1861 * cbLight._m0[_1855].y) * _1884);
    float _1895 = ((_1851 * cbLight._m0[_1845].z) * _1886) + ((_1861 * cbLight._m0[_1855].z) * _1884);
    uvec4 _1899 = floatBitsToUint(cbLight._m0[_1828 + 12u]);
    bool _1901 = _1899.x == 0u;
    float _1912;
    float _1914;
    float _1916;
    if (_1901)
    {
        _1912 = _1893;
        _1914 = _1894;
        _1916 = _1895;
    }
    else
    {
        uint _1920 = _1828 + 6u;
        float _1936 = (dot(vec3(cbLight._m0[_1828 + 2u].xyz), vec3(_643, _644, _645)) * 0.5) + 0.5;
        float _1937 = _1936 * _1936;
        float _4022 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1938 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1939 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _1912 = (((cbLight._m0[_1920].x * 0.3183098733425140380859375) * _1938) * _1939) + _1893;
        _1914 = (((cbLight._m0[_1920].y * 0.3183098733425140380859375) * _1938) * _1939) + _1894;
        _1916 = (((cbLight._m0[_1920].z * 0.3183098733425140380859375) * _1938) * _1939) + _1895;
    }
    bool _1919 = _1899.y == 0u;
    float _1957;
    float _1959;
    float _1961;
    if (_1919)
    {
        _1957 = _1912;
        _1959 = _1914;
        _1961 = _1916;
    }
    else
    {
        uint _2116 = _1828 + 7u;
        float _2132 = (dot(vec3(cbLight._m0[_1828 + 3u].xyz), vec3(_643, _644, _645)) * 0.5) + 0.5;
        float _2133 = _2132 * _2132;
        float _4038 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2134 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _2135 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
        _1957 = (((cbLight._m0[_2116].x * 0.3183098733425140380859375) * _2134) * _2135) + _1912;
        _1959 = (((cbLight._m0[_2116].y * 0.3183098733425140380859375) * _2134) * _2135) + _1914;
        _1961 = (((cbLight._m0[_2116].z * 0.3183098733425140380859375) * _2134) * _2135) + _1916;
    }
    uint _1964 = _1828 + 8u;
    float _1977 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1828].w)) * _646) * 0.949999988079071044921875);
    float _1978 = _1977 * _1977;
    float _1979 = cbLight._m0[_1828].x + _722;
    float _1980 = cbLight._m0[_1828].y + _723;
    float _1981 = cbLight._m0[_1828].z + _724;
    float _1985 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
    float _1986 = _1985 * _1979;
    float _1987 = _1985 * _1980;
    float _1988 = _1985 * _1981;
    float _1989 = dot(vec3(_643, _644, _645), vec3(cbLight._m0[_1828].xyz));
    float _4054 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _4065 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _1993 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _1994 = dot(vec3(_643, _644, _645), vec3(_1986, _1987, _1988));
    float _4076 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1997 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _1998 = dot(vec3(cbLight._m0[_1828].xyz), vec3(_1986, _1987, _1988));
    float _4087 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2002 = _1978 * _1978;
    float _2006 = ((_1997 * _1997) * (_2002 + (-1.0))) + 1.0;
    float _2017 = (exp2(log2(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2018 = 1.0 - _1978;
    float _2029 = (0.5 / (((_1993 * ((_1992 * _2018) + _1978)) + 9.9999999392252902907785028219223e-09) + (((_1993 * _2018) + _1978) * _1992))) * _1992;
    float _4098 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2031 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2002 / ((_2006 * _2006) * 3.141590118408203125));
    uint _2042 = _1828 + 9u;
    float _2053 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1865].w)) * _646) * 0.949999988079071044921875);
    float _2054 = _2053 * _2053;
    float _2055 = cbLight._m0[_1865].x + _722;
    float _2056 = cbLight._m0[_1865].y + _723;
    float _2057 = cbLight._m0[_1865].z + _724;
    float _2061 = inversesqrt(dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057)));
    float _2062 = _2061 * _2055;
    float _2063 = _2061 * _2056;
    float _2064 = _2061 * _2057;
    float _2065 = dot(vec3(_643, _644, _645), vec3(cbLight._m0[_1865].xyz));
    float _4109 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _2069 = dot(vec3(_643, _644, _645), vec3(_2062, _2063, _2064));
    float _4120 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2072 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2073 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_2062, _2063, _2064));
    float _4131 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2077 = _2054 * _2054;
    float _2081 = ((_2072 * _2072) * (_2077 + (-1.0))) + 1.0;
    float _2090 = (exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2091 = 1.0 - _2054;
    float _2101 = (0.5 / (((_1993 * ((_2068 * _2091) + _2054)) + 9.9999999392252902907785028219223e-09) + (((_1993 * _2091) + _2054) * _2068))) * _2068;
    float _4142 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2103 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2077 / ((_2081 * _2081) * 3.141590118408203125));
    float _2113 = (((_2090 * cbLight._m0[_2042].x) * _2103) * _1851) + (((_2017 * cbLight._m0[_1964].x) * _2031) * _1861);
    float _2114 = (((_2090 * cbLight._m0[_2042].y) * _2103) * _1851) + (((_2017 * cbLight._m0[_1964].y) * _2031) * _1861);
    float _2115 = (((_2090 * cbLight._m0[_2042].z) * _2103) * _1851) + (((_2017 * cbLight._m0[_1964].z) * _2031) * _1861);
    float _2177;
    float _2179;
    float _2181;
    if (_1901)
    {
        _2177 = _2113;
        _2179 = _2114;
        _2181 = _2115;
    }
    else
    {
        uint _2183 = _1828 + 2u;
        uint _2187 = _1828 + 10u;
        float _2201 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2183].w)) * _646) * 0.949999988079071044921875);
        float _2202 = _2201 * _2201;
        float _2203 = cbLight._m0[_2183].x + _722;
        float _2204 = cbLight._m0[_2183].y + _723;
        float _2205 = cbLight._m0[_2183].z + _724;
        float _2209 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
        float _2210 = _2209 * _2203;
        float _2211 = _2209 * _2204;
        float _2212 = _2209 * _2205;
        float _2213 = dot(vec3(_643, _644, _645), vec3(cbLight._m0[_2183].xyz));
        float _4153 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2216 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _2217 = dot(vec3(_643, _644, _645), vec3(_2210, _2211, _2212));
        float _4164 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2220 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2221 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_2210, _2211, _2212));
        float _4175 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2225 = _2202 * _2202;
        float _2229 = ((_2220 * _2220) * (_2225 + (-1.0))) + 1.0;
        float _2238 = (exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2239 = 1.0 - _2202;
        float _2249 = (0.5 / (((_1993 * ((_2216 * _2239) + _2202)) + 9.9999999392252902907785028219223e-09) + (((_1993 * _2239) + _2202) * _2216))) * _2216;
        float _4186 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2251 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2225 / ((_2229 * _2229) * 3.141590118408203125));
        float _2252 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
        _2177 = (((_2238 * cbLight._m0[_2187].x) * _2251) * _2252) + _2113;
        _2179 = (((_2238 * cbLight._m0[_2187].y) * _2251) * _2252) + _2114;
        _2181 = (((_2238 * cbLight._m0[_2187].z) * _2251) * _2252) + _2115;
    }
    float _2287;
    float _2289;
    float _2291;
    if (_1919)
    {
        _2287 = _2177;
        _2289 = _2179;
        _2291 = _2181;
    }
    else
    {
        uint _2298 = _1828 + 3u;
        uint _2302 = _1828 + 11u;
        float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2298].w)) * _646) * 0.949999988079071044921875);
        float _2317 = _2316 * _2316;
        float _2318 = cbLight._m0[_2298].x + _722;
        float _2319 = cbLight._m0[_2298].y + _723;
        float _2320 = cbLight._m0[_2298].z + _724;
        float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
        float _2325 = _2324 * _2318;
        float _2326 = _2324 * _2319;
        float _2327 = _2324 * _2320;
        float _2328 = dot(vec3(_643, _644, _645), vec3(cbLight._m0[_2298].xyz));
        float _4202 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2332 = dot(vec3(_643, _644, _645), vec3(_2325, _2326, _2327));
        float _4213 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2336 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_2325, _2326, _2327));
        float _4224 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2340 = _2317 * _2317;
        float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
        float _2353 = (exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2354 = 1.0 - _2317;
        float _2364 = (0.5 / (((_1993 * ((_2331 * _2354) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_1993 * _2354) + _2317) * _2331))) * _2331;
        float _4235 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2366 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
        float _2367 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
        _2287 = (((_2353 * cbLight._m0[_2302].x) * _2366) * _2367) + _2177;
        _2289 = (((_2353 * cbLight._m0[_2302].y) * _2366) * _2367) + _2179;
        _2291 = (((_2353 * cbLight._m0[_2302].z) * _2366) * _2367) + _2181;
    }
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    if (_1826.y == 0u)
    {
        float _2442 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2443 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2442;
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2442;
        float _2445 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2442;
        uvec4 _2457 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2458 = _2457.x;
        uint _2469 = uint((float(_2457.y) * floor(float(uint(cbSceneParam._m0[85u].y * _731) / _2458))) + floor(float(uint(cbSceneParam._m0[85u].x * _730) / _2458)));
        float _2479 = (log2(_2445 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2480 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        uint _2483 = uint(isnan(14.0) ? _2480 : (isnan(_2480) ? 14.0 : min(_2480, 14.0)));
        uvec4 _2488 = texelFetch(g_lightClusterGridBuffer, int(((_2483 << 2u) + (_2469 << 6u)) >> 2u));
        uint _2489 = _2488.x;
        uint _2490 = _2457.z;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        if (((((1u << ((_2490 >> 4u) & 15u)) + 4294967295u) & _2489) == 0u) || ((_2490 & 240u) == 0u))
        {
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
        }
        else
        {
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            float _2740 = 0.0;
            uint _2741 = 0u;
            uint _2750;
            bool _2751;
            for (;;)
            {
                _2750 = texelFetch(g_lightClassification, int((((_2483 << 5u) + (_2469 << 9u)) + (_2741 << 2u)) >> 2u)).x;
                _2751 = _2750 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2751)
                {
                    frontier_phi_61_pred = _2735;
                    frontier_phi_61_pred_1 = _2740;
                    frontier_phi_61_pred_2 = _2739;
                    frontier_phi_61_pred_3 = _2738;
                    frontier_phi_61_pred_4 = _2737;
                    frontier_phi_61_pred_5 = _2736;
                }
                else
                {
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    uint _2865;
                    _2859 = _2735;
                    _2860 = _2736;
                    _2861 = _2737;
                    _2862 = _2738;
                    _2863 = _2739;
                    _2864 = _2740;
                    _2865 = _2750;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    for (;;)
                    {
                        uint _2869 = uint(findLSB(_2865)) + (_2741 << 5u);
                        uint _2866 = (_2865 + 4294967295u) & _2865;
                        uint _2871 = _2869 * 48u;
                        vec4 _2885 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2871)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 3u)).x));
                        uint _2891 = (_2869 * 48u) + 4u;
                        vec4 _2904 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2891)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 3u)).x));
                        uint _2910 = (_2869 * 48u) + 8u;
                        vec3 _2921 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2910)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2910 + 2u)).x));
                        float _2925 = _2885.x - _2443;
                        float _2926 = _2885.y - _2444;
                        float _2927 = _2885.z - _2445;
                        float _2928 = dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927));
                        float _2931 = inversesqrt(_2928);
                        float _2932 = _2931 * _2925;
                        float _2933 = _2931 * _2926;
                        float _2934 = _2931 * _2927;
                        float _2935 = dot(vec3(_749, _752, _755), vec3(_2932, _2933, _2934));
                        float _2940 = 1.0 - (_2928 * _2885.w);
                        float _4261 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2941 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                        float _2942 = sqrt(_2928) * _2904.w;
                        float _2945 = 1.39999997615814208984375 / (_2942 + 1.39999997615814208984375);
                        float _2946 = _2945 * _2945;
                        float _2949 = ((1.0 - _2946) * _2935) + _2946;
                        float _2952 = _2942 * _2942;
                        float _2956 = ((isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0))) * _2941) / ((_2952 * 0.699999988079071044921875) + 1.0);
                        float _2960 = (-0.0) - _2443;
                        float _2961 = (-0.0) - _2444;
                        float _2962 = (-0.0) - _2445;
                        float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
                        float _2967 = _2966 * _2960;
                        float _2968 = _2966 * _2961;
                        float _2969 = _2966 * _2962;
                        float _2977 = exp2(log2(1.0 / ((_2952 * 3.5) + 5.0)) * 0.25);
                        float _2978 = 1.0 - _809;
                        float _2985 = sqrt(1.0 - ((1.0 - (_2978 * _2978)) * (1.0 - (_2977 * _2977))));
                        float _2986 = _2985 * _2985;
                        float _2987 = _2986 * _2986;
                        float _2988 = _2967 + _2932;
                        float _2989 = _2968 + _2933;
                        float _2990 = _2969 + _2934;
                        float _2994 = inversesqrt(dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990)));
                        float _2998 = dot(vec3(_749, _752, _755), vec3(_2967, _2968, _2969));
                        float _4277 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _3001 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _3002 = dot(vec3(_749, _752, _755), vec3(_2994 * _2988, _2994 * _2989, _2994 * _2990));
                        float _4288 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3005 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                        float _3009 = ((_3005 * _3005) * (_2987 + (-1.0))) + 1.0;
                        float _3010 = _2945 * _2986;
                        float _3011 = _3010 * _3010;
                        float _3014 = ((1.0 - _3011) * _2935) + _3011;
                        float _4299 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3015 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _3016 = 1.0 - _2986;
                        float _3026 = (0.5 / (((_3015 * ((_3001 * _3016) + _2986)) + 9.9999999392252902907785028219223e-09) + (((_3015 * _3016) + _2986) * _3001))) * _3015;
                        float _4310 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3036 = (((_2987 * 3.1415927410125732421875) * (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) / ((_3009 * _3009) * ((_2952 * 2.1991131305694580078125) + 3.141590118408203125))) * _2941;
                        _2794 = (_2956 * _2904.x) + _2862;
                        _2795 = (_2956 * _2904.y) + _2863;
                        _2796 = (_2956 * _2904.z) + _2864;
                        _2791 = (_3036 * _2921.x) + _2859;
                        _2792 = (_3036 * _2921.y) + _2860;
                        _2793 = (_3036 * _2921.z) + _2861;
                        if (_2866 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2859 = _2791;
                            _2860 = _2792;
                            _2861 = _2793;
                            _2862 = _2794;
                            _2863 = _2795;
                            _2864 = _2796;
                            _2865 = _2866;
                        }
                    }
                    frontier_phi_61_pred = _2791;
                    frontier_phi_61_pred_1 = _2796;
                    frontier_phi_61_pred_2 = _2795;
                    frontier_phi_61_pred_3 = _2794;
                    frontier_phi_61_pred_4 = _2793;
                    frontier_phi_61_pred_5 = _2792;
                }
                _2591 = frontier_phi_61_pred;
                _2601 = frontier_phi_61_pred_1;
                _2599 = frontier_phi_61_pred_2;
                _2597 = frontier_phi_61_pred_3;
                _2595 = frontier_phi_61_pred_4;
                _2593 = frontier_phi_61_pred_5;
                uint _2742 = _2741 + 1u;
                if (_2742 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2735 = _2591;
                    _2736 = _2593;
                    _2737 = _2595;
                    _2738 = _2597;
                    _2739 = _2599;
                    _2740 = _2601;
                    _2741 = _2742;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
        }
        uvec4 _2604 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2605 = _2604.z;
        uint _2607 = (_2605 >> 8u) & 15u;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        if (((4294967295u << _2607) & _2489) == 0u)
        {
            _2703 = _2590;
            _2705 = _2592;
            _2707 = _2594;
            _2709 = _2596;
            _2711 = _2598;
            _2713 = _2600;
        }
        else
        {
            float _2728 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
            float _2729 = _2728 * _2443;
            float _2730 = _2728 * _2444;
            float _2731 = _2728 * _2445;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2607 < ((_2605 >> 12u) & 15u))
            {
                float _2704;
                float _2706;
                float _2708;
                float _2710;
                float _2712;
                float _2714;
                float _2842 = _2590;
                float _2843 = _2592;
                float _2844 = _2594;
                float _2845 = _2596;
                float _2846 = _2598;
                float _2847 = _2600;
                uint _2848 = _2607;
                uint _2857;
                bool _2858;
                for (;;)
                {
                    _2857 = texelFetch(g_lightClassification, int((((_2483 << 5u) + (_2469 << 9u)) + (_2848 << 2u)) >> 2u)).x;
                    _2858 = _2857 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2858)
                    {
                        frontier_phi_67_pred = _2845;
                        frontier_phi_67_pred_1 = _2846;
                        frontier_phi_67_pred_2 = _2847;
                        frontier_phi_67_pred_3 = _2844;
                        frontier_phi_67_pred_4 = _2843;
                        frontier_phi_67_pred_5 = _2842;
                    }
                    else
                    {
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3054 = _2842;
                        float _3055 = _2843;
                        float _3056 = _2844;
                        float _3057 = _2845;
                        float _3058 = _2846;
                        float _3059 = _2847;
                        uint _3060 = _2857;
                        uint _3061;
                        vec4 _3086;
                        float _3087;
                        vec4 _3102;
                        vec3 _3114;
                        vec4 _3129;
                        vec4 _3145;
                        float _3191;
                        bool _3192;
                        for (;;)
                        {
                            uint _3071 = ((_2848 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3060));
                            _3061 = (_3060 + 4294967295u) & _3060;
                            uint _3073 = _3071 * 40u;
                            _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            _3087 = _3086.w;
                            uint _3089 = (_3071 * 40u) + 4u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3104 = (_3071 * 40u) + 8u;
                            _3114 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x));
                            uint _3116 = (_3071 * 40u) + 16u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3132 = (_3071 * 40u) + 20u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3147 = (_3071 * 40u) + 24u;
                            vec4 _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3166 = (_3071 * 40u) + 28u;
                            vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            _3191 = fma(_2445, _3179.z, fma(_2444, _3179.y, _3179.x * _2443)) + _3179.w;
                            _3192 = !((fma(_2445, _3160.z, fma(_2444, _3160.y, _3160.x * _2443)) + _3160.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3192)
                            {
                                float _3219 = _3086.x - _2443;
                                float _3220 = _3086.y - _2444;
                                float _3221 = _3086.z - _2445;
                                float _3222 = dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221));
                                float _3225 = inversesqrt(_3222);
                                float _3226 = _3225 * _3219;
                                float _3227 = _3225 * _3220;
                                float _3228 = _3225 * _3221;
                                float _3232 = 1.0 - (_3222 / (_3087 * _3087));
                                float _4321 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3233 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3237 = sqrt(_3222) * _3102.w;
                                float _3239 = 1.39999997615814208984375 / (_3237 + 1.39999997615814208984375);
                                float _3240 = _3239 * _3239;
                                float _3243 = ((1.0 - _3240) * dot(vec3(_3226, _3227, _3228), vec3(_749, _752, _755))) + _3240;
                                float _3246 = _3237 * _3237;
                                float _3250 = (fma(_2445, _3129.z, fma(_2444, _3129.y, _3129.x * _2443)) + _3129.w) / _3191;
                                float _3251 = (fma(_2445, _3145.z, fma(_2444, _3145.y, _3145.x * _2443)) + _3145.w) / _3191;
                                float _3255 = 1.0 - dot(vec2(_3250, _3251), vec2(_3250, _3251));
                                float _4337 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3256 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3257 = _3256 * (((isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0))) * _3233) / ((_3246 * 0.699999988079071044921875) + 1.0));
                                float _3269 = exp2(log2(1.0 / ((_3246 * 3.5) + 5.0)) * 0.25);
                                float _3270 = 1.0 - _809;
                                float _3277 = sqrt(1.0 - ((1.0 - (_3270 * _3270)) * (1.0 - (_3269 * _3269))));
                                float _3278 = _3277 * _3277;
                                float _3279 = _3278 * _3278;
                                float _3280 = _3226 - _2729;
                                float _3281 = _3227 - _2730;
                                float _3282 = _3228 - _2731;
                                float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                                float _3290 = dot(vec3(_749, _752, _755), vec3((-0.0) - _2729, (-0.0) - _2730, (-0.0) - _2731));
                                float _4348 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3293 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                                float _3294 = dot(vec3(_749, _752, _755), vec3(_3286 * _3280, _3286 * _3281, _3286 * _3282));
                                float _4359 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3297 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3301 = ((_3297 * _3297) * (_3279 + (-1.0))) + 1.0;
                                float _3302 = _3239 * _3278;
                                float _3303 = _3302 * _3302;
                                float _3309 = ((1.0 - _3303) * dot(vec3(_749, _752, _755), vec3(_3226, _3227, _3228))) + _3303;
                                float _4370 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3310 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3311 = 1.0 - _3278;
                                float _3321 = (0.5 / (((_3310 * ((_3293 * _3311) + _3278)) + 9.9999999392252902907785028219223e-09) + (((_3310 * _3311) + _3278) * _3293))) * _3310;
                                float _4381 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3331 = (_3256 * _3233) * (((_3279 * 3.1415927410125732421875) * (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) / ((_3301 * _3301) * ((_3246 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3331 * _3114.x;
                                frontier_phi_73_pred_1 = _3331 * _3114.y;
                                frontier_phi_73_pred_2 = _3257 * _3102.z;
                                frontier_phi_73_pred_3 = _3257 * _3102.y;
                                frontier_phi_73_pred_4 = _3257 * _3102.x;
                                frontier_phi_73_pred_5 = _3331 * _3114.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3335 = frontier_phi_73_pred;
                            _3336 = frontier_phi_73_pred_1;
                            _3340 = frontier_phi_73_pred_2;
                            _3339 = frontier_phi_73_pred_3;
                            _3338 = frontier_phi_73_pred_4;
                            _3337 = frontier_phi_73_pred_5;
                            _3044 = _3338 + _3057;
                            _3045 = _3339 + _3058;
                            _3046 = _3340 + _3059;
                            _3041 = _3335 + _3054;
                            _3042 = _3336 + _3055;
                            _3043 = _3337 + _3056;
                            if (_3061 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3061;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3044;
                        frontier_phi_67_pred_1 = _3045;
                        frontier_phi_67_pred_2 = _3046;
                        frontier_phi_67_pred_3 = _3043;
                        frontier_phi_67_pred_4 = _3042;
                        frontier_phi_67_pred_5 = _3041;
                    }
                    _2710 = frontier_phi_67_pred;
                    _2712 = frontier_phi_67_pred_1;
                    _2714 = frontier_phi_67_pred_2;
                    _2708 = frontier_phi_67_pred_3;
                    _2706 = frontier_phi_67_pred_4;
                    _2704 = frontier_phi_67_pred_5;
                    uint _2849 = _2848 + 1u;
                    if (_2849 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2842 = _2704;
                        _2843 = _2706;
                        _2844 = _2708;
                        _2845 = _2710;
                        _2846 = _2712;
                        _2847 = _2714;
                        _2848 = _2849;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2712;
                frontier_phi_55_56_ladder_1 = _2714;
                frontier_phi_55_56_ladder_2 = _2710;
                frontier_phi_55_56_ladder_3 = _2708;
                frontier_phi_55_56_ladder_4 = _2706;
                frontier_phi_55_56_ladder_5 = _2704;
            }
            else
            {
                frontier_phi_55_56_ladder = _2598;
                frontier_phi_55_56_ladder_1 = _2600;
                frontier_phi_55_56_ladder_2 = _2596;
                frontier_phi_55_56_ladder_3 = _2594;
                frontier_phi_55_56_ladder_4 = _2592;
                frontier_phi_55_56_ladder_5 = _2590;
            }
            _2703 = frontier_phi_55_56_ladder_5;
            _2705 = frontier_phi_55_56_ladder_4;
            _2707 = frontier_phi_55_56_ladder_3;
            _2709 = frontier_phi_55_56_ladder_2;
            _2711 = frontier_phi_55_56_ladder;
            _2713 = frontier_phi_55_56_ladder_1;
        }
        float _2718 = isnan(1.0) ? _793 : (isnan(_793) ? 1.0 : min(_793, 1.0));
        _2502 = (_2718 * _2709) + _1957;
        _2504 = (_2718 * _2711) + _1959;
        _2506 = (_2718 * _2713) + _1961;
        _2508 = ((_2703 * 0.039999999105930328369140625) * _2718) + _2287;
        _2510 = ((_2705 * 0.039999999105930328369140625) * _2718) + _2289;
        _2512 = ((_2707 * 0.039999999105930328369140625) * _2718) + _2291;
    }
    else
    {
        _2502 = _1957;
        _2504 = _1959;
        _2506 = _1961;
        _2508 = _2287;
        _2510 = _2289;
        _2512 = _2291;
    }
    float _4397 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4408 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4419 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    uint _2532 = _239 + 6u;
    float _2540 = _730 / cbSceneParam._m0[86u].x;
    float _2541 = _731 / cbSceneParam._m0[86u].y;
    vec4 _2555 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2540, _2541, (log2((isnan(cbSceneParam._m0[77u].w) ? _664 : (isnan(_664) ? cbSceneParam._m0[77u].w : min(_664, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2557 = _2555.x;
    float _2558 = _2555.y;
    float _2559 = _2555.z;
    float _2560 = _2555.w;
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    if (_664 > cbSceneParam._m0[78u].w)
    {
        float _2615 = isnan(_664) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _664 : min(cbSceneParam._m0[80u].w, _664));
        float _2616 = _2615 / _664;
        float _2627 = _2616 * _715;
        float _2628 = _716 * _2616;
        float _2629 = (-0.0) - _2628;
        float _2631 = _2616 * _717;
        float _2633 = (cbSceneParam._m0[77u].w * _2629) / _2615;
        float _2634 = _2633 + cbSceneParam._m0[79u].w;
        float _2635 = cbSceneParam._m0[79u].w - _2628;
        float _2641 = sqrt(((_2627 * _2627) + (_2628 * _2628)) + (_2631 * _2631));
        float _2644 = (1.0 - (cbSceneParam._m0[77u].w / _2615)) * _2641;
        float _2649 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2651 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2804;
        if (abs((_2629 - _2633) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2804 = ((((_2634 > 0.0) ? exp2(_2649 * _2634) : (2.0 - exp2(_2651 * _2634))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2644;
        }
        else
        {
            float _2764 = 1.0 / cbSceneParam._m0[80u].x;
            float _2765 = isnan(_2635) ? _2634 : (isnan(_2634) ? _2635 : max(_2634, _2635));
            float _2766 = isnan(_2635) ? _2634 : (isnan(_2634) ? _2635 : min(_2634, _2635));
            float _2775 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : min(_2765, 0.0));
            float _2776 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : min(_2766, 0.0));
            _2804 = ((abs(_2641 / _2629) * cbSceneParam._m0[80u].y) * ((((_2775 - _2776) * 2.0) - ((exp2(_2649 * (isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0)))) - exp2(_2649 * (isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0))))) * _2764)) - ((exp2(_2651 * _2775) - exp2(_2651 * _2776)) * _2764))) + (_2644 * cbSceneParam._m0[80u].z);
        }
        vec4 _2806 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2540, _2541, 1.0), 0.0);
        float _2815 = exp2((_2804 * (-1.44269502162933349609375)) * (1.0 - _2806.w));
        float _2816 = log2(_2815);
        float _2832 = log2(_2560);
        _2653 = (exp2(_2832 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2816 * cbSceneParam._m0[78u].x)) * _2806.x) / cbSceneParam._m0[78u].x)) + _2557;
        _2655 = (exp2(_2832 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2816 * cbSceneParam._m0[78u].y)) * _2806.y) / cbSceneParam._m0[78u].y)) + _2558;
        _2657 = (exp2(_2832 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2816 * cbSceneParam._m0[78u].z)) * _2806.z) / cbSceneParam._m0[78u].z)) + _2559;
        _2659 = _2815 * _2560;
    }
    else
    {
        _2653 = _2557;
        _2655 = _2558;
        _2657 = _2559;
        _2659 = _2560;
    }
    float _2671 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2672 = _2671 == 3.0;
    float _2673 = log2(_2659);
    float _2680 = exp2(_2673 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2502 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _793))) + ((_2508 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1596)) * cbPerFrame._m0[3u].x));
    float _2681 = exp2(_2673 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2504 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _793))) + ((_2510 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1596)) * cbPerFrame._m0[3u].x));
    float _2682 = exp2(_2673 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2506 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _793))) + ((_2512 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1596)) * cbPerFrame._m0[3u].x));
    float _2691 = (_2671 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2691 * (_2672 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2653)));
    SV_Target.y = _2691 * (_2672 ? _2681 : (_2681 + (cbSceneParam._m0[72u].w * _2655)));
    SV_Target.z = _2691 * (_2672 ? _2682 : (_2682 + (cbSceneParam._m0[72u].w * _2657)));
    SV_Target.w = cbInstanceData._m0[_2532].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2532].w;
}


