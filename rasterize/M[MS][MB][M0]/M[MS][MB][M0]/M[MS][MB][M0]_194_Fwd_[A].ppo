#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1246;
float _3603;
float _3604;
float _3605;
float _3606;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _347 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _349 = _347.x;
    float _359 = dot(vec4(_349, _347.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _376 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_349 - _359) * cbMtdParam._m0[24u].x) + _359) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3615 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _384 = (_377 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _385 = (_377 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _386 = (_377 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _260) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _261) + cbTextureTilingScale._m0[3u].w));
    vec4 _423 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _435 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _449 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_425 - _435) * cbMtdParam._m0[24u].x) + _435) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3626 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _457 = (_450 * ((_403.x * cbMtdParam._m0[13u].x) - _384)) + _384;
    float _458 = (_450 * ((_403.y * cbMtdParam._m0[13u].y) - _385)) + _385;
    float _459 = (_450 * ((_403.z * cbMtdParam._m0[13u].z) - _386)) + _386;
    vec4 _478 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _498 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _515 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _517 = _515.x;
    float _518 = _515.y;
    float _519 = _515.z;
    float _526 = ((_498.x - _517) * _377) + _517;
    float _527 = ((_498.y - _518) * _377) + _518;
    float _528 = ((_498.z - _519) * _377) + _519;
    vec4 _540 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _261) + cbTextureTilingScale._m0[2u].w));
    float _553 = ((_540.z - _528) * _450) + _528;
    float _556 = ((((_540.x - _526) * _450) + _526) * 2.0) + (-1.0);
    float _558 = ((((_540.y - _527) * _450) + _527) * 2.0) + (-1.0);
    float _559 = dot(vec2(_556, _558), vec2(_556, _558));
    float _3637 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _564 = sqrt(1.0 - (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))));
    vec4 _577 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _595 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _597 = _595.x;
    float _598 = 1.0 - _597;
    float _611 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_597 - _598) * cbMtdParam._m0[24u].z) + _598) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3648 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _612 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _619 = (_612 * ((_478.x * cbMtdParam._m0[18u].x) - _457)) + _457;
    float _620 = (_612 * ((_478.y * cbMtdParam._m0[18u].y) - _458)) + _458;
    float _621 = (_612 * ((_478.z * cbMtdParam._m0[18u].z) - _459)) + _459;
    vec4 _634 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _641 = (_634.x * 2.0) + (-1.0);
    float _642 = (_634.y * 2.0) + (-1.0);
    float _643 = dot(vec2(_641, _642), vec2(_641, _642));
    float _3659 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _651 = (_612 * (_634.z - _553)) + _553;
    float _663 = (((_641 - _556) + (cbMtdParam._m0[21u].x * _556)) * _612) + _556;
    float _664 = (((_642 - _558) + (cbMtdParam._m0[21u].x * _558)) * _612) + _558;
    float _665 = (_612 * (sqrt(1.0 - (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) - _564)) + _564;
    float _670 = cbMtdParam._m0[22u].x + _577.w;
    float _673 = fma(_665, _227 * NORMAL.x, fma(_664, _234 * TANGENT.x, (_220 * _212) * _663));
    float _676 = fma(_665, _227 * NORMAL.y, fma(_664, _234 * TANGENT.y, (_220 * _213) * _663));
    float _679 = fma(_665, _227 * NORMAL.z, fma(_664, _234 * TANGENT.z, (_220 * _214) * _663));
    float _683 = inversesqrt(dot(vec3(_673, _676, _679), vec3(_673, _676, _679)));
    float _684 = _683 * _673;
    float _685 = _683 * _676;
    float _686 = _683 * _679;
    float _3670 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _687 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _3692 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3703 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3714 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _705 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _757 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _747);
    float _758 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _747);
    float _759 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _747);
    float _763 = inversesqrt(dot(vec3(_757, _758, _759), vec3(_757, _758, _759)));
    float _764 = _757 * _763;
    float _765 = _758 * _763;
    float _766 = _759 * _763;
    vec4 _771 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _773 = _771.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _927 = sqrt(((_757 * _757) + (_758 * _758)) + (_759 * _759));
        float _933 = (cbMatDynParam._m0[5u].x * _927) + cbMatDynParam._m0[5u].y;
        float _3725 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _938 = (cbMatDynParam._m0[5u].z * _927) + cbMatDynParam._m0[5u].w;
        float _3736 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) - _934)) + _934) < ((_773 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _784 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _785 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _803 = fma(_686, cbSceneParam._m0[5u].z, fma(_685, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _684));
    float _806 = fma(_686, cbSceneParam._m0[6u].z, fma(_685, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _684));
    float _809 = fma(_686, cbSceneParam._m0[7u].z, fma(_685, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _684));
    uint _822 = _240 + 9u;
    uint _823 = _822 + uint(cbMatDynParam._m0[0u].w);
    float _829 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * cbInstanceData._m0[_823].x;
    float _830 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) * cbInstanceData._m0[_823].y;
    float _831 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) * cbInstanceData._m0[_823].z;
    float _3747 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    vec4 _843 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _784, cbSceneParam._m0[86u].y * _785));
    float _847 = ((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * TEXCOORD_5.w) * _843.x;
    float _848 = dot(vec3(_684, _685, _686), vec3(_764, _765, _766));
    float _851 = _848 * 2.0;
    float _855 = (_851 * _684) - _764;
    float _856 = (_851 * _685) - _765;
    float _857 = (_851 * _686) - _766;
    float _861 = abs(dot(vec3(_764, _765, _766), vec3(_684, _685, _686)));
    float _3780 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _863 = sqrt(_687);
    float _876 = exp2((_863 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_863 * 3.0));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1245;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _970 = fma(_916, cbModelParam._m0[26u].z, fma(_912, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _908));
        float _974 = fma(_916, cbModelParam._m0[27u].z, fma(_912, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _908));
        float _978 = fma(_916, cbModelParam._m0[28u].z, fma(_912, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _908));
        float _1003 = _908 + _684;
        float _1004 = _912 + _685;
        float _1005 = _916 + _686;
        float _1015 = fma(_1005, cbModelParam._m0[26u].z, fma(_1004, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1003)) - _970;
        float _1016 = fma(_1005, cbModelParam._m0[27u].z, fma(_1004, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1003)) - _974;
        float _1017 = fma(_1005, cbModelParam._m0[28u].z, fma(_1004, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1003)) - _978;
        float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
        float _1034 = ((_1021 * _1015) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_970 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1021 * _1016) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_974 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1021 * _1017) / cbModelParam._m0[34u].z) + ((((((_978 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        float _1073 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1039.x + (-0.5));
        float _1075 = _1073 * (_1039.y + (-0.5));
        float _1076 = _1073 * (_1039.z + (-0.5));
        float _1083 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1046.x + (-0.5));
        float _1085 = _1083 * (_1046.y + (-0.5));
        float _1086 = _1083 * (_1046.z + (-0.5));
        float _1093 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1053.x + (-0.5));
        float _1095 = _1093 * (_1053.y + (-0.5));
        float _1096 = _1093 * (_1053.z + (-0.5));
        float _1103 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1060.x + (-0.5));
        float _1105 = _1103 * (_1060.y + (-0.5));
        float _1106 = _1103 * (_1060.z + (-0.5));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = _1074 * 0.5;
        float _1111 = _1084 * 0.5;
        float _1112 = _1094 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1127 = (dot(vec3(_684, _685, _686), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3806 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1137 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3817 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3828 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1139 + 1.0))) + _1144) * _1107;
        float _1154 = _1075 * 0.5;
        float _1155 = _1085 * 0.5;
        float _1156 = _1095 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_684, _685, _686), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3861 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1181 + 1.0))) + _1186) * _1108;
        float _1196 = _1076 * 0.5;
        float _1197 = _1086 * 0.5;
        float _1198 = _1096 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_684, _685, _686), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3894 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1223 + 1.0))) + _1228) * _1109;
        _1245 = _1076;
        _1247 = _1075;
        _1248 = _1074;
        _1249 = _1086;
        _1250 = _1085;
        _1251 = _1084;
        _1252 = _1096;
        _1253 = _1095;
        _1254 = _1094;
        _1255 = _1109;
        _1256 = _1108;
        _1257 = _1107;
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
    }
    else
    {
        _1245 = _1246;
        _1247 = _1246;
        _1248 = _1246;
        _1249 = _1246;
        _1250 = _1246;
        _1251 = _1246;
        _1252 = _1246;
        _1253 = _1246;
        _1254 = _1246;
        _1255 = _1246;
        _1256 = _1246;
        _1257 = _1246;
        _1258 = 0.0;
        _1259 = 0.0;
        _1260 = 0.0;
    }
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1287 = fma(_916, cbModelParam._m0[30u].z, fma(_912, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _908));
        float _1291 = fma(_916, cbModelParam._m0[31u].z, fma(_912, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _908));
        float _1295 = fma(_916, cbModelParam._m0[32u].z, fma(_912, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _908));
        float _1318 = _908 + _684;
        float _1319 = _912 + _685;
        float _1320 = _916 + _686;
        float _1330 = fma(_1320, cbModelParam._m0[30u].z, fma(_1319, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1318)) - _1287;
        float _1331 = fma(_1320, cbModelParam._m0[31u].z, fma(_1319, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1318)) - _1291;
        float _1332 = fma(_1320, cbModelParam._m0[32u].z, fma(_1319, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1318)) - _1295;
        float _1336 = inversesqrt(dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332)));
        float _1349 = ((_1336 * _1330) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1287 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1336 * _1331) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1291 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1351 = ((_1336 * _1332) / cbModelParam._m0[35u].z) + ((((((_1295 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        float _1386 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1353.x + (-0.5));
        float _1388 = _1386 * (_1353.y + (-0.5));
        float _1389 = _1386 * (_1353.z + (-0.5));
        float _1396 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1360.x + (-0.5));
        float _1398 = _1396 * (_1360.y + (-0.5));
        float _1399 = _1396 * (_1360.z + (-0.5));
        float _1406 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1367.x + (-0.5));
        float _1408 = _1406 * (_1367.y + (-0.5));
        float _1409 = _1406 * (_1367.z + (-0.5));
        float _1416 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1374.x + (-0.5));
        float _1418 = _1416 * (_1374.y + (-0.5));
        float _1419 = _1416 * (_1374.z + (-0.5));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = _1387 * 0.5;
        float _1424 = _1397 * 0.5;
        float _1425 = _1407 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_684, _685, _686), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _3957 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1450 + 1.0))) + _1455) * _1420;
        float _1465 = _1388 * 0.5;
        float _1466 = _1398 * 0.5;
        float _1467 = _1408 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_684, _685, _686), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _3990 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1492 + 1.0))) + _1497) * _1421;
        float _1507 = _1389 * 0.5;
        float _1508 = _1399 * 0.5;
        float _1509 = _1409 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_684, _685, _686), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4023 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1534 + 1.0))) + _1539) * _1422;
        _1556 = _1389;
        _1557 = _1388;
        _1558 = _1387;
        _1559 = _1399;
        _1560 = _1398;
        _1561 = _1397;
        _1562 = _1409;
        _1563 = _1408;
        _1564 = _1407;
        _1565 = _1422;
        _1566 = _1421;
        _1567 = _1420;
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1570 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
    }
    else
    {
        _1556 = _1246;
        _1557 = _1246;
        _1558 = _1246;
        _1559 = _1246;
        _1560 = _1246;
        _1561 = _1246;
        _1562 = _1246;
        _1563 = _1246;
        _1564 = _1246;
        _1565 = _1246;
        _1566 = _1246;
        _1567 = _1246;
        _1568 = 0.0;
        _1569 = 0.0;
        _1570 = 0.0;
    }
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1258)) + _1258;
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1259)) + _1259;
    float _1582 = (cbModelParam._m0[1u].x * (_1570 - _1260)) + _1260;
    float _1603 = fma(_1582, cbSceneParam._m0[89u].z, fma(_1581, cbSceneParam._m0[89u].y, _1580 * cbSceneParam._m0[89u].x));
    float _1606 = fma(_1582, cbSceneParam._m0[90u].z, fma(_1581, cbSceneParam._m0[90u].y, _1580 * cbSceneParam._m0[90u].x));
    float _1609 = fma(_1582, cbSceneParam._m0[91u].z, fma(_1581, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1580));
    float _1624 = _855 * 0.5;
    float _1625 = _856 * 0.5;
    float _1626 = _857 * 0.5;
    float _1627 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1558, _1561, _1564, _1567));
    float _1630 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1633 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1667;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1640 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1245, _1249, _1252, _1255));
        float _1644 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1247, _1250, _1253, _1256));
        float _1648 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1248, _1251, _1254, _1257));
        float _1655 = dot(vec4(cbModelParam._m0[39u]), vec4(_1624, _1625, _1626, 1.0));
        _1667 = dot(vec3(isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1655) ? 0.0 : (isnan(0.0) ? _1655 : max(0.0, _1655))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1667 = 1.0;
    }
    float _1678;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1669 = dot(vec4(cbModelParam._m0[40u]), vec4(_1624, _1625, _1626, 1.0));
        _1678 = dot(vec3(isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1669) ? 0.0 : (isnan(0.0) ? _1669 : max(0.0, _1669))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1678 = 1.0;
    }
    float _1682 = (_1678 * cbModelParam._m0[1u].x) + (_1667 * (1.0 - cbModelParam._m0[1u].x));
    float _1692 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _687);
    float _1693 = isnan(_1692) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1692 : min(cbModelParam._m0[25u].z, _1692));
    float _1773;
    float _1775;
    float _1777;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1740 = fma(_916, cbModelParam._m0[13u].z, fma(_912, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _908)) + cbModelParam._m0[13u].w;
        float _1744 = fma(_916, cbModelParam._m0[14u].z, fma(_912, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _908)) + cbModelParam._m0[14u].w;
        float _1748 = fma(_916, cbModelParam._m0[15u].z, fma(_912, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _908)) + cbModelParam._m0[15u].w;
        float _1751 = fma(_857, cbModelParam._m0[13u].z, fma(_856, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _855));
        float _1754 = fma(_857, cbModelParam._m0[14u].z, fma(_856, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _855));
        float _1757 = fma(_857, cbModelParam._m0[15u].z, fma(_856, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _855));
        float _1785;
        if (_1751 > 0.0)
        {
            _1785 = abs((1.0 - _1740) / _1751);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1740 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1785 = frontier_phi_17_15_ladder;
        }
        float _1985;
        if (_1754 > 0.0)
        {
            _1985 = abs((1.0 - _1744) / _1754);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1744 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1985 = frontier_phi_26_22_ladder;
        }
        float _2228;
        if (_1757 > 0.0)
        {
            _2228 = abs((1.0 - _1748) / _1757);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1748 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2228 = frontier_phi_38_33_ladder;
        }
        float _2230 = isnan(_1985) ? _1785 : (isnan(_1785) ? _1985 : min(_1785, _1985));
        float _2231 = isnan(_2228) ? _2230 : (isnan(_2230) ? _2228 : min(_2230, _2228));
        float _2235 = (_2231 * _1751) + _1740;
        float _2236 = (_2231 * _1754) + _1744;
        float _2237 = (_2231 * _1757) + _1748;
        float _2238 = _2231 * 9.9999997473787516355514526367188e-05;
        float _2240 = (-1.0) - _2238;
        float _2242 = _2238 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2237 > _2242) || ((_2237 < _2240) || ((_2236 > _2242) || ((_2236 < _2240) || ((_2235 < _2240) || (_2235 > _2242))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2361 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2237, cbModelParam._m0[9u].z, fma(_2236, cbModelParam._m0[9u].y, _2235 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2237, cbModelParam._m0[10u].z, fma(_2236, cbModelParam._m0[10u].y, _2235 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2237, cbModelParam._m0[11u].z, fma(_2236, cbModelParam._m0[11u].y, _2235 * cbModelParam._m0[11u].x))), _1693);
            frontier_phi_16_38_ladder = _2361.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2361.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2361.x * cbModelParam._m0[1u].y;
        }
        _1773 = frontier_phi_16_38_ladder_2;
        _1775 = frontier_phi_16_38_ladder_1;
        _1777 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1761 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_855, _856, _857), _1693);
        _1773 = _1761.x * cbModelParam._m0[1u].y;
        _1775 = _1761.y * cbModelParam._m0[1u].y;
        _1777 = _1761.z * cbModelParam._m0[1u].y;
    }
    float _1781 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _687);
    float _1782 = isnan(_1781) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1781 : min(cbModelParam._m0[25u].w, _1781));
    float _1871;
    float _1873;
    float _1875;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1835 = fma(_916, cbModelParam._m0[21u].z, fma(_912, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _908)) + cbModelParam._m0[21u].w;
        float _1839 = fma(_916, cbModelParam._m0[22u].z, fma(_912, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _908)) + cbModelParam._m0[22u].w;
        float _1843 = fma(_916, cbModelParam._m0[23u].z, fma(_912, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _908)) + cbModelParam._m0[23u].w;
        float _1846 = fma(_857, cbModelParam._m0[21u].z, fma(_856, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _855));
        float _1849 = fma(_857, cbModelParam._m0[22u].z, fma(_856, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _855));
        float _1852 = fma(_857, cbModelParam._m0[23u].z, fma(_856, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _855));
        float _1990;
        if (_1846 > 0.0)
        {
            _1990 = abs((1.0 - _1835) / _1846);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1835 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1990 = frontier_phi_28_24_ladder;
        }
        float _2255;
        if (_1849 > 0.0)
        {
            _2255 = abs((1.0 - _1839) / _1849);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1839 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2255 = frontier_phi_40_35_ladder;
        }
        float _2460;
        if (_1852 > 0.0)
        {
            _2460 = abs((1.0 - _1843) / _1852);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1843 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2460 = frontier_phi_49_46_ladder;
        }
        float _2462 = isnan(_2255) ? _1990 : (isnan(_1990) ? _2255 : min(_1990, _2255));
        float _2463 = isnan(_2460) ? _2462 : (isnan(_2462) ? _2460 : min(_2462, _2460));
        float _2467 = (_2463 * _1846) + _1835;
        float _2468 = (_2463 * _1849) + _1839;
        float _2469 = (_2463 * _1852) + _1843;
        float _2470 = _2463 * 9.9999997473787516355514526367188e-05;
        float _2471 = (-1.0) - _2470;
        float _2473 = _2470 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2469 > _2473) || ((_2469 < _2471) || ((_2468 > _2473) || ((_2468 < _2471) || ((_2467 < _2471) || (_2467 > _2473))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2668 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2469, cbModelParam._m0[17u].z, fma(_2468, cbModelParam._m0[17u].y, _2467 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2469, cbModelParam._m0[18u].z, fma(_2468, cbModelParam._m0[18u].y, _2467 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2469, cbModelParam._m0[19u].z, fma(_2468, cbModelParam._m0[19u].y, _2467 * cbModelParam._m0[19u].x))), _1782);
            frontier_phi_25_49_ladder = _2668.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2668.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2668.x * cbModelParam._m0[1u].z;
        }
        _1871 = frontier_phi_25_49_ladder_2;
        _1873 = frontier_phi_25_49_ladder_1;
        _1875 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1855 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_855, _856, _857), _1782);
        _1871 = _1855.x * cbModelParam._m0[1u].z;
        _1873 = _1855.y * cbModelParam._m0[1u].z;
        _1875 = _1855.z * cbModelParam._m0[1u].z;
    }
    float _1887 = ((((1.0 - _876) * ((_863 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_876 * _863)) * _847;
    float _1888 = _1887 * ((cbModelParam._m0[1u].w * (_1871 - _1773)) + _1773);
    float _1889 = _1887 * ((cbModelParam._m0[1u].w * (_1873 - _1775)) + _1775);
    float _1890 = _1887 * ((cbModelParam._m0[1u].w * (_1875 - _1777)) + _1777);
    float _1893 = fma(_1890, cbSceneParam._m0[89u].z, fma(_1889, cbSceneParam._m0[89u].y, _1888 * cbSceneParam._m0[89u].x));
    float _1896 = fma(_1890, cbSceneParam._m0[90u].z, fma(_1889, cbSceneParam._m0[90u].y, _1888 * cbSceneParam._m0[90u].x));
    float _1899 = fma(_1890, cbSceneParam._m0[91u].z, fma(_1889, cbSceneParam._m0[91u].y, _1888 * cbSceneParam._m0[91u].x));
    uvec4 _1909 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1911 = _1909.x * 14u;
    uint _1912 = _1911 + 13u;
    float _1919 = _847 + (-1.0);
    float _1924 = (cbLight._m0[_1912].x * _1919) + 1.0;
    float _1925 = (cbLight._m0[_1912].y * _1919) + 1.0;
    float _1926 = (cbLight._m0[_1912].z * _1919) + 1.0;
    float _1927 = (cbLight._m0[_1912].w * _1919) + 1.0;
    uint _1928 = _1911 + 5u;
    float _1934 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
    uint _1938 = _1911 + 4u;
    float _1944 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
    uint _1948 = _1911 | 1u;
    float _1959 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_684, _685, _686));
    float _1962 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_684, _685, _686));
    float _4159 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _4170 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1967 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * 0.3183098733425140380859375;
    float _1969 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * 0.3183098733425140380859375;
    float _1976 = ((cbLight._m0[_1928].x * _1934) * _1969) + ((cbLight._m0[_1938].x * _1944) * _1967);
    float _1977 = ((_1934 * cbLight._m0[_1928].y) * _1969) + ((_1944 * cbLight._m0[_1938].y) * _1967);
    float _1978 = ((_1934 * cbLight._m0[_1928].z) * _1969) + ((_1944 * cbLight._m0[_1938].z) * _1967);
    uvec4 _1982 = floatBitsToUint(cbLight._m0[_1911 + 12u]);
    bool _1984 = _1982.x == 0u;
    float _1995;
    float _1997;
    float _1999;
    if (_1984)
    {
        _1995 = _1976;
        _1997 = _1977;
        _1999 = _1978;
    }
    else
    {
        uint _2003 = _1911 + 6u;
        float _2019 = (dot(vec3(cbLight._m0[_1911 + 2u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _2020 = _2019 * _2019;
        float _4181 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2021 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2022 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
        _1995 = (((cbLight._m0[_2003].x * 0.3183098733425140380859375) * _2021) * _2022) + _1976;
        _1997 = (((cbLight._m0[_2003].y * 0.3183098733425140380859375) * _2021) * _2022) + _1977;
        _1999 = (((cbLight._m0[_2003].z * 0.3183098733425140380859375) * _2021) * _2022) + _1978;
    }
    bool _2002 = _1982.y == 0u;
    float _2040;
    float _2042;
    float _2044;
    if (_2002)
    {
        _2040 = _1995;
        _2042 = _1997;
        _2044 = _1999;
    }
    else
    {
        uint _2199 = _1911 + 7u;
        float _2215 = (dot(vec3(cbLight._m0[_1911 + 3u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _2216 = _2215 * _2215;
        float _4197 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2217 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2218 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _2040 = (((cbLight._m0[_2199].x * 0.3183098733425140380859375) * _2217) * _2218) + _1995;
        _2042 = (((cbLight._m0[_2199].y * 0.3183098733425140380859375) * _2217) * _2218) + _1997;
        _2044 = (((cbLight._m0[_2199].z * 0.3183098733425140380859375) * _2217) * _2218) + _1999;
    }
    uint _2047 = _1911 + 8u;
    float _2060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1911].w)) * _687) * 0.949999988079071044921875);
    float _2061 = _2060 * _2060;
    float _2062 = cbLight._m0[_1911].x + _764;
    float _2063 = cbLight._m0[_1911].y + _765;
    float _2064 = cbLight._m0[_1911].z + _766;
    float _2068 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
    float _2069 = _2068 * _2062;
    float _2070 = _2068 * _2063;
    float _2071 = _2068 * _2064;
    float _2072 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_1911].xyz));
    float _4213 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _4224 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _2076 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2077 = dot(vec3(_684, _685, _686), vec3(_2069, _2070, _2071));
    float _4235 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _2081 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_2069, _2070, _2071));
    float _4246 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2085 = _2061 * _2061;
    float _2089 = ((_2080 * _2080) * (_2085 + (-1.0))) + 1.0;
    float _2100 = (exp2(log2(1.0 - (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2101 = 1.0 - _2061;
    float _2112 = (0.5 / (((_2076 * ((_2075 * _2101) + _2061)) + 9.9999999392252902907785028219223e-09) + (((_2076 * _2101) + _2061) * _2075))) * _2075;
    float _4257 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2114 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2085 / ((_2089 * _2089) * 3.141590118408203125));
    uint _2125 = _1911 + 9u;
    float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1948].w)) * _687) * 0.949999988079071044921875);
    float _2137 = _2136 * _2136;
    float _2138 = cbLight._m0[_1948].x + _764;
    float _2139 = cbLight._m0[_1948].y + _765;
    float _2140 = cbLight._m0[_1948].z + _766;
    float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
    float _2145 = _2144 * _2138;
    float _2146 = _2144 * _2139;
    float _2147 = _2144 * _2140;
    float _2148 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_1948].xyz));
    float _4268 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2152 = dot(vec3(_684, _685, _686), vec3(_2145, _2146, _2147));
    float _4279 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2155 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _2156 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_2145, _2146, _2147));
    float _4290 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2160 = _2137 * _2137;
    float _2164 = ((_2155 * _2155) * (_2160 + (-1.0))) + 1.0;
    float _2173 = (exp2(log2(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2174 = 1.0 - _2137;
    float _2184 = (0.5 / (((_2076 * ((_2151 * _2174) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_2076 * _2174) + _2137) * _2151))) * _2151;
    float _4301 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2186 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2160 / ((_2164 * _2164) * 3.141590118408203125));
    float _2196 = (((_2173 * cbLight._m0[_2125].x) * _2186) * _1934) + (((_2100 * cbLight._m0[_2047].x) * _2114) * _1944);
    float _2197 = (((_2173 * cbLight._m0[_2125].y) * _2186) * _1934) + (((_2100 * cbLight._m0[_2047].y) * _2114) * _1944);
    float _2198 = (((_2173 * cbLight._m0[_2125].z) * _2186) * _1934) + (((_2100 * cbLight._m0[_2047].z) * _2114) * _1944);
    float _2260;
    float _2262;
    float _2264;
    if (_1984)
    {
        _2260 = _2196;
        _2262 = _2197;
        _2264 = _2198;
    }
    else
    {
        uint _2266 = _1911 + 2u;
        uint _2270 = _1911 + 10u;
        float _2284 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2266].w)) * _687) * 0.949999988079071044921875);
        float _2285 = _2284 * _2284;
        float _2286 = cbLight._m0[_2266].x + _764;
        float _2287 = cbLight._m0[_2266].y + _765;
        float _2288 = cbLight._m0[_2266].z + _766;
        float _2292 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
        float _2293 = _2292 * _2286;
        float _2294 = _2292 * _2287;
        float _2295 = _2292 * _2288;
        float _2296 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2266].xyz));
        float _4312 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2299 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2300 = dot(vec3(_684, _685, _686), vec3(_2293, _2294, _2295));
        float _4323 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2304 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_2293, _2294, _2295));
        float _4334 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2308 = _2285 * _2285;
        float _2312 = ((_2303 * _2303) * (_2308 + (-1.0))) + 1.0;
        float _2321 = (exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2322 = 1.0 - _2285;
        float _2332 = (0.5 / (((_2076 * ((_2299 * _2322) + _2285)) + 9.9999999392252902907785028219223e-09) + (((_2076 * _2322) + _2285) * _2299))) * _2299;
        float _4345 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2334 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2308 / ((_2312 * _2312) * 3.141590118408203125));
        float _2335 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
        _2260 = (((_2321 * cbLight._m0[_2270].x) * _2334) * _2335) + _2196;
        _2262 = (((_2321 * cbLight._m0[_2270].y) * _2334) * _2335) + _2197;
        _2264 = (((_2321 * cbLight._m0[_2270].z) * _2334) * _2335) + _2198;
    }
    float _2370;
    float _2372;
    float _2374;
    if (_2002)
    {
        _2370 = _2260;
        _2372 = _2262;
        _2374 = _2264;
    }
    else
    {
        uint _2381 = _1911 + 3u;
        uint _2385 = _1911 + 11u;
        float _2399 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2381].w)) * _687) * 0.949999988079071044921875);
        float _2400 = _2399 * _2399;
        float _2401 = cbLight._m0[_2381].x + _764;
        float _2402 = cbLight._m0[_2381].y + _765;
        float _2403 = cbLight._m0[_2381].z + _766;
        float _2407 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
        float _2408 = _2407 * _2401;
        float _2409 = _2407 * _2402;
        float _2410 = _2407 * _2403;
        float _2411 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2381].xyz));
        float _4361 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2414 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2415 = dot(vec3(_684, _685, _686), vec3(_2408, _2409, _2410));
        float _4372 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2419 = dot(vec3(cbLight._m0[_2381].xyz), vec3(_2408, _2409, _2410));
        float _4383 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2423 = _2400 * _2400;
        float _2427 = ((_2418 * _2418) * (_2423 + (-1.0))) + 1.0;
        float _2436 = (exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2437 = 1.0 - _2400;
        float _2447 = (0.5 / (((_2076 * ((_2414 * _2437) + _2400)) + 9.9999999392252902907785028219223e-09) + (((_2076 * _2437) + _2400) * _2414))) * _2414;
        float _4394 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2449 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2423 / ((_2427 * _2427) * 3.141590118408203125));
        float _2450 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
        _2370 = (((_2436 * cbLight._m0[_2385].x) * _2449) * _2450) + _2260;
        _2372 = (((_2436 * cbLight._m0[_2385].y) * _2449) * _2450) + _2262;
        _2374 = (((_2436 * cbLight._m0[_2385].z) * _2449) * _2450) + _2264;
    }
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    if (_1909.y == 0u)
    {
        float _2525 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2526 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2525;
        float _2527 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2525;
        float _2528 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2525;
        uvec4 _2540 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2541 = _2540.x;
        uint _2552 = uint((float(_2540.y) * floor(float(uint(cbSceneParam._m0[85u].y * _785) / _2541))) + floor(float(uint(cbSceneParam._m0[85u].x * _784) / _2541)));
        float _2562 = (log2(_2528 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2563 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        uint _2566 = uint(isnan(14.0) ? _2563 : (isnan(_2563) ? 14.0 : min(_2563, 14.0)));
        uvec4 _2571 = texelFetch(g_lightClusterGridBuffer, int(((_2566 << 2u) + (_2552 << 6u)) >> 2u));
        uint _2572 = _2571.x;
        uint _2573 = _2540.z;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        if (((((1u << ((_2573 >> 4u) & 15u)) + 4294967295u) & _2572) == 0u) || ((_2573 & 240u) == 0u))
        {
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
        }
        else
        {
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2682;
            float _2684;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            uint _2832 = 0u;
            uint _2841;
            bool _2842;
            for (;;)
            {
                _2841 = texelFetch(g_lightClassification, int((((_2566 << 5u) + (_2552 << 9u)) + (_2832 << 2u)) >> 2u)).x;
                _2842 = _2841 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2842)
                {
                    frontier_phi_66_pred = _2826;
                    frontier_phi_66_pred_1 = _2831;
                    frontier_phi_66_pred_2 = _2830;
                    frontier_phi_66_pred_3 = _2829;
                    frontier_phi_66_pred_4 = _2828;
                    frontier_phi_66_pred_5 = _2827;
                }
                else
                {
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    uint _2977;
                    _2971 = _2826;
                    _2972 = _2827;
                    _2973 = _2828;
                    _2974 = _2829;
                    _2975 = _2830;
                    _2976 = _2831;
                    _2977 = _2841;
                    float _2898;
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    for (;;)
                    {
                        uint _2981 = uint(findLSB(_2977)) + (_2832 << 5u);
                        uint _2978 = (_2977 + 4294967295u) & _2977;
                        uint _2983 = _2981 * 48u;
                        vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2983)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2983 + 3u)).x));
                        uint _3003 = (_2981 * 48u) + 4u;
                        vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 3u)).x));
                        uint _3022 = (_2981 * 48u) + 8u;
                        vec3 _3033 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3022)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 2u)).x));
                        float _3037 = _2997.x - _2526;
                        float _3038 = _2997.y - _2527;
                        float _3039 = _2997.z - _2528;
                        float _3040 = dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039));
                        float _3043 = inversesqrt(_3040);
                        float _3044 = _3043 * _3037;
                        float _3045 = _3043 * _3038;
                        float _3046 = _3043 * _3039;
                        float _3047 = dot(vec3(_803, _806, _809), vec3(_3044, _3045, _3046));
                        float _3052 = 1.0 - (_3040 * _2997.w);
                        float _4420 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3053 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                        float _3054 = sqrt(_3040) * _3016.w;
                        float _3057 = 1.39999997615814208984375 / (_3054 + 1.39999997615814208984375);
                        float _3058 = _3057 * _3057;
                        float _3061 = ((1.0 - _3058) * _3047) + _3058;
                        float _3064 = _3054 * _3054;
                        float _3068 = ((isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0))) * _3053) / ((_3064 * 0.699999988079071044921875) + 1.0);
                        float _3072 = (-0.0) - _2526;
                        float _3073 = (-0.0) - _2527;
                        float _3074 = (-0.0) - _2528;
                        float _3078 = inversesqrt(dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074)));
                        float _3079 = _3078 * _3072;
                        float _3080 = _3078 * _3073;
                        float _3081 = _3078 * _3074;
                        float _3089 = exp2(log2(1.0 / ((_3064 * 3.5) + 5.0)) * 0.25);
                        float _3090 = 1.0 - _863;
                        float _3097 = sqrt(1.0 - ((1.0 - (_3090 * _3090)) * (1.0 - (_3089 * _3089))));
                        float _3098 = _3097 * _3097;
                        float _3099 = _3098 * _3098;
                        float _3100 = _3079 + _3044;
                        float _3101 = _3080 + _3045;
                        float _3102 = _3081 + _3046;
                        float _3106 = inversesqrt(dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102)));
                        float _3110 = dot(vec3(_803, _806, _809), vec3(_3079, _3080, _3081));
                        float _4436 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3113 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3114 = dot(vec3(_803, _806, _809), vec3(_3106 * _3100, _3106 * _3101, _3106 * _3102));
                        float _4447 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3117 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3121 = ((_3117 * _3117) * (_3099 + (-1.0))) + 1.0;
                        float _3122 = _3057 * _3098;
                        float _3123 = _3122 * _3122;
                        float _3126 = ((1.0 - _3123) * _3047) + _3123;
                        float _4458 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3127 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3128 = 1.0 - _3098;
                        float _3138 = (0.5 / (((_3127 * ((_3113 * _3128) + _3098)) + 9.9999999392252902907785028219223e-09) + (((_3127 * _3128) + _3098) * _3113))) * _3127;
                        float _4469 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3149 = (((_3099 * 3.1415927410125732421875) * (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) / ((_3121 * _3121) * ((_3064 * 2.1991131305694580078125) + 3.141590118408203125))) * _3053;
                        _2901 = (_3068 * _3016.x) + _2974;
                        _2902 = (_3068 * _3016.y) + _2975;
                        _2903 = (_3068 * _3016.z) + _2976;
                        _2898 = (_3149 * _3033.x) + _2971;
                        _2899 = (_3149 * _3033.y) + _2972;
                        _2900 = (_3149 * _3033.z) + _2973;
                        if (_2978 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2971 = _2898;
                            _2972 = _2899;
                            _2973 = _2900;
                            _2974 = _2901;
                            _2975 = _2902;
                            _2976 = _2903;
                            _2977 = _2978;
                        }
                    }
                    frontier_phi_66_pred = _2898;
                    frontier_phi_66_pred_1 = _2903;
                    frontier_phi_66_pred_2 = _2902;
                    frontier_phi_66_pred_3 = _2901;
                    frontier_phi_66_pred_4 = _2900;
                    frontier_phi_66_pred_5 = _2899;
                }
                _2674 = frontier_phi_66_pred;
                _2684 = frontier_phi_66_pred_1;
                _2682 = frontier_phi_66_pred_2;
                _2680 = frontier_phi_66_pred_3;
                _2678 = frontier_phi_66_pred_4;
                _2676 = frontier_phi_66_pred_5;
                uint _2833 = _2832 + 1u;
                if (_2833 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2826 = _2674;
                    _2827 = _2676;
                    _2828 = _2678;
                    _2829 = _2680;
                    _2830 = _2682;
                    _2831 = _2684;
                    _2832 = _2833;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
        }
        uvec4 _2687 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2688 = _2687.z;
        uint _2690 = (_2688 >> 8u) & 15u;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        if (((4294967295u << _2690) & _2572) == 0u)
        {
            _2794 = _2673;
            _2796 = _2675;
            _2798 = _2677;
            _2800 = _2679;
            _2802 = _2681;
            _2804 = _2683;
        }
        else
        {
            float _2819 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
            float _2820 = _2819 * _2526;
            float _2821 = _2819 * _2527;
            float _2822 = _2819 * _2528;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2690 < ((_2688 >> 12u) & 15u))
            {
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2954 = _2673;
                float _2955 = _2675;
                float _2956 = _2677;
                float _2957 = _2679;
                float _2958 = _2681;
                float _2959 = _2683;
                uint _2960 = _2690;
                uint _2969;
                bool _2970;
                for (;;)
                {
                    _2969 = texelFetch(g_lightClassification, int((((_2566 << 5u) + (_2552 << 9u)) + (_2960 << 2u)) >> 2u)).x;
                    _2970 = _2969 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2970)
                    {
                        frontier_phi_77_pred = _2959;
                        frontier_phi_77_pred_1 = _2958;
                        frontier_phi_77_pred_2 = _2957;
                        frontier_phi_77_pred_3 = _2956;
                        frontier_phi_77_pred_4 = _2955;
                        frontier_phi_77_pred_5 = _2954;
                    }
                    else
                    {
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3176 = _2954;
                        float _3177 = _2955;
                        float _3178 = _2956;
                        float _3179 = _2957;
                        float _3180 = _2958;
                        float _3181 = _2959;
                        uint _3182 = _2969;
                        uint _3183;
                        vec4 _3208;
                        float _3209;
                        vec4 _3224;
                        vec3 _3236;
                        vec4 _3251;
                        vec4 _3266;
                        float _3312;
                        bool _3313;
                        for (;;)
                        {
                            uint _3193 = ((_2960 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3182));
                            _3183 = (_3182 + 4294967295u) & _3182;
                            uint _3195 = _3193 * 40u;
                            _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            _3209 = _3208.w;
                            uint _3211 = (_3193 * 40u) + 4u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3226 = (_3193 * 40u) + 8u;
                            _3236 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x));
                            uint _3238 = (_3193 * 40u) + 16u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            uint _3253 = (_3193 * 40u) + 20u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3268 = (_3193 * 40u) + 24u;
                            vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            uint _3287 = (_3193 * 40u) + 28u;
                            vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            _3312 = fma(_2528, _3300.z, fma(_2527, _3300.y, _3300.x * _2526)) + _3300.w;
                            _3313 = !((fma(_2528, _3281.z, fma(_2527, _3281.y, _3281.x * _2526)) + _3281.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3313)
                            {
                                float _3340 = _3208.x - _2526;
                                float _3341 = _3208.y - _2527;
                                float _3342 = _3208.z - _2528;
                                float _3343 = dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342));
                                float _3346 = inversesqrt(_3343);
                                float _3347 = _3346 * _3340;
                                float _3348 = _3346 * _3341;
                                float _3349 = _3346 * _3342;
                                float _3353 = 1.0 - (_3343 / (_3209 * _3209));
                                float _4480 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3354 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3358 = sqrt(_3343) * _3224.w;
                                float _3360 = 1.39999997615814208984375 / (_3358 + 1.39999997615814208984375);
                                float _3361 = _3360 * _3360;
                                float _3364 = ((1.0 - _3361) * dot(vec3(_3347, _3348, _3349), vec3(_803, _806, _809))) + _3361;
                                float _3367 = _3358 * _3358;
                                float _3371 = (fma(_2528, _3251.z, fma(_2527, _3251.y, _3251.x * _2526)) + _3251.w) / _3312;
                                float _3372 = (fma(_2528, _3266.z, fma(_2527, _3266.y, _3266.x * _2526)) + _3266.w) / _3312;
                                float _3376 = 1.0 - dot(vec2(_3371, _3372), vec2(_3371, _3372));
                                float _4496 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3377 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3378 = _3377 * (((isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0))) * _3354) / ((_3367 * 0.699999988079071044921875) + 1.0));
                                float _3390 = exp2(log2(1.0 / ((_3367 * 3.5) + 5.0)) * 0.25);
                                float _3391 = 1.0 - _863;
                                float _3398 = sqrt(1.0 - ((1.0 - (_3391 * _3391)) * (1.0 - (_3390 * _3390))));
                                float _3399 = _3398 * _3398;
                                float _3400 = _3399 * _3399;
                                float _3401 = _3347 - _2820;
                                float _3402 = _3348 - _2821;
                                float _3403 = _3349 - _2822;
                                float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                                float _3411 = dot(vec3(_803, _806, _809), vec3((-0.0) - _2820, (-0.0) - _2821, (-0.0) - _2822));
                                float _4507 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3414 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3415 = dot(vec3(_803, _806, _809), vec3(_3407 * _3401, _3407 * _3402, _3407 * _3403));
                                float _4518 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3418 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3422 = ((_3418 * _3418) * (_3400 + (-1.0))) + 1.0;
                                float _3423 = _3360 * _3399;
                                float _3424 = _3423 * _3423;
                                float _3430 = ((1.0 - _3424) * dot(vec3(_803, _806, _809), vec3(_3347, _3348, _3349))) + _3424;
                                float _4529 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3432 = 1.0 - _3399;
                                float _3442 = (0.5 / (((_3431 * ((_3414 * _3432) + _3399)) + 9.9999999392252902907785028219223e-09) + (((_3431 * _3432) + _3399) * _3414))) * _3431;
                                float _4540 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3452 = (_3377 * _3354) * (((_3400 * 3.1415927410125732421875) * (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) / ((_3422 * _3422) * ((_3367 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3378 * _3224.y;
                                frontier_phi_83_pred_1 = _3378 * _3224.x;
                                frontier_phi_83_pred_2 = _3452 * _3236.z;
                                frontier_phi_83_pred_3 = _3452 * _3236.y;
                                frontier_phi_83_pred_4 = _3452 * _3236.x;
                                frontier_phi_83_pred_5 = _3378 * _3224.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3460 = frontier_phi_83_pred;
                            _3459 = frontier_phi_83_pred_1;
                            _3458 = frontier_phi_83_pred_2;
                            _3457 = frontier_phi_83_pred_3;
                            _3456 = frontier_phi_83_pred_4;
                            _3461 = frontier_phi_83_pred_5;
                            _3166 = _3459 + _3179;
                            _3167 = _3460 + _3180;
                            _3168 = _3461 + _3181;
                            _3163 = _3456 + _3176;
                            _3164 = _3457 + _3177;
                            _3165 = _3458 + _3178;
                            if (_3183 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3183;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3168;
                        frontier_phi_77_pred_1 = _3167;
                        frontier_phi_77_pred_2 = _3166;
                        frontier_phi_77_pred_3 = _3165;
                        frontier_phi_77_pred_4 = _3164;
                        frontier_phi_77_pred_5 = _3163;
                    }
                    _2805 = frontier_phi_77_pred;
                    _2803 = frontier_phi_77_pred_1;
                    _2801 = frontier_phi_77_pred_2;
                    _2799 = frontier_phi_77_pred_3;
                    _2797 = frontier_phi_77_pred_4;
                    _2795 = frontier_phi_77_pred_5;
                    uint _2961 = _2960 + 1u;
                    if (_2961 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2954 = _2795;
                        _2955 = _2797;
                        _2956 = _2799;
                        _2957 = _2801;
                        _2958 = _2803;
                        _2959 = _2805;
                        _2960 = _2961;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2799;
                frontier_phi_58_59_ladder_1 = _2805;
                frontier_phi_58_59_ladder_2 = _2803;
                frontier_phi_58_59_ladder_3 = _2801;
                frontier_phi_58_59_ladder_4 = _2797;
                frontier_phi_58_59_ladder_5 = _2795;
            }
            else
            {
                frontier_phi_58_59_ladder = _2677;
                frontier_phi_58_59_ladder_1 = _2683;
                frontier_phi_58_59_ladder_2 = _2681;
                frontier_phi_58_59_ladder_3 = _2679;
                frontier_phi_58_59_ladder_4 = _2675;
                frontier_phi_58_59_ladder_5 = _2673;
            }
            _2794 = frontier_phi_58_59_ladder_5;
            _2796 = frontier_phi_58_59_ladder_4;
            _2798 = frontier_phi_58_59_ladder;
            _2800 = frontier_phi_58_59_ladder_3;
            _2802 = frontier_phi_58_59_ladder_2;
            _2804 = frontier_phi_58_59_ladder_1;
        }
        float _2809 = isnan(1.0) ? _847 : (isnan(_847) ? 1.0 : min(_847, 1.0));
        _2585 = (_2809 * _2800) + _2040;
        _2587 = (_2809 * _2802) + _2042;
        _2589 = (_2809 * _2804) + _2044;
        _2591 = ((_2794 * 0.039999999105930328369140625) * _2809) + _2370;
        _2593 = ((_2796 * 0.039999999105930328369140625) * _2809) + _2372;
        _2595 = ((_2798 * 0.039999999105930328369140625) * _2809) + _2374;
    }
    else
    {
        _2585 = _2040;
        _2587 = _2042;
        _2589 = _2044;
        _2591 = _2370;
        _2593 = _2372;
        _2595 = _2374;
    }
    float _4556 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4567 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4578 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _2612 = ((isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2585 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _847))) + ((_2591 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1682)) * cbPerFrame._m0[3u].x);
    float _2613 = ((isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2587 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _847))) + ((_2593 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1682)) * cbPerFrame._m0[3u].x);
    float _2614 = ((isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2589 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _847))) + ((_2595 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1682)) * cbPerFrame._m0[3u].x);
    uint _2615 = _240 + 6u;
    float _2623 = _784 / cbSceneParam._m0[86u].x;
    float _2624 = _785 / cbSceneParam._m0[86u].y;
    vec4 _2638 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2623, _2624, (log2((isnan(cbSceneParam._m0[77u].w) ? _705 : (isnan(_705) ? cbSceneParam._m0[77u].w : min(_705, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2640 = _2638.x;
    float _2641 = _2638.y;
    float _2642 = _2638.z;
    float _2643 = _2638.w;
    float _2736;
    float _2738;
    float _2740;
    float _2742;
    if (_705 > cbSceneParam._m0[78u].w)
    {
        float _2698 = isnan(_705) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _705 : min(cbSceneParam._m0[80u].w, _705));
        float _2699 = _2698 / _705;
        float _2710 = _2699 * _757;
        float _2711 = _758 * _2699;
        float _2712 = (-0.0) - _2711;
        float _2714 = _2699 * _759;
        float _2716 = (cbSceneParam._m0[77u].w * _2712) / _2698;
        float _2717 = _2716 + cbSceneParam._m0[79u].w;
        float _2718 = cbSceneParam._m0[79u].w - _2711;
        float _2724 = sqrt(((_2710 * _2710) + (_2711 * _2711)) + (_2714 * _2714));
        float _2727 = (1.0 - (cbSceneParam._m0[77u].w / _2698)) * _2724;
        float _2732 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2734 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2911;
        if (abs((_2712 - _2716) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2911 = ((((_2717 > 0.0) ? exp2(_2732 * _2717) : (2.0 - exp2(_2734 * _2717))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2727;
        }
        else
        {
            float _2855 = 1.0 / cbSceneParam._m0[80u].x;
            float _2856 = isnan(_2718) ? _2717 : (isnan(_2717) ? _2718 : max(_2717, _2718));
            float _2857 = isnan(_2718) ? _2717 : (isnan(_2717) ? _2718 : min(_2717, _2718));
            float _2866 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : min(_2856, 0.0));
            float _2867 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : min(_2857, 0.0));
            _2911 = ((abs(_2724 / _2712) * cbSceneParam._m0[80u].y) * ((((_2866 - _2867) * 2.0) - ((exp2(_2732 * (isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0)))) - exp2(_2732 * (isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0))))) * _2855)) - ((exp2(_2734 * _2866) - exp2(_2734 * _2867)) * _2855))) + (_2727 * cbSceneParam._m0[80u].z);
        }
        vec4 _2913 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2623, _2624, 1.0), 0.0);
        float _2922 = exp2((_2911 * (-1.44269502162933349609375)) * (1.0 - _2913.w));
        float _2923 = log2(_2922);
        float _2939 = log2(_2643);
        _2736 = (exp2(_2939 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2923 * cbSceneParam._m0[78u].x)) * _2913.x) / cbSceneParam._m0[78u].x)) + _2640;
        _2738 = (exp2(_2939 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2923 * cbSceneParam._m0[78u].y)) * _2913.y) / cbSceneParam._m0[78u].y)) + _2641;
        _2740 = (exp2(_2939 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2923 * cbSceneParam._m0[78u].z)) * _2913.z) / cbSceneParam._m0[78u].z)) + _2642;
        _2742 = _2922 * _2643;
    }
    else
    {
        _2736 = _2640;
        _2738 = _2641;
        _2740 = _2642;
        _2742 = _2643;
    }
    bool _2949;
    vec4 _2752;
    vec4 _2774;
    float _2776;
    float _2780;
    float _2781;
    float _2782;
    float _2783;
    bool _2793;
    for (;;)
    {
        _2752 = cbMatDynParam._m0[0u];
        float _2754 = roundEven(_2752.y);
        bool _2755 = _2754 == 3.0;
        float _2756 = log2(_2742);
        float _2763 = exp2(_2756 * cbSceneParam._m0[78u].x) * _2612;
        float _2764 = exp2(_2756 * cbSceneParam._m0[78u].y) * _2613;
        float _2765 = exp2(_2756 * cbSceneParam._m0[78u].z) * _2614;
        float _2772 = _773 + (-0.5);
        _2774 = cbMtdParam._m0[1u];
        _2776 = _2774.y * _2772;
        float _2779 = (_2754 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2780 = _2779 * (_2755 ? _2763 : (_2763 + (cbSceneParam._m0[72u].w * _2736)));
        _2781 = _2779 * (_2755 ? _2764 : (_2764 + (cbSceneParam._m0[72u].w * _2738)));
        _2782 = _2779 * (_2755 ? _2765 : (_2765 + (cbSceneParam._m0[72u].w * _2740)));
        _2783 = _2772 * 0.999000012874603271484375;
        _2793 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2793)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _2783) < 0.5)
            {
                _2949 = true;
                break;
            }
        }
        uint _2890 = _822 + uint(_2752.w);
        if ((cbInstanceData._m0[_2890].w < 1.0) && ((cbInstanceData._m0[_2890].w + _2783) < 0.5))
        {
            _2949 = true;
            break;
        }
        if ((_2776 + 1.0) < _2774.x)
        {
            _2949 = true;
            break;
        }
        _2949 = false;
        break;
    }
    float _3154;
    if (_2949)
    {
        discard_state = true;
        _3154 = 0.0;
    }
    else
    {
        _3154 = cbInstanceData._m0[_2615].w;
    }
    SV_Target.x = _2780;
    SV_Target.y = _2781;
    SV_Target.z = _2782;
    SV_Target.w = _3154;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2615].w;
    discard_exit();
}


