#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1352;
float _3996;
float _3997;
float _3998;
float _3999;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4008 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _4019 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4030 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _403 = _401.x;
    float _413 = dot(vec4(_403, _401.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _430 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_403 - _413) * cbMtdParam._m0[24u].x) + _413) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4041 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _431 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _438 = (_431 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _439 = (_431 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _440 = (_431 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    vec4 _457 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _300) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _301) + cbTextureTilingScale._m0[3u].w));
    vec4 _477 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _479 = _477.x;
    float _489 = dot(vec4(_479, _477.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _503 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_479 - _489) * cbMtdParam._m0[24u].x) + _489) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4052 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _504 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _511 = (_504 * ((_457.x * cbMtdParam._m0[13u].x) - _438)) + _438;
    float _512 = (_504 * ((_457.y * cbMtdParam._m0[13u].y) - _439)) + _439;
    float _513 = (_504 * ((_457.z * cbMtdParam._m0[13u].z) - _440)) + _440;
    float _517 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _511;
    float _520 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _512;
    float _523 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _513;
    float _530 = ((_511 - _517) * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) + _517;
    float _531 = ((_512 - _520) * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) + _520;
    float _532 = ((_513 - _523) * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) + _523;
    vec4 _544 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _567 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _584 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _586 = _584.x;
    float _587 = _584.y;
    float _588 = _584.z;
    float _595 = ((_567.x - _586) * _431) + _586;
    float _596 = ((_567.y - _587) * _431) + _587;
    float _597 = ((_567.z - _588) * _431) + _588;
    vec4 _609 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _300) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _301) + cbTextureTilingScale._m0[2u].w));
    float _622 = ((_609.z - _597) * _504) + _597;
    float _625 = ((((_609.x - _595) * _504) + _595) * 2.0) + (-1.0);
    float _626 = ((((_609.y - _596) * _504) + _596) * 2.0) + (-1.0);
    float _627 = dot(vec2(_625, _626), vec2(_625, _626));
    float _4063 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _632 = sqrt(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))));
    vec4 _652 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _664 = (_625 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_544.x * 2.0) + (-1.0)))) + (((_652.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _665 = (_626 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_544.y * 2.0) + (-1.0)))) + (((_652.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _677 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _679 = _677.x;
    float _680 = 1.0 - _679;
    float _706 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_679 - _680) * cbMtdParam._m0[24u].w) + _680) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4074 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _707 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _715 = ((((cbMtdParam._m0[10u].x - _530) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _707) + _530;
    float _716 = ((((cbMtdParam._m0[10u].y - _531) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _707) + _531;
    float _717 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _532)) * _707) + _532;
    float _722 = (((_544.z - _622) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _622;
    float _726 = ((_652.z - _722) * cbMtdParam._m0[19u].w) + _722;
    float _730 = ((cbMtdParam._m0[23u].y - _726) * _707) + _726;
    vec4 _749 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _755 = (_749.x * 2.0) + (-1.0);
    float _756 = (_749.y * 2.0) + (-1.0);
    float _757 = dot(vec2(_755, _756), vec2(_755, _756));
    float _4085 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _773 = (_707 * (((cbMtdParam._m0[22u].z * _664) - _664) + _755)) + _664;
    float _774 = (_707 * (((cbMtdParam._m0[22u].z * _665) - _665) + _756)) + _665;
    float _775 = (_707 * (sqrt(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) - _632)) + _632;
    float _777 = cbMtdParam._m0[22u].x + _652.w;
    float _780 = fma(_775, _249 * NORMAL.x, fma(_774, _256 * TANGENT.x, (_242 * _234) * _773));
    float _783 = fma(_775, _249 * NORMAL.y, fma(_774, _256 * TANGENT.y, (_242 * _235) * _773));
    float _786 = fma(_775, _249 * NORMAL.z, fma(_774, _256 * TANGENT.z, (_242 * _236) * _773));
    float _790 = inversesqrt(dot(vec3(_780, _783, _786), vec3(_780, _783, _786)));
    float _791 = _790 * _780;
    float _792 = _790 * _783;
    float _793 = _790 * _786;
    float _4096 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _794 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4118 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _4129 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4140 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _812 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _863 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _853);
    float _864 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _853);
    float _865 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _853);
    float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
    float _870 = _863 * _869;
    float _871 = _864 * _869;
    float _872 = _865 * _869;
    vec4 _877 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _879 = _877.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1033 = sqrt(((_863 * _863) + (_864 * _864)) + (_865 * _865));
        float _1039 = (cbMatDynParam._m0[5u].x * _1033) + cbMatDynParam._m0[5u].y;
        float _4151 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1044 = (cbMatDynParam._m0[5u].z * _1033) + cbMatDynParam._m0[5u].w;
        float _4162 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) - _1040)) + _1040) < ((_879 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _890 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _891 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _909 = fma(_793, cbSceneParam._m0[5u].z, fma(_792, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _791));
    float _912 = fma(_793, cbSceneParam._m0[6u].z, fma(_792, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _791));
    float _915 = fma(_793, cbSceneParam._m0[7u].z, fma(_792, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _791));
    uint _928 = _281 + 9u;
    uint _929 = _928 + uint(cbMatDynParam._m0[0u].w);
    float _935 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * cbInstanceData._m0[_929].x;
    float _936 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * cbInstanceData._m0[_929].y;
    float _937 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * cbInstanceData._m0[_929].z;
    float _4173 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _4195 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    vec4 _949 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _890, cbSceneParam._m0[86u].y * _891));
    float _953 = ((isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * TEXCOORD_5.w) * _949.x;
    float _954 = dot(vec3(_791, _792, _793), vec3(_870, _871, _872));
    float _957 = _954 * 2.0;
    float _961 = (_957 * _791) - _870;
    float _962 = (_957 * _792) - _871;
    float _963 = (_957 * _793) - _872;
    float _967 = abs(dot(vec3(_870, _871, _872), vec3(_791, _792, _793)));
    float _4206 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _969 = sqrt(_794);
    float _982 = exp2((_969 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_969 * 3.0));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1351;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1076 = fma(_1022, cbModelParam._m0[26u].z, fma(_1018, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1014));
        float _1080 = fma(_1022, cbModelParam._m0[27u].z, fma(_1018, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1014));
        float _1084 = fma(_1022, cbModelParam._m0[28u].z, fma(_1018, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1014));
        float _1109 = _1014 + _791;
        float _1110 = _1018 + _792;
        float _1111 = _1022 + _793;
        float _1121 = fma(_1111, cbModelParam._m0[26u].z, fma(_1110, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1109)) - _1076;
        float _1122 = fma(_1111, cbModelParam._m0[27u].z, fma(_1110, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1109)) - _1080;
        float _1123 = fma(_1111, cbModelParam._m0[28u].z, fma(_1110, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1109)) - _1084;
        float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
        float _1140 = ((_1127 * _1121) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1076 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1127 * _1122) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1080 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1127 * _1123) / cbModelParam._m0[34u].z) + ((((((_1084 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        float _1179 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1145.x + (-0.5));
        float _1181 = _1179 * (_1145.y + (-0.5));
        float _1182 = _1179 * (_1145.z + (-0.5));
        float _1189 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1152.x + (-0.5));
        float _1191 = _1189 * (_1152.y + (-0.5));
        float _1192 = _1189 * (_1152.z + (-0.5));
        float _1199 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1159.x + (-0.5));
        float _1201 = _1199 * (_1159.y + (-0.5));
        float _1202 = _1199 * (_1159.z + (-0.5));
        float _1209 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1166.x + (-0.5));
        float _1211 = _1209 * (_1166.y + (-0.5));
        float _1212 = _1209 * (_1166.z + (-0.5));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = _1180 * 0.5;
        float _1217 = _1190 * 0.5;
        float _1218 = _1200 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1233 = (dot(vec3(_791, _792, _793), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1243 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _4254 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1245 + 1.0))) + _1250) * _1213;
        float _1260 = _1181 * 0.5;
        float _1261 = _1191 * 0.5;
        float _1262 = _1201 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_791, _792, _793), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _4287 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1287 + 1.0))) + _1292) * _1214;
        float _1302 = _1182 * 0.5;
        float _1303 = _1192 * 0.5;
        float _1304 = _1202 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_791, _792, _793), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _4320 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1329 + 1.0))) + _1334) * _1215;
        _1351 = _1182;
        _1353 = _1181;
        _1354 = _1180;
        _1355 = _1192;
        _1356 = _1191;
        _1357 = _1190;
        _1358 = _1202;
        _1359 = _1201;
        _1360 = _1200;
        _1361 = _1215;
        _1362 = _1214;
        _1363 = _1213;
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
    }
    else
    {
        _1351 = _1352;
        _1353 = _1352;
        _1354 = _1352;
        _1355 = _1352;
        _1356 = _1352;
        _1357 = _1352;
        _1358 = _1352;
        _1359 = _1352;
        _1360 = _1352;
        _1361 = _1352;
        _1362 = _1352;
        _1363 = _1352;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1393 = fma(_1022, cbModelParam._m0[30u].z, fma(_1018, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1014));
        float _1397 = fma(_1022, cbModelParam._m0[31u].z, fma(_1018, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1014));
        float _1401 = fma(_1022, cbModelParam._m0[32u].z, fma(_1018, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1014));
        float _1424 = _1014 + _791;
        float _1425 = _1018 + _792;
        float _1426 = _1022 + _793;
        float _1436 = fma(_1426, cbModelParam._m0[30u].z, fma(_1425, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1424)) - _1393;
        float _1437 = fma(_1426, cbModelParam._m0[31u].z, fma(_1425, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1424)) - _1397;
        float _1438 = fma(_1426, cbModelParam._m0[32u].z, fma(_1425, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1424)) - _1401;
        float _1442 = inversesqrt(dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438)));
        float _1455 = ((_1442 * _1436) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1393 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1456 = ((_1442 * _1437) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1397 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1457 = ((_1442 * _1438) / cbModelParam._m0[35u].z) + ((((((_1401 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        float _1492 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1459.x + (-0.5));
        float _1494 = _1492 * (_1459.y + (-0.5));
        float _1495 = _1492 * (_1459.z + (-0.5));
        float _1502 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1466.x + (-0.5));
        float _1504 = _1502 * (_1466.y + (-0.5));
        float _1505 = _1502 * (_1466.z + (-0.5));
        float _1512 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1473.x + (-0.5));
        float _1514 = _1512 * (_1473.y + (-0.5));
        float _1515 = _1512 * (_1473.z + (-0.5));
        float _1522 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1480.x + (-0.5));
        float _1524 = _1522 * (_1480.y + (-0.5));
        float _1525 = _1522 * (_1480.z + (-0.5));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = _1493 * 0.5;
        float _1530 = _1503 * 0.5;
        float _1531 = _1513 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_791, _792, _793), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4361 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4372 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4383 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_1556 + 1.0))) + _1561) * _1526;
        float _1571 = _1494 * 0.5;
        float _1572 = _1504 * 0.5;
        float _1573 = _1514 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_791, _792, _793), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4394 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4405 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4416 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_1598 + 1.0))) + _1603) * _1527;
        float _1613 = _1495 * 0.5;
        float _1614 = _1505 * 0.5;
        float _1615 = _1515 * 0.5;
        float _1616 = dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615));
        float _1621 = (_1616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1616);
        float _1629 = (dot(vec3(_791, _792, _793), vec3(_1621 * _1613, _1621 * _1614, _1621 * _1615)) + 1.0) * 0.5;
        float _4427 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1638 = sqrt(((_1614 * _1614) + (_1613 * _1613)) + (_1615 * _1615)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4438 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1640 = _1639 * 2.0;
        float _1644 = (1.0 - _1639) / (_1639 + 1.0);
        float _4449 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1654 = ((((1.0 - _1645) * (_1640 + 2.0)) * exp2(log2(isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_1640 + 1.0))) + _1645) * _1528;
        _1662 = _1495;
        _1663 = _1494;
        _1664 = _1493;
        _1665 = _1505;
        _1666 = _1504;
        _1667 = _1503;
        _1668 = _1515;
        _1669 = _1514;
        _1670 = _1513;
        _1671 = _1528;
        _1672 = _1527;
        _1673 = _1526;
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)));
    }
    else
    {
        _1662 = _1352;
        _1663 = _1352;
        _1664 = _1352;
        _1665 = _1352;
        _1666 = _1352;
        _1667 = _1352;
        _1668 = _1352;
        _1669 = _1352;
        _1670 = _1352;
        _1671 = _1352;
        _1672 = _1352;
        _1673 = _1352;
        _1674 = 0.0;
        _1675 = 0.0;
        _1676 = 0.0;
    }
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1364)) + _1364;
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1365)) + _1365;
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1366)) + _1366;
    float _1709 = fma(_1688, cbSceneParam._m0[89u].z, fma(_1687, cbSceneParam._m0[89u].y, _1686 * cbSceneParam._m0[89u].x));
    float _1712 = fma(_1688, cbSceneParam._m0[90u].z, fma(_1687, cbSceneParam._m0[90u].y, _1686 * cbSceneParam._m0[90u].x));
    float _1715 = fma(_1688, cbSceneParam._m0[91u].z, fma(_1687, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1686));
    float _1730 = _961 * 0.5;
    float _1731 = _962 * 0.5;
    float _1732 = _963 * 0.5;
    float _1733 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1736 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1739 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1773;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1746 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1351, _1355, _1358, _1361));
        float _1750 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1353, _1356, _1359, _1362));
        float _1754 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1354, _1357, _1360, _1363));
        float _1761 = dot(vec4(cbModelParam._m0[39u]), vec4(_1730, _1731, _1732, 1.0));
        _1773 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1761) ? 0.0 : (isnan(0.0) ? _1761 : max(0.0, _1761))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1773 = 1.0;
    }
    float _1784;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1775 = dot(vec4(cbModelParam._m0[40u]), vec4(_1730, _1731, _1732, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1775) ? 0.0 : (isnan(0.0) ? _1775 : max(0.0, _1775))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1788 = (_1784 * cbModelParam._m0[1u].x) + (_1773 * (1.0 - cbModelParam._m0[1u].x));
    float _1798 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _794);
    float _1799 = isnan(_1798) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1798 : min(cbModelParam._m0[25u].z, _1798));
    float _1881;
    float _1883;
    float _1885;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1848 = fma(_1022, cbModelParam._m0[13u].z, fma(_1018, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1014)) + cbModelParam._m0[13u].w;
        float _1852 = fma(_1022, cbModelParam._m0[14u].z, fma(_1018, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1014)) + cbModelParam._m0[14u].w;
        float _1856 = fma(_1022, cbModelParam._m0[15u].z, fma(_1018, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1014)) + cbModelParam._m0[15u].w;
        float _1859 = fma(_963, cbModelParam._m0[13u].z, fma(_962, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _961));
        float _1862 = fma(_963, cbModelParam._m0[14u].z, fma(_962, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _961));
        float _1865 = fma(_963, cbModelParam._m0[15u].z, fma(_962, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _961));
        float _1893;
        if (_1859 > 0.0)
        {
            _1893 = abs((1.0 - _1848) / _1859);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1848 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1893 = frontier_phi_17_15_ladder;
        }
        float _2064;
        if (_1862 > 0.0)
        {
            _2064 = abs((1.0 - _1852) / _1862);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1852 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2064 = frontier_phi_26_22_ladder;
        }
        float _2359;
        if (_1865 > 0.0)
        {
            _2359 = abs((1.0 - _1856) / _1865);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1856 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2359 = frontier_phi_38_33_ladder;
        }
        float _2361 = isnan(_2064) ? _1893 : (isnan(_1893) ? _2064 : min(_1893, _2064));
        float _2362 = isnan(_2359) ? _2361 : (isnan(_2361) ? _2359 : min(_2361, _2359));
        float _2366 = (_2362 * _1859) + _1848;
        float _2367 = (_2362 * _1862) + _1852;
        float _2368 = (_2362 * _1865) + _1856;
        float _2369 = _2362 * 9.9999997473787516355514526367188e-05;
        float _2371 = (-1.0) - _2369;
        float _2373 = _2369 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2368 > _2373) || ((_2368 < _2371) || ((_2367 > _2373) || ((_2367 < _2371) || ((_2366 < _2371) || (_2366 > _2373))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2368, cbModelParam._m0[9u].z, fma(_2367, cbModelParam._m0[9u].y, _2366 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2368, cbModelParam._m0[10u].z, fma(_2367, cbModelParam._m0[10u].y, _2366 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2368, cbModelParam._m0[11u].z, fma(_2367, cbModelParam._m0[11u].y, _2366 * cbModelParam._m0[11u].x))), _1799);
            frontier_phi_16_38_ladder = _2513.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2513.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2513.x * cbModelParam._m0[1u].y;
        }
        _1881 = frontier_phi_16_38_ladder_2;
        _1883 = frontier_phi_16_38_ladder_1;
        _1885 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1869 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_961, _962, _963), _1799);
        _1881 = _1869.x * cbModelParam._m0[1u].y;
        _1883 = _1869.y * cbModelParam._m0[1u].y;
        _1885 = _1869.z * cbModelParam._m0[1u].y;
    }
    float _1889 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _794);
    float _1890 = isnan(_1889) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1889 : min(cbModelParam._m0[25u].w, _1889));
    float _1981;
    float _1983;
    float _1985;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1945 = fma(_1022, cbModelParam._m0[21u].z, fma(_1018, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1014)) + cbModelParam._m0[21u].w;
        float _1949 = fma(_1022, cbModelParam._m0[22u].z, fma(_1018, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1014)) + cbModelParam._m0[22u].w;
        float _1953 = fma(_1022, cbModelParam._m0[23u].z, fma(_1018, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1014)) + cbModelParam._m0[23u].w;
        float _1956 = fma(_963, cbModelParam._m0[21u].z, fma(_962, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _961));
        float _1959 = fma(_963, cbModelParam._m0[22u].z, fma(_962, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _961));
        float _1962 = fma(_963, cbModelParam._m0[23u].z, fma(_962, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _961));
        float _2069;
        if (_1956 > 0.0)
        {
            _2069 = abs((1.0 - _1945) / _1956);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1945 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2069 = frontier_phi_28_24_ladder;
        }
        float _2386;
        if (_1959 > 0.0)
        {
            _2386 = abs((1.0 - _1949) / _1959);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1949 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2386 = frontier_phi_40_35_ladder;
        }
        float _2713;
        if (_1962 > 0.0)
        {
            _2713 = abs((1.0 - _1953) / _1962);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1953 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2713 = frontier_phi_50_47_ladder;
        }
        float _2715 = isnan(_2386) ? _2069 : (isnan(_2069) ? _2386 : min(_2069, _2386));
        float _2716 = isnan(_2713) ? _2715 : (isnan(_2715) ? _2713 : min(_2715, _2713));
        float _2720 = (_2716 * _1956) + _1945;
        float _2721 = (_2716 * _1959) + _1949;
        float _2722 = (_2716 * _1962) + _1953;
        float _2723 = _2716 * 9.9999997473787516355514526367188e-05;
        float _2724 = (-1.0) - _2723;
        float _2726 = _2723 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2722 > _2726) || ((_2722 < _2724) || ((_2721 > _2726) || ((_2721 < _2724) || ((_2720 < _2724) || (_2720 > _2726))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2840 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2722, cbModelParam._m0[17u].z, fma(_2721, cbModelParam._m0[17u].y, _2720 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2722, cbModelParam._m0[18u].z, fma(_2721, cbModelParam._m0[18u].y, _2720 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2722, cbModelParam._m0[19u].z, fma(_2721, cbModelParam._m0[19u].y, _2720 * cbModelParam._m0[19u].x))), _1890);
            frontier_phi_25_50_ladder = _2840.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2840.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2840.x * cbModelParam._m0[1u].z;
        }
        _1981 = frontier_phi_25_50_ladder_2;
        _1983 = frontier_phi_25_50_ladder_1;
        _1985 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1965 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_961, _962, _963), _1890);
        _1981 = _1965.x * cbModelParam._m0[1u].z;
        _1983 = _1965.y * cbModelParam._m0[1u].z;
        _1985 = _1965.z * cbModelParam._m0[1u].z;
    }
    float _1997 = ((((1.0 - _982) * ((_969 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_982 * _969)) * _953;
    float _1998 = _1997 * ((cbModelParam._m0[1u].w * (_1981 - _1881)) + _1881);
    float _1999 = _1997 * ((cbModelParam._m0[1u].w * (_1983 - _1883)) + _1883);
    float _2000 = _1997 * ((cbModelParam._m0[1u].w * (_1985 - _1885)) + _1885);
    float _2003 = fma(_2000, cbSceneParam._m0[89u].z, fma(_1999, cbSceneParam._m0[89u].y, _1998 * cbSceneParam._m0[89u].x));
    float _2006 = fma(_2000, cbSceneParam._m0[90u].z, fma(_1999, cbSceneParam._m0[90u].y, _1998 * cbSceneParam._m0[90u].x));
    float _2009 = fma(_2000, cbSceneParam._m0[91u].z, fma(_1999, cbSceneParam._m0[91u].y, _1998 * cbSceneParam._m0[91u].x));
    float _2043 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2047 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2051 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2055 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2056 = _2043 / _2055;
    float _2057 = _2047 / _2055;
    float _2058 = _2051 / _2055;
    float _2205;
    float _2206;
    float _2207;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2085 = ((uint(_2058 > cbSceneParam._m0[59u].y) + uint(_2058 > cbSceneParam._m0[59u].x)) + uint(_2058 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2086 = _2085 + 43u;
        uint _2094 = _2085 + 44u;
        uint _2102 = _2085 + 45u;
        uint _2110 = _2085 + 46u;
        float _2121 = fma(_2055, cbSceneParam._m0[_2086].w, fma(_2051, cbSceneParam._m0[_2086].z, fma(_2047, cbSceneParam._m0[_2086].y, _2043 * cbSceneParam._m0[_2086].x)));
        float _2125 = fma(_2055, cbSceneParam._m0[_2094].w, fma(_2051, cbSceneParam._m0[_2094].z, fma(_2047, cbSceneParam._m0[_2094].y, _2043 * cbSceneParam._m0[_2094].x)));
        float _2133 = fma(_2055, cbSceneParam._m0[_2110].w, fma(_2051, cbSceneParam._m0[_2110].z, fma(_2047, cbSceneParam._m0[_2110].y, _2043 * cbSceneParam._m0[_2110].x)));
        float _2138 = cbSceneParam._m0[33u].z * _2133;
        float _2140 = cbSceneParam._m0[33u].w * _2133;
        float _2143 = fma(_2055, cbSceneParam._m0[_2102].w, fma(_2051, cbSceneParam._m0[_2102].z, fma(_2047, cbSceneParam._m0[_2102].y, _2043 * cbSceneParam._m0[_2102].x))) / _2133;
        float _2191 = (cbSceneParam._m0[33u].x - sqrt(((_2057 * _2057) + (_2056 * _2056)) + (_2058 * _2058))) * cbSceneParam._m0[33u].y;
        float _4575 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2198 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 + _2121) / _2133, (_2140 + _2125) / _2133), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2140 + _2121) / _2133, (_2125 - _2138) / _2133), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2121 - _2138) / _2133, (_2125 - _2140) / _2133), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2121 - _2140) / _2133, (_2138 + _2125) / _2133), _2143), 0.0)).x), vec4(0.25)));
        _2205 = 1.0 - (_2198 * cbSceneParam._m0[34u].x);
        _2206 = 1.0 - (_2198 * cbSceneParam._m0[34u].y);
        _2207 = 1.0 - (_2198 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2205 = 1.0;
        _2206 = 1.0;
        _2207 = 1.0;
    }
    float _2271;
    float _2273;
    float _2275;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2259 = fma(_2055, cbSceneParam._m0[63u].w, fma(_2051, cbSceneParam._m0[63u].z, fma(_2047, cbSceneParam._m0[63u].y, _2043 * cbSceneParam._m0[63u].x)));
        float _2260 = fma(_2055, cbSceneParam._m0[60u].w, fma(_2051, cbSceneParam._m0[60u].z, fma(_2047, cbSceneParam._m0[60u].y, _2043 * cbSceneParam._m0[60u].x))) / _2259;
        float _2261 = fma(_2055, cbSceneParam._m0[61u].w, fma(_2051, cbSceneParam._m0[61u].z, fma(_2047, cbSceneParam._m0[61u].y, _2043 * cbSceneParam._m0[61u].x))) / _2259;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2260 >= cbSceneParam._m0[64u].x) && (_2261 >= cbSceneParam._m0[64u].y)) && (_2260 <= cbSceneParam._m0[64u].z)) && (_2261 <= cbSceneParam._m0[64u].w))
        {
            float _2399 = fma(_2055, cbSceneParam._m0[62u].w, fma(_2051, cbSceneParam._m0[62u].z, fma(_2047, cbSceneParam._m0[62u].y, _2043 * cbSceneParam._m0[62u].x))) / _2259;
            float _2403 = isnan(cbSceneParam._m0[41u].w) ? _2399 : (isnan(_2399) ? cbSceneParam._m0[41u].w : max(_2399, cbSceneParam._m0[41u].w));
            float _2446 = (cbSceneParam._m0[33u].x - sqrt(((_2057 * _2057) + (_2056 * _2056)) + (_2058 * _2058))) * cbSceneParam._m0[33u].y;
            float _4591 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
            float _2453 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2260, cbSceneParam._m0[33u].w + _2261), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2260, _2261 - cbSceneParam._m0[33u].z), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2260 - cbSceneParam._m0[33u].z, _2261 - cbSceneParam._m0[33u].w), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2260 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2261), _2403), 0.0)).x), vec4(0.25)));
            float _2457 = 1.0 - (_2453 * cbSceneParam._m0[34u].x);
            float _2458 = 1.0 - (_2453 * cbSceneParam._m0[34u].y);
            float _2459 = 1.0 - (_2453 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2459) ? _2207 : (isnan(_2207) ? _2459 : min(_2207, _2459));
            frontier_phi_37_36_ladder_1 = isnan(_2458) ? _2206 : (isnan(_2206) ? _2458 : min(_2206, _2458));
            frontier_phi_37_36_ladder_2 = isnan(_2457) ? _2205 : (isnan(_2205) ? _2457 : min(_2205, _2457));
        }
        else
        {
            frontier_phi_37_36_ladder = _2207;
            frontier_phi_37_36_ladder_1 = _2206;
            frontier_phi_37_36_ladder_2 = _2205;
        }
        _2271 = frontier_phi_37_36_ladder_2;
        _2273 = frontier_phi_37_36_ladder_1;
        _2275 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2271 = _2205;
        _2273 = _2206;
        _2275 = _2207;
    }
    uvec4 _2280 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2282 = _2280.x * 14u;
    uint _2283 = _2282 + 13u;
    float _2290 = _953 + (-1.0);
    float _2295 = (cbLight._m0[_2283].x * _2290) + 1.0;
    float _2296 = (cbLight._m0[_2283].y * _2290) + 1.0;
    float _2297 = (cbLight._m0[_2283].z * _2290) + 1.0;
    float _2298 = (cbLight._m0[_2283].w * _2290) + 1.0;
    uint _2299 = _2282 + 5u;
    float _2305 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
    uint _2309 = _2282 + 4u;
    float _2318 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
    uint _2322 = _2282 | 1u;
    float _2333 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_791, _792, _793));
    float _2336 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_791, _792, _793));
    float _4627 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _4638 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2341 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * 0.3183098733425140380859375;
    float _2343 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * 0.3183098733425140380859375;
    float _2350 = ((cbLight._m0[_2299].x * _2305) * _2343) + (((cbLight._m0[_2309].x * _2271) * _2318) * _2341);
    float _2351 = ((_2305 * cbLight._m0[_2299].y) * _2343) + (((cbLight._m0[_2309].y * _2273) * _2318) * _2341);
    float _2352 = ((_2305 * cbLight._m0[_2299].z) * _2343) + (((cbLight._m0[_2309].z * _2275) * _2318) * _2341);
    uvec4 _2356 = floatBitsToUint(cbLight._m0[_2282 + 12u]);
    bool _2358 = _2356.x == 0u;
    float _2460;
    float _2462;
    float _2464;
    if (_2358)
    {
        _2460 = _2350;
        _2462 = _2351;
        _2464 = _2352;
    }
    else
    {
        uint _2468 = _2282 + 6u;
        float _2484 = (dot(vec3(cbLight._m0[_2282 + 2u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2485 = _2484 * _2484;
        float _4649 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2486 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2487 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
        _2460 = (((cbLight._m0[_2468].x * 0.3183098733425140380859375) * _2486) * _2487) + _2350;
        _2462 = (((cbLight._m0[_2468].y * 0.3183098733425140380859375) * _2486) * _2487) + _2351;
        _2464 = (((cbLight._m0[_2468].z * 0.3183098733425140380859375) * _2486) * _2487) + _2352;
    }
    bool _2467 = _2356.y == 0u;
    float _2522;
    float _2524;
    float _2526;
    if (_2467)
    {
        _2522 = _2460;
        _2524 = _2462;
        _2526 = _2464;
    }
    else
    {
        uint _2684 = _2282 + 7u;
        float _2700 = (dot(vec3(cbLight._m0[_2282 + 3u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2701 = _2700 * _2700;
        float _4665 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2702 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2703 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2522 = (((cbLight._m0[_2684].x * 0.3183098733425140380859375) * _2702) * _2703) + _2460;
        _2524 = (((cbLight._m0[_2684].y * 0.3183098733425140380859375) * _2702) * _2703) + _2462;
        _2526 = (((cbLight._m0[_2684].z * 0.3183098733425140380859375) * _2702) * _2703) + _2464;
    }
    uint _2529 = _2282 + 8u;
    float _2542 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2282].w)) * _794) * 0.949999988079071044921875);
    float _2543 = _2542 * _2542;
    float _2544 = cbLight._m0[_2282].x + _870;
    float _2545 = cbLight._m0[_2282].y + _871;
    float _2546 = cbLight._m0[_2282].z + _872;
    float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
    float _2551 = _2550 * _2544;
    float _2552 = _2550 * _2545;
    float _2553 = _2550 * _2546;
    float _2554 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2282].xyz));
    float _4681 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2557 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _4692 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _2558 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
    float _2559 = dot(vec3(_791, _792, _793), vec3(_2551, _2552, _2553));
    float _4703 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
    float _2563 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_2551, _2552, _2553));
    float _4714 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2567 = _2543 * _2543;
    float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
    float _2582 = (exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2583 = 1.0 - _2543;
    float _2594 = (0.5 / (((_2558 * ((_2557 * _2583) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2583) + _2543) * _2557))) * _2557;
    float _4725 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2596 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
    uint _2610 = _2282 + 9u;
    float _2621 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _794) * 0.949999988079071044921875);
    float _2622 = _2621 * _2621;
    float _2623 = cbLight._m0[_2322].x + _870;
    float _2624 = cbLight._m0[_2322].y + _871;
    float _2625 = cbLight._m0[_2322].z + _872;
    float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
    float _2630 = _2629 * _2623;
    float _2631 = _2629 * _2624;
    float _2632 = _2629 * _2625;
    float _2633 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2322].xyz));
    float _4736 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2636 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2637 = dot(vec3(_791, _792, _793), vec3(_2630, _2631, _2632));
    float _4747 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2640 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2641 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2630, _2631, _2632));
    float _4758 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2645 = _2622 * _2622;
    float _2649 = ((_2640 * _2640) * (_2645 + (-1.0))) + 1.0;
    float _2658 = (exp2(log2(1.0 - (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2659 = 1.0 - _2622;
    float _2669 = (0.5 / (((_2558 * ((_2636 * _2659) + _2622)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2659) + _2622) * _2636))) * _2636;
    float _4769 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2671 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2645 / ((_2649 * _2649) * 3.141590118408203125));
    float _2681 = (((_2658 * cbLight._m0[_2610].x) * _2671) * _2305) + ((((cbLight._m0[_2529].x * _2271) * _2582) * _2596) * _2318);
    float _2682 = (((_2658 * cbLight._m0[_2610].y) * _2671) * _2305) + ((((cbLight._m0[_2529].y * _2273) * _2582) * _2596) * _2318);
    float _2683 = (((_2658 * cbLight._m0[_2610].z) * _2671) * _2305) + ((((cbLight._m0[_2529].z * _2275) * _2582) * _2596) * _2318);
    float _2739;
    float _2741;
    float _2743;
    if (_2358)
    {
        _2739 = _2681;
        _2741 = _2682;
        _2743 = _2683;
    }
    else
    {
        uint _2745 = _2282 + 2u;
        uint _2749 = _2282 + 10u;
        float _2763 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2745].w)) * _794) * 0.949999988079071044921875);
        float _2764 = _2763 * _2763;
        float _2765 = cbLight._m0[_2745].x + _870;
        float _2766 = cbLight._m0[_2745].y + _871;
        float _2767 = cbLight._m0[_2745].z + _872;
        float _2771 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
        float _2772 = _2771 * _2765;
        float _2773 = _2771 * _2766;
        float _2774 = _2771 * _2767;
        float _2775 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2745].xyz));
        float _4780 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2778 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2779 = dot(vec3(_791, _792, _793), vec3(_2772, _2773, _2774));
        float _4791 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
        float _2783 = dot(vec3(cbLight._m0[_2745].xyz), vec3(_2772, _2773, _2774));
        float _4802 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2787 = _2764 * _2764;
        float _2791 = ((_2782 * _2782) * (_2787 + (-1.0))) + 1.0;
        float _2800 = (exp2(log2(1.0 - (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2801 = 1.0 - _2764;
        float _2811 = (0.5 / (((_2558 * ((_2778 * _2801) + _2764)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2801) + _2764) * _2778))) * _2778;
        float _4813 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2813 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2787 / ((_2791 * _2791) * 3.141590118408203125));
        float _2814 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
        _2739 = (((_2800 * cbLight._m0[_2749].x) * _2813) * _2814) + _2681;
        _2741 = (((_2800 * cbLight._m0[_2749].y) * _2813) * _2814) + _2682;
        _2743 = (((_2800 * cbLight._m0[_2749].z) * _2813) * _2814) + _2683;
    }
    float _2845;
    float _2847;
    float _2849;
    if (_2467)
    {
        _2845 = _2739;
        _2847 = _2741;
        _2849 = _2743;
    }
    else
    {
        uint _2856 = _2282 + 3u;
        uint _2860 = _2282 + 11u;
        float _2874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2856].w)) * _794) * 0.949999988079071044921875);
        float _2875 = _2874 * _2874;
        float _2876 = cbLight._m0[_2856].x + _870;
        float _2877 = cbLight._m0[_2856].y + _871;
        float _2878 = cbLight._m0[_2856].z + _872;
        float _2882 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
        float _2883 = _2882 * _2876;
        float _2884 = _2882 * _2877;
        float _2885 = _2882 * _2878;
        float _2886 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2856].xyz));
        float _4829 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2889 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2890 = dot(vec3(_791, _792, _793), vec3(_2883, _2884, _2885));
        float _4840 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2893 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
        float _2894 = dot(vec3(cbLight._m0[_2856].xyz), vec3(_2883, _2884, _2885));
        float _4851 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2898 = _2875 * _2875;
        float _2902 = ((_2893 * _2893) * (_2898 + (-1.0))) + 1.0;
        float _2911 = (exp2(log2(1.0 - (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2912 = 1.0 - _2875;
        float _2922 = (0.5 / (((_2558 * ((_2889 * _2912) + _2875)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2912) + _2875) * _2889))) * _2889;
        float _4862 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2924 = (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2898 / ((_2902 * _2902) * 3.141590118408203125));
        float _2925 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2845 = (((_2911 * cbLight._m0[_2860].x) * _2924) * _2925) + _2739;
        _2847 = (((_2911 * cbLight._m0[_2860].y) * _2924) * _2925) + _2741;
        _2849 = (((_2911 * cbLight._m0[_2860].z) * _2924) * _2925) + _2743;
    }
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    if (_2280.y == 0u)
    {
        uvec4 _2946 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2947 = _2946.x;
        uint _2958 = uint((float(_2946.y) * floor(float(uint(cbSceneParam._m0[85u].y * _891) / _2947))) + floor(float(uint(cbSceneParam._m0[85u].x * _890) / _2947)));
        float _2968 = (log2(_2058 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2969 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        uint _2972 = uint(isnan(14.0) ? _2969 : (isnan(_2969) ? 14.0 : min(_2969, 14.0)));
        uvec4 _2977 = texelFetch(g_lightClusterGridBuffer, int(((_2972 << 2u) + (_2958 << 6u)) >> 2u));
        uint _2978 = _2977.x;
        uint _2979 = _2946.z;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        if (((((1u << ((_2979 >> 4u) & 15u)) + 4294967295u) & _2978) == 0u) || ((_2979 & 240u) == 0u))
        {
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
        }
        else
        {
            float _3059;
            float _3061;
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            uint _3217 = 0u;
            uint _3226;
            bool _3227;
            for (;;)
            {
                _3226 = texelFetch(g_lightClassification, int((((_2972 << 5u) + (_2958 << 9u)) + (_3217 << 2u)) >> 2u)).x;
                _3227 = _3226 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3227)
                {
                    frontier_phi_71_pred = _3216;
                    frontier_phi_71_pred_1 = _3215;
                    frontier_phi_71_pred_2 = _3214;
                    frontier_phi_71_pred_3 = _3213;
                    frontier_phi_71_pred_4 = _3212;
                    frontier_phi_71_pred_5 = _3211;
                }
                else
                {
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    uint _3362;
                    _3356 = _3211;
                    _3357 = _3212;
                    _3358 = _3213;
                    _3359 = _3214;
                    _3360 = _3215;
                    _3361 = _3216;
                    _3362 = _3226;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    for (;;)
                    {
                        uint _3366 = uint(findLSB(_3362)) + (_3217 << 5u);
                        uint _3363 = (_3362 + 4294967295u) & _3362;
                        uint _3368 = _3366 * 48u;
                        vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 3u)).x));
                        uint _3388 = (_3366 * 48u) + 4u;
                        vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3388)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 3u)).x));
                        uint _3407 = (_3366 * 48u) + 8u;
                        vec3 _3418 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3407)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 2u)).x));
                        float _3422 = _3382.x - _2056;
                        float _3423 = _3382.y - _2057;
                        float _3424 = _3382.z - _2058;
                        float _3425 = dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424));
                        float _3428 = inversesqrt(_3425);
                        float _3429 = _3428 * _3422;
                        float _3430 = _3428 * _3423;
                        float _3431 = _3428 * _3424;
                        float _3432 = dot(vec3(_909, _912, _915), vec3(_3429, _3430, _3431));
                        float _3437 = 1.0 - (_3425 * _3382.w);
                        float _4888 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3438 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                        float _3439 = sqrt(_3425) * _3401.w;
                        float _3442 = 1.39999997615814208984375 / (_3439 + 1.39999997615814208984375);
                        float _3443 = _3442 * _3442;
                        float _3446 = ((1.0 - _3443) * _3432) + _3443;
                        float _3449 = _3439 * _3439;
                        float _3453 = ((isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0))) * _3438) / ((_3449 * 0.699999988079071044921875) + 1.0);
                        float _3457 = (-0.0) - _2056;
                        float _3458 = (-0.0) - _2057;
                        float _3459 = (-0.0) - _2058;
                        float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                        float _3464 = _3463 * _3457;
                        float _3465 = _3463 * _3458;
                        float _3466 = _3463 * _3459;
                        float _3473 = exp2(log2(1.0 / ((_3449 * 3.5) + 5.0)) * 0.25);
                        float _3474 = 1.0 - _969;
                        float _3481 = sqrt(1.0 - ((1.0 - (_3474 * _3474)) * (1.0 - (_3473 * _3473))));
                        float _3482 = _3481 * _3481;
                        float _3483 = _3482 * _3482;
                        float _3484 = _3464 + _3429;
                        float _3485 = _3465 + _3430;
                        float _3486 = _3466 + _3431;
                        float _3490 = inversesqrt(dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486)));
                        float _3494 = dot(vec3(_909, _912, _915), vec3(_3464, _3465, _3466));
                        float _4904 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3497 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                        float _3498 = dot(vec3(_909, _912, _915), vec3(_3490 * _3484, _3490 * _3485, _3490 * _3486));
                        float _4915 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3501 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                        float _3505 = ((_3501 * _3501) * (_3483 + (-1.0))) + 1.0;
                        float _3506 = _3442 * _3482;
                        float _3507 = _3506 * _3506;
                        float _3510 = ((1.0 - _3507) * _3432) + _3507;
                        float _4926 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3511 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                        float _3512 = 1.0 - _3482;
                        float _3522 = (0.5 / (((_3511 * ((_3497 * _3512) + _3482)) + 9.9999999392252902907785028219223e-09) + (((_3511 * _3512) + _3482) * _3497))) * _3511;
                        float _4937 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3533 = (((_3483 * 3.1415927410125732421875) * (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0)))) / ((_3505 * _3505) * ((_3449 * 2.1991131305694580078125) + 3.141590118408203125))) * _3438;
                        _3286 = (_3453 * _3401.x) + _3359;
                        _3287 = (_3453 * _3401.y) + _3360;
                        _3288 = (_3453 * _3401.z) + _3361;
                        _3283 = (_3533 * _3418.x) + _3356;
                        _3284 = (_3533 * _3418.y) + _3357;
                        _3285 = (_3533 * _3418.z) + _3358;
                        if (_3363 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3356 = _3283;
                            _3357 = _3284;
                            _3358 = _3285;
                            _3359 = _3286;
                            _3360 = _3287;
                            _3361 = _3288;
                            _3362 = _3363;
                        }
                    }
                    frontier_phi_71_pred = _3288;
                    frontier_phi_71_pred_1 = _3287;
                    frontier_phi_71_pred_2 = _3286;
                    frontier_phi_71_pred_3 = _3285;
                    frontier_phi_71_pred_4 = _3284;
                    frontier_phi_71_pred_5 = _3283;
                }
                _3069 = frontier_phi_71_pred;
                _3067 = frontier_phi_71_pred_1;
                _3065 = frontier_phi_71_pred_2;
                _3063 = frontier_phi_71_pred_3;
                _3061 = frontier_phi_71_pred_4;
                _3059 = frontier_phi_71_pred_5;
                uint _3218 = _3217 + 1u;
                if (_3218 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3211 = _3059;
                    _3212 = _3061;
                    _3213 = _3063;
                    _3214 = _3065;
                    _3215 = _3067;
                    _3216 = _3069;
                    _3217 = _3218;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
        }
        uvec4 _3072 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3073 = _3072.z;
        uint _3075 = (_3073 >> 8u) & 15u;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        if (((4294967295u << _3075) & _2978) == 0u)
        {
            _3179 = _3058;
            _3181 = _3060;
            _3183 = _3062;
            _3185 = _3064;
            _3187 = _3066;
            _3189 = _3068;
        }
        else
        {
            float _3204 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
            float _3205 = _3204 * _2056;
            float _3206 = _3204 * _2057;
            float _3207 = _3204 * _2058;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3075 < ((_3073 >> 12u) & 15u))
            {
                float _3180;
                float _3182;
                float _3184;
                float _3186;
                float _3188;
                float _3190;
                float _3339 = _3058;
                float _3340 = _3060;
                float _3341 = _3062;
                float _3342 = _3064;
                float _3343 = _3066;
                float _3344 = _3068;
                uint _3345 = _3075;
                uint _3354;
                bool _3355;
                for (;;)
                {
                    _3354 = texelFetch(g_lightClassification, int((((_2972 << 5u) + (_2958 << 9u)) + (_3345 << 2u)) >> 2u)).x;
                    _3355 = _3354 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3355)
                    {
                        frontier_phi_82_pred = _3344;
                        frontier_phi_82_pred_1 = _3343;
                        frontier_phi_82_pred_2 = _3342;
                        frontier_phi_82_pred_3 = _3341;
                        frontier_phi_82_pred_4 = _3340;
                        frontier_phi_82_pred_5 = _3339;
                    }
                    else
                    {
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3840;
                        float _3841;
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3560 = _3339;
                        float _3561 = _3340;
                        float _3562 = _3341;
                        float _3563 = _3342;
                        float _3564 = _3343;
                        float _3565 = _3344;
                        uint _3566 = _3354;
                        uint _3567;
                        vec4 _3592;
                        float _3593;
                        vec4 _3608;
                        vec3 _3620;
                        vec4 _3635;
                        vec4 _3650;
                        float _3696;
                        bool _3697;
                        for (;;)
                        {
                            uint _3577 = ((_3345 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3566));
                            _3567 = (_3566 + 4294967295u) & _3566;
                            uint _3579 = _3577 * 40u;
                            _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            _3593 = _3592.w;
                            uint _3595 = (_3577 * 40u) + 4u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3610 = (_3577 * 40u) + 8u;
                            _3620 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x));
                            uint _3622 = (_3577 * 40u) + 16u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3637 = (_3577 * 40u) + 20u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3652 = (_3577 * 40u) + 24u;
                            vec4 _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            uint _3671 = (_3577 * 40u) + 28u;
                            vec4 _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            _3696 = fma(_2058, _3684.z, fma(_2057, _3684.y, _3684.x * _2056)) + _3684.w;
                            _3697 = !((fma(_2058, _3665.z, fma(_2057, _3665.y, _3665.x * _2056)) + _3665.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3697)
                            {
                                float _3724 = _3592.x - _2056;
                                float _3725 = _3592.y - _2057;
                                float _3726 = _3592.z - _2058;
                                float _3727 = dot(vec3(_3724, _3725, _3726), vec3(_3724, _3725, _3726));
                                float _3730 = inversesqrt(_3727);
                                float _3731 = _3730 * _3724;
                                float _3732 = _3730 * _3725;
                                float _3733 = _3730 * _3726;
                                float _3737 = 1.0 - (_3727 / (_3593 * _3593));
                                float _4948 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3738 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3742 = sqrt(_3727) * _3608.w;
                                float _3744 = 1.39999997615814208984375 / (_3742 + 1.39999997615814208984375);
                                float _3745 = _3744 * _3744;
                                float _3748 = ((1.0 - _3745) * dot(vec3(_3731, _3732, _3733), vec3(_909, _912, _915))) + _3745;
                                float _3751 = _3742 * _3742;
                                float _3755 = (fma(_2058, _3635.z, fma(_2057, _3635.y, _3635.x * _2056)) + _3635.w) / _3696;
                                float _3756 = (fma(_2058, _3650.z, fma(_2057, _3650.y, _3650.x * _2056)) + _3650.w) / _3696;
                                float _3760 = 1.0 - dot(vec2(_3755, _3756), vec2(_3755, _3756));
                                float _4964 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3761 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                                float _3762 = _3761 * (((isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0))) * _3738) / ((_3751 * 0.699999988079071044921875) + 1.0));
                                float _3774 = exp2(log2(1.0 / ((_3751 * 3.5) + 5.0)) * 0.25);
                                float _3775 = 1.0 - _969;
                                float _3782 = sqrt(1.0 - ((1.0 - (_3775 * _3775)) * (1.0 - (_3774 * _3774))));
                                float _3783 = _3782 * _3782;
                                float _3784 = _3783 * _3783;
                                float _3785 = _3731 - _3205;
                                float _3786 = _3732 - _3206;
                                float _3787 = _3733 - _3207;
                                float _3791 = inversesqrt(dot(vec3(_3785, _3786, _3787), vec3(_3785, _3786, _3787)));
                                float _3795 = dot(vec3(_909, _912, _915), vec3((-0.0) - _3205, (-0.0) - _3206, (-0.0) - _3207));
                                float _4975 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3798 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                                float _3799 = dot(vec3(_909, _912, _915), vec3(_3791 * _3785, _3791 * _3786, _3791 * _3787));
                                float _4986 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3802 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                                float _3806 = ((_3802 * _3802) * (_3784 + (-1.0))) + 1.0;
                                float _3807 = _3744 * _3783;
                                float _3808 = _3807 * _3807;
                                float _3814 = ((1.0 - _3808) * dot(vec3(_909, _912, _915), vec3(_3731, _3732, _3733))) + _3808;
                                float _4997 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3815 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3816 = 1.0 - _3783;
                                float _3826 = (0.5 / (((_3815 * ((_3798 * _3816) + _3783)) + 9.9999999392252902907785028219223e-09) + (((_3815 * _3816) + _3783) * _3798))) * _3815;
                                float _5008 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3836 = (_3761 * _3738) * (((_3784 * 3.1415927410125732421875) * (isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0)))) / ((_3806 * _3806) * ((_3751 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3762 * _3608.z;
                                frontier_phi_88_pred_1 = _3762 * _3608.y;
                                frontier_phi_88_pred_2 = _3762 * _3608.x;
                                frontier_phi_88_pred_3 = _3836 * _3620.z;
                                frontier_phi_88_pred_4 = _3836 * _3620.y;
                                frontier_phi_88_pred_5 = _3836 * _3620.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3845 = frontier_phi_88_pred;
                            _3844 = frontier_phi_88_pred_1;
                            _3843 = frontier_phi_88_pred_2;
                            _3842 = frontier_phi_88_pred_3;
                            _3841 = frontier_phi_88_pred_4;
                            _3840 = frontier_phi_88_pred_5;
                            _3550 = _3843 + _3563;
                            _3551 = _3844 + _3564;
                            _3552 = _3845 + _3565;
                            _3547 = _3840 + _3560;
                            _3548 = _3841 + _3561;
                            _3549 = _3842 + _3562;
                            if (_3567 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3560 = _3547;
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3567;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3552;
                        frontier_phi_82_pred_1 = _3551;
                        frontier_phi_82_pred_2 = _3550;
                        frontier_phi_82_pred_3 = _3549;
                        frontier_phi_82_pred_4 = _3548;
                        frontier_phi_82_pred_5 = _3547;
                    }
                    _3190 = frontier_phi_82_pred;
                    _3188 = frontier_phi_82_pred_1;
                    _3186 = frontier_phi_82_pred_2;
                    _3184 = frontier_phi_82_pred_3;
                    _3182 = frontier_phi_82_pred_4;
                    _3180 = frontier_phi_82_pred_5;
                    uint _3346 = _3345 + 1u;
                    if (_3346 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3339 = _3180;
                        _3340 = _3182;
                        _3341 = _3184;
                        _3342 = _3186;
                        _3343 = _3188;
                        _3344 = _3190;
                        _3345 = _3346;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3186;
                frontier_phi_63_64_ladder_1 = _3190;
                frontier_phi_63_64_ladder_2 = _3188;
                frontier_phi_63_64_ladder_3 = _3184;
                frontier_phi_63_64_ladder_4 = _3182;
                frontier_phi_63_64_ladder_5 = _3180;
            }
            else
            {
                frontier_phi_63_64_ladder = _3064;
                frontier_phi_63_64_ladder_1 = _3068;
                frontier_phi_63_64_ladder_2 = _3066;
                frontier_phi_63_64_ladder_3 = _3062;
                frontier_phi_63_64_ladder_4 = _3060;
                frontier_phi_63_64_ladder_5 = _3058;
            }
            _3179 = frontier_phi_63_64_ladder_5;
            _3181 = frontier_phi_63_64_ladder_4;
            _3183 = frontier_phi_63_64_ladder_3;
            _3185 = frontier_phi_63_64_ladder;
            _3187 = frontier_phi_63_64_ladder_2;
            _3189 = frontier_phi_63_64_ladder_1;
        }
        float _3194 = isnan(1.0) ? _953 : (isnan(_953) ? 1.0 : min(_953, 1.0));
        _2991 = (_3194 * _3185) + _2522;
        _2993 = (_3194 * _3187) + _2524;
        _2995 = (_3194 * _3189) + _2526;
        _2997 = ((_3179 * 0.039999999105930328369140625) * _3194) + _2845;
        _2999 = ((_3181 * 0.039999999105930328369140625) * _3194) + _2847;
        _3001 = ((_3183 * 0.039999999105930328369140625) * _3194) + _2849;
    }
    else
    {
        _2991 = _2522;
        _2993 = _2524;
        _2995 = _2526;
        _2997 = _2845;
        _2999 = _2847;
        _3001 = _2849;
    }
    float _5024 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _5035 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _5046 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _3018 = ((isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_2991 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _953))) + ((_2997 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1788)) * cbPerFrame._m0[3u].x);
    float _3019 = ((isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0))) * (_2993 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _953))) + ((_2999 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1788)) * cbPerFrame._m0[3u].x);
    float _3020 = ((isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0))) * (_2995 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _953))) + ((_3001 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1788)) * cbPerFrame._m0[3u].x);
    uint _3021 = _281 + 6u;
    float _3029 = _890 / cbSceneParam._m0[86u].x;
    float _3030 = _891 / cbSceneParam._m0[86u].y;
    vec4 _3044 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3029, _3030, (log2((isnan(cbSceneParam._m0[77u].w) ? _812 : (isnan(_812) ? cbSceneParam._m0[77u].w : min(_812, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3046 = _3044.x;
    float _3047 = _3044.y;
    float _3048 = _3044.z;
    float _3049 = _3044.w;
    float _3121;
    float _3123;
    float _3125;
    float _3127;
    if (_812 > cbSceneParam._m0[78u].w)
    {
        float _3083 = isnan(_812) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _812 : min(cbSceneParam._m0[80u].w, _812));
        float _3084 = _3083 / _812;
        float _3095 = _3084 * _863;
        float _3096 = _864 * _3084;
        float _3097 = (-0.0) - _3096;
        float _3099 = _3084 * _865;
        float _3101 = (cbSceneParam._m0[77u].w * _3097) / _3083;
        float _3102 = _3101 + cbSceneParam._m0[79u].w;
        float _3103 = cbSceneParam._m0[79u].w - _3096;
        float _3109 = sqrt(((_3095 * _3095) + (_3096 * _3096)) + (_3099 * _3099));
        float _3112 = (1.0 - (cbSceneParam._m0[77u].w / _3083)) * _3109;
        float _3117 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3119 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3296;
        if (abs((_3097 - _3101) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3296 = ((((_3102 > 0.0) ? exp2(_3117 * _3102) : (2.0 - exp2(_3119 * _3102))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3112;
        }
        else
        {
            float _3240 = 1.0 / cbSceneParam._m0[80u].x;
            float _3241 = isnan(_3103) ? _3102 : (isnan(_3102) ? _3103 : max(_3102, _3103));
            float _3242 = isnan(_3103) ? _3102 : (isnan(_3102) ? _3103 : min(_3102, _3103));
            float _3251 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : min(_3241, 0.0));
            float _3252 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : min(_3242, 0.0));
            _3296 = ((abs(_3109 / _3097) * cbSceneParam._m0[80u].y) * ((((_3251 - _3252) * 2.0) - ((exp2(_3117 * (isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0)))) - exp2(_3117 * (isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))))) * _3240)) - ((exp2(_3119 * _3251) - exp2(_3119 * _3252)) * _3240))) + (_3112 * cbSceneParam._m0[80u].z);
        }
        vec4 _3298 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3029, _3030, 1.0), 0.0);
        float _3307 = exp2((_3296 * (-1.44269502162933349609375)) * (1.0 - _3298.w));
        float _3308 = log2(_3307);
        float _3324 = log2(_3049);
        _3121 = (exp2(_3324 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].x)) * _3298.x) / cbSceneParam._m0[78u].x)) + _3046;
        _3123 = (exp2(_3324 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].y)) * _3298.y) / cbSceneParam._m0[78u].y)) + _3047;
        _3125 = (exp2(_3324 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].z)) * _3298.z) / cbSceneParam._m0[78u].z)) + _3048;
        _3127 = _3307 * _3049;
    }
    else
    {
        _3121 = _3046;
        _3123 = _3047;
        _3125 = _3048;
        _3127 = _3049;
    }
    bool _3334;
    vec4 _3137;
    vec4 _3159;
    float _3161;
    float _3165;
    float _3166;
    float _3167;
    float _3168;
    bool _3178;
    for (;;)
    {
        _3137 = cbMatDynParam._m0[0u];
        float _3139 = roundEven(_3137.y);
        bool _3140 = _3139 == 3.0;
        float _3141 = log2(_3127);
        float _3148 = exp2(_3141 * cbSceneParam._m0[78u].x) * _3018;
        float _3149 = exp2(_3141 * cbSceneParam._m0[78u].y) * _3019;
        float _3150 = exp2(_3141 * cbSceneParam._m0[78u].z) * _3020;
        float _3157 = _879 + (-0.5);
        _3159 = cbMtdParam._m0[1u];
        _3161 = _3159.y * _3157;
        float _3164 = (_3139 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3165 = _3164 * (_3140 ? _3148 : (_3148 + (cbSceneParam._m0[72u].w * _3121)));
        _3166 = _3164 * (_3140 ? _3149 : (_3149 + (cbSceneParam._m0[72u].w * _3123)));
        _3167 = _3164 * (_3140 ? _3150 : (_3150 + (cbSceneParam._m0[72u].w * _3125)));
        _3168 = _3157 * 0.999000012874603271484375;
        _3178 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3178)
        {
            if ((cbInstanceData._m0[_281 + 7u].x + _3168) < 0.5)
            {
                _3334 = true;
                break;
            }
        }
        uint _3275 = _928 + uint(_3137.w);
        if ((cbInstanceData._m0[_3275].w < 1.0) && ((cbInstanceData._m0[_3275].w + _3168) < 0.5))
        {
            _3334 = true;
            break;
        }
        if ((_3161 + 1.0) < _3159.x)
        {
            _3334 = true;
            break;
        }
        _3334 = false;
        break;
    }
    float _3538;
    if (_3334)
    {
        discard_state = true;
        _3538 = 0.0;
    }
    else
    {
        _3538 = cbInstanceData._m0[_3021].w;
    }
    SV_Target.x = _3165;
    SV_Target.y = _3166;
    SV_Target.z = _3167;
    SV_Target.w = _3538;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3021].w;
    discard_exit();
}


