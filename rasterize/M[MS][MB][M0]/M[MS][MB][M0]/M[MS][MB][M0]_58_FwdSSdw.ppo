#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1175;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _224 = _223 * _215;
    float _225 = _223 * _216;
    float _226 = _223 * _217;
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = _237 * TANGENT.x;
    float _239 = _237 * TANGENT.y;
    float _240 = _237 * TANGENT.z;
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _309 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _355 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _359 = _355.z;
    float _363 = (_355.x * 2.0) + (-1.0);
    float _364 = (_355.y * 2.0) + (-1.0);
    float _365 = dot(vec2(_363, _364), vec2(_363, _364));
    float _3505 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _371 = sqrt(1.0 - (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))));
    float _376 = _363 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_329.x * 2.0) + (-1.0)));
    float _377 = _364 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_329.y * 2.0) + (-1.0)));
    float _380 = fma(_371, _231, fma(_377, _238, _376 * _224));
    float _383 = fma(_371, _232, fma(_377, _239, _376 * _225));
    float _386 = fma(_371, _233, fma(_377, _240, _376 * _226));
    float _390 = inversesqrt(dot(vec3(_380, _383, _386), vec3(_380, _383, _386)));
    vec4 _426 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _428 = _426.x;
    float _429 = 1.0 - _428;
    float _436 = ((_428 - _429) * cbMtdParam._m0[24u].z) + _429;
    float _438 = (cbMtdParam._m0[19u].x + dot(vec4(_390 * _380, _390 * _383, _390 * _386, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_436 * cbMtdParam._m0[21u].z);
    float _3516 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _441 = (-0.0) - cbMtdParam._m0[24u].y;
    float _443 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _443 : (isnan(_443) ? 1.0 : min(_443, 1.0));
    float _451 = _439 - ((_439 * TEXCOORD_8.x) * _444);
    float _452 = _439 - ((_439 * TEXCOORD_8.y) * _444);
    float _453 = _439 - ((_439 * TEXCOORD_8.z) * _444);
    float _460 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _464 = ((isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : min(_460, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _472 = (_464 - (((_436 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _464))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3547 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _477 = ((_451 * ((_309.x * cbMtdParam._m0[18u].x) - _288)) * _473) + _288;
    float _478 = ((_452 * ((_309.y * cbMtdParam._m0[18u].y) - _289)) * _473) + _289;
    float _479 = ((_453 * ((_309.z * cbMtdParam._m0[18u].z) - _290)) * _473) + _290;
    vec4 _491 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _493 = _491.x;
    float _494 = 1.0 - _493;
    float _523 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_493 - _494) * cbMtdParam._m0[24u].w) + _494) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3558 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _524 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _532 = ((((cbMtdParam._m0[10u].x - _477) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _524) + _477;
    float _533 = ((((cbMtdParam._m0[10u].y - _478) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _524) + _478;
    float _534 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _479)) * _524) + _479;
    float _539 = (((_329.z - _359) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _359;
    vec4 _553 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _560 = (_553.x * 2.0) + (-1.0);
    float _561 = (_553.y * 2.0) + (-1.0);
    float _562 = dot(vec2(_560, _561), vec2(_560, _561));
    float _3569 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _571 = (((_553.z - _539) * _451) * _473) + _539;
    float _574 = ((cbMtdParam._m0[23u].y - _571) * _524) + _571;
    vec4 _593 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _599 = (_593.x * 2.0) + (-1.0);
    float _600 = (_593.y * 2.0) + (-1.0);
    float _601 = dot(vec2(_599, _600), vec2(_599, _600));
    float _3580 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _621 = (((cbMtdParam._m0[21u].x * _376) + ((_560 - _376) * _451)) * _473) + _376;
    float _622 = (((cbMtdParam._m0[21u].x * _377) + ((_561 - _377) * _452)) * _473) + _377;
    float _623 = (((sqrt(1.0 - (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) - _371) * _453) * _473) + _371;
    float _634 = (((_599 - _621) + (_621 * cbMtdParam._m0[22u].z)) * _524) + _621;
    float _635 = (((_600 - _622) + (_622 * cbMtdParam._m0[22u].z)) * _524) + _622;
    float _636 = ((sqrt(1.0 - (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) - _623) * _524) + _623;
    float _638 = cbMtdParam._m0[22u].x + _355.w;
    float _641 = fma(_636, _231, fma(_635, _238, _634 * _224));
    float _644 = fma(_636, _232, fma(_635, _239, _634 * _225));
    float _647 = fma(_636, _233, fma(_635, _240, _634 * _226));
    float _651 = inversesqrt(dot(vec3(_641, _644, _647), vec3(_641, _644, _647)));
    float _652 = _651 * _641;
    float _653 = _651 * _644;
    float _654 = _651 * _647;
    float _3591 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _655 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _3613 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _3624 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _3635 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _673 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _723 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _713);
    float _724 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _713);
    float _725 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _713);
    float _729 = inversesqrt(dot(vec3(_723, _724, _725), vec3(_723, _724, _725)));
    float _730 = _723 * _729;
    float _731 = _724 * _729;
    float _732 = _725 * _729;
    float _738 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _739 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _760 = fma(_654, cbSceneParam._m0[5u].z, fma(_653, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _652));
    float _763 = fma(_654, cbSceneParam._m0[6u].z, fma(_653, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _652));
    float _766 = fma(_654, cbSceneParam._m0[7u].z, fma(_653, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _652));
    uint _780 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _786 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) * cbInstanceData._m0[_780].x;
    float _787 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) * cbInstanceData._m0[_780].y;
    float _788 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) * cbInstanceData._m0[_780].z;
    float _3646 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _791 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    vec4 _800 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _738, cbSceneParam._m0[86u].y * _739));
    float _804 = ((isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * TEXCOORD_5.w) * _800.x;
    float _805 = dot(vec3(_652, _653, _654), vec3(_730, _731, _732));
    float _808 = _805 * 2.0;
    float _812 = (_808 * _652) - _730;
    float _813 = (_808 * _653) - _731;
    float _814 = (_808 * _654) - _732;
    float _818 = abs(dot(vec3(_730, _731, _732), vec3(_652, _653, _654)));
    float _3679 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _820 = sqrt(_655);
    float _833 = exp2((_820 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_820 * 3.0));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1174;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _899 = fma(_873, cbModelParam._m0[26u].z, fma(_869, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _865));
        float _903 = fma(_873, cbModelParam._m0[27u].z, fma(_869, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _865));
        float _907 = fma(_873, cbModelParam._m0[28u].z, fma(_869, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _865));
        float _932 = _865 + _652;
        float _933 = _869 + _653;
        float _934 = _873 + _654;
        float _944 = fma(_934, cbModelParam._m0[26u].z, fma(_933, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932)) - _899;
        float _945 = fma(_934, cbModelParam._m0[27u].z, fma(_933, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932)) - _903;
        float _946 = fma(_934, cbModelParam._m0[28u].z, fma(_933, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932)) - _907;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_899 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_903 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[34u].z) + ((((((_907 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1002 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_968.x + (-0.5));
        float _1004 = _1002 * (_968.y + (-0.5));
        float _1005 = _1002 * (_968.z + (-0.5));
        float _1012 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_975.x + (-0.5));
        float _1014 = _1012 * (_975.y + (-0.5));
        float _1015 = _1012 * (_975.z + (-0.5));
        float _1022 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_982.x + (-0.5));
        float _1024 = _1022 * (_982.y + (-0.5));
        float _1025 = _1022 * (_982.z + (-0.5));
        float _1032 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_989.x + (-0.5));
        float _1034 = _1032 * (_989.y + (-0.5));
        float _1035 = _1032 * (_989.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1056 = (dot(vec3(_652, _653, _654), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1066 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3727 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1068 + 1.0))) + _1073) * _1036;
        float _1083 = _1004 * 0.5;
        float _1084 = _1014 * 0.5;
        float _1085 = _1024 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_652, _653, _654), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3760 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1110 + 1.0))) + _1115) * _1037;
        float _1125 = _1005 * 0.5;
        float _1126 = _1015 * 0.5;
        float _1127 = _1025 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_652, _653, _654), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3793 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1152 + 1.0))) + _1157) * _1038;
        _1174 = _1005;
        _1176 = _1004;
        _1177 = _1003;
        _1178 = _1015;
        _1179 = _1014;
        _1180 = _1013;
        _1181 = _1025;
        _1182 = _1024;
        _1183 = _1023;
        _1184 = _1038;
        _1185 = _1037;
        _1186 = _1036;
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _1175;
        _1176 = _1175;
        _1177 = _1175;
        _1178 = _1175;
        _1179 = _1175;
        _1180 = _1175;
        _1181 = _1175;
        _1182 = _1175;
        _1183 = _1175;
        _1184 = _1175;
        _1185 = _1175;
        _1186 = _1175;
        _1187 = 0.0;
        _1188 = 0.0;
        _1189 = 0.0;
    }
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1214 = fma(_873, cbModelParam._m0[30u].z, fma(_869, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _865));
        float _1218 = fma(_873, cbModelParam._m0[31u].z, fma(_869, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _865));
        float _1222 = fma(_873, cbModelParam._m0[32u].z, fma(_869, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _865));
        float _1245 = _865 + _652;
        float _1246 = _869 + _653;
        float _1247 = _873 + _654;
        float _1257 = fma(_1247, cbModelParam._m0[30u].z, fma(_1246, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1245)) - _1214;
        float _1258 = fma(_1247, cbModelParam._m0[31u].z, fma(_1246, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1245)) - _1218;
        float _1259 = fma(_1247, cbModelParam._m0[32u].z, fma(_1246, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1245)) - _1222;
        float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
        float _1276 = ((_1263 * _1257) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1214 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1263 * _1258) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1218 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1263 * _1259) / cbModelParam._m0[35u].z) + ((((((_1222 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        float _1313 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1280.x + (-0.5));
        float _1315 = _1313 * (_1280.y + (-0.5));
        float _1316 = _1313 * (_1280.z + (-0.5));
        float _1323 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1287.x + (-0.5));
        float _1325 = _1323 * (_1287.y + (-0.5));
        float _1326 = _1323 * (_1287.z + (-0.5));
        float _1333 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1294.x + (-0.5));
        float _1335 = _1333 * (_1294.y + (-0.5));
        float _1336 = _1333 * (_1294.z + (-0.5));
        float _1343 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1301.x + (-0.5));
        float _1345 = _1343 * (_1301.y + (-0.5));
        float _1346 = _1343 * (_1301.z + (-0.5));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = _1314 * 0.5;
        float _1351 = _1324 * 0.5;
        float _1352 = _1334 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_652, _653, _654), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3856 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1377 + 1.0))) + _1382) * _1347;
        float _1392 = _1315 * 0.5;
        float _1393 = _1325 * 0.5;
        float _1394 = _1335 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_652, _653, _654), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3889 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1419 + 1.0))) + _1424) * _1348;
        float _1434 = _1316 * 0.5;
        float _1435 = _1326 * 0.5;
        float _1436 = _1336 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_652, _653, _654), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _3922 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1461 + 1.0))) + _1466) * _1349;
        _1483 = _1316;
        _1484 = _1315;
        _1485 = _1314;
        _1486 = _1326;
        _1487 = _1325;
        _1488 = _1324;
        _1489 = _1336;
        _1490 = _1335;
        _1491 = _1334;
        _1492 = _1349;
        _1493 = _1348;
        _1494 = _1347;
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1175;
        _1484 = _1175;
        _1485 = _1175;
        _1486 = _1175;
        _1487 = _1175;
        _1488 = _1175;
        _1489 = _1175;
        _1490 = _1175;
        _1491 = _1175;
        _1492 = _1175;
        _1493 = _1175;
        _1494 = _1175;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1187)) + _1187;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1188)) + _1188;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1189)) + _1189;
    float _1530 = fma(_1509, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1533 = fma(_1509, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1536 = fma(_1509, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1507));
    float _1551 = _812 * 0.5;
    float _1552 = _813 * 0.5;
    float _1553 = _814 * 0.5;
    float _1554 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1557 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1560 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1594;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1567 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1174, _1178, _1181, _1184));
        float _1571 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1575 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1582 = dot(vec4(cbModelParam._m0[39u]), vec4(_1551, _1552, _1553, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1582) ? 0.0 : (isnan(0.0) ? _1582 : max(0.0, _1582))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1605;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1596 = dot(vec4(cbModelParam._m0[40u]), vec4(_1551, _1552, _1553, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1596) ? 0.0 : (isnan(0.0) ? _1596 : max(0.0, _1596))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1609 = (_1605 * cbModelParam._m0[1u].x) + (_1594 * (1.0 - cbModelParam._m0[1u].x));
    float _1619 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _655);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1619 : min(cbModelParam._m0[25u].z, _1619));
    float _1700;
    float _1702;
    float _1704;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1667 = fma(_873, cbModelParam._m0[13u].z, fma(_869, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _865)) + cbModelParam._m0[13u].w;
        float _1671 = fma(_873, cbModelParam._m0[14u].z, fma(_869, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _865)) + cbModelParam._m0[14u].w;
        float _1675 = fma(_873, cbModelParam._m0[15u].z, fma(_869, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _865)) + cbModelParam._m0[15u].w;
        float _1678 = fma(_814, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _812));
        float _1681 = fma(_814, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _812));
        float _1684 = fma(_814, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _812));
        float _1712;
        if (_1678 > 0.0)
        {
            _1712 = abs((1.0 - _1667) / _1678);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1667 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1712 = frontier_phi_14_12_ladder;
        }
        float _1935;
        if (_1681 > 0.0)
        {
            _1935 = abs((1.0 - _1671) / _1681);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1671 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1935 = frontier_phi_23_19_ladder;
        }
        float _2181;
        if (_1684 > 0.0)
        {
            _2181 = abs((1.0 - _1675) / _1684);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1675 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2181 = frontier_phi_35_30_ladder;
        }
        float _2183 = isnan(_1935) ? _1712 : (isnan(_1712) ? _1935 : min(_1712, _1935));
        float _2184 = isnan(_2181) ? _2183 : (isnan(_2183) ? _2181 : min(_2183, _2181));
        float _2188 = (_2184 * _1678) + _1667;
        float _2189 = (_2184 * _1681) + _1671;
        float _2190 = (_2184 * _1684) + _1675;
        float _2191 = _2184 * 9.9999997473787516355514526367188e-05;
        float _2193 = (-1.0) - _2191;
        float _2195 = _2191 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2190 > _2195) || ((_2190 < _2193) || ((_2189 > _2195) || ((_2189 < _2193) || ((_2188 < _2193) || (_2188 > _2195))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2314 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2190, cbModelParam._m0[9u].z, fma(_2189, cbModelParam._m0[9u].y, _2188 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2190, cbModelParam._m0[10u].z, fma(_2189, cbModelParam._m0[10u].y, _2188 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2190, cbModelParam._m0[11u].z, fma(_2189, cbModelParam._m0[11u].y, _2188 * cbModelParam._m0[11u].x))), _1620);
            frontier_phi_13_35_ladder = _2314.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2314.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2314.x * cbModelParam._m0[1u].y;
        }
        _1700 = frontier_phi_13_35_ladder_2;
        _1702 = frontier_phi_13_35_ladder_1;
        _1704 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1688 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_812, _813, _814), _1620);
        _1700 = _1688.x * cbModelParam._m0[1u].y;
        _1702 = _1688.y * cbModelParam._m0[1u].y;
        _1704 = _1688.z * cbModelParam._m0[1u].y;
    }
    float _1708 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _655);
    float _1709 = isnan(_1708) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1708 : min(cbModelParam._m0[25u].w, _1708));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1762 = fma(_873, cbModelParam._m0[21u].z, fma(_869, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _865)) + cbModelParam._m0[21u].w;
        float _1766 = fma(_873, cbModelParam._m0[22u].z, fma(_869, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _865)) + cbModelParam._m0[22u].w;
        float _1770 = fma(_873, cbModelParam._m0[23u].z, fma(_869, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _865)) + cbModelParam._m0[23u].w;
        float _1773 = fma(_814, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _812));
        float _1776 = fma(_814, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _812));
        float _1779 = fma(_814, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _812));
        float _1940;
        if (_1773 > 0.0)
        {
            _1940 = abs((1.0 - _1762) / _1773);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1762 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1940 = frontier_phi_25_21_ladder;
        }
        float _2208;
        if (_1776 > 0.0)
        {
            _2208 = abs((1.0 - _1766) / _1776);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1766 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2208 = frontier_phi_37_32_ladder;
        }
        float _2413;
        if (_1779 > 0.0)
        {
            _2413 = abs((1.0 - _1770) / _1779);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1770 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2413 = frontier_phi_46_43_ladder;
        }
        float _2415 = isnan(_2208) ? _1940 : (isnan(_1940) ? _2208 : min(_1940, _2208));
        float _2416 = isnan(_2413) ? _2415 : (isnan(_2415) ? _2413 : min(_2415, _2413));
        float _2420 = (_2416 * _1773) + _1762;
        float _2421 = (_2416 * _1776) + _1766;
        float _2422 = (_2416 * _1779) + _1770;
        float _2423 = _2416 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2423;
        float _2426 = _2423 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2422 > _2426) || ((_2422 < _2424) || ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 < _2424) || (_2420 > _2426))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2621 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2422, cbModelParam._m0[17u].z, fma(_2421, cbModelParam._m0[17u].y, _2420 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2422, cbModelParam._m0[18u].z, fma(_2421, cbModelParam._m0[18u].y, _2420 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2422, cbModelParam._m0[19u].z, fma(_2421, cbModelParam._m0[19u].y, _2420 * cbModelParam._m0[19u].x))), _1709);
            frontier_phi_22_46_ladder = _2621.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2621.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2621.x * cbModelParam._m0[1u].z;
        }
        _1798 = frontier_phi_22_46_ladder_2;
        _1800 = frontier_phi_22_46_ladder_1;
        _1802 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1782 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_812, _813, _814), _1709);
        _1798 = _1782.x * cbModelParam._m0[1u].z;
        _1800 = _1782.y * cbModelParam._m0[1u].z;
        _1802 = _1782.z * cbModelParam._m0[1u].z;
    }
    float _1814 = ((((1.0 - _833) * ((_820 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_833 * _820)) * _804;
    float _1815 = _1814 * ((cbModelParam._m0[1u].w * (_1798 - _1700)) + _1700);
    float _1816 = _1814 * ((cbModelParam._m0[1u].w * (_1800 - _1702)) + _1702);
    float _1817 = _1814 * ((cbModelParam._m0[1u].w * (_1802 - _1704)) + _1704);
    float _1820 = fma(_1817, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1823 = fma(_1817, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1826 = fma(_1817, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, _1815 * cbSceneParam._m0[91u].x));
    vec4 _1834 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_738, _739));
    float _1836 = _1834.w;
    float _1848 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1836);
    float _1849 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1836);
    float _1850 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1836);
    uvec4 _1854 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1856 = _1854.x * 14u;
    uint _1857 = _1856 + 13u;
    float _1864 = _804 + (-1.0);
    float _1869 = (cbLight._m0[_1857].x * _1864) + 1.0;
    float _1870 = (cbLight._m0[_1857].y * _1864) + 1.0;
    float _1871 = (cbLight._m0[_1857].z * _1864) + 1.0;
    float _1872 = (cbLight._m0[_1857].w * _1864) + 1.0;
    uint _1873 = _1856 + 5u;
    float _1879 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
    uint _1883 = _1856 + 4u;
    float _1893 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
    uint _1897 = _1856 | 1u;
    float _1908 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_652, _653, _654));
    float _1911 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_652, _653, _654));
    float _4058 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _4069 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1916 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.3183098733425140380859375;
    float _1918 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * 0.3183098733425140380859375;
    float _1925 = ((cbLight._m0[_1873].x * _1879) * _1918) + (((cbLight._m0[_1883].x * _1848) * _1893) * _1916);
    float _1926 = ((_1879 * cbLight._m0[_1873].y) * _1918) + (((cbLight._m0[_1883].y * _1849) * _1893) * _1916);
    float _1927 = ((_1879 * cbLight._m0[_1873].z) * _1918) + (((cbLight._m0[_1883].z * _1850) * _1893) * _1916);
    uvec4 _1932 = floatBitsToUint(cbLight._m0[_1856 + 12u]);
    bool _1934 = _1932.x == 0u;
    float _1945;
    float _1947;
    float _1949;
    if (_1934)
    {
        _1945 = _1925;
        _1947 = _1926;
        _1949 = _1927;
    }
    else
    {
        uint _1953 = _1856 + 6u;
        float _1969 = (dot(vec3(cbLight._m0[_1856 + 2u].xyz), vec3(_652, _653, _654)) * 0.5) + 0.5;
        float _1970 = _1969 * _1969;
        float _4080 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1972 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _1945 = (((cbLight._m0[_1953].x * 0.3183098733425140380859375) * _1971) * _1972) + _1925;
        _1947 = (((cbLight._m0[_1953].y * 0.3183098733425140380859375) * _1971) * _1972) + _1926;
        _1949 = (((cbLight._m0[_1953].z * 0.3183098733425140380859375) * _1971) * _1972) + _1927;
    }
    bool _1952 = _1932.y == 0u;
    float _1990;
    float _1992;
    float _1994;
    if (_1952)
    {
        _1990 = _1945;
        _1992 = _1947;
        _1994 = _1949;
    }
    else
    {
        uint _2152 = _1856 + 7u;
        float _2168 = (dot(vec3(cbLight._m0[_1856 + 3u].xyz), vec3(_652, _653, _654)) * 0.5) + 0.5;
        float _2169 = _2168 * _2168;
        float _4096 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2170 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _2171 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _1990 = (((cbLight._m0[_2152].x * 0.3183098733425140380859375) * _2170) * _2171) + _1945;
        _1992 = (((cbLight._m0[_2152].y * 0.3183098733425140380859375) * _2170) * _2171) + _1947;
        _1994 = (((cbLight._m0[_2152].z * 0.3183098733425140380859375) * _2170) * _2171) + _1949;
    }
    uint _1997 = _1856 + 8u;
    float _2010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1856].w)) * _655) * 0.949999988079071044921875);
    float _2011 = _2010 * _2010;
    float _2012 = cbLight._m0[_1856].x + _730;
    float _2013 = cbLight._m0[_1856].y + _731;
    float _2014 = cbLight._m0[_1856].z + _732;
    float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
    float _2019 = _2018 * _2012;
    float _2020 = _2018 * _2013;
    float _2021 = _2018 * _2014;
    float _2022 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_1856].xyz));
    float _4112 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _4123 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _2026 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _2027 = dot(vec3(_652, _653, _654), vec3(_2019, _2020, _2021));
    float _4134 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _2031 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_2019, _2020, _2021));
    float _4145 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2035 = _2011 * _2011;
    float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
    float _2050 = (exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2051 = 1.0 - _2011;
    float _2062 = (0.5 / (((_2026 * ((_2025 * _2051) + _2011)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2051) + _2011) * _2025))) * _2025;
    float _4156 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2064 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
    uint _2078 = _1856 + 9u;
    float _2089 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1897].w)) * _655) * 0.949999988079071044921875);
    float _2090 = _2089 * _2089;
    float _2091 = cbLight._m0[_1897].x + _730;
    float _2092 = cbLight._m0[_1897].y + _731;
    float _2093 = cbLight._m0[_1897].z + _732;
    float _2097 = inversesqrt(dot(vec3(_2091, _2092, _2093), vec3(_2091, _2092, _2093)));
    float _2098 = _2097 * _2091;
    float _2099 = _2097 * _2092;
    float _2100 = _2097 * _2093;
    float _2101 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_1897].xyz));
    float _4167 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2105 = dot(vec3(_652, _653, _654), vec3(_2098, _2099, _2100));
    float _4178 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2108 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _2109 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_2098, _2099, _2100));
    float _4189 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2113 = _2090 * _2090;
    float _2117 = ((_2108 * _2108) * (_2113 + (-1.0))) + 1.0;
    float _2126 = (exp2(log2(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2127 = 1.0 - _2090;
    float _2137 = (0.5 / (((_2026 * ((_2104 * _2127) + _2090)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2127) + _2090) * _2104))) * _2104;
    float _4200 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2139 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2113 / ((_2117 * _2117) * 3.141590118408203125));
    float _2149 = (((_2126 * cbLight._m0[_2078].x) * _2139) * _1879) + ((((cbLight._m0[_1997].x * _1848) * _2050) * _2064) * _1893);
    float _2150 = (((_2126 * cbLight._m0[_2078].y) * _2139) * _1879) + ((((cbLight._m0[_1997].y * _1849) * _2050) * _2064) * _1893);
    float _2151 = (((_2126 * cbLight._m0[_2078].z) * _2139) * _1879) + ((((cbLight._m0[_1997].z * _1850) * _2050) * _2064) * _1893);
    float _2213;
    float _2215;
    float _2217;
    if (_1934)
    {
        _2213 = _2149;
        _2215 = _2150;
        _2217 = _2151;
    }
    else
    {
        uint _2219 = _1856 + 2u;
        uint _2223 = _1856 + 10u;
        float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2219].w)) * _655) * 0.949999988079071044921875);
        float _2238 = _2237 * _2237;
        float _2239 = cbLight._m0[_2219].x + _730;
        float _2240 = cbLight._m0[_2219].y + _731;
        float _2241 = cbLight._m0[_2219].z + _732;
        float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
        float _2246 = _2245 * _2239;
        float _2247 = _2245 * _2240;
        float _2248 = _2245 * _2241;
        float _2249 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2219].xyz));
        float _4211 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2252 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2253 = dot(vec3(_652, _653, _654), vec3(_2246, _2247, _2248));
        float _4222 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2256 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2257 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_2246, _2247, _2248));
        float _4233 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2261 = _2238 * _2238;
        float _2265 = ((_2256 * _2256) * (_2261 + (-1.0))) + 1.0;
        float _2274 = (exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2275 = 1.0 - _2238;
        float _2285 = (0.5 / (((_2026 * ((_2252 * _2275) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2275) + _2238) * _2252))) * _2252;
        float _4244 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2287 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2261 / ((_2265 * _2265) * 3.141590118408203125));
        float _2288 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _2213 = (((_2274 * cbLight._m0[_2223].x) * _2287) * _2288) + _2149;
        _2215 = (((_2274 * cbLight._m0[_2223].y) * _2287) * _2288) + _2150;
        _2217 = (((_2274 * cbLight._m0[_2223].z) * _2287) * _2288) + _2151;
    }
    float _2323;
    float _2325;
    float _2327;
    if (_1952)
    {
        _2323 = _2213;
        _2325 = _2215;
        _2327 = _2217;
    }
    else
    {
        uint _2334 = _1856 + 3u;
        uint _2338 = _1856 + 11u;
        float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2334].w)) * _655) * 0.949999988079071044921875);
        float _2353 = _2352 * _2352;
        float _2354 = cbLight._m0[_2334].x + _730;
        float _2355 = cbLight._m0[_2334].y + _731;
        float _2356 = cbLight._m0[_2334].z + _732;
        float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
        float _2361 = _2360 * _2354;
        float _2362 = _2360 * _2355;
        float _2363 = _2360 * _2356;
        float _2364 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2334].xyz));
        float _4260 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2368 = dot(vec3(_652, _653, _654), vec3(_2361, _2362, _2363));
        float _4271 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2371 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2372 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_2361, _2362, _2363));
        float _4282 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2376 = _2353 * _2353;
        float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
        float _2389 = (exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2390 = 1.0 - _2353;
        float _2400 = (0.5 / (((_2026 * ((_2367 * _2390) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2390) + _2353) * _2367))) * _2367;
        float _4293 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2402 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
        float _2403 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _2323 = (((_2389 * cbLight._m0[_2338].x) * _2402) * _2403) + _2213;
        _2325 = (((_2389 * cbLight._m0[_2338].y) * _2402) * _2403) + _2215;
        _2327 = (((_2389 * cbLight._m0[_2338].z) * _2402) * _2403) + _2217;
    }
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    if (_1854.y == 0u)
    {
        float _2478 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2479 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2478;
        float _2480 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2478;
        float _2481 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2478;
        uvec4 _2493 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2494 = _2493.x;
        uint _2505 = uint((float(_2493.y) * floor(float(uint(cbSceneParam._m0[85u].y * _739) / _2494))) + floor(float(uint(cbSceneParam._m0[85u].x * _738) / _2494)));
        float _2515 = (log2(_2481 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2516 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        uint _2519 = uint(isnan(14.0) ? _2516 : (isnan(_2516) ? 14.0 : min(_2516, 14.0)));
        uvec4 _2524 = texelFetch(g_lightClusterGridBuffer, int(((_2519 << 2u) + (_2505 << 6u)) >> 2u));
        uint _2525 = _2524.x;
        uint _2526 = _2493.z;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        if (((((1u << ((_2526 >> 4u) & 15u)) + 4294967295u) & _2525) == 0u) || ((_2526 & 240u) == 0u))
        {
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
        }
        else
        {
            float _2627;
            float _2629;
            float _2631;
            float _2633;
            float _2635;
            float _2637;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            uint _2776 = 0u;
            uint _2785;
            bool _2786;
            for (;;)
            {
                _2785 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2776 << 2u)) >> 2u)).x;
                _2786 = _2785 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2786)
                {
                    frontier_phi_61_pred = _2770;
                    frontier_phi_61_pred_1 = _2775;
                    frontier_phi_61_pred_2 = _2774;
                    frontier_phi_61_pred_3 = _2773;
                    frontier_phi_61_pred_4 = _2772;
                    frontier_phi_61_pred_5 = _2771;
                }
                else
                {
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    uint _2900;
                    _2894 = _2770;
                    _2895 = _2771;
                    _2896 = _2772;
                    _2897 = _2773;
                    _2898 = _2774;
                    _2899 = _2775;
                    _2900 = _2785;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    for (;;)
                    {
                        uint _2904 = uint(findLSB(_2900)) + (_2776 << 5u);
                        uint _2901 = (_2900 + 4294967295u) & _2900;
                        uint _2906 = _2904 * 48u;
                        vec4 _2920 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2906)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 3u)).x));
                        uint _2926 = (_2904 * 48u) + 4u;
                        vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 3u)).x));
                        uint _2945 = (_2904 * 48u) + 8u;
                        vec3 _2956 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x));
                        float _2960 = _2920.x - _2479;
                        float _2961 = _2920.y - _2480;
                        float _2962 = _2920.z - _2481;
                        float _2963 = dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962));
                        float _2966 = inversesqrt(_2963);
                        float _2967 = _2966 * _2960;
                        float _2968 = _2966 * _2961;
                        float _2969 = _2966 * _2962;
                        float _2970 = dot(vec3(_760, _763, _766), vec3(_2967, _2968, _2969));
                        float _2975 = 1.0 - (_2963 * _2920.w);
                        float _4319 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2976 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _2977 = sqrt(_2963) * _2939.w;
                        float _2980 = 1.39999997615814208984375 / (_2977 + 1.39999997615814208984375);
                        float _2981 = _2980 * _2980;
                        float _2984 = ((1.0 - _2981) * _2970) + _2981;
                        float _2987 = _2977 * _2977;
                        float _2991 = ((isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0))) * _2976) / ((_2987 * 0.699999988079071044921875) + 1.0);
                        float _2995 = (-0.0) - _2479;
                        float _2996 = (-0.0) - _2480;
                        float _2997 = (-0.0) - _2481;
                        float _3001 = inversesqrt(dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997)));
                        float _3002 = _3001 * _2995;
                        float _3003 = _3001 * _2996;
                        float _3004 = _3001 * _2997;
                        float _3012 = exp2(log2(1.0 / ((_2987 * 3.5) + 5.0)) * 0.25);
                        float _3013 = 1.0 - _820;
                        float _3020 = sqrt(1.0 - ((1.0 - (_3013 * _3013)) * (1.0 - (_3012 * _3012))));
                        float _3021 = _3020 * _3020;
                        float _3022 = _3021 * _3021;
                        float _3023 = _3002 + _2967;
                        float _3024 = _3003 + _2968;
                        float _3025 = _3004 + _2969;
                        float _3029 = inversesqrt(dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025)));
                        float _3033 = dot(vec3(_760, _763, _766), vec3(_3002, _3003, _3004));
                        float _4335 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3036 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                        float _3037 = dot(vec3(_760, _763, _766), vec3(_3029 * _3023, _3029 * _3024, _3029 * _3025));
                        float _4346 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3040 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3044 = ((_3040 * _3040) * (_3022 + (-1.0))) + 1.0;
                        float _3045 = _2980 * _3021;
                        float _3046 = _3045 * _3045;
                        float _3049 = ((1.0 - _3046) * _2970) + _3046;
                        float _4357 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3050 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3051 = 1.0 - _3021;
                        float _3061 = (0.5 / (((_3050 * ((_3036 * _3051) + _3021)) + 9.9999999392252902907785028219223e-09) + (((_3050 * _3051) + _3021) * _3036))) * _3050;
                        float _4368 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3072 = (((_3022 * 3.1415927410125732421875) * (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) / ((_3044 * _3044) * ((_2987 * 2.1991131305694580078125) + 3.141590118408203125))) * _2976;
                        _2829 = (_2991 * _2939.x) + _2897;
                        _2830 = (_2991 * _2939.y) + _2898;
                        _2831 = (_2991 * _2939.z) + _2899;
                        _2826 = (_3072 * _2956.x) + _2894;
                        _2827 = (_3072 * _2956.y) + _2895;
                        _2828 = (_3072 * _2956.z) + _2896;
                        if (_2901 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2894 = _2826;
                            _2895 = _2827;
                            _2896 = _2828;
                            _2897 = _2829;
                            _2898 = _2830;
                            _2899 = _2831;
                            _2900 = _2901;
                        }
                    }
                    frontier_phi_61_pred = _2826;
                    frontier_phi_61_pred_1 = _2831;
                    frontier_phi_61_pred_2 = _2830;
                    frontier_phi_61_pred_3 = _2829;
                    frontier_phi_61_pred_4 = _2828;
                    frontier_phi_61_pred_5 = _2827;
                }
                _2627 = frontier_phi_61_pred;
                _2637 = frontier_phi_61_pred_1;
                _2635 = frontier_phi_61_pred_2;
                _2633 = frontier_phi_61_pred_3;
                _2631 = frontier_phi_61_pred_4;
                _2629 = frontier_phi_61_pred_5;
                uint _2777 = _2776 + 1u;
                if (_2777 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2770 = _2627;
                    _2771 = _2629;
                    _2772 = _2631;
                    _2773 = _2633;
                    _2774 = _2635;
                    _2775 = _2637;
                    _2776 = _2777;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
        }
        uvec4 _2640 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2641 = _2640.z;
        uint _2643 = (_2641 >> 8u) & 15u;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        if (((4294967295u << _2643) & _2525) == 0u)
        {
            _2738 = _2626;
            _2740 = _2628;
            _2742 = _2630;
            _2744 = _2632;
            _2746 = _2634;
            _2748 = _2636;
        }
        else
        {
            float _2763 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
            float _2764 = _2763 * _2479;
            float _2765 = _2763 * _2480;
            float _2766 = _2763 * _2481;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2643 < ((_2641 >> 12u) & 15u))
            {
                float _2739;
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2749;
                float _2877 = _2626;
                float _2878 = _2628;
                float _2879 = _2630;
                float _2880 = _2632;
                float _2881 = _2634;
                float _2882 = _2636;
                uint _2883 = _2643;
                uint _2892;
                bool _2893;
                for (;;)
                {
                    _2892 = texelFetch(g_lightClassification, int((((_2519 << 5u) + (_2505 << 9u)) + (_2883 << 2u)) >> 2u)).x;
                    _2893 = _2892 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2893)
                    {
                        frontier_phi_67_pred = _2880;
                        frontier_phi_67_pred_1 = _2881;
                        frontier_phi_67_pred_2 = _2882;
                        frontier_phi_67_pred_3 = _2879;
                        frontier_phi_67_pred_4 = _2878;
                        frontier_phi_67_pred_5 = _2877;
                    }
                    else
                    {
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3090 = _2877;
                        float _3091 = _2878;
                        float _3092 = _2879;
                        float _3093 = _2880;
                        float _3094 = _2881;
                        float _3095 = _2882;
                        uint _3096 = _2892;
                        uint _3097;
                        vec4 _3122;
                        float _3123;
                        vec4 _3138;
                        vec3 _3150;
                        vec4 _3166;
                        vec4 _3181;
                        float _3227;
                        bool _3228;
                        for (;;)
                        {
                            uint _3107 = ((_2883 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3096));
                            _3097 = (_3096 + 4294967295u) & _3096;
                            uint _3109 = _3107 * 40u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            _3123 = _3122.w;
                            uint _3125 = (_3107 * 40u) + 4u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3140 = (_3107 * 40u) + 8u;
                            _3150 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x));
                            uint _3153 = (_3107 * 40u) + 16u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3168 = (_3107 * 40u) + 20u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3183 = (_3107 * 40u) + 24u;
                            vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3202 = (_3107 * 40u) + 28u;
                            vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            _3227 = fma(_2481, _3215.z, fma(_2480, _3215.y, _3215.x * _2479)) + _3215.w;
                            _3228 = !((fma(_2481, _3196.z, fma(_2480, _3196.y, _3196.x * _2479)) + _3196.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3228)
                            {
                                float _3255 = _3122.x - _2479;
                                float _3256 = _3122.y - _2480;
                                float _3257 = _3122.z - _2481;
                                float _3258 = dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257));
                                float _3261 = inversesqrt(_3258);
                                float _3262 = _3261 * _3255;
                                float _3263 = _3261 * _3256;
                                float _3264 = _3261 * _3257;
                                float _3268 = 1.0 - (_3258 / (_3123 * _3123));
                                float _4379 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3269 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3273 = sqrt(_3258) * _3138.w;
                                float _3275 = 1.39999997615814208984375 / (_3273 + 1.39999997615814208984375);
                                float _3276 = _3275 * _3275;
                                float _3279 = ((1.0 - _3276) * dot(vec3(_3262, _3263, _3264), vec3(_760, _763, _766))) + _3276;
                                float _3282 = _3273 * _3273;
                                float _3286 = (fma(_2481, _3166.z, fma(_2480, _3166.y, _3166.x * _2479)) + _3166.w) / _3227;
                                float _3287 = (fma(_2481, _3181.z, fma(_2480, _3181.y, _3181.x * _2479)) + _3181.w) / _3227;
                                float _3291 = 1.0 - dot(vec2(_3286, _3287), vec2(_3286, _3287));
                                float _4395 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3293 = _3292 * (((isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0))) * _3269) / ((_3282 * 0.699999988079071044921875) + 1.0));
                                float _3305 = exp2(log2(1.0 / ((_3282 * 3.5) + 5.0)) * 0.25);
                                float _3306 = 1.0 - _820;
                                float _3313 = sqrt(1.0 - ((1.0 - (_3306 * _3306)) * (1.0 - (_3305 * _3305))));
                                float _3314 = _3313 * _3313;
                                float _3315 = _3314 * _3314;
                                float _3316 = _3262 - _2764;
                                float _3317 = _3263 - _2765;
                                float _3318 = _3264 - _2766;
                                float _3322 = inversesqrt(dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318)));
                                float _3326 = dot(vec3(_760, _763, _766), vec3((-0.0) - _2764, (-0.0) - _2765, (-0.0) - _2766));
                                float _4406 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3329 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3330 = dot(vec3(_760, _763, _766), vec3(_3322 * _3316, _3322 * _3317, _3322 * _3318));
                                float _4417 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3333 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3337 = ((_3333 * _3333) * (_3315 + (-1.0))) + 1.0;
                                float _3338 = _3275 * _3314;
                                float _3339 = _3338 * _3338;
                                float _3345 = ((1.0 - _3339) * dot(vec3(_760, _763, _766), vec3(_3262, _3263, _3264))) + _3339;
                                float _4428 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3346 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3347 = 1.0 - _3314;
                                float _3357 = (0.5 / (((_3346 * ((_3329 * _3347) + _3314)) + 9.9999999392252902907785028219223e-09) + (((_3346 * _3347) + _3314) * _3329))) * _3346;
                                float _4439 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3367 = (_3292 * _3269) * (((_3315 * 3.1415927410125732421875) * (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) / ((_3337 * _3337) * ((_3282 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3367 * _3150.x;
                                frontier_phi_73_pred_1 = _3367 * _3150.y;
                                frontier_phi_73_pred_2 = _3293 * _3138.z;
                                frontier_phi_73_pred_3 = _3293 * _3138.y;
                                frontier_phi_73_pred_4 = _3293 * _3138.x;
                                frontier_phi_73_pred_5 = _3367 * _3150.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3371 = frontier_phi_73_pred;
                            _3372 = frontier_phi_73_pred_1;
                            _3376 = frontier_phi_73_pred_2;
                            _3375 = frontier_phi_73_pred_3;
                            _3374 = frontier_phi_73_pred_4;
                            _3373 = frontier_phi_73_pred_5;
                            _3080 = _3374 + _3093;
                            _3081 = _3375 + _3094;
                            _3082 = _3376 + _3095;
                            _3077 = _3371 + _3090;
                            _3078 = _3372 + _3091;
                            _3079 = _3373 + _3092;
                            if (_3097 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3097;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3080;
                        frontier_phi_67_pred_1 = _3081;
                        frontier_phi_67_pred_2 = _3082;
                        frontier_phi_67_pred_3 = _3079;
                        frontier_phi_67_pred_4 = _3078;
                        frontier_phi_67_pred_5 = _3077;
                    }
                    _2745 = frontier_phi_67_pred;
                    _2747 = frontier_phi_67_pred_1;
                    _2749 = frontier_phi_67_pred_2;
                    _2743 = frontier_phi_67_pred_3;
                    _2741 = frontier_phi_67_pred_4;
                    _2739 = frontier_phi_67_pred_5;
                    uint _2884 = _2883 + 1u;
                    if (_2884 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2877 = _2739;
                        _2878 = _2741;
                        _2879 = _2743;
                        _2880 = _2745;
                        _2881 = _2747;
                        _2882 = _2749;
                        _2883 = _2884;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2747;
                frontier_phi_55_56_ladder_1 = _2749;
                frontier_phi_55_56_ladder_2 = _2745;
                frontier_phi_55_56_ladder_3 = _2743;
                frontier_phi_55_56_ladder_4 = _2741;
                frontier_phi_55_56_ladder_5 = _2739;
            }
            else
            {
                frontier_phi_55_56_ladder = _2634;
                frontier_phi_55_56_ladder_1 = _2636;
                frontier_phi_55_56_ladder_2 = _2632;
                frontier_phi_55_56_ladder_3 = _2630;
                frontier_phi_55_56_ladder_4 = _2628;
                frontier_phi_55_56_ladder_5 = _2626;
            }
            _2738 = frontier_phi_55_56_ladder_5;
            _2740 = frontier_phi_55_56_ladder_4;
            _2742 = frontier_phi_55_56_ladder_3;
            _2744 = frontier_phi_55_56_ladder_2;
            _2746 = frontier_phi_55_56_ladder;
            _2748 = frontier_phi_55_56_ladder_1;
        }
        float _2753 = isnan(1.0) ? _804 : (isnan(_804) ? 1.0 : min(_804, 1.0));
        _2538 = (_2753 * _2744) + _1990;
        _2540 = (_2753 * _2746) + _1992;
        _2542 = (_2753 * _2748) + _1994;
        _2544 = ((_2738 * 0.039999999105930328369140625) * _2753) + _2323;
        _2546 = ((_2740 * 0.039999999105930328369140625) * _2753) + _2325;
        _2548 = ((_2742 * 0.039999999105930328369140625) * _2753) + _2327;
    }
    else
    {
        _2538 = _1990;
        _2540 = _1992;
        _2542 = _1994;
        _2544 = _2323;
        _2546 = _2325;
        _2548 = _2327;
    }
    float _4455 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4466 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _4477 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    uint _2568 = _243 + 6u;
    float _2576 = _738 / cbSceneParam._m0[86u].x;
    float _2577 = _739 / cbSceneParam._m0[86u].y;
    vec4 _2591 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2576, _2577, (log2((isnan(cbSceneParam._m0[77u].w) ? _673 : (isnan(_673) ? cbSceneParam._m0[77u].w : min(_673, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2593 = _2591.x;
    float _2594 = _2591.y;
    float _2595 = _2591.z;
    float _2596 = _2591.w;
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    if (_673 > cbSceneParam._m0[78u].w)
    {
        float _2651 = isnan(_673) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _673 : min(cbSceneParam._m0[80u].w, _673));
        float _2652 = _2651 / _673;
        float _2663 = _2652 * _723;
        float _2664 = _724 * _2652;
        float _2665 = (-0.0) - _2664;
        float _2666 = _2652 * _725;
        float _2668 = (cbSceneParam._m0[77u].w * _2665) / _2651;
        float _2669 = _2668 + cbSceneParam._m0[79u].w;
        float _2670 = cbSceneParam._m0[79u].w - _2664;
        float _2676 = sqrt(((_2663 * _2663) + (_2664 * _2664)) + (_2666 * _2666));
        float _2679 = (1.0 - (cbSceneParam._m0[77u].w / _2651)) * _2676;
        float _2684 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2686 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2839;
        if (abs((_2665 - _2668) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2839 = ((((_2669 > 0.0) ? exp2(_2684 * _2669) : (2.0 - exp2(_2686 * _2669))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2679;
        }
        else
        {
            float _2799 = 1.0 / cbSceneParam._m0[80u].x;
            float _2800 = isnan(_2670) ? _2669 : (isnan(_2669) ? _2670 : max(_2669, _2670));
            float _2801 = isnan(_2670) ? _2669 : (isnan(_2669) ? _2670 : min(_2669, _2670));
            float _2810 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : min(_2800, 0.0));
            float _2811 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : min(_2801, 0.0));
            _2839 = ((abs(_2676 / _2665) * cbSceneParam._m0[80u].y) * ((((_2810 - _2811) * 2.0) - ((exp2(_2684 * (isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0)))) - exp2(_2684 * (isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0))))) * _2799)) - ((exp2(_2686 * _2810) - exp2(_2686 * _2811)) * _2799))) + (_2679 * cbSceneParam._m0[80u].z);
        }
        vec4 _2841 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2576, _2577, 1.0), 0.0);
        float _2850 = exp2((_2839 * (-1.44269502162933349609375)) * (1.0 - _2841.w));
        float _2851 = log2(_2850);
        float _2867 = log2(_2596);
        _2688 = (exp2(_2867 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].x)) * _2841.x) / cbSceneParam._m0[78u].x)) + _2593;
        _2690 = (exp2(_2867 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].y)) * _2841.y) / cbSceneParam._m0[78u].y)) + _2594;
        _2692 = (exp2(_2867 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].z)) * _2841.z) / cbSceneParam._m0[78u].z)) + _2595;
        _2694 = _2850 * _2596;
    }
    else
    {
        _2688 = _2593;
        _2690 = _2594;
        _2692 = _2595;
        _2694 = _2596;
    }
    float _2706 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2707 = _2706 == 3.0;
    float _2708 = log2(_2694);
    float _2715 = exp2(_2708 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2538 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _804))) + ((_2544 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1609)) * cbPerFrame._m0[3u].x));
    float _2716 = exp2(_2708 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2540 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _804))) + ((_2546 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1609)) * cbPerFrame._m0[3u].x));
    float _2717 = exp2(_2708 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2542 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _804))) + ((_2548 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1609)) * cbPerFrame._m0[3u].x));
    float _2726 = (_2706 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2726 * (_2707 ? _2715 : (_2715 + (cbSceneParam._m0[72u].w * _2688)));
    SV_Target.y = _2726 * (_2707 ? _2716 : (_2716 + (cbSceneParam._m0[72u].w * _2690)));
    SV_Target.z = _2726 * (_2707 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2692)));
    SV_Target.w = cbInstanceData._m0[_2568].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2568].w;
}


