#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1263;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _364 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _364) * cbMtdParam._m0[24u].x) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3850 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _389 = (_382 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _390 = (_382 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _391 = (_382 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _410 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _430 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _447 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _449 = _447.x;
    float _450 = _447.y;
    float _451 = _447.z;
    float _460 = ((_430.z - _451) * _382) + _451;
    float _463 = ((((_430.x - _449) * _382) + _449) * 2.0) + (-1.0);
    float _465 = ((((_430.y - _450) * _382) + _450) * 2.0) + (-1.0);
    float _466 = dot(vec2(_463, _465), vec2(_463, _465));
    float _3861 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _471 = sqrt(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))));
    vec4 _487 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _499 = (((_487.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _463;
    float _500 = (((_487.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _465;
    float _503 = fma(_471, _235, fma(_500, _242, _499 * _228));
    float _506 = fma(_471, _236, fma(_500, _243, _499 * _229));
    float _509 = fma(_471, _237, fma(_500, _244, _499 * _230));
    float _513 = inversesqrt(dot(vec3(_503, _506, _509), vec3(_503, _506, _509)));
    vec4 _542 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _544 = _542.x;
    float _545 = 1.0 - _544;
    float _551 = (cbMtdParam._m0[19u].x + dot(vec4(_513 * _503, _513 * _506, _513 * _509, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_544 - _545) * cbMtdParam._m0[24u].z) + _545) * cbMtdParam._m0[21u].z);
    float _3872 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _554 = (-0.0) - cbMtdParam._m0[24u].y;
    float _556 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _557 = isnan(1.0) ? _556 : (isnan(_556) ? 1.0 : min(_556, 1.0));
    float _564 = _552 - ((_552 * TEXCOORD_8.x) * _557);
    float _565 = _552 - ((_552 * TEXCOORD_8.y) * _557);
    float _566 = _552 - ((_552 * TEXCOORD_8.z) * _557);
    float _573 = (_564 * ((_410.x * cbMtdParam._m0[18u].x) - _389)) + _389;
    float _574 = (_565 * ((_410.y * cbMtdParam._m0[18u].y) - _390)) + _390;
    float _575 = (_566 * ((_410.z * cbMtdParam._m0[18u].z) - _391)) + _391;
    vec4 _587 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _589 = _587.x;
    float _590 = 1.0 - _589;
    float _618 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_589 - _590) * cbMtdParam._m0[24u].w) + _590) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3893 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _627 = ((((cbMtdParam._m0[10u].x - _573) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _619) + _573;
    float _628 = ((((cbMtdParam._m0[10u].y - _574) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _619) + _574;
    float _629 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _575)) * _619) + _575;
    float _633 = (cbMtdParam._m0[19u].w * (_487.z - _460)) + _460;
    vec4 _647 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _654 = (_647.x * 2.0) + (-1.0);
    float _655 = (_647.y * 2.0) + (-1.0);
    float _656 = dot(vec2(_654, _655), vec2(_654, _655));
    float _3904 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _664 = ((_647.z - _633) * _564) + _633;
    float _667 = ((cbMtdParam._m0[23u].y - _664) * _619) + _664;
    vec4 _686 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _692 = (_686.x * 2.0) + (-1.0);
    float _693 = (_686.y * 2.0) + (-1.0);
    float _694 = dot(vec2(_692, _693), vec2(_692, _693));
    float _3915 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _709 = ((sqrt(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) - _471) * _566) + _471;
    float _712 = (((_654 - _499) * _564) + _499) + (cbMtdParam._m0[21u].x * _499);
    float _713 = (((_655 - _500) * _565) + _500) + (cbMtdParam._m0[21u].x * _500);
    float _724 = (((_692 - _712) + (_712 * cbMtdParam._m0[22u].z)) * _619) + _712;
    float _725 = (((_693 - _713) + (_713 * cbMtdParam._m0[22u].z)) * _619) + _713;
    float _726 = (_619 * (sqrt(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) - _709)) + _709;
    float _728 = cbMtdParam._m0[22u].x + _487.w;
    float _731 = fma(_726, _235, fma(_725, _242, _724 * _228));
    float _734 = fma(_726, _236, fma(_725, _243, _724 * _229));
    float _737 = fma(_726, _237, fma(_725, _244, _724 * _230));
    float _741 = inversesqrt(dot(vec3(_731, _734, _737), vec3(_731, _734, _737)));
    float _742 = _741 * _731;
    float _743 = _741 * _734;
    float _744 = _741 * _737;
    float _3926 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _745 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _3948 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3959 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3970 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _763 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _814 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _804);
    float _815 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _804);
    float _816 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _804);
    float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
    float _821 = _814 * _820;
    float _822 = _815 * _820;
    float _823 = _816 * _820;
    float _829 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _830 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _848 = fma(_744, cbSceneParam._m0[5u].z, fma(_743, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _742));
    float _851 = fma(_744, cbSceneParam._m0[6u].z, fma(_743, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _742));
    float _854 = fma(_744, cbSceneParam._m0[7u].z, fma(_743, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _742));
    uint _868 = (_247 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _874 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * cbInstanceData._m0[_868].x;
    float _875 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * cbInstanceData._m0[_868].y;
    float _876 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * cbInstanceData._m0[_868].z;
    float _3981 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    vec4 _888 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _829, cbSceneParam._m0[86u].y * _830));
    float _892 = ((isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * TEXCOORD_5.w) * _888.x;
    float _893 = dot(vec3(_742, _743, _744), vec3(_821, _822, _823));
    float _896 = _893 * 2.0;
    float _900 = (_896 * _742) - _821;
    float _901 = (_896 * _743) - _822;
    float _902 = (_896 * _744) - _823;
    float _906 = abs(dot(vec3(_821, _822, _823), vec3(_742, _743, _744)));
    float _4014 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _908 = sqrt(_745);
    float _921 = exp2((_908 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_908 * 3.0));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1262;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _987 = fma(_961, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953));
        float _991 = fma(_961, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953));
        float _995 = fma(_961, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953));
        float _1020 = _953 + _742;
        float _1021 = _957 + _743;
        float _1022 = _961 + _744;
        float _1032 = fma(_1022, cbModelParam._m0[26u].z, fma(_1021, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1020)) - _987;
        float _1033 = fma(_1022, cbModelParam._m0[27u].z, fma(_1021, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1020)) - _991;
        float _1034 = fma(_1022, cbModelParam._m0[28u].z, fma(_1021, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1020)) - _995;
        float _1038 = inversesqrt(dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034)));
        float _1051 = ((_1038 * _1032) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_987 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1038 * _1033) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_991 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1038 * _1034) / cbModelParam._m0[34u].z) + ((((((_995 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        float _1090 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1056.x + (-0.5));
        float _1092 = _1090 * (_1056.y + (-0.5));
        float _1093 = _1090 * (_1056.z + (-0.5));
        float _1100 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1063.x + (-0.5));
        float _1102 = _1100 * (_1063.y + (-0.5));
        float _1103 = _1100 * (_1063.z + (-0.5));
        float _1110 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1070.x + (-0.5));
        float _1112 = _1110 * (_1070.y + (-0.5));
        float _1113 = _1110 * (_1070.z + (-0.5));
        float _1120 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1077.x + (-0.5));
        float _1122 = _1120 * (_1077.y + (-0.5));
        float _1123 = _1120 * (_1077.z + (-0.5));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = _1091 * 0.5;
        float _1128 = _1101 * 0.5;
        float _1129 = _1111 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1144 = (dot(vec3(_742, _743, _744), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1154 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _4062 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1156 + 1.0))) + _1161) * _1124;
        float _1171 = _1092 * 0.5;
        float _1172 = _1102 * 0.5;
        float _1173 = _1112 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_742, _743, _744), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _4095 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1198 + 1.0))) + _1203) * _1125;
        float _1213 = _1093 * 0.5;
        float _1214 = _1103 * 0.5;
        float _1215 = _1113 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_742, _743, _744), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _4128 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1240 + 1.0))) + _1245) * _1126;
        _1262 = _1093;
        _1264 = _1092;
        _1265 = _1091;
        _1266 = _1103;
        _1267 = _1102;
        _1268 = _1101;
        _1269 = _1113;
        _1270 = _1112;
        _1271 = _1111;
        _1272 = _1126;
        _1273 = _1125;
        _1274 = _1124;
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
    }
    else
    {
        _1262 = _1263;
        _1264 = _1263;
        _1265 = _1263;
        _1266 = _1263;
        _1267 = _1263;
        _1268 = _1263;
        _1269 = _1263;
        _1270 = _1263;
        _1271 = _1263;
        _1272 = _1263;
        _1273 = _1263;
        _1274 = _1263;
        _1275 = 0.0;
        _1276 = 0.0;
        _1277 = 0.0;
    }
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1302 = fma(_961, cbModelParam._m0[30u].z, fma(_957, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953));
        float _1306 = fma(_961, cbModelParam._m0[31u].z, fma(_957, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953));
        float _1310 = fma(_961, cbModelParam._m0[32u].z, fma(_957, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953));
        float _1333 = _953 + _742;
        float _1334 = _957 + _743;
        float _1335 = _961 + _744;
        float _1345 = fma(_1335, cbModelParam._m0[30u].z, fma(_1334, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1333)) - _1302;
        float _1346 = fma(_1335, cbModelParam._m0[31u].z, fma(_1334, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1333)) - _1306;
        float _1347 = fma(_1335, cbModelParam._m0[32u].z, fma(_1334, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1333)) - _1310;
        float _1351 = inversesqrt(dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347)));
        float _1364 = ((_1351 * _1345) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1302 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1351 * _1346) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1306 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1351 * _1347) / cbModelParam._m0[35u].z) + ((((((_1310 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        float _1401 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1368.x + (-0.5));
        float _1403 = _1401 * (_1368.y + (-0.5));
        float _1404 = _1401 * (_1368.z + (-0.5));
        float _1411 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1375.x + (-0.5));
        float _1413 = _1411 * (_1375.y + (-0.5));
        float _1414 = _1411 * (_1375.z + (-0.5));
        float _1421 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1382.x + (-0.5));
        float _1423 = _1421 * (_1382.y + (-0.5));
        float _1424 = _1421 * (_1382.z + (-0.5));
        float _1431 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1389.x + (-0.5));
        float _1433 = _1431 * (_1389.y + (-0.5));
        float _1434 = _1431 * (_1389.z + (-0.5));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = _1402 * 0.5;
        float _1439 = _1412 * 0.5;
        float _1440 = _1422 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_742, _743, _744), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4191 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1465 + 1.0))) + _1470) * _1435;
        float _1480 = _1403 * 0.5;
        float _1481 = _1413 * 0.5;
        float _1482 = _1423 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_742, _743, _744), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4224 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1507 + 1.0))) + _1512) * _1436;
        float _1522 = _1404 * 0.5;
        float _1523 = _1414 * 0.5;
        float _1524 = _1424 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_742, _743, _744), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4257 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1549 + 1.0))) + _1554) * _1437;
        _1571 = _1404;
        _1572 = _1403;
        _1573 = _1402;
        _1574 = _1414;
        _1575 = _1413;
        _1576 = _1412;
        _1577 = _1424;
        _1578 = _1423;
        _1579 = _1422;
        _1580 = _1437;
        _1581 = _1436;
        _1582 = _1435;
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
    }
    else
    {
        _1571 = _1263;
        _1572 = _1263;
        _1573 = _1263;
        _1574 = _1263;
        _1575 = _1263;
        _1576 = _1263;
        _1577 = _1263;
        _1578 = _1263;
        _1579 = _1263;
        _1580 = _1263;
        _1581 = _1263;
        _1582 = _1263;
        _1583 = 0.0;
        _1584 = 0.0;
        _1585 = 0.0;
    }
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1275)) + _1275;
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1276)) + _1276;
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1277)) + _1277;
    float _1618 = fma(_1597, cbSceneParam._m0[89u].z, fma(_1596, cbSceneParam._m0[89u].y, _1595 * cbSceneParam._m0[89u].x));
    float _1621 = fma(_1597, cbSceneParam._m0[90u].z, fma(_1596, cbSceneParam._m0[90u].y, _1595 * cbSceneParam._m0[90u].x));
    float _1624 = fma(_1597, cbSceneParam._m0[91u].z, fma(_1596, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1595));
    float _1639 = _900 * 0.5;
    float _1640 = _901 * 0.5;
    float _1641 = _902 * 0.5;
    float _1642 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1645 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1648 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1682;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1655 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1262, _1266, _1269, _1272));
        float _1659 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1264, _1267, _1270, _1273));
        float _1663 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1265, _1268, _1271, _1274));
        float _1670 = dot(vec4(cbModelParam._m0[39u]), vec4(_1639, _1640, _1641, 1.0));
        _1682 = dot(vec3(isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1670) ? 0.0 : (isnan(0.0) ? _1670 : max(0.0, _1670))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1682 = 1.0;
    }
    float _1693;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1684 = dot(vec4(cbModelParam._m0[40u]), vec4(_1639, _1640, _1641, 1.0));
        _1693 = dot(vec3(isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1693 = 1.0;
    }
    float _1697 = (_1693 * cbModelParam._m0[1u].x) + (_1682 * (1.0 - cbModelParam._m0[1u].x));
    float _1707 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _745);
    float _1708 = isnan(_1707) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1707 : min(cbModelParam._m0[25u].z, _1707));
    float _1788;
    float _1790;
    float _1792;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1755 = fma(_961, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953)) + cbModelParam._m0[13u].w;
        float _1759 = fma(_961, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953)) + cbModelParam._m0[14u].w;
        float _1763 = fma(_961, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953)) + cbModelParam._m0[15u].w;
        float _1766 = fma(_902, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _900));
        float _1769 = fma(_902, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _900));
        float _1772 = fma(_902, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _900));
        float _1800;
        if (_1766 > 0.0)
        {
            _1800 = abs((1.0 - _1755) / _1766);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1755 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1800 = frontier_phi_14_12_ladder;
        }
        float _1969;
        if (_1769 > 0.0)
        {
            _1969 = abs((1.0 - _1759) / _1769);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1759 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1969 = frontier_phi_23_19_ladder;
        }
        float _2264;
        if (_1772 > 0.0)
        {
            _2264 = abs((1.0 - _1763) / _1772);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1763 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2264 = frontier_phi_35_30_ladder;
        }
        float _2266 = isnan(_1969) ? _1800 : (isnan(_1800) ? _1969 : min(_1800, _1969));
        float _2267 = isnan(_2264) ? _2266 : (isnan(_2266) ? _2264 : min(_2266, _2264));
        float _2271 = (_2267 * _1766) + _1755;
        float _2272 = (_2267 * _1769) + _1759;
        float _2273 = (_2267 * _1772) + _1763;
        float _2274 = _2267 * 9.9999997473787516355514526367188e-05;
        float _2276 = (-1.0) - _2274;
        float _2278 = _2274 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2273 > _2278) || ((_2273 < _2276) || ((_2272 > _2278) || ((_2272 < _2276) || ((_2271 < _2276) || (_2271 > _2278))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2418 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2273, cbModelParam._m0[9u].z, fma(_2272, cbModelParam._m0[9u].y, _2271 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2273, cbModelParam._m0[10u].z, fma(_2272, cbModelParam._m0[10u].y, _2271 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2273, cbModelParam._m0[11u].z, fma(_2272, cbModelParam._m0[11u].y, _2271 * cbModelParam._m0[11u].x))), _1708);
            frontier_phi_13_35_ladder = _2418.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2418.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2418.x * cbModelParam._m0[1u].y;
        }
        _1788 = frontier_phi_13_35_ladder_2;
        _1790 = frontier_phi_13_35_ladder_1;
        _1792 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1776 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_900, _901, _902), _1708);
        _1788 = _1776.x * cbModelParam._m0[1u].y;
        _1790 = _1776.y * cbModelParam._m0[1u].y;
        _1792 = _1776.z * cbModelParam._m0[1u].y;
    }
    float _1796 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _745);
    float _1797 = isnan(_1796) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1796 : min(cbModelParam._m0[25u].w, _1796));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1850 = fma(_961, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953)) + cbModelParam._m0[21u].w;
        float _1854 = fma(_961, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953)) + cbModelParam._m0[22u].w;
        float _1858 = fma(_961, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953)) + cbModelParam._m0[23u].w;
        float _1861 = fma(_902, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _900));
        float _1864 = fma(_902, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _900));
        float _1867 = fma(_902, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _900));
        float _1974;
        if (_1861 > 0.0)
        {
            _1974 = abs((1.0 - _1850) / _1861);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1850 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1974 = frontier_phi_25_21_ladder;
        }
        float _2291;
        if (_1864 > 0.0)
        {
            _2291 = abs((1.0 - _1854) / _1864);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1854 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2291 = frontier_phi_37_32_ladder;
        }
        float _2618;
        if (_1867 > 0.0)
        {
            _2618 = abs((1.0 - _1858) / _1867);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1858 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2618 = frontier_phi_47_44_ladder;
        }
        float _2620 = isnan(_2291) ? _1974 : (isnan(_1974) ? _2291 : min(_1974, _2291));
        float _2621 = isnan(_2618) ? _2620 : (isnan(_2620) ? _2618 : min(_2620, _2618));
        float _2625 = (_2621 * _1861) + _1850;
        float _2626 = (_2621 * _1864) + _1854;
        float _2627 = (_2621 * _1867) + _1858;
        float _2628 = _2621 * 9.9999997473787516355514526367188e-05;
        float _2629 = (-1.0) - _2628;
        float _2631 = _2628 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2627 > _2631) || ((_2627 < _2629) || ((_2626 > _2631) || ((_2626 < _2629) || ((_2625 < _2629) || (_2625 > _2631))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2745 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2627, cbModelParam._m0[17u].z, fma(_2626, cbModelParam._m0[17u].y, _2625 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2627, cbModelParam._m0[18u].z, fma(_2626, cbModelParam._m0[18u].y, _2625 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2627, cbModelParam._m0[19u].z, fma(_2626, cbModelParam._m0[19u].y, _2625 * cbModelParam._m0[19u].x))), _1797);
            frontier_phi_22_47_ladder = _2745.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2745.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2745.x * cbModelParam._m0[1u].z;
        }
        _1886 = frontier_phi_22_47_ladder_2;
        _1888 = frontier_phi_22_47_ladder_1;
        _1890 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1870 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_900, _901, _902), _1797);
        _1886 = _1870.x * cbModelParam._m0[1u].z;
        _1888 = _1870.y * cbModelParam._m0[1u].z;
        _1890 = _1870.z * cbModelParam._m0[1u].z;
    }
    float _1902 = ((((1.0 - _921) * ((_908 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_921 * _908)) * _892;
    float _1903 = _1902 * ((cbModelParam._m0[1u].w * (_1886 - _1788)) + _1788);
    float _1904 = _1902 * ((cbModelParam._m0[1u].w * (_1888 - _1790)) + _1790);
    float _1905 = _1902 * ((cbModelParam._m0[1u].w * (_1890 - _1792)) + _1792);
    float _1908 = fma(_1905, cbSceneParam._m0[89u].z, fma(_1904, cbSceneParam._m0[89u].y, _1903 * cbSceneParam._m0[89u].x));
    float _1911 = fma(_1905, cbSceneParam._m0[90u].z, fma(_1904, cbSceneParam._m0[90u].y, _1903 * cbSceneParam._m0[90u].x));
    float _1914 = fma(_1905, cbSceneParam._m0[91u].z, fma(_1904, cbSceneParam._m0[91u].y, _1903 * cbSceneParam._m0[91u].x));
    float _1948 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1952 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1956 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1960 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1961 = _1948 / _1960;
    float _1962 = _1952 / _1960;
    float _1963 = _1956 / _1960;
    float _2110;
    float _2111;
    float _2112;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1990 = ((uint(_1963 > cbSceneParam._m0[59u].y) + uint(_1963 > cbSceneParam._m0[59u].x)) + uint(_1963 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1991 = _1990 + 43u;
        uint _1999 = _1990 + 44u;
        uint _2007 = _1990 + 45u;
        uint _2015 = _1990 + 46u;
        float _2026 = fma(_1960, cbSceneParam._m0[_1991].w, fma(_1956, cbSceneParam._m0[_1991].z, fma(_1952, cbSceneParam._m0[_1991].y, _1948 * cbSceneParam._m0[_1991].x)));
        float _2030 = fma(_1960, cbSceneParam._m0[_1999].w, fma(_1956, cbSceneParam._m0[_1999].z, fma(_1952, cbSceneParam._m0[_1999].y, _1948 * cbSceneParam._m0[_1999].x)));
        float _2038 = fma(_1960, cbSceneParam._m0[_2015].w, fma(_1956, cbSceneParam._m0[_2015].z, fma(_1952, cbSceneParam._m0[_2015].y, _1948 * cbSceneParam._m0[_2015].x)));
        float _2043 = cbSceneParam._m0[33u].z * _2038;
        float _2045 = cbSceneParam._m0[33u].w * _2038;
        float _2048 = fma(_1960, cbSceneParam._m0[_2007].w, fma(_1956, cbSceneParam._m0[_2007].z, fma(_1952, cbSceneParam._m0[_2007].y, _1948 * cbSceneParam._m0[_2007].x))) / _2038;
        float _2096 = (cbSceneParam._m0[33u].x - sqrt(((_1962 * _1962) + (_1961 * _1961)) + (_1963 * _1963))) * cbSceneParam._m0[33u].y;
        float _4383 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2103 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2043 + _2026) / _2038, (_2045 + _2030) / _2038), _2048), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2045 + _2026) / _2038, (_2030 - _2043) / _2038), _2048), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2026 - _2043) / _2038, (_2030 - _2045) / _2038), _2048), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2026 - _2045) / _2038, (_2043 + _2030) / _2038), _2048), 0.0)).x), vec4(0.25)));
        _2110 = 1.0 - (_2103 * cbSceneParam._m0[34u].x);
        _2111 = 1.0 - (_2103 * cbSceneParam._m0[34u].y);
        _2112 = 1.0 - (_2103 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2110 = 1.0;
        _2111 = 1.0;
        _2112 = 1.0;
    }
    float _2176;
    float _2178;
    float _2180;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2164 = fma(_1960, cbSceneParam._m0[63u].w, fma(_1956, cbSceneParam._m0[63u].z, fma(_1952, cbSceneParam._m0[63u].y, _1948 * cbSceneParam._m0[63u].x)));
        float _2165 = fma(_1960, cbSceneParam._m0[60u].w, fma(_1956, cbSceneParam._m0[60u].z, fma(_1952, cbSceneParam._m0[60u].y, _1948 * cbSceneParam._m0[60u].x))) / _2164;
        float _2166 = fma(_1960, cbSceneParam._m0[61u].w, fma(_1956, cbSceneParam._m0[61u].z, fma(_1952, cbSceneParam._m0[61u].y, _1948 * cbSceneParam._m0[61u].x))) / _2164;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2165 >= cbSceneParam._m0[64u].x) && (_2166 >= cbSceneParam._m0[64u].y)) && (_2165 <= cbSceneParam._m0[64u].z)) && (_2166 <= cbSceneParam._m0[64u].w))
        {
            float _2304 = fma(_1960, cbSceneParam._m0[62u].w, fma(_1956, cbSceneParam._m0[62u].z, fma(_1952, cbSceneParam._m0[62u].y, _1948 * cbSceneParam._m0[62u].x))) / _2164;
            float _2308 = isnan(cbSceneParam._m0[41u].w) ? _2304 : (isnan(_2304) ? cbSceneParam._m0[41u].w : max(_2304, cbSceneParam._m0[41u].w));
            float _2351 = (cbSceneParam._m0[33u].x - sqrt(((_1962 * _1962) + (_1961 * _1961)) + (_1963 * _1963))) * cbSceneParam._m0[33u].y;
            float _4399 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
            float _2358 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2165, cbSceneParam._m0[33u].w + _2166), _2308), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2165, _2166 - cbSceneParam._m0[33u].z), _2308), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2165 - cbSceneParam._m0[33u].z, _2166 - cbSceneParam._m0[33u].w), _2308), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2165 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2166), _2308), 0.0)).x), vec4(0.25)));
            float _2362 = 1.0 - (_2358 * cbSceneParam._m0[34u].x);
            float _2363 = 1.0 - (_2358 * cbSceneParam._m0[34u].y);
            float _2364 = 1.0 - (_2358 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2364) ? _2112 : (isnan(_2112) ? _2364 : min(_2112, _2364));
            frontier_phi_34_33_ladder_1 = isnan(_2363) ? _2111 : (isnan(_2111) ? _2363 : min(_2111, _2363));
            frontier_phi_34_33_ladder_2 = isnan(_2362) ? _2110 : (isnan(_2110) ? _2362 : min(_2110, _2362));
        }
        else
        {
            frontier_phi_34_33_ladder = _2112;
            frontier_phi_34_33_ladder_1 = _2111;
            frontier_phi_34_33_ladder_2 = _2110;
        }
        _2176 = frontier_phi_34_33_ladder_2;
        _2178 = frontier_phi_34_33_ladder_1;
        _2180 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2176 = _2110;
        _2178 = _2111;
        _2180 = _2112;
    }
    uvec4 _2185 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _2187 = _2185.x * 14u;
    uint _2188 = _2187 + 13u;
    float _2195 = _892 + (-1.0);
    float _2200 = (cbLight._m0[_2188].x * _2195) + 1.0;
    float _2201 = (cbLight._m0[_2188].y * _2195) + 1.0;
    float _2202 = (cbLight._m0[_2188].z * _2195) + 1.0;
    float _2203 = (cbLight._m0[_2188].w * _2195) + 1.0;
    uint _2204 = _2187 + 5u;
    float _2210 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
    uint _2214 = _2187 + 4u;
    float _2223 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
    uint _2227 = _2187 | 1u;
    float _2238 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_742, _743, _744));
    float _2241 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_742, _743, _744));
    float _4435 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _4446 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2246 = (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * 0.3183098733425140380859375;
    float _2248 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * 0.3183098733425140380859375;
    float _2255 = ((cbLight._m0[_2204].x * _2210) * _2248) + (((cbLight._m0[_2214].x * _2176) * _2223) * _2246);
    float _2256 = ((_2210 * cbLight._m0[_2204].y) * _2248) + (((cbLight._m0[_2214].y * _2178) * _2223) * _2246);
    float _2257 = ((_2210 * cbLight._m0[_2204].z) * _2248) + (((cbLight._m0[_2214].z * _2180) * _2223) * _2246);
    uvec4 _2261 = floatBitsToUint(cbLight._m0[_2187 + 12u]);
    bool _2263 = _2261.x == 0u;
    float _2365;
    float _2367;
    float _2369;
    if (_2263)
    {
        _2365 = _2255;
        _2367 = _2256;
        _2369 = _2257;
    }
    else
    {
        uint _2373 = _2187 + 6u;
        float _2389 = (dot(vec3(cbLight._m0[_2187 + 2u].xyz), vec3(_742, _743, _744)) * 0.5) + 0.5;
        float _2390 = _2389 * _2389;
        float _4457 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2391 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2392 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2365 = (((cbLight._m0[_2373].x * 0.3183098733425140380859375) * _2391) * _2392) + _2255;
        _2367 = (((cbLight._m0[_2373].y * 0.3183098733425140380859375) * _2391) * _2392) + _2256;
        _2369 = (((cbLight._m0[_2373].z * 0.3183098733425140380859375) * _2391) * _2392) + _2257;
    }
    bool _2372 = _2261.y == 0u;
    float _2427;
    float _2429;
    float _2431;
    if (_2372)
    {
        _2427 = _2365;
        _2429 = _2367;
        _2431 = _2369;
    }
    else
    {
        uint _2589 = _2187 + 7u;
        float _2605 = (dot(vec3(cbLight._m0[_2187 + 3u].xyz), vec3(_742, _743, _744)) * 0.5) + 0.5;
        float _2606 = _2605 * _2605;
        float _4473 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2607 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2608 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2427 = (((cbLight._m0[_2589].x * 0.3183098733425140380859375) * _2607) * _2608) + _2365;
        _2429 = (((cbLight._m0[_2589].y * 0.3183098733425140380859375) * _2607) * _2608) + _2367;
        _2431 = (((cbLight._m0[_2589].z * 0.3183098733425140380859375) * _2607) * _2608) + _2369;
    }
    uint _2434 = _2187 + 8u;
    float _2447 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _745) * 0.949999988079071044921875);
    float _2448 = _2447 * _2447;
    float _2449 = cbLight._m0[_2187].x + _821;
    float _2450 = cbLight._m0[_2187].y + _822;
    float _2451 = cbLight._m0[_2187].z + _823;
    float _2455 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
    float _2456 = _2455 * _2449;
    float _2457 = _2455 * _2450;
    float _2458 = _2455 * _2451;
    float _2459 = dot(vec3(_742, _743, _744), vec3(cbLight._m0[_2187].xyz));
    float _4489 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2462 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _4500 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _2463 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
    float _2464 = dot(vec3(_742, _743, _744), vec3(_2456, _2457, _2458));
    float _4511 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _2468 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2456, _2457, _2458));
    float _4522 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2472 = _2448 * _2448;
    float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
    float _2487 = (exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2488 = 1.0 - _2448;
    float _2499 = (0.5 / (((_2463 * ((_2462 * _2488) + _2448)) + 9.9999999392252902907785028219223e-09) + (((_2463 * _2488) + _2448) * _2462))) * _2462;
    float _4533 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2501 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
    uint _2515 = _2187 + 9u;
    float _2526 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _745) * 0.949999988079071044921875);
    float _2527 = _2526 * _2526;
    float _2528 = cbLight._m0[_2227].x + _821;
    float _2529 = cbLight._m0[_2227].y + _822;
    float _2530 = cbLight._m0[_2227].z + _823;
    float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
    float _2535 = _2534 * _2528;
    float _2536 = _2534 * _2529;
    float _2537 = _2534 * _2530;
    float _2538 = dot(vec3(_742, _743, _744), vec3(cbLight._m0[_2227].xyz));
    float _4544 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2541 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2542 = dot(vec3(_742, _743, _744), vec3(_2535, _2536, _2537));
    float _4555 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2545 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2546 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2535, _2536, _2537));
    float _4566 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2550 = _2527 * _2527;
    float _2554 = ((_2545 * _2545) * (_2550 + (-1.0))) + 1.0;
    float _2563 = (exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2564 = 1.0 - _2527;
    float _2574 = (0.5 / (((_2463 * ((_2541 * _2564) + _2527)) + 9.9999999392252902907785028219223e-09) + (((_2463 * _2564) + _2527) * _2541))) * _2541;
    float _4577 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2576 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2550 / ((_2554 * _2554) * 3.141590118408203125));
    float _2586 = (((_2563 * cbLight._m0[_2515].x) * _2576) * _2210) + ((((cbLight._m0[_2434].x * _2176) * _2487) * _2501) * _2223);
    float _2587 = (((_2563 * cbLight._m0[_2515].y) * _2576) * _2210) + ((((cbLight._m0[_2434].y * _2178) * _2487) * _2501) * _2223);
    float _2588 = (((_2563 * cbLight._m0[_2515].z) * _2576) * _2210) + ((((cbLight._m0[_2434].z * _2180) * _2487) * _2501) * _2223);
    float _2644;
    float _2646;
    float _2648;
    if (_2263)
    {
        _2644 = _2586;
        _2646 = _2587;
        _2648 = _2588;
    }
    else
    {
        uint _2650 = _2187 + 2u;
        uint _2654 = _2187 + 10u;
        float _2668 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2650].w)) * _745) * 0.949999988079071044921875);
        float _2669 = _2668 * _2668;
        float _2670 = cbLight._m0[_2650].x + _821;
        float _2671 = cbLight._m0[_2650].y + _822;
        float _2672 = cbLight._m0[_2650].z + _823;
        float _2676 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
        float _2677 = _2676 * _2670;
        float _2678 = _2676 * _2671;
        float _2679 = _2676 * _2672;
        float _2680 = dot(vec3(_742, _743, _744), vec3(cbLight._m0[_2650].xyz));
        float _4588 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2683 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _2684 = dot(vec3(_742, _743, _744), vec3(_2677, _2678, _2679));
        float _4599 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2687 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _2688 = dot(vec3(cbLight._m0[_2650].xyz), vec3(_2677, _2678, _2679));
        float _4610 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2692 = _2669 * _2669;
        float _2696 = ((_2687 * _2687) * (_2692 + (-1.0))) + 1.0;
        float _2705 = (exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2706 = 1.0 - _2669;
        float _2716 = (0.5 / (((_2463 * ((_2683 * _2706) + _2669)) + 9.9999999392252902907785028219223e-09) + (((_2463 * _2706) + _2669) * _2683))) * _2683;
        float _4621 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2718 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2692 / ((_2696 * _2696) * 3.141590118408203125));
        float _2719 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2644 = (((_2705 * cbLight._m0[_2654].x) * _2718) * _2719) + _2586;
        _2646 = (((_2705 * cbLight._m0[_2654].y) * _2718) * _2719) + _2587;
        _2648 = (((_2705 * cbLight._m0[_2654].z) * _2718) * _2719) + _2588;
    }
    float _2750;
    float _2752;
    float _2754;
    if (_2372)
    {
        _2750 = _2644;
        _2752 = _2646;
        _2754 = _2648;
    }
    else
    {
        uint _2761 = _2187 + 3u;
        uint _2765 = _2187 + 11u;
        float _2779 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2761].w)) * _745) * 0.949999988079071044921875);
        float _2780 = _2779 * _2779;
        float _2781 = cbLight._m0[_2761].x + _821;
        float _2782 = cbLight._m0[_2761].y + _822;
        float _2783 = cbLight._m0[_2761].z + _823;
        float _2787 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
        float _2788 = _2787 * _2781;
        float _2789 = _2787 * _2782;
        float _2790 = _2787 * _2783;
        float _2791 = dot(vec3(_742, _743, _744), vec3(cbLight._m0[_2761].xyz));
        float _4637 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2794 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _2795 = dot(vec3(_742, _743, _744), vec3(_2788, _2789, _2790));
        float _4648 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2798 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2799 = dot(vec3(cbLight._m0[_2761].xyz), vec3(_2788, _2789, _2790));
        float _4659 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2803 = _2780 * _2780;
        float _2807 = ((_2798 * _2798) * (_2803 + (-1.0))) + 1.0;
        float _2816 = (exp2(log2(1.0 - (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2817 = 1.0 - _2780;
        float _2827 = (0.5 / (((_2463 * ((_2794 * _2817) + _2780)) + 9.9999999392252902907785028219223e-09) + (((_2463 * _2817) + _2780) * _2794))) * _2794;
        float _4670 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2829 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2803 / ((_2807 * _2807) * 3.141590118408203125));
        float _2830 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2750 = (((_2816 * cbLight._m0[_2765].x) * _2829) * _2830) + _2644;
        _2752 = (((_2816 * cbLight._m0[_2765].y) * _2829) * _2830) + _2646;
        _2754 = (((_2816 * cbLight._m0[_2765].z) * _2829) * _2830) + _2648;
    }
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    if (_2185.y == 0u)
    {
        uvec4 _2851 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2852 = _2851.x;
        uint _2863 = uint((float(_2851.y) * floor(float(uint(cbSceneParam._m0[85u].y * _830) / _2852))) + floor(float(uint(cbSceneParam._m0[85u].x * _829) / _2852)));
        float _2873 = (log2(_1963 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2874 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        uint _2877 = uint(isnan(14.0) ? _2874 : (isnan(_2874) ? 14.0 : min(_2874, 14.0)));
        uvec4 _2882 = texelFetch(g_lightClusterGridBuffer, int(((_2877 << 2u) + (_2863 << 6u)) >> 2u));
        uint _2883 = _2882.x;
        uint _2884 = _2851.z;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        if (((((1u << ((_2884 >> 4u) & 15u)) + 4294967295u) & _2883) == 0u) || ((_2884 & 240u) == 0u))
        {
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
            _2971 = 0.0;
            _2973 = 0.0;
        }
        else
        {
            float _2964;
            float _2966;
            float _2968;
            float _2970;
            float _2972;
            float _2974;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            uint _3113 = 0u;
            uint _3122;
            bool _3123;
            for (;;)
            {
                _3122 = texelFetch(g_lightClassification, int((((_2877 << 5u) + (_2863 << 9u)) + (_3113 << 2u)) >> 2u)).x;
                _3123 = _3122 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3123)
                {
                    frontier_phi_66_pred = _3112;
                    frontier_phi_66_pred_1 = _3111;
                    frontier_phi_66_pred_2 = _3110;
                    frontier_phi_66_pred_3 = _3109;
                    frontier_phi_66_pred_4 = _3108;
                    frontier_phi_66_pred_5 = _3107;
                }
                else
                {
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    uint _3237;
                    _3231 = _3107;
                    _3232 = _3108;
                    _3233 = _3109;
                    _3234 = _3110;
                    _3235 = _3111;
                    _3236 = _3112;
                    _3237 = _3122;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    for (;;)
                    {
                        uint _3241 = uint(findLSB(_3237)) + (_3113 << 5u);
                        uint _3238 = (_3237 + 4294967295u) & _3237;
                        uint _3243 = _3241 * 48u;
                        vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3243)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 3u)).x));
                        uint _3263 = (_3241 * 48u) + 4u;
                        vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 3u)).x));
                        uint _3282 = (_3241 * 48u) + 8u;
                        vec3 _3293 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3282)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3282 + 2u)).x));
                        float _3297 = _3257.x - _1961;
                        float _3298 = _3257.y - _1962;
                        float _3299 = _3257.z - _1963;
                        float _3300 = dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299));
                        float _3303 = inversesqrt(_3300);
                        float _3304 = _3303 * _3297;
                        float _3305 = _3303 * _3298;
                        float _3306 = _3303 * _3299;
                        float _3307 = dot(vec3(_848, _851, _854), vec3(_3304, _3305, _3306));
                        float _3312 = 1.0 - (_3300 * _3257.w);
                        float _4696 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3313 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                        float _3314 = sqrt(_3300) * _3276.w;
                        float _3317 = 1.39999997615814208984375 / (_3314 + 1.39999997615814208984375);
                        float _3318 = _3317 * _3317;
                        float _3321 = ((1.0 - _3318) * _3307) + _3318;
                        float _3324 = _3314 * _3314;
                        float _3328 = ((isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0))) * _3313) / ((_3324 * 0.699999988079071044921875) + 1.0);
                        float _3332 = (-0.0) - _1961;
                        float _3333 = (-0.0) - _1962;
                        float _3334 = (-0.0) - _1963;
                        float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                        float _3339 = _3338 * _3332;
                        float _3340 = _3338 * _3333;
                        float _3341 = _3338 * _3334;
                        float _3348 = exp2(log2(1.0 / ((_3324 * 3.5) + 5.0)) * 0.25);
                        float _3349 = 1.0 - _908;
                        float _3356 = sqrt(1.0 - ((1.0 - (_3349 * _3349)) * (1.0 - (_3348 * _3348))));
                        float _3357 = _3356 * _3356;
                        float _3358 = _3357 * _3357;
                        float _3359 = _3339 + _3304;
                        float _3360 = _3340 + _3305;
                        float _3361 = _3341 + _3306;
                        float _3365 = inversesqrt(dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361)));
                        float _3369 = dot(vec3(_848, _851, _854), vec3(_3339, _3340, _3341));
                        float _4712 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3372 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                        float _3373 = dot(vec3(_848, _851, _854), vec3(_3365 * _3359, _3365 * _3360, _3365 * _3361));
                        float _4723 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                        float _3376 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                        float _3380 = ((_3376 * _3376) * (_3358 + (-1.0))) + 1.0;
                        float _3381 = _3317 * _3357;
                        float _3382 = _3381 * _3381;
                        float _3385 = ((1.0 - _3382) * _3307) + _3382;
                        float _4734 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3386 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                        float _3387 = 1.0 - _3357;
                        float _3397 = (0.5 / (((_3386 * ((_3372 * _3387) + _3357)) + 9.9999999392252902907785028219223e-09) + (((_3386 * _3387) + _3357) * _3372))) * _3386;
                        float _4745 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3408 = (((_3358 * 3.1415927410125732421875) * (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) / ((_3380 * _3380) * ((_3324 * 2.1991131305694580078125) + 3.141590118408203125))) * _3313;
                        _3166 = (_3328 * _3276.x) + _3234;
                        _3167 = (_3328 * _3276.y) + _3235;
                        _3168 = (_3328 * _3276.z) + _3236;
                        _3163 = (_3408 * _3293.x) + _3231;
                        _3164 = (_3408 * _3293.y) + _3232;
                        _3165 = (_3408 * _3293.z) + _3233;
                        if (_3238 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3231 = _3163;
                            _3232 = _3164;
                            _3233 = _3165;
                            _3234 = _3166;
                            _3235 = _3167;
                            _3236 = _3168;
                            _3237 = _3238;
                        }
                    }
                    frontier_phi_66_pred = _3168;
                    frontier_phi_66_pred_1 = _3167;
                    frontier_phi_66_pred_2 = _3166;
                    frontier_phi_66_pred_3 = _3165;
                    frontier_phi_66_pred_4 = _3164;
                    frontier_phi_66_pred_5 = _3163;
                }
                _2974 = frontier_phi_66_pred;
                _2972 = frontier_phi_66_pred_1;
                _2970 = frontier_phi_66_pred_2;
                _2968 = frontier_phi_66_pred_3;
                _2966 = frontier_phi_66_pred_4;
                _2964 = frontier_phi_66_pred_5;
                uint _3114 = _3113 + 1u;
                if (_3114 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3107 = _2964;
                    _3108 = _2966;
                    _3109 = _2968;
                    _3110 = _2970;
                    _3111 = _2972;
                    _3112 = _2974;
                    _3113 = _3114;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
            _2971 = _2972;
            _2973 = _2974;
        }
        uvec4 _2977 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2978 = _2977.z;
        uint _2980 = (_2978 >> 8u) & 15u;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        if (((4294967295u << _2980) & _2883) == 0u)
        {
            _3075 = _2963;
            _3077 = _2965;
            _3079 = _2967;
            _3081 = _2969;
            _3083 = _2971;
            _3085 = _2973;
        }
        else
        {
            float _3100 = inversesqrt(dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963)));
            float _3101 = _3100 * _1961;
            float _3102 = _3100 * _1962;
            float _3103 = _3100 * _1963;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2980 < ((_2978 >> 12u) & 15u))
            {
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3084;
                float _3086;
                float _3214 = _2963;
                float _3215 = _2965;
                float _3216 = _2967;
                float _3217 = _2969;
                float _3218 = _2971;
                float _3219 = _2973;
                uint _3220 = _2980;
                uint _3229;
                bool _3230;
                for (;;)
                {
                    _3229 = texelFetch(g_lightClassification, int((((_2877 << 5u) + (_2863 << 9u)) + (_3220 << 2u)) >> 2u)).x;
                    _3230 = _3229 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3230)
                    {
                        frontier_phi_72_pred = _3219;
                        frontier_phi_72_pred_1 = _3218;
                        frontier_phi_72_pred_2 = _3217;
                        frontier_phi_72_pred_3 = _3216;
                        frontier_phi_72_pred_4 = _3215;
                        frontier_phi_72_pred_5 = _3214;
                    }
                    else
                    {
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3426 = _3214;
                        float _3427 = _3215;
                        float _3428 = _3216;
                        float _3429 = _3217;
                        float _3430 = _3218;
                        float _3431 = _3219;
                        uint _3432 = _3229;
                        uint _3433;
                        vec4 _3458;
                        float _3459;
                        vec4 _3474;
                        vec3 _3486;
                        vec4 _3501;
                        vec4 _3517;
                        float _3563;
                        bool _3564;
                        for (;;)
                        {
                            uint _3443 = ((_3220 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3432));
                            _3433 = (_3432 + 4294967295u) & _3432;
                            uint _3445 = _3443 * 40u;
                            _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            _3459 = _3458.w;
                            uint _3461 = (_3443 * 40u) + 4u;
                            _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3476 = (_3443 * 40u) + 8u;
                            _3486 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x));
                            uint _3488 = (_3443 * 40u) + 16u;
                            _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3504 = (_3443 * 40u) + 20u;
                            _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            uint _3519 = (_3443 * 40u) + 24u;
                            vec4 _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            uint _3538 = (_3443 * 40u) + 28u;
                            vec4 _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            _3563 = fma(_1963, _3551.z, fma(_1962, _3551.y, _3551.x * _1961)) + _3551.w;
                            _3564 = !((fma(_1963, _3532.z, fma(_1962, _3532.y, _3532.x * _1961)) + _3532.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3564)
                            {
                                float _3591 = _3458.x - _1961;
                                float _3592 = _3458.y - _1962;
                                float _3593 = _3458.z - _1963;
                                float _3594 = dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593));
                                float _3597 = inversesqrt(_3594);
                                float _3598 = _3597 * _3591;
                                float _3599 = _3597 * _3592;
                                float _3600 = _3597 * _3593;
                                float _3604 = 1.0 - (_3594 / (_3459 * _3459));
                                float _4756 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3605 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                                float _3609 = sqrt(_3594) * _3474.w;
                                float _3611 = 1.39999997615814208984375 / (_3609 + 1.39999997615814208984375);
                                float _3612 = _3611 * _3611;
                                float _3615 = ((1.0 - _3612) * dot(vec3(_3598, _3599, _3600), vec3(_848, _851, _854))) + _3612;
                                float _3618 = _3609 * _3609;
                                float _3622 = (fma(_1963, _3501.z, fma(_1962, _3501.y, _3501.x * _1961)) + _3501.w) / _3563;
                                float _3623 = (fma(_1963, _3517.z, fma(_1962, _3517.y, _3517.x * _1961)) + _3517.w) / _3563;
                                float _3627 = 1.0 - dot(vec2(_3622, _3623), vec2(_3622, _3623));
                                float _4772 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3628 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                                float _3629 = _3628 * (((isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0))) * _3605) / ((_3618 * 0.699999988079071044921875) + 1.0));
                                float _3641 = exp2(log2(1.0 / ((_3618 * 3.5) + 5.0)) * 0.25);
                                float _3642 = 1.0 - _908;
                                float _3649 = sqrt(1.0 - ((1.0 - (_3642 * _3642)) * (1.0 - (_3641 * _3641))));
                                float _3650 = _3649 * _3649;
                                float _3651 = _3650 * _3650;
                                float _3652 = _3598 - _3101;
                                float _3653 = _3599 - _3102;
                                float _3654 = _3600 - _3103;
                                float _3658 = inversesqrt(dot(vec3(_3652, _3653, _3654), vec3(_3652, _3653, _3654)));
                                float _3662 = dot(vec3(_848, _851, _854), vec3((-0.0) - _3101, (-0.0) - _3102, (-0.0) - _3103));
                                float _4783 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3665 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                                float _3666 = dot(vec3(_848, _851, _854), vec3(_3658 * _3652, _3658 * _3653, _3658 * _3654));
                                float _4794 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3669 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                                float _3673 = ((_3669 * _3669) * (_3651 + (-1.0))) + 1.0;
                                float _3674 = _3611 * _3650;
                                float _3675 = _3674 * _3674;
                                float _3681 = ((1.0 - _3675) * dot(vec3(_848, _851, _854), vec3(_3598, _3599, _3600))) + _3675;
                                float _4805 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3682 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3683 = 1.0 - _3650;
                                float _3693 = (0.5 / (((_3682 * ((_3665 * _3683) + _3650)) + 9.9999999392252902907785028219223e-09) + (((_3682 * _3683) + _3650) * _3665))) * _3682;
                                float _4816 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3703 = (_3628 * _3605) * (((_3651 * 3.1415927410125732421875) * (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0)))) / ((_3673 * _3673) * ((_3618 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3629 * _3474.y;
                                frontier_phi_78_pred_1 = _3629 * _3474.x;
                                frontier_phi_78_pred_2 = _3703 * _3486.z;
                                frontier_phi_78_pred_3 = _3703 * _3486.y;
                                frontier_phi_78_pred_4 = _3703 * _3486.x;
                                frontier_phi_78_pred_5 = _3629 * _3474.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3711 = frontier_phi_78_pred;
                            _3710 = frontier_phi_78_pred_1;
                            _3709 = frontier_phi_78_pred_2;
                            _3708 = frontier_phi_78_pred_3;
                            _3707 = frontier_phi_78_pred_4;
                            _3712 = frontier_phi_78_pred_5;
                            _3416 = _3710 + _3429;
                            _3417 = _3711 + _3430;
                            _3418 = _3712 + _3431;
                            _3413 = _3707 + _3426;
                            _3414 = _3708 + _3427;
                            _3415 = _3709 + _3428;
                            if (_3433 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3433;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3418;
                        frontier_phi_72_pred_1 = _3417;
                        frontier_phi_72_pred_2 = _3416;
                        frontier_phi_72_pred_3 = _3415;
                        frontier_phi_72_pred_4 = _3414;
                        frontier_phi_72_pred_5 = _3413;
                    }
                    _3086 = frontier_phi_72_pred;
                    _3084 = frontier_phi_72_pred_1;
                    _3082 = frontier_phi_72_pred_2;
                    _3080 = frontier_phi_72_pred_3;
                    _3078 = frontier_phi_72_pred_4;
                    _3076 = frontier_phi_72_pred_5;
                    uint _3221 = _3220 + 1u;
                    if (_3221 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3214 = _3076;
                        _3215 = _3078;
                        _3216 = _3080;
                        _3217 = _3082;
                        _3218 = _3084;
                        _3219 = _3086;
                        _3220 = _3221;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3086;
                frontier_phi_60_61_ladder_1 = _3084;
                frontier_phi_60_61_ladder_2 = _3080;
                frontier_phi_60_61_ladder_3 = _3078;
                frontier_phi_60_61_ladder_4 = _3076;
                frontier_phi_60_61_ladder_5 = _3082;
            }
            else
            {
                frontier_phi_60_61_ladder = _2973;
                frontier_phi_60_61_ladder_1 = _2971;
                frontier_phi_60_61_ladder_2 = _2967;
                frontier_phi_60_61_ladder_3 = _2965;
                frontier_phi_60_61_ladder_4 = _2963;
                frontier_phi_60_61_ladder_5 = _2969;
            }
            _3075 = frontier_phi_60_61_ladder_4;
            _3077 = frontier_phi_60_61_ladder_3;
            _3079 = frontier_phi_60_61_ladder_2;
            _3081 = frontier_phi_60_61_ladder_5;
            _3083 = frontier_phi_60_61_ladder_1;
            _3085 = frontier_phi_60_61_ladder;
        }
        float _3090 = isnan(1.0) ? _892 : (isnan(_892) ? 1.0 : min(_892, 1.0));
        _2896 = (_3090 * _3081) + _2427;
        _2898 = (_3090 * _3083) + _2429;
        _2900 = (_3090 * _3085) + _2431;
        _2902 = ((_3075 * 0.039999999105930328369140625) * _3090) + _2750;
        _2904 = ((_3077 * 0.039999999105930328369140625) * _3090) + _2752;
        _2906 = ((_3079 * 0.039999999105930328369140625) * _3090) + _2754;
    }
    else
    {
        _2896 = _2427;
        _2898 = _2429;
        _2900 = _2431;
        _2902 = _2750;
        _2904 = _2752;
        _2906 = _2754;
    }
    float _4832 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4843 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4854 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    uint _2926 = _247 + 6u;
    float _2934 = _829 / cbSceneParam._m0[86u].x;
    float _2935 = _830 / cbSceneParam._m0[86u].y;
    vec4 _2949 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2934, _2935, (log2((isnan(cbSceneParam._m0[77u].w) ? _763 : (isnan(_763) ? cbSceneParam._m0[77u].w : min(_763, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2951 = _2949.x;
    float _2952 = _2949.y;
    float _2953 = _2949.z;
    float _2954 = _2949.w;
    float _3025;
    float _3027;
    float _3029;
    float _3031;
    if (_763 > cbSceneParam._m0[78u].w)
    {
        float _2988 = isnan(_763) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _763 : min(cbSceneParam._m0[80u].w, _763));
        float _2989 = _2988 / _763;
        float _3000 = _2989 * _814;
        float _3001 = _815 * _2989;
        float _3002 = (-0.0) - _3001;
        float _3003 = _2989 * _816;
        float _3005 = (cbSceneParam._m0[77u].w * _3002) / _2988;
        float _3006 = _3005 + cbSceneParam._m0[79u].w;
        float _3007 = cbSceneParam._m0[79u].w - _3001;
        float _3013 = sqrt(((_3000 * _3000) + (_3001 * _3001)) + (_3003 * _3003));
        float _3016 = (1.0 - (cbSceneParam._m0[77u].w / _2988)) * _3013;
        float _3021 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3023 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3176;
        if (abs((_3002 - _3005) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3176 = ((((_3006 > 0.0) ? exp2(_3021 * _3006) : (2.0 - exp2(_3023 * _3006))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3016;
        }
        else
        {
            float _3136 = 1.0 / cbSceneParam._m0[80u].x;
            float _3137 = isnan(_3007) ? _3006 : (isnan(_3006) ? _3007 : max(_3006, _3007));
            float _3138 = isnan(_3007) ? _3006 : (isnan(_3006) ? _3007 : min(_3006, _3007));
            float _3147 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : min(_3137, 0.0));
            float _3148 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : min(_3138, 0.0));
            _3176 = ((abs(_3013 / _3002) * cbSceneParam._m0[80u].y) * ((((_3147 - _3148) * 2.0) - ((exp2(_3021 * (isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0)))) - exp2(_3021 * (isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0))))) * _3136)) - ((exp2(_3023 * _3147) - exp2(_3023 * _3148)) * _3136))) + (_3016 * cbSceneParam._m0[80u].z);
        }
        vec4 _3178 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2934, _2935, 1.0), 0.0);
        float _3187 = exp2((_3176 * (-1.44269502162933349609375)) * (1.0 - _3178.w));
        float _3188 = log2(_3187);
        float _3204 = log2(_2954);
        _3025 = (exp2(_3204 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].x)) * _3178.x) / cbSceneParam._m0[78u].x)) + _2951;
        _3027 = (exp2(_3204 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].y)) * _3178.y) / cbSceneParam._m0[78u].y)) + _2952;
        _3029 = (exp2(_3204 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].z)) * _3178.z) / cbSceneParam._m0[78u].z)) + _2953;
        _3031 = _3187 * _2954;
    }
    else
    {
        _3025 = _2951;
        _3027 = _2952;
        _3029 = _2953;
        _3031 = _2954;
    }
    float _3043 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3044 = _3043 == 3.0;
    float _3045 = log2(_3031);
    float _3052 = exp2(_3045 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0))) * (_2896 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _892))) + ((_2902 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1697)) * cbPerFrame._m0[3u].x));
    float _3053 = exp2(_3045 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * (_2898 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _892))) + ((_2904 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1697)) * cbPerFrame._m0[3u].x));
    float _3054 = exp2(_3045 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * (_2900 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _892))) + ((_2906 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1697)) * cbPerFrame._m0[3u].x));
    float _3063 = (_3043 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3063 * (_3044 ? _3052 : (_3052 + (cbSceneParam._m0[72u].w * _3025)));
    SV_Target.y = _3063 * (_3044 ? _3053 : (_3053 + (cbSceneParam._m0[72u].w * _3027)));
    SV_Target.z = _3063 * (_3044 ? _3054 : (_3054 + (cbSceneParam._m0[72u].w * _3029)));
    SV_Target.w = cbInstanceData._m0[_2926].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2926].w;
}


