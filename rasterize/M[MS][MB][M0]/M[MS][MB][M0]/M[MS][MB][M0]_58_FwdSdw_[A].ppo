#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1221;
float _3864;
float _3865;
float _3866;
float _3867;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _294 = _288.x * cbMtdParam._m0[9u].x;
    float _295 = _288.y * cbMtdParam._m0[9u].y;
    float _296 = _288.z * cbMtdParam._m0[9u].z;
    vec4 _315 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _335 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _361 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _365 = _361.z;
    float _369 = (_361.x * 2.0) + (-1.0);
    float _370 = (_361.y * 2.0) + (-1.0);
    float _371 = dot(vec2(_369, _370), vec2(_369, _370));
    float _3876 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _377 = sqrt(1.0 - (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))));
    float _382 = _369 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_335.x * 2.0) + (-1.0)));
    float _383 = _370 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_335.y * 2.0) + (-1.0)));
    float _386 = fma(_377, _237, fma(_383, _244, _382 * _230));
    float _389 = fma(_377, _238, fma(_383, _245, _382 * _231));
    float _392 = fma(_377, _239, fma(_383, _246, _382 * _232));
    float _396 = inversesqrt(dot(vec3(_386, _389, _392), vec3(_386, _389, _392)));
    vec4 _432 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _434 = _432.x;
    float _435 = 1.0 - _434;
    float _442 = ((_434 - _435) * cbMtdParam._m0[24u].z) + _435;
    float _444 = (cbMtdParam._m0[19u].x + dot(vec4(_396 * _386, _396 * _389, _396 * _392, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_442 * cbMtdParam._m0[21u].z);
    float _3887 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _447 = (-0.0) - cbMtdParam._m0[24u].y;
    float _449 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _449 : (isnan(_449) ? 1.0 : min(_449, 1.0));
    float _457 = _445 - ((_445 * TEXCOORD_8.x) * _450);
    float _458 = _445 - ((_445 * TEXCOORD_8.y) * _450);
    float _459 = _445 - ((_445 * TEXCOORD_8.z) * _450);
    float _466 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _470 = ((isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : min(_466, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _478 = (_470 - (((_442 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _470))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3918 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _483 = ((_457 * ((_315.x * cbMtdParam._m0[18u].x) - _294)) * _479) + _294;
    float _484 = ((_458 * ((_315.y * cbMtdParam._m0[18u].y) - _295)) * _479) + _295;
    float _485 = ((_459 * ((_315.z * cbMtdParam._m0[18u].z) - _296)) * _479) + _296;
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _499 = _497.x;
    float _500 = 1.0 - _499;
    float _529 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_499 - _500) * cbMtdParam._m0[24u].w) + _500) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3929 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _538 = ((((cbMtdParam._m0[10u].x - _483) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _530) + _483;
    float _539 = ((((cbMtdParam._m0[10u].y - _484) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _530) + _484;
    float _540 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _485)) * _530) + _485;
    float _545 = (((_335.z - _365) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _365;
    vec4 _559 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _566 = (_559.x * 2.0) + (-1.0);
    float _567 = (_559.y * 2.0) + (-1.0);
    float _568 = dot(vec2(_566, _567), vec2(_566, _567));
    float _3940 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _577 = (((_559.z - _545) * _457) * _479) + _545;
    float _580 = ((cbMtdParam._m0[23u].y - _577) * _530) + _577;
    vec4 _599 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _605 = (_599.x * 2.0) + (-1.0);
    float _606 = (_599.y * 2.0) + (-1.0);
    float _607 = dot(vec2(_605, _606), vec2(_605, _606));
    float _3951 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _627 = (((cbMtdParam._m0[21u].x * _382) + ((_566 - _382) * _457)) * _479) + _382;
    float _628 = (((cbMtdParam._m0[21u].x * _383) + ((_567 - _383) * _458)) * _479) + _383;
    float _629 = (((sqrt(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) - _377) * _459) * _479) + _377;
    float _640 = (((_605 - _627) + (_627 * cbMtdParam._m0[22u].z)) * _530) + _627;
    float _641 = (((_606 - _628) + (_628 * cbMtdParam._m0[22u].z)) * _530) + _628;
    float _642 = ((sqrt(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) - _629) * _530) + _629;
    float _644 = cbMtdParam._m0[22u].x + _361.w;
    float _647 = fma(_642, _237, fma(_641, _244, _640 * _230));
    float _650 = fma(_642, _238, fma(_641, _245, _640 * _231));
    float _653 = fma(_642, _239, fma(_641, _246, _640 * _232));
    float _657 = inversesqrt(dot(vec3(_647, _650, _653), vec3(_647, _650, _653)));
    float _658 = _657 * _647;
    float _659 = _657 * _650;
    float _660 = _657 * _653;
    float _3962 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _661 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _3984 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _3995 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4006 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _679 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _729 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _719);
    float _730 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _719);
    float _731 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _719);
    float _735 = inversesqrt(dot(vec3(_729, _730, _731), vec3(_729, _730, _731)));
    float _736 = _729 * _735;
    float _737 = _730 * _735;
    float _738 = _731 * _735;
    vec4 _743 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _745 = _743.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _902 = sqrt(((_729 * _729) + (_730 * _730)) + (_731 * _731));
        float _908 = (cbMatDynParam._m0[5u].x * _902) + cbMatDynParam._m0[5u].y;
        float _4017 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _913 = (cbMatDynParam._m0[5u].z * _902) + cbMatDynParam._m0[5u].w;
        float _4028 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) - _909)) + _909) < ((_745 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _757 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _758 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _778 = fma(_660, cbSceneParam._m0[5u].z, fma(_659, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _658));
    float _781 = fma(_660, cbSceneParam._m0[6u].z, fma(_659, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _658));
    float _784 = fma(_660, cbSceneParam._m0[7u].z, fma(_659, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _658));
    uint _797 = _249 + 9u;
    uint _798 = _797 + uint(cbMatDynParam._m0[0u].w);
    float _804 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * cbInstanceData._m0[_798].x;
    float _805 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * cbInstanceData._m0[_798].y;
    float _806 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * cbInstanceData._m0[_798].z;
    float _4039 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _4050 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    vec4 _818 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _757, cbSceneParam._m0[86u].y * _758));
    float _822 = ((isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * TEXCOORD_5.w) * _818.x;
    float _823 = dot(vec3(_658, _659, _660), vec3(_736, _737, _738));
    float _826 = _823 * 2.0;
    float _830 = (_826 * _658) - _736;
    float _831 = (_826 * _659) - _737;
    float _832 = (_826 * _660) - _738;
    float _836 = abs(dot(vec3(_736, _737, _738), vec3(_658, _659, _660)));
    float _4072 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _838 = sqrt(_661);
    float _851 = exp2((_838 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_838 * 3.0));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1220;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _945 = fma(_891, cbModelParam._m0[26u].z, fma(_887, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883));
        float _949 = fma(_891, cbModelParam._m0[27u].z, fma(_887, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883));
        float _953 = fma(_891, cbModelParam._m0[28u].z, fma(_887, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883));
        float _978 = _883 + _658;
        float _979 = _887 + _659;
        float _980 = _891 + _660;
        float _990 = fma(_980, cbModelParam._m0[26u].z, fma(_979, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _978)) - _945;
        float _991 = fma(_980, cbModelParam._m0[27u].z, fma(_979, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _978)) - _949;
        float _992 = fma(_980, cbModelParam._m0[28u].z, fma(_979, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _978)) - _953;
        float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
        float _1009 = ((_996 * _990) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_945 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_996 * _991) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_949 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1011 = ((_996 * _992) / cbModelParam._m0[34u].z) + ((((((_953 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1009, _1010, _1011), 0.0);
        float _1048 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1014.x + (-0.5));
        float _1050 = _1048 * (_1014.y + (-0.5));
        float _1051 = _1048 * (_1014.z + (-0.5));
        float _1058 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1021.x + (-0.5));
        float _1060 = _1058 * (_1021.y + (-0.5));
        float _1061 = _1058 * (_1021.z + (-0.5));
        float _1068 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1028.x + (-0.5));
        float _1070 = _1068 * (_1028.y + (-0.5));
        float _1071 = _1068 * (_1028.z + (-0.5));
        float _1078 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1035.x + (-0.5));
        float _1080 = _1078 * (_1035.y + (-0.5));
        float _1081 = _1078 * (_1035.z + (-0.5));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = _1049 * 0.5;
        float _1086 = _1059 * 0.5;
        float _1087 = _1069 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1102 = (dot(vec3(_658, _659, _660), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1112 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _4120 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1114 + 1.0))) + _1119) * _1082;
        float _1129 = _1050 * 0.5;
        float _1130 = _1060 * 0.5;
        float _1131 = _1070 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_658, _659, _660), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _4153 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1156 + 1.0))) + _1161) * _1083;
        float _1171 = _1051 * 0.5;
        float _1172 = _1061 * 0.5;
        float _1173 = _1071 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_658, _659, _660), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _4186 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1198 + 1.0))) + _1203) * _1084;
        _1220 = _1051;
        _1222 = _1050;
        _1223 = _1049;
        _1224 = _1061;
        _1225 = _1060;
        _1226 = _1059;
        _1227 = _1071;
        _1228 = _1070;
        _1229 = _1069;
        _1230 = _1084;
        _1231 = _1083;
        _1232 = _1082;
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1234 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1235 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
    }
    else
    {
        _1220 = _1221;
        _1222 = _1221;
        _1223 = _1221;
        _1224 = _1221;
        _1225 = _1221;
        _1226 = _1221;
        _1227 = _1221;
        _1228 = _1221;
        _1229 = _1221;
        _1230 = _1221;
        _1231 = _1221;
        _1232 = _1221;
        _1233 = 0.0;
        _1234 = 0.0;
        _1235 = 0.0;
    }
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1263 = fma(_891, cbModelParam._m0[30u].z, fma(_887, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _883));
        float _1267 = fma(_891, cbModelParam._m0[31u].z, fma(_887, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _883));
        float _1271 = fma(_891, cbModelParam._m0[32u].z, fma(_887, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _883));
        float _1294 = _883 + _658;
        float _1295 = _887 + _659;
        float _1296 = _891 + _660;
        float _1306 = fma(_1296, cbModelParam._m0[30u].z, fma(_1295, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1294)) - _1263;
        float _1307 = fma(_1296, cbModelParam._m0[31u].z, fma(_1295, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1294)) - _1267;
        float _1308 = fma(_1296, cbModelParam._m0[32u].z, fma(_1295, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1294)) - _1271;
        float _1312 = inversesqrt(dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308)));
        float _1325 = ((_1312 * _1306) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1263 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1312 * _1307) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1267 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1312 * _1308) / cbModelParam._m0[35u].z) + ((((((_1271 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        float _1362 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1329.x + (-0.5));
        float _1364 = _1362 * (_1329.y + (-0.5));
        float _1365 = _1362 * (_1329.z + (-0.5));
        float _1372 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1336.x + (-0.5));
        float _1374 = _1372 * (_1336.y + (-0.5));
        float _1375 = _1372 * (_1336.z + (-0.5));
        float _1382 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1343.x + (-0.5));
        float _1384 = _1382 * (_1343.y + (-0.5));
        float _1385 = _1382 * (_1343.z + (-0.5));
        float _1392 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1350.x + (-0.5));
        float _1394 = _1392 * (_1350.y + (-0.5));
        float _1395 = _1392 * (_1350.z + (-0.5));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = _1363 * 0.5;
        float _1400 = _1373 * 0.5;
        float _1401 = _1383 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_658, _659, _660), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4227 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4238 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4249 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_1426 + 1.0))) + _1431) * _1396;
        float _1441 = _1364 * 0.5;
        float _1442 = _1374 * 0.5;
        float _1443 = _1384 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_658, _659, _660), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4282 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1468 + 1.0))) + _1473) * _1397;
        float _1483 = _1365 * 0.5;
        float _1484 = _1375 * 0.5;
        float _1485 = _1385 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_658, _659, _660), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4315 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1510 + 1.0))) + _1515) * _1398;
        _1532 = _1365;
        _1533 = _1364;
        _1534 = _1363;
        _1535 = _1375;
        _1536 = _1374;
        _1537 = _1373;
        _1538 = _1385;
        _1539 = _1384;
        _1540 = _1383;
        _1541 = _1398;
        _1542 = _1397;
        _1543 = _1396;
        _1544 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
    }
    else
    {
        _1532 = _1221;
        _1533 = _1221;
        _1534 = _1221;
        _1535 = _1221;
        _1536 = _1221;
        _1537 = _1221;
        _1538 = _1221;
        _1539 = _1221;
        _1540 = _1221;
        _1541 = _1221;
        _1542 = _1221;
        _1543 = _1221;
        _1544 = 0.0;
        _1545 = 0.0;
        _1546 = 0.0;
    }
    float _1556 = (cbModelParam._m0[1u].x * (_1544 - _1233)) + _1233;
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1234)) + _1234;
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1235)) + _1235;
    float _1579 = fma(_1558, cbSceneParam._m0[89u].z, fma(_1557, cbSceneParam._m0[89u].y, _1556 * cbSceneParam._m0[89u].x));
    float _1582 = fma(_1558, cbSceneParam._m0[90u].z, fma(_1557, cbSceneParam._m0[90u].y, _1556 * cbSceneParam._m0[90u].x));
    float _1585 = fma(_1558, cbSceneParam._m0[91u].z, fma(_1557, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1556));
    float _1600 = _830 * 0.5;
    float _1601 = _831 * 0.5;
    float _1602 = _832 * 0.5;
    float _1603 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1606 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1609 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1532, _1535, _1538, _1541));
    float _1643;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1616 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1220, _1224, _1227, _1230));
        float _1620 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1222, _1225, _1228, _1231));
        float _1624 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1223, _1226, _1229, _1232));
        float _1631 = dot(vec4(cbModelParam._m0[39u]), vec4(_1600, _1601, _1602, 1.0));
        _1643 = dot(vec3(isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1631) ? 0.0 : (isnan(0.0) ? _1631 : max(0.0, _1631))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1643 = 1.0;
    }
    float _1654;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1645 = dot(vec4(cbModelParam._m0[40u]), vec4(_1600, _1601, _1602, 1.0));
        _1654 = dot(vec3(isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1654 = 1.0;
    }
    float _1658 = (_1654 * cbModelParam._m0[1u].x) + (_1643 * (1.0 - cbModelParam._m0[1u].x));
    float _1668 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _661);
    float _1669 = isnan(_1668) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1668 : min(cbModelParam._m0[25u].z, _1668));
    float _1749;
    float _1751;
    float _1753;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1716 = fma(_891, cbModelParam._m0[13u].z, fma(_887, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _883)) + cbModelParam._m0[13u].w;
        float _1720 = fma(_891, cbModelParam._m0[14u].z, fma(_887, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _883)) + cbModelParam._m0[14u].w;
        float _1724 = fma(_891, cbModelParam._m0[15u].z, fma(_887, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _883)) + cbModelParam._m0[15u].w;
        float _1727 = fma(_832, cbModelParam._m0[13u].z, fma(_831, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _830));
        float _1730 = fma(_832, cbModelParam._m0[14u].z, fma(_831, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _830));
        float _1733 = fma(_832, cbModelParam._m0[15u].z, fma(_831, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _830));
        float _1761;
        if (_1727 > 0.0)
        {
            _1761 = abs((1.0 - _1716) / _1727);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1716 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1761 = frontier_phi_17_15_ladder;
        }
        float _1931;
        if (_1730 > 0.0)
        {
            _1931 = abs((1.0 - _1720) / _1730);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1720 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1931 = frontier_phi_26_22_ladder;
        }
        float _2227;
        if (_1733 > 0.0)
        {
            _2227 = abs((1.0 - _1724) / _1733);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1724 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2227 = frontier_phi_38_33_ladder;
        }
        float _2229 = isnan(_1931) ? _1761 : (isnan(_1761) ? _1931 : min(_1761, _1931));
        float _2230 = isnan(_2227) ? _2229 : (isnan(_2229) ? _2227 : min(_2229, _2227));
        float _2234 = (_2230 * _1727) + _1716;
        float _2235 = (_2230 * _1730) + _1720;
        float _2236 = (_2230 * _1733) + _1724;
        float _2237 = _2230 * 9.9999997473787516355514526367188e-05;
        float _2239 = (-1.0) - _2237;
        float _2241 = _2237 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2236 > _2241) || ((_2236 < _2239) || ((_2235 > _2241) || ((_2235 < _2239) || ((_2234 < _2239) || (_2234 > _2241))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2381 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2236, cbModelParam._m0[9u].z, fma(_2235, cbModelParam._m0[9u].y, _2234 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2236, cbModelParam._m0[10u].z, fma(_2235, cbModelParam._m0[10u].y, _2234 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2236, cbModelParam._m0[11u].z, fma(_2235, cbModelParam._m0[11u].y, _2234 * cbModelParam._m0[11u].x))), _1669);
            frontier_phi_16_38_ladder = _2381.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2381.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2381.x * cbModelParam._m0[1u].y;
        }
        _1749 = frontier_phi_16_38_ladder_2;
        _1751 = frontier_phi_16_38_ladder_1;
        _1753 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1737 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_830, _831, _832), _1669);
        _1749 = _1737.x * cbModelParam._m0[1u].y;
        _1751 = _1737.y * cbModelParam._m0[1u].y;
        _1753 = _1737.z * cbModelParam._m0[1u].y;
    }
    float _1757 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _661);
    float _1758 = isnan(_1757) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1757 : min(cbModelParam._m0[25u].w, _1757));
    float _1847;
    float _1849;
    float _1851;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1811 = fma(_891, cbModelParam._m0[21u].z, fma(_887, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _883)) + cbModelParam._m0[21u].w;
        float _1815 = fma(_891, cbModelParam._m0[22u].z, fma(_887, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _883)) + cbModelParam._m0[22u].w;
        float _1819 = fma(_891, cbModelParam._m0[23u].z, fma(_887, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _883)) + cbModelParam._m0[23u].w;
        float _1822 = fma(_832, cbModelParam._m0[21u].z, fma(_831, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _830));
        float _1825 = fma(_832, cbModelParam._m0[22u].z, fma(_831, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _830));
        float _1828 = fma(_832, cbModelParam._m0[23u].z, fma(_831, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _830));
        float _1936;
        if (_1822 > 0.0)
        {
            _1936 = abs((1.0 - _1811) / _1822);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1811 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1936 = frontier_phi_28_24_ladder;
        }
        float _2254;
        if (_1825 > 0.0)
        {
            _2254 = abs((1.0 - _1815) / _1825);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1815 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2254 = frontier_phi_40_35_ladder;
        }
        float _2581;
        if (_1828 > 0.0)
        {
            _2581 = abs((1.0 - _1819) / _1828);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1819 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2581 = frontier_phi_50_47_ladder;
        }
        float _2583 = isnan(_2254) ? _1936 : (isnan(_1936) ? _2254 : min(_1936, _2254));
        float _2584 = isnan(_2581) ? _2583 : (isnan(_2583) ? _2581 : min(_2583, _2581));
        float _2588 = (_2584 * _1822) + _1811;
        float _2589 = (_2584 * _1825) + _1815;
        float _2590 = (_2584 * _1828) + _1819;
        float _2591 = _2584 * 9.9999997473787516355514526367188e-05;
        float _2592 = (-1.0) - _2591;
        float _2594 = _2591 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2590 > _2594) || ((_2590 < _2592) || ((_2589 > _2594) || ((_2589 < _2592) || ((_2588 < _2592) || (_2588 > _2594))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2708 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2590, cbModelParam._m0[17u].z, fma(_2589, cbModelParam._m0[17u].y, _2588 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2590, cbModelParam._m0[18u].z, fma(_2589, cbModelParam._m0[18u].y, _2588 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2590, cbModelParam._m0[19u].z, fma(_2589, cbModelParam._m0[19u].y, _2588 * cbModelParam._m0[19u].x))), _1758);
            frontier_phi_25_50_ladder = _2708.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2708.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2708.x * cbModelParam._m0[1u].z;
        }
        _1847 = frontier_phi_25_50_ladder_2;
        _1849 = frontier_phi_25_50_ladder_1;
        _1851 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1831 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_830, _831, _832), _1758);
        _1847 = _1831.x * cbModelParam._m0[1u].z;
        _1849 = _1831.y * cbModelParam._m0[1u].z;
        _1851 = _1831.z * cbModelParam._m0[1u].z;
    }
    float _1863 = ((((1.0 - _851) * ((_838 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_851 * _838)) * _822;
    float _1864 = _1863 * ((cbModelParam._m0[1u].w * (_1847 - _1749)) + _1749);
    float _1865 = _1863 * ((cbModelParam._m0[1u].w * (_1849 - _1751)) + _1751);
    float _1866 = _1863 * ((cbModelParam._m0[1u].w * (_1851 - _1753)) + _1753);
    float _1869 = fma(_1866, cbSceneParam._m0[89u].z, fma(_1865, cbSceneParam._m0[89u].y, _1864 * cbSceneParam._m0[89u].x));
    float _1872 = fma(_1866, cbSceneParam._m0[90u].z, fma(_1865, cbSceneParam._m0[90u].y, _1864 * cbSceneParam._m0[90u].x));
    float _1875 = fma(_1866, cbSceneParam._m0[91u].z, fma(_1865, cbSceneParam._m0[91u].y, _1864 * cbSceneParam._m0[91u].x));
    float _1910 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1914 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1918 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1922 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1923 = _1910 / _1922;
    float _1924 = _1914 / _1922;
    float _1925 = _1918 / _1922;
    float _2072;
    float _2073;
    float _2074;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1952 = ((uint(_1925 > cbSceneParam._m0[59u].y) + uint(_1925 > cbSceneParam._m0[59u].x)) + uint(_1925 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1953 = _1952 + 43u;
        uint _1961 = _1952 + 44u;
        uint _1969 = _1952 + 45u;
        uint _1977 = _1952 + 46u;
        float _1988 = fma(_1922, cbSceneParam._m0[_1953].w, fma(_1918, cbSceneParam._m0[_1953].z, fma(_1914, cbSceneParam._m0[_1953].y, _1910 * cbSceneParam._m0[_1953].x)));
        float _1992 = fma(_1922, cbSceneParam._m0[_1961].w, fma(_1918, cbSceneParam._m0[_1961].z, fma(_1914, cbSceneParam._m0[_1961].y, _1910 * cbSceneParam._m0[_1961].x)));
        float _2000 = fma(_1922, cbSceneParam._m0[_1977].w, fma(_1918, cbSceneParam._m0[_1977].z, fma(_1914, cbSceneParam._m0[_1977].y, _1910 * cbSceneParam._m0[_1977].x)));
        float _2005 = cbSceneParam._m0[33u].z * _2000;
        float _2007 = cbSceneParam._m0[33u].w * _2000;
        float _2010 = fma(_1922, cbSceneParam._m0[_1969].w, fma(_1918, cbSceneParam._m0[_1969].z, fma(_1914, cbSceneParam._m0[_1969].y, _1910 * cbSceneParam._m0[_1969].x))) / _2000;
        float _2058 = (cbSceneParam._m0[33u].x - sqrt(((_1924 * _1924) + (_1923 * _1923)) + (_1925 * _1925))) * cbSceneParam._m0[33u].y;
        float _4441 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2065 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2005 + _1988) / _2000, (_2007 + _1992) / _2000), _2010), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2007 + _1988) / _2000, (_1992 - _2005) / _2000), _2010), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1988 - _2005) / _2000, (_1992 - _2007) / _2000), _2010), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1988 - _2007) / _2000, (_2005 + _1992) / _2000), _2010), 0.0)).x), vec4(0.25)));
        _2072 = 1.0 - (_2065 * cbSceneParam._m0[34u].x);
        _2073 = 1.0 - (_2065 * cbSceneParam._m0[34u].y);
        _2074 = 1.0 - (_2065 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2072 = 1.0;
        _2073 = 1.0;
        _2074 = 1.0;
    }
    float _2138;
    float _2140;
    float _2142;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2126 = fma(_1922, cbSceneParam._m0[63u].w, fma(_1918, cbSceneParam._m0[63u].z, fma(_1914, cbSceneParam._m0[63u].y, _1910 * cbSceneParam._m0[63u].x)));
        float _2127 = fma(_1922, cbSceneParam._m0[60u].w, fma(_1918, cbSceneParam._m0[60u].z, fma(_1914, cbSceneParam._m0[60u].y, _1910 * cbSceneParam._m0[60u].x))) / _2126;
        float _2128 = fma(_1922, cbSceneParam._m0[61u].w, fma(_1918, cbSceneParam._m0[61u].z, fma(_1914, cbSceneParam._m0[61u].y, _1910 * cbSceneParam._m0[61u].x))) / _2126;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2127 >= cbSceneParam._m0[64u].x) && (_2128 >= cbSceneParam._m0[64u].y)) && (_2127 <= cbSceneParam._m0[64u].z)) && (_2128 <= cbSceneParam._m0[64u].w))
        {
            float _2267 = fma(_1922, cbSceneParam._m0[62u].w, fma(_1918, cbSceneParam._m0[62u].z, fma(_1914, cbSceneParam._m0[62u].y, _1910 * cbSceneParam._m0[62u].x))) / _2126;
            float _2271 = isnan(cbSceneParam._m0[41u].w) ? _2267 : (isnan(_2267) ? cbSceneParam._m0[41u].w : max(_2267, cbSceneParam._m0[41u].w));
            float _2314 = (cbSceneParam._m0[33u].x - sqrt(((_1924 * _1924) + (_1923 * _1923)) + (_1925 * _1925))) * cbSceneParam._m0[33u].y;
            float _4457 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
            float _2321 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2127, cbSceneParam._m0[33u].w + _2128), _2271), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2127, _2128 - cbSceneParam._m0[33u].z), _2271), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2127 - cbSceneParam._m0[33u].z, _2128 - cbSceneParam._m0[33u].w), _2271), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2127 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2128), _2271), 0.0)).x), vec4(0.25)));
            float _2325 = 1.0 - (_2321 * cbSceneParam._m0[34u].x);
            float _2326 = 1.0 - (_2321 * cbSceneParam._m0[34u].y);
            float _2327 = 1.0 - (_2321 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2327) ? _2074 : (isnan(_2074) ? _2327 : min(_2074, _2327));
            frontier_phi_37_36_ladder_1 = isnan(_2326) ? _2073 : (isnan(_2073) ? _2326 : min(_2073, _2326));
            frontier_phi_37_36_ladder_2 = isnan(_2325) ? _2072 : (isnan(_2072) ? _2325 : min(_2072, _2325));
        }
        else
        {
            frontier_phi_37_36_ladder = _2074;
            frontier_phi_37_36_ladder_1 = _2073;
            frontier_phi_37_36_ladder_2 = _2072;
        }
        _2138 = frontier_phi_37_36_ladder_2;
        _2140 = frontier_phi_37_36_ladder_1;
        _2142 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2138 = _2072;
        _2140 = _2073;
        _2142 = _2074;
    }
    uvec4 _2147 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _2149 = _2147.x * 14u;
    uint _2150 = _2149 + 13u;
    float _2157 = _822 + (-1.0);
    float _2162 = (cbLight._m0[_2150].x * _2157) + 1.0;
    float _2163 = (cbLight._m0[_2150].y * _2157) + 1.0;
    float _2164 = (cbLight._m0[_2150].z * _2157) + 1.0;
    float _2165 = (cbLight._m0[_2150].w * _2157) + 1.0;
    uint _2166 = _2149 + 5u;
    float _2172 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
    uint _2176 = _2149 + 4u;
    float _2186 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
    uint _2190 = _2149 | 1u;
    float _2201 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_658, _659, _660));
    float _2204 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_658, _659, _660));
    float _4493 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _4504 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2209 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * 0.3183098733425140380859375;
    float _2211 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * 0.3183098733425140380859375;
    float _2218 = ((cbLight._m0[_2166].x * _2172) * _2211) + (((cbLight._m0[_2176].x * _2138) * _2186) * _2209);
    float _2219 = ((_2172 * cbLight._m0[_2166].y) * _2211) + (((cbLight._m0[_2176].y * _2140) * _2186) * _2209);
    float _2220 = ((_2172 * cbLight._m0[_2166].z) * _2211) + (((cbLight._m0[_2176].z * _2142) * _2186) * _2209);
    uvec4 _2224 = floatBitsToUint(cbLight._m0[_2149 + 12u]);
    bool _2226 = _2224.x == 0u;
    float _2328;
    float _2330;
    float _2332;
    if (_2226)
    {
        _2328 = _2218;
        _2330 = _2219;
        _2332 = _2220;
    }
    else
    {
        uint _2336 = _2149 + 6u;
        float _2352 = (dot(vec3(cbLight._m0[_2149 + 2u].xyz), vec3(_658, _659, _660)) * 0.5) + 0.5;
        float _2353 = _2352 * _2352;
        float _4515 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2354 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2355 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2328 = (((cbLight._m0[_2336].x * 0.3183098733425140380859375) * _2354) * _2355) + _2218;
        _2330 = (((cbLight._m0[_2336].y * 0.3183098733425140380859375) * _2354) * _2355) + _2219;
        _2332 = (((cbLight._m0[_2336].z * 0.3183098733425140380859375) * _2354) * _2355) + _2220;
    }
    bool _2335 = _2224.y == 0u;
    float _2390;
    float _2392;
    float _2394;
    if (_2335)
    {
        _2390 = _2328;
        _2392 = _2330;
        _2394 = _2332;
    }
    else
    {
        uint _2552 = _2149 + 7u;
        float _2568 = (dot(vec3(cbLight._m0[_2149 + 3u].xyz), vec3(_658, _659, _660)) * 0.5) + 0.5;
        float _2569 = _2568 * _2568;
        float _4531 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2570 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2571 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2390 = (((cbLight._m0[_2552].x * 0.3183098733425140380859375) * _2570) * _2571) + _2328;
        _2392 = (((cbLight._m0[_2552].y * 0.3183098733425140380859375) * _2570) * _2571) + _2330;
        _2394 = (((cbLight._m0[_2552].z * 0.3183098733425140380859375) * _2570) * _2571) + _2332;
    }
    uint _2397 = _2149 + 8u;
    float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _661) * 0.949999988079071044921875);
    float _2411 = _2410 * _2410;
    float _2412 = cbLight._m0[_2149].x + _736;
    float _2413 = cbLight._m0[_2149].y + _737;
    float _2414 = cbLight._m0[_2149].z + _738;
    float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
    float _2419 = _2418 * _2412;
    float _2420 = _2418 * _2413;
    float _2421 = _2418 * _2414;
    float _2422 = dot(vec3(_658, _659, _660), vec3(cbLight._m0[_2149].xyz));
    float _4547 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2425 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _4558 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _2426 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2427 = dot(vec3(_658, _659, _660), vec3(_2419, _2420, _2421));
    float _4569 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2430 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2431 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2419, _2420, _2421));
    float _4580 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2435 = _2411 * _2411;
    float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
    float _2450 = (exp2(log2(1.0 - (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2451 = 1.0 - _2411;
    float _2462 = (0.5 / (((_2426 * ((_2425 * _2451) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2426 * _2451) + _2411) * _2425))) * _2425;
    float _4591 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2464 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
    uint _2478 = _2149 + 9u;
    float _2489 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _661) * 0.949999988079071044921875);
    float _2490 = _2489 * _2489;
    float _2491 = cbLight._m0[_2190].x + _736;
    float _2492 = cbLight._m0[_2190].y + _737;
    float _2493 = cbLight._m0[_2190].z + _738;
    float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
    float _2498 = _2497 * _2491;
    float _2499 = _2497 * _2492;
    float _2500 = _2497 * _2493;
    float _2501 = dot(vec3(_658, _659, _660), vec3(cbLight._m0[_2190].xyz));
    float _4602 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2504 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2505 = dot(vec3(_658, _659, _660), vec3(_2498, _2499, _2500));
    float _4613 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2508 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2509 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2498, _2499, _2500));
    float _4624 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2513 = _2490 * _2490;
    float _2517 = ((_2508 * _2508) * (_2513 + (-1.0))) + 1.0;
    float _2526 = (exp2(log2(1.0 - (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2527 = 1.0 - _2490;
    float _2537 = (0.5 / (((_2426 * ((_2504 * _2527) + _2490)) + 9.9999999392252902907785028219223e-09) + (((_2426 * _2527) + _2490) * _2504))) * _2504;
    float _4635 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2539 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2513 / ((_2517 * _2517) * 3.141590118408203125));
    float _2549 = (((_2526 * cbLight._m0[_2478].x) * _2539) * _2172) + ((((cbLight._m0[_2397].x * _2138) * _2450) * _2464) * _2186);
    float _2550 = (((_2526 * cbLight._m0[_2478].y) * _2539) * _2172) + ((((cbLight._m0[_2397].y * _2140) * _2450) * _2464) * _2186);
    float _2551 = (((_2526 * cbLight._m0[_2478].z) * _2539) * _2172) + ((((cbLight._m0[_2397].z * _2142) * _2450) * _2464) * _2186);
    float _2607;
    float _2609;
    float _2611;
    if (_2226)
    {
        _2607 = _2549;
        _2609 = _2550;
        _2611 = _2551;
    }
    else
    {
        uint _2613 = _2149 + 2u;
        uint _2617 = _2149 + 10u;
        float _2631 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2613].w)) * _661) * 0.949999988079071044921875);
        float _2632 = _2631 * _2631;
        float _2633 = cbLight._m0[_2613].x + _736;
        float _2634 = cbLight._m0[_2613].y + _737;
        float _2635 = cbLight._m0[_2613].z + _738;
        float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
        float _2640 = _2639 * _2633;
        float _2641 = _2639 * _2634;
        float _2642 = _2639 * _2635;
        float _2643 = dot(vec3(_658, _659, _660), vec3(cbLight._m0[_2613].xyz));
        float _4646 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2646 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2647 = dot(vec3(_658, _659, _660), vec3(_2640, _2641, _2642));
        float _4657 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2650 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2651 = dot(vec3(cbLight._m0[_2613].xyz), vec3(_2640, _2641, _2642));
        float _4668 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2655 = _2632 * _2632;
        float _2659 = ((_2650 * _2650) * (_2655 + (-1.0))) + 1.0;
        float _2668 = (exp2(log2(1.0 - (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2669 = 1.0 - _2632;
        float _2679 = (0.5 / (((_2426 * ((_2646 * _2669) + _2632)) + 9.9999999392252902907785028219223e-09) + (((_2426 * _2669) + _2632) * _2646))) * _2646;
        float _4679 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2681 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2655 / ((_2659 * _2659) * 3.141590118408203125));
        float _2682 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2607 = (((_2668 * cbLight._m0[_2617].x) * _2681) * _2682) + _2549;
        _2609 = (((_2668 * cbLight._m0[_2617].y) * _2681) * _2682) + _2550;
        _2611 = (((_2668 * cbLight._m0[_2617].z) * _2681) * _2682) + _2551;
    }
    float _2713;
    float _2715;
    float _2717;
    if (_2335)
    {
        _2713 = _2607;
        _2715 = _2609;
        _2717 = _2611;
    }
    else
    {
        uint _2724 = _2149 + 3u;
        uint _2728 = _2149 + 11u;
        float _2742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2724].w)) * _661) * 0.949999988079071044921875);
        float _2743 = _2742 * _2742;
        float _2744 = cbLight._m0[_2724].x + _736;
        float _2745 = cbLight._m0[_2724].y + _737;
        float _2746 = cbLight._m0[_2724].z + _738;
        float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
        float _2751 = _2750 * _2744;
        float _2752 = _2750 * _2745;
        float _2753 = _2750 * _2746;
        float _2754 = dot(vec3(_658, _659, _660), vec3(cbLight._m0[_2724].xyz));
        float _4695 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2757 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2758 = dot(vec3(_658, _659, _660), vec3(_2751, _2752, _2753));
        float _4706 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2761 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2762 = dot(vec3(cbLight._m0[_2724].xyz), vec3(_2751, _2752, _2753));
        float _4717 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2766 = _2743 * _2743;
        float _2770 = ((_2761 * _2761) * (_2766 + (-1.0))) + 1.0;
        float _2779 = (exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2780 = 1.0 - _2743;
        float _2790 = (0.5 / (((_2426 * ((_2757 * _2780) + _2743)) + 9.9999999392252902907785028219223e-09) + (((_2426 * _2780) + _2743) * _2757))) * _2757;
        float _4728 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2792 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2766 / ((_2770 * _2770) * 3.141590118408203125));
        float _2793 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2713 = (((_2779 * cbLight._m0[_2728].x) * _2792) * _2793) + _2607;
        _2715 = (((_2779 * cbLight._m0[_2728].y) * _2792) * _2793) + _2609;
        _2717 = (((_2779 * cbLight._m0[_2728].z) * _2792) * _2793) + _2611;
    }
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    if (_2147.y == 0u)
    {
        uvec4 _2814 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2815 = _2814.x;
        uint _2826 = uint((float(_2814.y) * floor(float(uint(cbSceneParam._m0[85u].y * _758) / _2815))) + floor(float(uint(cbSceneParam._m0[85u].x * _757) / _2815)));
        float _2836 = (log2(_1925 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2837 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        uint _2840 = uint(isnan(14.0) ? _2837 : (isnan(_2837) ? 14.0 : min(_2837, 14.0)));
        uvec4 _2845 = texelFetch(g_lightClusterGridBuffer, int(((_2840 << 2u) + (_2826 << 6u)) >> 2u));
        uint _2846 = _2845.x;
        uint _2847 = _2814.z;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((((1u << ((_2847 >> 4u) & 15u)) + 4294967295u) & _2846) == 0u) || ((_2847 & 240u) == 0u))
        {
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
        }
        else
        {
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            uint _3084 = 0u;
            uint _3093;
            bool _3094;
            for (;;)
            {
                _3093 = texelFetch(g_lightClassification, int((((_2840 << 5u) + (_2826 << 9u)) + (_3084 << 2u)) >> 2u)).x;
                _3094 = _3093 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3094)
                {
                    frontier_phi_71_pred = _3083;
                    frontier_phi_71_pred_1 = _3082;
                    frontier_phi_71_pred_2 = _3081;
                    frontier_phi_71_pred_3 = _3080;
                    frontier_phi_71_pred_4 = _3079;
                    frontier_phi_71_pred_5 = _3078;
                }
                else
                {
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    uint _3229;
                    _3223 = _3078;
                    _3224 = _3079;
                    _3225 = _3080;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3093;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    for (;;)
                    {
                        uint _3233 = uint(findLSB(_3229)) + (_3084 << 5u);
                        uint _3230 = (_3229 + 4294967295u) & _3229;
                        uint _3235 = _3233 * 48u;
                        vec4 _3249 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 3u)).x));
                        uint _3255 = (_3233 * 48u) + 4u;
                        vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3255)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 3u)).x));
                        uint _3274 = (_3233 * 48u) + 8u;
                        vec3 _3285 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x));
                        float _3289 = _3249.x - _1923;
                        float _3290 = _3249.y - _1924;
                        float _3291 = _3249.z - _1925;
                        float _3292 = dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291));
                        float _3295 = inversesqrt(_3292);
                        float _3296 = _3295 * _3289;
                        float _3297 = _3295 * _3290;
                        float _3298 = _3295 * _3291;
                        float _3299 = dot(vec3(_778, _781, _784), vec3(_3296, _3297, _3298));
                        float _3304 = 1.0 - (_3292 * _3249.w);
                        float _4754 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3305 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3306 = sqrt(_3292) * _3268.w;
                        float _3309 = 1.39999997615814208984375 / (_3306 + 1.39999997615814208984375);
                        float _3310 = _3309 * _3309;
                        float _3313 = ((1.0 - _3310) * _3299) + _3310;
                        float _3316 = _3306 * _3306;
                        float _3320 = ((isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0))) * _3305) / ((_3316 * 0.699999988079071044921875) + 1.0);
                        float _3324 = (-0.0) - _1923;
                        float _3325 = (-0.0) - _1924;
                        float _3326 = (-0.0) - _1925;
                        float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                        float _3331 = _3330 * _3324;
                        float _3332 = _3330 * _3325;
                        float _3333 = _3330 * _3326;
                        float _3340 = exp2(log2(1.0 / ((_3316 * 3.5) + 5.0)) * 0.25);
                        float _3341 = 1.0 - _838;
                        float _3348 = sqrt(1.0 - ((1.0 - (_3341 * _3341)) * (1.0 - (_3340 * _3340))));
                        float _3349 = _3348 * _3348;
                        float _3350 = _3349 * _3349;
                        float _3351 = _3331 + _3296;
                        float _3352 = _3332 + _3297;
                        float _3353 = _3333 + _3298;
                        float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                        float _3361 = dot(vec3(_778, _781, _784), vec3(_3331, _3332, _3333));
                        float _4770 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3364 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3365 = dot(vec3(_778, _781, _784), vec3(_3357 * _3351, _3357 * _3352, _3357 * _3353));
                        float _4781 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3368 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3372 = ((_3368 * _3368) * (_3350 + (-1.0))) + 1.0;
                        float _3373 = _3309 * _3349;
                        float _3374 = _3373 * _3373;
                        float _3377 = ((1.0 - _3374) * _3299) + _3374;
                        float _4792 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                        float _3378 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3379 = 1.0 - _3349;
                        float _3389 = (0.5 / (((_3378 * ((_3364 * _3379) + _3349)) + 9.9999999392252902907785028219223e-09) + (((_3378 * _3379) + _3349) * _3364))) * _3378;
                        float _4803 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3400 = (((_3350 * 3.1415927410125732421875) * (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) / ((_3372 * _3372) * ((_3316 * 2.1991131305694580078125) + 3.141590118408203125))) * _3305;
                        _3153 = (_3320 * _3268.x) + _3226;
                        _3154 = (_3320 * _3268.y) + _3227;
                        _3155 = (_3320 * _3268.z) + _3228;
                        _3150 = (_3400 * _3285.x) + _3223;
                        _3151 = (_3400 * _3285.y) + _3224;
                        _3152 = (_3400 * _3285.z) + _3225;
                        if (_3230 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3223 = _3150;
                            _3224 = _3151;
                            _3225 = _3152;
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3230;
                        }
                    }
                    frontier_phi_71_pred = _3155;
                    frontier_phi_71_pred_1 = _3154;
                    frontier_phi_71_pred_2 = _3153;
                    frontier_phi_71_pred_3 = _3152;
                    frontier_phi_71_pred_4 = _3151;
                    frontier_phi_71_pred_5 = _3150;
                }
                _2937 = frontier_phi_71_pred;
                _2935 = frontier_phi_71_pred_1;
                _2933 = frontier_phi_71_pred_2;
                _2931 = frontier_phi_71_pred_3;
                _2929 = frontier_phi_71_pred_4;
                _2927 = frontier_phi_71_pred_5;
                uint _3085 = _3084 + 1u;
                if (_3085 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3078 = _2927;
                    _3079 = _2929;
                    _3080 = _2931;
                    _3081 = _2933;
                    _3082 = _2935;
                    _3083 = _2937;
                    _3084 = _3085;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
        }
        uvec4 _2940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2941 = _2940.z;
        uint _2943 = (_2941 >> 8u) & 15u;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        if (((4294967295u << _2943) & _2846) == 0u)
        {
            _3046 = _2926;
            _3048 = _2928;
            _3050 = _2930;
            _3052 = _2932;
            _3054 = _2934;
            _3056 = _2936;
        }
        else
        {
            float _3071 = inversesqrt(dot(vec3(_1923, _1924, _1925), vec3(_1923, _1924, _1925)));
            float _3072 = _3071 * _1923;
            float _3073 = _3071 * _1924;
            float _3074 = _3071 * _1925;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2943 < ((_2941 >> 12u) & 15u))
            {
                float _3047;
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3057;
                float _3206 = _2926;
                float _3207 = _2928;
                float _3208 = _2930;
                float _3209 = _2932;
                float _3210 = _2934;
                float _3211 = _2936;
                uint _3212 = _2943;
                uint _3221;
                bool _3222;
                for (;;)
                {
                    _3221 = texelFetch(g_lightClassification, int((((_2840 << 5u) + (_2826 << 9u)) + (_3212 << 2u)) >> 2u)).x;
                    _3222 = _3221 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3222)
                    {
                        frontier_phi_82_pred = _3211;
                        frontier_phi_82_pred_1 = _3210;
                        frontier_phi_82_pred_2 = _3209;
                        frontier_phi_82_pred_3 = _3208;
                        frontier_phi_82_pred_4 = _3207;
                        frontier_phi_82_pred_5 = _3206;
                    }
                    else
                    {
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3427 = _3206;
                        float _3428 = _3207;
                        float _3429 = _3208;
                        float _3430 = _3209;
                        float _3431 = _3210;
                        float _3432 = _3211;
                        uint _3433 = _3221;
                        uint _3434;
                        vec4 _3459;
                        float _3460;
                        vec4 _3475;
                        vec3 _3487;
                        vec4 _3503;
                        vec4 _3518;
                        float _3564;
                        bool _3565;
                        for (;;)
                        {
                            uint _3444 = ((_3212 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3433));
                            _3434 = (_3433 + 4294967295u) & _3433;
                            uint _3446 = _3444 * 40u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            _3460 = _3459.w;
                            uint _3462 = (_3444 * 40u) + 4u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3477 = (_3444 * 40u) + 8u;
                            _3487 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x));
                            uint _3490 = (_3444 * 40u) + 16u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3505 = (_3444 * 40u) + 20u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3444 * 40u) + 24u;
                            vec4 _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3539 = (_3444 * 40u) + 28u;
                            vec4 _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            _3564 = fma(_1925, _3552.z, fma(_1924, _3552.y, _3552.x * _1923)) + _3552.w;
                            _3565 = !((fma(_1925, _3533.z, fma(_1924, _3533.y, _3533.x * _1923)) + _3533.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3565)
                            {
                                float _3592 = _3459.x - _1923;
                                float _3593 = _3459.y - _1924;
                                float _3594 = _3459.z - _1925;
                                float _3595 = dot(vec3(_3592, _3593, _3594), vec3(_3592, _3593, _3594));
                                float _3598 = inversesqrt(_3595);
                                float _3599 = _3598 * _3592;
                                float _3600 = _3598 * _3593;
                                float _3601 = _3598 * _3594;
                                float _3605 = 1.0 - (_3595 / (_3460 * _3460));
                                float _4814 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3610 = sqrt(_3595) * _3475.w;
                                float _3612 = 1.39999997615814208984375 / (_3610 + 1.39999997615814208984375);
                                float _3613 = _3612 * _3612;
                                float _3616 = ((1.0 - _3613) * dot(vec3(_3599, _3600, _3601), vec3(_778, _781, _784))) + _3613;
                                float _3619 = _3610 * _3610;
                                float _3623 = (fma(_1925, _3503.z, fma(_1924, _3503.y, _3503.x * _1923)) + _3503.w) / _3564;
                                float _3624 = (fma(_1925, _3518.z, fma(_1924, _3518.y, _3518.x * _1923)) + _3518.w) / _3564;
                                float _3628 = 1.0 - dot(vec2(_3623, _3624), vec2(_3623, _3624));
                                float _4830 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3629 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3630 = _3629 * (((isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0))) * _3606) / ((_3619 * 0.699999988079071044921875) + 1.0));
                                float _3642 = exp2(log2(1.0 / ((_3619 * 3.5) + 5.0)) * 0.25);
                                float _3643 = 1.0 - _838;
                                float _3650 = sqrt(1.0 - ((1.0 - (_3643 * _3643)) * (1.0 - (_3642 * _3642))));
                                float _3651 = _3650 * _3650;
                                float _3652 = _3651 * _3651;
                                float _3653 = _3599 - _3072;
                                float _3654 = _3600 - _3073;
                                float _3655 = _3601 - _3074;
                                float _3659 = inversesqrt(dot(vec3(_3653, _3654, _3655), vec3(_3653, _3654, _3655)));
                                float _3663 = dot(vec3(_778, _781, _784), vec3((-0.0) - _3072, (-0.0) - _3073, (-0.0) - _3074));
                                float _4841 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3666 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3667 = dot(vec3(_778, _781, _784), vec3(_3659 * _3653, _3659 * _3654, _3659 * _3655));
                                float _4852 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3670 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3674 = ((_3670 * _3670) * (_3652 + (-1.0))) + 1.0;
                                float _3675 = _3612 * _3651;
                                float _3676 = _3675 * _3675;
                                float _3682 = ((1.0 - _3676) * dot(vec3(_778, _781, _784), vec3(_3599, _3600, _3601))) + _3676;
                                float _4863 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3684 = 1.0 - _3651;
                                float _3694 = (0.5 / (((_3683 * ((_3666 * _3684) + _3651)) + 9.9999999392252902907785028219223e-09) + (((_3683 * _3684) + _3651) * _3666))) * _3683;
                                float _4874 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3704 = (_3629 * _3606) * (((_3652 * 3.1415927410125732421875) * (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) / ((_3674 * _3674) * ((_3619 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3630 * _3475.z;
                                frontier_phi_88_pred_1 = _3630 * _3475.y;
                                frontier_phi_88_pred_2 = _3630 * _3475.x;
                                frontier_phi_88_pred_3 = _3704 * _3487.z;
                                frontier_phi_88_pred_4 = _3704 * _3487.y;
                                frontier_phi_88_pred_5 = _3704 * _3487.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3713 = frontier_phi_88_pred;
                            _3712 = frontier_phi_88_pred_1;
                            _3711 = frontier_phi_88_pred_2;
                            _3710 = frontier_phi_88_pred_3;
                            _3709 = frontier_phi_88_pred_4;
                            _3708 = frontier_phi_88_pred_5;
                            _3417 = _3711 + _3430;
                            _3418 = _3712 + _3431;
                            _3419 = _3713 + _3432;
                            _3414 = _3708 + _3427;
                            _3415 = _3709 + _3428;
                            _3416 = _3710 + _3429;
                            if (_3434 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3434;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3419;
                        frontier_phi_82_pred_1 = _3418;
                        frontier_phi_82_pred_2 = _3417;
                        frontier_phi_82_pred_3 = _3416;
                        frontier_phi_82_pred_4 = _3415;
                        frontier_phi_82_pred_5 = _3414;
                    }
                    _3057 = frontier_phi_82_pred;
                    _3055 = frontier_phi_82_pred_1;
                    _3053 = frontier_phi_82_pred_2;
                    _3051 = frontier_phi_82_pred_3;
                    _3049 = frontier_phi_82_pred_4;
                    _3047 = frontier_phi_82_pred_5;
                    uint _3213 = _3212 + 1u;
                    if (_3213 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3206 = _3047;
                        _3207 = _3049;
                        _3208 = _3051;
                        _3209 = _3053;
                        _3210 = _3055;
                        _3211 = _3057;
                        _3212 = _3213;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3053;
                frontier_phi_63_64_ladder_1 = _3057;
                frontier_phi_63_64_ladder_2 = _3055;
                frontier_phi_63_64_ladder_3 = _3051;
                frontier_phi_63_64_ladder_4 = _3049;
                frontier_phi_63_64_ladder_5 = _3047;
            }
            else
            {
                frontier_phi_63_64_ladder = _2932;
                frontier_phi_63_64_ladder_1 = _2936;
                frontier_phi_63_64_ladder_2 = _2934;
                frontier_phi_63_64_ladder_3 = _2930;
                frontier_phi_63_64_ladder_4 = _2928;
                frontier_phi_63_64_ladder_5 = _2926;
            }
            _3046 = frontier_phi_63_64_ladder_5;
            _3048 = frontier_phi_63_64_ladder_4;
            _3050 = frontier_phi_63_64_ladder_3;
            _3052 = frontier_phi_63_64_ladder;
            _3054 = frontier_phi_63_64_ladder_2;
            _3056 = frontier_phi_63_64_ladder_1;
        }
        float _3061 = isnan(1.0) ? _822 : (isnan(_822) ? 1.0 : min(_822, 1.0));
        _2859 = (_3061 * _3052) + _2390;
        _2861 = (_3061 * _3054) + _2392;
        _2863 = (_3061 * _3056) + _2394;
        _2865 = ((_3046 * 0.039999999105930328369140625) * _3061) + _2713;
        _2867 = ((_3048 * 0.039999999105930328369140625) * _3061) + _2715;
        _2869 = ((_3050 * 0.039999999105930328369140625) * _3061) + _2717;
    }
    else
    {
        _2859 = _2390;
        _2861 = _2392;
        _2863 = _2394;
        _2865 = _2713;
        _2867 = _2715;
        _2869 = _2717;
    }
    float _4890 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _4901 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4912 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _2886 = ((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2859 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _822))) + ((_2865 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1658)) * cbPerFrame._m0[3u].x);
    float _2887 = ((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2861 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _822))) + ((_2867 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1658)) * cbPerFrame._m0[3u].x);
    float _2888 = ((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2863 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _822))) + ((_2869 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1658)) * cbPerFrame._m0[3u].x);
    uint _2889 = _249 + 6u;
    float _2897 = _757 / cbSceneParam._m0[86u].x;
    float _2898 = _758 / cbSceneParam._m0[86u].y;
    vec4 _2912 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, (log2((isnan(cbSceneParam._m0[77u].w) ? _679 : (isnan(_679) ? cbSceneParam._m0[77u].w : min(_679, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2914 = _2912.x;
    float _2915 = _2912.y;
    float _2916 = _2912.z;
    float _2917 = _2912.w;
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    if (_679 > cbSceneParam._m0[78u].w)
    {
        float _2951 = isnan(_679) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _679 : min(cbSceneParam._m0[80u].w, _679));
        float _2952 = _2951 / _679;
        float _2963 = _2952 * _729;
        float _2964 = _730 * _2952;
        float _2965 = (-0.0) - _2964;
        float _2966 = _2952 * _731;
        float _2968 = (cbSceneParam._m0[77u].w * _2965) / _2951;
        float _2969 = _2968 + cbSceneParam._m0[79u].w;
        float _2970 = cbSceneParam._m0[79u].w - _2964;
        float _2976 = sqrt(((_2963 * _2963) + (_2964 * _2964)) + (_2966 * _2966));
        float _2979 = (1.0 - (cbSceneParam._m0[77u].w / _2951)) * _2976;
        float _2984 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2986 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3163;
        if (abs((_2965 - _2968) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3163 = ((((_2969 > 0.0) ? exp2(_2984 * _2969) : (2.0 - exp2(_2986 * _2969))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2979;
        }
        else
        {
            float _3107 = 1.0 / cbSceneParam._m0[80u].x;
            float _3108 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : max(_2969, _2970));
            float _3109 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : min(_2969, _2970));
            float _3118 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : min(_3108, 0.0));
            float _3119 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : min(_3109, 0.0));
            _3163 = ((abs(_2976 / _2965) * cbSceneParam._m0[80u].y) * ((((_3118 - _3119) * 2.0) - ((exp2(_2984 * (isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0)))) - exp2(_2984 * (isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0))))) * _3107)) - ((exp2(_2986 * _3118) - exp2(_2986 * _3119)) * _3107))) + (_2979 * cbSceneParam._m0[80u].z);
        }
        vec4 _3165 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, 1.0), 0.0);
        float _3174 = exp2((_3163 * (-1.44269502162933349609375)) * (1.0 - _3165.w));
        float _3175 = log2(_3174);
        float _3191 = log2(_2917);
        _2988 = (exp2(_3191 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].x)) * _3165.x) / cbSceneParam._m0[78u].x)) + _2914;
        _2990 = (exp2(_3191 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].y)) * _3165.y) / cbSceneParam._m0[78u].y)) + _2915;
        _2992 = (exp2(_3191 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3175 * cbSceneParam._m0[78u].z)) * _3165.z) / cbSceneParam._m0[78u].z)) + _2916;
        _2994 = _3174 * _2917;
    }
    else
    {
        _2988 = _2914;
        _2990 = _2915;
        _2992 = _2916;
        _2994 = _2917;
    }
    bool _3201;
    vec4 _3004;
    vec4 _3026;
    float _3028;
    float _3032;
    float _3033;
    float _3034;
    float _3035;
    bool _3045;
    for (;;)
    {
        _3004 = cbMatDynParam._m0[0u];
        float _3006 = roundEven(_3004.y);
        bool _3007 = _3006 == 3.0;
        float _3008 = log2(_2994);
        float _3015 = exp2(_3008 * cbSceneParam._m0[78u].x) * _2886;
        float _3016 = exp2(_3008 * cbSceneParam._m0[78u].y) * _2887;
        float _3017 = exp2(_3008 * cbSceneParam._m0[78u].z) * _2888;
        float _3024 = _745 + (-0.5);
        _3026 = cbMtdParam._m0[1u];
        _3028 = _3026.y * _3024;
        float _3031 = (_3006 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3032 = _3031 * (_3007 ? _3015 : (_3015 + (cbSceneParam._m0[72u].w * _2988)));
        _3033 = _3031 * (_3007 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2990)));
        _3034 = _3031 * (_3007 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2992)));
        _3035 = _3024 * 0.999000012874603271484375;
        _3045 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3045)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _3035) < 0.5)
            {
                _3201 = true;
                break;
            }
        }
        uint _3142 = _797 + uint(_3004.w);
        if ((cbInstanceData._m0[_3142].w < 1.0) && ((cbInstanceData._m0[_3142].w + _3035) < 0.5))
        {
            _3201 = true;
            break;
        }
        if ((_3028 + 1.0) < _3026.x)
        {
            _3201 = true;
            break;
        }
        _3201 = false;
        break;
    }
    float _3405;
    if (_3201)
    {
        discard_state = true;
        _3405 = 0.0;
    }
    else
    {
        _3405 = cbInstanceData._m0[_2889].w;
    }
    SV_Target.x = _3032;
    SV_Target.y = _3033;
    SV_Target.z = _3034;
    SV_Target.w = _3405;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2889].w;
    discard_exit();
}


