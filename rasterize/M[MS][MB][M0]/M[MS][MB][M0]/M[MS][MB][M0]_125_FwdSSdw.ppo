#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1140;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _356 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _356) * cbMtdParam._m0[24u].x) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3468 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    float _381 = (_374 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _382 = (_374 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _383 = (_374 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _402 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _258) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _259) + cbTextureTilingScale._m0[20u].w));
    vec4 _447 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _464 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _466 = _464.x;
    float _467 = _464.y;
    float _468 = _464.z;
    float _477 = ((_447.z - _468) * _374) + _468;
    float _480 = ((((_447.x - _466) * _374) + _466) * 2.0) + (-1.0);
    float _481 = ((((_447.y - _467) * _374) + _467) * 2.0) + (-1.0);
    float _482 = dot(vec2(_480, _481), vec2(_480, _481));
    float _3479 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _487 = sqrt(1.0 - (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))));
    vec4 _500 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _518 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _520 = _518.x;
    float _521 = 1.0 - _520;
    float _534 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_520 - _521) * cbMtdParam._m0[24u].z) + _521) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3490 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _542 = (_535 * ((_402.x * cbMtdParam._m0[18u].x) - _381)) + _381;
    float _543 = (_535 * ((_402.y * cbMtdParam._m0[18u].y) - _382)) + _382;
    float _544 = (_535 * ((_402.z * cbMtdParam._m0[18u].z) - _383)) + _383;
    float _549 = (((_422.z - _477) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _477;
    vec4 _562 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _569 = (_562.x * 2.0) + (-1.0);
    float _570 = (_562.y * 2.0) + (-1.0);
    float _571 = dot(vec2(_569, _570), vec2(_569, _570));
    float _3501 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _579 = (_535 * (_562.z - _549)) + _549;
    float _584 = _480 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_422.x * 2.0) + (-1.0)));
    float _585 = _481 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_422.y * 2.0) + (-1.0)));
    float _597 = (((_569 - _584) + (cbMtdParam._m0[21u].x * _584)) * _535) + _584;
    float _598 = (((_570 - _585) + (cbMtdParam._m0[21u].x * _585)) * _535) + _585;
    float _599 = (_535 * (sqrt(1.0 - (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0)))) - _487)) + _487;
    float _604 = cbMtdParam._m0[22u].x + _500.w;
    float _607 = fma(_599, _225 * NORMAL.x, fma(_598, _232 * TANGENT.x, (_218 * _210) * _597));
    float _610 = fma(_599, _225 * NORMAL.y, fma(_598, _232 * TANGENT.y, (_218 * _211) * _597));
    float _613 = fma(_599, _225 * NORMAL.z, fma(_598, _232 * TANGENT.z, (_218 * _212) * _597));
    float _617 = inversesqrt(dot(vec3(_607, _610, _613), vec3(_607, _610, _613)));
    float _618 = _617 * _607;
    float _619 = _617 * _610;
    float _620 = _617 * _613;
    float _3512 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _621 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _3523 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3534 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3545 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _3556 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _639 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _691 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _681);
    float _692 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _681);
    float _693 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _681);
    float _697 = inversesqrt(dot(vec3(_691, _692, _693), vec3(_691, _692, _693)));
    float _698 = _691 * _697;
    float _699 = _692 * _697;
    float _700 = _693 * _697;
    float _706 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _707 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _725 = fma(_620, cbSceneParam._m0[5u].z, fma(_619, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _618));
    float _728 = fma(_620, cbSceneParam._m0[6u].z, fma(_619, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _618));
    float _731 = fma(_620, cbSceneParam._m0[7u].z, fma(_619, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _618));
    uint _745 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _751 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) * cbInstanceData._m0[_745].x;
    float _752 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_745].y;
    float _753 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_745].z;
    float _3567 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _3578 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _755 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    vec4 _765 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _706, cbSceneParam._m0[86u].y * _707));
    float _769 = ((isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * TEXCOORD_5.w) * _765.x;
    float _770 = dot(vec3(_618, _619, _620), vec3(_698, _699, _700));
    float _773 = _770 * 2.0;
    float _777 = (_773 * _618) - _698;
    float _778 = (_773 * _619) - _699;
    float _779 = (_773 * _620) - _700;
    float _783 = abs(dot(vec3(_698, _699, _700), vec3(_618, _619, _620)));
    float _3600 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _785 = sqrt(_621);
    float _798 = exp2((_785 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_785 * 3.0));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _838 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1139;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _864 = fma(_838, cbModelParam._m0[26u].z, fma(_834, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _830));
        float _868 = fma(_838, cbModelParam._m0[27u].z, fma(_834, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _830));
        float _872 = fma(_838, cbModelParam._m0[28u].z, fma(_834, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _830));
        float _897 = _830 + _618;
        float _898 = _834 + _619;
        float _899 = _838 + _620;
        float _909 = fma(_899, cbModelParam._m0[26u].z, fma(_898, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _897)) - _864;
        float _910 = fma(_899, cbModelParam._m0[27u].z, fma(_898, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _897)) - _868;
        float _911 = fma(_899, cbModelParam._m0[28u].z, fma(_898, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _897)) - _872;
        float _915 = inversesqrt(dot(vec3(_909, _910, _911), vec3(_909, _910, _911)));
        float _928 = ((_915 * _909) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_864 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_915 * _910) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_868 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_915 * _911) / cbModelParam._m0[34u].z) + ((((((_872 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        float _967 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_933.x + (-0.5));
        float _969 = _967 * (_933.y + (-0.5));
        float _970 = _967 * (_933.z + (-0.5));
        float _977 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_940.x + (-0.5));
        float _979 = _977 * (_940.y + (-0.5));
        float _980 = _977 * (_940.z + (-0.5));
        float _987 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_947.x + (-0.5));
        float _989 = _987 * (_947.y + (-0.5));
        float _990 = _987 * (_947.z + (-0.5));
        float _997 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_954.x + (-0.5));
        float _999 = _997 * (_954.y + (-0.5));
        float _1000 = _997 * (_954.z + (-0.5));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = _968 * 0.5;
        float _1005 = _978 * 0.5;
        float _1006 = _988 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1021 = (dot(vec3(_618, _619, _620), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1031 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3648 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_1033 + 1.0))) + _1038) * _1001;
        float _1048 = _969 * 0.5;
        float _1049 = _979 * 0.5;
        float _1050 = _989 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_618, _619, _620), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3681 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1075 + 1.0))) + _1080) * _1002;
        float _1090 = _970 * 0.5;
        float _1091 = _980 * 0.5;
        float _1092 = _990 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_618, _619, _620), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3714 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1117 + 1.0))) + _1122) * _1003;
        _1139 = _970;
        _1141 = _969;
        _1142 = _968;
        _1143 = _980;
        _1144 = _979;
        _1145 = _978;
        _1146 = _990;
        _1147 = _989;
        _1148 = _988;
        _1149 = _1003;
        _1150 = _1002;
        _1151 = _1001;
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
    }
    else
    {
        _1139 = _1140;
        _1141 = _1140;
        _1142 = _1140;
        _1143 = _1140;
        _1144 = _1140;
        _1145 = _1140;
        _1146 = _1140;
        _1147 = _1140;
        _1148 = _1140;
        _1149 = _1140;
        _1150 = _1140;
        _1151 = _1140;
        _1152 = 0.0;
        _1153 = 0.0;
        _1154 = 0.0;
    }
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1179 = fma(_838, cbModelParam._m0[30u].z, fma(_834, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _830));
        float _1183 = fma(_838, cbModelParam._m0[31u].z, fma(_834, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _830));
        float _1187 = fma(_838, cbModelParam._m0[32u].z, fma(_834, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _830));
        float _1210 = _830 + _618;
        float _1211 = _834 + _619;
        float _1212 = _838 + _620;
        float _1222 = fma(_1212, cbModelParam._m0[30u].z, fma(_1211, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1210)) - _1179;
        float _1223 = fma(_1212, cbModelParam._m0[31u].z, fma(_1211, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1210)) - _1183;
        float _1224 = fma(_1212, cbModelParam._m0[32u].z, fma(_1211, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1210)) - _1187;
        float _1228 = inversesqrt(dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224)));
        float _1241 = ((_1228 * _1222) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1179 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1228 * _1223) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1183 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1228 * _1224) / cbModelParam._m0[35u].z) + ((((((_1187 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        float _1278 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1245.x + (-0.5));
        float _1280 = _1278 * (_1245.y + (-0.5));
        float _1281 = _1278 * (_1245.z + (-0.5));
        float _1288 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1252.x + (-0.5));
        float _1290 = _1288 * (_1252.y + (-0.5));
        float _1291 = _1288 * (_1252.z + (-0.5));
        float _1298 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1259.x + (-0.5));
        float _1300 = _1298 * (_1259.y + (-0.5));
        float _1301 = _1298 * (_1259.z + (-0.5));
        float _1308 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1266.x + (-0.5));
        float _1310 = _1308 * (_1266.y + (-0.5));
        float _1311 = _1308 * (_1266.z + (-0.5));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = _1279 * 0.5;
        float _1316 = _1289 * 0.5;
        float _1317 = _1299 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_618, _619, _620), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _3777 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1342 + 1.0))) + _1347) * _1312;
        float _1357 = _1280 * 0.5;
        float _1358 = _1290 * 0.5;
        float _1359 = _1300 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_618, _619, _620), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _3810 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1384 + 1.0))) + _1389) * _1313;
        float _1399 = _1281 * 0.5;
        float _1400 = _1291 * 0.5;
        float _1401 = _1301 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_618, _619, _620), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _3843 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1426 + 1.0))) + _1431) * _1314;
        _1448 = _1281;
        _1449 = _1280;
        _1450 = _1279;
        _1451 = _1291;
        _1452 = _1290;
        _1453 = _1289;
        _1454 = _1301;
        _1455 = _1300;
        _1456 = _1299;
        _1457 = _1314;
        _1458 = _1313;
        _1459 = _1312;
        _1460 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1461 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1462 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
    }
    else
    {
        _1448 = _1140;
        _1449 = _1140;
        _1450 = _1140;
        _1451 = _1140;
        _1452 = _1140;
        _1453 = _1140;
        _1454 = _1140;
        _1455 = _1140;
        _1456 = _1140;
        _1457 = _1140;
        _1458 = _1140;
        _1459 = _1140;
        _1460 = 0.0;
        _1461 = 0.0;
        _1462 = 0.0;
    }
    float _1472 = (cbModelParam._m0[1u].x * (_1460 - _1152)) + _1152;
    float _1473 = (cbModelParam._m0[1u].x * (_1461 - _1153)) + _1153;
    float _1474 = (cbModelParam._m0[1u].x * (_1462 - _1154)) + _1154;
    float _1495 = fma(_1474, cbSceneParam._m0[89u].z, fma(_1473, cbSceneParam._m0[89u].y, _1472 * cbSceneParam._m0[89u].x));
    float _1498 = fma(_1474, cbSceneParam._m0[90u].z, fma(_1473, cbSceneParam._m0[90u].y, _1472 * cbSceneParam._m0[90u].x));
    float _1501 = fma(_1474, cbSceneParam._m0[91u].z, fma(_1473, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1472));
    float _1516 = _777 * 0.5;
    float _1517 = _778 * 0.5;
    float _1518 = _779 * 0.5;
    float _1519 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1450, _1453, _1456, _1459));
    float _1522 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1449, _1452, _1455, _1458));
    float _1525 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1448, _1451, _1454, _1457));
    float _1559;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1532 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1139, _1143, _1146, _1149));
        float _1536 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1141, _1144, _1147, _1150));
        float _1540 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1142, _1145, _1148, _1151));
        float _1547 = dot(vec4(cbModelParam._m0[39u]), vec4(_1516, _1517, _1518, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1547) ? 0.0 : (isnan(0.0) ? _1547 : max(0.0, _1547))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1570;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1561 = dot(vec4(cbModelParam._m0[40u]), vec4(_1516, _1517, _1518, 1.0));
        _1570 = dot(vec3(isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1561) ? 0.0 : (isnan(0.0) ? _1561 : max(0.0, _1561))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1570 = 1.0;
    }
    float _1574 = (_1570 * cbModelParam._m0[1u].x) + (_1559 * (1.0 - cbModelParam._m0[1u].x));
    float _1584 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _621);
    float _1585 = isnan(_1584) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1584 : min(cbModelParam._m0[25u].z, _1584));
    float _1665;
    float _1667;
    float _1669;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1632 = fma(_838, cbModelParam._m0[13u].z, fma(_834, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _830)) + cbModelParam._m0[13u].w;
        float _1636 = fma(_838, cbModelParam._m0[14u].z, fma(_834, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _830)) + cbModelParam._m0[14u].w;
        float _1640 = fma(_838, cbModelParam._m0[15u].z, fma(_834, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _830)) + cbModelParam._m0[15u].w;
        float _1643 = fma(_779, cbModelParam._m0[13u].z, fma(_778, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _777));
        float _1646 = fma(_779, cbModelParam._m0[14u].z, fma(_778, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _777));
        float _1649 = fma(_779, cbModelParam._m0[15u].z, fma(_778, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _777));
        float _1677;
        if (_1643 > 0.0)
        {
            _1677 = abs((1.0 - _1632) / _1643);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1632 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1677 = frontier_phi_14_12_ladder;
        }
        float _1898;
        if (_1646 > 0.0)
        {
            _1898 = abs((1.0 - _1636) / _1646);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1636 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1898 = frontier_phi_23_19_ladder;
        }
        float _2144;
        if (_1649 > 0.0)
        {
            _2144 = abs((1.0 - _1640) / _1649);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1640 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2144 = frontier_phi_35_30_ladder;
        }
        float _2146 = isnan(_1898) ? _1677 : (isnan(_1677) ? _1898 : min(_1677, _1898));
        float _2147 = isnan(_2144) ? _2146 : (isnan(_2146) ? _2144 : min(_2146, _2144));
        float _2151 = (_2147 * _1643) + _1632;
        float _2152 = (_2147 * _1646) + _1636;
        float _2153 = (_2147 * _1649) + _1640;
        float _2154 = _2147 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2154;
        float _2158 = _2154 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 > _2158) || ((_2152 < _2156) || ((_2151 < _2156) || (_2151 > _2158))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2277 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2153, cbModelParam._m0[9u].z, fma(_2152, cbModelParam._m0[9u].y, _2151 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2153, cbModelParam._m0[10u].z, fma(_2152, cbModelParam._m0[10u].y, _2151 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2153, cbModelParam._m0[11u].z, fma(_2152, cbModelParam._m0[11u].y, _2151 * cbModelParam._m0[11u].x))), _1585);
            frontier_phi_13_35_ladder = _2277.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2277.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2277.x * cbModelParam._m0[1u].y;
        }
        _1665 = frontier_phi_13_35_ladder_2;
        _1667 = frontier_phi_13_35_ladder_1;
        _1669 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1653 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_777, _778, _779), _1585);
        _1665 = _1653.x * cbModelParam._m0[1u].y;
        _1667 = _1653.y * cbModelParam._m0[1u].y;
        _1669 = _1653.z * cbModelParam._m0[1u].y;
    }
    float _1673 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _621);
    float _1674 = isnan(_1673) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1673 : min(cbModelParam._m0[25u].w, _1673));
    float _1763;
    float _1765;
    float _1767;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1727 = fma(_838, cbModelParam._m0[21u].z, fma(_834, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _830)) + cbModelParam._m0[21u].w;
        float _1731 = fma(_838, cbModelParam._m0[22u].z, fma(_834, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _830)) + cbModelParam._m0[22u].w;
        float _1735 = fma(_838, cbModelParam._m0[23u].z, fma(_834, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _830)) + cbModelParam._m0[23u].w;
        float _1738 = fma(_779, cbModelParam._m0[21u].z, fma(_778, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _777));
        float _1741 = fma(_779, cbModelParam._m0[22u].z, fma(_778, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _777));
        float _1744 = fma(_779, cbModelParam._m0[23u].z, fma(_778, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _777));
        float _1903;
        if (_1738 > 0.0)
        {
            _1903 = abs((1.0 - _1727) / _1738);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1727 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1903 = frontier_phi_25_21_ladder;
        }
        float _2171;
        if (_1741 > 0.0)
        {
            _2171 = abs((1.0 - _1731) / _1741);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1731 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2171 = frontier_phi_37_32_ladder;
        }
        float _2376;
        if (_1744 > 0.0)
        {
            _2376 = abs((1.0 - _1735) / _1744);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1735 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2376 = frontier_phi_46_43_ladder;
        }
        float _2378 = isnan(_2171) ? _1903 : (isnan(_1903) ? _2171 : min(_1903, _2171));
        float _2379 = isnan(_2376) ? _2378 : (isnan(_2378) ? _2376 : min(_2378, _2376));
        float _2383 = (_2379 * _1738) + _1727;
        float _2384 = (_2379 * _1741) + _1731;
        float _2385 = (_2379 * _1744) + _1735;
        float _2386 = _2379 * 9.9999997473787516355514526367188e-05;
        float _2387 = (-1.0) - _2386;
        float _2389 = _2386 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2385 > _2389) || ((_2385 < _2387) || ((_2384 > _2389) || ((_2384 < _2387) || ((_2383 < _2387) || (_2383 > _2389))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2584 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2385, cbModelParam._m0[17u].z, fma(_2384, cbModelParam._m0[17u].y, _2383 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2385, cbModelParam._m0[18u].z, fma(_2384, cbModelParam._m0[18u].y, _2383 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2385, cbModelParam._m0[19u].z, fma(_2384, cbModelParam._m0[19u].y, _2383 * cbModelParam._m0[19u].x))), _1674);
            frontier_phi_22_46_ladder = _2584.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2584.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2584.x * cbModelParam._m0[1u].z;
        }
        _1763 = frontier_phi_22_46_ladder_2;
        _1765 = frontier_phi_22_46_ladder_1;
        _1767 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_777, _778, _779), _1674);
        _1763 = _1747.x * cbModelParam._m0[1u].z;
        _1765 = _1747.y * cbModelParam._m0[1u].z;
        _1767 = _1747.z * cbModelParam._m0[1u].z;
    }
    float _1779 = ((((1.0 - _798) * ((_785 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_798 * _785)) * _769;
    float _1780 = _1779 * ((cbModelParam._m0[1u].w * (_1763 - _1665)) + _1665);
    float _1781 = _1779 * ((cbModelParam._m0[1u].w * (_1765 - _1667)) + _1667);
    float _1782 = _1779 * ((cbModelParam._m0[1u].w * (_1767 - _1669)) + _1669);
    float _1785 = fma(_1782, cbSceneParam._m0[89u].z, fma(_1781, cbSceneParam._m0[89u].y, _1780 * cbSceneParam._m0[89u].x));
    float _1788 = fma(_1782, cbSceneParam._m0[90u].z, fma(_1781, cbSceneParam._m0[90u].y, _1780 * cbSceneParam._m0[90u].x));
    float _1791 = fma(_1782, cbSceneParam._m0[91u].z, fma(_1781, cbSceneParam._m0[91u].y, _1780 * cbSceneParam._m0[91u].x));
    vec4 _1799 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_706, _707));
    float _1801 = _1799.w;
    float _1813 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1801);
    float _1814 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1801);
    float _1815 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1801);
    uvec4 _1819 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1821 = _1819.x * 14u;
    uint _1822 = _1821 + 13u;
    float _1829 = _769 + (-1.0);
    float _1834 = (cbLight._m0[_1822].x * _1829) + 1.0;
    float _1835 = (cbLight._m0[_1822].y * _1829) + 1.0;
    float _1836 = (cbLight._m0[_1822].z * _1829) + 1.0;
    float _1837 = (cbLight._m0[_1822].w * _1829) + 1.0;
    uint _1838 = _1821 + 5u;
    float _1844 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
    uint _1848 = _1821 + 4u;
    float _1857 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
    uint _1861 = _1821 | 1u;
    float _1872 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_618, _619, _620));
    float _1875 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_618, _619, _620));
    float _3979 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _3990 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1880 = (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * 0.3183098733425140380859375;
    float _1882 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * 0.3183098733425140380859375;
    float _1889 = ((cbLight._m0[_1838].x * _1844) * _1882) + (((cbLight._m0[_1848].x * _1813) * _1857) * _1880);
    float _1890 = ((_1844 * cbLight._m0[_1838].y) * _1882) + (((cbLight._m0[_1848].y * _1814) * _1857) * _1880);
    float _1891 = ((_1844 * cbLight._m0[_1838].z) * _1882) + (((cbLight._m0[_1848].z * _1815) * _1857) * _1880);
    uvec4 _1895 = floatBitsToUint(cbLight._m0[_1821 + 12u]);
    bool _1897 = _1895.x == 0u;
    float _1908;
    float _1910;
    float _1912;
    if (_1897)
    {
        _1908 = _1889;
        _1910 = _1890;
        _1912 = _1891;
    }
    else
    {
        uint _1916 = _1821 + 6u;
        float _1932 = (dot(vec3(cbLight._m0[_1821 + 2u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _1933 = _1932 * _1932;
        float _4001 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1934 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1935 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _1908 = (((cbLight._m0[_1916].x * 0.3183098733425140380859375) * _1934) * _1935) + _1889;
        _1910 = (((cbLight._m0[_1916].y * 0.3183098733425140380859375) * _1934) * _1935) + _1890;
        _1912 = (((cbLight._m0[_1916].z * 0.3183098733425140380859375) * _1934) * _1935) + _1891;
    }
    bool _1915 = _1895.y == 0u;
    float _1953;
    float _1955;
    float _1957;
    if (_1915)
    {
        _1953 = _1908;
        _1955 = _1910;
        _1957 = _1912;
    }
    else
    {
        uint _2115 = _1821 + 7u;
        float _2131 = (dot(vec3(cbLight._m0[_1821 + 3u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _2132 = _2131 * _2131;
        float _4017 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2133 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _2134 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _1953 = (((cbLight._m0[_2115].x * 0.3183098733425140380859375) * _2133) * _2134) + _1908;
        _1955 = (((cbLight._m0[_2115].y * 0.3183098733425140380859375) * _2133) * _2134) + _1910;
        _1957 = (((cbLight._m0[_2115].z * 0.3183098733425140380859375) * _2133) * _2134) + _1912;
    }
    uint _1960 = _1821 + 8u;
    float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1821].w)) * _621) * 0.949999988079071044921875);
    float _1974 = _1973 * _1973;
    float _1975 = cbLight._m0[_1821].x + _698;
    float _1976 = cbLight._m0[_1821].y + _699;
    float _1977 = cbLight._m0[_1821].z + _700;
    float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
    float _1982 = _1981 * _1975;
    float _1983 = _1981 * _1976;
    float _1984 = _1981 * _1977;
    float _1985 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_1821].xyz));
    float _4033 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _4044 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _1989 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _1990 = dot(vec3(_618, _619, _620), vec3(_1982, _1983, _1984));
    float _4055 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1993 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _1994 = dot(vec3(cbLight._m0[_1821].xyz), vec3(_1982, _1983, _1984));
    float _4066 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1998 = _1974 * _1974;
    float _2002 = ((_1993 * _1993) * (_1998 + (-1.0))) + 1.0;
    float _2013 = (exp2(log2(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2014 = 1.0 - _1974;
    float _2025 = (0.5 / (((_1989 * ((_1988 * _2014) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1989 * _2014) + _1974) * _1988))) * _1988;
    float _4077 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2027 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1998 / ((_2002 * _2002) * 3.141590118408203125));
    uint _2041 = _1821 + 9u;
    float _2052 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1861].w)) * _621) * 0.949999988079071044921875);
    float _2053 = _2052 * _2052;
    float _2054 = cbLight._m0[_1861].x + _698;
    float _2055 = cbLight._m0[_1861].y + _699;
    float _2056 = cbLight._m0[_1861].z + _700;
    float _2060 = inversesqrt(dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056)));
    float _2061 = _2060 * _2054;
    float _2062 = _2060 * _2055;
    float _2063 = _2060 * _2056;
    float _2064 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_1861].xyz));
    float _4088 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _2068 = dot(vec3(_618, _619, _620), vec3(_2061, _2062, _2063));
    float _4099 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _2072 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_2061, _2062, _2063));
    float _4110 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2076 = _2053 * _2053;
    float _2080 = ((_2071 * _2071) * (_2076 + (-1.0))) + 1.0;
    float _2089 = (exp2(log2(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2090 = 1.0 - _2053;
    float _2100 = (0.5 / (((_1989 * ((_2067 * _2090) + _2053)) + 9.9999999392252902907785028219223e-09) + (((_1989 * _2090) + _2053) * _2067))) * _2067;
    float _4121 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2102 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2076 / ((_2080 * _2080) * 3.141590118408203125));
    float _2112 = (((_2089 * cbLight._m0[_2041].x) * _2102) * _1844) + ((((cbLight._m0[_1960].x * _1813) * _2013) * _2027) * _1857);
    float _2113 = (((_2089 * cbLight._m0[_2041].y) * _2102) * _1844) + ((((cbLight._m0[_1960].y * _1814) * _2013) * _2027) * _1857);
    float _2114 = (((_2089 * cbLight._m0[_2041].z) * _2102) * _1844) + ((((cbLight._m0[_1960].z * _1815) * _2013) * _2027) * _1857);
    float _2176;
    float _2178;
    float _2180;
    if (_1897)
    {
        _2176 = _2112;
        _2178 = _2113;
        _2180 = _2114;
    }
    else
    {
        uint _2182 = _1821 + 2u;
        uint _2186 = _1821 + 10u;
        float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2182].w)) * _621) * 0.949999988079071044921875);
        float _2201 = _2200 * _2200;
        float _2202 = cbLight._m0[_2182].x + _698;
        float _2203 = cbLight._m0[_2182].y + _699;
        float _2204 = cbLight._m0[_2182].z + _700;
        float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
        float _2209 = _2208 * _2202;
        float _2210 = _2208 * _2203;
        float _2211 = _2208 * _2204;
        float _2212 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2182].xyz));
        float _4132 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2216 = dot(vec3(_618, _619, _620), vec3(_2209, _2210, _2211));
        float _4143 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2219 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2220 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2209, _2210, _2211));
        float _4154 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2224 = _2201 * _2201;
        float _2228 = ((_2219 * _2219) * (_2224 + (-1.0))) + 1.0;
        float _2237 = (exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2238 = 1.0 - _2201;
        float _2248 = (0.5 / (((_1989 * ((_2215 * _2238) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_1989 * _2238) + _2201) * _2215))) * _2215;
        float _4165 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2250 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2224 / ((_2228 * _2228) * 3.141590118408203125));
        float _2251 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _2176 = (((_2237 * cbLight._m0[_2186].x) * _2250) * _2251) + _2112;
        _2178 = (((_2237 * cbLight._m0[_2186].y) * _2250) * _2251) + _2113;
        _2180 = (((_2237 * cbLight._m0[_2186].z) * _2250) * _2251) + _2114;
    }
    float _2286;
    float _2288;
    float _2290;
    if (_1915)
    {
        _2286 = _2176;
        _2288 = _2178;
        _2290 = _2180;
    }
    else
    {
        uint _2297 = _1821 + 3u;
        uint _2301 = _1821 + 11u;
        float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _621) * 0.949999988079071044921875);
        float _2316 = _2315 * _2315;
        float _2317 = cbLight._m0[_2297].x + _698;
        float _2318 = cbLight._m0[_2297].y + _699;
        float _2319 = cbLight._m0[_2297].z + _700;
        float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
        float _2324 = _2323 * _2317;
        float _2325 = _2323 * _2318;
        float _2326 = _2323 * _2319;
        float _2327 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2297].xyz));
        float _4181 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2330 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2331 = dot(vec3(_618, _619, _620), vec3(_2324, _2325, _2326));
        float _4192 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2334 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2335 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2324, _2325, _2326));
        float _4203 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2339 = _2316 * _2316;
        float _2343 = ((_2334 * _2334) * (_2339 + (-1.0))) + 1.0;
        float _2352 = (exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2353 = 1.0 - _2316;
        float _2363 = (0.5 / (((_1989 * ((_2330 * _2353) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_1989 * _2353) + _2316) * _2330))) * _2330;
        float _4214 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2365 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2339 / ((_2343 * _2343) * 3.141590118408203125));
        float _2366 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _2286 = (((_2352 * cbLight._m0[_2301].x) * _2365) * _2366) + _2176;
        _2288 = (((_2352 * cbLight._m0[_2301].y) * _2365) * _2366) + _2178;
        _2290 = (((_2352 * cbLight._m0[_2301].z) * _2365) * _2366) + _2180;
    }
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    float _2511;
    if (_1819.y == 0u)
    {
        float _2441 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2442 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2441;
        float _2443 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2441;
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2441;
        uvec4 _2456 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2457 = _2456.x;
        uint _2468 = uint((float(_2456.y) * floor(float(uint(cbSceneParam._m0[85u].y * _707) / _2457))) + floor(float(uint(cbSceneParam._m0[85u].x * _706) / _2457)));
        float _2478 = (log2(_2444 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2479 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        uint _2482 = uint(isnan(14.0) ? _2479 : (isnan(_2479) ? 14.0 : min(_2479, 14.0)));
        uvec4 _2487 = texelFetch(g_lightClusterGridBuffer, int(((_2482 << 2u) + (_2468 << 6u)) >> 2u));
        uint _2488 = _2487.x;
        uint _2489 = _2456.z;
        float _2589;
        float _2591;
        float _2593;
        float _2595;
        float _2597;
        float _2599;
        if (((((1u << ((_2489 >> 4u) & 15u)) + 4294967295u) & _2488) == 0u) || ((_2489 & 240u) == 0u))
        {
            _2589 = 0.0;
            _2591 = 0.0;
            _2593 = 0.0;
            _2595 = 0.0;
            _2597 = 0.0;
            _2599 = 0.0;
        }
        else
        {
            float _2590;
            float _2592;
            float _2594;
            float _2596;
            float _2598;
            float _2600;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            uint _2740 = 0u;
            uint _2749;
            bool _2750;
            for (;;)
            {
                _2749 = texelFetch(g_lightClassification, int((((_2482 << 5u) + (_2468 << 9u)) + (_2740 << 2u)) >> 2u)).x;
                _2750 = _2749 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2750)
                {
                    frontier_phi_61_pred = _2734;
                    frontier_phi_61_pred_1 = _2739;
                    frontier_phi_61_pred_2 = _2738;
                    frontier_phi_61_pred_3 = _2737;
                    frontier_phi_61_pred_4 = _2736;
                    frontier_phi_61_pred_5 = _2735;
                }
                else
                {
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    uint _2864;
                    _2858 = _2734;
                    _2859 = _2735;
                    _2860 = _2736;
                    _2861 = _2737;
                    _2862 = _2738;
                    _2863 = _2739;
                    _2864 = _2749;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    for (;;)
                    {
                        uint _2868 = uint(findLSB(_2864)) + (_2740 << 5u);
                        uint _2865 = (_2864 + 4294967295u) & _2864;
                        uint _2870 = _2868 * 48u;
                        vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 3u)).x));
                        uint _2890 = (_2868 * 48u) + 4u;
                        vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 3u)).x));
                        uint _2909 = (_2868 * 48u) + 8u;
                        vec3 _2920 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2909)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 2u)).x));
                        float _2924 = _2884.x - _2442;
                        float _2925 = _2884.y - _2443;
                        float _2926 = _2884.z - _2444;
                        float _2927 = dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926));
                        float _2930 = inversesqrt(_2927);
                        float _2931 = _2930 * _2924;
                        float _2932 = _2930 * _2925;
                        float _2933 = _2930 * _2926;
                        float _2934 = dot(vec3(_725, _728, _731), vec3(_2931, _2932, _2933));
                        float _2939 = 1.0 - (_2927 * _2884.w);
                        float _4240 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2940 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                        float _2941 = sqrt(_2927) * _2903.w;
                        float _2944 = 1.39999997615814208984375 / (_2941 + 1.39999997615814208984375);
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2934) + _2945;
                        float _2951 = _2941 * _2941;
                        float _2955 = ((isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0))) * _2940) / ((_2951 * 0.699999988079071044921875) + 1.0);
                        float _2959 = (-0.0) - _2442;
                        float _2960 = (-0.0) - _2443;
                        float _2961 = (-0.0) - _2444;
                        float _2965 = inversesqrt(dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961)));
                        float _2966 = _2965 * _2959;
                        float _2967 = _2965 * _2960;
                        float _2968 = _2965 * _2961;
                        float _2976 = exp2(log2(1.0 / ((_2951 * 3.5) + 5.0)) * 0.25);
                        float _2977 = 1.0 - _785;
                        float _2984 = sqrt(1.0 - ((1.0 - (_2977 * _2977)) * (1.0 - (_2976 * _2976))));
                        float _2985 = _2984 * _2984;
                        float _2986 = _2985 * _2985;
                        float _2987 = _2966 + _2931;
                        float _2988 = _2967 + _2932;
                        float _2989 = _2968 + _2933;
                        float _2993 = inversesqrt(dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989)));
                        float _2997 = dot(vec3(_725, _728, _731), vec3(_2966, _2967, _2968));
                        float _4256 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3000 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                        float _3001 = dot(vec3(_725, _728, _731), vec3(_2993 * _2987, _2993 * _2988, _2993 * _2989));
                        float _4267 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3004 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                        float _3008 = ((_3004 * _3004) * (_2986 + (-1.0))) + 1.0;
                        float _3009 = _2944 * _2985;
                        float _3010 = _3009 * _3009;
                        float _3013 = ((1.0 - _3010) * _2934) + _3010;
                        float _4278 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3014 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _3015 = 1.0 - _2985;
                        float _3025 = (0.5 / (((_3014 * ((_3000 * _3015) + _2985)) + 9.9999999392252902907785028219223e-09) + (((_3014 * _3015) + _2985) * _3000))) * _3014;
                        float _4289 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3036 = (((_2986 * 3.1415927410125732421875) * (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) / ((_3008 * _3008) * ((_2951 * 2.1991131305694580078125) + 3.141590118408203125))) * _2940;
                        _2793 = (_2955 * _2903.x) + _2861;
                        _2794 = (_2955 * _2903.y) + _2862;
                        _2795 = (_2955 * _2903.z) + _2863;
                        _2790 = (_3036 * _2920.x) + _2858;
                        _2791 = (_3036 * _2920.y) + _2859;
                        _2792 = (_3036 * _2920.z) + _2860;
                        if (_2865 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2792;
                            _2861 = _2793;
                            _2862 = _2794;
                            _2863 = _2795;
                            _2864 = _2865;
                        }
                    }
                    frontier_phi_61_pred = _2790;
                    frontier_phi_61_pred_1 = _2795;
                    frontier_phi_61_pred_2 = _2794;
                    frontier_phi_61_pred_3 = _2793;
                    frontier_phi_61_pred_4 = _2792;
                    frontier_phi_61_pred_5 = _2791;
                }
                _2590 = frontier_phi_61_pred;
                _2600 = frontier_phi_61_pred_1;
                _2598 = frontier_phi_61_pred_2;
                _2596 = frontier_phi_61_pred_3;
                _2594 = frontier_phi_61_pred_4;
                _2592 = frontier_phi_61_pred_5;
                uint _2741 = _2740 + 1u;
                if (_2741 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2734 = _2590;
                    _2735 = _2592;
                    _2736 = _2594;
                    _2737 = _2596;
                    _2738 = _2598;
                    _2739 = _2600;
                    _2740 = _2741;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2589 = _2590;
            _2591 = _2592;
            _2593 = _2594;
            _2595 = _2596;
            _2597 = _2598;
            _2599 = _2600;
        }
        uvec4 _2603 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2604 = _2603.z;
        uint _2606 = (_2604 >> 8u) & 15u;
        float _2702;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        if (((4294967295u << _2606) & _2488) == 0u)
        {
            _2702 = _2589;
            _2704 = _2591;
            _2706 = _2593;
            _2708 = _2595;
            _2710 = _2597;
            _2712 = _2599;
        }
        else
        {
            float _2727 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
            float _2728 = _2727 * _2442;
            float _2729 = _2727 * _2443;
            float _2730 = _2727 * _2444;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2606 < ((_2604 >> 12u) & 15u))
            {
                float _2703;
                float _2705;
                float _2707;
                float _2709;
                float _2711;
                float _2713;
                float _2841 = _2589;
                float _2842 = _2591;
                float _2843 = _2593;
                float _2844 = _2595;
                float _2845 = _2597;
                float _2846 = _2599;
                uint _2847 = _2606;
                uint _2856;
                bool _2857;
                for (;;)
                {
                    _2856 = texelFetch(g_lightClassification, int((((_2482 << 5u) + (_2468 << 9u)) + (_2847 << 2u)) >> 2u)).x;
                    _2857 = _2856 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2857)
                    {
                        frontier_phi_67_pred = _2844;
                        frontier_phi_67_pred_1 = _2845;
                        frontier_phi_67_pred_2 = _2846;
                        frontier_phi_67_pred_3 = _2843;
                        frontier_phi_67_pred_4 = _2842;
                        frontier_phi_67_pred_5 = _2841;
                    }
                    else
                    {
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3054 = _2841;
                        float _3055 = _2842;
                        float _3056 = _2843;
                        float _3057 = _2844;
                        float _3058 = _2845;
                        float _3059 = _2846;
                        uint _3060 = _2856;
                        uint _3061;
                        vec4 _3086;
                        float _3087;
                        vec4 _3102;
                        vec3 _3114;
                        vec4 _3129;
                        vec4 _3144;
                        float _3190;
                        bool _3191;
                        for (;;)
                        {
                            uint _3071 = ((_2847 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3060));
                            _3061 = (_3060 + 4294967295u) & _3060;
                            uint _3073 = _3071 * 40u;
                            _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            _3087 = _3086.w;
                            uint _3089 = (_3071 * 40u) + 4u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3104 = (_3071 * 40u) + 8u;
                            _3114 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x));
                            uint _3116 = (_3071 * 40u) + 16u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3131 = (_3071 * 40u) + 20u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3146 = (_3071 * 40u) + 24u;
                            vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3165 = (_3071 * 40u) + 28u;
                            vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            _3190 = fma(_2444, _3178.z, fma(_2443, _3178.y, _3178.x * _2442)) + _3178.w;
                            _3191 = !((fma(_2444, _3159.z, fma(_2443, _3159.y, _3159.x * _2442)) + _3159.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3191)
                            {
                                float _3218 = _3086.x - _2442;
                                float _3219 = _3086.y - _2443;
                                float _3220 = _3086.z - _2444;
                                float _3221 = dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220));
                                float _3224 = inversesqrt(_3221);
                                float _3225 = _3224 * _3218;
                                float _3226 = _3224 * _3219;
                                float _3227 = _3224 * _3220;
                                float _3231 = 1.0 - (_3221 / (_3087 * _3087));
                                float _4300 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3232 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3236 = sqrt(_3221) * _3102.w;
                                float _3238 = 1.39999997615814208984375 / (_3236 + 1.39999997615814208984375);
                                float _3239 = _3238 * _3238;
                                float _3242 = ((1.0 - _3239) * dot(vec3(_3225, _3226, _3227), vec3(_725, _728, _731))) + _3239;
                                float _3245 = _3236 * _3236;
                                float _3249 = (fma(_2444, _3129.z, fma(_2443, _3129.y, _3129.x * _2442)) + _3129.w) / _3190;
                                float _3250 = (fma(_2444, _3144.z, fma(_2443, _3144.y, _3144.x * _2442)) + _3144.w) / _3190;
                                float _3254 = 1.0 - dot(vec2(_3249, _3250), vec2(_3249, _3250));
                                float _4316 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                                float _3256 = _3255 * (((isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))) * _3232) / ((_3245 * 0.699999988079071044921875) + 1.0));
                                float _3268 = exp2(log2(1.0 / ((_3245 * 3.5) + 5.0)) * 0.25);
                                float _3269 = 1.0 - _785;
                                float _3276 = sqrt(1.0 - ((1.0 - (_3269 * _3269)) * (1.0 - (_3268 * _3268))));
                                float _3277 = _3276 * _3276;
                                float _3278 = _3277 * _3277;
                                float _3279 = _3225 - _2728;
                                float _3280 = _3226 - _2729;
                                float _3281 = _3227 - _2730;
                                float _3285 = inversesqrt(dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281)));
                                float _3289 = dot(vec3(_725, _728, _731), vec3((-0.0) - _2728, (-0.0) - _2729, (-0.0) - _2730));
                                float _4327 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3292 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                                float _3293 = dot(vec3(_725, _728, _731), vec3(_3285 * _3279, _3285 * _3280, _3285 * _3281));
                                float _4338 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3296 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3300 = ((_3296 * _3296) * (_3278 + (-1.0))) + 1.0;
                                float _3301 = _3238 * _3277;
                                float _3302 = _3301 * _3301;
                                float _3308 = ((1.0 - _3302) * dot(vec3(_725, _728, _731), vec3(_3225, _3226, _3227))) + _3302;
                                float _4349 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3309 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3310 = 1.0 - _3277;
                                float _3320 = (0.5 / (((_3309 * ((_3292 * _3310) + _3277)) + 9.9999999392252902907785028219223e-09) + (((_3309 * _3310) + _3277) * _3292))) * _3309;
                                float _4360 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                                float _3330 = (_3255 * _3232) * (((_3278 * 3.1415927410125732421875) * (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) / ((_3300 * _3300) * ((_3245 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3330 * _3114.x;
                                frontier_phi_73_pred_1 = _3330 * _3114.y;
                                frontier_phi_73_pred_2 = _3256 * _3102.z;
                                frontier_phi_73_pred_3 = _3256 * _3102.y;
                                frontier_phi_73_pred_4 = _3256 * _3102.x;
                                frontier_phi_73_pred_5 = _3330 * _3114.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3334 = frontier_phi_73_pred;
                            _3335 = frontier_phi_73_pred_1;
                            _3339 = frontier_phi_73_pred_2;
                            _3338 = frontier_phi_73_pred_3;
                            _3337 = frontier_phi_73_pred_4;
                            _3336 = frontier_phi_73_pred_5;
                            _3044 = _3337 + _3057;
                            _3045 = _3338 + _3058;
                            _3046 = _3339 + _3059;
                            _3041 = _3334 + _3054;
                            _3042 = _3335 + _3055;
                            _3043 = _3336 + _3056;
                            if (_3061 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3061;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3044;
                        frontier_phi_67_pred_1 = _3045;
                        frontier_phi_67_pred_2 = _3046;
                        frontier_phi_67_pred_3 = _3043;
                        frontier_phi_67_pred_4 = _3042;
                        frontier_phi_67_pred_5 = _3041;
                    }
                    _2709 = frontier_phi_67_pred;
                    _2711 = frontier_phi_67_pred_1;
                    _2713 = frontier_phi_67_pred_2;
                    _2707 = frontier_phi_67_pred_3;
                    _2705 = frontier_phi_67_pred_4;
                    _2703 = frontier_phi_67_pred_5;
                    uint _2848 = _2847 + 1u;
                    if (_2848 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2841 = _2703;
                        _2842 = _2705;
                        _2843 = _2707;
                        _2844 = _2709;
                        _2845 = _2711;
                        _2846 = _2713;
                        _2847 = _2848;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2711;
                frontier_phi_55_56_ladder_1 = _2713;
                frontier_phi_55_56_ladder_2 = _2709;
                frontier_phi_55_56_ladder_3 = _2707;
                frontier_phi_55_56_ladder_4 = _2705;
                frontier_phi_55_56_ladder_5 = _2703;
            }
            else
            {
                frontier_phi_55_56_ladder = _2597;
                frontier_phi_55_56_ladder_1 = _2599;
                frontier_phi_55_56_ladder_2 = _2595;
                frontier_phi_55_56_ladder_3 = _2593;
                frontier_phi_55_56_ladder_4 = _2591;
                frontier_phi_55_56_ladder_5 = _2589;
            }
            _2702 = frontier_phi_55_56_ladder_5;
            _2704 = frontier_phi_55_56_ladder_4;
            _2706 = frontier_phi_55_56_ladder_3;
            _2708 = frontier_phi_55_56_ladder_2;
            _2710 = frontier_phi_55_56_ladder;
            _2712 = frontier_phi_55_56_ladder_1;
        }
        float _2717 = isnan(1.0) ? _769 : (isnan(_769) ? 1.0 : min(_769, 1.0));
        _2501 = (_2717 * _2708) + _1953;
        _2503 = (_2717 * _2710) + _1955;
        _2505 = (_2717 * _2712) + _1957;
        _2507 = ((_2702 * 0.039999999105930328369140625) * _2717) + _2286;
        _2509 = ((_2704 * 0.039999999105930328369140625) * _2717) + _2288;
        _2511 = ((_2706 * 0.039999999105930328369140625) * _2717) + _2290;
    }
    else
    {
        _2501 = _1953;
        _2503 = _1955;
        _2505 = _1957;
        _2507 = _2286;
        _2509 = _2288;
        _2511 = _2290;
    }
    float _4376 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4387 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4398 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    uint _2531 = _238 + 6u;
    float _2539 = _706 / cbSceneParam._m0[86u].x;
    float _2540 = _707 / cbSceneParam._m0[86u].y;
    vec4 _2554 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2539, _2540, (log2((isnan(cbSceneParam._m0[77u].w) ? _639 : (isnan(_639) ? cbSceneParam._m0[77u].w : min(_639, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2556 = _2554.x;
    float _2557 = _2554.y;
    float _2558 = _2554.z;
    float _2559 = _2554.w;
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    if (_639 > cbSceneParam._m0[78u].w)
    {
        float _2614 = isnan(_639) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _639 : min(cbSceneParam._m0[80u].w, _639));
        float _2615 = _2614 / _639;
        float _2626 = _2615 * _691;
        float _2627 = _692 * _2615;
        float _2628 = (-0.0) - _2627;
        float _2630 = _2615 * _693;
        float _2632 = (cbSceneParam._m0[77u].w * _2628) / _2614;
        float _2633 = _2632 + cbSceneParam._m0[79u].w;
        float _2634 = cbSceneParam._m0[79u].w - _2627;
        float _2640 = sqrt(((_2626 * _2626) + (_2627 * _2627)) + (_2630 * _2630));
        float _2643 = (1.0 - (cbSceneParam._m0[77u].w / _2614)) * _2640;
        float _2648 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2650 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2803;
        if (abs((_2628 - _2632) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2803 = ((((_2633 > 0.0) ? exp2(_2648 * _2633) : (2.0 - exp2(_2650 * _2633))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2643;
        }
        else
        {
            float _2763 = 1.0 / cbSceneParam._m0[80u].x;
            float _2764 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : max(_2633, _2634));
            float _2765 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : min(_2633, _2634));
            float _2774 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : min(_2764, 0.0));
            float _2775 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : min(_2765, 0.0));
            _2803 = ((abs(_2640 / _2628) * cbSceneParam._m0[80u].y) * ((((_2774 - _2775) * 2.0) - ((exp2(_2648 * (isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0)))) - exp2(_2648 * (isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))))) * _2763)) - ((exp2(_2650 * _2774) - exp2(_2650 * _2775)) * _2763))) + (_2643 * cbSceneParam._m0[80u].z);
        }
        vec4 _2805 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2539, _2540, 1.0), 0.0);
        float _2814 = exp2((_2803 * (-1.44269502162933349609375)) * (1.0 - _2805.w));
        float _2815 = log2(_2814);
        float _2831 = log2(_2559);
        _2652 = (exp2(_2831 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].x)) * _2805.x) / cbSceneParam._m0[78u].x)) + _2556;
        _2654 = (exp2(_2831 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].y)) * _2805.y) / cbSceneParam._m0[78u].y)) + _2557;
        _2656 = (exp2(_2831 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].z)) * _2805.z) / cbSceneParam._m0[78u].z)) + _2558;
        _2658 = _2814 * _2559;
    }
    else
    {
        _2652 = _2556;
        _2654 = _2557;
        _2656 = _2558;
        _2658 = _2559;
    }
    float _2670 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2671 = _2670 == 3.0;
    float _2672 = log2(_2658);
    float _2679 = exp2(_2672 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2501 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _769))) + ((_2507 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1574)) * cbPerFrame._m0[3u].x));
    float _2680 = exp2(_2672 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2503 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _769))) + ((_2509 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1574)) * cbPerFrame._m0[3u].x));
    float _2681 = exp2(_2672 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2505 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _769))) + ((_2511 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1574)) * cbPerFrame._m0[3u].x));
    float _2690 = (_2670 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2690 * (_2671 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2652)));
    SV_Target.y = _2690 * (_2671 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2654)));
    SV_Target.z = _2690 * (_2671 ? _2681 : (_2681 + (cbSceneParam._m0[72u].w * _2656)));
    SV_Target.w = cbInstanceData._m0[_2531].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2531].w;
}


