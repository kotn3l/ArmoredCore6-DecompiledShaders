#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1217;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _347 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _349 = _347.x;
    float _359 = dot(vec4(_349, _347.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _376 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_349 - _359) * cbMtdParam._m0[24u].x) + _359) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3522 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _384 = (_377 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _385 = (_377 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _386 = (_377 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _260) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _261) + cbTextureTilingScale._m0[3u].w));
    vec4 _423 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _435 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _449 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_425 - _435) * cbMtdParam._m0[24u].x) + _435) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3533 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _457 = (_450 * ((_403.x * cbMtdParam._m0[13u].x) - _384)) + _384;
    float _458 = (_450 * ((_403.y * cbMtdParam._m0[13u].y) - _385)) + _385;
    float _459 = (_450 * ((_403.z * cbMtdParam._m0[13u].z) - _386)) + _386;
    vec4 _476 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _518 = _516.x;
    float _519 = _516.y;
    float _520 = _516.z;
    float _527 = ((_499.x - _518) * _377) + _518;
    float _528 = ((_499.y - _519) * _377) + _519;
    float _529 = ((_499.z - _520) * _377) + _520;
    vec4 _541 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _261) + cbTextureTilingScale._m0[2u].w));
    float _554 = ((_541.z - _529) * _450) + _529;
    float _557 = ((((_541.x - _527) * _450) + _527) * 2.0) + (-1.0);
    float _558 = ((((_541.y - _528) * _450) + _528) * 2.0) + (-1.0);
    float _559 = dot(vec2(_557, _558), vec2(_557, _558));
    float _3544 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _564 = sqrt(1.0 - (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))));
    vec4 _577 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _595 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _597 = _595.x;
    float _598 = 1.0 - _597;
    float _611 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_597 - _598) * cbMtdParam._m0[24u].z) + _598) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3555 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _612 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _619 = (_612 * (cbMtdParam._m0[17u].x - _457)) + _457;
    float _620 = (_612 * (cbMtdParam._m0[17u].y - _458)) + _458;
    float _621 = (_612 * (cbMtdParam._m0[17u].z - _459)) + _459;
    float _626 = (((_476.z - _554) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _554;
    vec4 _639 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _646 = (_639.x * 2.0) + (-1.0);
    float _647 = (_639.y * 2.0) + (-1.0);
    float _648 = dot(vec2(_646, _647), vec2(_646, _647));
    float _3566 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _656 = (_612 * (_639.z - _626)) + _626;
    float _661 = _557 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_476.x * 2.0) + (-1.0)));
    float _662 = _558 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_476.y * 2.0) + (-1.0)));
    float _674 = (((_646 - _661) + (cbMtdParam._m0[21u].x * _661)) * _612) + _661;
    float _675 = (((_647 - _662) + (cbMtdParam._m0[21u].x * _662)) * _612) + _662;
    float _676 = (_612 * (sqrt(1.0 - (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) - _564)) + _564;
    float _681 = cbMtdParam._m0[22u].x + _577.w;
    float _684 = fma(_676, _227 * NORMAL.x, fma(_675, _234 * TANGENT.x, (_220 * _212) * _674));
    float _687 = fma(_676, _227 * NORMAL.y, fma(_675, _234 * TANGENT.y, (_220 * _213) * _674));
    float _690 = fma(_676, _227 * NORMAL.z, fma(_675, _234 * TANGENT.z, (_220 * _214) * _674));
    float _694 = inversesqrt(dot(vec3(_684, _687, _690), vec3(_684, _687, _690)));
    float _695 = _694 * _684;
    float _696 = _694 * _687;
    float _697 = _694 * _690;
    float _3577 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _698 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _3588 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _3599 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3610 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3621 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _716 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _768 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _758);
    float _769 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _758);
    float _770 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _758);
    float _774 = inversesqrt(dot(vec3(_768, _769, _770), vec3(_768, _769, _770)));
    float _775 = _768 * _774;
    float _776 = _769 * _774;
    float _777 = _770 * _774;
    float _783 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _784 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _802 = fma(_697, cbSceneParam._m0[5u].z, fma(_696, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _695));
    float _805 = fma(_697, cbSceneParam._m0[6u].z, fma(_696, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _695));
    float _808 = fma(_697, cbSceneParam._m0[7u].z, fma(_696, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _695));
    uint _822 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _828 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * cbInstanceData._m0[_822].x;
    float _829 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_822].y;
    float _830 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * cbInstanceData._m0[_822].z;
    float _3632 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    vec4 _842 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _783, cbSceneParam._m0[86u].y * _784));
    float _846 = ((isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * TEXCOORD_5.w) * _842.x;
    float _847 = dot(vec3(_695, _696, _697), vec3(_775, _776, _777));
    float _850 = _847 * 2.0;
    float _854 = (_850 * _695) - _775;
    float _855 = (_850 * _696) - _776;
    float _856 = (_850 * _697) - _777;
    float _860 = abs(dot(vec3(_775, _776, _777), vec3(_695, _696, _697)));
    float _3665 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _862 = sqrt(_698);
    float _875 = exp2((_862 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_862 * 3.0));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1216;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _941 = fma(_915, cbModelParam._m0[26u].z, fma(_911, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _907));
        float _945 = fma(_915, cbModelParam._m0[27u].z, fma(_911, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _907));
        float _949 = fma(_915, cbModelParam._m0[28u].z, fma(_911, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _907));
        float _974 = _907 + _695;
        float _975 = _911 + _696;
        float _976 = _915 + _697;
        float _986 = fma(_976, cbModelParam._m0[26u].z, fma(_975, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974)) - _941;
        float _987 = fma(_976, cbModelParam._m0[27u].z, fma(_975, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974)) - _945;
        float _988 = fma(_976, cbModelParam._m0[28u].z, fma(_975, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974)) - _949;
        float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
        float _1005 = ((_992 * _986) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_941 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_992 * _987) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_945 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_992 * _988) / cbModelParam._m0[34u].z) + ((((((_949 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        float _1044 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1010.x + (-0.5));
        float _1046 = _1044 * (_1010.y + (-0.5));
        float _1047 = _1044 * (_1010.z + (-0.5));
        float _1054 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1017.x + (-0.5));
        float _1056 = _1054 * (_1017.y + (-0.5));
        float _1057 = _1054 * (_1017.z + (-0.5));
        float _1064 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1024.x + (-0.5));
        float _1066 = _1064 * (_1024.y + (-0.5));
        float _1067 = _1064 * (_1024.z + (-0.5));
        float _1074 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1031.x + (-0.5));
        float _1076 = _1074 * (_1031.y + (-0.5));
        float _1077 = _1074 * (_1031.z + (-0.5));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = _1045 * 0.5;
        float _1082 = _1055 * 0.5;
        float _1083 = _1065 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1098 = (dot(vec3(_695, _696, _697), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1108 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3713 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1110 + 1.0))) + _1115) * _1078;
        float _1125 = _1046 * 0.5;
        float _1126 = _1056 * 0.5;
        float _1127 = _1066 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_695, _696, _697), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3746 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1152 + 1.0))) + _1157) * _1079;
        float _1167 = _1047 * 0.5;
        float _1168 = _1057 * 0.5;
        float _1169 = _1067 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_695, _696, _697), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3779 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1194 + 1.0))) + _1199) * _1080;
        _1216 = _1047;
        _1218 = _1046;
        _1219 = _1045;
        _1220 = _1057;
        _1221 = _1056;
        _1222 = _1055;
        _1223 = _1067;
        _1224 = _1066;
        _1225 = _1065;
        _1226 = _1080;
        _1227 = _1079;
        _1228 = _1078;
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _1217;
        _1218 = _1217;
        _1219 = _1217;
        _1220 = _1217;
        _1221 = _1217;
        _1222 = _1217;
        _1223 = _1217;
        _1224 = _1217;
        _1225 = _1217;
        _1226 = _1217;
        _1227 = _1217;
        _1228 = _1217;
        _1229 = 0.0;
        _1230 = 0.0;
        _1231 = 0.0;
    }
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1255 = fma(_915, cbModelParam._m0[30u].z, fma(_911, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _907));
        float _1259 = fma(_915, cbModelParam._m0[31u].z, fma(_911, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _907));
        float _1263 = fma(_915, cbModelParam._m0[32u].z, fma(_911, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _907));
        float _1286 = _907 + _695;
        float _1287 = _911 + _696;
        float _1288 = _915 + _697;
        float _1298 = fma(_1288, cbModelParam._m0[30u].z, fma(_1287, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1286)) - _1255;
        float _1299 = fma(_1288, cbModelParam._m0[31u].z, fma(_1287, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1286)) - _1259;
        float _1300 = fma(_1288, cbModelParam._m0[32u].z, fma(_1287, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1286)) - _1263;
        float _1304 = inversesqrt(dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300)));
        float _1317 = ((_1304 * _1298) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1255 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1304 * _1299) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1259 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1304 * _1300) / cbModelParam._m0[35u].z) + ((((((_1263 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        float _1354 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1321.x + (-0.5));
        float _1356 = _1354 * (_1321.y + (-0.5));
        float _1357 = _1354 * (_1321.z + (-0.5));
        float _1364 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1328.x + (-0.5));
        float _1366 = _1364 * (_1328.y + (-0.5));
        float _1367 = _1364 * (_1328.z + (-0.5));
        float _1374 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1335.x + (-0.5));
        float _1376 = _1374 * (_1335.y + (-0.5));
        float _1377 = _1374 * (_1335.z + (-0.5));
        float _1384 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1342.x + (-0.5));
        float _1386 = _1384 * (_1342.y + (-0.5));
        float _1387 = _1384 * (_1342.z + (-0.5));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = _1355 * 0.5;
        float _1392 = _1365 * 0.5;
        float _1393 = _1375 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_695, _696, _697), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _3842 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1418 + 1.0))) + _1423) * _1388;
        float _1433 = _1356 * 0.5;
        float _1434 = _1366 * 0.5;
        float _1435 = _1376 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_695, _696, _697), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _3875 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1460 + 1.0))) + _1465) * _1389;
        float _1475 = _1357 * 0.5;
        float _1476 = _1367 * 0.5;
        float _1477 = _1377 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_695, _696, _697), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _3908 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1502 + 1.0))) + _1507) * _1390;
        _1524 = _1357;
        _1525 = _1356;
        _1526 = _1355;
        _1527 = _1367;
        _1528 = _1366;
        _1529 = _1365;
        _1530 = _1377;
        _1531 = _1376;
        _1532 = _1375;
        _1533 = _1390;
        _1534 = _1389;
        _1535 = _1388;
        _1536 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
    }
    else
    {
        _1524 = _1217;
        _1525 = _1217;
        _1526 = _1217;
        _1527 = _1217;
        _1528 = _1217;
        _1529 = _1217;
        _1530 = _1217;
        _1531 = _1217;
        _1532 = _1217;
        _1533 = _1217;
        _1534 = _1217;
        _1535 = _1217;
        _1536 = 0.0;
        _1537 = 0.0;
        _1538 = 0.0;
    }
    float _1548 = (cbModelParam._m0[1u].x * (_1536 - _1229)) + _1229;
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1230)) + _1230;
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1231)) + _1231;
    float _1571 = fma(_1550, cbSceneParam._m0[89u].z, fma(_1549, cbSceneParam._m0[89u].y, _1548 * cbSceneParam._m0[89u].x));
    float _1574 = fma(_1550, cbSceneParam._m0[90u].z, fma(_1549, cbSceneParam._m0[90u].y, _1548 * cbSceneParam._m0[90u].x));
    float _1577 = fma(_1550, cbSceneParam._m0[91u].z, fma(_1549, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1548));
    float _1592 = _854 * 0.5;
    float _1593 = _855 * 0.5;
    float _1594 = _856 * 0.5;
    float _1595 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1598 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1601 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1524, _1527, _1530, _1533));
    float _1635;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1608 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1216, _1220, _1223, _1226));
        float _1612 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1218, _1221, _1224, _1227));
        float _1616 = dot(vec4(_1592, _1593, _1594, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1623 = dot(vec4(cbModelParam._m0[39u]), vec4(_1592, _1593, _1594, 1.0));
        _1635 = dot(vec3(isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1623) ? 0.0 : (isnan(0.0) ? _1623 : max(0.0, _1623))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1635 = 1.0;
    }
    float _1646;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1637 = dot(vec4(cbModelParam._m0[40u]), vec4(_1592, _1593, _1594, 1.0));
        _1646 = dot(vec3(isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1637) ? 0.0 : (isnan(0.0) ? _1637 : max(0.0, _1637))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1646 = 1.0;
    }
    float _1650 = (_1646 * cbModelParam._m0[1u].x) + (_1635 * (1.0 - cbModelParam._m0[1u].x));
    float _1660 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _698);
    float _1661 = isnan(_1660) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1660 : min(cbModelParam._m0[25u].z, _1660));
    float _1742;
    float _1744;
    float _1746;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1709 = fma(_915, cbModelParam._m0[13u].z, fma(_911, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _907)) + cbModelParam._m0[13u].w;
        float _1713 = fma(_915, cbModelParam._m0[14u].z, fma(_911, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _907)) + cbModelParam._m0[14u].w;
        float _1717 = fma(_915, cbModelParam._m0[15u].z, fma(_911, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _907)) + cbModelParam._m0[15u].w;
        float _1720 = fma(_856, cbModelParam._m0[13u].z, fma(_855, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _854));
        float _1723 = fma(_856, cbModelParam._m0[14u].z, fma(_855, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _854));
        float _1726 = fma(_856, cbModelParam._m0[15u].z, fma(_855, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _854));
        float _1754;
        if (_1720 > 0.0)
        {
            _1754 = abs((1.0 - _1709) / _1720);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1709 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1754 = frontier_phi_14_12_ladder;
        }
        float _1955;
        if (_1723 > 0.0)
        {
            _1955 = abs((1.0 - _1713) / _1723);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1713 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1955 = frontier_phi_23_19_ladder;
        }
        float _2198;
        if (_1726 > 0.0)
        {
            _2198 = abs((1.0 - _1717) / _1726);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1717 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2198 = frontier_phi_35_30_ladder;
        }
        float _2200 = isnan(_1955) ? _1754 : (isnan(_1754) ? _1955 : min(_1754, _1955));
        float _2201 = isnan(_2198) ? _2200 : (isnan(_2200) ? _2198 : min(_2200, _2198));
        float _2205 = (_2201 * _1720) + _1709;
        float _2206 = (_2201 * _1723) + _1713;
        float _2207 = (_2201 * _1726) + _1717;
        float _2208 = _2201 * 9.9999997473787516355514526367188e-05;
        float _2210 = (-1.0) - _2208;
        float _2212 = _2208 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2207 > _2212) || ((_2207 < _2210) || ((_2206 > _2212) || ((_2206 < _2210) || ((_2205 < _2210) || (_2205 > _2212))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2331 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2207, cbModelParam._m0[9u].z, fma(_2206, cbModelParam._m0[9u].y, _2205 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2207, cbModelParam._m0[10u].z, fma(_2206, cbModelParam._m0[10u].y, _2205 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2207, cbModelParam._m0[11u].z, fma(_2206, cbModelParam._m0[11u].y, _2205 * cbModelParam._m0[11u].x))), _1661);
            frontier_phi_13_35_ladder = _2331.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2331.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2331.x * cbModelParam._m0[1u].y;
        }
        _1742 = frontier_phi_13_35_ladder_2;
        _1744 = frontier_phi_13_35_ladder_1;
        _1746 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1730 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_854, _855, _856), _1661);
        _1742 = _1730.x * cbModelParam._m0[1u].y;
        _1744 = _1730.y * cbModelParam._m0[1u].y;
        _1746 = _1730.z * cbModelParam._m0[1u].y;
    }
    float _1750 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _698);
    float _1751 = isnan(_1750) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1750 : min(cbModelParam._m0[25u].w, _1750));
    float _1841;
    float _1843;
    float _1845;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1805 = fma(_915, cbModelParam._m0[21u].z, fma(_911, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _907)) + cbModelParam._m0[21u].w;
        float _1809 = fma(_915, cbModelParam._m0[22u].z, fma(_911, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _907)) + cbModelParam._m0[22u].w;
        float _1813 = fma(_915, cbModelParam._m0[23u].z, fma(_911, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _907)) + cbModelParam._m0[23u].w;
        float _1816 = fma(_856, cbModelParam._m0[21u].z, fma(_855, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _854));
        float _1819 = fma(_856, cbModelParam._m0[22u].z, fma(_855, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _854));
        float _1822 = fma(_856, cbModelParam._m0[23u].z, fma(_855, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _854));
        float _1960;
        if (_1816 > 0.0)
        {
            _1960 = abs((1.0 - _1805) / _1816);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1805 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1960 = frontier_phi_25_21_ladder;
        }
        float _2225;
        if (_1819 > 0.0)
        {
            _2225 = abs((1.0 - _1809) / _1819);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1809 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2225 = frontier_phi_37_32_ladder;
        }
        float _2430;
        if (_1822 > 0.0)
        {
            _2430 = abs((1.0 - _1813) / _1822);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1813 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2430 = frontier_phi_46_43_ladder;
        }
        float _2432 = isnan(_2225) ? _1960 : (isnan(_1960) ? _2225 : min(_1960, _2225));
        float _2433 = isnan(_2430) ? _2432 : (isnan(_2432) ? _2430 : min(_2432, _2430));
        float _2437 = (_2433 * _1816) + _1805;
        float _2438 = (_2433 * _1819) + _1809;
        float _2439 = (_2433 * _1822) + _1813;
        float _2440 = _2433 * 9.9999997473787516355514526367188e-05;
        float _2441 = (-1.0) - _2440;
        float _2443 = _2440 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2439 > _2443) || ((_2439 < _2441) || ((_2438 > _2443) || ((_2438 < _2441) || ((_2437 < _2441) || (_2437 > _2443))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2638 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2439, cbModelParam._m0[17u].z, fma(_2438, cbModelParam._m0[17u].y, _2437 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2439, cbModelParam._m0[18u].z, fma(_2438, cbModelParam._m0[18u].y, _2437 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2439, cbModelParam._m0[19u].z, fma(_2438, cbModelParam._m0[19u].y, _2437 * cbModelParam._m0[19u].x))), _1751);
            frontier_phi_22_46_ladder = _2638.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2638.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2638.x * cbModelParam._m0[1u].z;
        }
        _1841 = frontier_phi_22_46_ladder_2;
        _1843 = frontier_phi_22_46_ladder_1;
        _1845 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1825 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_854, _855, _856), _1751);
        _1841 = _1825.x * cbModelParam._m0[1u].z;
        _1843 = _1825.y * cbModelParam._m0[1u].z;
        _1845 = _1825.z * cbModelParam._m0[1u].z;
    }
    float _1857 = ((((1.0 - _875) * ((_862 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_875 * _862)) * _846;
    float _1858 = _1857 * ((cbModelParam._m0[1u].w * (_1841 - _1742)) + _1742);
    float _1859 = _1857 * ((cbModelParam._m0[1u].w * (_1843 - _1744)) + _1744);
    float _1860 = _1857 * ((cbModelParam._m0[1u].w * (_1845 - _1746)) + _1746);
    float _1863 = fma(_1860, cbSceneParam._m0[89u].z, fma(_1859, cbSceneParam._m0[89u].y, _1858 * cbSceneParam._m0[89u].x));
    float _1866 = fma(_1860, cbSceneParam._m0[90u].z, fma(_1859, cbSceneParam._m0[90u].y, _1858 * cbSceneParam._m0[90u].x));
    float _1869 = fma(_1860, cbSceneParam._m0[91u].z, fma(_1859, cbSceneParam._m0[91u].y, _1858 * cbSceneParam._m0[91u].x));
    uvec4 _1879 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1881 = _1879.x * 14u;
    uint _1882 = _1881 + 13u;
    float _1889 = _846 + (-1.0);
    float _1894 = (cbLight._m0[_1882].x * _1889) + 1.0;
    float _1895 = (cbLight._m0[_1882].y * _1889) + 1.0;
    float _1896 = (cbLight._m0[_1882].z * _1889) + 1.0;
    float _1897 = (cbLight._m0[_1882].w * _1889) + 1.0;
    uint _1898 = _1881 + 5u;
    float _1904 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
    uint _1908 = _1881 + 4u;
    float _1914 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
    uint _1918 = _1881 | 1u;
    float _1929 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_695, _696, _697));
    float _1932 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_695, _696, _697));
    float _4044 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _4055 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1937 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 0.3183098733425140380859375;
    float _1939 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * 0.3183098733425140380859375;
    float _1946 = ((cbLight._m0[_1898].x * _1904) * _1939) + ((cbLight._m0[_1908].x * _1914) * _1937);
    float _1947 = ((_1904 * cbLight._m0[_1898].y) * _1939) + ((_1914 * cbLight._m0[_1908].y) * _1937);
    float _1948 = ((_1904 * cbLight._m0[_1898].z) * _1939) + ((_1914 * cbLight._m0[_1908].z) * _1937);
    uvec4 _1952 = floatBitsToUint(cbLight._m0[_1881 + 12u]);
    bool _1954 = _1952.x == 0u;
    float _1965;
    float _1967;
    float _1969;
    if (_1954)
    {
        _1965 = _1946;
        _1967 = _1947;
        _1969 = _1948;
    }
    else
    {
        uint _1973 = _1881 + 6u;
        float _1989 = (dot(vec3(cbLight._m0[_1881 + 2u].xyz), vec3(_695, _696, _697)) * 0.5) + 0.5;
        float _1990 = _1989 * _1989;
        float _4066 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1991 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1992 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _1965 = (((cbLight._m0[_1973].x * 0.3183098733425140380859375) * _1991) * _1992) + _1946;
        _1967 = (((cbLight._m0[_1973].y * 0.3183098733425140380859375) * _1991) * _1992) + _1947;
        _1969 = (((cbLight._m0[_1973].z * 0.3183098733425140380859375) * _1991) * _1992) + _1948;
    }
    bool _1972 = _1952.y == 0u;
    float _2010;
    float _2012;
    float _2014;
    if (_1972)
    {
        _2010 = _1965;
        _2012 = _1967;
        _2014 = _1969;
    }
    else
    {
        uint _2169 = _1881 + 7u;
        float _2185 = (dot(vec3(cbLight._m0[_1881 + 3u].xyz), vec3(_695, _696, _697)) * 0.5) + 0.5;
        float _2186 = _2185 * _2185;
        float _4082 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2187 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _2188 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2010 = (((cbLight._m0[_2169].x * 0.3183098733425140380859375) * _2187) * _2188) + _1965;
        _2012 = (((cbLight._m0[_2169].y * 0.3183098733425140380859375) * _2187) * _2188) + _1967;
        _2014 = (((cbLight._m0[_2169].z * 0.3183098733425140380859375) * _2187) * _2188) + _1969;
    }
    uint _2017 = _1881 + 8u;
    float _2030 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1881].w)) * _698) * 0.949999988079071044921875);
    float _2031 = _2030 * _2030;
    float _2032 = cbLight._m0[_1881].x + _775;
    float _2033 = cbLight._m0[_1881].y + _776;
    float _2034 = cbLight._m0[_1881].z + _777;
    float _2038 = inversesqrt(dot(vec3(_2032, _2033, _2034), vec3(_2032, _2033, _2034)));
    float _2039 = _2038 * _2032;
    float _2040 = _2038 * _2033;
    float _2041 = _2038 * _2034;
    float _2042 = dot(vec3(_695, _696, _697), vec3(cbLight._m0[_1881].xyz));
    float _4098 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2045 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _2046 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _2047 = dot(vec3(_695, _696, _697), vec3(_2039, _2040, _2041));
    float _4120 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2051 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_2039, _2040, _2041));
    float _4131 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2055 = _2031 * _2031;
    float _2059 = ((_2050 * _2050) * (_2055 + (-1.0))) + 1.0;
    float _2070 = (exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2071 = 1.0 - _2031;
    float _2082 = (0.5 / (((_2046 * ((_2045 * _2071) + _2031)) + 9.9999999392252902907785028219223e-09) + (((_2046 * _2071) + _2031) * _2045))) * _2045;
    float _4142 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2084 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2055 / ((_2059 * _2059) * 3.141590118408203125));
    uint _2095 = _1881 + 9u;
    float _2106 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1918].w)) * _698) * 0.949999988079071044921875);
    float _2107 = _2106 * _2106;
    float _2108 = cbLight._m0[_1918].x + _775;
    float _2109 = cbLight._m0[_1918].y + _776;
    float _2110 = cbLight._m0[_1918].z + _777;
    float _2114 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
    float _2115 = _2114 * _2108;
    float _2116 = _2114 * _2109;
    float _2117 = _2114 * _2110;
    float _2118 = dot(vec3(_695, _696, _697), vec3(cbLight._m0[_1918].xyz));
    float _4153 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _2122 = dot(vec3(_695, _696, _697), vec3(_2115, _2116, _2117));
    float _4164 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _2126 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_2115, _2116, _2117));
    float _4175 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2130 = _2107 * _2107;
    float _2134 = ((_2125 * _2125) * (_2130 + (-1.0))) + 1.0;
    float _2143 = (exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2144 = 1.0 - _2107;
    float _2154 = (0.5 / (((_2046 * ((_2121 * _2144) + _2107)) + 9.9999999392252902907785028219223e-09) + (((_2046 * _2144) + _2107) * _2121))) * _2121;
    float _4186 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2156 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2130 / ((_2134 * _2134) * 3.141590118408203125));
    float _2166 = (((_2143 * cbLight._m0[_2095].x) * _2156) * _1904) + (((_2070 * cbLight._m0[_2017].x) * _2084) * _1914);
    float _2167 = (((_2143 * cbLight._m0[_2095].y) * _2156) * _1904) + (((_2070 * cbLight._m0[_2017].y) * _2084) * _1914);
    float _2168 = (((_2143 * cbLight._m0[_2095].z) * _2156) * _1904) + (((_2070 * cbLight._m0[_2017].z) * _2084) * _1914);
    float _2230;
    float _2232;
    float _2234;
    if (_1954)
    {
        _2230 = _2166;
        _2232 = _2167;
        _2234 = _2168;
    }
    else
    {
        uint _2236 = _1881 + 2u;
        uint _2240 = _1881 + 10u;
        float _2254 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _698) * 0.949999988079071044921875);
        float _2255 = _2254 * _2254;
        float _2256 = cbLight._m0[_2236].x + _775;
        float _2257 = cbLight._m0[_2236].y + _776;
        float _2258 = cbLight._m0[_2236].z + _777;
        float _2262 = inversesqrt(dot(vec3(_2256, _2257, _2258), vec3(_2256, _2257, _2258)));
        float _2263 = _2262 * _2256;
        float _2264 = _2262 * _2257;
        float _2265 = _2262 * _2258;
        float _2266 = dot(vec3(_695, _696, _697), vec3(cbLight._m0[_2236].xyz));
        float _4197 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2270 = dot(vec3(_695, _696, _697), vec3(_2263, _2264, _2265));
        float _4208 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2273 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2274 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2263, _2264, _2265));
        float _4219 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2278 = _2255 * _2255;
        float _2282 = ((_2273 * _2273) * (_2278 + (-1.0))) + 1.0;
        float _2291 = (exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2292 = 1.0 - _2255;
        float _2302 = (0.5 / (((_2046 * ((_2269 * _2292) + _2255)) + 9.9999999392252902907785028219223e-09) + (((_2046 * _2292) + _2255) * _2269))) * _2269;
        float _4230 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2304 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2278 / ((_2282 * _2282) * 3.141590118408203125));
        float _2305 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
        _2230 = (((_2291 * cbLight._m0[_2240].x) * _2304) * _2305) + _2166;
        _2232 = (((_2291 * cbLight._m0[_2240].y) * _2304) * _2305) + _2167;
        _2234 = (((_2291 * cbLight._m0[_2240].z) * _2304) * _2305) + _2168;
    }
    float _2340;
    float _2342;
    float _2344;
    if (_1972)
    {
        _2340 = _2230;
        _2342 = _2232;
        _2344 = _2234;
    }
    else
    {
        uint _2351 = _1881 + 3u;
        uint _2355 = _1881 + 11u;
        float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2351].w)) * _698) * 0.949999988079071044921875);
        float _2370 = _2369 * _2369;
        float _2371 = cbLight._m0[_2351].x + _775;
        float _2372 = cbLight._m0[_2351].y + _776;
        float _2373 = cbLight._m0[_2351].z + _777;
        float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
        float _2378 = _2377 * _2371;
        float _2379 = _2377 * _2372;
        float _2380 = _2377 * _2373;
        float _2381 = dot(vec3(_695, _696, _697), vec3(cbLight._m0[_2351].xyz));
        float _4246 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2384 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2385 = dot(vec3(_695, _696, _697), vec3(_2378, _2379, _2380));
        float _4257 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2388 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2389 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_2378, _2379, _2380));
        float _4268 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2393 = _2370 * _2370;
        float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
        float _2406 = (exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2407 = 1.0 - _2370;
        float _2417 = (0.5 / (((_2046 * ((_2384 * _2407) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2046 * _2407) + _2370) * _2384))) * _2384;
        float _4279 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2419 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
        float _2420 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2340 = (((_2406 * cbLight._m0[_2355].x) * _2419) * _2420) + _2230;
        _2342 = (((_2406 * cbLight._m0[_2355].y) * _2419) * _2420) + _2232;
        _2344 = (((_2406 * cbLight._m0[_2355].z) * _2419) * _2420) + _2234;
    }
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    float _2565;
    if (_1879.y == 0u)
    {
        float _2495 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2496 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2495;
        float _2497 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2495;
        float _2498 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2495;
        uvec4 _2510 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2511 = _2510.x;
        uint _2522 = uint((float(_2510.y) * floor(float(uint(cbSceneParam._m0[85u].y * _784) / _2511))) + floor(float(uint(cbSceneParam._m0[85u].x * _783) / _2511)));
        float _2532 = (log2(_2498 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2533 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        uint _2536 = uint(isnan(14.0) ? _2533 : (isnan(_2533) ? 14.0 : min(_2533, 14.0)));
        uvec4 _2541 = texelFetch(g_lightClusterGridBuffer, int(((_2536 << 2u) + (_2522 << 6u)) >> 2u));
        uint _2542 = _2541.x;
        uint _2543 = _2510.z;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        if (((((1u << ((_2543 >> 4u) & 15u)) + 4294967295u) & _2542) == 0u) || ((_2543 & 240u) == 0u))
        {
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
        }
        else
        {
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2652;
            float _2654;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            uint _2794 = 0u;
            uint _2803;
            bool _2804;
            for (;;)
            {
                _2803 = texelFetch(g_lightClassification, int((((_2536 << 5u) + (_2522 << 9u)) + (_2794 << 2u)) >> 2u)).x;
                _2804 = _2803 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2804)
                {
                    frontier_phi_61_pred = _2788;
                    frontier_phi_61_pred_1 = _2793;
                    frontier_phi_61_pred_2 = _2792;
                    frontier_phi_61_pred_3 = _2791;
                    frontier_phi_61_pred_4 = _2790;
                    frontier_phi_61_pred_5 = _2789;
                }
                else
                {
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    uint _2918;
                    _2912 = _2788;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2792;
                    _2917 = _2793;
                    _2918 = _2803;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    for (;;)
                    {
                        uint _2922 = uint(findLSB(_2918)) + (_2794 << 5u);
                        uint _2919 = (_2918 + 4294967295u) & _2918;
                        uint _2924 = _2922 * 48u;
                        vec4 _2938 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2924)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 3u)).x));
                        uint _2944 = (_2922 * 48u) + 4u;
                        vec4 _2957 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2944)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2944 + 3u)).x));
                        uint _2963 = (_2922 * 48u) + 8u;
                        vec3 _2974 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2963)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2963 + 2u)).x));
                        float _2978 = _2938.x - _2496;
                        float _2979 = _2938.y - _2497;
                        float _2980 = _2938.z - _2498;
                        float _2981 = dot(vec3(_2978, _2979, _2980), vec3(_2978, _2979, _2980));
                        float _2984 = inversesqrt(_2981);
                        float _2985 = _2984 * _2978;
                        float _2986 = _2984 * _2979;
                        float _2987 = _2984 * _2980;
                        float _2988 = dot(vec3(_802, _805, _808), vec3(_2985, _2986, _2987));
                        float _2993 = 1.0 - (_2981 * _2938.w);
                        float _4305 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2994 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                        float _2995 = sqrt(_2981) * _2957.w;
                        float _2998 = 1.39999997615814208984375 / (_2995 + 1.39999997615814208984375);
                        float _2999 = _2998 * _2998;
                        float _3002 = ((1.0 - _2999) * _2988) + _2999;
                        float _3005 = _2995 * _2995;
                        float _3009 = ((isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0))) * _2994) / ((_3005 * 0.699999988079071044921875) + 1.0);
                        float _3013 = (-0.0) - _2496;
                        float _3014 = (-0.0) - _2497;
                        float _3015 = (-0.0) - _2498;
                        float _3019 = inversesqrt(dot(vec3(_3013, _3014, _3015), vec3(_3013, _3014, _3015)));
                        float _3020 = _3019 * _3013;
                        float _3021 = _3019 * _3014;
                        float _3022 = _3019 * _3015;
                        float _3030 = exp2(log2(1.0 / ((_3005 * 3.5) + 5.0)) * 0.25);
                        float _3031 = 1.0 - _862;
                        float _3038 = sqrt(1.0 - ((1.0 - (_3031 * _3031)) * (1.0 - (_3030 * _3030))));
                        float _3039 = _3038 * _3038;
                        float _3040 = _3039 * _3039;
                        float _3041 = _3020 + _2985;
                        float _3042 = _3021 + _2986;
                        float _3043 = _3022 + _2987;
                        float _3047 = inversesqrt(dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043)));
                        float _3051 = dot(vec3(_802, _805, _808), vec3(_3020, _3021, _3022));
                        float _4321 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3054 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _3055 = dot(vec3(_802, _805, _808), vec3(_3047 * _3041, _3047 * _3042, _3047 * _3043));
                        float _4332 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3058 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _3062 = ((_3058 * _3058) * (_3040 + (-1.0))) + 1.0;
                        float _3063 = _2998 * _3039;
                        float _3064 = _3063 * _3063;
                        float _3067 = ((1.0 - _3064) * _2988) + _3064;
                        float _4343 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3068 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _3069 = 1.0 - _3039;
                        float _3079 = (0.5 / (((_3068 * ((_3054 * _3069) + _3039)) + 9.9999999392252902907785028219223e-09) + (((_3068 * _3069) + _3039) * _3054))) * _3068;
                        float _4354 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3090 = (((_3040 * 3.1415927410125732421875) * (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) / ((_3062 * _3062) * ((_3005 * 2.1991131305694580078125) + 3.141590118408203125))) * _2994;
                        _2847 = (_3009 * _2957.x) + _2915;
                        _2848 = (_3009 * _2957.y) + _2916;
                        _2849 = (_3009 * _2957.z) + _2917;
                        _2844 = (_3090 * _2974.x) + _2912;
                        _2845 = (_3090 * _2974.y) + _2913;
                        _2846 = (_3090 * _2974.z) + _2914;
                        if (_2919 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2912 = _2844;
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2848;
                            _2917 = _2849;
                            _2918 = _2919;
                        }
                    }
                    frontier_phi_61_pred = _2844;
                    frontier_phi_61_pred_1 = _2849;
                    frontier_phi_61_pred_2 = _2848;
                    frontier_phi_61_pred_3 = _2847;
                    frontier_phi_61_pred_4 = _2846;
                    frontier_phi_61_pred_5 = _2845;
                }
                _2644 = frontier_phi_61_pred;
                _2654 = frontier_phi_61_pred_1;
                _2652 = frontier_phi_61_pred_2;
                _2650 = frontier_phi_61_pred_3;
                _2648 = frontier_phi_61_pred_4;
                _2646 = frontier_phi_61_pred_5;
                uint _2795 = _2794 + 1u;
                if (_2795 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2788 = _2644;
                    _2789 = _2646;
                    _2790 = _2648;
                    _2791 = _2650;
                    _2792 = _2652;
                    _2793 = _2654;
                    _2794 = _2795;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
        }
        uvec4 _2657 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2658 = _2657.z;
        uint _2660 = (_2658 >> 8u) & 15u;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        float _2766;
        if (((4294967295u << _2660) & _2542) == 0u)
        {
            _2756 = _2643;
            _2758 = _2645;
            _2760 = _2647;
            _2762 = _2649;
            _2764 = _2651;
            _2766 = _2653;
        }
        else
        {
            float _2781 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
            float _2782 = _2781 * _2496;
            float _2783 = _2781 * _2497;
            float _2784 = _2781 * _2498;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2660 < ((_2658 >> 12u) & 15u))
            {
                float _2757;
                float _2759;
                float _2761;
                float _2763;
                float _2765;
                float _2767;
                float _2895 = _2643;
                float _2896 = _2645;
                float _2897 = _2647;
                float _2898 = _2649;
                float _2899 = _2651;
                float _2900 = _2653;
                uint _2901 = _2660;
                uint _2910;
                bool _2911;
                for (;;)
                {
                    _2910 = texelFetch(g_lightClassification, int((((_2536 << 5u) + (_2522 << 9u)) + (_2901 << 2u)) >> 2u)).x;
                    _2911 = _2910 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2911)
                    {
                        frontier_phi_67_pred = _2898;
                        frontier_phi_67_pred_1 = _2899;
                        frontier_phi_67_pred_2 = _2900;
                        frontier_phi_67_pred_3 = _2897;
                        frontier_phi_67_pred_4 = _2896;
                        frontier_phi_67_pred_5 = _2895;
                    }
                    else
                    {
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3108 = _2895;
                        float _3109 = _2896;
                        float _3110 = _2897;
                        float _3111 = _2898;
                        float _3112 = _2899;
                        float _3113 = _2900;
                        uint _3114 = _2910;
                        uint _3115;
                        vec4 _3140;
                        float _3141;
                        vec4 _3156;
                        vec3 _3168;
                        vec4 _3183;
                        vec4 _3198;
                        float _3244;
                        bool _3245;
                        for (;;)
                        {
                            uint _3125 = ((_2901 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3114));
                            _3115 = (_3114 + 4294967295u) & _3114;
                            uint _3127 = _3125 * 40u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            _3141 = _3140.w;
                            uint _3143 = (_3125 * 40u) + 4u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3158 = (_3125 * 40u) + 8u;
                            _3168 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x));
                            uint _3170 = (_3125 * 40u) + 16u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3185 = (_3125 * 40u) + 20u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3200 = (_3125 * 40u) + 24u;
                            vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            uint _3219 = (_3125 * 40u) + 28u;
                            vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            _3244 = fma(_2498, _3232.z, fma(_2497, _3232.y, _3232.x * _2496)) + _3232.w;
                            _3245 = !((fma(_2498, _3213.z, fma(_2497, _3213.y, _3213.x * _2496)) + _3213.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3245)
                            {
                                float _3272 = _3140.x - _2496;
                                float _3273 = _3140.y - _2497;
                                float _3274 = _3140.z - _2498;
                                float _3275 = dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274));
                                float _3278 = inversesqrt(_3275);
                                float _3279 = _3278 * _3272;
                                float _3280 = _3278 * _3273;
                                float _3281 = _3278 * _3274;
                                float _3285 = 1.0 - (_3275 / (_3141 * _3141));
                                float _4365 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3286 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3290 = sqrt(_3275) * _3156.w;
                                float _3292 = 1.39999997615814208984375 / (_3290 + 1.39999997615814208984375);
                                float _3293 = _3292 * _3292;
                                float _3296 = ((1.0 - _3293) * dot(vec3(_3279, _3280, _3281), vec3(_802, _805, _808))) + _3293;
                                float _3299 = _3290 * _3290;
                                float _3303 = (fma(_2498, _3183.z, fma(_2497, _3183.y, _3183.x * _2496)) + _3183.w) / _3244;
                                float _3304 = (fma(_2498, _3198.z, fma(_2497, _3198.y, _3198.x * _2496)) + _3198.w) / _3244;
                                float _3308 = 1.0 - dot(vec2(_3303, _3304), vec2(_3303, _3304));
                                float _4381 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3309 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3310 = _3309 * (((isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0))) * _3286) / ((_3299 * 0.699999988079071044921875) + 1.0));
                                float _3322 = exp2(log2(1.0 / ((_3299 * 3.5) + 5.0)) * 0.25);
                                float _3323 = 1.0 - _862;
                                float _3330 = sqrt(1.0 - ((1.0 - (_3323 * _3323)) * (1.0 - (_3322 * _3322))));
                                float _3331 = _3330 * _3330;
                                float _3332 = _3331 * _3331;
                                float _3333 = _3279 - _2782;
                                float _3334 = _3280 - _2783;
                                float _3335 = _3281 - _2784;
                                float _3339 = inversesqrt(dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335)));
                                float _3343 = dot(vec3(_802, _805, _808), vec3((-0.0) - _2782, (-0.0) - _2783, (-0.0) - _2784));
                                float _4392 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3346 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3347 = dot(vec3(_802, _805, _808), vec3(_3339 * _3333, _3339 * _3334, _3339 * _3335));
                                float _4403 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3350 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3354 = ((_3350 * _3350) * (_3332 + (-1.0))) + 1.0;
                                float _3355 = _3292 * _3331;
                                float _3356 = _3355 * _3355;
                                float _3362 = ((1.0 - _3356) * dot(vec3(_802, _805, _808), vec3(_3279, _3280, _3281))) + _3356;
                                float _4414 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3363 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3364 = 1.0 - _3331;
                                float _3374 = (0.5 / (((_3363 * ((_3346 * _3364) + _3331)) + 9.9999999392252902907785028219223e-09) + (((_3363 * _3364) + _3331) * _3346))) * _3363;
                                float _4425 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3384 = (_3309 * _3286) * (((_3332 * 3.1415927410125732421875) * (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) / ((_3354 * _3354) * ((_3299 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3384 * _3168.x;
                                frontier_phi_73_pred_1 = _3384 * _3168.y;
                                frontier_phi_73_pred_2 = _3310 * _3156.z;
                                frontier_phi_73_pred_3 = _3310 * _3156.y;
                                frontier_phi_73_pred_4 = _3310 * _3156.x;
                                frontier_phi_73_pred_5 = _3384 * _3168.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3388 = frontier_phi_73_pred;
                            _3389 = frontier_phi_73_pred_1;
                            _3393 = frontier_phi_73_pred_2;
                            _3392 = frontier_phi_73_pred_3;
                            _3391 = frontier_phi_73_pred_4;
                            _3390 = frontier_phi_73_pred_5;
                            _3098 = _3391 + _3111;
                            _3099 = _3392 + _3112;
                            _3100 = _3393 + _3113;
                            _3095 = _3388 + _3108;
                            _3096 = _3389 + _3109;
                            _3097 = _3390 + _3110;
                            if (_3115 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3115;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3098;
                        frontier_phi_67_pred_1 = _3099;
                        frontier_phi_67_pred_2 = _3100;
                        frontier_phi_67_pred_3 = _3097;
                        frontier_phi_67_pred_4 = _3096;
                        frontier_phi_67_pred_5 = _3095;
                    }
                    _2763 = frontier_phi_67_pred;
                    _2765 = frontier_phi_67_pred_1;
                    _2767 = frontier_phi_67_pred_2;
                    _2761 = frontier_phi_67_pred_3;
                    _2759 = frontier_phi_67_pred_4;
                    _2757 = frontier_phi_67_pred_5;
                    uint _2902 = _2901 + 1u;
                    if (_2902 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2895 = _2757;
                        _2896 = _2759;
                        _2897 = _2761;
                        _2898 = _2763;
                        _2899 = _2765;
                        _2900 = _2767;
                        _2901 = _2902;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2765;
                frontier_phi_55_56_ladder_1 = _2767;
                frontier_phi_55_56_ladder_2 = _2763;
                frontier_phi_55_56_ladder_3 = _2761;
                frontier_phi_55_56_ladder_4 = _2759;
                frontier_phi_55_56_ladder_5 = _2757;
            }
            else
            {
                frontier_phi_55_56_ladder = _2651;
                frontier_phi_55_56_ladder_1 = _2653;
                frontier_phi_55_56_ladder_2 = _2649;
                frontier_phi_55_56_ladder_3 = _2647;
                frontier_phi_55_56_ladder_4 = _2645;
                frontier_phi_55_56_ladder_5 = _2643;
            }
            _2756 = frontier_phi_55_56_ladder_5;
            _2758 = frontier_phi_55_56_ladder_4;
            _2760 = frontier_phi_55_56_ladder_3;
            _2762 = frontier_phi_55_56_ladder_2;
            _2764 = frontier_phi_55_56_ladder;
            _2766 = frontier_phi_55_56_ladder_1;
        }
        float _2771 = isnan(1.0) ? _846 : (isnan(_846) ? 1.0 : min(_846, 1.0));
        _2555 = (_2771 * _2762) + _2010;
        _2557 = (_2771 * _2764) + _2012;
        _2559 = (_2771 * _2766) + _2014;
        _2561 = ((_2756 * 0.039999999105930328369140625) * _2771) + _2340;
        _2563 = ((_2758 * 0.039999999105930328369140625) * _2771) + _2342;
        _2565 = ((_2760 * 0.039999999105930328369140625) * _2771) + _2344;
    }
    else
    {
        _2555 = _2010;
        _2557 = _2012;
        _2559 = _2014;
        _2561 = _2340;
        _2563 = _2342;
        _2565 = _2344;
    }
    float _4441 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4452 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4463 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    uint _2585 = _240 + 6u;
    float _2593 = _783 / cbSceneParam._m0[86u].x;
    float _2594 = _784 / cbSceneParam._m0[86u].y;
    vec4 _2608 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, (log2((isnan(cbSceneParam._m0[77u].w) ? _716 : (isnan(_716) ? cbSceneParam._m0[77u].w : min(_716, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2610 = _2608.x;
    float _2611 = _2608.y;
    float _2612 = _2608.z;
    float _2613 = _2608.w;
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    if (_716 > cbSceneParam._m0[78u].w)
    {
        float _2668 = isnan(_716) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _716 : min(cbSceneParam._m0[80u].w, _716));
        float _2669 = _2668 / _716;
        float _2680 = _2669 * _768;
        float _2681 = _769 * _2669;
        float _2682 = (-0.0) - _2681;
        float _2684 = _2669 * _770;
        float _2686 = (cbSceneParam._m0[77u].w * _2682) / _2668;
        float _2687 = _2686 + cbSceneParam._m0[79u].w;
        float _2688 = cbSceneParam._m0[79u].w - _2681;
        float _2694 = sqrt(((_2680 * _2680) + (_2681 * _2681)) + (_2684 * _2684));
        float _2697 = (1.0 - (cbSceneParam._m0[77u].w / _2668)) * _2694;
        float _2702 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2704 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2857;
        if (abs((_2682 - _2686) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2857 = ((((_2687 > 0.0) ? exp2(_2702 * _2687) : (2.0 - exp2(_2704 * _2687))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2697;
        }
        else
        {
            float _2817 = 1.0 / cbSceneParam._m0[80u].x;
            float _2818 = isnan(_2688) ? _2687 : (isnan(_2687) ? _2688 : max(_2687, _2688));
            float _2819 = isnan(_2688) ? _2687 : (isnan(_2687) ? _2688 : min(_2687, _2688));
            float _2828 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : min(_2818, 0.0));
            float _2829 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : min(_2819, 0.0));
            _2857 = ((abs(_2694 / _2682) * cbSceneParam._m0[80u].y) * ((((_2828 - _2829) * 2.0) - ((exp2(_2702 * (isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0)))) - exp2(_2702 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0))))) * _2817)) - ((exp2(_2704 * _2828) - exp2(_2704 * _2829)) * _2817))) + (_2697 * cbSceneParam._m0[80u].z);
        }
        vec4 _2859 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, 1.0), 0.0);
        float _2868 = exp2((_2857 * (-1.44269502162933349609375)) * (1.0 - _2859.w));
        float _2869 = log2(_2868);
        float _2885 = log2(_2613);
        _2706 = (exp2(_2885 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2869 * cbSceneParam._m0[78u].x)) * _2859.x) / cbSceneParam._m0[78u].x)) + _2610;
        _2708 = (exp2(_2885 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2869 * cbSceneParam._m0[78u].y)) * _2859.y) / cbSceneParam._m0[78u].y)) + _2611;
        _2710 = (exp2(_2885 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2869 * cbSceneParam._m0[78u].z)) * _2859.z) / cbSceneParam._m0[78u].z)) + _2612;
        _2712 = _2868 * _2613;
    }
    else
    {
        _2706 = _2610;
        _2708 = _2611;
        _2710 = _2612;
        _2712 = _2613;
    }
    float _2724 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2725 = _2724 == 3.0;
    float _2726 = log2(_2712);
    float _2733 = exp2(_2726 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2555 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _846))) + ((_2561 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1650)) * cbPerFrame._m0[3u].x));
    float _2734 = exp2(_2726 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2557 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _846))) + ((_2563 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1650)) * cbPerFrame._m0[3u].x));
    float _2735 = exp2(_2726 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2559 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _846))) + ((_2565 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1650)) * cbPerFrame._m0[3u].x));
    float _2744 = (_2724 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2744 * (_2725 ? _2733 : (_2733 + (cbSceneParam._m0[72u].w * _2706)));
    SV_Target.y = _2744 * (_2725 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2708)));
    SV_Target.z = _2744 * (_2725 ? _2735 : (_2735 + (cbSceneParam._m0[72u].w * _2710)));
    SV_Target.w = cbInstanceData._m0[_2585].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2585].w;
}


