#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1195;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3785 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3796 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3807 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _326 = _321.x * cbMtdParam._m0[11u].x;
    float _327 = _321.y * cbMtdParam._m0[11u].y;
    float _328 = _321.z * cbMtdParam._m0[11u].z;
    vec4 _347 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _384 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _386 = _384.x;
    float _396 = dot(vec4(_386, _384.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _413 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_386 - _396) * cbMtdParam._m0[24u].x) + _396) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3818 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _421 = (_414 * ((_347.x * cbMtdParam._m0[12u].x) - _326)) + _326;
    float _422 = (_414 * ((_347.y * cbMtdParam._m0[12u].y) - _327)) + _327;
    float _423 = (_414 * ((_347.z * cbMtdParam._m0[12u].z) - _328)) + _328;
    vec4 _440 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _283) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _284) + cbTextureTilingScale._m0[3u].w));
    vec4 _460 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _462 = _460.x;
    float _472 = dot(vec4(_462, _460.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _486 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_462 - _472) * cbMtdParam._m0[24u].x) + _472) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3829 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _487 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _494 = (_487 * ((_440.x * cbMtdParam._m0[13u].x) - _421)) + _421;
    float _495 = (_487 * ((_440.y * cbMtdParam._m0[13u].y) - _422)) + _422;
    float _496 = (_487 * ((_440.z * cbMtdParam._m0[13u].z) - _423)) + _423;
    float _500 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _494;
    float _503 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _495;
    float _506 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _496;
    float _513 = ((_494 - _500) * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) + _500;
    float _514 = ((_495 - _503) * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) + _503;
    float _515 = ((_496 - _506) * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) + _506;
    vec4 _527 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _550 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _567 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _569 = _567.x;
    float _570 = _567.y;
    float _571 = _567.z;
    float _578 = ((_550.x - _569) * _414) + _569;
    float _579 = ((_550.y - _570) * _414) + _570;
    float _580 = ((_550.z - _571) * _414) + _571;
    vec4 _592 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _283) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _284) + cbTextureTilingScale._m0[2u].w));
    float _605 = ((_592.z - _580) * _487) + _580;
    float _608 = ((((_592.x - _578) * _487) + _578) * 2.0) + (-1.0);
    float _609 = ((((_592.y - _579) * _487) + _579) * 2.0) + (-1.0);
    float _610 = dot(vec2(_608, _609), vec2(_608, _609));
    float _3840 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _615 = sqrt(1.0 - (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))));
    vec4 _635 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _647 = (_608 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_527.x * 2.0) + (-1.0)))) + (((_635.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _648 = (_609 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_527.y * 2.0) + (-1.0)))) + (((_635.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _653 = (((_527.z - _605) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _605;
    float _657 = ((_635.z - _653) * cbMtdParam._m0[19u].w) + _653;
    float _659 = cbMtdParam._m0[22u].x + _635.w;
    float _662 = fma(_615, _230 * NORMAL.x, fma(_648, _237 * TANGENT.x, (_223 * _215) * _647));
    float _665 = fma(_615, _230 * NORMAL.y, fma(_648, _237 * TANGENT.y, (_223 * _216) * _647));
    float _668 = fma(_615, _230 * NORMAL.z, fma(_648, _237 * TANGENT.z, (_223 * _217) * _647));
    float _672 = inversesqrt(dot(vec3(_662, _665, _668), vec3(_662, _665, _668)));
    float _673 = _672 * _662;
    float _674 = _672 * _665;
    float _675 = _672 * _668;
    float _3851 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _676 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _3873 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _3884 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3895 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _694 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _746 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _736);
    float _747 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _736);
    float _748 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _736);
    float _752 = inversesqrt(dot(vec3(_746, _747, _748), vec3(_746, _747, _748)));
    float _753 = _746 * _752;
    float _754 = _747 * _752;
    float _755 = _748 * _752;
    float _761 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _762 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _780 = fma(_675, cbSceneParam._m0[5u].z, fma(_674, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _673));
    float _783 = fma(_675, cbSceneParam._m0[6u].z, fma(_674, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _673));
    float _786 = fma(_675, cbSceneParam._m0[7u].z, fma(_674, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _673));
    uint _800 = (_264 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _806 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_800].x;
    float _807 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * cbInstanceData._m0[_800].y;
    float _808 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * cbInstanceData._m0[_800].z;
    float _3906 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _3917 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _811 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    vec4 _820 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _761, cbSceneParam._m0[86u].y * _762));
    float _824 = ((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * TEXCOORD_5.w) * _820.x;
    float _825 = dot(vec3(_673, _674, _675), vec3(_753, _754, _755));
    float _828 = _825 * 2.0;
    float _832 = (_828 * _673) - _753;
    float _833 = (_828 * _674) - _754;
    float _834 = (_828 * _675) - _755;
    float _838 = abs(dot(vec3(_753, _754, _755), vec3(_673, _674, _675)));
    float _3939 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _840 = sqrt(_676);
    float _853 = exp2((_840 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_840 * 3.0));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1194;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _919 = fma(_893, cbModelParam._m0[26u].z, fma(_889, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885));
        float _923 = fma(_893, cbModelParam._m0[27u].z, fma(_889, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885));
        float _927 = fma(_893, cbModelParam._m0[28u].z, fma(_889, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885));
        float _952 = _885 + _673;
        float _953 = _889 + _674;
        float _954 = _893 + _675;
        float _964 = fma(_954, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _952)) - _919;
        float _965 = fma(_954, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _952)) - _923;
        float _966 = fma(_954, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _952)) - _927;
        float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
        float _983 = ((_970 * _964) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_919 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_970 * _965) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_923 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_970 * _966) / cbModelParam._m0[34u].z) + ((((((_927 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        float _1022 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_988.x + (-0.5));
        float _1024 = _1022 * (_988.y + (-0.5));
        float _1025 = _1022 * (_988.z + (-0.5));
        float _1032 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_995.x + (-0.5));
        float _1034 = _1032 * (_995.y + (-0.5));
        float _1035 = _1032 * (_995.z + (-0.5));
        float _1042 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1002.x + (-0.5));
        float _1044 = _1042 * (_1002.y + (-0.5));
        float _1045 = _1042 * (_1002.z + (-0.5));
        float _1052 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1009.x + (-0.5));
        float _1054 = _1052 * (_1009.y + (-0.5));
        float _1055 = _1052 * (_1009.z + (-0.5));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = _1023 * 0.5;
        float _1060 = _1033 * 0.5;
        float _1061 = _1043 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1076 = (dot(vec3(_673, _674, _675), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1086 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3987 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1088 + 1.0))) + _1093) * _1056;
        float _1103 = _1024 * 0.5;
        float _1104 = _1034 * 0.5;
        float _1105 = _1044 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_673, _674, _675), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _4020 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1130 + 1.0))) + _1135) * _1057;
        float _1145 = _1025 * 0.5;
        float _1146 = _1035 * 0.5;
        float _1147 = _1045 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_673, _674, _675), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _4053 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1172 + 1.0))) + _1177) * _1058;
        _1194 = _1025;
        _1196 = _1024;
        _1197 = _1023;
        _1198 = _1035;
        _1199 = _1034;
        _1200 = _1033;
        _1201 = _1045;
        _1202 = _1044;
        _1203 = _1043;
        _1204 = _1058;
        _1205 = _1057;
        _1206 = _1056;
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
    }
    else
    {
        _1194 = _1195;
        _1196 = _1195;
        _1197 = _1195;
        _1198 = _1195;
        _1199 = _1195;
        _1200 = _1195;
        _1201 = _1195;
        _1202 = _1195;
        _1203 = _1195;
        _1204 = _1195;
        _1205 = _1195;
        _1206 = _1195;
        _1207 = 0.0;
        _1208 = 0.0;
        _1209 = 0.0;
    }
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1233 = fma(_893, cbModelParam._m0[30u].z, fma(_889, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _885));
        float _1237 = fma(_893, cbModelParam._m0[31u].z, fma(_889, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _885));
        float _1241 = fma(_893, cbModelParam._m0[32u].z, fma(_889, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _885));
        float _1264 = _885 + _673;
        float _1265 = _889 + _674;
        float _1266 = _893 + _675;
        float _1276 = fma(_1266, cbModelParam._m0[30u].z, fma(_1265, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1264)) - _1233;
        float _1277 = fma(_1266, cbModelParam._m0[31u].z, fma(_1265, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1264)) - _1237;
        float _1278 = fma(_1266, cbModelParam._m0[32u].z, fma(_1265, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1264)) - _1241;
        float _1282 = inversesqrt(dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278)));
        float _1295 = ((_1282 * _1276) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1233 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1282 * _1277) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1237 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1282 * _1278) / cbModelParam._m0[35u].z) + ((((((_1241 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        float _1332 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1299.x + (-0.5));
        float _1334 = _1332 * (_1299.y + (-0.5));
        float _1335 = _1332 * (_1299.z + (-0.5));
        float _1342 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1306.x + (-0.5));
        float _1344 = _1342 * (_1306.y + (-0.5));
        float _1345 = _1342 * (_1306.z + (-0.5));
        float _1352 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1313.x + (-0.5));
        float _1354 = _1352 * (_1313.y + (-0.5));
        float _1355 = _1352 * (_1313.z + (-0.5));
        float _1362 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1320.x + (-0.5));
        float _1364 = _1362 * (_1320.y + (-0.5));
        float _1365 = _1362 * (_1320.z + (-0.5));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = _1333 * 0.5;
        float _1370 = _1343 * 0.5;
        float _1371 = _1353 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_673, _674, _675), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _4094 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _4105 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _4116 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1396 + 1.0))) + _1401) * _1366;
        float _1411 = _1334 * 0.5;
        float _1412 = _1344 * 0.5;
        float _1413 = _1354 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_673, _674, _675), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _4149 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1438 + 1.0))) + _1443) * _1367;
        float _1453 = _1335 * 0.5;
        float _1454 = _1345 * 0.5;
        float _1455 = _1355 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_673, _674, _675), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _4182 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1480 + 1.0))) + _1485) * _1368;
        _1502 = _1335;
        _1503 = _1334;
        _1504 = _1333;
        _1505 = _1345;
        _1506 = _1344;
        _1507 = _1343;
        _1508 = _1355;
        _1509 = _1354;
        _1510 = _1353;
        _1511 = _1368;
        _1512 = _1367;
        _1513 = _1366;
        _1514 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1515 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
        _1516 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
    }
    else
    {
        _1502 = _1195;
        _1503 = _1195;
        _1504 = _1195;
        _1505 = _1195;
        _1506 = _1195;
        _1507 = _1195;
        _1508 = _1195;
        _1509 = _1195;
        _1510 = _1195;
        _1511 = _1195;
        _1512 = _1195;
        _1513 = _1195;
        _1514 = 0.0;
        _1515 = 0.0;
        _1516 = 0.0;
    }
    float _1526 = (cbModelParam._m0[1u].x * (_1514 - _1207)) + _1207;
    float _1527 = (cbModelParam._m0[1u].x * (_1515 - _1208)) + _1208;
    float _1528 = (cbModelParam._m0[1u].x * (_1516 - _1209)) + _1209;
    float _1549 = fma(_1528, cbSceneParam._m0[89u].z, fma(_1527, cbSceneParam._m0[89u].y, _1526 * cbSceneParam._m0[89u].x));
    float _1552 = fma(_1528, cbSceneParam._m0[90u].z, fma(_1527, cbSceneParam._m0[90u].y, _1526 * cbSceneParam._m0[90u].x));
    float _1555 = fma(_1528, cbSceneParam._m0[91u].z, fma(_1527, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1526));
    float _1570 = _832 * 0.5;
    float _1571 = _833 * 0.5;
    float _1572 = _834 * 0.5;
    float _1573 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1504, _1507, _1510, _1513));
    float _1576 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1503, _1506, _1509, _1512));
    float _1579 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1502, _1505, _1508, _1511));
    float _1613;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1586 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1194, _1198, _1201, _1204));
        float _1590 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1196, _1199, _1202, _1205));
        float _1594 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1197, _1200, _1203, _1206));
        float _1601 = dot(vec4(cbModelParam._m0[39u]), vec4(_1570, _1571, _1572, 1.0));
        _1613 = dot(vec3(isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1601) ? 0.0 : (isnan(0.0) ? _1601 : max(0.0, _1601))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1613 = 1.0;
    }
    float _1624;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1615 = dot(vec4(cbModelParam._m0[40u]), vec4(_1570, _1571, _1572, 1.0));
        _1624 = dot(vec3(isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1615) ? 0.0 : (isnan(0.0) ? _1615 : max(0.0, _1615))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1624 = 1.0;
    }
    float _1628 = (_1624 * cbModelParam._m0[1u].x) + (_1613 * (1.0 - cbModelParam._m0[1u].x));
    float _1638 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _676);
    float _1639 = isnan(_1638) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1638 : min(cbModelParam._m0[25u].z, _1638));
    float _1721;
    float _1723;
    float _1725;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1688 = fma(_893, cbModelParam._m0[13u].z, fma(_889, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885)) + cbModelParam._m0[13u].w;
        float _1692 = fma(_893, cbModelParam._m0[14u].z, fma(_889, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885)) + cbModelParam._m0[14u].w;
        float _1696 = fma(_893, cbModelParam._m0[15u].z, fma(_889, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885)) + cbModelParam._m0[15u].w;
        float _1699 = fma(_834, cbModelParam._m0[13u].z, fma(_833, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _832));
        float _1702 = fma(_834, cbModelParam._m0[14u].z, fma(_833, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _832));
        float _1705 = fma(_834, cbModelParam._m0[15u].z, fma(_833, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _832));
        float _1733;
        if (_1699 > 0.0)
        {
            _1733 = abs((1.0 - _1688) / _1699);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1688 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1733 = frontier_phi_14_12_ladder;
        }
        float _1904;
        if (_1702 > 0.0)
        {
            _1904 = abs((1.0 - _1692) / _1702);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1692 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1904 = frontier_phi_23_19_ladder;
        }
        float _2199;
        if (_1705 > 0.0)
        {
            _2199 = abs((1.0 - _1696) / _1705);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1696 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2199 = frontier_phi_35_30_ladder;
        }
        float _2201 = isnan(_1904) ? _1733 : (isnan(_1733) ? _1904 : min(_1733, _1904));
        float _2202 = isnan(_2199) ? _2201 : (isnan(_2201) ? _2199 : min(_2201, _2199));
        float _2206 = (_2202 * _1699) + _1688;
        float _2207 = (_2202 * _1702) + _1692;
        float _2208 = (_2202 * _1705) + _1696;
        float _2209 = _2202 * 9.9999997473787516355514526367188e-05;
        float _2211 = (-1.0) - _2209;
        float _2213 = _2209 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2208 > _2213) || ((_2208 < _2211) || ((_2207 > _2213) || ((_2207 < _2211) || ((_2206 < _2211) || (_2206 > _2213))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2353 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2208, cbModelParam._m0[9u].z, fma(_2207, cbModelParam._m0[9u].y, _2206 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2208, cbModelParam._m0[10u].z, fma(_2207, cbModelParam._m0[10u].y, _2206 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2208, cbModelParam._m0[11u].z, fma(_2207, cbModelParam._m0[11u].y, _2206 * cbModelParam._m0[11u].x))), _1639);
            frontier_phi_13_35_ladder = _2353.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2353.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2353.x * cbModelParam._m0[1u].y;
        }
        _1721 = frontier_phi_13_35_ladder_2;
        _1723 = frontier_phi_13_35_ladder_1;
        _1725 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1709 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_832, _833, _834), _1639);
        _1721 = _1709.x * cbModelParam._m0[1u].y;
        _1723 = _1709.y * cbModelParam._m0[1u].y;
        _1725 = _1709.z * cbModelParam._m0[1u].y;
    }
    float _1729 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _676);
    float _1730 = isnan(_1729) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1729 : min(cbModelParam._m0[25u].w, _1729));
    float _1821;
    float _1823;
    float _1825;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1785 = fma(_893, cbModelParam._m0[21u].z, fma(_889, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885)) + cbModelParam._m0[21u].w;
        float _1789 = fma(_893, cbModelParam._m0[22u].z, fma(_889, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885)) + cbModelParam._m0[22u].w;
        float _1793 = fma(_893, cbModelParam._m0[23u].z, fma(_889, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885)) + cbModelParam._m0[23u].w;
        float _1796 = fma(_834, cbModelParam._m0[21u].z, fma(_833, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _832));
        float _1799 = fma(_834, cbModelParam._m0[22u].z, fma(_833, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _832));
        float _1802 = fma(_834, cbModelParam._m0[23u].z, fma(_833, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _832));
        float _1909;
        if (_1796 > 0.0)
        {
            _1909 = abs((1.0 - _1785) / _1796);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1785 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1909 = frontier_phi_25_21_ladder;
        }
        float _2226;
        if (_1799 > 0.0)
        {
            _2226 = abs((1.0 - _1789) / _1799);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1789 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2226 = frontier_phi_37_32_ladder;
        }
        float _2553;
        if (_1802 > 0.0)
        {
            _2553 = abs((1.0 - _1793) / _1802);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1793 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2553 = frontier_phi_47_44_ladder;
        }
        float _2555 = isnan(_2226) ? _1909 : (isnan(_1909) ? _2226 : min(_1909, _2226));
        float _2556 = isnan(_2553) ? _2555 : (isnan(_2555) ? _2553 : min(_2555, _2553));
        float _2560 = (_2556 * _1796) + _1785;
        float _2561 = (_2556 * _1799) + _1789;
        float _2562 = (_2556 * _1802) + _1793;
        float _2563 = _2556 * 9.9999997473787516355514526367188e-05;
        float _2564 = (-1.0) - _2563;
        float _2566 = _2563 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2562 > _2566) || ((_2562 < _2564) || ((_2561 > _2566) || ((_2561 < _2564) || ((_2560 < _2564) || (_2560 > _2566))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2680 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2562, cbModelParam._m0[17u].z, fma(_2561, cbModelParam._m0[17u].y, _2560 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2562, cbModelParam._m0[18u].z, fma(_2561, cbModelParam._m0[18u].y, _2560 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2562, cbModelParam._m0[19u].z, fma(_2561, cbModelParam._m0[19u].y, _2560 * cbModelParam._m0[19u].x))), _1730);
            frontier_phi_22_47_ladder = _2680.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2680.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2680.x * cbModelParam._m0[1u].z;
        }
        _1821 = frontier_phi_22_47_ladder_2;
        _1823 = frontier_phi_22_47_ladder_1;
        _1825 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1805 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_832, _833, _834), _1730);
        _1821 = _1805.x * cbModelParam._m0[1u].z;
        _1823 = _1805.y * cbModelParam._m0[1u].z;
        _1825 = _1805.z * cbModelParam._m0[1u].z;
    }
    float _1837 = ((((1.0 - _853) * ((_840 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_853 * _840)) * _824;
    float _1838 = _1837 * ((cbModelParam._m0[1u].w * (_1821 - _1721)) + _1721);
    float _1839 = _1837 * ((cbModelParam._m0[1u].w * (_1823 - _1723)) + _1723);
    float _1840 = _1837 * ((cbModelParam._m0[1u].w * (_1825 - _1725)) + _1725);
    float _1843 = fma(_1840, cbSceneParam._m0[89u].z, fma(_1839, cbSceneParam._m0[89u].y, _1838 * cbSceneParam._m0[89u].x));
    float _1846 = fma(_1840, cbSceneParam._m0[90u].z, fma(_1839, cbSceneParam._m0[90u].y, _1838 * cbSceneParam._m0[90u].x));
    float _1849 = fma(_1840, cbSceneParam._m0[91u].z, fma(_1839, cbSceneParam._m0[91u].y, _1838 * cbSceneParam._m0[91u].x));
    float _1883 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1887 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1891 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1895 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1896 = _1883 / _1895;
    float _1897 = _1887 / _1895;
    float _1898 = _1891 / _1895;
    float _2045;
    float _2046;
    float _2047;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1925 = ((uint(_1898 > cbSceneParam._m0[59u].y) + uint(_1898 > cbSceneParam._m0[59u].x)) + uint(_1898 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1926 = _1925 + 43u;
        uint _1934 = _1925 + 44u;
        uint _1942 = _1925 + 45u;
        uint _1950 = _1925 + 46u;
        float _1961 = fma(_1895, cbSceneParam._m0[_1926].w, fma(_1891, cbSceneParam._m0[_1926].z, fma(_1887, cbSceneParam._m0[_1926].y, _1883 * cbSceneParam._m0[_1926].x)));
        float _1965 = fma(_1895, cbSceneParam._m0[_1934].w, fma(_1891, cbSceneParam._m0[_1934].z, fma(_1887, cbSceneParam._m0[_1934].y, _1883 * cbSceneParam._m0[_1934].x)));
        float _1973 = fma(_1895, cbSceneParam._m0[_1950].w, fma(_1891, cbSceneParam._m0[_1950].z, fma(_1887, cbSceneParam._m0[_1950].y, _1883 * cbSceneParam._m0[_1950].x)));
        float _1978 = cbSceneParam._m0[33u].z * _1973;
        float _1980 = cbSceneParam._m0[33u].w * _1973;
        float _1983 = fma(_1895, cbSceneParam._m0[_1942].w, fma(_1891, cbSceneParam._m0[_1942].z, fma(_1887, cbSceneParam._m0[_1942].y, _1883 * cbSceneParam._m0[_1942].x))) / _1973;
        float _2031 = (cbSceneParam._m0[33u].x - sqrt(((_1897 * _1897) + (_1896 * _1896)) + (_1898 * _1898))) * cbSceneParam._m0[33u].y;
        float _4308 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2038 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1978 + _1961) / _1973, (_1980 + _1965) / _1973), _1983), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1980 + _1961) / _1973, (_1965 - _1978) / _1973), _1983), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1961 - _1978) / _1973, (_1965 - _1980) / _1973), _1983), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1961 - _1980) / _1973, (_1978 + _1965) / _1973), _1983), 0.0)).x), vec4(0.25)));
        _2045 = 1.0 - (_2038 * cbSceneParam._m0[34u].x);
        _2046 = 1.0 - (_2038 * cbSceneParam._m0[34u].y);
        _2047 = 1.0 - (_2038 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2045 = 1.0;
        _2046 = 1.0;
        _2047 = 1.0;
    }
    float _2111;
    float _2113;
    float _2115;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2099 = fma(_1895, cbSceneParam._m0[63u].w, fma(_1891, cbSceneParam._m0[63u].z, fma(_1887, cbSceneParam._m0[63u].y, _1883 * cbSceneParam._m0[63u].x)));
        float _2100 = fma(_1895, cbSceneParam._m0[60u].w, fma(_1891, cbSceneParam._m0[60u].z, fma(_1887, cbSceneParam._m0[60u].y, _1883 * cbSceneParam._m0[60u].x))) / _2099;
        float _2101 = fma(_1895, cbSceneParam._m0[61u].w, fma(_1891, cbSceneParam._m0[61u].z, fma(_1887, cbSceneParam._m0[61u].y, _1883 * cbSceneParam._m0[61u].x))) / _2099;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2100 >= cbSceneParam._m0[64u].x) && (_2101 >= cbSceneParam._m0[64u].y)) && (_2100 <= cbSceneParam._m0[64u].z)) && (_2101 <= cbSceneParam._m0[64u].w))
        {
            float _2239 = fma(_1895, cbSceneParam._m0[62u].w, fma(_1891, cbSceneParam._m0[62u].z, fma(_1887, cbSceneParam._m0[62u].y, _1883 * cbSceneParam._m0[62u].x))) / _2099;
            float _2243 = isnan(cbSceneParam._m0[41u].w) ? _2239 : (isnan(_2239) ? cbSceneParam._m0[41u].w : max(_2239, cbSceneParam._m0[41u].w));
            float _2286 = (cbSceneParam._m0[33u].x - sqrt(((_1897 * _1897) + (_1896 * _1896)) + (_1898 * _1898))) * cbSceneParam._m0[33u].y;
            float _4324 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
            float _2293 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2100, cbSceneParam._m0[33u].w + _2101), _2243), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2100, _2101 - cbSceneParam._m0[33u].z), _2243), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2100 - cbSceneParam._m0[33u].z, _2101 - cbSceneParam._m0[33u].w), _2243), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2100 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2101), _2243), 0.0)).x), vec4(0.25)));
            float _2297 = 1.0 - (_2293 * cbSceneParam._m0[34u].x);
            float _2298 = 1.0 - (_2293 * cbSceneParam._m0[34u].y);
            float _2299 = 1.0 - (_2293 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2299) ? _2047 : (isnan(_2047) ? _2299 : min(_2047, _2299));
            frontier_phi_34_33_ladder_1 = isnan(_2298) ? _2046 : (isnan(_2046) ? _2298 : min(_2046, _2298));
            frontier_phi_34_33_ladder_2 = isnan(_2297) ? _2045 : (isnan(_2045) ? _2297 : min(_2045, _2297));
        }
        else
        {
            frontier_phi_34_33_ladder = _2047;
            frontier_phi_34_33_ladder_1 = _2046;
            frontier_phi_34_33_ladder_2 = _2045;
        }
        _2111 = frontier_phi_34_33_ladder_2;
        _2113 = frontier_phi_34_33_ladder_1;
        _2115 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2111 = _2045;
        _2113 = _2046;
        _2115 = _2047;
    }
    uvec4 _2120 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _2122 = _2120.x * 14u;
    uint _2123 = _2122 + 13u;
    float _2130 = _824 + (-1.0);
    float _2135 = (cbLight._m0[_2123].x * _2130) + 1.0;
    float _2136 = (cbLight._m0[_2123].y * _2130) + 1.0;
    float _2137 = (cbLight._m0[_2123].z * _2130) + 1.0;
    float _2138 = (cbLight._m0[_2123].w * _2130) + 1.0;
    uint _2139 = _2122 + 5u;
    float _2145 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
    uint _2149 = _2122 + 4u;
    float _2158 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
    uint _2162 = _2122 | 1u;
    float _2173 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_673, _674, _675));
    float _2176 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_673, _674, _675));
    float _4360 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _4371 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2181 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * 0.3183098733425140380859375;
    float _2183 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * 0.3183098733425140380859375;
    float _2190 = ((cbLight._m0[_2139].x * _2145) * _2183) + (((cbLight._m0[_2149].x * _2111) * _2158) * _2181);
    float _2191 = ((_2145 * cbLight._m0[_2139].y) * _2183) + (((cbLight._m0[_2149].y * _2113) * _2158) * _2181);
    float _2192 = ((_2145 * cbLight._m0[_2139].z) * _2183) + (((cbLight._m0[_2149].z * _2115) * _2158) * _2181);
    uvec4 _2196 = floatBitsToUint(cbLight._m0[_2122 + 12u]);
    bool _2198 = _2196.x == 0u;
    float _2300;
    float _2302;
    float _2304;
    if (_2198)
    {
        _2300 = _2190;
        _2302 = _2191;
        _2304 = _2192;
    }
    else
    {
        uint _2308 = _2122 + 6u;
        float _2324 = (dot(vec3(cbLight._m0[_2122 + 2u].xyz), vec3(_673, _674, _675)) * 0.5) + 0.5;
        float _2325 = _2324 * _2324;
        float _4382 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2326 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2327 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2300 = (((cbLight._m0[_2308].x * 0.3183098733425140380859375) * _2326) * _2327) + _2190;
        _2302 = (((cbLight._m0[_2308].y * 0.3183098733425140380859375) * _2326) * _2327) + _2191;
        _2304 = (((cbLight._m0[_2308].z * 0.3183098733425140380859375) * _2326) * _2327) + _2192;
    }
    bool _2307 = _2196.y == 0u;
    float _2362;
    float _2364;
    float _2366;
    if (_2307)
    {
        _2362 = _2300;
        _2364 = _2302;
        _2366 = _2304;
    }
    else
    {
        uint _2524 = _2122 + 7u;
        float _2540 = (dot(vec3(cbLight._m0[_2122 + 3u].xyz), vec3(_673, _674, _675)) * 0.5) + 0.5;
        float _2541 = _2540 * _2540;
        float _4398 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2542 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2543 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2362 = (((cbLight._m0[_2524].x * 0.3183098733425140380859375) * _2542) * _2543) + _2300;
        _2364 = (((cbLight._m0[_2524].y * 0.3183098733425140380859375) * _2542) * _2543) + _2302;
        _2366 = (((cbLight._m0[_2524].z * 0.3183098733425140380859375) * _2542) * _2543) + _2304;
    }
    uint _2369 = _2122 + 8u;
    float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _676) * 0.949999988079071044921875);
    float _2383 = _2382 * _2382;
    float _2384 = cbLight._m0[_2122].x + _753;
    float _2385 = cbLight._m0[_2122].y + _754;
    float _2386 = cbLight._m0[_2122].z + _755;
    float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
    float _2391 = _2390 * _2384;
    float _2392 = _2390 * _2385;
    float _2393 = _2390 * _2386;
    float _2394 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_2122].xyz));
    float _4414 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _4425 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _2398 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2399 = dot(vec3(_673, _674, _675), vec3(_2391, _2392, _2393));
    float _4436 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2402 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2403 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2391, _2392, _2393));
    float _4447 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2407 = _2383 * _2383;
    float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
    float _2422 = (exp2(log2(1.0 - (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2423 = 1.0 - _2383;
    float _2434 = (0.5 / (((_2398 * ((_2397 * _2423) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2423) + _2383) * _2397))) * _2397;
    float _4458 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2436 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
    uint _2450 = _2122 + 9u;
    float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _676) * 0.949999988079071044921875);
    float _2462 = _2461 * _2461;
    float _2463 = cbLight._m0[_2162].x + _753;
    float _2464 = cbLight._m0[_2162].y + _754;
    float _2465 = cbLight._m0[_2162].z + _755;
    float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
    float _2470 = _2469 * _2463;
    float _2471 = _2469 * _2464;
    float _2472 = _2469 * _2465;
    float _2473 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_2162].xyz));
    float _4469 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2477 = dot(vec3(_673, _674, _675), vec3(_2470, _2471, _2472));
    float _4480 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2481 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2470, _2471, _2472));
    float _4491 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2485 = _2462 * _2462;
    float _2489 = ((_2480 * _2480) * (_2485 + (-1.0))) + 1.0;
    float _2498 = (exp2(log2(1.0 - (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2499 = 1.0 - _2462;
    float _2509 = (0.5 / (((_2398 * ((_2476 * _2499) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2499) + _2462) * _2476))) * _2476;
    float _4502 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2511 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2485 / ((_2489 * _2489) * 3.141590118408203125));
    float _2521 = (((_2498 * cbLight._m0[_2450].x) * _2511) * _2145) + ((((cbLight._m0[_2369].x * _2111) * _2422) * _2436) * _2158);
    float _2522 = (((_2498 * cbLight._m0[_2450].y) * _2511) * _2145) + ((((cbLight._m0[_2369].y * _2113) * _2422) * _2436) * _2158);
    float _2523 = (((_2498 * cbLight._m0[_2450].z) * _2511) * _2145) + ((((cbLight._m0[_2369].z * _2115) * _2422) * _2436) * _2158);
    float _2579;
    float _2581;
    float _2583;
    if (_2198)
    {
        _2579 = _2521;
        _2581 = _2522;
        _2583 = _2523;
    }
    else
    {
        uint _2585 = _2122 + 2u;
        uint _2589 = _2122 + 10u;
        float _2603 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2585].w)) * _676) * 0.949999988079071044921875);
        float _2604 = _2603 * _2603;
        float _2605 = cbLight._m0[_2585].x + _753;
        float _2606 = cbLight._m0[_2585].y + _754;
        float _2607 = cbLight._m0[_2585].z + _755;
        float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
        float _2612 = _2611 * _2605;
        float _2613 = _2611 * _2606;
        float _2614 = _2611 * _2607;
        float _2615 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_2585].xyz));
        float _4513 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2618 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2619 = dot(vec3(_673, _674, _675), vec3(_2612, _2613, _2614));
        float _4524 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2623 = dot(vec3(cbLight._m0[_2585].xyz), vec3(_2612, _2613, _2614));
        float _4535 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2627 = _2604 * _2604;
        float _2631 = ((_2622 * _2622) * (_2627 + (-1.0))) + 1.0;
        float _2640 = (exp2(log2(1.0 - (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2641 = 1.0 - _2604;
        float _2651 = (0.5 / (((_2398 * ((_2618 * _2641) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2641) + _2604) * _2618))) * _2618;
        float _4546 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2653 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2627 / ((_2631 * _2631) * 3.141590118408203125));
        float _2654 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
        _2579 = (((_2640 * cbLight._m0[_2589].x) * _2653) * _2654) + _2521;
        _2581 = (((_2640 * cbLight._m0[_2589].y) * _2653) * _2654) + _2522;
        _2583 = (((_2640 * cbLight._m0[_2589].z) * _2653) * _2654) + _2523;
    }
    float _2685;
    float _2687;
    float _2689;
    if (_2307)
    {
        _2685 = _2579;
        _2687 = _2581;
        _2689 = _2583;
    }
    else
    {
        uint _2696 = _2122 + 3u;
        uint _2700 = _2122 + 11u;
        float _2714 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2696].w)) * _676) * 0.949999988079071044921875);
        float _2715 = _2714 * _2714;
        float _2716 = cbLight._m0[_2696].x + _753;
        float _2717 = cbLight._m0[_2696].y + _754;
        float _2718 = cbLight._m0[_2696].z + _755;
        float _2722 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
        float _2723 = _2722 * _2716;
        float _2724 = _2722 * _2717;
        float _2725 = _2722 * _2718;
        float _2726 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_2696].xyz));
        float _4562 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2729 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2730 = dot(vec3(_673, _674, _675), vec3(_2723, _2724, _2725));
        float _4573 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2733 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2734 = dot(vec3(cbLight._m0[_2696].xyz), vec3(_2723, _2724, _2725));
        float _4584 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2738 = _2715 * _2715;
        float _2742 = ((_2733 * _2733) * (_2738 + (-1.0))) + 1.0;
        float _2751 = (exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2752 = 1.0 - _2715;
        float _2762 = (0.5 / (((_2398 * ((_2729 * _2752) + _2715)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2752) + _2715) * _2729))) * _2729;
        float _4595 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2764 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2738 / ((_2742 * _2742) * 3.141590118408203125));
        float _2765 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
        _2685 = (((_2751 * cbLight._m0[_2700].x) * _2764) * _2765) + _2579;
        _2687 = (((_2751 * cbLight._m0[_2700].y) * _2764) * _2765) + _2581;
        _2689 = (((_2751 * cbLight._m0[_2700].z) * _2764) * _2765) + _2583;
    }
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    if (_2120.y == 0u)
    {
        uvec4 _2786 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2787 = _2786.x;
        uint _2798 = uint((float(_2786.y) * floor(float(uint(cbSceneParam._m0[85u].y * _762) / _2787))) + floor(float(uint(cbSceneParam._m0[85u].x * _761) / _2787)));
        float _2808 = (log2(_1898 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2809 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        uint _2812 = uint(isnan(14.0) ? _2809 : (isnan(_2809) ? 14.0 : min(_2809, 14.0)));
        uvec4 _2817 = texelFetch(g_lightClusterGridBuffer, int(((_2812 << 2u) + (_2798 << 6u)) >> 2u));
        uint _2818 = _2817.x;
        uint _2819 = _2786.z;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        if (((((1u << ((_2819 >> 4u) & 15u)) + 4294967295u) & _2818) == 0u) || ((_2819 & 240u) == 0u))
        {
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
        }
        else
        {
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            uint _3049 = 0u;
            uint _3058;
            bool _3059;
            for (;;)
            {
                _3058 = texelFetch(g_lightClassification, int((((_2812 << 5u) + (_2798 << 9u)) + (_3049 << 2u)) >> 2u)).x;
                _3059 = _3058 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3059)
                {
                    frontier_phi_66_pred = _3048;
                    frontier_phi_66_pred_1 = _3047;
                    frontier_phi_66_pred_2 = _3046;
                    frontier_phi_66_pred_3 = _3045;
                    frontier_phi_66_pred_4 = _3044;
                    frontier_phi_66_pred_5 = _3043;
                }
                else
                {
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    uint _3173;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3047;
                    _3172 = _3048;
                    _3173 = _3058;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    for (;;)
                    {
                        uint _3177 = uint(findLSB(_3173)) + (_3049 << 5u);
                        uint _3174 = (_3173 + 4294967295u) & _3173;
                        uint _3179 = _3177 * 48u;
                        vec4 _3193 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 3u)).x));
                        uint _3199 = (_3177 * 48u) + 4u;
                        vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3199)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 3u)).x));
                        uint _3218 = (_3177 * 48u) + 8u;
                        vec3 _3229 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3218)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3218 + 2u)).x));
                        float _3233 = _3193.x - _1896;
                        float _3234 = _3193.y - _1897;
                        float _3235 = _3193.z - _1898;
                        float _3236 = dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235));
                        float _3239 = inversesqrt(_3236);
                        float _3240 = _3239 * _3233;
                        float _3241 = _3239 * _3234;
                        float _3242 = _3239 * _3235;
                        float _3243 = dot(vec3(_780, _783, _786), vec3(_3240, _3241, _3242));
                        float _3248 = 1.0 - (_3236 * _3193.w);
                        float _4621 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3249 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                        float _3250 = sqrt(_3236) * _3212.w;
                        float _3253 = 1.39999997615814208984375 / (_3250 + 1.39999997615814208984375);
                        float _3254 = _3253 * _3253;
                        float _3257 = ((1.0 - _3254) * _3243) + _3254;
                        float _3260 = _3250 * _3250;
                        float _3264 = ((isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0))) * _3249) / ((_3260 * 0.699999988079071044921875) + 1.0);
                        float _3268 = (-0.0) - _1896;
                        float _3269 = (-0.0) - _1897;
                        float _3270 = (-0.0) - _1898;
                        float _3274 = inversesqrt(dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270)));
                        float _3275 = _3274 * _3268;
                        float _3276 = _3274 * _3269;
                        float _3277 = _3274 * _3270;
                        float _3284 = exp2(log2(1.0 / ((_3260 * 3.5) + 5.0)) * 0.25);
                        float _3285 = 1.0 - _840;
                        float _3292 = sqrt(1.0 - ((1.0 - (_3285 * _3285)) * (1.0 - (_3284 * _3284))));
                        float _3293 = _3292 * _3292;
                        float _3294 = _3293 * _3293;
                        float _3295 = _3275 + _3240;
                        float _3296 = _3276 + _3241;
                        float _3297 = _3277 + _3242;
                        float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                        float _3305 = dot(vec3(_780, _783, _786), vec3(_3275, _3276, _3277));
                        float _4637 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3308 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3309 = dot(vec3(_780, _783, _786), vec3(_3301 * _3295, _3301 * _3296, _3301 * _3297));
                        float _4648 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3312 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3316 = ((_3312 * _3312) * (_3294 + (-1.0))) + 1.0;
                        float _3317 = _3253 * _3293;
                        float _3318 = _3317 * _3317;
                        float _3321 = ((1.0 - _3318) * _3243) + _3318;
                        float _4659 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3322 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3323 = 1.0 - _3293;
                        float _3333 = (0.5 / (((_3322 * ((_3308 * _3323) + _3293)) + 9.9999999392252902907785028219223e-09) + (((_3322 * _3323) + _3293) * _3308))) * _3322;
                        float _4670 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3344 = (((_3294 * 3.1415927410125732421875) * (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) / ((_3316 * _3316) * ((_3260 * 2.1991131305694580078125) + 3.141590118408203125))) * _3249;
                        _3102 = (_3264 * _3212.x) + _3170;
                        _3103 = (_3264 * _3212.y) + _3171;
                        _3104 = (_3264 * _3212.z) + _3172;
                        _3099 = (_3344 * _3229.x) + _3167;
                        _3100 = (_3344 * _3229.y) + _3168;
                        _3101 = (_3344 * _3229.z) + _3169;
                        if (_3174 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3103;
                            _3172 = _3104;
                            _3173 = _3174;
                        }
                    }
                    frontier_phi_66_pred = _3104;
                    frontier_phi_66_pred_1 = _3103;
                    frontier_phi_66_pred_2 = _3102;
                    frontier_phi_66_pred_3 = _3101;
                    frontier_phi_66_pred_4 = _3100;
                    frontier_phi_66_pred_5 = _3099;
                }
                _2909 = frontier_phi_66_pred;
                _2907 = frontier_phi_66_pred_1;
                _2905 = frontier_phi_66_pred_2;
                _2903 = frontier_phi_66_pred_3;
                _2901 = frontier_phi_66_pred_4;
                _2899 = frontier_phi_66_pred_5;
                uint _3050 = _3049 + 1u;
                if (_3050 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3043 = _2899;
                    _3044 = _2901;
                    _3045 = _2903;
                    _3046 = _2905;
                    _3047 = _2907;
                    _3048 = _2909;
                    _3049 = _3050;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
        }
        uvec4 _2912 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2913 = _2912.z;
        uint _2915 = (_2913 >> 8u) & 15u;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        if (((4294967295u << _2915) & _2818) == 0u)
        {
            _3011 = _2898;
            _3013 = _2900;
            _3015 = _2902;
            _3017 = _2904;
            _3019 = _2906;
            _3021 = _2908;
        }
        else
        {
            float _3036 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
            float _3037 = _3036 * _1896;
            float _3038 = _3036 * _1897;
            float _3039 = _3036 * _1898;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2915 < ((_2913 >> 12u) & 15u))
            {
                float _3012;
                float _3014;
                float _3016;
                float _3018;
                float _3020;
                float _3022;
                float _3150 = _2898;
                float _3151 = _2900;
                float _3152 = _2902;
                float _3153 = _2904;
                float _3154 = _2906;
                float _3155 = _2908;
                uint _3156 = _2915;
                uint _3165;
                bool _3166;
                for (;;)
                {
                    _3165 = texelFetch(g_lightClassification, int((((_2812 << 5u) + (_2798 << 9u)) + (_3156 << 2u)) >> 2u)).x;
                    _3166 = _3165 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3166)
                    {
                        frontier_phi_72_pred = _3155;
                        frontier_phi_72_pred_1 = _3154;
                        frontier_phi_72_pred_2 = _3153;
                        frontier_phi_72_pred_3 = _3152;
                        frontier_phi_72_pred_4 = _3151;
                        frontier_phi_72_pred_5 = _3150;
                    }
                    else
                    {
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3362 = _3150;
                        float _3363 = _3151;
                        float _3364 = _3152;
                        float _3365 = _3153;
                        float _3366 = _3154;
                        float _3367 = _3155;
                        uint _3368 = _3165;
                        uint _3369;
                        vec4 _3394;
                        float _3395;
                        vec4 _3410;
                        vec3 _3422;
                        vec4 _3437;
                        vec4 _3452;
                        float _3498;
                        bool _3499;
                        for (;;)
                        {
                            uint _3379 = ((_3156 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3368));
                            _3369 = (_3368 + 4294967295u) & _3368;
                            uint _3381 = _3379 * 40u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            _3395 = _3394.w;
                            uint _3397 = (_3379 * 40u) + 4u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3412 = (_3379 * 40u) + 8u;
                            _3422 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x));
                            uint _3424 = (_3379 * 40u) + 16u;
                            _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            uint _3439 = (_3379 * 40u) + 20u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3454 = (_3379 * 40u) + 24u;
                            vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3473 = (_3379 * 40u) + 28u;
                            vec4 _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            _3498 = fma(_1898, _3486.z, fma(_1897, _3486.y, _3486.x * _1896)) + _3486.w;
                            _3499 = !((fma(_1898, _3467.z, fma(_1897, _3467.y, _3467.x * _1896)) + _3467.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3499)
                            {
                                float _3526 = _3394.x - _1896;
                                float _3527 = _3394.y - _1897;
                                float _3528 = _3394.z - _1898;
                                float _3529 = dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528));
                                float _3532 = inversesqrt(_3529);
                                float _3533 = _3532 * _3526;
                                float _3534 = _3532 * _3527;
                                float _3535 = _3532 * _3528;
                                float _3539 = 1.0 - (_3529 / (_3395 * _3395));
                                float _4681 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3544 = sqrt(_3529) * _3410.w;
                                float _3546 = 1.39999997615814208984375 / (_3544 + 1.39999997615814208984375);
                                float _3547 = _3546 * _3546;
                                float _3550 = ((1.0 - _3547) * dot(vec3(_3533, _3534, _3535), vec3(_780, _783, _786))) + _3547;
                                float _3553 = _3544 * _3544;
                                float _3557 = (fma(_1898, _3437.z, fma(_1897, _3437.y, _3437.x * _1896)) + _3437.w) / _3498;
                                float _3558 = (fma(_1898, _3452.z, fma(_1897, _3452.y, _3452.x * _1896)) + _3452.w) / _3498;
                                float _3562 = 1.0 - dot(vec2(_3557, _3558), vec2(_3557, _3558));
                                float _4697 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3564 = _3563 * (((isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0))) * _3540) / ((_3553 * 0.699999988079071044921875) + 1.0));
                                float _3576 = exp2(log2(1.0 / ((_3553 * 3.5) + 5.0)) * 0.25);
                                float _3577 = 1.0 - _840;
                                float _3584 = sqrt(1.0 - ((1.0 - (_3577 * _3577)) * (1.0 - (_3576 * _3576))));
                                float _3585 = _3584 * _3584;
                                float _3586 = _3585 * _3585;
                                float _3587 = _3533 - _3037;
                                float _3588 = _3534 - _3038;
                                float _3589 = _3535 - _3039;
                                float _3593 = inversesqrt(dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589)));
                                float _3597 = dot(vec3(_780, _783, _786), vec3((-0.0) - _3037, (-0.0) - _3038, (-0.0) - _3039));
                                float _4708 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3600 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3601 = dot(vec3(_780, _783, _786), vec3(_3593 * _3587, _3593 * _3588, _3593 * _3589));
                                float _4719 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3604 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3608 = ((_3604 * _3604) * (_3586 + (-1.0))) + 1.0;
                                float _3609 = _3546 * _3585;
                                float _3610 = _3609 * _3609;
                                float _3616 = ((1.0 - _3610) * dot(vec3(_780, _783, _786), vec3(_3533, _3534, _3535))) + _3610;
                                float _4730 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                                float _3617 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3618 = 1.0 - _3585;
                                float _3628 = (0.5 / (((_3617 * ((_3600 * _3618) + _3585)) + 9.9999999392252902907785028219223e-09) + (((_3617 * _3618) + _3585) * _3600))) * _3617;
                                float _4741 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3638 = (_3563 * _3540) * (((_3586 * 3.1415927410125732421875) * (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) / ((_3608 * _3608) * ((_3553 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3564 * _3410.y;
                                frontier_phi_78_pred_1 = _3564 * _3410.x;
                                frontier_phi_78_pred_2 = _3638 * _3422.z;
                                frontier_phi_78_pred_3 = _3638 * _3422.y;
                                frontier_phi_78_pred_4 = _3638 * _3422.x;
                                frontier_phi_78_pred_5 = _3564 * _3410.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3646 = frontier_phi_78_pred;
                            _3645 = frontier_phi_78_pred_1;
                            _3644 = frontier_phi_78_pred_2;
                            _3643 = frontier_phi_78_pred_3;
                            _3642 = frontier_phi_78_pred_4;
                            _3647 = frontier_phi_78_pred_5;
                            _3352 = _3645 + _3365;
                            _3353 = _3646 + _3366;
                            _3354 = _3647 + _3367;
                            _3349 = _3642 + _3362;
                            _3350 = _3643 + _3363;
                            _3351 = _3644 + _3364;
                            if (_3369 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3369;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3354;
                        frontier_phi_72_pred_1 = _3353;
                        frontier_phi_72_pred_2 = _3352;
                        frontier_phi_72_pred_3 = _3351;
                        frontier_phi_72_pred_4 = _3350;
                        frontier_phi_72_pred_5 = _3349;
                    }
                    _3022 = frontier_phi_72_pred;
                    _3020 = frontier_phi_72_pred_1;
                    _3018 = frontier_phi_72_pred_2;
                    _3016 = frontier_phi_72_pred_3;
                    _3014 = frontier_phi_72_pred_4;
                    _3012 = frontier_phi_72_pred_5;
                    uint _3157 = _3156 + 1u;
                    if (_3157 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3150 = _3012;
                        _3151 = _3014;
                        _3152 = _3016;
                        _3153 = _3018;
                        _3154 = _3020;
                        _3155 = _3022;
                        _3156 = _3157;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3022;
                frontier_phi_60_61_ladder_1 = _3020;
                frontier_phi_60_61_ladder_2 = _3016;
                frontier_phi_60_61_ladder_3 = _3014;
                frontier_phi_60_61_ladder_4 = _3012;
                frontier_phi_60_61_ladder_5 = _3018;
            }
            else
            {
                frontier_phi_60_61_ladder = _2908;
                frontier_phi_60_61_ladder_1 = _2906;
                frontier_phi_60_61_ladder_2 = _2902;
                frontier_phi_60_61_ladder_3 = _2900;
                frontier_phi_60_61_ladder_4 = _2898;
                frontier_phi_60_61_ladder_5 = _2904;
            }
            _3011 = frontier_phi_60_61_ladder_4;
            _3013 = frontier_phi_60_61_ladder_3;
            _3015 = frontier_phi_60_61_ladder_2;
            _3017 = frontier_phi_60_61_ladder_5;
            _3019 = frontier_phi_60_61_ladder_1;
            _3021 = frontier_phi_60_61_ladder;
        }
        float _3026 = isnan(1.0) ? _824 : (isnan(_824) ? 1.0 : min(_824, 1.0));
        _2831 = (_3026 * _3017) + _2362;
        _2833 = (_3026 * _3019) + _2364;
        _2835 = (_3026 * _3021) + _2366;
        _2837 = ((_3011 * 0.039999999105930328369140625) * _3026) + _2685;
        _2839 = ((_3013 * 0.039999999105930328369140625) * _3026) + _2687;
        _2841 = ((_3015 * 0.039999999105930328369140625) * _3026) + _2689;
    }
    else
    {
        _2831 = _2362;
        _2833 = _2364;
        _2835 = _2366;
        _2837 = _2685;
        _2839 = _2687;
        _2841 = _2689;
    }
    float _4757 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4768 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4779 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    uint _2861 = _264 + 6u;
    float _2869 = _761 / cbSceneParam._m0[86u].x;
    float _2870 = _762 / cbSceneParam._m0[86u].y;
    vec4 _2884 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2869, _2870, (log2((isnan(cbSceneParam._m0[77u].w) ? _694 : (isnan(_694) ? cbSceneParam._m0[77u].w : min(_694, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2886 = _2884.x;
    float _2887 = _2884.y;
    float _2888 = _2884.z;
    float _2889 = _2884.w;
    float _2961;
    float _2963;
    float _2965;
    float _2967;
    if (_694 > cbSceneParam._m0[78u].w)
    {
        float _2923 = isnan(_694) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _694 : min(cbSceneParam._m0[80u].w, _694));
        float _2924 = _2923 / _694;
        float _2935 = _2924 * _746;
        float _2936 = _747 * _2924;
        float _2937 = (-0.0) - _2936;
        float _2939 = _2924 * _748;
        float _2941 = (cbSceneParam._m0[77u].w * _2937) / _2923;
        float _2942 = _2941 + cbSceneParam._m0[79u].w;
        float _2943 = cbSceneParam._m0[79u].w - _2936;
        float _2949 = sqrt(((_2935 * _2935) + (_2936 * _2936)) + (_2939 * _2939));
        float _2952 = (1.0 - (cbSceneParam._m0[77u].w / _2923)) * _2949;
        float _2957 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2959 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3112;
        if (abs((_2937 - _2941) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3112 = ((((_2942 > 0.0) ? exp2(_2957 * _2942) : (2.0 - exp2(_2959 * _2942))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2952;
        }
        else
        {
            float _3072 = 1.0 / cbSceneParam._m0[80u].x;
            float _3073 = isnan(_2943) ? _2942 : (isnan(_2942) ? _2943 : max(_2942, _2943));
            float _3074 = isnan(_2943) ? _2942 : (isnan(_2942) ? _2943 : min(_2942, _2943));
            float _3083 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : min(_3073, 0.0));
            float _3084 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : min(_3074, 0.0));
            _3112 = ((abs(_2949 / _2937) * cbSceneParam._m0[80u].y) * ((((_3083 - _3084) * 2.0) - ((exp2(_2957 * (isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0)))) - exp2(_2957 * (isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0))))) * _3072)) - ((exp2(_2959 * _3083) - exp2(_2959 * _3084)) * _3072))) + (_2952 * cbSceneParam._m0[80u].z);
        }
        vec4 _3114 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2869, _2870, 1.0), 0.0);
        float _3123 = exp2((_3112 * (-1.44269502162933349609375)) * (1.0 - _3114.w));
        float _3124 = log2(_3123);
        float _3140 = log2(_2889);
        _2961 = (exp2(_3140 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].x)) * _3114.x) / cbSceneParam._m0[78u].x)) + _2886;
        _2963 = (exp2(_3140 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].y)) * _3114.y) / cbSceneParam._m0[78u].y)) + _2887;
        _2965 = (exp2(_3140 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3124 * cbSceneParam._m0[78u].z)) * _3114.z) / cbSceneParam._m0[78u].z)) + _2888;
        _2967 = _3123 * _2889;
    }
    else
    {
        _2961 = _2886;
        _2963 = _2887;
        _2965 = _2888;
        _2967 = _2889;
    }
    float _2979 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2980 = _2979 == 3.0;
    float _2981 = log2(_2967);
    float _2988 = exp2(_2981 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2831 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _824))) + ((_2837 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1628)) * cbPerFrame._m0[3u].x));
    float _2989 = exp2(_2981 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2833 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _824))) + ((_2839 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1628)) * cbPerFrame._m0[3u].x));
    float _2990 = exp2(_2981 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2835 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _824))) + ((_2841 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1628)) * cbPerFrame._m0[3u].x));
    float _2999 = (_2979 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2999 * (_2980 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2961)));
    SV_Target.y = _2999 * (_2980 ? _2989 : (_2989 + (cbSceneParam._m0[72u].w * _2963)));
    SV_Target.z = _2999 * (_2980 ? _2990 : (_2990 + (cbSceneParam._m0[72u].w * _2965)));
    SV_Target.w = cbInstanceData._m0[_2861].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2861].w;
}


