#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1354;
float _3712;
float _3713;
float _3714;
float _3715;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3724 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3735 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3746 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _410 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_400 - _410) * cbMtdParam._m0[24u].x) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3757 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _435 = (_428 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _436 = (_428 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _437 = (_428 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) + _447;
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _298) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _299) + cbTextureTilingScale._m0[14u].w));
    vec4 _495 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _520 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _537 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _541 = _537.z;
    float _550 = ((_520.z - _541) * _428) + _541;
    float _553 = ((((_520.x - _539) * _428) + _539) * 2.0) + (-1.0);
    float _554 = ((((_520.y - _540) * _428) + _540) * 2.0) + (-1.0);
    float _555 = dot(vec2(_553, _554), vec2(_553, _554));
    float _3768 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _560 = sqrt(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))));
    vec4 _573 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _591 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _593 = _591.x;
    float _594 = 1.0 - _593;
    float _600 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _603 = ((isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : min(_600, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _612 = (_603 - ((((((_593 - _594) * cbMtdParam._m0[24u].z) + _594) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _603))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3789 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _613 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _620 = (_613 * ((_475.x * cbMtdParam._m0[18u].x) - _454)) + _454;
    float _621 = (_613 * ((_475.y * cbMtdParam._m0[18u].y) - _455)) + _455;
    float _622 = (_613 * ((_475.z * cbMtdParam._m0[18u].z) - _456)) + _456;
    vec4 _634 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _636 = _634.x;
    float _637 = 1.0 - _636;
    float _662 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_636 - _637) * cbMtdParam._m0[24u].w) + _637) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3800 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _663 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _671 = ((((cbMtdParam._m0[10u].x - _620) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _663) + _620;
    float _672 = ((((cbMtdParam._m0[10u].y - _621) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _663) + _621;
    float _673 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _622)) * _663) + _622;
    float _678 = (((_495.z - _550) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _550;
    vec4 _692 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _699 = (_692.x * 2.0) + (-1.0);
    float _700 = (_692.y * 2.0) + (-1.0);
    float _701 = dot(vec2(_699, _700), vec2(_699, _700));
    float _3811 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _709 = (_613 * (_692.z - _678)) + _678;
    float _712 = ((cbMtdParam._m0[23u].y - _709) * _663) + _709;
    vec4 _731 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _737 = (_731.x * 2.0) + (-1.0);
    float _738 = (_731.y * 2.0) + (-1.0);
    float _739 = dot(vec2(_737, _738), vec2(_737, _738));
    float _3822 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _749 = _553 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_495.x * 2.0) + (-1.0)));
    float _750 = _554 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_495.y * 2.0) + (-1.0)));
    float _762 = (((_699 - _749) + (cbMtdParam._m0[21u].x * _749)) * _613) + _749;
    float _763 = (((_700 - _750) + (cbMtdParam._m0[21u].x * _750)) * _613) + _750;
    float _764 = (_613 * (sqrt(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) - _560)) + _560;
    float _775 = (((_737 - _762) + (_762 * cbMtdParam._m0[22u].z)) * _663) + _762;
    float _776 = (((_738 - _763) + (_763 * cbMtdParam._m0[22u].z)) * _663) + _763;
    float _777 = ((sqrt(1.0 - (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) - _764) * _663) + _764;
    float _779 = cbMtdParam._m0[22u].x + _573.w;
    float _782 = fma(_777, _247 * NORMAL.x, fma(_776, _254 * TANGENT.x, (_240 * _232) * _775));
    float _785 = fma(_777, _247 * NORMAL.y, fma(_776, _254 * TANGENT.y, (_240 * _233) * _775));
    float _788 = fma(_777, _247 * NORMAL.z, fma(_776, _254 * TANGENT.z, (_240 * _234) * _775));
    float _792 = inversesqrt(dot(vec3(_782, _785, _788), vec3(_782, _785, _788)));
    float _793 = _792 * _782;
    float _794 = _792 * _785;
    float _795 = _792 * _788;
    float _3833 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _796 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _3844 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _3855 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _3866 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3877 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _865 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _855);
    float _866 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _855);
    float _867 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _855);
    float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
    float _872 = _865 * _871;
    float _873 = _866 * _871;
    float _874 = _867 * _871;
    vec4 _879 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _881 = _879.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1035 = sqrt(((_865 * _865) + (_866 * _866)) + (_867 * _867));
        float _1041 = (cbMatDynParam._m0[5u].x * _1035) + cbMatDynParam._m0[5u].y;
        float _3888 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1046 = (cbMatDynParam._m0[5u].z * _1035) + cbMatDynParam._m0[5u].w;
        float _3899 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) - _1042)) + _1042) < ((_881 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _892 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _893 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _911 = fma(_795, cbSceneParam._m0[5u].z, fma(_794, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _793));
    float _914 = fma(_795, cbSceneParam._m0[6u].z, fma(_794, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _793));
    float _917 = fma(_795, cbSceneParam._m0[7u].z, fma(_794, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _793));
    uint _930 = _279 + 9u;
    uint _931 = _930 + uint(cbMatDynParam._m0[0u].w);
    float _937 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * cbInstanceData._m0[_931].x;
    float _938 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * cbInstanceData._m0[_931].y;
    float _939 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * cbInstanceData._m0[_931].z;
    float _3910 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _3932 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    vec4 _951 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _892, cbSceneParam._m0[86u].y * _893));
    float _955 = ((isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * TEXCOORD_5.w) * _951.x;
    float _956 = dot(vec3(_793, _794, _795), vec3(_872, _873, _874));
    float _959 = _956 * 2.0;
    float _963 = (_959 * _793) - _872;
    float _964 = (_959 * _794) - _873;
    float _965 = (_959 * _795) - _874;
    float _969 = abs(dot(vec3(_872, _873, _874), vec3(_793, _794, _795)));
    float _3943 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _971 = sqrt(_796);
    float _984 = exp2((_971 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_971 * 3.0));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1353;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1078 = fma(_1024, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1016));
        float _1082 = fma(_1024, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1016));
        float _1086 = fma(_1024, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1016));
        float _1111 = _1016 + _793;
        float _1112 = _1020 + _794;
        float _1113 = _1024 + _795;
        float _1123 = fma(_1113, cbModelParam._m0[26u].z, fma(_1112, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1111)) - _1078;
        float _1124 = fma(_1113, cbModelParam._m0[27u].z, fma(_1112, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1111)) - _1082;
        float _1125 = fma(_1113, cbModelParam._m0[28u].z, fma(_1112, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1111)) - _1086;
        float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
        float _1142 = ((_1129 * _1123) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1078 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1129 * _1124) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1082 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1129 * _1125) / cbModelParam._m0[34u].z) + ((((((_1086 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        float _1181 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1147.x + (-0.5));
        float _1183 = _1181 * (_1147.y + (-0.5));
        float _1184 = _1181 * (_1147.z + (-0.5));
        float _1191 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1154.x + (-0.5));
        float _1193 = _1191 * (_1154.y + (-0.5));
        float _1194 = _1191 * (_1154.z + (-0.5));
        float _1201 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1161.x + (-0.5));
        float _1203 = _1201 * (_1161.y + (-0.5));
        float _1204 = _1201 * (_1161.z + (-0.5));
        float _1211 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1168.x + (-0.5));
        float _1213 = _1211 * (_1168.y + (-0.5));
        float _1214 = _1211 * (_1168.z + (-0.5));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = _1182 * 0.5;
        float _1219 = _1192 * 0.5;
        float _1220 = _1202 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1235 = (dot(vec3(_793, _794, _795), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1245 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3991 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1247 + 1.0))) + _1252) * _1215;
        float _1262 = _1183 * 0.5;
        float _1263 = _1193 * 0.5;
        float _1264 = _1203 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_793, _794, _795), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _4024 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1289 + 1.0))) + _1294) * _1216;
        float _1304 = _1184 * 0.5;
        float _1305 = _1194 * 0.5;
        float _1306 = _1204 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_793, _794, _795), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4057 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1331 + 1.0))) + _1336) * _1217;
        _1353 = _1184;
        _1355 = _1183;
        _1356 = _1182;
        _1357 = _1194;
        _1358 = _1193;
        _1359 = _1192;
        _1360 = _1204;
        _1361 = _1203;
        _1362 = _1202;
        _1363 = _1217;
        _1364 = _1216;
        _1365 = _1215;
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1368 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
    }
    else
    {
        _1353 = _1354;
        _1355 = _1354;
        _1356 = _1354;
        _1357 = _1354;
        _1358 = _1354;
        _1359 = _1354;
        _1360 = _1354;
        _1361 = _1354;
        _1362 = _1354;
        _1363 = _1354;
        _1364 = _1354;
        _1365 = _1354;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1396 = fma(_1024, cbModelParam._m0[30u].z, fma(_1020, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1016));
        float _1400 = fma(_1024, cbModelParam._m0[31u].z, fma(_1020, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1016));
        float _1404 = fma(_1024, cbModelParam._m0[32u].z, fma(_1020, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1016));
        float _1427 = _1016 + _793;
        float _1428 = _1020 + _794;
        float _1429 = _1024 + _795;
        float _1439 = fma(_1429, cbModelParam._m0[30u].z, fma(_1428, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1427)) - _1396;
        float _1440 = fma(_1429, cbModelParam._m0[31u].z, fma(_1428, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1427)) - _1400;
        float _1441 = fma(_1429, cbModelParam._m0[32u].z, fma(_1428, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1427)) - _1404;
        float _1445 = inversesqrt(dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441)));
        float _1458 = ((_1445 * _1439) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1396 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1459 = ((_1445 * _1440) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1400 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1460 = ((_1445 * _1441) / cbModelParam._m0[35u].z) + ((((((_1404 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1458, _1459, _1460), 0.0);
        float _1495 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1462.x + (-0.5));
        float _1497 = _1495 * (_1462.y + (-0.5));
        float _1498 = _1495 * (_1462.z + (-0.5));
        float _1505 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1469.x + (-0.5));
        float _1507 = _1505 * (_1469.y + (-0.5));
        float _1508 = _1505 * (_1469.z + (-0.5));
        float _1515 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1476.x + (-0.5));
        float _1517 = _1515 * (_1476.y + (-0.5));
        float _1518 = _1515 * (_1476.z + (-0.5));
        float _1525 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1483.x + (-0.5));
        float _1527 = _1525 * (_1483.y + (-0.5));
        float _1528 = _1525 * (_1483.z + (-0.5));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = _1496 * 0.5;
        float _1533 = _1506 * 0.5;
        float _1534 = _1516 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_793, _794, _795), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4120 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1559 + 1.0))) + _1564) * _1529;
        float _1574 = _1497 * 0.5;
        float _1575 = _1507 * 0.5;
        float _1576 = _1517 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_793, _794, _795), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4153 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1601 + 1.0))) + _1606) * _1530;
        float _1616 = _1498 * 0.5;
        float _1617 = _1508 * 0.5;
        float _1618 = _1518 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1632 = (dot(vec3(_793, _794, _795), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1641 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4186 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1643 + 1.0))) + _1648) * _1531;
        _1665 = _1498;
        _1666 = _1497;
        _1667 = _1496;
        _1668 = _1508;
        _1669 = _1507;
        _1670 = _1506;
        _1671 = _1518;
        _1672 = _1517;
        _1673 = _1516;
        _1674 = _1531;
        _1675 = _1530;
        _1676 = _1529;
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
    }
    else
    {
        _1665 = _1354;
        _1666 = _1354;
        _1667 = _1354;
        _1668 = _1354;
        _1669 = _1354;
        _1670 = _1354;
        _1671 = _1354;
        _1672 = _1354;
        _1673 = _1354;
        _1674 = _1354;
        _1675 = _1354;
        _1676 = _1354;
        _1677 = 0.0;
        _1678 = 0.0;
        _1679 = 0.0;
    }
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1366)) + _1366;
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1367)) + _1367;
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1368)) + _1368;
    float _1712 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1715 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1718 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1689));
    float _1733 = _963 * 0.5;
    float _1734 = _964 * 0.5;
    float _1735 = _965 * 0.5;
    float _1736 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1739 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1742 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1776;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1749 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1353, _1357, _1360, _1363));
        float _1753 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1355, _1358, _1361, _1364));
        float _1757 = dot(vec4(_1733, _1734, _1735, 1.0), vec4(_1356, _1359, _1362, _1365));
        float _1764 = dot(vec4(cbModelParam._m0[39u]), vec4(_1733, _1734, _1735, 1.0));
        _1776 = dot(vec3(isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1764) ? 0.0 : (isnan(0.0) ? _1764 : max(0.0, _1764))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1776 = 1.0;
    }
    float _1787;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1778 = dot(vec4(cbModelParam._m0[40u]), vec4(_1733, _1734, _1735, 1.0));
        _1787 = dot(vec3(isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1778) ? 0.0 : (isnan(0.0) ? _1778 : max(0.0, _1778))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1787 = 1.0;
    }
    float _1791 = (_1787 * cbModelParam._m0[1u].x) + (_1776 * (1.0 - cbModelParam._m0[1u].x));
    float _1801 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _796);
    float _1802 = isnan(_1801) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1801 : min(cbModelParam._m0[25u].z, _1801));
    float _1882;
    float _1884;
    float _1886;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1849 = fma(_1024, cbModelParam._m0[13u].z, fma(_1020, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016)) + cbModelParam._m0[13u].w;
        float _1853 = fma(_1024, cbModelParam._m0[14u].z, fma(_1020, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016)) + cbModelParam._m0[14u].w;
        float _1857 = fma(_1024, cbModelParam._m0[15u].z, fma(_1020, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016)) + cbModelParam._m0[15u].w;
        float _1860 = fma(_965, cbModelParam._m0[13u].z, fma(_964, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963));
        float _1863 = fma(_965, cbModelParam._m0[14u].z, fma(_964, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963));
        float _1866 = fma(_965, cbModelParam._m0[15u].z, fma(_964, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963));
        float _1894;
        if (_1860 > 0.0)
        {
            _1894 = abs((1.0 - _1849) / _1860);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1849 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1894 = frontier_phi_17_15_ladder;
        }
        float _2094;
        if (_1863 > 0.0)
        {
            _2094 = abs((1.0 - _1853) / _1863);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1853 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2094 = frontier_phi_26_22_ladder;
        }
        float _2337;
        if (_1866 > 0.0)
        {
            _2337 = abs((1.0 - _1857) / _1866);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1857 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2337 = frontier_phi_38_33_ladder;
        }
        float _2339 = isnan(_2094) ? _1894 : (isnan(_1894) ? _2094 : min(_1894, _2094));
        float _2340 = isnan(_2337) ? _2339 : (isnan(_2339) ? _2337 : min(_2339, _2337));
        float _2344 = (_2340 * _1860) + _1849;
        float _2345 = (_2340 * _1863) + _1853;
        float _2346 = (_2340 * _1866) + _1857;
        float _2347 = _2340 * 9.9999997473787516355514526367188e-05;
        float _2349 = (-1.0) - _2347;
        float _2351 = _2347 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2346 > _2351) || ((_2346 < _2349) || ((_2345 > _2351) || ((_2345 < _2349) || ((_2344 < _2349) || (_2344 > _2351))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2470 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2346, cbModelParam._m0[9u].z, fma(_2345, cbModelParam._m0[9u].y, _2344 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2346, cbModelParam._m0[10u].z, fma(_2345, cbModelParam._m0[10u].y, _2344 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2346, cbModelParam._m0[11u].z, fma(_2345, cbModelParam._m0[11u].y, _2344 * cbModelParam._m0[11u].x))), _1802);
            frontier_phi_16_38_ladder = _2470.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2470.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2470.x * cbModelParam._m0[1u].y;
        }
        _1882 = frontier_phi_16_38_ladder_2;
        _1884 = frontier_phi_16_38_ladder_1;
        _1886 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1870 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_963, _964, _965), _1802);
        _1882 = _1870.x * cbModelParam._m0[1u].y;
        _1884 = _1870.y * cbModelParam._m0[1u].y;
        _1886 = _1870.z * cbModelParam._m0[1u].y;
    }
    float _1890 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _796);
    float _1891 = isnan(_1890) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1890 : min(cbModelParam._m0[25u].w, _1890));
    float _1980;
    float _1982;
    float _1984;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1944 = fma(_1024, cbModelParam._m0[21u].z, fma(_1020, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016)) + cbModelParam._m0[21u].w;
        float _1948 = fma(_1024, cbModelParam._m0[22u].z, fma(_1020, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016)) + cbModelParam._m0[22u].w;
        float _1952 = fma(_1024, cbModelParam._m0[23u].z, fma(_1020, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016)) + cbModelParam._m0[23u].w;
        float _1955 = fma(_965, cbModelParam._m0[21u].z, fma(_964, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963));
        float _1958 = fma(_965, cbModelParam._m0[22u].z, fma(_964, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963));
        float _1961 = fma(_965, cbModelParam._m0[23u].z, fma(_964, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963));
        float _2099;
        if (_1955 > 0.0)
        {
            _2099 = abs((1.0 - _1944) / _1955);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1944 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2099 = frontier_phi_28_24_ladder;
        }
        float _2364;
        if (_1958 > 0.0)
        {
            _2364 = abs((1.0 - _1948) / _1958);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1948 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2364 = frontier_phi_40_35_ladder;
        }
        float _2569;
        if (_1961 > 0.0)
        {
            _2569 = abs((1.0 - _1952) / _1961);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1952 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2569 = frontier_phi_49_46_ladder;
        }
        float _2571 = isnan(_2364) ? _2099 : (isnan(_2099) ? _2364 : min(_2099, _2364));
        float _2572 = isnan(_2569) ? _2571 : (isnan(_2571) ? _2569 : min(_2571, _2569));
        float _2576 = (_2572 * _1955) + _1944;
        float _2577 = (_2572 * _1958) + _1948;
        float _2578 = (_2572 * _1961) + _1952;
        float _2579 = _2572 * 9.9999997473787516355514526367188e-05;
        float _2580 = (-1.0) - _2579;
        float _2582 = _2579 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2578 > _2582) || ((_2578 < _2580) || ((_2577 > _2582) || ((_2577 < _2580) || ((_2576 < _2580) || (_2576 > _2582))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2777 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2578, cbModelParam._m0[17u].z, fma(_2577, cbModelParam._m0[17u].y, _2576 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2578, cbModelParam._m0[18u].z, fma(_2577, cbModelParam._m0[18u].y, _2576 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2578, cbModelParam._m0[19u].z, fma(_2577, cbModelParam._m0[19u].y, _2576 * cbModelParam._m0[19u].x))), _1891);
            frontier_phi_25_49_ladder = _2777.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2777.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2777.x * cbModelParam._m0[1u].z;
        }
        _1980 = frontier_phi_25_49_ladder_2;
        _1982 = frontier_phi_25_49_ladder_1;
        _1984 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1964 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_963, _964, _965), _1891);
        _1980 = _1964.x * cbModelParam._m0[1u].z;
        _1982 = _1964.y * cbModelParam._m0[1u].z;
        _1984 = _1964.z * cbModelParam._m0[1u].z;
    }
    float _1996 = ((((1.0 - _984) * ((_971 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_984 * _971)) * _955;
    float _1997 = _1996 * ((cbModelParam._m0[1u].w * (_1980 - _1882)) + _1882);
    float _1998 = _1996 * ((cbModelParam._m0[1u].w * (_1982 - _1884)) + _1884);
    float _1999 = _1996 * ((cbModelParam._m0[1u].w * (_1984 - _1886)) + _1886);
    float _2002 = fma(_1999, cbSceneParam._m0[89u].z, fma(_1998, cbSceneParam._m0[89u].y, _1997 * cbSceneParam._m0[89u].x));
    float _2005 = fma(_1999, cbSceneParam._m0[90u].z, fma(_1998, cbSceneParam._m0[90u].y, _1997 * cbSceneParam._m0[90u].x));
    float _2008 = fma(_1999, cbSceneParam._m0[91u].z, fma(_1998, cbSceneParam._m0[91u].y, _1997 * cbSceneParam._m0[91u].x));
    uvec4 _2018 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2020 = _2018.x * 14u;
    uint _2021 = _2020 + 13u;
    float _2028 = _955 + (-1.0);
    float _2033 = (cbLight._m0[_2021].x * _2028) + 1.0;
    float _2034 = (cbLight._m0[_2021].y * _2028) + 1.0;
    float _2035 = (cbLight._m0[_2021].z * _2028) + 1.0;
    float _2036 = (cbLight._m0[_2021].w * _2028) + 1.0;
    uint _2037 = _2020 + 5u;
    float _2043 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
    uint _2047 = _2020 + 4u;
    float _2053 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
    uint _2057 = _2020 | 1u;
    float _2068 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_793, _794, _795));
    float _2071 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_793, _794, _795));
    float _4322 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _4333 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2076 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * 0.3183098733425140380859375;
    float _2078 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * 0.3183098733425140380859375;
    float _2085 = ((cbLight._m0[_2037].x * _2043) * _2078) + ((cbLight._m0[_2047].x * _2053) * _2076);
    float _2086 = ((_2043 * cbLight._m0[_2037].y) * _2078) + ((_2053 * cbLight._m0[_2047].y) * _2076);
    float _2087 = ((_2043 * cbLight._m0[_2037].z) * _2078) + ((_2053 * cbLight._m0[_2047].z) * _2076);
    uvec4 _2091 = floatBitsToUint(cbLight._m0[_2020 + 12u]);
    bool _2093 = _2091.x == 0u;
    float _2104;
    float _2106;
    float _2108;
    if (_2093)
    {
        _2104 = _2085;
        _2106 = _2086;
        _2108 = _2087;
    }
    else
    {
        uint _2112 = _2020 + 6u;
        float _2128 = (dot(vec3(cbLight._m0[_2020 + 2u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2129 = _2128 * _2128;
        float _4344 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2130 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _2131 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2104 = (((cbLight._m0[_2112].x * 0.3183098733425140380859375) * _2130) * _2131) + _2085;
        _2106 = (((cbLight._m0[_2112].y * 0.3183098733425140380859375) * _2130) * _2131) + _2086;
        _2108 = (((cbLight._m0[_2112].z * 0.3183098733425140380859375) * _2130) * _2131) + _2087;
    }
    bool _2111 = _2091.y == 0u;
    float _2149;
    float _2151;
    float _2153;
    if (_2111)
    {
        _2149 = _2104;
        _2151 = _2106;
        _2153 = _2108;
    }
    else
    {
        uint _2308 = _2020 + 7u;
        float _2324 = (dot(vec3(cbLight._m0[_2020 + 3u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2325 = _2324 * _2324;
        float _4360 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2326 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _2327 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2149 = (((cbLight._m0[_2308].x * 0.3183098733425140380859375) * _2326) * _2327) + _2104;
        _2151 = (((cbLight._m0[_2308].y * 0.3183098733425140380859375) * _2326) * _2327) + _2106;
        _2153 = (((cbLight._m0[_2308].z * 0.3183098733425140380859375) * _2326) * _2327) + _2108;
    }
    uint _2156 = _2020 + 8u;
    float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _796) * 0.949999988079071044921875);
    float _2170 = _2169 * _2169;
    float _2171 = cbLight._m0[_2020].x + _872;
    float _2172 = cbLight._m0[_2020].y + _873;
    float _2173 = cbLight._m0[_2020].z + _874;
    float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
    float _2178 = _2177 * _2171;
    float _2179 = _2177 * _2172;
    float _2180 = _2177 * _2173;
    float _2181 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2020].xyz));
    float _4376 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _4387 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _2185 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2186 = dot(vec3(_793, _794, _795), vec3(_2178, _2179, _2180));
    float _4398 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2190 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2178, _2179, _2180));
    float _4409 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2194 = _2170 * _2170;
    float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
    float _2209 = (exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2210 = 1.0 - _2170;
    float _2221 = (0.5 / (((_2185 * ((_2184 * _2210) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2210) + _2170) * _2184))) * _2184;
    float _4420 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2223 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
    uint _2234 = _2020 + 9u;
    float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _796) * 0.949999988079071044921875);
    float _2246 = _2245 * _2245;
    float _2247 = cbLight._m0[_2057].x + _872;
    float _2248 = cbLight._m0[_2057].y + _873;
    float _2249 = cbLight._m0[_2057].z + _874;
    float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
    float _2254 = _2253 * _2247;
    float _2255 = _2253 * _2248;
    float _2256 = _2253 * _2249;
    float _2257 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2057].xyz));
    float _4431 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2261 = dot(vec3(_793, _794, _795), vec3(_2254, _2255, _2256));
    float _4442 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2264 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2265 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2254, _2255, _2256));
    float _4453 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2269 = _2246 * _2246;
    float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
    float _2282 = (exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2283 = 1.0 - _2246;
    float _2293 = (0.5 / (((_2185 * ((_2260 * _2283) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2283) + _2246) * _2260))) * _2260;
    float _4464 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2295 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
    float _2305 = (((_2282 * cbLight._m0[_2234].x) * _2295) * _2043) + (((_2209 * cbLight._m0[_2156].x) * _2223) * _2053);
    float _2306 = (((_2282 * cbLight._m0[_2234].y) * _2295) * _2043) + (((_2209 * cbLight._m0[_2156].y) * _2223) * _2053);
    float _2307 = (((_2282 * cbLight._m0[_2234].z) * _2295) * _2043) + (((_2209 * cbLight._m0[_2156].z) * _2223) * _2053);
    float _2369;
    float _2371;
    float _2373;
    if (_2093)
    {
        _2369 = _2305;
        _2371 = _2306;
        _2373 = _2307;
    }
    else
    {
        uint _2375 = _2020 + 2u;
        uint _2379 = _2020 + 10u;
        float _2393 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2375].w)) * _796) * 0.949999988079071044921875);
        float _2394 = _2393 * _2393;
        float _2395 = cbLight._m0[_2375].x + _872;
        float _2396 = cbLight._m0[_2375].y + _873;
        float _2397 = cbLight._m0[_2375].z + _874;
        float _2401 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
        float _2402 = _2401 * _2395;
        float _2403 = _2401 * _2396;
        float _2404 = _2401 * _2397;
        float _2405 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2375].xyz));
        float _4475 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _2409 = dot(vec3(_793, _794, _795), vec3(_2402, _2403, _2404));
        float _4486 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2413 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_2402, _2403, _2404));
        float _4497 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2417 = _2394 * _2394;
        float _2421 = ((_2412 * _2412) * (_2417 + (-1.0))) + 1.0;
        float _2430 = (exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2431 = 1.0 - _2394;
        float _2441 = (0.5 / (((_2185 * ((_2408 * _2431) + _2394)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2431) + _2394) * _2408))) * _2408;
        float _4508 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2443 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2417 / ((_2421 * _2421) * 3.141590118408203125));
        float _2444 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2369 = (((_2430 * cbLight._m0[_2379].x) * _2443) * _2444) + _2305;
        _2371 = (((_2430 * cbLight._m0[_2379].y) * _2443) * _2444) + _2306;
        _2373 = (((_2430 * cbLight._m0[_2379].z) * _2443) * _2444) + _2307;
    }
    float _2479;
    float _2481;
    float _2483;
    if (_2111)
    {
        _2479 = _2369;
        _2481 = _2371;
        _2483 = _2373;
    }
    else
    {
        uint _2490 = _2020 + 3u;
        uint _2494 = _2020 + 11u;
        float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2490].w)) * _796) * 0.949999988079071044921875);
        float _2509 = _2508 * _2508;
        float _2510 = cbLight._m0[_2490].x + _872;
        float _2511 = cbLight._m0[_2490].y + _873;
        float _2512 = cbLight._m0[_2490].z + _874;
        float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
        float _2517 = _2516 * _2510;
        float _2518 = _2516 * _2511;
        float _2519 = _2516 * _2512;
        float _2520 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2490].xyz));
        float _4524 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2524 = dot(vec3(_793, _794, _795), vec3(_2517, _2518, _2519));
        float _4535 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2528 = dot(vec3(cbLight._m0[_2490].xyz), vec3(_2517, _2518, _2519));
        float _4546 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2532 = _2509 * _2509;
        float _2536 = ((_2527 * _2527) * (_2532 + (-1.0))) + 1.0;
        float _2545 = (exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2546 = 1.0 - _2509;
        float _2556 = (0.5 / (((_2185 * ((_2523 * _2546) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2546) + _2509) * _2523))) * _2523;
        float _4557 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2558 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2532 / ((_2536 * _2536) * 3.141590118408203125));
        float _2559 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2479 = (((_2545 * cbLight._m0[_2494].x) * _2558) * _2559) + _2369;
        _2481 = (((_2545 * cbLight._m0[_2494].y) * _2558) * _2559) + _2371;
        _2483 = (((_2545 * cbLight._m0[_2494].z) * _2558) * _2559) + _2373;
    }
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    if (_2018.y == 0u)
    {
        float _2634 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2635 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2634;
        float _2636 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2634;
        float _2637 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2634;
        uvec4 _2649 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2650 = _2649.x;
        uint _2661 = uint((float(_2649.y) * floor(float(uint(cbSceneParam._m0[85u].y * _893) / _2650))) + floor(float(uint(cbSceneParam._m0[85u].x * _892) / _2650)));
        float _2671 = (log2(_2637 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2672 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        uint _2675 = uint(isnan(14.0) ? _2672 : (isnan(_2672) ? 14.0 : min(_2672, 14.0)));
        uvec4 _2680 = texelFetch(g_lightClusterGridBuffer, int(((_2675 << 2u) + (_2661 << 6u)) >> 2u));
        uint _2681 = _2680.x;
        uint _2682 = _2649.z;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        if (((((1u << ((_2682 >> 4u) & 15u)) + 4294967295u) & _2681) == 0u) || ((_2682 & 240u) == 0u))
        {
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
            _2792 = 0.0;
        }
        else
        {
            float _2783;
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2793;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            float _2940 = 0.0;
            uint _2941 = 0u;
            uint _2950;
            bool _2951;
            for (;;)
            {
                _2950 = texelFetch(g_lightClassification, int((((_2675 << 5u) + (_2661 << 9u)) + (_2941 << 2u)) >> 2u)).x;
                _2951 = _2950 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2951)
                {
                    frontier_phi_66_pred = _2935;
                    frontier_phi_66_pred_1 = _2940;
                    frontier_phi_66_pred_2 = _2939;
                    frontier_phi_66_pred_3 = _2938;
                    frontier_phi_66_pred_4 = _2937;
                    frontier_phi_66_pred_5 = _2936;
                }
                else
                {
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    uint _3086;
                    _3080 = _2935;
                    _3081 = _2936;
                    _3082 = _2937;
                    _3083 = _2938;
                    _3084 = _2939;
                    _3085 = _2940;
                    _3086 = _2950;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    for (;;)
                    {
                        uint _3090 = uint(findLSB(_3086)) + (_2941 << 5u);
                        uint _3087 = (_3086 + 4294967295u) & _3086;
                        uint _3092 = _3090 * 48u;
                        vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3092)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 3u)).x));
                        uint _3112 = (_3090 * 48u) + 4u;
                        vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3112)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 3u)).x));
                        uint _3131 = (_3090 * 48u) + 8u;
                        vec3 _3142 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3131)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 2u)).x));
                        float _3146 = _3106.x - _2635;
                        float _3147 = _3106.y - _2636;
                        float _3148 = _3106.z - _2637;
                        float _3149 = dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148));
                        float _3152 = inversesqrt(_3149);
                        float _3153 = _3152 * _3146;
                        float _3154 = _3152 * _3147;
                        float _3155 = _3152 * _3148;
                        float _3156 = dot(vec3(_911, _914, _917), vec3(_3153, _3154, _3155));
                        float _3161 = 1.0 - (_3149 * _3106.w);
                        float _4583 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3162 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                        float _3163 = sqrt(_3149) * _3125.w;
                        float _3166 = 1.39999997615814208984375 / (_3163 + 1.39999997615814208984375);
                        float _3167 = _3166 * _3166;
                        float _3170 = ((1.0 - _3167) * _3156) + _3167;
                        float _3173 = _3163 * _3163;
                        float _3177 = ((isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0))) * _3162) / ((_3173 * 0.699999988079071044921875) + 1.0);
                        float _3181 = (-0.0) - _2635;
                        float _3182 = (-0.0) - _2636;
                        float _3183 = (-0.0) - _2637;
                        float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                        float _3188 = _3187 * _3181;
                        float _3189 = _3187 * _3182;
                        float _3190 = _3187 * _3183;
                        float _3198 = exp2(log2(1.0 / ((_3173 * 3.5) + 5.0)) * 0.25);
                        float _3199 = 1.0 - _971;
                        float _3206 = sqrt(1.0 - ((1.0 - (_3199 * _3199)) * (1.0 - (_3198 * _3198))));
                        float _3207 = _3206 * _3206;
                        float _3208 = _3207 * _3207;
                        float _3209 = _3188 + _3153;
                        float _3210 = _3189 + _3154;
                        float _3211 = _3190 + _3155;
                        float _3215 = inversesqrt(dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211)));
                        float _3219 = dot(vec3(_911, _914, _917), vec3(_3188, _3189, _3190));
                        float _4599 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3222 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3223 = dot(vec3(_911, _914, _917), vec3(_3215 * _3209, _3215 * _3210, _3215 * _3211));
                        float _4610 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3226 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3230 = ((_3226 * _3226) * (_3208 + (-1.0))) + 1.0;
                        float _3231 = _3166 * _3207;
                        float _3232 = _3231 * _3231;
                        float _3235 = ((1.0 - _3232) * _3156) + _3232;
                        float _4621 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3236 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                        float _3237 = 1.0 - _3207;
                        float _3247 = (0.5 / (((_3236 * ((_3222 * _3237) + _3207)) + 9.9999999392252902907785028219223e-09) + (((_3236 * _3237) + _3207) * _3222))) * _3236;
                        float _4632 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3258 = (((_3208 * 3.1415927410125732421875) * (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) / ((_3230 * _3230) * ((_3173 * 2.1991131305694580078125) + 3.141590118408203125))) * _3162;
                        _3010 = (_3177 * _3125.x) + _3083;
                        _3011 = (_3177 * _3125.y) + _3084;
                        _3012 = (_3177 * _3125.z) + _3085;
                        _3007 = (_3258 * _3142.x) + _3080;
                        _3008 = (_3258 * _3142.y) + _3081;
                        _3009 = (_3258 * _3142.z) + _3082;
                        if (_3087 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3080 = _3007;
                            _3081 = _3008;
                            _3082 = _3009;
                            _3083 = _3010;
                            _3084 = _3011;
                            _3085 = _3012;
                            _3086 = _3087;
                        }
                    }
                    frontier_phi_66_pred = _3007;
                    frontier_phi_66_pred_1 = _3012;
                    frontier_phi_66_pred_2 = _3011;
                    frontier_phi_66_pred_3 = _3010;
                    frontier_phi_66_pred_4 = _3009;
                    frontier_phi_66_pred_5 = _3008;
                }
                _2783 = frontier_phi_66_pred;
                _2793 = frontier_phi_66_pred_1;
                _2791 = frontier_phi_66_pred_2;
                _2789 = frontier_phi_66_pred_3;
                _2787 = frontier_phi_66_pred_4;
                _2785 = frontier_phi_66_pred_5;
                uint _2942 = _2941 + 1u;
                if (_2942 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2935 = _2783;
                    _2936 = _2785;
                    _2937 = _2787;
                    _2938 = _2789;
                    _2939 = _2791;
                    _2940 = _2793;
                    _2941 = _2942;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
            _2792 = _2793;
        }
        uvec4 _2796 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2797 = _2796.z;
        uint _2799 = (_2797 >> 8u) & 15u;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        if (((4294967295u << _2799) & _2681) == 0u)
        {
            _2903 = _2782;
            _2905 = _2784;
            _2907 = _2786;
            _2909 = _2788;
            _2911 = _2790;
            _2913 = _2792;
        }
        else
        {
            float _2928 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
            float _2929 = _2928 * _2635;
            float _2930 = _2928 * _2636;
            float _2931 = _2928 * _2637;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2799 < ((_2797 >> 12u) & 15u))
            {
                float _2904;
                float _2906;
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _3063 = _2782;
                float _3064 = _2784;
                float _3065 = _2786;
                float _3066 = _2788;
                float _3067 = _2790;
                float _3068 = _2792;
                uint _3069 = _2799;
                uint _3078;
                bool _3079;
                for (;;)
                {
                    _3078 = texelFetch(g_lightClassification, int((((_2675 << 5u) + (_2661 << 9u)) + (_3069 << 2u)) >> 2u)).x;
                    _3079 = _3078 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3079)
                    {
                        frontier_phi_77_pred = _3068;
                        frontier_phi_77_pred_1 = _3067;
                        frontier_phi_77_pred_2 = _3066;
                        frontier_phi_77_pred_3 = _3065;
                        frontier_phi_77_pred_4 = _3064;
                        frontier_phi_77_pred_5 = _3063;
                    }
                    else
                    {
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3285 = _3063;
                        float _3286 = _3064;
                        float _3287 = _3065;
                        float _3288 = _3066;
                        float _3289 = _3067;
                        float _3290 = _3068;
                        uint _3291 = _3078;
                        uint _3292;
                        vec4 _3317;
                        float _3318;
                        vec4 _3333;
                        vec3 _3345;
                        vec4 _3360;
                        vec4 _3375;
                        float _3421;
                        bool _3422;
                        for (;;)
                        {
                            uint _3302 = ((_3069 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3291));
                            _3292 = (_3291 + 4294967295u) & _3291;
                            uint _3304 = _3302 * 40u;
                            _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3318 = _3317.w;
                            uint _3320 = (_3302 * 40u) + 4u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            uint _3335 = (_3302 * 40u) + 8u;
                            _3345 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x));
                            uint _3347 = (_3302 * 40u) + 16u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3362 = (_3302 * 40u) + 20u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3377 = (_3302 * 40u) + 24u;
                            vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3396 = (_3302 * 40u) + 28u;
                            vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            _3421 = fma(_2637, _3409.z, fma(_2636, _3409.y, _3409.x * _2635)) + _3409.w;
                            _3422 = !((fma(_2637, _3390.z, fma(_2636, _3390.y, _3390.x * _2635)) + _3390.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3422)
                            {
                                float _3449 = _3317.x - _2635;
                                float _3450 = _3317.y - _2636;
                                float _3451 = _3317.z - _2637;
                                float _3452 = dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451));
                                float _3455 = inversesqrt(_3452);
                                float _3456 = _3455 * _3449;
                                float _3457 = _3455 * _3450;
                                float _3458 = _3455 * _3451;
                                float _3462 = 1.0 - (_3452 / (_3318 * _3318));
                                float _4643 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                                float _3467 = sqrt(_3452) * _3333.w;
                                float _3469 = 1.39999997615814208984375 / (_3467 + 1.39999997615814208984375);
                                float _3470 = _3469 * _3469;
                                float _3473 = ((1.0 - _3470) * dot(vec3(_3456, _3457, _3458), vec3(_911, _914, _917))) + _3470;
                                float _3476 = _3467 * _3467;
                                float _3480 = (fma(_2637, _3360.z, fma(_2636, _3360.y, _3360.x * _2635)) + _3360.w) / _3421;
                                float _3481 = (fma(_2637, _3375.z, fma(_2636, _3375.y, _3375.x * _2635)) + _3375.w) / _3421;
                                float _3485 = 1.0 - dot(vec2(_3480, _3481), vec2(_3480, _3481));
                                float _4659 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3487 = _3486 * (((isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0))) * _3463) / ((_3476 * 0.699999988079071044921875) + 1.0));
                                float _3499 = exp2(log2(1.0 / ((_3476 * 3.5) + 5.0)) * 0.25);
                                float _3500 = 1.0 - _971;
                                float _3507 = sqrt(1.0 - ((1.0 - (_3500 * _3500)) * (1.0 - (_3499 * _3499))));
                                float _3508 = _3507 * _3507;
                                float _3509 = _3508 * _3508;
                                float _3510 = _3456 - _2929;
                                float _3511 = _3457 - _2930;
                                float _3512 = _3458 - _2931;
                                float _3516 = inversesqrt(dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512)));
                                float _3520 = dot(vec3(_911, _914, _917), vec3((-0.0) - _2929, (-0.0) - _2930, (-0.0) - _2931));
                                float _4670 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3523 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3524 = dot(vec3(_911, _914, _917), vec3(_3516 * _3510, _3516 * _3511, _3516 * _3512));
                                float _4681 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3527 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3531 = ((_3527 * _3527) * (_3509 + (-1.0))) + 1.0;
                                float _3532 = _3469 * _3508;
                                float _3533 = _3532 * _3532;
                                float _3539 = ((1.0 - _3533) * dot(vec3(_911, _914, _917), vec3(_3456, _3457, _3458))) + _3533;
                                float _4692 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3541 = 1.0 - _3508;
                                float _3551 = (0.5 / (((_3540 * ((_3523 * _3541) + _3508)) + 9.9999999392252902907785028219223e-09) + (((_3540 * _3541) + _3508) * _3523))) * _3540;
                                float _4703 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3561 = (_3486 * _3463) * (((_3509 * 3.1415927410125732421875) * (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) / ((_3531 * _3531) * ((_3476 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3487 * _3333.y;
                                frontier_phi_83_pred_1 = _3487 * _3333.x;
                                frontier_phi_83_pred_2 = _3561 * _3345.z;
                                frontier_phi_83_pred_3 = _3561 * _3345.y;
                                frontier_phi_83_pred_4 = _3561 * _3345.x;
                                frontier_phi_83_pred_5 = _3487 * _3333.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3569 = frontier_phi_83_pred;
                            _3568 = frontier_phi_83_pred_1;
                            _3567 = frontier_phi_83_pred_2;
                            _3566 = frontier_phi_83_pred_3;
                            _3565 = frontier_phi_83_pred_4;
                            _3570 = frontier_phi_83_pred_5;
                            _3275 = _3568 + _3288;
                            _3276 = _3569 + _3289;
                            _3277 = _3570 + _3290;
                            _3272 = _3565 + _3285;
                            _3273 = _3566 + _3286;
                            _3274 = _3567 + _3287;
                            if (_3292 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3275;
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3292;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3277;
                        frontier_phi_77_pred_1 = _3276;
                        frontier_phi_77_pred_2 = _3275;
                        frontier_phi_77_pred_3 = _3274;
                        frontier_phi_77_pred_4 = _3273;
                        frontier_phi_77_pred_5 = _3272;
                    }
                    _2914 = frontier_phi_77_pred;
                    _2912 = frontier_phi_77_pred_1;
                    _2910 = frontier_phi_77_pred_2;
                    _2908 = frontier_phi_77_pred_3;
                    _2906 = frontier_phi_77_pred_4;
                    _2904 = frontier_phi_77_pred_5;
                    uint _3070 = _3069 + 1u;
                    if (_3070 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3063 = _2904;
                        _3064 = _2906;
                        _3065 = _2908;
                        _3066 = _2910;
                        _3067 = _2912;
                        _3068 = _2914;
                        _3069 = _3070;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2908;
                frontier_phi_58_59_ladder_1 = _2914;
                frontier_phi_58_59_ladder_2 = _2912;
                frontier_phi_58_59_ladder_3 = _2910;
                frontier_phi_58_59_ladder_4 = _2906;
                frontier_phi_58_59_ladder_5 = _2904;
            }
            else
            {
                frontier_phi_58_59_ladder = _2786;
                frontier_phi_58_59_ladder_1 = _2792;
                frontier_phi_58_59_ladder_2 = _2790;
                frontier_phi_58_59_ladder_3 = _2788;
                frontier_phi_58_59_ladder_4 = _2784;
                frontier_phi_58_59_ladder_5 = _2782;
            }
            _2903 = frontier_phi_58_59_ladder_5;
            _2905 = frontier_phi_58_59_ladder_4;
            _2907 = frontier_phi_58_59_ladder;
            _2909 = frontier_phi_58_59_ladder_3;
            _2911 = frontier_phi_58_59_ladder_2;
            _2913 = frontier_phi_58_59_ladder_1;
        }
        float _2918 = isnan(1.0) ? _955 : (isnan(_955) ? 1.0 : min(_955, 1.0));
        _2694 = (_2918 * _2909) + _2149;
        _2696 = (_2918 * _2911) + _2151;
        _2698 = (_2918 * _2913) + _2153;
        _2700 = ((_2903 * 0.039999999105930328369140625) * _2918) + _2479;
        _2702 = ((_2905 * 0.039999999105930328369140625) * _2918) + _2481;
        _2704 = ((_2907 * 0.039999999105930328369140625) * _2918) + _2483;
    }
    else
    {
        _2694 = _2149;
        _2696 = _2151;
        _2698 = _2153;
        _2700 = _2479;
        _2702 = _2481;
        _2704 = _2483;
    }
    float _4719 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _4730 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4741 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _2721 = ((isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2694 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _955))) + ((_2700 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1791)) * cbPerFrame._m0[3u].x);
    float _2722 = ((isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2696 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _955))) + ((_2702 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1791)) * cbPerFrame._m0[3u].x);
    float _2723 = ((isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2698 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _955))) + ((_2704 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1791)) * cbPerFrame._m0[3u].x);
    uint _2724 = _279 + 6u;
    float _2732 = _892 / cbSceneParam._m0[86u].x;
    float _2733 = _893 / cbSceneParam._m0[86u].y;
    vec4 _2747 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2732, _2733, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2749 = _2747.x;
    float _2750 = _2747.y;
    float _2751 = _2747.z;
    float _2752 = _2747.w;
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _2807 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _2808 = _2807 / _814;
        float _2819 = _2808 * _865;
        float _2820 = _866 * _2808;
        float _2821 = (-0.0) - _2820;
        float _2823 = _2808 * _867;
        float _2825 = (cbSceneParam._m0[77u].w * _2821) / _2807;
        float _2826 = _2825 + cbSceneParam._m0[79u].w;
        float _2827 = cbSceneParam._m0[79u].w - _2820;
        float _2833 = sqrt(((_2819 * _2819) + (_2820 * _2820)) + (_2823 * _2823));
        float _2836 = (1.0 - (cbSceneParam._m0[77u].w / _2807)) * _2833;
        float _2841 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2843 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3020;
        if (abs((_2821 - _2825) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3020 = ((((_2826 > 0.0) ? exp2(_2841 * _2826) : (2.0 - exp2(_2843 * _2826))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2836;
        }
        else
        {
            float _2964 = 1.0 / cbSceneParam._m0[80u].x;
            float _2965 = isnan(_2827) ? _2826 : (isnan(_2826) ? _2827 : max(_2826, _2827));
            float _2966 = isnan(_2827) ? _2826 : (isnan(_2826) ? _2827 : min(_2826, _2827));
            float _2975 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : min(_2965, 0.0));
            float _2976 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : min(_2966, 0.0));
            _3020 = ((abs(_2833 / _2821) * cbSceneParam._m0[80u].y) * ((((_2975 - _2976) * 2.0) - ((exp2(_2841 * (isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0)))) - exp2(_2841 * (isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0))))) * _2964)) - ((exp2(_2843 * _2975) - exp2(_2843 * _2976)) * _2964))) + (_2836 * cbSceneParam._m0[80u].z);
        }
        vec4 _3022 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2732, _2733, 1.0), 0.0);
        float _3031 = exp2((_3020 * (-1.44269502162933349609375)) * (1.0 - _3022.w));
        float _3032 = log2(_3031);
        float _3048 = log2(_2752);
        _2845 = (exp2(_3048 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].x)) * _3022.x) / cbSceneParam._m0[78u].x)) + _2749;
        _2847 = (exp2(_3048 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].y)) * _3022.y) / cbSceneParam._m0[78u].y)) + _2750;
        _2849 = (exp2(_3048 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].z)) * _3022.z) / cbSceneParam._m0[78u].z)) + _2751;
        _2851 = _3031 * _2752;
    }
    else
    {
        _2845 = _2749;
        _2847 = _2750;
        _2849 = _2751;
        _2851 = _2752;
    }
    bool _3058;
    vec4 _2861;
    vec4 _2883;
    float _2885;
    float _2889;
    float _2890;
    float _2891;
    float _2892;
    bool _2902;
    for (;;)
    {
        _2861 = cbMatDynParam._m0[0u];
        float _2863 = roundEven(_2861.y);
        bool _2864 = _2863 == 3.0;
        float _2865 = log2(_2851);
        float _2872 = exp2(_2865 * cbSceneParam._m0[78u].x) * _2721;
        float _2873 = exp2(_2865 * cbSceneParam._m0[78u].y) * _2722;
        float _2874 = exp2(_2865 * cbSceneParam._m0[78u].z) * _2723;
        float _2881 = _881 + (-0.5);
        _2883 = cbMtdParam._m0[1u];
        _2885 = _2883.y * _2881;
        float _2888 = (_2863 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2889 = _2888 * (_2864 ? _2872 : (_2872 + (cbSceneParam._m0[72u].w * _2845)));
        _2890 = _2888 * (_2864 ? _2873 : (_2873 + (cbSceneParam._m0[72u].w * _2847)));
        _2891 = _2888 * (_2864 ? _2874 : (_2874 + (cbSceneParam._m0[72u].w * _2849)));
        _2892 = _2881 * 0.999000012874603271484375;
        _2902 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2902)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _2892) < 0.5)
            {
                _3058 = true;
                break;
            }
        }
        uint _2999 = _930 + uint(_2861.w);
        if ((cbInstanceData._m0[_2999].w < 1.0) && ((cbInstanceData._m0[_2999].w + _2892) < 0.5))
        {
            _3058 = true;
            break;
        }
        if ((_2885 + 1.0) < _2883.x)
        {
            _3058 = true;
            break;
        }
        _3058 = false;
        break;
    }
    float _3263;
    if (_3058)
    {
        discard_state = true;
        _3263 = 0.0;
    }
    else
    {
        _3263 = cbInstanceData._m0[_2724].w;
    }
    SV_Target.x = _2889;
    SV_Target.y = _2890;
    SV_Target.z = _2891;
    SV_Target.w = _3263;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2724].w;
    discard_exit();
}


