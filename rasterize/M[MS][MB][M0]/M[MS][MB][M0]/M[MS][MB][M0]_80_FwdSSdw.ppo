#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1278;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3608 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3619 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3630 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _290) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _291) + cbTextureTilingScale._m0[13u].w));
    vec4 _328 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _390 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _392 = _390.x;
    float _402 = dot(vec4(_392, _390.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _419 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_392 - _402) * cbMtdParam._m0[24u].x) + _402) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3641 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _427 = (_420 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _428 = (_420 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _429 = (_420 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    float _433 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _304.x) * _427;
    float _436 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _304.y) * _428;
    float _439 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _304.z) * _429;
    float _446 = ((_427 - _433) * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) + _433;
    float _447 = ((_428 - _436) * (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0)))) + _436;
    float _448 = ((_429 - _439) * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) + _439;
    vec4 _461 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _290) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _291) + cbTextureTilingScale._m0[20u].w));
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _505 = _503.x;
    float _506 = _503.y;
    float _507 = _503.z;
    float _516 = ((_486.z - _507) * _420) + _507;
    float _519 = ((((_486.x - _505) * _420) + _505) * 2.0) + (-1.0);
    float _520 = ((((_486.y - _506) * _420) + _506) * 2.0) + (-1.0);
    float _521 = dot(vec2(_519, _520), vec2(_519, _520));
    float _3652 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _526 = sqrt(1.0 - (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))));
    vec4 _548 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _560 = (_519 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_461.x * 2.0) + (-1.0)))) + (((_548.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _561 = (_520 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_461.y * 2.0) + (-1.0)))) + (((_548.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _573 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _575 = _573.x;
    float _576 = 1.0 - _575;
    float _602 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_575 - _576) * cbMtdParam._m0[24u].w) + _576) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3663 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _611 = ((((cbMtdParam._m0[10u].x - _446) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _603) + _446;
    float _612 = ((((cbMtdParam._m0[10u].y - _447) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _603) + _447;
    float _613 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _448)) * _603) + _448;
    float _618 = (((_461.z - _516) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _516;
    float _622 = ((_548.z - _618) * cbMtdParam._m0[19u].w) + _618;
    float _626 = ((cbMtdParam._m0[23u].y - _622) * _603) + _622;
    vec4 _645 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _647 = _645.x;
    float _648 = _645.y;
    float _654 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_240, _241, _242, 0.0));
    vec4 _669 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _290) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _291) + cbTextureTilingScale._m0[18u].w));
    float _671 = _669.x;
    float _676 = fract(_669.w + cbPerFrame._m0[22u].x);
    float _678 = (1.0 - _676) * _671;
    float _683 = ((_676 + (-1.0)) + _671) * 9.0;
    float _685 = ((_671 + (-1.0)) + _676) * 9.0;
    float _686 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _687 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _701 = (_678 * ((_669.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _686 : (isnan(_686) ? 3.0 : min(_686, 3.0))) * 3.1415927410125732421875);
    float _703 = (_678 * ((_669.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _687 : (isnan(_687) ? 3.0 : min(_687, 3.0))) * 3.1415927410125732421875);
    float _707 = inversesqrt(dot(vec3(_701, _703, 1.0), vec3(_701, _703, 1.0)));
    float _723 = (((((0.5 - _647) + ((_701 * 0.5) * _707)) * _654) + _647) * 2.0) + (-1.0);
    float _724 = (((((0.5 - _648) + ((_707 * 0.5) * _703)) * _654) + _648) * 2.0) + (-1.0);
    float _725 = dot(vec2(_723, _724), vec2(_723, _724));
    float _3694 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _741 = ((((cbMtdParam._m0[22u].z * _560) - _560) + _723) * _603) + _560;
    float _742 = ((((cbMtdParam._m0[22u].z * _561) - _561) + _724) * _603) + _561;
    float _743 = (_603 * (sqrt(1.0 - (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0)))) - _526)) + _526;
    float _745 = cbMtdParam._m0[22u].x + _548.w;
    float _748 = fma(_743, _240, fma(_742, _246 * TANGENT.x, (_232 * _224) * _741));
    float _751 = fma(_743, _241, fma(_742, _246 * TANGENT.y, (_232 * _225) * _741));
    float _754 = fma(_743, _242, fma(_742, _246 * TANGENT.z, (_232 * _226) * _741));
    float _758 = inversesqrt(dot(vec3(_748, _751, _754), vec3(_748, _751, _754)));
    float _759 = _758 * _748;
    float _760 = _758 * _751;
    float _761 = _758 * _754;
    float _3705 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _762 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _3716 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _3727 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _3738 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3749 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _780 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _821 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _831 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _821);
    float _832 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _821);
    float _833 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _821);
    float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
    float _838 = _831 * _837;
    float _839 = _832 * _837;
    float _840 = _833 * _837;
    float _846 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _847 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _865 = fma(_761, cbSceneParam._m0[5u].z, fma(_760, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _759));
    float _868 = fma(_761, cbSceneParam._m0[6u].z, fma(_760, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _759));
    float _871 = fma(_761, cbSceneParam._m0[7u].z, fma(_760, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _759));
    uint _885 = (_271 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _891 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) * cbInstanceData._m0[_885].x;
    float _892 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) * cbInstanceData._m0[_885].y;
    float _893 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) * cbInstanceData._m0[_885].z;
    float _3760 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _3771 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _3782 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    vec4 _905 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _846, cbSceneParam._m0[86u].y * _847));
    float _909 = ((isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * TEXCOORD_5.w) * _905.x;
    float _910 = dot(vec3(_759, _760, _761), vec3(_838, _839, _840));
    float _913 = _910 * 2.0;
    float _917 = (_913 * _759) - _838;
    float _918 = (_913 * _760) - _839;
    float _919 = (_913 * _761) - _840;
    float _923 = abs(dot(vec3(_838, _839, _840), vec3(_759, _760, _761)));
    float _3793 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _925 = sqrt(_762);
    float _937 = exp2((_925 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_925 * 3.0));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1277;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1003 = fma(_977, cbModelParam._m0[26u].z, fma(_973, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _969));
        float _1007 = fma(_977, cbModelParam._m0[27u].z, fma(_973, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _969));
        float _1011 = fma(_977, cbModelParam._m0[28u].z, fma(_973, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _969));
        float _1035 = _969 + _759;
        float _1036 = _973 + _760;
        float _1037 = _977 + _761;
        float _1047 = fma(_1037, cbModelParam._m0[26u].z, fma(_1036, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1035)) - _1003;
        float _1048 = fma(_1037, cbModelParam._m0[27u].z, fma(_1036, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1035)) - _1007;
        float _1049 = fma(_1037, cbModelParam._m0[28u].z, fma(_1036, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1035)) - _1011;
        float _1053 = inversesqrt(dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049)));
        float _1066 = ((_1053 * _1047) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1003 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1067 = ((_1053 * _1048) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1007 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1068 = ((_1053 * _1049) / cbModelParam._m0[34u].z) + ((((((_1011 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        float _1105 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1071.x + (-0.5));
        float _1107 = _1105 * (_1071.y + (-0.5));
        float _1108 = _1105 * (_1071.z + (-0.5));
        float _1115 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1078.x + (-0.5));
        float _1117 = _1115 * (_1078.y + (-0.5));
        float _1118 = _1115 * (_1078.z + (-0.5));
        float _1125 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1085.x + (-0.5));
        float _1127 = _1125 * (_1085.y + (-0.5));
        float _1128 = _1125 * (_1085.z + (-0.5));
        float _1135 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1092.x + (-0.5));
        float _1137 = _1135 * (_1092.y + (-0.5));
        float _1138 = _1135 * (_1092.z + (-0.5));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = _1106 * 0.5;
        float _1143 = _1116 * 0.5;
        float _1144 = _1126 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1159 = (dot(vec3(_759, _760, _761), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1169 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3841 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1171 + 1.0))) + _1176) * _1139;
        float _1186 = _1107 * 0.5;
        float _1187 = _1117 * 0.5;
        float _1188 = _1127 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_759, _760, _761), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3874 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1213 + 1.0))) + _1218) * _1140;
        float _1228 = _1108 * 0.5;
        float _1229 = _1118 * 0.5;
        float _1230 = _1128 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_759, _760, _761), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3907 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1255 + 1.0))) + _1260) * _1141;
        _1277 = _1108;
        _1279 = _1107;
        _1280 = _1106;
        _1281 = _1118;
        _1282 = _1117;
        _1283 = _1116;
        _1284 = _1128;
        _1285 = _1127;
        _1286 = _1126;
        _1287 = _1141;
        _1288 = _1140;
        _1289 = _1139;
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1291 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
    }
    else
    {
        _1277 = _1278;
        _1279 = _1278;
        _1280 = _1278;
        _1281 = _1278;
        _1282 = _1278;
        _1283 = _1278;
        _1284 = _1278;
        _1285 = _1278;
        _1286 = _1278;
        _1287 = _1278;
        _1288 = _1278;
        _1289 = _1278;
        _1290 = 0.0;
        _1291 = 0.0;
        _1292 = 0.0;
    }
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1317 = fma(_977, cbModelParam._m0[30u].z, fma(_973, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _969));
        float _1321 = fma(_977, cbModelParam._m0[31u].z, fma(_973, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _969));
        float _1325 = fma(_977, cbModelParam._m0[32u].z, fma(_973, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _969));
        float _1348 = _969 + _759;
        float _1349 = _973 + _760;
        float _1350 = _977 + _761;
        float _1360 = fma(_1350, cbModelParam._m0[30u].z, fma(_1349, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1348)) - _1317;
        float _1361 = fma(_1350, cbModelParam._m0[31u].z, fma(_1349, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1348)) - _1321;
        float _1362 = fma(_1350, cbModelParam._m0[32u].z, fma(_1349, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1348)) - _1325;
        float _1366 = inversesqrt(dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362)));
        float _1379 = ((_1366 * _1360) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1317 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1366 * _1361) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1321 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1366 * _1362) / cbModelParam._m0[35u].z) + ((((((_1325 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        float _1416 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1383.x + (-0.5));
        float _1418 = _1416 * (_1383.y + (-0.5));
        float _1419 = _1416 * (_1383.z + (-0.5));
        float _1426 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1390.x + (-0.5));
        float _1428 = _1426 * (_1390.y + (-0.5));
        float _1429 = _1426 * (_1390.z + (-0.5));
        float _1436 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1397.x + (-0.5));
        float _1438 = _1436 * (_1397.y + (-0.5));
        float _1439 = _1436 * (_1397.z + (-0.5));
        float _1446 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1404.x + (-0.5));
        float _1448 = _1446 * (_1404.y + (-0.5));
        float _1449 = _1446 * (_1404.z + (-0.5));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = _1417 * 0.5;
        float _1454 = _1427 * 0.5;
        float _1455 = _1437 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_759, _760, _761), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _3970 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1480 + 1.0))) + _1485) * _1450;
        float _1495 = _1418 * 0.5;
        float _1496 = _1428 * 0.5;
        float _1497 = _1438 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_759, _760, _761), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4003 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1522 + 1.0))) + _1527) * _1451;
        float _1537 = _1419 * 0.5;
        float _1538 = _1429 * 0.5;
        float _1539 = _1439 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_759, _760, _761), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4036 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1564 + 1.0))) + _1569) * _1452;
        _1586 = _1419;
        _1587 = _1418;
        _1588 = _1417;
        _1589 = _1429;
        _1590 = _1428;
        _1591 = _1427;
        _1592 = _1439;
        _1593 = _1438;
        _1594 = _1437;
        _1595 = _1452;
        _1596 = _1451;
        _1597 = _1450;
        _1598 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
        _1599 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
    }
    else
    {
        _1586 = _1278;
        _1587 = _1278;
        _1588 = _1278;
        _1589 = _1278;
        _1590 = _1278;
        _1591 = _1278;
        _1592 = _1278;
        _1593 = _1278;
        _1594 = _1278;
        _1595 = _1278;
        _1596 = _1278;
        _1597 = _1278;
        _1598 = 0.0;
        _1599 = 0.0;
        _1600 = 0.0;
    }
    float _1610 = (cbModelParam._m0[1u].x * (_1598 - _1290)) + _1290;
    float _1611 = (cbModelParam._m0[1u].x * (_1599 - _1291)) + _1291;
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1292)) + _1292;
    float _1633 = fma(_1612, cbSceneParam._m0[89u].z, fma(_1611, cbSceneParam._m0[89u].y, _1610 * cbSceneParam._m0[89u].x));
    float _1636 = fma(_1612, cbSceneParam._m0[90u].z, fma(_1611, cbSceneParam._m0[90u].y, _1610 * cbSceneParam._m0[90u].x));
    float _1639 = fma(_1612, cbSceneParam._m0[91u].z, fma(_1611, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1610));
    float _1654 = _917 * 0.5;
    float _1655 = _918 * 0.5;
    float _1656 = _919 * 0.5;
    float _1657 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1660 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1587, _1590, _1593, _1596));
    float _1663 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1586, _1589, _1592, _1595));
    float _1697;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1670 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1277, _1281, _1284, _1287));
        float _1674 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1279, _1282, _1285, _1288));
        float _1678 = dot(vec4(_1654, _1655, _1656, 1.0), vec4(_1280, _1283, _1286, _1289));
        float _1685 = dot(vec4(cbModelParam._m0[39u]), vec4(_1654, _1655, _1656, 1.0));
        _1697 = dot(vec3(isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1685) ? 0.0 : (isnan(0.0) ? _1685 : max(0.0, _1685))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1697 = 1.0;
    }
    float _1708;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1699 = dot(vec4(cbModelParam._m0[40u]), vec4(_1654, _1655, _1656, 1.0));
        _1708 = dot(vec3(isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1699) ? 0.0 : (isnan(0.0) ? _1699 : max(0.0, _1699))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1708 = 1.0;
    }
    float _1712 = (_1708 * cbModelParam._m0[1u].x) + (_1697 * (1.0 - cbModelParam._m0[1u].x));
    float _1722 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _762);
    float _1723 = isnan(_1722) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1722 : min(cbModelParam._m0[25u].z, _1722));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1772 = fma(_977, cbModelParam._m0[13u].z, fma(_973, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _969)) + cbModelParam._m0[13u].w;
        float _1776 = fma(_977, cbModelParam._m0[14u].z, fma(_973, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _969)) + cbModelParam._m0[14u].w;
        float _1780 = fma(_977, cbModelParam._m0[15u].z, fma(_973, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _969)) + cbModelParam._m0[15u].w;
        float _1783 = fma(_919, cbModelParam._m0[13u].z, fma(_918, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _917));
        float _1786 = fma(_919, cbModelParam._m0[14u].z, fma(_918, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _917));
        float _1789 = fma(_919, cbModelParam._m0[15u].z, fma(_918, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _917));
        float _1817;
        if (_1783 > 0.0)
        {
            _1817 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1817 = frontier_phi_14_12_ladder;
        }
        float _2039;
        if (_1786 > 0.0)
        {
            _2039 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2039 = frontier_phi_23_19_ladder;
        }
        float _2285;
        if (_1789 > 0.0)
        {
            _2285 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2285 = frontier_phi_35_30_ladder;
        }
        float _2287 = isnan(_2039) ? _1817 : (isnan(_1817) ? _2039 : min(_1817, _2039));
        float _2288 = isnan(_2285) ? _2287 : (isnan(_2287) ? _2285 : min(_2287, _2285));
        float _2292 = (_2288 * _1783) + _1772;
        float _2293 = (_2288 * _1786) + _1776;
        float _2294 = (_2288 * _1789) + _1780;
        float _2295 = _2288 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2295;
        float _2299 = _2295 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 > _2299) || ((_2293 < _2297) || ((_2292 < _2297) || (_2292 > _2299))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2418 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2294, cbModelParam._m0[9u].z, fma(_2293, cbModelParam._m0[9u].y, _2292 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2294, cbModelParam._m0[10u].z, fma(_2293, cbModelParam._m0[10u].y, _2292 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2294, cbModelParam._m0[11u].z, fma(_2293, cbModelParam._m0[11u].y, _2292 * cbModelParam._m0[11u].x))), _1723);
            frontier_phi_13_35_ladder = _2418.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2418.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2418.x * cbModelParam._m0[1u].y;
        }
        _1805 = frontier_phi_13_35_ladder_2;
        _1807 = frontier_phi_13_35_ladder_1;
        _1809 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_917, _918, _919), _1723);
        _1805 = _1793.x * cbModelParam._m0[1u].y;
        _1807 = _1793.y * cbModelParam._m0[1u].y;
        _1809 = _1793.z * cbModelParam._m0[1u].y;
    }
    float _1813 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _762);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1813 : min(cbModelParam._m0[25u].w, _1813));
    float _1904;
    float _1906;
    float _1908;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1868 = fma(_977, cbModelParam._m0[21u].z, fma(_973, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _969)) + cbModelParam._m0[21u].w;
        float _1872 = fma(_977, cbModelParam._m0[22u].z, fma(_973, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _969)) + cbModelParam._m0[22u].w;
        float _1876 = fma(_977, cbModelParam._m0[23u].z, fma(_973, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _969)) + cbModelParam._m0[23u].w;
        float _1879 = fma(_919, cbModelParam._m0[21u].z, fma(_918, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _917));
        float _1882 = fma(_919, cbModelParam._m0[22u].z, fma(_918, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _917));
        float _1885 = fma(_919, cbModelParam._m0[23u].z, fma(_918, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _917));
        float _2044;
        if (_1879 > 0.0)
        {
            _2044 = abs((1.0 - _1868) / _1879);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1868 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2044 = frontier_phi_25_21_ladder;
        }
        float _2312;
        if (_1882 > 0.0)
        {
            _2312 = abs((1.0 - _1872) / _1882);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1872 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2312 = frontier_phi_37_32_ladder;
        }
        float _2517;
        if (_1885 > 0.0)
        {
            _2517 = abs((1.0 - _1876) / _1885);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1876 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2517 = frontier_phi_46_43_ladder;
        }
        float _2519 = isnan(_2312) ? _2044 : (isnan(_2044) ? _2312 : min(_2044, _2312));
        float _2520 = isnan(_2517) ? _2519 : (isnan(_2519) ? _2517 : min(_2519, _2517));
        float _2524 = (_2520 * _1879) + _1868;
        float _2525 = (_2520 * _1882) + _1872;
        float _2526 = (_2520 * _1885) + _1876;
        float _2527 = _2520 * 9.9999997473787516355514526367188e-05;
        float _2528 = (-1.0) - _2527;
        float _2530 = _2527 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2526 > _2530) || ((_2526 < _2528) || ((_2525 > _2530) || ((_2525 < _2528) || ((_2524 < _2528) || (_2524 > _2530))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2725 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2526, cbModelParam._m0[17u].z, fma(_2525, cbModelParam._m0[17u].y, _2524 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2526, cbModelParam._m0[18u].z, fma(_2525, cbModelParam._m0[18u].y, _2524 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2526, cbModelParam._m0[19u].z, fma(_2525, cbModelParam._m0[19u].y, _2524 * cbModelParam._m0[19u].x))), _1814);
            frontier_phi_22_46_ladder = _2725.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2725.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2725.x * cbModelParam._m0[1u].z;
        }
        _1904 = frontier_phi_22_46_ladder_2;
        _1906 = frontier_phi_22_46_ladder_1;
        _1908 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1888 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_917, _918, _919), _1814);
        _1904 = _1888.x * cbModelParam._m0[1u].z;
        _1906 = _1888.y * cbModelParam._m0[1u].z;
        _1908 = _1888.z * cbModelParam._m0[1u].z;
    }
    float _1920 = ((((1.0 - _937) * ((_925 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_937 * _925)) * _909;
    float _1921 = _1920 * ((cbModelParam._m0[1u].w * (_1904 - _1805)) + _1805);
    float _1922 = _1920 * ((cbModelParam._m0[1u].w * (_1906 - _1807)) + _1807);
    float _1923 = _1920 * ((cbModelParam._m0[1u].w * (_1908 - _1809)) + _1809);
    float _1926 = fma(_1923, cbSceneParam._m0[89u].z, fma(_1922, cbSceneParam._m0[89u].y, _1921 * cbSceneParam._m0[89u].x));
    float _1929 = fma(_1923, cbSceneParam._m0[90u].z, fma(_1922, cbSceneParam._m0[90u].y, _1921 * cbSceneParam._m0[90u].x));
    float _1932 = fma(_1923, cbSceneParam._m0[91u].z, fma(_1922, cbSceneParam._m0[91u].y, _1921 * cbSceneParam._m0[91u].x));
    vec4 _1940 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_846, _847));
    float _1942 = _1940.w;
    float _1954 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1942);
    float _1955 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1942);
    float _1956 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1942);
    uvec4 _1960 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _1962 = _1960.x * 14u;
    uint _1963 = _1962 + 13u;
    float _1970 = _909 + (-1.0);
    float _1975 = (cbLight._m0[_1963].x * _1970) + 1.0;
    float _1976 = (cbLight._m0[_1963].y * _1970) + 1.0;
    float _1977 = (cbLight._m0[_1963].z * _1970) + 1.0;
    float _1978 = (cbLight._m0[_1963].w * _1970) + 1.0;
    uint _1979 = _1962 + 5u;
    float _1985 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _1989 = _1962 + 4u;
    float _1998 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
    uint _2002 = _1962 | 1u;
    float _2013 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_759, _760, _761));
    float _2016 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_759, _760, _761));
    float _4172 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _4183 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2021 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * 0.3183098733425140380859375;
    float _2023 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * 0.3183098733425140380859375;
    float _2030 = ((cbLight._m0[_1979].x * _1985) * _2023) + (((cbLight._m0[_1989].x * _1954) * _1998) * _2021);
    float _2031 = ((_1985 * cbLight._m0[_1979].y) * _2023) + (((cbLight._m0[_1989].y * _1955) * _1998) * _2021);
    float _2032 = ((_1985 * cbLight._m0[_1979].z) * _2023) + (((cbLight._m0[_1989].z * _1956) * _1998) * _2021);
    uvec4 _2036 = floatBitsToUint(cbLight._m0[_1962 + 12u]);
    bool _2038 = _2036.x == 0u;
    float _2049;
    float _2051;
    float _2053;
    if (_2038)
    {
        _2049 = _2030;
        _2051 = _2031;
        _2053 = _2032;
    }
    else
    {
        uint _2057 = _1962 + 6u;
        float _2073 = (dot(vec3(cbLight._m0[_1962 + 2u].xyz), vec3(_759, _760, _761)) * 0.5) + 0.5;
        float _2074 = _2073 * _2073;
        float _4194 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2075 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2076 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2049 = (((cbLight._m0[_2057].x * 0.3183098733425140380859375) * _2075) * _2076) + _2030;
        _2051 = (((cbLight._m0[_2057].y * 0.3183098733425140380859375) * _2075) * _2076) + _2031;
        _2053 = (((cbLight._m0[_2057].z * 0.3183098733425140380859375) * _2075) * _2076) + _2032;
    }
    bool _2056 = _2036.y == 0u;
    float _2094;
    float _2096;
    float _2098;
    if (_2056)
    {
        _2094 = _2049;
        _2096 = _2051;
        _2098 = _2053;
    }
    else
    {
        uint _2256 = _1962 + 7u;
        float _2272 = (dot(vec3(cbLight._m0[_1962 + 3u].xyz), vec3(_759, _760, _761)) * 0.5) + 0.5;
        float _2273 = _2272 * _2272;
        float _4210 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2274 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2275 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2094 = (((cbLight._m0[_2256].x * 0.3183098733425140380859375) * _2274) * _2275) + _2049;
        _2096 = (((cbLight._m0[_2256].y * 0.3183098733425140380859375) * _2274) * _2275) + _2051;
        _2098 = (((cbLight._m0[_2256].z * 0.3183098733425140380859375) * _2274) * _2275) + _2053;
    }
    uint _2101 = _1962 + 8u;
    float _2114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _762) * 0.949999988079071044921875);
    float _2115 = _2114 * _2114;
    float _2116 = cbLight._m0[_1962].x + _838;
    float _2117 = cbLight._m0[_1962].y + _839;
    float _2118 = cbLight._m0[_1962].z + _840;
    float _2122 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
    float _2123 = _2122 * _2116;
    float _2124 = _2122 * _2117;
    float _2125 = _2122 * _2118;
    float _2126 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_1962].xyz));
    float _4226 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2129 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _4237 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _2130 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _2131 = dot(vec3(_759, _760, _761), vec3(_2123, _2124, _2125));
    float _4248 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _2135 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_2123, _2124, _2125));
    float _4259 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2139 = _2115 * _2115;
    float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
    float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2155 = 1.0 - _2115;
    float _2166 = (0.5 / (((_2130 * ((_2129 * _2155) + _2115)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2155) + _2115) * _2129))) * _2129;
    float _4270 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2168 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
    uint _2182 = _1962 + 9u;
    float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _762) * 0.949999988079071044921875);
    float _2194 = _2193 * _2193;
    float _2195 = cbLight._m0[_2002].x + _838;
    float _2196 = cbLight._m0[_2002].y + _839;
    float _2197 = cbLight._m0[_2002].z + _840;
    float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
    float _2202 = _2201 * _2195;
    float _2203 = _2201 * _2196;
    float _2204 = _2201 * _2197;
    float _2205 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2002].xyz));
    float _4281 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _2209 = dot(vec3(_759, _760, _761), vec3(_2202, _2203, _2204));
    float _4292 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _2213 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2202, _2203, _2204));
    float _4303 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2217 = _2194 * _2194;
    float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
    float _2230 = (exp2(log2(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2231 = 1.0 - _2194;
    float _2241 = (0.5 / (((_2130 * ((_2208 * _2231) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2231) + _2194) * _2208))) * _2208;
    float _4314 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2243 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
    float _2253 = (((_2230 * cbLight._m0[_2182].x) * _2243) * _1985) + ((((cbLight._m0[_2101].x * _1954) * _2154) * _2168) * _1998);
    float _2254 = (((_2230 * cbLight._m0[_2182].y) * _2243) * _1985) + ((((cbLight._m0[_2101].y * _1955) * _2154) * _2168) * _1998);
    float _2255 = (((_2230 * cbLight._m0[_2182].z) * _2243) * _1985) + ((((cbLight._m0[_2101].z * _1956) * _2154) * _2168) * _1998);
    float _2317;
    float _2319;
    float _2321;
    if (_2038)
    {
        _2317 = _2253;
        _2319 = _2254;
        _2321 = _2255;
    }
    else
    {
        uint _2323 = _1962 + 2u;
        uint _2327 = _1962 + 10u;
        float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _762) * 0.949999988079071044921875);
        float _2342 = _2341 * _2341;
        float _2343 = cbLight._m0[_2323].x + _838;
        float _2344 = cbLight._m0[_2323].y + _839;
        float _2345 = cbLight._m0[_2323].z + _840;
        float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
        float _2350 = _2349 * _2343;
        float _2351 = _2349 * _2344;
        float _2352 = _2349 * _2345;
        float _2353 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2323].xyz));
        float _4325 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2357 = dot(vec3(_759, _760, _761), vec3(_2350, _2351, _2352));
        float _4336 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2361 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2350, _2351, _2352));
        float _4347 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2365 = _2342 * _2342;
        float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
        float _2378 = (exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2379 = 1.0 - _2342;
        float _2389 = (0.5 / (((_2130 * ((_2356 * _2379) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2379) + _2342) * _2356))) * _2356;
        float _4358 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2391 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
        float _2392 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2317 = (((_2378 * cbLight._m0[_2327].x) * _2391) * _2392) + _2253;
        _2319 = (((_2378 * cbLight._m0[_2327].y) * _2391) * _2392) + _2254;
        _2321 = (((_2378 * cbLight._m0[_2327].z) * _2391) * _2392) + _2255;
    }
    float _2427;
    float _2429;
    float _2431;
    if (_2056)
    {
        _2427 = _2317;
        _2429 = _2319;
        _2431 = _2321;
    }
    else
    {
        uint _2438 = _1962 + 3u;
        uint _2442 = _1962 + 11u;
        float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2438].w)) * _762) * 0.949999988079071044921875);
        float _2457 = _2456 * _2456;
        float _2458 = cbLight._m0[_2438].x + _838;
        float _2459 = cbLight._m0[_2438].y + _839;
        float _2460 = cbLight._m0[_2438].z + _840;
        float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
        float _2465 = _2464 * _2458;
        float _2466 = _2464 * _2459;
        float _2467 = _2464 * _2460;
        float _2468 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2438].xyz));
        float _4374 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2472 = dot(vec3(_759, _760, _761), vec3(_2465, _2466, _2467));
        float _4385 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2476 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_2465, _2466, _2467));
        float _4396 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2480 = _2457 * _2457;
        float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
        float _2493 = (exp2(log2(1.0 - (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2494 = 1.0 - _2457;
        float _2504 = (0.5 / (((_2130 * ((_2471 * _2494) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2494) + _2457) * _2471))) * _2471;
        float _4407 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2506 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
        float _2507 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2427 = (((_2493 * cbLight._m0[_2442].x) * _2506) * _2507) + _2317;
        _2429 = (((_2493 * cbLight._m0[_2442].y) * _2506) * _2507) + _2319;
        _2431 = (((_2493 * cbLight._m0[_2442].z) * _2506) * _2507) + _2321;
    }
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    float _2652;
    if (_1960.y == 0u)
    {
        float _2582 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2583 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2582;
        float _2584 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2582;
        float _2585 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2582;
        uvec4 _2597 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2598 = _2597.x;
        uint _2609 = uint((float(_2597.y) * floor(float(uint(cbSceneParam._m0[85u].y * _847) / _2598))) + floor(float(uint(cbSceneParam._m0[85u].x * _846) / _2598)));
        float _2619 = (log2(_2585 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2620 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        uint _2623 = uint(isnan(14.0) ? _2620 : (isnan(_2620) ? 14.0 : min(_2620, 14.0)));
        uvec4 _2628 = texelFetch(g_lightClusterGridBuffer, int(((_2623 << 2u) + (_2609 << 6u)) >> 2u));
        uint _2629 = _2628.x;
        uint _2630 = _2597.z;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        if (((((1u << ((_2630 >> 4u) & 15u)) + 4294967295u) & _2629) == 0u) || ((_2630 & 240u) == 0u))
        {
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
        }
        else
        {
            float _2731;
            float _2733;
            float _2735;
            float _2737;
            float _2739;
            float _2741;
            float _2875 = 0.0;
            float _2876 = 0.0;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            float _2880 = 0.0;
            uint _2881 = 0u;
            uint _2890;
            bool _2891;
            for (;;)
            {
                _2890 = texelFetch(g_lightClassification, int((((_2623 << 5u) + (_2609 << 9u)) + (_2881 << 2u)) >> 2u)).x;
                _2891 = _2890 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2891)
                {
                    frontier_phi_61_pred = _2875;
                    frontier_phi_61_pred_1 = _2880;
                    frontier_phi_61_pred_2 = _2879;
                    frontier_phi_61_pred_3 = _2878;
                    frontier_phi_61_pred_4 = _2877;
                    frontier_phi_61_pred_5 = _2876;
                }
                else
                {
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    uint _3005;
                    _2999 = _2875;
                    _3000 = _2876;
                    _3001 = _2877;
                    _3002 = _2878;
                    _3003 = _2879;
                    _3004 = _2880;
                    _3005 = _2890;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    for (;;)
                    {
                        uint _3009 = uint(findLSB(_3005)) + (_2881 << 5u);
                        uint _3006 = (_3005 + 4294967295u) & _3005;
                        uint _3011 = _3009 * 48u;
                        vec4 _3025 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3011)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 3u)).x));
                        uint _3031 = (_3009 * 48u) + 4u;
                        vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3031)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 3u)).x));
                        uint _3050 = (_3009 * 48u) + 8u;
                        vec3 _3061 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3050)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 2u)).x));
                        float _3065 = _3025.x - _2583;
                        float _3066 = _3025.y - _2584;
                        float _3067 = _3025.z - _2585;
                        float _3068 = dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067));
                        float _3071 = inversesqrt(_3068);
                        float _3072 = _3071 * _3065;
                        float _3073 = _3071 * _3066;
                        float _3074 = _3071 * _3067;
                        float _3075 = dot(vec3(_865, _868, _871), vec3(_3072, _3073, _3074));
                        float _3080 = 1.0 - (_3068 * _3025.w);
                        float _4433 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3081 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                        float _3082 = sqrt(_3068) * _3044.w;
                        float _3085 = 1.39999997615814208984375 / (_3082 + 1.39999997615814208984375);
                        float _3086 = _3085 * _3085;
                        float _3089 = ((1.0 - _3086) * _3075) + _3086;
                        float _3092 = _3082 * _3082;
                        float _3096 = ((isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0))) * _3081) / ((_3092 * 0.699999988079071044921875) + 1.0);
                        float _3100 = (-0.0) - _2583;
                        float _3101 = (-0.0) - _2584;
                        float _3102 = (-0.0) - _2585;
                        float _3106 = inversesqrt(dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102)));
                        float _3107 = _3106 * _3100;
                        float _3108 = _3106 * _3101;
                        float _3109 = _3106 * _3102;
                        float _3117 = exp2(log2(1.0 / ((_3092 * 3.5) + 5.0)) * 0.25);
                        float _3118 = 1.0 - _925;
                        float _3125 = sqrt(1.0 - ((1.0 - (_3118 * _3118)) * (1.0 - (_3117 * _3117))));
                        float _3126 = _3125 * _3125;
                        float _3127 = _3126 * _3126;
                        float _3128 = _3107 + _3072;
                        float _3129 = _3108 + _3073;
                        float _3130 = _3109 + _3074;
                        float _3134 = inversesqrt(dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130)));
                        float _3138 = dot(vec3(_865, _868, _871), vec3(_3107, _3108, _3109));
                        float _4449 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                        float _3141 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3142 = dot(vec3(_865, _868, _871), vec3(_3134 * _3128, _3134 * _3129, _3134 * _3130));
                        float _4460 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                        float _3145 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                        float _3149 = ((_3145 * _3145) * (_3127 + (-1.0))) + 1.0;
                        float _3150 = _3085 * _3126;
                        float _3151 = _3150 * _3150;
                        float _3154 = ((1.0 - _3151) * _3075) + _3151;
                        float _4471 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3155 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                        float _3156 = 1.0 - _3126;
                        float _3166 = (0.5 / (((_3155 * ((_3141 * _3156) + _3126)) + 9.9999999392252902907785028219223e-09) + (((_3155 * _3156) + _3126) * _3141))) * _3155;
                        float _4482 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3176 = (((_3127 * 3.1415927410125732421875) * (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) / ((_3149 * _3149) * ((_3092 * 2.1991131305694580078125) + 3.141590118408203125))) * _3081;
                        _2934 = (_3096 * _3044.x) + _3002;
                        _2935 = (_3096 * _3044.y) + _3003;
                        _2936 = (_3096 * _3044.z) + _3004;
                        _2931 = (_3176 * _3061.x) + _2999;
                        _2932 = (_3176 * _3061.y) + _3000;
                        _2933 = (_3176 * _3061.z) + _3001;
                        if (_3006 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2999 = _2931;
                            _3000 = _2932;
                            _3001 = _2933;
                            _3002 = _2934;
                            _3003 = _2935;
                            _3004 = _2936;
                            _3005 = _3006;
                        }
                    }
                    frontier_phi_61_pred = _2931;
                    frontier_phi_61_pred_1 = _2936;
                    frontier_phi_61_pred_2 = _2935;
                    frontier_phi_61_pred_3 = _2934;
                    frontier_phi_61_pred_4 = _2933;
                    frontier_phi_61_pred_5 = _2932;
                }
                _2731 = frontier_phi_61_pred;
                _2741 = frontier_phi_61_pred_1;
                _2739 = frontier_phi_61_pred_2;
                _2737 = frontier_phi_61_pred_3;
                _2735 = frontier_phi_61_pred_4;
                _2733 = frontier_phi_61_pred_5;
                uint _2882 = _2881 + 1u;
                if (_2882 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2875 = _2731;
                    _2876 = _2733;
                    _2877 = _2735;
                    _2878 = _2737;
                    _2879 = _2739;
                    _2880 = _2741;
                    _2881 = _2882;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
        }
        uvec4 _2744 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2745 = _2744.z;
        uint _2747 = (_2745 >> 8u) & 15u;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        if (((4294967295u << _2747) & _2629) == 0u)
        {
            _2843 = _2730;
            _2845 = _2732;
            _2847 = _2734;
            _2849 = _2736;
            _2851 = _2738;
            _2853 = _2740;
        }
        else
        {
            float _2868 = inversesqrt(dot(vec3(_2583, _2584, _2585), vec3(_2583, _2584, _2585)));
            float _2869 = _2868 * _2583;
            float _2870 = _2868 * _2584;
            float _2871 = _2868 * _2585;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2747 < ((_2745 >> 12u) & 15u))
            {
                float _2844;
                float _2846;
                float _2848;
                float _2850;
                float _2852;
                float _2854;
                float _2982 = _2730;
                float _2983 = _2732;
                float _2984 = _2734;
                float _2985 = _2736;
                float _2986 = _2738;
                float _2987 = _2740;
                uint _2988 = _2747;
                uint _2997;
                bool _2998;
                for (;;)
                {
                    _2997 = texelFetch(g_lightClassification, int((((_2623 << 5u) + (_2609 << 9u)) + (_2988 << 2u)) >> 2u)).x;
                    _2998 = _2997 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2998)
                    {
                        frontier_phi_67_pred = _2985;
                        frontier_phi_67_pred_1 = _2986;
                        frontier_phi_67_pred_2 = _2987;
                        frontier_phi_67_pred_3 = _2984;
                        frontier_phi_67_pred_4 = _2983;
                        frontier_phi_67_pred_5 = _2982;
                    }
                    else
                    {
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3194 = _2982;
                        float _3195 = _2983;
                        float _3196 = _2984;
                        float _3197 = _2985;
                        float _3198 = _2986;
                        float _3199 = _2987;
                        uint _3200 = _2997;
                        uint _3201;
                        vec4 _3226;
                        float _3227;
                        vec4 _3242;
                        vec3 _3254;
                        vec4 _3269;
                        vec4 _3284;
                        float _3330;
                        bool _3331;
                        for (;;)
                        {
                            uint _3211 = ((_2988 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3200));
                            _3201 = (_3200 + 4294967295u) & _3200;
                            uint _3213 = _3211 * 40u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            _3227 = _3226.w;
                            uint _3229 = (_3211 * 40u) + 4u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3244 = (_3211 * 40u) + 8u;
                            _3254 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x));
                            uint _3256 = (_3211 * 40u) + 16u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            uint _3271 = (_3211 * 40u) + 20u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3286 = (_3211 * 40u) + 24u;
                            vec4 _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            uint _3305 = (_3211 * 40u) + 28u;
                            vec4 _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            _3330 = fma(_2585, _3318.z, fma(_2584, _3318.y, _3318.x * _2583)) + _3318.w;
                            _3331 = !((fma(_2585, _3299.z, fma(_2584, _3299.y, _3299.x * _2583)) + _3299.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3331)
                            {
                                float _3358 = _3226.x - _2583;
                                float _3359 = _3226.y - _2584;
                                float _3360 = _3226.z - _2585;
                                float _3361 = dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360));
                                float _3364 = inversesqrt(_3361);
                                float _3365 = _3364 * _3358;
                                float _3366 = _3364 * _3359;
                                float _3367 = _3364 * _3360;
                                float _3371 = 1.0 - (_3361 / (_3227 * _3227));
                                float _4493 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3372 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3376 = sqrt(_3361) * _3242.w;
                                float _3378 = 1.39999997615814208984375 / (_3376 + 1.39999997615814208984375);
                                float _3379 = _3378 * _3378;
                                float _3382 = ((1.0 - _3379) * dot(vec3(_3365, _3366, _3367), vec3(_865, _868, _871))) + _3379;
                                float _3385 = _3376 * _3376;
                                float _3389 = (fma(_2585, _3269.z, fma(_2584, _3269.y, _3269.x * _2583)) + _3269.w) / _3330;
                                float _3390 = (fma(_2585, _3284.z, fma(_2584, _3284.y, _3284.x * _2583)) + _3284.w) / _3330;
                                float _3394 = 1.0 - dot(vec2(_3389, _3390), vec2(_3389, _3390));
                                float _4509 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3395 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3396 = _3395 * (((isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0))) * _3372) / ((_3385 * 0.699999988079071044921875) + 1.0));
                                float _3408 = exp2(log2(1.0 / ((_3385 * 3.5) + 5.0)) * 0.25);
                                float _3409 = 1.0 - _925;
                                float _3416 = sqrt(1.0 - ((1.0 - (_3409 * _3409)) * (1.0 - (_3408 * _3408))));
                                float _3417 = _3416 * _3416;
                                float _3418 = _3417 * _3417;
                                float _3419 = _3365 - _2869;
                                float _3420 = _3366 - _2870;
                                float _3421 = _3367 - _2871;
                                float _3425 = inversesqrt(dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421)));
                                float _3429 = dot(vec3(_865, _868, _871), vec3((-0.0) - _2869, (-0.0) - _2870, (-0.0) - _2871));
                                float _4520 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3432 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3433 = dot(vec3(_865, _868, _871), vec3(_3425 * _3419, _3425 * _3420, _3425 * _3421));
                                float _4531 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3436 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                                float _3440 = ((_3436 * _3436) * (_3418 + (-1.0))) + 1.0;
                                float _3441 = _3378 * _3417;
                                float _3442 = _3441 * _3441;
                                float _3448 = ((1.0 - _3442) * dot(vec3(_865, _868, _871), vec3(_3365, _3366, _3367))) + _3442;
                                float _4542 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3449 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3450 = 1.0 - _3417;
                                float _3460 = (0.5 / (((_3449 * ((_3432 * _3450) + _3417)) + 9.9999999392252902907785028219223e-09) + (((_3449 * _3450) + _3417) * _3432))) * _3449;
                                float _4553 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3470 = (_3395 * _3372) * (((_3418 * 3.1415927410125732421875) * (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) / ((_3440 * _3440) * ((_3385 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3470 * _3254.x;
                                frontier_phi_73_pred_1 = _3470 * _3254.y;
                                frontier_phi_73_pred_2 = _3396 * _3242.z;
                                frontier_phi_73_pred_3 = _3396 * _3242.y;
                                frontier_phi_73_pred_4 = _3396 * _3242.x;
                                frontier_phi_73_pred_5 = _3470 * _3254.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3474 = frontier_phi_73_pred;
                            _3475 = frontier_phi_73_pred_1;
                            _3479 = frontier_phi_73_pred_2;
                            _3478 = frontier_phi_73_pred_3;
                            _3477 = frontier_phi_73_pred_4;
                            _3476 = frontier_phi_73_pred_5;
                            _3184 = _3477 + _3197;
                            _3185 = _3478 + _3198;
                            _3186 = _3479 + _3199;
                            _3181 = _3474 + _3194;
                            _3182 = _3475 + _3195;
                            _3183 = _3476 + _3196;
                            if (_3201 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3201;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3184;
                        frontier_phi_67_pred_1 = _3185;
                        frontier_phi_67_pred_2 = _3186;
                        frontier_phi_67_pred_3 = _3183;
                        frontier_phi_67_pred_4 = _3182;
                        frontier_phi_67_pred_5 = _3181;
                    }
                    _2850 = frontier_phi_67_pred;
                    _2852 = frontier_phi_67_pred_1;
                    _2854 = frontier_phi_67_pred_2;
                    _2848 = frontier_phi_67_pred_3;
                    _2846 = frontier_phi_67_pred_4;
                    _2844 = frontier_phi_67_pred_5;
                    uint _2989 = _2988 + 1u;
                    if (_2989 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2982 = _2844;
                        _2983 = _2846;
                        _2984 = _2848;
                        _2985 = _2850;
                        _2986 = _2852;
                        _2987 = _2854;
                        _2988 = _2989;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2852;
                frontier_phi_55_56_ladder_1 = _2854;
                frontier_phi_55_56_ladder_2 = _2850;
                frontier_phi_55_56_ladder_3 = _2848;
                frontier_phi_55_56_ladder_4 = _2846;
                frontier_phi_55_56_ladder_5 = _2844;
            }
            else
            {
                frontier_phi_55_56_ladder = _2738;
                frontier_phi_55_56_ladder_1 = _2740;
                frontier_phi_55_56_ladder_2 = _2736;
                frontier_phi_55_56_ladder_3 = _2734;
                frontier_phi_55_56_ladder_4 = _2732;
                frontier_phi_55_56_ladder_5 = _2730;
            }
            _2843 = frontier_phi_55_56_ladder_5;
            _2845 = frontier_phi_55_56_ladder_4;
            _2847 = frontier_phi_55_56_ladder_3;
            _2849 = frontier_phi_55_56_ladder_2;
            _2851 = frontier_phi_55_56_ladder;
            _2853 = frontier_phi_55_56_ladder_1;
        }
        float _2858 = isnan(1.0) ? _909 : (isnan(_909) ? 1.0 : min(_909, 1.0));
        _2642 = (_2858 * _2849) + _2094;
        _2644 = (_2858 * _2851) + _2096;
        _2646 = (_2858 * _2853) + _2098;
        _2648 = ((_2843 * 0.039999999105930328369140625) * _2858) + _2427;
        _2650 = ((_2845 * 0.039999999105930328369140625) * _2858) + _2429;
        _2652 = ((_2847 * 0.039999999105930328369140625) * _2858) + _2431;
    }
    else
    {
        _2642 = _2094;
        _2644 = _2096;
        _2646 = _2098;
        _2648 = _2427;
        _2650 = _2429;
        _2652 = _2431;
    }
    float _4569 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _4580 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _4591 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    uint _2672 = _271 + 6u;
    float _2680 = _846 / cbSceneParam._m0[86u].x;
    float _2681 = _847 / cbSceneParam._m0[86u].y;
    vec4 _2695 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2680, _2681, (log2((isnan(cbSceneParam._m0[77u].w) ? _780 : (isnan(_780) ? cbSceneParam._m0[77u].w : min(_780, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2697 = _2695.x;
    float _2698 = _2695.y;
    float _2699 = _2695.z;
    float _2700 = _2695.w;
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    if (_780 > cbSceneParam._m0[78u].w)
    {
        float _2755 = isnan(_780) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _780 : min(cbSceneParam._m0[80u].w, _780));
        float _2756 = _2755 / _780;
        float _2767 = _2756 * _831;
        float _2768 = _832 * _2756;
        float _2769 = (-0.0) - _2768;
        float _2771 = _2756 * _833;
        float _2773 = (cbSceneParam._m0[77u].w * _2769) / _2755;
        float _2774 = _2773 + cbSceneParam._m0[79u].w;
        float _2775 = cbSceneParam._m0[79u].w - _2768;
        float _2781 = sqrt(((_2767 * _2767) + (_2768 * _2768)) + (_2771 * _2771));
        float _2784 = (1.0 - (cbSceneParam._m0[77u].w / _2755)) * _2781;
        float _2789 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2791 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2944;
        if (abs((_2769 - _2773) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2944 = ((((_2774 > 0.0) ? exp2(_2789 * _2774) : (2.0 - exp2(_2791 * _2774))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2784;
        }
        else
        {
            float _2904 = 1.0 / cbSceneParam._m0[80u].x;
            float _2905 = isnan(_2775) ? _2774 : (isnan(_2774) ? _2775 : max(_2774, _2775));
            float _2906 = isnan(_2775) ? _2774 : (isnan(_2774) ? _2775 : min(_2774, _2775));
            float _2915 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : min(_2905, 0.0));
            float _2916 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : min(_2906, 0.0));
            _2944 = ((abs(_2781 / _2769) * cbSceneParam._m0[80u].y) * ((((_2915 - _2916) * 2.0) - ((exp2(_2789 * (isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0)))) - exp2(_2789 * (isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0))))) * _2904)) - ((exp2(_2791 * _2915) - exp2(_2791 * _2916)) * _2904))) + (_2784 * cbSceneParam._m0[80u].z);
        }
        vec4 _2946 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2680, _2681, 1.0), 0.0);
        float _2955 = exp2((_2944 * (-1.44269502162933349609375)) * (1.0 - _2946.w));
        float _2956 = log2(_2955);
        float _2972 = log2(_2700);
        _2793 = (exp2(_2972 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].x)) * _2946.x) / cbSceneParam._m0[78u].x)) + _2697;
        _2795 = (exp2(_2972 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].y)) * _2946.y) / cbSceneParam._m0[78u].y)) + _2698;
        _2797 = (exp2(_2972 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].z)) * _2946.z) / cbSceneParam._m0[78u].z)) + _2699;
        _2799 = _2955 * _2700;
    }
    else
    {
        _2793 = _2697;
        _2795 = _2698;
        _2797 = _2699;
        _2799 = _2700;
    }
    float _2811 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2812 = _2811 == 3.0;
    float _2813 = log2(_2799);
    float _2820 = exp2(_2813 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2642 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _909))) + ((_2648 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1712)) * cbPerFrame._m0[3u].x));
    float _2821 = exp2(_2813 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2644 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _909))) + ((_2650 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1712)) * cbPerFrame._m0[3u].x));
    float _2822 = exp2(_2813 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2646 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _909))) + ((_2652 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1712)) * cbPerFrame._m0[3u].x));
    float _2831 = (_2811 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2831 * (_2812 ? _2820 : (_2820 + (cbSceneParam._m0[72u].w * _2793)));
    SV_Target.y = _2831 * (_2812 ? _2821 : (_2821 + (cbSceneParam._m0[72u].w * _2795)));
    SV_Target.z = _2831 * (_2812 ? _2822 : (_2822 + (cbSceneParam._m0[72u].w * _2797)));
    SV_Target.w = cbInstanceData._m0[_2672].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2672].w;
}


