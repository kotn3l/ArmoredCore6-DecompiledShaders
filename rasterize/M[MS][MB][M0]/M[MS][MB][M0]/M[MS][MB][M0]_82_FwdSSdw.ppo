#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1076;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _338 = _336.x;
    float _348 = dot(vec4(_338, _336.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _365 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_338 - _348) * cbMtdParam._m0[24u].x) + _348) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3407 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _373 = (_366 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _374 = (_366 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _375 = (_366 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _393 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _410 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _412 = _410.x;
    float _413 = _410.y;
    float _414 = _410.z;
    float _423 = ((_393.z - _414) * _366) + _414;
    float _426 = ((((_393.x - _412) * _366) + _412) * 2.0) + (-1.0);
    float _428 = ((((_393.y - _413) * _366) + _413) * 2.0) + (-1.0);
    float _429 = dot(vec2(_426, _428), vec2(_426, _428));
    float _3418 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _434 = sqrt(1.0 - (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))));
    vec4 _447 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _465 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _467 = _465.x;
    float _468 = 1.0 - _467;
    float _481 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_467 - _468) * cbMtdParam._m0[24u].z) + _468) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3429 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _489 = (_482 * (cbMtdParam._m0[17u].x - _373)) + _373;
    float _490 = (_482 * (cbMtdParam._m0[17u].y - _374)) + _374;
    float _491 = (_482 * (cbMtdParam._m0[17u].z - _375)) + _375;
    vec4 _504 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _511 = (_504.x * 2.0) + (-1.0);
    float _512 = (_504.y * 2.0) + (-1.0);
    float _513 = dot(vec2(_511, _512), vec2(_511, _512));
    float _3440 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _521 = (_482 * (_504.z - _423)) + _423;
    float _533 = (((_511 - _426) + (cbMtdParam._m0[21u].x * _426)) * _482) + _426;
    float _534 = (((_512 - _428) + (cbMtdParam._m0[21u].x * _428)) * _482) + _428;
    float _535 = (_482 * (sqrt(1.0 - (isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0)))) - _434)) + _434;
    float _540 = cbMtdParam._m0[22u].x + _447.w;
    float _543 = fma(_535, _217 * NORMAL.x, fma(_534, _224 * TANGENT.x, (_210 * _202) * _533));
    float _546 = fma(_535, _217 * NORMAL.y, fma(_534, _224 * TANGENT.y, (_210 * _203) * _533));
    float _549 = fma(_535, _217 * NORMAL.z, fma(_534, _224 * TANGENT.z, (_210 * _204) * _533));
    float _553 = inversesqrt(dot(vec3(_543, _546, _549), vec3(_543, _546, _549)));
    float _554 = _553 * _543;
    float _555 = _553 * _546;
    float _556 = _553 * _549;
    float _3451 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _557 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _3462 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3473 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3484 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3495 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _575 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _627 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _617);
    float _628 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _617);
    float _629 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _617);
    float _633 = inversesqrt(dot(vec3(_627, _628, _629), vec3(_627, _628, _629)));
    float _634 = _627 * _633;
    float _635 = _628 * _633;
    float _636 = _629 * _633;
    float _642 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _643 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _661 = fma(_556, cbSceneParam._m0[5u].z, fma(_555, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _554));
    float _664 = fma(_556, cbSceneParam._m0[6u].z, fma(_555, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _554));
    float _667 = fma(_556, cbSceneParam._m0[7u].z, fma(_555, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _554));
    uint _681 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _687 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) * cbInstanceData._m0[_681].x;
    float _688 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0)))) * cbInstanceData._m0[_681].y;
    float _689 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) * cbInstanceData._m0[_681].z;
    float _3506 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _3517 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _691 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    vec4 _701 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _642, cbSceneParam._m0[86u].y * _643));
    float _705 = ((isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * TEXCOORD_5.w) * _701.x;
    float _706 = dot(vec3(_554, _555, _556), vec3(_634, _635, _636));
    float _709 = _706 * 2.0;
    float _713 = (_709 * _554) - _634;
    float _714 = (_709 * _555) - _635;
    float _715 = (_709 * _556) - _636;
    float _719 = abs(dot(vec3(_634, _635, _636), vec3(_554, _555, _556)));
    float _3539 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _721 = sqrt(_557);
    float _734 = exp2((_721 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_721 * 3.0));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1075;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _800 = fma(_774, cbModelParam._m0[26u].z, fma(_770, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _766));
        float _804 = fma(_774, cbModelParam._m0[27u].z, fma(_770, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _766));
        float _808 = fma(_774, cbModelParam._m0[28u].z, fma(_770, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _766));
        float _833 = _766 + _554;
        float _834 = _770 + _555;
        float _835 = _774 + _556;
        float _845 = fma(_835, cbModelParam._m0[26u].z, fma(_834, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _833)) - _800;
        float _846 = fma(_835, cbModelParam._m0[27u].z, fma(_834, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _833)) - _804;
        float _847 = fma(_835, cbModelParam._m0[28u].z, fma(_834, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _833)) - _808;
        float _851 = inversesqrt(dot(vec3(_845, _846, _847), vec3(_845, _846, _847)));
        float _864 = ((_851 * _845) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_800 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _865 = ((_851 * _846) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_804 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _866 = ((_851 * _847) / cbModelParam._m0[34u].z) + ((((((_808 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        float _903 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_869.x + (-0.5));
        float _905 = _903 * (_869.y + (-0.5));
        float _906 = _903 * (_869.z + (-0.5));
        float _913 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_876.x + (-0.5));
        float _915 = _913 * (_876.y + (-0.5));
        float _916 = _913 * (_876.z + (-0.5));
        float _923 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_883.x + (-0.5));
        float _925 = _923 * (_883.y + (-0.5));
        float _926 = _923 * (_883.z + (-0.5));
        float _933 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_890.x + (-0.5));
        float _935 = _933 * (_890.y + (-0.5));
        float _936 = _933 * (_890.z + (-0.5));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = _904 * 0.5;
        float _941 = _914 * 0.5;
        float _942 = _924 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _957 = (dot(vec3(_554, _555, _556), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _967 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3587 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_969 + 1.0))) + _974) * _937;
        float _984 = _905 * 0.5;
        float _985 = _915 * 0.5;
        float _986 = _925 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_554, _555, _556), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3620 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_1011 + 1.0))) + _1016) * _938;
        float _1026 = _906 * 0.5;
        float _1027 = _916 * 0.5;
        float _1028 = _926 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_554, _555, _556), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3653 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_1053 + 1.0))) + _1058) * _939;
        _1075 = _906;
        _1077 = _905;
        _1078 = _904;
        _1079 = _916;
        _1080 = _915;
        _1081 = _914;
        _1082 = _926;
        _1083 = _925;
        _1084 = _924;
        _1085 = _939;
        _1086 = _938;
        _1087 = _937;
        _1088 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1089 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
    }
    else
    {
        _1075 = _1076;
        _1077 = _1076;
        _1078 = _1076;
        _1079 = _1076;
        _1080 = _1076;
        _1081 = _1076;
        _1082 = _1076;
        _1083 = _1076;
        _1084 = _1076;
        _1085 = _1076;
        _1086 = _1076;
        _1087 = _1076;
        _1088 = 0.0;
        _1089 = 0.0;
        _1090 = 0.0;
    }
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1115 = fma(_774, cbModelParam._m0[30u].z, fma(_770, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _766));
        float _1119 = fma(_774, cbModelParam._m0[31u].z, fma(_770, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _766));
        float _1123 = fma(_774, cbModelParam._m0[32u].z, fma(_770, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _766));
        float _1146 = _766 + _554;
        float _1147 = _770 + _555;
        float _1148 = _774 + _556;
        float _1158 = fma(_1148, cbModelParam._m0[30u].z, fma(_1147, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1146)) - _1115;
        float _1159 = fma(_1148, cbModelParam._m0[31u].z, fma(_1147, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1146)) - _1119;
        float _1160 = fma(_1148, cbModelParam._m0[32u].z, fma(_1147, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1146)) - _1123;
        float _1164 = inversesqrt(dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160)));
        float _1177 = ((_1164 * _1158) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1115 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1164 * _1159) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1119 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1164 * _1160) / cbModelParam._m0[35u].z) + ((((((_1123 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        float _1214 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1181.x + (-0.5));
        float _1216 = _1214 * (_1181.y + (-0.5));
        float _1217 = _1214 * (_1181.z + (-0.5));
        float _1224 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1188.x + (-0.5));
        float _1226 = _1224 * (_1188.y + (-0.5));
        float _1227 = _1224 * (_1188.z + (-0.5));
        float _1234 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1195.x + (-0.5));
        float _1236 = _1234 * (_1195.y + (-0.5));
        float _1237 = _1234 * (_1195.z + (-0.5));
        float _1244 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1202.x + (-0.5));
        float _1246 = _1244 * (_1202.y + (-0.5));
        float _1247 = _1244 * (_1202.z + (-0.5));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = _1215 * 0.5;
        float _1252 = _1225 * 0.5;
        float _1253 = _1235 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_554, _555, _556), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3716 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1278 + 1.0))) + _1283) * _1248;
        float _1293 = _1216 * 0.5;
        float _1294 = _1226 * 0.5;
        float _1295 = _1236 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_554, _555, _556), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _3749 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1320 + 1.0))) + _1325) * _1249;
        float _1335 = _1217 * 0.5;
        float _1336 = _1227 * 0.5;
        float _1337 = _1237 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_554, _555, _556), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _3782 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1362 + 1.0))) + _1367) * _1250;
        _1384 = _1217;
        _1385 = _1216;
        _1386 = _1215;
        _1387 = _1227;
        _1388 = _1226;
        _1389 = _1225;
        _1390 = _1237;
        _1391 = _1236;
        _1392 = _1235;
        _1393 = _1250;
        _1394 = _1249;
        _1395 = _1248;
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1398 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
    }
    else
    {
        _1384 = _1076;
        _1385 = _1076;
        _1386 = _1076;
        _1387 = _1076;
        _1388 = _1076;
        _1389 = _1076;
        _1390 = _1076;
        _1391 = _1076;
        _1392 = _1076;
        _1393 = _1076;
        _1394 = _1076;
        _1395 = _1076;
        _1396 = 0.0;
        _1397 = 0.0;
        _1398 = 0.0;
    }
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1088)) + _1088;
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1089)) + _1089;
    float _1410 = (cbModelParam._m0[1u].x * (_1398 - _1090)) + _1090;
    float _1431 = fma(_1410, cbSceneParam._m0[89u].z, fma(_1409, cbSceneParam._m0[89u].y, _1408 * cbSceneParam._m0[89u].x));
    float _1434 = fma(_1410, cbSceneParam._m0[90u].z, fma(_1409, cbSceneParam._m0[90u].y, _1408 * cbSceneParam._m0[90u].x));
    float _1437 = fma(_1410, cbSceneParam._m0[91u].z, fma(_1409, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1408));
    float _1452 = _713 * 0.5;
    float _1453 = _714 * 0.5;
    float _1454 = _715 * 0.5;
    float _1455 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1386, _1389, _1392, _1395));
    float _1458 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1461 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1495;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1468 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1075, _1079, _1082, _1085));
        float _1472 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1077, _1080, _1083, _1086));
        float _1476 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1078, _1081, _1084, _1087));
        float _1483 = dot(vec4(cbModelParam._m0[39u]), vec4(_1452, _1453, _1454, 1.0));
        _1495 = dot(vec3(isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1495 = 1.0;
    }
    float _1506;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1497 = dot(vec4(cbModelParam._m0[40u]), vec4(_1452, _1453, _1454, 1.0));
        _1506 = dot(vec3(isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1497) ? 0.0 : (isnan(0.0) ? _1497 : max(0.0, _1497))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1506 = 1.0;
    }
    float _1510 = (_1506 * cbModelParam._m0[1u].x) + (_1495 * (1.0 - cbModelParam._m0[1u].x));
    float _1520 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _557);
    float _1521 = isnan(_1520) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1520 : min(cbModelParam._m0[25u].z, _1520));
    float _1602;
    float _1604;
    float _1606;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1569 = fma(_774, cbModelParam._m0[13u].z, fma(_770, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766)) + cbModelParam._m0[13u].w;
        float _1573 = fma(_774, cbModelParam._m0[14u].z, fma(_770, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766)) + cbModelParam._m0[14u].w;
        float _1577 = fma(_774, cbModelParam._m0[15u].z, fma(_770, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766)) + cbModelParam._m0[15u].w;
        float _1580 = fma(_715, cbModelParam._m0[13u].z, fma(_714, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713));
        float _1583 = fma(_715, cbModelParam._m0[14u].z, fma(_714, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713));
        float _1586 = fma(_715, cbModelParam._m0[15u].z, fma(_714, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713));
        float _1614;
        if (_1580 > 0.0)
        {
            _1614 = abs((1.0 - _1569) / _1580);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1569 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1614 = frontier_phi_14_12_ladder;
        }
        float _1836;
        if (_1583 > 0.0)
        {
            _1836 = abs((1.0 - _1573) / _1583);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1573 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1836 = frontier_phi_23_19_ladder;
        }
        float _2082;
        if (_1586 > 0.0)
        {
            _2082 = abs((1.0 - _1577) / _1586);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1577 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2082 = frontier_phi_35_30_ladder;
        }
        float _2084 = isnan(_1836) ? _1614 : (isnan(_1614) ? _1836 : min(_1614, _1836));
        float _2085 = isnan(_2082) ? _2084 : (isnan(_2084) ? _2082 : min(_2084, _2082));
        float _2089 = (_2085 * _1580) + _1569;
        float _2090 = (_2085 * _1583) + _1573;
        float _2091 = (_2085 * _1586) + _1577;
        float _2092 = _2085 * 9.9999997473787516355514526367188e-05;
        float _2094 = (-1.0) - _2092;
        float _2096 = _2092 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2091 > _2096) || ((_2091 < _2094) || ((_2090 > _2096) || ((_2090 < _2094) || ((_2089 < _2094) || (_2089 > _2096))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2215 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2091, cbModelParam._m0[9u].z, fma(_2090, cbModelParam._m0[9u].y, _2089 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2091, cbModelParam._m0[10u].z, fma(_2090, cbModelParam._m0[10u].y, _2089 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2091, cbModelParam._m0[11u].z, fma(_2090, cbModelParam._m0[11u].y, _2089 * cbModelParam._m0[11u].x))), _1521);
            frontier_phi_13_35_ladder = _2215.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2215.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2215.x * cbModelParam._m0[1u].y;
        }
        _1602 = frontier_phi_13_35_ladder_2;
        _1604 = frontier_phi_13_35_ladder_1;
        _1606 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1590 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_713, _714, _715), _1521);
        _1602 = _1590.x * cbModelParam._m0[1u].y;
        _1604 = _1590.y * cbModelParam._m0[1u].y;
        _1606 = _1590.z * cbModelParam._m0[1u].y;
    }
    float _1610 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _557);
    float _1611 = isnan(_1610) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1610 : min(cbModelParam._m0[25u].w, _1610));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1665 = fma(_774, cbModelParam._m0[21u].z, fma(_770, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766)) + cbModelParam._m0[21u].w;
        float _1669 = fma(_774, cbModelParam._m0[22u].z, fma(_770, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766)) + cbModelParam._m0[22u].w;
        float _1673 = fma(_774, cbModelParam._m0[23u].z, fma(_770, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766)) + cbModelParam._m0[23u].w;
        float _1676 = fma(_715, cbModelParam._m0[21u].z, fma(_714, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713));
        float _1679 = fma(_715, cbModelParam._m0[22u].z, fma(_714, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713));
        float _1682 = fma(_715, cbModelParam._m0[23u].z, fma(_714, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713));
        float _1841;
        if (_1676 > 0.0)
        {
            _1841 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1841 = frontier_phi_25_21_ladder;
        }
        float _2109;
        if (_1679 > 0.0)
        {
            _2109 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2109 = frontier_phi_37_32_ladder;
        }
        float _2314;
        if (_1682 > 0.0)
        {
            _2314 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2314 = frontier_phi_46_43_ladder;
        }
        float _2316 = isnan(_2109) ? _1841 : (isnan(_1841) ? _2109 : min(_1841, _2109));
        float _2317 = isnan(_2314) ? _2316 : (isnan(_2316) ? _2314 : min(_2316, _2314));
        float _2321 = (_2317 * _1676) + _1665;
        float _2322 = (_2317 * _1679) + _1669;
        float _2323 = (_2317 * _1682) + _1673;
        float _2324 = _2317 * 9.9999997473787516355514526367188e-05;
        float _2325 = (-1.0) - _2324;
        float _2327 = _2324 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2323 > _2327) || ((_2323 < _2325) || ((_2322 > _2327) || ((_2322 < _2325) || ((_2321 < _2325) || (_2321 > _2327))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2522 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2323, cbModelParam._m0[17u].z, fma(_2322, cbModelParam._m0[17u].y, _2321 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2323, cbModelParam._m0[18u].z, fma(_2322, cbModelParam._m0[18u].y, _2321 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2323, cbModelParam._m0[19u].z, fma(_2322, cbModelParam._m0[19u].y, _2321 * cbModelParam._m0[19u].x))), _1611);
            frontier_phi_22_46_ladder = _2522.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2522.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2522.x * cbModelParam._m0[1u].z;
        }
        _1701 = frontier_phi_22_46_ladder_2;
        _1703 = frontier_phi_22_46_ladder_1;
        _1705 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_713, _714, _715), _1611);
        _1701 = _1685.x * cbModelParam._m0[1u].z;
        _1703 = _1685.y * cbModelParam._m0[1u].z;
        _1705 = _1685.z * cbModelParam._m0[1u].z;
    }
    float _1717 = ((((1.0 - _734) * ((_721 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_734 * _721)) * _705;
    float _1718 = _1717 * ((cbModelParam._m0[1u].w * (_1701 - _1602)) + _1602);
    float _1719 = _1717 * ((cbModelParam._m0[1u].w * (_1703 - _1604)) + _1604);
    float _1720 = _1717 * ((cbModelParam._m0[1u].w * (_1705 - _1606)) + _1606);
    float _1723 = fma(_1720, cbSceneParam._m0[89u].z, fma(_1719, cbSceneParam._m0[89u].y, _1718 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1720, cbSceneParam._m0[90u].z, fma(_1719, cbSceneParam._m0[90u].y, _1718 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1720, cbSceneParam._m0[91u].z, fma(_1719, cbSceneParam._m0[91u].y, _1718 * cbSceneParam._m0[91u].x));
    vec4 _1737 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_642, _643));
    float _1739 = _1737.w;
    float _1751 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1739);
    float _1752 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1739);
    float _1753 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1739);
    uvec4 _1757 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1759 = _1757.x * 14u;
    uint _1760 = _1759 + 13u;
    float _1767 = _705 + (-1.0);
    float _1772 = (cbLight._m0[_1760].x * _1767) + 1.0;
    float _1773 = (cbLight._m0[_1760].y * _1767) + 1.0;
    float _1774 = (cbLight._m0[_1760].z * _1767) + 1.0;
    float _1775 = (cbLight._m0[_1760].w * _1767) + 1.0;
    uint _1776 = _1759 + 5u;
    float _1782 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1786 = _1759 + 4u;
    float _1795 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
    uint _1799 = _1759 | 1u;
    float _1810 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_554, _555, _556));
    float _1813 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_554, _555, _556));
    float _3918 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _3929 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1818 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * 0.3183098733425140380859375;
    float _1820 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.3183098733425140380859375;
    float _1827 = ((cbLight._m0[_1776].x * _1782) * _1820) + (((cbLight._m0[_1786].x * _1751) * _1795) * _1818);
    float _1828 = ((_1782 * cbLight._m0[_1776].y) * _1820) + (((cbLight._m0[_1786].y * _1752) * _1795) * _1818);
    float _1829 = ((_1782 * cbLight._m0[_1776].z) * _1820) + (((cbLight._m0[_1786].z * _1753) * _1795) * _1818);
    uvec4 _1833 = floatBitsToUint(cbLight._m0[_1759 + 12u]);
    bool _1835 = _1833.x == 0u;
    float _1846;
    float _1848;
    float _1850;
    if (_1835)
    {
        _1846 = _1827;
        _1848 = _1828;
        _1850 = _1829;
    }
    else
    {
        uint _1854 = _1759 + 6u;
        float _1870 = (dot(vec3(cbLight._m0[_1759 + 2u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _1871 = _1870 * _1870;
        float _3940 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1873 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _1846 = (((cbLight._m0[_1854].x * 0.3183098733425140380859375) * _1872) * _1873) + _1827;
        _1848 = (((cbLight._m0[_1854].y * 0.3183098733425140380859375) * _1872) * _1873) + _1828;
        _1850 = (((cbLight._m0[_1854].z * 0.3183098733425140380859375) * _1872) * _1873) + _1829;
    }
    bool _1853 = _1833.y == 0u;
    float _1891;
    float _1893;
    float _1895;
    if (_1853)
    {
        _1891 = _1846;
        _1893 = _1848;
        _1895 = _1850;
    }
    else
    {
        uint _2053 = _1759 + 7u;
        float _2069 = (dot(vec3(cbLight._m0[_1759 + 3u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _2070 = _2069 * _2069;
        float _3956 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2071 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _2072 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _1891 = (((cbLight._m0[_2053].x * 0.3183098733425140380859375) * _2071) * _2072) + _1846;
        _1893 = (((cbLight._m0[_2053].y * 0.3183098733425140380859375) * _2071) * _2072) + _1848;
        _1895 = (((cbLight._m0[_2053].z * 0.3183098733425140380859375) * _2071) * _2072) + _1850;
    }
    uint _1898 = _1759 + 8u;
    float _1911 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1759].w)) * _557) * 0.949999988079071044921875);
    float _1912 = _1911 * _1911;
    float _1913 = cbLight._m0[_1759].x + _634;
    float _1914 = cbLight._m0[_1759].y + _635;
    float _1915 = cbLight._m0[_1759].z + _636;
    float _1919 = inversesqrt(dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915)));
    float _1920 = _1919 * _1913;
    float _1921 = _1919 * _1914;
    float _1922 = _1919 * _1915;
    float _1923 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_1759].xyz));
    float _3972 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _3983 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _1927 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _1928 = dot(vec3(_554, _555, _556), vec3(_1920, _1921, _1922));
    float _3994 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _1932 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_1920, _1921, _1922));
    float _4005 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1936 = _1912 * _1912;
    float _1940 = ((_1931 * _1931) * (_1936 + (-1.0))) + 1.0;
    float _1951 = (exp2(log2(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1952 = 1.0 - _1912;
    float _1963 = (0.5 / (((_1927 * ((_1926 * _1952) + _1912)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _1952) + _1912) * _1926))) * _1926;
    float _4016 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1965 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1936 / ((_1940 * _1940) * 3.141590118408203125));
    uint _1979 = _1759 + 9u;
    float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1799].w)) * _557) * 0.949999988079071044921875);
    float _1991 = _1990 * _1990;
    float _1992 = cbLight._m0[_1799].x + _634;
    float _1993 = cbLight._m0[_1799].y + _635;
    float _1994 = cbLight._m0[_1799].z + _636;
    float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
    float _1999 = _1998 * _1992;
    float _2000 = _1998 * _1993;
    float _2001 = _1998 * _1994;
    float _2002 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_1799].xyz));
    float _4027 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _2006 = dot(vec3(_554, _555, _556), vec3(_1999, _2000, _2001));
    float _4038 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2009 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _2010 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_1999, _2000, _2001));
    float _4049 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2014 = _1991 * _1991;
    float _2018 = ((_2009 * _2009) * (_2014 + (-1.0))) + 1.0;
    float _2027 = (exp2(log2(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2028 = 1.0 - _1991;
    float _2038 = (0.5 / (((_1927 * ((_2005 * _2028) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _2028) + _1991) * _2005))) * _2005;
    float _4060 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2040 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_2014 / ((_2018 * _2018) * 3.141590118408203125));
    float _2050 = (((_2027 * cbLight._m0[_1979].x) * _2040) * _1782) + ((((cbLight._m0[_1898].x * _1751) * _1951) * _1965) * _1795);
    float _2051 = (((_2027 * cbLight._m0[_1979].y) * _2040) * _1782) + ((((cbLight._m0[_1898].y * _1752) * _1951) * _1965) * _1795);
    float _2052 = (((_2027 * cbLight._m0[_1979].z) * _2040) * _1782) + ((((cbLight._m0[_1898].z * _1753) * _1951) * _1965) * _1795);
    float _2114;
    float _2116;
    float _2118;
    if (_1835)
    {
        _2114 = _2050;
        _2116 = _2051;
        _2118 = _2052;
    }
    else
    {
        uint _2120 = _1759 + 2u;
        uint _2124 = _1759 + 10u;
        float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2120].w)) * _557) * 0.949999988079071044921875);
        float _2139 = _2138 * _2138;
        float _2140 = cbLight._m0[_2120].x + _634;
        float _2141 = cbLight._m0[_2120].y + _635;
        float _2142 = cbLight._m0[_2120].z + _636;
        float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
        float _2147 = _2146 * _2140;
        float _2148 = _2146 * _2141;
        float _2149 = _2146 * _2142;
        float _2150 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2120].xyz));
        float _4071 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2153 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _2154 = dot(vec3(_554, _555, _556), vec3(_2147, _2148, _2149));
        float _4082 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2157 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _2158 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_2147, _2148, _2149));
        float _4093 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2162 = _2139 * _2139;
        float _2166 = ((_2157 * _2157) * (_2162 + (-1.0))) + 1.0;
        float _2175 = (exp2(log2(1.0 - (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2176 = 1.0 - _2139;
        float _2186 = (0.5 / (((_1927 * ((_2153 * _2176) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _2176) + _2139) * _2153))) * _2153;
        float _4104 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2188 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_2162 / ((_2166 * _2166) * 3.141590118408203125));
        float _2189 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _2114 = (((_2175 * cbLight._m0[_2124].x) * _2188) * _2189) + _2050;
        _2116 = (((_2175 * cbLight._m0[_2124].y) * _2188) * _2189) + _2051;
        _2118 = (((_2175 * cbLight._m0[_2124].z) * _2188) * _2189) + _2052;
    }
    float _2224;
    float _2226;
    float _2228;
    if (_1853)
    {
        _2224 = _2114;
        _2226 = _2116;
        _2228 = _2118;
    }
    else
    {
        uint _2235 = _1759 + 3u;
        uint _2239 = _1759 + 11u;
        float _2253 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2235].w)) * _557) * 0.949999988079071044921875);
        float _2254 = _2253 * _2253;
        float _2255 = cbLight._m0[_2235].x + _634;
        float _2256 = cbLight._m0[_2235].y + _635;
        float _2257 = cbLight._m0[_2235].z + _636;
        float _2261 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
        float _2262 = _2261 * _2255;
        float _2263 = _2261 * _2256;
        float _2264 = _2261 * _2257;
        float _2265 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2235].xyz));
        float _4120 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2268 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2269 = dot(vec3(_554, _555, _556), vec3(_2262, _2263, _2264));
        float _4131 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2272 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _2273 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_2262, _2263, _2264));
        float _4142 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2277 = _2254 * _2254;
        float _2281 = ((_2272 * _2272) * (_2277 + (-1.0))) + 1.0;
        float _2290 = (exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2291 = 1.0 - _2254;
        float _2301 = (0.5 / (((_1927 * ((_2268 * _2291) + _2254)) + 9.9999999392252902907785028219223e-09) + (((_1927 * _2291) + _2254) * _2268))) * _2268;
        float _4153 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2303 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2277 / ((_2281 * _2281) * 3.141590118408203125));
        float _2304 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2224 = (((_2290 * cbLight._m0[_2239].x) * _2303) * _2304) + _2114;
        _2226 = (((_2290 * cbLight._m0[_2239].y) * _2303) * _2304) + _2116;
        _2228 = (((_2290 * cbLight._m0[_2239].z) * _2303) * _2304) + _2118;
    }
    float _2439;
    float _2441;
    float _2443;
    float _2445;
    float _2447;
    float _2449;
    if (_1757.y == 0u)
    {
        float _2379 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2380 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2379;
        float _2381 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2379;
        float _2382 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2379;
        uvec4 _2394 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2395 = _2394.x;
        uint _2406 = uint((float(_2394.y) * floor(float(uint(cbSceneParam._m0[85u].y * _643) / _2395))) + floor(float(uint(cbSceneParam._m0[85u].x * _642) / _2395)));
        float _2416 = (log2(_2382 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2417 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        uint _2420 = uint(isnan(14.0) ? _2417 : (isnan(_2417) ? 14.0 : min(_2417, 14.0)));
        uvec4 _2425 = texelFetch(g_lightClusterGridBuffer, int(((_2420 << 2u) + (_2406 << 6u)) >> 2u));
        uint _2426 = _2425.x;
        uint _2427 = _2394.z;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        if (((((1u << ((_2427 >> 4u) & 15u)) + 4294967295u) & _2426) == 0u) || ((_2427 & 240u) == 0u))
        {
            _2527 = 0.0;
            _2529 = 0.0;
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
        }
        else
        {
            float _2528;
            float _2530;
            float _2532;
            float _2534;
            float _2536;
            float _2538;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            uint _2678 = 0u;
            uint _2687;
            bool _2688;
            for (;;)
            {
                _2687 = texelFetch(g_lightClassification, int((((_2420 << 5u) + (_2406 << 9u)) + (_2678 << 2u)) >> 2u)).x;
                _2688 = _2687 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2688)
                {
                    frontier_phi_61_pred = _2672;
                    frontier_phi_61_pred_1 = _2677;
                    frontier_phi_61_pred_2 = _2676;
                    frontier_phi_61_pred_3 = _2675;
                    frontier_phi_61_pred_4 = _2674;
                    frontier_phi_61_pred_5 = _2673;
                }
                else
                {
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    uint _2802;
                    _2796 = _2672;
                    _2797 = _2673;
                    _2798 = _2674;
                    _2799 = _2675;
                    _2800 = _2676;
                    _2801 = _2677;
                    _2802 = _2687;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    for (;;)
                    {
                        uint _2806 = uint(findLSB(_2802)) + (_2678 << 5u);
                        uint _2803 = (_2802 + 4294967295u) & _2802;
                        uint _2808 = _2806 * 48u;
                        vec4 _2822 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2808)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2808 + 3u)).x));
                        uint _2828 = (_2806 * 48u) + 4u;
                        vec4 _2841 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2828)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 3u)).x));
                        uint _2847 = (_2806 * 48u) + 8u;
                        vec3 _2858 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2847)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 2u)).x));
                        float _2862 = _2822.x - _2380;
                        float _2863 = _2822.y - _2381;
                        float _2864 = _2822.z - _2382;
                        float _2865 = dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864));
                        float _2868 = inversesqrt(_2865);
                        float _2869 = _2868 * _2862;
                        float _2870 = _2868 * _2863;
                        float _2871 = _2868 * _2864;
                        float _2872 = dot(vec3(_661, _664, _667), vec3(_2869, _2870, _2871));
                        float _2877 = 1.0 - (_2865 * _2822.w);
                        float _4179 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2878 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                        float _2879 = sqrt(_2865) * _2841.w;
                        float _2882 = 1.39999997615814208984375 / (_2879 + 1.39999997615814208984375);
                        float _2883 = _2882 * _2882;
                        float _2886 = ((1.0 - _2883) * _2872) + _2883;
                        float _2889 = _2879 * _2879;
                        float _2893 = ((isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0))) * _2878) / ((_2889 * 0.699999988079071044921875) + 1.0);
                        float _2897 = (-0.0) - _2380;
                        float _2898 = (-0.0) - _2381;
                        float _2899 = (-0.0) - _2382;
                        float _2903 = inversesqrt(dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899)));
                        float _2904 = _2903 * _2897;
                        float _2905 = _2903 * _2898;
                        float _2906 = _2903 * _2899;
                        float _2914 = exp2(log2(1.0 / ((_2889 * 3.5) + 5.0)) * 0.25);
                        float _2915 = 1.0 - _721;
                        float _2922 = sqrt(1.0 - ((1.0 - (_2915 * _2915)) * (1.0 - (_2914 * _2914))));
                        float _2923 = _2922 * _2922;
                        float _2924 = _2923 * _2923;
                        float _2925 = _2904 + _2869;
                        float _2926 = _2905 + _2870;
                        float _2927 = _2906 + _2871;
                        float _2931 = inversesqrt(dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927)));
                        float _2935 = dot(vec3(_661, _664, _667), vec3(_2904, _2905, _2906));
                        float _4195 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2938 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2939 = dot(vec3(_661, _664, _667), vec3(_2931 * _2925, _2931 * _2926, _2931 * _2927));
                        float _4206 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2942 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                        float _2946 = ((_2942 * _2942) * (_2924 + (-1.0))) + 1.0;
                        float _2947 = _2882 * _2923;
                        float _2948 = _2947 * _2947;
                        float _2951 = ((1.0 - _2948) * _2872) + _2948;
                        float _4217 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2952 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _2953 = 1.0 - _2923;
                        float _2963 = (0.5 / (((_2952 * ((_2938 * _2953) + _2923)) + 9.9999999392252902907785028219223e-09) + (((_2952 * _2953) + _2923) * _2938))) * _2952;
                        float _4228 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2974 = (((_2924 * 3.1415927410125732421875) * (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) / ((_2946 * _2946) * ((_2889 * 2.1991131305694580078125) + 3.141590118408203125))) * _2878;
                        _2731 = (_2893 * _2841.x) + _2799;
                        _2732 = (_2893 * _2841.y) + _2800;
                        _2733 = (_2893 * _2841.z) + _2801;
                        _2728 = (_2974 * _2858.x) + _2796;
                        _2729 = (_2974 * _2858.y) + _2797;
                        _2730 = (_2974 * _2858.z) + _2798;
                        if (_2803 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2796 = _2728;
                            _2797 = _2729;
                            _2798 = _2730;
                            _2799 = _2731;
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2803;
                        }
                    }
                    frontier_phi_61_pred = _2728;
                    frontier_phi_61_pred_1 = _2733;
                    frontier_phi_61_pred_2 = _2732;
                    frontier_phi_61_pred_3 = _2731;
                    frontier_phi_61_pred_4 = _2730;
                    frontier_phi_61_pred_5 = _2729;
                }
                _2528 = frontier_phi_61_pred;
                _2538 = frontier_phi_61_pred_1;
                _2536 = frontier_phi_61_pred_2;
                _2534 = frontier_phi_61_pred_3;
                _2532 = frontier_phi_61_pred_4;
                _2530 = frontier_phi_61_pred_5;
                uint _2679 = _2678 + 1u;
                if (_2679 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2672 = _2528;
                    _2673 = _2530;
                    _2674 = _2532;
                    _2675 = _2534;
                    _2676 = _2536;
                    _2677 = _2538;
                    _2678 = _2679;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2527 = _2528;
            _2529 = _2530;
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
        }
        uvec4 _2541 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2542 = _2541.z;
        uint _2544 = (_2542 >> 8u) & 15u;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        if (((4294967295u << _2544) & _2426) == 0u)
        {
            _2640 = _2527;
            _2642 = _2529;
            _2644 = _2531;
            _2646 = _2533;
            _2648 = _2535;
            _2650 = _2537;
        }
        else
        {
            float _2665 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
            float _2666 = _2665 * _2380;
            float _2667 = _2665 * _2381;
            float _2668 = _2665 * _2382;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2544 < ((_2542 >> 12u) & 15u))
            {
                float _2641;
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2779 = _2527;
                float _2780 = _2529;
                float _2781 = _2531;
                float _2782 = _2533;
                float _2783 = _2535;
                float _2784 = _2537;
                uint _2785 = _2544;
                uint _2794;
                bool _2795;
                for (;;)
                {
                    _2794 = texelFetch(g_lightClassification, int((((_2420 << 5u) + (_2406 << 9u)) + (_2785 << 2u)) >> 2u)).x;
                    _2795 = _2794 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2795)
                    {
                        frontier_phi_67_pred = _2782;
                        frontier_phi_67_pred_1 = _2783;
                        frontier_phi_67_pred_2 = _2784;
                        frontier_phi_67_pred_3 = _2781;
                        frontier_phi_67_pred_4 = _2780;
                        frontier_phi_67_pred_5 = _2779;
                    }
                    else
                    {
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _2992 = _2779;
                        float _2993 = _2780;
                        float _2994 = _2781;
                        float _2995 = _2782;
                        float _2996 = _2783;
                        float _2997 = _2784;
                        uint _2998 = _2794;
                        uint _2999;
                        vec4 _3024;
                        float _3025;
                        vec4 _3040;
                        vec3 _3052;
                        vec4 _3067;
                        vec4 _3083;
                        float _3129;
                        bool _3130;
                        for (;;)
                        {
                            uint _3009 = ((_2785 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2998));
                            _2999 = (_2998 + 4294967295u) & _2998;
                            uint _3011 = _3009 * 40u;
                            _3024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 3u)).x));
                            _3025 = _3024.w;
                            uint _3027 = (_3009 * 40u) + 4u;
                            _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            uint _3042 = (_3009 * 40u) + 8u;
                            _3052 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x));
                            uint _3054 = (_3009 * 40u) + 16u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3070 = (_3009 * 40u) + 20u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3085 = (_3009 * 40u) + 24u;
                            vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3104 = (_3009 * 40u) + 28u;
                            vec4 _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            _3129 = fma(_2382, _3117.z, fma(_2381, _3117.y, _3117.x * _2380)) + _3117.w;
                            _3130 = !((fma(_2382, _3098.z, fma(_2381, _3098.y, _3098.x * _2380)) + _3098.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3130)
                            {
                                float _3157 = _3024.x - _2380;
                                float _3158 = _3024.y - _2381;
                                float _3159 = _3024.z - _2382;
                                float _3160 = dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159));
                                float _3163 = inversesqrt(_3160);
                                float _3164 = _3163 * _3157;
                                float _3165 = _3163 * _3158;
                                float _3166 = _3163 * _3159;
                                float _3170 = 1.0 - (_3160 / (_3025 * _3025));
                                float _4239 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3171 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                                float _3175 = sqrt(_3160) * _3040.w;
                                float _3177 = 1.39999997615814208984375 / (_3175 + 1.39999997615814208984375);
                                float _3178 = _3177 * _3177;
                                float _3181 = ((1.0 - _3178) * dot(vec3(_3164, _3165, _3166), vec3(_661, _664, _667))) + _3178;
                                float _3184 = _3175 * _3175;
                                float _3188 = (fma(_2382, _3067.z, fma(_2381, _3067.y, _3067.x * _2380)) + _3067.w) / _3129;
                                float _3189 = (fma(_2382, _3083.z, fma(_2381, _3083.y, _3083.x * _2380)) + _3083.w) / _3129;
                                float _3193 = 1.0 - dot(vec2(_3188, _3189), vec2(_3188, _3189));
                                float _4255 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3194 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3195 = _3194 * (((isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0))) * _3171) / ((_3184 * 0.699999988079071044921875) + 1.0));
                                float _3207 = exp2(log2(1.0 / ((_3184 * 3.5) + 5.0)) * 0.25);
                                float _3208 = 1.0 - _721;
                                float _3215 = sqrt(1.0 - ((1.0 - (_3208 * _3208)) * (1.0 - (_3207 * _3207))));
                                float _3216 = _3215 * _3215;
                                float _3217 = _3216 * _3216;
                                float _3218 = _3164 - _2666;
                                float _3219 = _3165 - _2667;
                                float _3220 = _3166 - _2668;
                                float _3224 = inversesqrt(dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220)));
                                float _3228 = dot(vec3(_661, _664, _667), vec3((-0.0) - _2666, (-0.0) - _2667, (-0.0) - _2668));
                                float _4266 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3231 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                                float _3232 = dot(vec3(_661, _664, _667), vec3(_3224 * _3218, _3224 * _3219, _3224 * _3220));
                                float _4277 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3235 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3239 = ((_3235 * _3235) * (_3217 + (-1.0))) + 1.0;
                                float _3240 = _3177 * _3216;
                                float _3241 = _3240 * _3240;
                                float _3247 = ((1.0 - _3241) * dot(vec3(_661, _664, _667), vec3(_3164, _3165, _3166))) + _3241;
                                float _4288 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                                float _3249 = 1.0 - _3216;
                                float _3259 = (0.5 / (((_3248 * ((_3231 * _3249) + _3216)) + 9.9999999392252902907785028219223e-09) + (((_3248 * _3249) + _3216) * _3231))) * _3248;
                                float _4299 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3269 = (_3194 * _3171) * (((_3217 * 3.1415927410125732421875) * (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) / ((_3239 * _3239) * ((_3184 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3269 * _3052.x;
                                frontier_phi_73_pred_1 = _3269 * _3052.y;
                                frontier_phi_73_pred_2 = _3195 * _3040.z;
                                frontier_phi_73_pred_3 = _3195 * _3040.y;
                                frontier_phi_73_pred_4 = _3195 * _3040.x;
                                frontier_phi_73_pred_5 = _3269 * _3052.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3273 = frontier_phi_73_pred;
                            _3274 = frontier_phi_73_pred_1;
                            _3278 = frontier_phi_73_pred_2;
                            _3277 = frontier_phi_73_pred_3;
                            _3276 = frontier_phi_73_pred_4;
                            _3275 = frontier_phi_73_pred_5;
                            _2982 = _3276 + _2995;
                            _2983 = _3277 + _2996;
                            _2984 = _3278 + _2997;
                            _2979 = _3273 + _2992;
                            _2980 = _3274 + _2993;
                            _2981 = _3275 + _2994;
                            if (_2999 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2999;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2982;
                        frontier_phi_67_pred_1 = _2983;
                        frontier_phi_67_pred_2 = _2984;
                        frontier_phi_67_pred_3 = _2981;
                        frontier_phi_67_pred_4 = _2980;
                        frontier_phi_67_pred_5 = _2979;
                    }
                    _2647 = frontier_phi_67_pred;
                    _2649 = frontier_phi_67_pred_1;
                    _2651 = frontier_phi_67_pred_2;
                    _2645 = frontier_phi_67_pred_3;
                    _2643 = frontier_phi_67_pred_4;
                    _2641 = frontier_phi_67_pred_5;
                    uint _2786 = _2785 + 1u;
                    if (_2786 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2779 = _2641;
                        _2780 = _2643;
                        _2781 = _2645;
                        _2782 = _2647;
                        _2783 = _2649;
                        _2784 = _2651;
                        _2785 = _2786;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2649;
                frontier_phi_55_56_ladder_1 = _2651;
                frontier_phi_55_56_ladder_2 = _2647;
                frontier_phi_55_56_ladder_3 = _2645;
                frontier_phi_55_56_ladder_4 = _2643;
                frontier_phi_55_56_ladder_5 = _2641;
            }
            else
            {
                frontier_phi_55_56_ladder = _2535;
                frontier_phi_55_56_ladder_1 = _2537;
                frontier_phi_55_56_ladder_2 = _2533;
                frontier_phi_55_56_ladder_3 = _2531;
                frontier_phi_55_56_ladder_4 = _2529;
                frontier_phi_55_56_ladder_5 = _2527;
            }
            _2640 = frontier_phi_55_56_ladder_5;
            _2642 = frontier_phi_55_56_ladder_4;
            _2644 = frontier_phi_55_56_ladder_3;
            _2646 = frontier_phi_55_56_ladder_2;
            _2648 = frontier_phi_55_56_ladder;
            _2650 = frontier_phi_55_56_ladder_1;
        }
        float _2655 = isnan(1.0) ? _705 : (isnan(_705) ? 1.0 : min(_705, 1.0));
        _2439 = (_2655 * _2646) + _1891;
        _2441 = (_2655 * _2648) + _1893;
        _2443 = (_2655 * _2650) + _1895;
        _2445 = ((_2640 * 0.039999999105930328369140625) * _2655) + _2224;
        _2447 = ((_2642 * 0.039999999105930328369140625) * _2655) + _2226;
        _2449 = ((_2644 * 0.039999999105930328369140625) * _2655) + _2228;
    }
    else
    {
        _2439 = _1891;
        _2441 = _1893;
        _2443 = _1895;
        _2445 = _2224;
        _2447 = _2226;
        _2449 = _2228;
    }
    float _4315 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4326 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4337 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    uint _2469 = _230 + 6u;
    float _2477 = _642 / cbSceneParam._m0[86u].x;
    float _2478 = _643 / cbSceneParam._m0[86u].y;
    vec4 _2492 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2477, _2478, (log2((isnan(cbSceneParam._m0[77u].w) ? _575 : (isnan(_575) ? cbSceneParam._m0[77u].w : min(_575, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2494 = _2492.x;
    float _2495 = _2492.y;
    float _2496 = _2492.z;
    float _2497 = _2492.w;
    float _2590;
    float _2592;
    float _2594;
    float _2596;
    if (_575 > cbSceneParam._m0[78u].w)
    {
        float _2552 = isnan(_575) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _575 : min(cbSceneParam._m0[80u].w, _575));
        float _2553 = _2552 / _575;
        float _2564 = _2553 * _627;
        float _2565 = _628 * _2553;
        float _2566 = (-0.0) - _2565;
        float _2568 = _2553 * _629;
        float _2570 = (cbSceneParam._m0[77u].w * _2566) / _2552;
        float _2571 = _2570 + cbSceneParam._m0[79u].w;
        float _2572 = cbSceneParam._m0[79u].w - _2565;
        float _2578 = sqrt(((_2564 * _2564) + (_2565 * _2565)) + (_2568 * _2568));
        float _2581 = (1.0 - (cbSceneParam._m0[77u].w / _2552)) * _2578;
        float _2586 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2588 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2741;
        if (abs((_2566 - _2570) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2741 = ((((_2571 > 0.0) ? exp2(_2586 * _2571) : (2.0 - exp2(_2588 * _2571))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2581;
        }
        else
        {
            float _2701 = 1.0 / cbSceneParam._m0[80u].x;
            float _2702 = isnan(_2572) ? _2571 : (isnan(_2571) ? _2572 : max(_2571, _2572));
            float _2703 = isnan(_2572) ? _2571 : (isnan(_2571) ? _2572 : min(_2571, _2572));
            float _2712 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : min(_2702, 0.0));
            float _2713 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : min(_2703, 0.0));
            _2741 = ((abs(_2578 / _2566) * cbSceneParam._m0[80u].y) * ((((_2712 - _2713) * 2.0) - ((exp2(_2586 * (isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0)))) - exp2(_2586 * (isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0))))) * _2701)) - ((exp2(_2588 * _2712) - exp2(_2588 * _2713)) * _2701))) + (_2581 * cbSceneParam._m0[80u].z);
        }
        vec4 _2743 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2477, _2478, 1.0), 0.0);
        float _2752 = exp2((_2741 * (-1.44269502162933349609375)) * (1.0 - _2743.w));
        float _2753 = log2(_2752);
        float _2769 = log2(_2497);
        _2590 = (exp2(_2769 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2753 * cbSceneParam._m0[78u].x)) * _2743.x) / cbSceneParam._m0[78u].x)) + _2494;
        _2592 = (exp2(_2769 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2753 * cbSceneParam._m0[78u].y)) * _2743.y) / cbSceneParam._m0[78u].y)) + _2495;
        _2594 = (exp2(_2769 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2753 * cbSceneParam._m0[78u].z)) * _2743.z) / cbSceneParam._m0[78u].z)) + _2496;
        _2596 = _2752 * _2497;
    }
    else
    {
        _2590 = _2494;
        _2592 = _2495;
        _2594 = _2496;
        _2596 = _2497;
    }
    float _2608 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2609 = _2608 == 3.0;
    float _2610 = log2(_2596);
    float _2617 = exp2(_2610 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2439 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _705))) + ((_2445 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1510)) * cbPerFrame._m0[3u].x));
    float _2618 = exp2(_2610 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2441 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _705))) + ((_2447 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1510)) * cbPerFrame._m0[3u].x));
    float _2619 = exp2(_2610 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2443 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _705))) + ((_2449 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1510)) * cbPerFrame._m0[3u].x));
    float _2628 = (_2608 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2628 * (_2609 ? _2617 : (_2617 + (cbSceneParam._m0[72u].w * _2590)));
    SV_Target.y = _2628 * (_2609 ? _2618 : (_2618 + (cbSceneParam._m0[72u].w * _2592)));
    SV_Target.z = _2628 * (_2609 ? _2619 : (_2619 + (cbSceneParam._m0[72u].w * _2594)));
    SV_Target.w = cbInstanceData._m0[_2469].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2469].w;
}


