#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1307;
float _3948;
float _3949;
float _3950;
float _3951;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _368 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _368) * cbMtdParam._m0[24u].x) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3960 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _393 = (_386 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _394 = (_386 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _395 = (_386 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _451 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _453 = _451.x;
    float _454 = _451.y;
    float _455 = _451.z;
    float _464 = ((_434.z - _455) * _386) + _455;
    float _467 = ((((_434.x - _453) * _386) + _453) * 2.0) + (-1.0);
    float _469 = ((((_434.y - _454) * _386) + _454) * 2.0) + (-1.0);
    float _470 = dot(vec2(_467, _469), vec2(_467, _469));
    float _3971 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _475 = sqrt(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))));
    vec4 _491 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _503 = (((_491.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _467;
    float _504 = (((_491.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _469;
    float _507 = fma(_475, _239, fma(_504, _246, _503 * _232));
    float _510 = fma(_475, _240, fma(_504, _247, _503 * _233));
    float _513 = fma(_475, _241, fma(_504, _248, _503 * _234));
    float _517 = inversesqrt(dot(vec3(_507, _510, _513), vec3(_507, _510, _513)));
    vec4 _546 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _548 = _546.x;
    float _549 = 1.0 - _548;
    float _555 = (cbMtdParam._m0[19u].x + dot(vec4(_517 * _507, _517 * _510, _517 * _513, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_548 - _549) * cbMtdParam._m0[24u].z) + _549) * cbMtdParam._m0[21u].z);
    float _3982 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _558 = (-0.0) - cbMtdParam._m0[24u].y;
    float _560 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _561 = isnan(1.0) ? _560 : (isnan(_560) ? 1.0 : min(_560, 1.0));
    float _568 = _556 - ((_556 * TEXCOORD_8.x) * _561);
    float _569 = _556 - ((_556 * TEXCOORD_8.y) * _561);
    float _570 = _556 - ((_556 * TEXCOORD_8.z) * _561);
    float _577 = (_568 * ((_414.x * cbMtdParam._m0[18u].x) - _393)) + _393;
    float _578 = (_569 * ((_414.y * cbMtdParam._m0[18u].y) - _394)) + _394;
    float _579 = (_570 * ((_414.z * cbMtdParam._m0[18u].z) - _395)) + _395;
    vec4 _591 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _593 = _591.x;
    float _594 = 1.0 - _593;
    float _622 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_593 - _594) * cbMtdParam._m0[24u].w) + _594) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4003 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _623 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _631 = ((((cbMtdParam._m0[10u].x - _577) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _623) + _577;
    float _632 = ((((cbMtdParam._m0[10u].y - _578) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _623) + _578;
    float _633 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _579)) * _623) + _579;
    float _637 = (cbMtdParam._m0[19u].w * (_491.z - _464)) + _464;
    vec4 _651 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _658 = (_651.x * 2.0) + (-1.0);
    float _659 = (_651.y * 2.0) + (-1.0);
    float _660 = dot(vec2(_658, _659), vec2(_658, _659));
    float _4014 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _668 = ((_651.z - _637) * _568) + _637;
    float _671 = ((cbMtdParam._m0[23u].y - _668) * _623) + _668;
    vec4 _690 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _696 = (_690.x * 2.0) + (-1.0);
    float _697 = (_690.y * 2.0) + (-1.0);
    float _698 = dot(vec2(_696, _697), vec2(_696, _697));
    float _4025 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _713 = ((sqrt(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) - _475) * _570) + _475;
    float _716 = (((_658 - _503) * _568) + _503) + (cbMtdParam._m0[21u].x * _503);
    float _717 = (((_659 - _504) * _569) + _504) + (cbMtdParam._m0[21u].x * _504);
    float _728 = (((_696 - _716) + (_716 * cbMtdParam._m0[22u].z)) * _623) + _716;
    float _729 = (((_697 - _717) + (_717 * cbMtdParam._m0[22u].z)) * _623) + _717;
    float _730 = (_623 * (sqrt(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) - _713)) + _713;
    float _732 = cbMtdParam._m0[22u].x + _491.w;
    float _735 = fma(_730, _239, fma(_729, _246, _728 * _232));
    float _738 = fma(_730, _240, fma(_729, _247, _728 * _233));
    float _741 = fma(_730, _241, fma(_729, _248, _728 * _234));
    float _745 = inversesqrt(dot(vec3(_735, _738, _741), vec3(_735, _738, _741)));
    float _746 = _745 * _735;
    float _747 = _745 * _738;
    float _748 = _745 * _741;
    float _4036 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _749 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _4047 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4058 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _4069 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4080 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _767 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _818 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _808);
    float _819 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _808);
    float _820 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _808);
    float _824 = inversesqrt(dot(vec3(_818, _819, _820), vec3(_818, _819, _820)));
    float _825 = _818 * _824;
    float _826 = _819 * _824;
    float _827 = _820 * _824;
    vec4 _832 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _834 = _832.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _988 = sqrt(((_818 * _818) + (_819 * _819)) + (_820 * _820));
        float _994 = (cbMatDynParam._m0[5u].x * _988) + cbMatDynParam._m0[5u].y;
        float _4091 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _999 = (cbMatDynParam._m0[5u].z * _988) + cbMatDynParam._m0[5u].w;
        float _4102 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) - _995)) + _995) < ((_834 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _845 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _846 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _864 = fma(_748, cbSceneParam._m0[5u].z, fma(_747, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _746));
    float _867 = fma(_748, cbSceneParam._m0[6u].z, fma(_747, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _746));
    float _870 = fma(_748, cbSceneParam._m0[7u].z, fma(_747, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _746));
    uint _883 = _251 + 9u;
    uint _884 = _883 + uint(cbMatDynParam._m0[0u].w);
    float _890 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * cbInstanceData._m0[_884].x;
    float _891 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * cbInstanceData._m0[_884].y;
    float _892 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * cbInstanceData._m0[_884].z;
    float _4113 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _4124 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _4135 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    vec4 _904 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _845, cbSceneParam._m0[86u].y * _846));
    float _908 = ((isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * TEXCOORD_5.w) * _904.x;
    float _909 = dot(vec3(_746, _747, _748), vec3(_825, _826, _827));
    float _912 = _909 * 2.0;
    float _916 = (_912 * _746) - _825;
    float _917 = (_912 * _747) - _826;
    float _918 = (_912 * _748) - _827;
    float _922 = abs(dot(vec3(_825, _826, _827), vec3(_746, _747, _748)));
    float _4146 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _924 = sqrt(_749);
    float _937 = exp2((_924 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_924 * 3.0));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _973 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1306;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1031 = fma(_977, cbModelParam._m0[26u].z, fma(_973, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _969));
        float _1035 = fma(_977, cbModelParam._m0[27u].z, fma(_973, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _969));
        float _1039 = fma(_977, cbModelParam._m0[28u].z, fma(_973, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _969));
        float _1064 = _969 + _746;
        float _1065 = _973 + _747;
        float _1066 = _977 + _748;
        float _1076 = fma(_1066, cbModelParam._m0[26u].z, fma(_1065, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1064)) - _1031;
        float _1077 = fma(_1066, cbModelParam._m0[27u].z, fma(_1065, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1064)) - _1035;
        float _1078 = fma(_1066, cbModelParam._m0[28u].z, fma(_1065, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1064)) - _1039;
        float _1082 = inversesqrt(dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078)));
        float _1095 = ((_1082 * _1076) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1031 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1082 * _1077) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1035 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1082 * _1078) / cbModelParam._m0[34u].z) + ((((((_1039 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        float _1134 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1100.x + (-0.5));
        float _1136 = _1134 * (_1100.y + (-0.5));
        float _1137 = _1134 * (_1100.z + (-0.5));
        float _1144 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1107.x + (-0.5));
        float _1146 = _1144 * (_1107.y + (-0.5));
        float _1147 = _1144 * (_1107.z + (-0.5));
        float _1154 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1114.x + (-0.5));
        float _1156 = _1154 * (_1114.y + (-0.5));
        float _1157 = _1154 * (_1114.z + (-0.5));
        float _1164 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1121.x + (-0.5));
        float _1166 = _1164 * (_1121.y + (-0.5));
        float _1167 = _1164 * (_1121.z + (-0.5));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = _1135 * 0.5;
        float _1172 = _1145 * 0.5;
        float _1173 = _1155 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1188 = (dot(vec3(_746, _747, _748), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1198 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _4194 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1200 + 1.0))) + _1205) * _1168;
        float _1215 = _1136 * 0.5;
        float _1216 = _1146 * 0.5;
        float _1217 = _1156 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_746, _747, _748), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _4227 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1242 + 1.0))) + _1247) * _1169;
        float _1257 = _1137 * 0.5;
        float _1258 = _1147 * 0.5;
        float _1259 = _1157 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_746, _747, _748), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4260 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1284 + 1.0))) + _1289) * _1170;
        _1306 = _1137;
        _1308 = _1136;
        _1309 = _1135;
        _1310 = _1147;
        _1311 = _1146;
        _1312 = _1145;
        _1313 = _1157;
        _1314 = _1156;
        _1315 = _1155;
        _1316 = _1170;
        _1317 = _1169;
        _1318 = _1168;
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1321 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
    }
    else
    {
        _1306 = _1307;
        _1308 = _1307;
        _1309 = _1307;
        _1310 = _1307;
        _1311 = _1307;
        _1312 = _1307;
        _1313 = _1307;
        _1314 = _1307;
        _1315 = _1307;
        _1316 = _1307;
        _1317 = _1307;
        _1318 = _1307;
        _1319 = 0.0;
        _1320 = 0.0;
        _1321 = 0.0;
    }
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1349 = fma(_977, cbModelParam._m0[30u].z, fma(_973, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _969));
        float _1353 = fma(_977, cbModelParam._m0[31u].z, fma(_973, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _969));
        float _1357 = fma(_977, cbModelParam._m0[32u].z, fma(_973, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _969));
        float _1380 = _969 + _746;
        float _1381 = _973 + _747;
        float _1382 = _977 + _748;
        float _1392 = fma(_1382, cbModelParam._m0[30u].z, fma(_1381, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1380)) - _1349;
        float _1393 = fma(_1382, cbModelParam._m0[31u].z, fma(_1381, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1380)) - _1353;
        float _1394 = fma(_1382, cbModelParam._m0[32u].z, fma(_1381, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1380)) - _1357;
        float _1398 = inversesqrt(dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394)));
        float _1411 = ((_1398 * _1392) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1349 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1412 = ((_1398 * _1393) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1353 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1398 * _1394) / cbModelParam._m0[35u].z) + ((((((_1357 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        float _1448 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1415.x + (-0.5));
        float _1450 = _1448 * (_1415.y + (-0.5));
        float _1451 = _1448 * (_1415.z + (-0.5));
        float _1458 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1422.x + (-0.5));
        float _1460 = _1458 * (_1422.y + (-0.5));
        float _1461 = _1458 * (_1422.z + (-0.5));
        float _1468 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1429.x + (-0.5));
        float _1470 = _1468 * (_1429.y + (-0.5));
        float _1471 = _1468 * (_1429.z + (-0.5));
        float _1478 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1436.x + (-0.5));
        float _1480 = _1478 * (_1436.y + (-0.5));
        float _1481 = _1478 * (_1436.z + (-0.5));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = _1449 * 0.5;
        float _1486 = _1459 * 0.5;
        float _1487 = _1469 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_746, _747, _748), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4323 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1512 + 1.0))) + _1517) * _1482;
        float _1527 = _1450 * 0.5;
        float _1528 = _1460 * 0.5;
        float _1529 = _1470 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_746, _747, _748), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4356 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1554 + 1.0))) + _1559) * _1483;
        float _1569 = _1451 * 0.5;
        float _1570 = _1461 * 0.5;
        float _1571 = _1471 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_746, _747, _748), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4367 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4378 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4389 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_1596 + 1.0))) + _1601) * _1484;
        _1618 = _1451;
        _1619 = _1450;
        _1620 = _1449;
        _1621 = _1461;
        _1622 = _1460;
        _1623 = _1459;
        _1624 = _1471;
        _1625 = _1470;
        _1626 = _1469;
        _1627 = _1484;
        _1628 = _1483;
        _1629 = _1482;
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
        _1632 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
    }
    else
    {
        _1618 = _1307;
        _1619 = _1307;
        _1620 = _1307;
        _1621 = _1307;
        _1622 = _1307;
        _1623 = _1307;
        _1624 = _1307;
        _1625 = _1307;
        _1626 = _1307;
        _1627 = _1307;
        _1628 = _1307;
        _1629 = _1307;
        _1630 = 0.0;
        _1631 = 0.0;
        _1632 = 0.0;
    }
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1319)) + _1319;
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1320)) + _1320;
    float _1644 = (cbModelParam._m0[1u].x * (_1632 - _1321)) + _1321;
    float _1665 = fma(_1644, cbSceneParam._m0[89u].z, fma(_1643, cbSceneParam._m0[89u].y, _1642 * cbSceneParam._m0[89u].x));
    float _1668 = fma(_1644, cbSceneParam._m0[90u].z, fma(_1643, cbSceneParam._m0[90u].y, _1642 * cbSceneParam._m0[90u].x));
    float _1671 = fma(_1644, cbSceneParam._m0[91u].z, fma(_1643, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1642));
    float _1686 = _916 * 0.5;
    float _1687 = _917 * 0.5;
    float _1688 = _918 * 0.5;
    float _1689 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1620, _1623, _1626, _1629));
    float _1692 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1695 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1729;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1702 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1306, _1310, _1313, _1316));
        float _1706 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1308, _1311, _1314, _1317));
        float _1710 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1309, _1312, _1315, _1318));
        float _1717 = dot(vec4(cbModelParam._m0[39u]), vec4(_1686, _1687, _1688, 1.0));
        _1729 = dot(vec3(isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1717) ? 0.0 : (isnan(0.0) ? _1717 : max(0.0, _1717))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1729 = 1.0;
    }
    float _1740;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1731 = dot(vec4(cbModelParam._m0[40u]), vec4(_1686, _1687, _1688, 1.0));
        _1740 = dot(vec3(isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1731) ? 0.0 : (isnan(0.0) ? _1731 : max(0.0, _1731))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1740 = 1.0;
    }
    float _1744 = (_1740 * cbModelParam._m0[1u].x) + (_1729 * (1.0 - cbModelParam._m0[1u].x));
    float _1754 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _749);
    float _1755 = isnan(_1754) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1754 : min(cbModelParam._m0[25u].z, _1754));
    float _1835;
    float _1837;
    float _1839;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1802 = fma(_977, cbModelParam._m0[13u].z, fma(_973, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _969)) + cbModelParam._m0[13u].w;
        float _1806 = fma(_977, cbModelParam._m0[14u].z, fma(_973, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _969)) + cbModelParam._m0[14u].w;
        float _1810 = fma(_977, cbModelParam._m0[15u].z, fma(_973, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _969)) + cbModelParam._m0[15u].w;
        float _1813 = fma(_918, cbModelParam._m0[13u].z, fma(_917, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _916));
        float _1816 = fma(_918, cbModelParam._m0[14u].z, fma(_917, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _916));
        float _1819 = fma(_918, cbModelParam._m0[15u].z, fma(_917, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _916));
        float _1847;
        if (_1813 > 0.0)
        {
            _1847 = abs((1.0 - _1802) / _1813);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1802 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1847 = frontier_phi_17_15_ladder;
        }
        float _2016;
        if (_1816 > 0.0)
        {
            _2016 = abs((1.0 - _1806) / _1816);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1806 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2016 = frontier_phi_26_22_ladder;
        }
        float _2311;
        if (_1819 > 0.0)
        {
            _2311 = abs((1.0 - _1810) / _1819);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1810 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2311 = frontier_phi_38_33_ladder;
        }
        float _2313 = isnan(_2016) ? _1847 : (isnan(_1847) ? _2016 : min(_1847, _2016));
        float _2314 = isnan(_2311) ? _2313 : (isnan(_2313) ? _2311 : min(_2313, _2311));
        float _2318 = (_2314 * _1813) + _1802;
        float _2319 = (_2314 * _1816) + _1806;
        float _2320 = (_2314 * _1819) + _1810;
        float _2321 = _2314 * 9.9999997473787516355514526367188e-05;
        float _2323 = (-1.0) - _2321;
        float _2325 = _2321 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2320 > _2325) || ((_2320 < _2323) || ((_2319 > _2325) || ((_2319 < _2323) || ((_2318 < _2323) || (_2318 > _2325))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2465 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2320, cbModelParam._m0[9u].z, fma(_2319, cbModelParam._m0[9u].y, _2318 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2320, cbModelParam._m0[10u].z, fma(_2319, cbModelParam._m0[10u].y, _2318 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2320, cbModelParam._m0[11u].z, fma(_2319, cbModelParam._m0[11u].y, _2318 * cbModelParam._m0[11u].x))), _1755);
            frontier_phi_16_38_ladder = _2465.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2465.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2465.x * cbModelParam._m0[1u].y;
        }
        _1835 = frontier_phi_16_38_ladder_2;
        _1837 = frontier_phi_16_38_ladder_1;
        _1839 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1823 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_916, _917, _918), _1755);
        _1835 = _1823.x * cbModelParam._m0[1u].y;
        _1837 = _1823.y * cbModelParam._m0[1u].y;
        _1839 = _1823.z * cbModelParam._m0[1u].y;
    }
    float _1843 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _749);
    float _1844 = isnan(_1843) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1843 : min(cbModelParam._m0[25u].w, _1843));
    float _1933;
    float _1935;
    float _1937;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1897 = fma(_977, cbModelParam._m0[21u].z, fma(_973, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _969)) + cbModelParam._m0[21u].w;
        float _1901 = fma(_977, cbModelParam._m0[22u].z, fma(_973, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _969)) + cbModelParam._m0[22u].w;
        float _1905 = fma(_977, cbModelParam._m0[23u].z, fma(_973, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _969)) + cbModelParam._m0[23u].w;
        float _1908 = fma(_918, cbModelParam._m0[21u].z, fma(_917, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _916));
        float _1911 = fma(_918, cbModelParam._m0[22u].z, fma(_917, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _916));
        float _1914 = fma(_918, cbModelParam._m0[23u].z, fma(_917, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _916));
        float _2021;
        if (_1908 > 0.0)
        {
            _2021 = abs((1.0 - _1897) / _1908);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1897 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2021 = frontier_phi_28_24_ladder;
        }
        float _2338;
        if (_1911 > 0.0)
        {
            _2338 = abs((1.0 - _1901) / _1911);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1901 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2338 = frontier_phi_40_35_ladder;
        }
        float _2665;
        if (_1914 > 0.0)
        {
            _2665 = abs((1.0 - _1905) / _1914);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1905 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2665 = frontier_phi_50_47_ladder;
        }
        float _2667 = isnan(_2338) ? _2021 : (isnan(_2021) ? _2338 : min(_2021, _2338));
        float _2668 = isnan(_2665) ? _2667 : (isnan(_2667) ? _2665 : min(_2667, _2665));
        float _2672 = (_2668 * _1908) + _1897;
        float _2673 = (_2668 * _1911) + _1901;
        float _2674 = (_2668 * _1914) + _1905;
        float _2675 = _2668 * 9.9999997473787516355514526367188e-05;
        float _2676 = (-1.0) - _2675;
        float _2678 = _2675 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2674 > _2678) || ((_2674 < _2676) || ((_2673 > _2678) || ((_2673 < _2676) || ((_2672 < _2676) || (_2672 > _2678))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2792 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2674, cbModelParam._m0[17u].z, fma(_2673, cbModelParam._m0[17u].y, _2672 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2674, cbModelParam._m0[18u].z, fma(_2673, cbModelParam._m0[18u].y, _2672 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2674, cbModelParam._m0[19u].z, fma(_2673, cbModelParam._m0[19u].y, _2672 * cbModelParam._m0[19u].x))), _1844);
            frontier_phi_25_50_ladder = _2792.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2792.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2792.x * cbModelParam._m0[1u].z;
        }
        _1933 = frontier_phi_25_50_ladder_2;
        _1935 = frontier_phi_25_50_ladder_1;
        _1937 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_916, _917, _918), _1844);
        _1933 = _1917.x * cbModelParam._m0[1u].z;
        _1935 = _1917.y * cbModelParam._m0[1u].z;
        _1937 = _1917.z * cbModelParam._m0[1u].z;
    }
    float _1949 = ((((1.0 - _937) * ((_924 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_937 * _924)) * _908;
    float _1950 = _1949 * ((cbModelParam._m0[1u].w * (_1933 - _1835)) + _1835);
    float _1951 = _1949 * ((cbModelParam._m0[1u].w * (_1935 - _1837)) + _1837);
    float _1952 = _1949 * ((cbModelParam._m0[1u].w * (_1937 - _1839)) + _1839);
    float _1955 = fma(_1952, cbSceneParam._m0[89u].z, fma(_1951, cbSceneParam._m0[89u].y, _1950 * cbSceneParam._m0[89u].x));
    float _1958 = fma(_1952, cbSceneParam._m0[90u].z, fma(_1951, cbSceneParam._m0[90u].y, _1950 * cbSceneParam._m0[90u].x));
    float _1961 = fma(_1952, cbSceneParam._m0[91u].z, fma(_1951, cbSceneParam._m0[91u].y, _1950 * cbSceneParam._m0[91u].x));
    float _1995 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1999 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2003 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2007 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2008 = _1995 / _2007;
    float _2009 = _1999 / _2007;
    float _2010 = _2003 / _2007;
    float _2157;
    float _2158;
    float _2159;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2037 = ((uint(_2010 > cbSceneParam._m0[59u].y) + uint(_2010 > cbSceneParam._m0[59u].x)) + uint(_2010 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2038 = _2037 + 43u;
        uint _2046 = _2037 + 44u;
        uint _2054 = _2037 + 45u;
        uint _2062 = _2037 + 46u;
        float _2073 = fma(_2007, cbSceneParam._m0[_2038].w, fma(_2003, cbSceneParam._m0[_2038].z, fma(_1999, cbSceneParam._m0[_2038].y, _1995 * cbSceneParam._m0[_2038].x)));
        float _2077 = fma(_2007, cbSceneParam._m0[_2046].w, fma(_2003, cbSceneParam._m0[_2046].z, fma(_1999, cbSceneParam._m0[_2046].y, _1995 * cbSceneParam._m0[_2046].x)));
        float _2085 = fma(_2007, cbSceneParam._m0[_2062].w, fma(_2003, cbSceneParam._m0[_2062].z, fma(_1999, cbSceneParam._m0[_2062].y, _1995 * cbSceneParam._m0[_2062].x)));
        float _2090 = cbSceneParam._m0[33u].z * _2085;
        float _2092 = cbSceneParam._m0[33u].w * _2085;
        float _2095 = fma(_2007, cbSceneParam._m0[_2054].w, fma(_2003, cbSceneParam._m0[_2054].z, fma(_1999, cbSceneParam._m0[_2054].y, _1995 * cbSceneParam._m0[_2054].x))) / _2085;
        float _2143 = (cbSceneParam._m0[33u].x - sqrt(((_2009 * _2009) + (_2008 * _2008)) + (_2010 * _2010))) * cbSceneParam._m0[33u].y;
        float _4515 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2150 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2090 + _2073) / _2085, (_2092 + _2077) / _2085), _2095), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2092 + _2073) / _2085, (_2077 - _2090) / _2085), _2095), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2073 - _2090) / _2085, (_2077 - _2092) / _2085), _2095), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2073 - _2092) / _2085, (_2090 + _2077) / _2085), _2095), 0.0)).x), vec4(0.25)));
        _2157 = 1.0 - (_2150 * cbSceneParam._m0[34u].x);
        _2158 = 1.0 - (_2150 * cbSceneParam._m0[34u].y);
        _2159 = 1.0 - (_2150 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2157 = 1.0;
        _2158 = 1.0;
        _2159 = 1.0;
    }
    float _2223;
    float _2225;
    float _2227;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2211 = fma(_2007, cbSceneParam._m0[63u].w, fma(_2003, cbSceneParam._m0[63u].z, fma(_1999, cbSceneParam._m0[63u].y, _1995 * cbSceneParam._m0[63u].x)));
        float _2212 = fma(_2007, cbSceneParam._m0[60u].w, fma(_2003, cbSceneParam._m0[60u].z, fma(_1999, cbSceneParam._m0[60u].y, _1995 * cbSceneParam._m0[60u].x))) / _2211;
        float _2213 = fma(_2007, cbSceneParam._m0[61u].w, fma(_2003, cbSceneParam._m0[61u].z, fma(_1999, cbSceneParam._m0[61u].y, _1995 * cbSceneParam._m0[61u].x))) / _2211;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2212 >= cbSceneParam._m0[64u].x) && (_2213 >= cbSceneParam._m0[64u].y)) && (_2212 <= cbSceneParam._m0[64u].z)) && (_2213 <= cbSceneParam._m0[64u].w))
        {
            float _2351 = fma(_2007, cbSceneParam._m0[62u].w, fma(_2003, cbSceneParam._m0[62u].z, fma(_1999, cbSceneParam._m0[62u].y, _1995 * cbSceneParam._m0[62u].x))) / _2211;
            float _2355 = isnan(cbSceneParam._m0[41u].w) ? _2351 : (isnan(_2351) ? cbSceneParam._m0[41u].w : max(_2351, cbSceneParam._m0[41u].w));
            float _2398 = (cbSceneParam._m0[33u].x - sqrt(((_2009 * _2009) + (_2008 * _2008)) + (_2010 * _2010))) * cbSceneParam._m0[33u].y;
            float _4531 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
            float _2405 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2212, cbSceneParam._m0[33u].w + _2213), _2355), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2212, _2213 - cbSceneParam._m0[33u].z), _2355), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2212 - cbSceneParam._m0[33u].z, _2213 - cbSceneParam._m0[33u].w), _2355), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2212 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2213), _2355), 0.0)).x), vec4(0.25)));
            float _2409 = 1.0 - (_2405 * cbSceneParam._m0[34u].x);
            float _2410 = 1.0 - (_2405 * cbSceneParam._m0[34u].y);
            float _2411 = 1.0 - (_2405 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2411) ? _2159 : (isnan(_2159) ? _2411 : min(_2159, _2411));
            frontier_phi_37_36_ladder_1 = isnan(_2410) ? _2158 : (isnan(_2158) ? _2410 : min(_2158, _2410));
            frontier_phi_37_36_ladder_2 = isnan(_2409) ? _2157 : (isnan(_2157) ? _2409 : min(_2157, _2409));
        }
        else
        {
            frontier_phi_37_36_ladder = _2159;
            frontier_phi_37_36_ladder_1 = _2158;
            frontier_phi_37_36_ladder_2 = _2157;
        }
        _2223 = frontier_phi_37_36_ladder_2;
        _2225 = frontier_phi_37_36_ladder_1;
        _2227 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2223 = _2157;
        _2225 = _2158;
        _2227 = _2159;
    }
    uvec4 _2232 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2234 = _2232.x * 14u;
    uint _2235 = _2234 + 13u;
    float _2242 = _908 + (-1.0);
    float _2247 = (cbLight._m0[_2235].x * _2242) + 1.0;
    float _2248 = (cbLight._m0[_2235].y * _2242) + 1.0;
    float _2249 = (cbLight._m0[_2235].z * _2242) + 1.0;
    float _2250 = (cbLight._m0[_2235].w * _2242) + 1.0;
    uint _2251 = _2234 + 5u;
    float _2257 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
    uint _2261 = _2234 + 4u;
    float _2270 = isnan(1.0) ? _2247 : (isnan(_2247) ? 1.0 : min(_2247, 1.0));
    uint _2274 = _2234 | 1u;
    float _2285 = dot(vec3(cbLight._m0[_2234].xyz), vec3(_746, _747, _748));
    float _2288 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_746, _747, _748));
    float _4567 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _4578 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2293 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * 0.3183098733425140380859375;
    float _2295 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * 0.3183098733425140380859375;
    float _2302 = ((cbLight._m0[_2251].x * _2257) * _2295) + (((cbLight._m0[_2261].x * _2223) * _2270) * _2293);
    float _2303 = ((_2257 * cbLight._m0[_2251].y) * _2295) + (((cbLight._m0[_2261].y * _2225) * _2270) * _2293);
    float _2304 = ((_2257 * cbLight._m0[_2251].z) * _2295) + (((cbLight._m0[_2261].z * _2227) * _2270) * _2293);
    uvec4 _2308 = floatBitsToUint(cbLight._m0[_2234 + 12u]);
    bool _2310 = _2308.x == 0u;
    float _2412;
    float _2414;
    float _2416;
    if (_2310)
    {
        _2412 = _2302;
        _2414 = _2303;
        _2416 = _2304;
    }
    else
    {
        uint _2420 = _2234 + 6u;
        float _2436 = (dot(vec3(cbLight._m0[_2234 + 2u].xyz), vec3(_746, _747, _748)) * 0.5) + 0.5;
        float _2437 = _2436 * _2436;
        float _4589 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2438 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _2439 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
        _2412 = (((cbLight._m0[_2420].x * 0.3183098733425140380859375) * _2438) * _2439) + _2302;
        _2414 = (((cbLight._m0[_2420].y * 0.3183098733425140380859375) * _2438) * _2439) + _2303;
        _2416 = (((cbLight._m0[_2420].z * 0.3183098733425140380859375) * _2438) * _2439) + _2304;
    }
    bool _2419 = _2308.y == 0u;
    float _2474;
    float _2476;
    float _2478;
    if (_2419)
    {
        _2474 = _2412;
        _2476 = _2414;
        _2478 = _2416;
    }
    else
    {
        uint _2636 = _2234 + 7u;
        float _2652 = (dot(vec3(cbLight._m0[_2234 + 3u].xyz), vec3(_746, _747, _748)) * 0.5) + 0.5;
        float _2653 = _2652 * _2652;
        float _4605 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2654 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2655 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
        _2474 = (((cbLight._m0[_2636].x * 0.3183098733425140380859375) * _2654) * _2655) + _2412;
        _2476 = (((cbLight._m0[_2636].y * 0.3183098733425140380859375) * _2654) * _2655) + _2414;
        _2478 = (((cbLight._m0[_2636].z * 0.3183098733425140380859375) * _2654) * _2655) + _2416;
    }
    uint _2481 = _2234 + 8u;
    float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2234].w)) * _749) * 0.949999988079071044921875);
    float _2495 = _2494 * _2494;
    float _2496 = cbLight._m0[_2234].x + _825;
    float _2497 = cbLight._m0[_2234].y + _826;
    float _2498 = cbLight._m0[_2234].z + _827;
    float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
    float _2503 = _2502 * _2496;
    float _2504 = _2502 * _2497;
    float _2505 = _2502 * _2498;
    float _2506 = dot(vec3(_746, _747, _748), vec3(cbLight._m0[_2234].xyz));
    float _4621 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    float _4632 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _2510 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _2511 = dot(vec3(_746, _747, _748), vec3(_2503, _2504, _2505));
    float _4643 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2514 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2515 = dot(vec3(cbLight._m0[_2234].xyz), vec3(_2503, _2504, _2505));
    float _4654 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2519 = _2495 * _2495;
    float _2523 = ((_2514 * _2514) * (_2519 + (-1.0))) + 1.0;
    float _2534 = (exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2535 = 1.0 - _2495;
    float _2546 = (0.5 / (((_2510 * ((_2509 * _2535) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2510 * _2535) + _2495) * _2509))) * _2509;
    float _4665 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2548 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2519 / ((_2523 * _2523) * 3.141590118408203125));
    uint _2562 = _2234 + 9u;
    float _2573 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _749) * 0.949999988079071044921875);
    float _2574 = _2573 * _2573;
    float _2575 = cbLight._m0[_2274].x + _825;
    float _2576 = cbLight._m0[_2274].y + _826;
    float _2577 = cbLight._m0[_2274].z + _827;
    float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
    float _2582 = _2581 * _2575;
    float _2583 = _2581 * _2576;
    float _2584 = _2581 * _2577;
    float _2585 = dot(vec3(_746, _747, _748), vec3(cbLight._m0[_2274].xyz));
    float _4676 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2588 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
    float _2589 = dot(vec3(_746, _747, _748), vec3(_2582, _2583, _2584));
    float _4687 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2592 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _2593 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2582, _2583, _2584));
    float _4698 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2597 = _2574 * _2574;
    float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
    float _2610 = (exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2611 = 1.0 - _2574;
    float _2621 = (0.5 / (((_2510 * ((_2588 * _2611) + _2574)) + 9.9999999392252902907785028219223e-09) + (((_2510 * _2611) + _2574) * _2588))) * _2588;
    float _4709 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2623 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
    float _2633 = (((_2610 * cbLight._m0[_2562].x) * _2623) * _2257) + ((((cbLight._m0[_2481].x * _2223) * _2534) * _2548) * _2270);
    float _2634 = (((_2610 * cbLight._m0[_2562].y) * _2623) * _2257) + ((((cbLight._m0[_2481].y * _2225) * _2534) * _2548) * _2270);
    float _2635 = (((_2610 * cbLight._m0[_2562].z) * _2623) * _2257) + ((((cbLight._m0[_2481].z * _2227) * _2534) * _2548) * _2270);
    float _2691;
    float _2693;
    float _2695;
    if (_2310)
    {
        _2691 = _2633;
        _2693 = _2634;
        _2695 = _2635;
    }
    else
    {
        uint _2697 = _2234 + 2u;
        uint _2701 = _2234 + 10u;
        float _2715 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2697].w)) * _749) * 0.949999988079071044921875);
        float _2716 = _2715 * _2715;
        float _2717 = cbLight._m0[_2697].x + _825;
        float _2718 = cbLight._m0[_2697].y + _826;
        float _2719 = cbLight._m0[_2697].z + _827;
        float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
        float _2724 = _2723 * _2717;
        float _2725 = _2723 * _2718;
        float _2726 = _2723 * _2719;
        float _2727 = dot(vec3(_746, _747, _748), vec3(cbLight._m0[_2697].xyz));
        float _4720 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2730 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2731 = dot(vec3(_746, _747, _748), vec3(_2724, _2725, _2726));
        float _4731 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2734 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _2735 = dot(vec3(cbLight._m0[_2697].xyz), vec3(_2724, _2725, _2726));
        float _4742 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2739 = _2716 * _2716;
        float _2743 = ((_2734 * _2734) * (_2739 + (-1.0))) + 1.0;
        float _2752 = (exp2(log2(1.0 - (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2753 = 1.0 - _2716;
        float _2763 = (0.5 / (((_2510 * ((_2730 * _2753) + _2716)) + 9.9999999392252902907785028219223e-09) + (((_2510 * _2753) + _2716) * _2730))) * _2730;
        float _4753 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2765 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2739 / ((_2743 * _2743) * 3.141590118408203125));
        float _2766 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
        _2691 = (((_2752 * cbLight._m0[_2701].x) * _2765) * _2766) + _2633;
        _2693 = (((_2752 * cbLight._m0[_2701].y) * _2765) * _2766) + _2634;
        _2695 = (((_2752 * cbLight._m0[_2701].z) * _2765) * _2766) + _2635;
    }
    float _2797;
    float _2799;
    float _2801;
    if (_2419)
    {
        _2797 = _2691;
        _2799 = _2693;
        _2801 = _2695;
    }
    else
    {
        uint _2808 = _2234 + 3u;
        uint _2812 = _2234 + 11u;
        float _2826 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2808].w)) * _749) * 0.949999988079071044921875);
        float _2827 = _2826 * _2826;
        float _2828 = cbLight._m0[_2808].x + _825;
        float _2829 = cbLight._m0[_2808].y + _826;
        float _2830 = cbLight._m0[_2808].z + _827;
        float _2834 = inversesqrt(dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830)));
        float _2835 = _2834 * _2828;
        float _2836 = _2834 * _2829;
        float _2837 = _2834 * _2830;
        float _2838 = dot(vec3(_746, _747, _748), vec3(cbLight._m0[_2808].xyz));
        float _4769 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2841 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _2842 = dot(vec3(_746, _747, _748), vec3(_2835, _2836, _2837));
        float _4780 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2845 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2846 = dot(vec3(cbLight._m0[_2808].xyz), vec3(_2835, _2836, _2837));
        float _4791 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2850 = _2827 * _2827;
        float _2854 = ((_2845 * _2845) * (_2850 + (-1.0))) + 1.0;
        float _2863 = (exp2(log2(1.0 - (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2864 = 1.0 - _2827;
        float _2874 = (0.5 / (((_2510 * ((_2841 * _2864) + _2827)) + 9.9999999392252902907785028219223e-09) + (((_2510 * _2864) + _2827) * _2841))) * _2841;
        float _4802 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2876 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2850 / ((_2854 * _2854) * 3.141590118408203125));
        float _2877 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
        _2797 = (((_2863 * cbLight._m0[_2812].x) * _2876) * _2877) + _2691;
        _2799 = (((_2863 * cbLight._m0[_2812].y) * _2876) * _2877) + _2693;
        _2801 = (((_2863 * cbLight._m0[_2812].z) * _2876) * _2877) + _2695;
    }
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    if (_2232.y == 0u)
    {
        uvec4 _2898 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2899 = _2898.x;
        uint _2910 = uint((float(_2898.y) * floor(float(uint(cbSceneParam._m0[85u].y * _846) / _2899))) + floor(float(uint(cbSceneParam._m0[85u].x * _845) / _2899)));
        float _2920 = (log2(_2010 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2921 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        uint _2924 = uint(isnan(14.0) ? _2921 : (isnan(_2921) ? 14.0 : min(_2921, 14.0)));
        uvec4 _2929 = texelFetch(g_lightClusterGridBuffer, int(((_2924 << 2u) + (_2910 << 6u)) >> 2u));
        uint _2930 = _2929.x;
        uint _2931 = _2898.z;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        if (((((1u << ((_2931 >> 4u) & 15u)) + 4294967295u) & _2930) == 0u) || ((_2931 & 240u) == 0u))
        {
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
            _3020 = 0.0;
        }
        else
        {
            float _3011;
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3021;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            uint _3168 = 0u;
            uint _3177;
            bool _3178;
            for (;;)
            {
                _3177 = texelFetch(g_lightClassification, int((((_2924 << 5u) + (_2910 << 9u)) + (_3168 << 2u)) >> 2u)).x;
                _3178 = _3177 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3178)
                {
                    frontier_phi_71_pred = _3167;
                    frontier_phi_71_pred_1 = _3166;
                    frontier_phi_71_pred_2 = _3165;
                    frontier_phi_71_pred_3 = _3164;
                    frontier_phi_71_pred_4 = _3163;
                    frontier_phi_71_pred_5 = _3162;
                }
                else
                {
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    uint _3313;
                    _3307 = _3162;
                    _3308 = _3163;
                    _3309 = _3164;
                    _3310 = _3165;
                    _3311 = _3166;
                    _3312 = _3167;
                    _3313 = _3177;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    for (;;)
                    {
                        uint _3317 = uint(findLSB(_3313)) + (_3168 << 5u);
                        uint _3314 = (_3313 + 4294967295u) & _3313;
                        uint _3319 = _3317 * 48u;
                        vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3319)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 3u)).x));
                        uint _3339 = (_3317 * 48u) + 4u;
                        vec4 _3352 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3339)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 3u)).x));
                        uint _3358 = (_3317 * 48u) + 8u;
                        vec3 _3369 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3358)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3358 + 2u)).x));
                        float _3373 = _3333.x - _2008;
                        float _3374 = _3333.y - _2009;
                        float _3375 = _3333.z - _2010;
                        float _3376 = dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375));
                        float _3379 = inversesqrt(_3376);
                        float _3380 = _3379 * _3373;
                        float _3381 = _3379 * _3374;
                        float _3382 = _3379 * _3375;
                        float _3383 = dot(vec3(_864, _867, _870), vec3(_3380, _3381, _3382));
                        float _3388 = 1.0 - (_3376 * _3333.w);
                        float _4828 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3389 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
                        float _3390 = sqrt(_3376) * _3352.w;
                        float _3393 = 1.39999997615814208984375 / (_3390 + 1.39999997615814208984375);
                        float _3394 = _3393 * _3393;
                        float _3397 = ((1.0 - _3394) * _3383) + _3394;
                        float _3400 = _3390 * _3390;
                        float _3404 = ((isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0))) * _3389) / ((_3400 * 0.699999988079071044921875) + 1.0);
                        float _3408 = (-0.0) - _2008;
                        float _3409 = (-0.0) - _2009;
                        float _3410 = (-0.0) - _2010;
                        float _3414 = inversesqrt(dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410)));
                        float _3415 = _3414 * _3408;
                        float _3416 = _3414 * _3409;
                        float _3417 = _3414 * _3410;
                        float _3424 = exp2(log2(1.0 / ((_3400 * 3.5) + 5.0)) * 0.25);
                        float _3425 = 1.0 - _924;
                        float _3432 = sqrt(1.0 - ((1.0 - (_3425 * _3425)) * (1.0 - (_3424 * _3424))));
                        float _3433 = _3432 * _3432;
                        float _3434 = _3433 * _3433;
                        float _3435 = _3415 + _3380;
                        float _3436 = _3416 + _3381;
                        float _3437 = _3417 + _3382;
                        float _3441 = inversesqrt(dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437)));
                        float _3445 = dot(vec3(_864, _867, _870), vec3(_3415, _3416, _3417));
                        float _4844 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3448 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                        float _3449 = dot(vec3(_864, _867, _870), vec3(_3441 * _3435, _3441 * _3436, _3441 * _3437));
                        float _4855 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3452 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                        float _3456 = ((_3452 * _3452) * (_3434 + (-1.0))) + 1.0;
                        float _3457 = _3393 * _3433;
                        float _3458 = _3457 * _3457;
                        float _3461 = ((1.0 - _3458) * _3383) + _3458;
                        float _4866 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3462 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                        float _3463 = 1.0 - _3433;
                        float _3473 = (0.5 / (((_3462 * ((_3448 * _3463) + _3433)) + 9.9999999392252902907785028219223e-09) + (((_3462 * _3463) + _3433) * _3448))) * _3462;
                        float _4877 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3484 = (((_3434 * 3.1415927410125732421875) * (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) / ((_3456 * _3456) * ((_3400 * 2.1991131305694580078125) + 3.141590118408203125))) * _3389;
                        _3237 = (_3404 * _3352.x) + _3310;
                        _3238 = (_3404 * _3352.y) + _3311;
                        _3239 = (_3404 * _3352.z) + _3312;
                        _3234 = (_3484 * _3369.x) + _3307;
                        _3235 = (_3484 * _3369.y) + _3308;
                        _3236 = (_3484 * _3369.z) + _3309;
                        if (_3314 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3307 = _3234;
                            _3308 = _3235;
                            _3309 = _3236;
                            _3310 = _3237;
                            _3311 = _3238;
                            _3312 = _3239;
                            _3313 = _3314;
                        }
                    }
                    frontier_phi_71_pred = _3239;
                    frontier_phi_71_pred_1 = _3238;
                    frontier_phi_71_pred_2 = _3237;
                    frontier_phi_71_pred_3 = _3236;
                    frontier_phi_71_pred_4 = _3235;
                    frontier_phi_71_pred_5 = _3234;
                }
                _3021 = frontier_phi_71_pred;
                _3019 = frontier_phi_71_pred_1;
                _3017 = frontier_phi_71_pred_2;
                _3015 = frontier_phi_71_pred_3;
                _3013 = frontier_phi_71_pred_4;
                _3011 = frontier_phi_71_pred_5;
                uint _3169 = _3168 + 1u;
                if (_3169 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3162 = _3011;
                    _3163 = _3013;
                    _3164 = _3015;
                    _3165 = _3017;
                    _3166 = _3019;
                    _3167 = _3021;
                    _3168 = _3169;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
            _3020 = _3021;
        }
        uvec4 _3024 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3025 = _3024.z;
        uint _3027 = (_3025 >> 8u) & 15u;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        if (((4294967295u << _3027) & _2930) == 0u)
        {
            _3130 = _3010;
            _3132 = _3012;
            _3134 = _3014;
            _3136 = _3016;
            _3138 = _3018;
            _3140 = _3020;
        }
        else
        {
            float _3155 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
            float _3156 = _3155 * _2008;
            float _3157 = _3155 * _2009;
            float _3158 = _3155 * _2010;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3027 < ((_3025 >> 12u) & 15u))
            {
                float _3131;
                float _3133;
                float _3135;
                float _3137;
                float _3139;
                float _3141;
                float _3290 = _3010;
                float _3291 = _3012;
                float _3292 = _3014;
                float _3293 = _3016;
                float _3294 = _3018;
                float _3295 = _3020;
                uint _3296 = _3027;
                uint _3305;
                bool _3306;
                for (;;)
                {
                    _3305 = texelFetch(g_lightClassification, int((((_2924 << 5u) + (_2910 << 9u)) + (_3296 << 2u)) >> 2u)).x;
                    _3306 = _3305 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3306)
                    {
                        frontier_phi_82_pred = _3295;
                        frontier_phi_82_pred_1 = _3294;
                        frontier_phi_82_pred_2 = _3293;
                        frontier_phi_82_pred_3 = _3292;
                        frontier_phi_82_pred_4 = _3291;
                        frontier_phi_82_pred_5 = _3290;
                    }
                    else
                    {
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3792;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3511 = _3290;
                        float _3512 = _3291;
                        float _3513 = _3292;
                        float _3514 = _3293;
                        float _3515 = _3294;
                        float _3516 = _3295;
                        uint _3517 = _3305;
                        uint _3518;
                        vec4 _3543;
                        float _3544;
                        vec4 _3559;
                        vec3 _3571;
                        vec4 _3586;
                        vec4 _3602;
                        float _3648;
                        bool _3649;
                        for (;;)
                        {
                            uint _3528 = ((_3296 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3517));
                            _3518 = (_3517 + 4294967295u) & _3517;
                            uint _3530 = _3528 * 40u;
                            _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            _3544 = _3543.w;
                            uint _3546 = (_3528 * 40u) + 4u;
                            _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            uint _3561 = (_3528 * 40u) + 8u;
                            _3571 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x));
                            uint _3573 = (_3528 * 40u) + 16u;
                            _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            uint _3589 = (_3528 * 40u) + 20u;
                            _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            uint _3604 = (_3528 * 40u) + 24u;
                            vec4 _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            uint _3623 = (_3528 * 40u) + 28u;
                            vec4 _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            _3648 = fma(_2010, _3636.z, fma(_2009, _3636.y, _3636.x * _2008)) + _3636.w;
                            _3649 = !((fma(_2010, _3617.z, fma(_2009, _3617.y, _3617.x * _2008)) + _3617.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3649)
                            {
                                float _3676 = _3543.x - _2008;
                                float _3677 = _3543.y - _2009;
                                float _3678 = _3543.z - _2010;
                                float _3679 = dot(vec3(_3676, _3677, _3678), vec3(_3676, _3677, _3678));
                                float _3682 = inversesqrt(_3679);
                                float _3683 = _3682 * _3676;
                                float _3684 = _3682 * _3677;
                                float _3685 = _3682 * _3678;
                                float _3689 = 1.0 - (_3679 / (_3544 * _3544));
                                float _4888 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3690 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                                float _3694 = sqrt(_3679) * _3559.w;
                                float _3696 = 1.39999997615814208984375 / (_3694 + 1.39999997615814208984375);
                                float _3697 = _3696 * _3696;
                                float _3700 = ((1.0 - _3697) * dot(vec3(_3683, _3684, _3685), vec3(_864, _867, _870))) + _3697;
                                float _3703 = _3694 * _3694;
                                float _3707 = (fma(_2010, _3586.z, fma(_2009, _3586.y, _3586.x * _2008)) + _3586.w) / _3648;
                                float _3708 = (fma(_2010, _3602.z, fma(_2009, _3602.y, _3602.x * _2008)) + _3602.w) / _3648;
                                float _3712 = 1.0 - dot(vec2(_3707, _3708), vec2(_3707, _3708));
                                float _4904 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3713 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                                float _3714 = _3713 * (((isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0))) * _3690) / ((_3703 * 0.699999988079071044921875) + 1.0));
                                float _3726 = exp2(log2(1.0 / ((_3703 * 3.5) + 5.0)) * 0.25);
                                float _3727 = 1.0 - _924;
                                float _3734 = sqrt(1.0 - ((1.0 - (_3727 * _3727)) * (1.0 - (_3726 * _3726))));
                                float _3735 = _3734 * _3734;
                                float _3736 = _3735 * _3735;
                                float _3737 = _3683 - _3156;
                                float _3738 = _3684 - _3157;
                                float _3739 = _3685 - _3158;
                                float _3743 = inversesqrt(dot(vec3(_3737, _3738, _3739), vec3(_3737, _3738, _3739)));
                                float _3747 = dot(vec3(_864, _867, _870), vec3((-0.0) - _3156, (-0.0) - _3157, (-0.0) - _3158));
                                float _4915 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3750 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                                float _3751 = dot(vec3(_864, _867, _870), vec3(_3743 * _3737, _3743 * _3738, _3743 * _3739));
                                float _4926 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3754 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                                float _3758 = ((_3754 * _3754) * (_3736 + (-1.0))) + 1.0;
                                float _3759 = _3696 * _3735;
                                float _3760 = _3759 * _3759;
                                float _3766 = ((1.0 - _3760) * dot(vec3(_864, _867, _870), vec3(_3683, _3684, _3685))) + _3760;
                                float _4937 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3767 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                                float _3768 = 1.0 - _3735;
                                float _3778 = (0.5 / (((_3767 * ((_3750 * _3768) + _3735)) + 9.9999999392252902907785028219223e-09) + (((_3767 * _3768) + _3735) * _3750))) * _3767;
                                float _4948 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3788 = (_3713 * _3690) * (((_3736 * 3.1415927410125732421875) * (isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0)))) / ((_3758 * _3758) * ((_3703 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3714 * _3559.z;
                                frontier_phi_88_pred_1 = _3714 * _3559.y;
                                frontier_phi_88_pred_2 = _3714 * _3559.x;
                                frontier_phi_88_pred_3 = _3788 * _3571.z;
                                frontier_phi_88_pred_4 = _3788 * _3571.y;
                                frontier_phi_88_pred_5 = _3788 * _3571.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3797 = frontier_phi_88_pred;
                            _3796 = frontier_phi_88_pred_1;
                            _3795 = frontier_phi_88_pred_2;
                            _3794 = frontier_phi_88_pred_3;
                            _3793 = frontier_phi_88_pred_4;
                            _3792 = frontier_phi_88_pred_5;
                            _3501 = _3795 + _3514;
                            _3502 = _3796 + _3515;
                            _3503 = _3797 + _3516;
                            _3498 = _3792 + _3511;
                            _3499 = _3793 + _3512;
                            _3500 = _3794 + _3513;
                            if (_3518 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3518;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3503;
                        frontier_phi_82_pred_1 = _3502;
                        frontier_phi_82_pred_2 = _3501;
                        frontier_phi_82_pred_3 = _3500;
                        frontier_phi_82_pred_4 = _3499;
                        frontier_phi_82_pred_5 = _3498;
                    }
                    _3141 = frontier_phi_82_pred;
                    _3139 = frontier_phi_82_pred_1;
                    _3137 = frontier_phi_82_pred_2;
                    _3135 = frontier_phi_82_pred_3;
                    _3133 = frontier_phi_82_pred_4;
                    _3131 = frontier_phi_82_pred_5;
                    uint _3297 = _3296 + 1u;
                    if (_3297 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3290 = _3131;
                        _3291 = _3133;
                        _3292 = _3135;
                        _3293 = _3137;
                        _3294 = _3139;
                        _3295 = _3141;
                        _3296 = _3297;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3137;
                frontier_phi_63_64_ladder_1 = _3141;
                frontier_phi_63_64_ladder_2 = _3139;
                frontier_phi_63_64_ladder_3 = _3135;
                frontier_phi_63_64_ladder_4 = _3133;
                frontier_phi_63_64_ladder_5 = _3131;
            }
            else
            {
                frontier_phi_63_64_ladder = _3016;
                frontier_phi_63_64_ladder_1 = _3020;
                frontier_phi_63_64_ladder_2 = _3018;
                frontier_phi_63_64_ladder_3 = _3014;
                frontier_phi_63_64_ladder_4 = _3012;
                frontier_phi_63_64_ladder_5 = _3010;
            }
            _3130 = frontier_phi_63_64_ladder_5;
            _3132 = frontier_phi_63_64_ladder_4;
            _3134 = frontier_phi_63_64_ladder_3;
            _3136 = frontier_phi_63_64_ladder;
            _3138 = frontier_phi_63_64_ladder_2;
            _3140 = frontier_phi_63_64_ladder_1;
        }
        float _3145 = isnan(1.0) ? _908 : (isnan(_908) ? 1.0 : min(_908, 1.0));
        _2943 = (_3145 * _3136) + _2474;
        _2945 = (_3145 * _3138) + _2476;
        _2947 = (_3145 * _3140) + _2478;
        _2949 = ((_3130 * 0.039999999105930328369140625) * _3145) + _2797;
        _2951 = ((_3132 * 0.039999999105930328369140625) * _3145) + _2799;
        _2953 = ((_3134 * 0.039999999105930328369140625) * _3145) + _2801;
    }
    else
    {
        _2943 = _2474;
        _2945 = _2476;
        _2947 = _2478;
        _2949 = _2797;
        _2951 = _2799;
        _2953 = _2801;
    }
    float _4964 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _4975 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _4986 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _2970 = ((isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0))) * (_2943 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _908))) + ((_2949 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1744)) * cbPerFrame._m0[3u].x);
    float _2971 = ((isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * (_2945 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _908))) + ((_2951 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1744)) * cbPerFrame._m0[3u].x);
    float _2972 = ((isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0))) * (_2947 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _908))) + ((_2953 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1744)) * cbPerFrame._m0[3u].x);
    uint _2973 = _251 + 6u;
    float _2981 = _845 / cbSceneParam._m0[86u].x;
    float _2982 = _846 / cbSceneParam._m0[86u].y;
    vec4 _2996 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, (log2((isnan(cbSceneParam._m0[77u].w) ? _767 : (isnan(_767) ? cbSceneParam._m0[77u].w : min(_767, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2998 = _2996.x;
    float _2999 = _2996.y;
    float _3000 = _2996.z;
    float _3001 = _2996.w;
    float _3072;
    float _3074;
    float _3076;
    float _3078;
    if (_767 > cbSceneParam._m0[78u].w)
    {
        float _3035 = isnan(_767) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _767 : min(cbSceneParam._m0[80u].w, _767));
        float _3036 = _3035 / _767;
        float _3047 = _3036 * _818;
        float _3048 = _819 * _3036;
        float _3049 = (-0.0) - _3048;
        float _3050 = _3036 * _820;
        float _3052 = (cbSceneParam._m0[77u].w * _3049) / _3035;
        float _3053 = _3052 + cbSceneParam._m0[79u].w;
        float _3054 = cbSceneParam._m0[79u].w - _3048;
        float _3060 = sqrt(((_3047 * _3047) + (_3048 * _3048)) + (_3050 * _3050));
        float _3063 = (1.0 - (cbSceneParam._m0[77u].w / _3035)) * _3060;
        float _3068 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3070 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3247;
        if (abs((_3049 - _3052) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3247 = ((((_3053 > 0.0) ? exp2(_3068 * _3053) : (2.0 - exp2(_3070 * _3053))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3063;
        }
        else
        {
            float _3191 = 1.0 / cbSceneParam._m0[80u].x;
            float _3192 = isnan(_3054) ? _3053 : (isnan(_3053) ? _3054 : max(_3053, _3054));
            float _3193 = isnan(_3054) ? _3053 : (isnan(_3053) ? _3054 : min(_3053, _3054));
            float _3202 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : min(_3192, 0.0));
            float _3203 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : min(_3193, 0.0));
            _3247 = ((abs(_3060 / _3049) * cbSceneParam._m0[80u].y) * ((((_3202 - _3203) * 2.0) - ((exp2(_3068 * (isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0)))) - exp2(_3068 * (isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0))))) * _3191)) - ((exp2(_3070 * _3202) - exp2(_3070 * _3203)) * _3191))) + (_3063 * cbSceneParam._m0[80u].z);
        }
        vec4 _3249 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, 1.0), 0.0);
        float _3258 = exp2((_3247 * (-1.44269502162933349609375)) * (1.0 - _3249.w));
        float _3259 = log2(_3258);
        float _3275 = log2(_3001);
        _3072 = (exp2(_3275 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3259 * cbSceneParam._m0[78u].x)) * _3249.x) / cbSceneParam._m0[78u].x)) + _2998;
        _3074 = (exp2(_3275 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3259 * cbSceneParam._m0[78u].y)) * _3249.y) / cbSceneParam._m0[78u].y)) + _2999;
        _3076 = (exp2(_3275 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3259 * cbSceneParam._m0[78u].z)) * _3249.z) / cbSceneParam._m0[78u].z)) + _3000;
        _3078 = _3258 * _3001;
    }
    else
    {
        _3072 = _2998;
        _3074 = _2999;
        _3076 = _3000;
        _3078 = _3001;
    }
    bool _3285;
    vec4 _3088;
    vec4 _3110;
    float _3112;
    float _3116;
    float _3117;
    float _3118;
    float _3119;
    bool _3129;
    for (;;)
    {
        _3088 = cbMatDynParam._m0[0u];
        float _3090 = roundEven(_3088.y);
        bool _3091 = _3090 == 3.0;
        float _3092 = log2(_3078);
        float _3099 = exp2(_3092 * cbSceneParam._m0[78u].x) * _2970;
        float _3100 = exp2(_3092 * cbSceneParam._m0[78u].y) * _2971;
        float _3101 = exp2(_3092 * cbSceneParam._m0[78u].z) * _2972;
        float _3108 = _834 + (-0.5);
        _3110 = cbMtdParam._m0[1u];
        _3112 = _3110.y * _3108;
        float _3115 = (_3090 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3116 = _3115 * (_3091 ? _3099 : (_3099 + (cbSceneParam._m0[72u].w * _3072)));
        _3117 = _3115 * (_3091 ? _3100 : (_3100 + (cbSceneParam._m0[72u].w * _3074)));
        _3118 = _3115 * (_3091 ? _3101 : (_3101 + (cbSceneParam._m0[72u].w * _3076)));
        _3119 = _3108 * 0.999000012874603271484375;
        _3129 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3129)
        {
            if ((cbInstanceData._m0[_251 + 7u].x + _3119) < 0.5)
            {
                _3285 = true;
                break;
            }
        }
        uint _3226 = _883 + uint(_3088.w);
        if ((cbInstanceData._m0[_3226].w < 1.0) && ((cbInstanceData._m0[_3226].w + _3119) < 0.5))
        {
            _3285 = true;
            break;
        }
        if ((_3112 + 1.0) < _3110.x)
        {
            _3285 = true;
            break;
        }
        _3285 = false;
        break;
    }
    float _3489;
    if (_3285)
    {
        discard_state = true;
        _3489 = 0.0;
    }
    else
    {
        _3489 = cbInstanceData._m0[_2973].w;
    }
    SV_Target.x = _3116;
    SV_Target.y = _3117;
    SV_Target.z = _3118;
    SV_Target.w = _3489;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2973].w;
    discard_exit();
}


