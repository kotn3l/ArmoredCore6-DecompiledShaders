#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1191;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3780 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3791 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3802 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    uint _262 = uint(roundEven(NORMAL.w)) * 13u;
    uint _267 = _262 + 1u;
    uint _271 = _262 + 2u;
    float _280 = sqrt(((cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x)) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x));
    float _281 = _280 * TEXCOORD.z;
    float _282 = _280 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _281) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _282) + cbTextureTilingScale._m0[13u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _324 = _319.x * cbMtdParam._m0[11u].x;
    float _325 = _319.y * cbMtdParam._m0[11u].y;
    float _326 = _319.z * cbMtdParam._m0[11u].z;
    vec4 _345 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _281) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _282) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _393 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _410 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_383 - _393) * cbMtdParam._m0[24u].x) + _393) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3813 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _418 = (_411 * ((_345.x * cbMtdParam._m0[12u].x) - _324)) + _324;
    float _419 = (_411 * ((_345.y * cbMtdParam._m0[12u].y) - _325)) + _325;
    float _420 = (_411 * ((_345.z * cbMtdParam._m0[12u].z) - _326)) + _326;
    float _424 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _295.x) * _418;
    float _427 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _295.y) * _419;
    float _430 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _295.z) * _420;
    float _437 = ((_418 - _424) * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) + _424;
    float _438 = ((_419 - _427) * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) + _427;
    float _439 = ((_420 - _430) * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) + _430;
    vec4 _457 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _281) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _282) + cbTextureTilingScale._m0[20u].w));
    vec4 _484 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _281) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _282) + cbTextureTilingScale._m0[4u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _503 = _501.x;
    float _504 = _501.y;
    float _505 = _501.z;
    float _514 = ((_484.z - _505) * _411) + _505;
    float _517 = ((((_484.x - _503) * _411) + _503) * 2.0) + (-1.0);
    float _518 = ((((_484.y - _504) * _411) + _504) * 2.0) + (-1.0);
    float _519 = dot(vec2(_517, _518), vec2(_517, _518));
    float _3824 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _524 = sqrt(1.0 - (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))));
    float _527 = _517 + ((((_457.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _528 = _518 + ((((_457.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _531 = fma(_524, _229, fma(_528, _236, _527 * _222));
    float _534 = fma(_524, _230, fma(_528, _237, _527 * _223));
    float _537 = fma(_524, _231, fma(_528, _238, _527 * _224));
    float _541 = inversesqrt(dot(vec3(_531, _534, _537), vec3(_531, _534, _537)));
    vec4 _557 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _585 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _281) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _282) + cbTextureTilingScale._m0[11u].w));
    float _587 = _585.x;
    float _588 = 1.0 - _587;
    float _594 = (cbMtdParam._m0[19u].x + dot(vec4(_541 * _531, _541 * _534, _541 * _537, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_587 - _588) * cbMtdParam._m0[24u].z) + _588) * cbMtdParam._m0[21u].z);
    float _3835 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _602 = (_595 * (cbMtdParam._m0[17u].x - _437)) + _437;
    float _603 = (_595 * (cbMtdParam._m0[17u].y - _438)) + _438;
    float _604 = (_595 * (cbMtdParam._m0[17u].z - _439)) + _439;
    float _609 = (((_457.z - _514) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _514;
    vec4 _622 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _281) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _282) + cbTextureTilingScale._m0[15u].w));
    float _629 = (_622.x * 2.0) + (-1.0);
    float _630 = (_622.y * 2.0) + (-1.0);
    float _631 = dot(vec2(_629, _630), vec2(_629, _630));
    float _3846 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _639 = ((_622.z - _609) * _595) + _609;
    float _649 = ((sqrt(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) - _524) * _595) + _524;
    float _652 = (((_629 - _527) * _595) + _527) + (cbMtdParam._m0[21u].x * _527);
    float _653 = (((_630 - _528) * _595) + _528) + (cbMtdParam._m0[21u].x * _528);
    float _655 = cbMtdParam._m0[22u].x + _557.w;
    float _658 = fma(_649, _229, fma(_653, _236, _652 * _222));
    float _661 = fma(_649, _230, fma(_653, _237, _652 * _223));
    float _664 = fma(_649, _231, fma(_653, _238, _652 * _224));
    float _668 = inversesqrt(dot(vec3(_658, _661, _664), vec3(_658, _661, _664)));
    float _669 = _668 * _658;
    float _670 = _668 * _661;
    float _671 = _668 * _664;
    float _3857 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _672 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _3879 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3890 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3901 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _690 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _742 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _732);
    float _743 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _732);
    float _744 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _732);
    float _748 = inversesqrt(dot(vec3(_742, _743, _744), vec3(_742, _743, _744)));
    float _749 = _742 * _748;
    float _750 = _743 * _748;
    float _751 = _744 * _748;
    float _757 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _758 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _776 = fma(_671, cbSceneParam._m0[5u].z, fma(_670, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _669));
    float _779 = fma(_671, cbSceneParam._m0[6u].z, fma(_670, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _669));
    float _782 = fma(_671, cbSceneParam._m0[7u].z, fma(_670, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _669));
    uint _796 = (_262 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _802 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * cbInstanceData._m0[_796].x;
    float _803 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * cbInstanceData._m0[_796].y;
    float _804 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_796].z;
    float _3912 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    vec4 _816 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _757, cbSceneParam._m0[86u].y * _758));
    float _820 = ((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * TEXCOORD_5.w) * _816.x;
    float _821 = dot(vec3(_669, _670, _671), vec3(_749, _750, _751));
    float _824 = _821 * 2.0;
    float _828 = (_824 * _669) - _749;
    float _829 = (_824 * _670) - _750;
    float _830 = (_824 * _671) - _751;
    float _834 = abs(dot(vec3(_749, _750, _751), vec3(_669, _670, _671)));
    float _3945 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _836 = sqrt(_672);
    float _849 = exp2((_836 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_836 * 3.0));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1190;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _915 = fma(_889, cbModelParam._m0[26u].z, fma(_885, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881));
        float _919 = fma(_889, cbModelParam._m0[27u].z, fma(_885, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881));
        float _923 = fma(_889, cbModelParam._m0[28u].z, fma(_885, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881));
        float _948 = _881 + _669;
        float _949 = _885 + _670;
        float _950 = _889 + _671;
        float _960 = fma(_950, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _948)) - _915;
        float _961 = fma(_950, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _948)) - _919;
        float _962 = fma(_950, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _948)) - _923;
        float _966 = inversesqrt(dot(vec3(_960, _961, _962), vec3(_960, _961, _962)));
        float _979 = ((_966 * _960) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_915 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _980 = ((_966 * _961) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_919 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_966 * _962) / cbModelParam._m0[34u].z) + ((((((_923 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        float _1018 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_984.x + (-0.5));
        float _1020 = _1018 * (_984.y + (-0.5));
        float _1021 = _1018 * (_984.z + (-0.5));
        float _1028 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_991.x + (-0.5));
        float _1030 = _1028 * (_991.y + (-0.5));
        float _1031 = _1028 * (_991.z + (-0.5));
        float _1038 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_998.x + (-0.5));
        float _1040 = _1038 * (_998.y + (-0.5));
        float _1041 = _1038 * (_998.z + (-0.5));
        float _1048 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1005.x + (-0.5));
        float _1050 = _1048 * (_1005.y + (-0.5));
        float _1051 = _1048 * (_1005.z + (-0.5));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = _1019 * 0.5;
        float _1056 = _1029 * 0.5;
        float _1057 = _1039 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1072 = (dot(vec3(_669, _670, _671), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1082 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3993 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1084 + 1.0))) + _1089) * _1052;
        float _1099 = _1020 * 0.5;
        float _1100 = _1030 * 0.5;
        float _1101 = _1040 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_669, _670, _671), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _4026 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1126 + 1.0))) + _1131) * _1053;
        float _1141 = _1021 * 0.5;
        float _1142 = _1031 * 0.5;
        float _1143 = _1041 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_669, _670, _671), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _4059 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1168 + 1.0))) + _1173) * _1054;
        _1190 = _1021;
        _1192 = _1020;
        _1193 = _1019;
        _1194 = _1031;
        _1195 = _1030;
        _1196 = _1029;
        _1197 = _1041;
        _1198 = _1040;
        _1199 = _1039;
        _1200 = _1054;
        _1201 = _1053;
        _1202 = _1052;
        _1203 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1204 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
    }
    else
    {
        _1190 = _1191;
        _1192 = _1191;
        _1193 = _1191;
        _1194 = _1191;
        _1195 = _1191;
        _1196 = _1191;
        _1197 = _1191;
        _1198 = _1191;
        _1199 = _1191;
        _1200 = _1191;
        _1201 = _1191;
        _1202 = _1191;
        _1203 = 0.0;
        _1204 = 0.0;
        _1205 = 0.0;
    }
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1230 = fma(_889, cbModelParam._m0[30u].z, fma(_885, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _881));
        float _1234 = fma(_889, cbModelParam._m0[31u].z, fma(_885, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _881));
        float _1238 = fma(_889, cbModelParam._m0[32u].z, fma(_885, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _881));
        float _1261 = _881 + _669;
        float _1262 = _885 + _670;
        float _1263 = _889 + _671;
        float _1273 = fma(_1263, cbModelParam._m0[30u].z, fma(_1262, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1261)) - _1230;
        float _1274 = fma(_1263, cbModelParam._m0[31u].z, fma(_1262, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1261)) - _1234;
        float _1275 = fma(_1263, cbModelParam._m0[32u].z, fma(_1262, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1261)) - _1238;
        float _1279 = inversesqrt(dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275)));
        float _1292 = ((_1279 * _1273) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1230 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1279 * _1274) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1234 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1294 = ((_1279 * _1275) / cbModelParam._m0[35u].z) + ((((((_1238 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        float _1329 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1296.x + (-0.5));
        float _1331 = _1329 * (_1296.y + (-0.5));
        float _1332 = _1329 * (_1296.z + (-0.5));
        float _1339 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1303.x + (-0.5));
        float _1341 = _1339 * (_1303.y + (-0.5));
        float _1342 = _1339 * (_1303.z + (-0.5));
        float _1349 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1310.x + (-0.5));
        float _1351 = _1349 * (_1310.y + (-0.5));
        float _1352 = _1349 * (_1310.z + (-0.5));
        float _1359 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1317.x + (-0.5));
        float _1361 = _1359 * (_1317.y + (-0.5));
        float _1362 = _1359 * (_1317.z + (-0.5));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = _1330 * 0.5;
        float _1367 = _1340 * 0.5;
        float _1368 = _1350 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_669, _670, _671), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _4122 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1393 + 1.0))) + _1398) * _1363;
        float _1408 = _1331 * 0.5;
        float _1409 = _1341 * 0.5;
        float _1410 = _1351 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_669, _670, _671), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _4155 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1435 + 1.0))) + _1440) * _1364;
        float _1450 = _1332 * 0.5;
        float _1451 = _1342 * 0.5;
        float _1452 = _1352 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_669, _670, _671), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _4188 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1477 + 1.0))) + _1482) * _1365;
        _1499 = _1332;
        _1500 = _1331;
        _1501 = _1330;
        _1502 = _1342;
        _1503 = _1341;
        _1504 = _1340;
        _1505 = _1352;
        _1506 = _1351;
        _1507 = _1350;
        _1508 = _1365;
        _1509 = _1364;
        _1510 = _1363;
        _1511 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1512 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
        _1513 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
    }
    else
    {
        _1499 = _1191;
        _1500 = _1191;
        _1501 = _1191;
        _1502 = _1191;
        _1503 = _1191;
        _1504 = _1191;
        _1505 = _1191;
        _1506 = _1191;
        _1507 = _1191;
        _1508 = _1191;
        _1509 = _1191;
        _1510 = _1191;
        _1511 = 0.0;
        _1512 = 0.0;
        _1513 = 0.0;
    }
    float _1523 = (cbModelParam._m0[1u].x * (_1511 - _1203)) + _1203;
    float _1524 = (cbModelParam._m0[1u].x * (_1512 - _1204)) + _1204;
    float _1525 = (cbModelParam._m0[1u].x * (_1513 - _1205)) + _1205;
    float _1546 = fma(_1525, cbSceneParam._m0[89u].z, fma(_1524, cbSceneParam._m0[89u].y, _1523 * cbSceneParam._m0[89u].x));
    float _1549 = fma(_1525, cbSceneParam._m0[90u].z, fma(_1524, cbSceneParam._m0[90u].y, _1523 * cbSceneParam._m0[90u].x));
    float _1552 = fma(_1525, cbSceneParam._m0[91u].z, fma(_1524, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1523));
    float _1567 = _828 * 0.5;
    float _1568 = _829 * 0.5;
    float _1569 = _830 * 0.5;
    float _1570 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1501, _1504, _1507, _1510));
    float _1573 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1500, _1503, _1506, _1509));
    float _1576 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1499, _1502, _1505, _1508));
    float _1610;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1583 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1190, _1194, _1197, _1200));
        float _1587 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1192, _1195, _1198, _1201));
        float _1591 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1193, _1196, _1199, _1202));
        float _1598 = dot(vec4(cbModelParam._m0[39u]), vec4(_1567, _1568, _1569, 1.0));
        _1610 = dot(vec3(isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1598) ? 0.0 : (isnan(0.0) ? _1598 : max(0.0, _1598))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1610 = 1.0;
    }
    float _1621;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1612 = dot(vec4(cbModelParam._m0[40u]), vec4(_1567, _1568, _1569, 1.0));
        _1621 = dot(vec3(isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1612) ? 0.0 : (isnan(0.0) ? _1612 : max(0.0, _1612))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1621 = 1.0;
    }
    float _1625 = (_1621 * cbModelParam._m0[1u].x) + (_1610 * (1.0 - cbModelParam._m0[1u].x));
    float _1635 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _672);
    float _1636 = isnan(_1635) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1635 : min(cbModelParam._m0[25u].z, _1635));
    float _1717;
    float _1719;
    float _1721;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1684 = fma(_889, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881)) + cbModelParam._m0[13u].w;
        float _1688 = fma(_889, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881)) + cbModelParam._m0[14u].w;
        float _1692 = fma(_889, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881)) + cbModelParam._m0[15u].w;
        float _1695 = fma(_830, cbModelParam._m0[13u].z, fma(_829, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _828));
        float _1698 = fma(_830, cbModelParam._m0[14u].z, fma(_829, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _828));
        float _1701 = fma(_830, cbModelParam._m0[15u].z, fma(_829, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _828));
        float _1729;
        if (_1695 > 0.0)
        {
            _1729 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1729 = frontier_phi_14_12_ladder;
        }
        float _1899;
        if (_1698 > 0.0)
        {
            _1899 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1899 = frontier_phi_23_19_ladder;
        }
        float _2194;
        if (_1701 > 0.0)
        {
            _2194 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2194 = frontier_phi_35_30_ladder;
        }
        float _2196 = isnan(_1899) ? _1729 : (isnan(_1729) ? _1899 : min(_1729, _1899));
        float _2197 = isnan(_2194) ? _2196 : (isnan(_2196) ? _2194 : min(_2196, _2194));
        float _2201 = (_2197 * _1695) + _1684;
        float _2202 = (_2197 * _1698) + _1688;
        float _2203 = (_2197 * _1701) + _1692;
        float _2204 = _2197 * 9.9999997473787516355514526367188e-05;
        float _2206 = (-1.0) - _2204;
        float _2208 = _2204 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2203 > _2208) || ((_2203 < _2206) || ((_2202 > _2208) || ((_2202 < _2206) || ((_2201 < _2206) || (_2201 > _2208))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2348 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2203, cbModelParam._m0[9u].z, fma(_2202, cbModelParam._m0[9u].y, _2201 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2203, cbModelParam._m0[10u].z, fma(_2202, cbModelParam._m0[10u].y, _2201 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2203, cbModelParam._m0[11u].z, fma(_2202, cbModelParam._m0[11u].y, _2201 * cbModelParam._m0[11u].x))), _1636);
            frontier_phi_13_35_ladder = _2348.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2348.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2348.x * cbModelParam._m0[1u].y;
        }
        _1717 = frontier_phi_13_35_ladder_2;
        _1719 = frontier_phi_13_35_ladder_1;
        _1721 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1705 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_828, _829, _830), _1636);
        _1717 = _1705.x * cbModelParam._m0[1u].y;
        _1719 = _1705.y * cbModelParam._m0[1u].y;
        _1721 = _1705.z * cbModelParam._m0[1u].y;
    }
    float _1725 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _672);
    float _1726 = isnan(_1725) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1725 : min(cbModelParam._m0[25u].w, _1725));
    float _1816;
    float _1818;
    float _1820;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1780 = fma(_889, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881)) + cbModelParam._m0[21u].w;
        float _1784 = fma(_889, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881)) + cbModelParam._m0[22u].w;
        float _1788 = fma(_889, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881)) + cbModelParam._m0[23u].w;
        float _1791 = fma(_830, cbModelParam._m0[21u].z, fma(_829, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _828));
        float _1794 = fma(_830, cbModelParam._m0[22u].z, fma(_829, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _828));
        float _1797 = fma(_830, cbModelParam._m0[23u].z, fma(_829, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _828));
        float _1904;
        if (_1791 > 0.0)
        {
            _1904 = abs((1.0 - _1780) / _1791);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1780 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1904 = frontier_phi_25_21_ladder;
        }
        float _2221;
        if (_1794 > 0.0)
        {
            _2221 = abs((1.0 - _1784) / _1794);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1784 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2221 = frontier_phi_37_32_ladder;
        }
        float _2548;
        if (_1797 > 0.0)
        {
            _2548 = abs((1.0 - _1788) / _1797);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1788 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2548 = frontier_phi_47_44_ladder;
        }
        float _2550 = isnan(_2221) ? _1904 : (isnan(_1904) ? _2221 : min(_1904, _2221));
        float _2551 = isnan(_2548) ? _2550 : (isnan(_2550) ? _2548 : min(_2550, _2548));
        float _2555 = (_2551 * _1791) + _1780;
        float _2556 = (_2551 * _1794) + _1784;
        float _2557 = (_2551 * _1797) + _1788;
        float _2558 = _2551 * 9.9999997473787516355514526367188e-05;
        float _2559 = (-1.0) - _2558;
        float _2561 = _2558 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2557 > _2561) || ((_2557 < _2559) || ((_2556 > _2561) || ((_2556 < _2559) || ((_2555 < _2559) || (_2555 > _2561))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2675 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2557, cbModelParam._m0[17u].z, fma(_2556, cbModelParam._m0[17u].y, _2555 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2557, cbModelParam._m0[18u].z, fma(_2556, cbModelParam._m0[18u].y, _2555 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2557, cbModelParam._m0[19u].z, fma(_2556, cbModelParam._m0[19u].y, _2555 * cbModelParam._m0[19u].x))), _1726);
            frontier_phi_22_47_ladder = _2675.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2675.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2675.x * cbModelParam._m0[1u].z;
        }
        _1816 = frontier_phi_22_47_ladder_2;
        _1818 = frontier_phi_22_47_ladder_1;
        _1820 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1800 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_828, _829, _830), _1726);
        _1816 = _1800.x * cbModelParam._m0[1u].z;
        _1818 = _1800.y * cbModelParam._m0[1u].z;
        _1820 = _1800.z * cbModelParam._m0[1u].z;
    }
    float _1832 = ((((1.0 - _849) * ((_836 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_849 * _836)) * _820;
    float _1833 = _1832 * ((cbModelParam._m0[1u].w * (_1816 - _1717)) + _1717);
    float _1834 = _1832 * ((cbModelParam._m0[1u].w * (_1818 - _1719)) + _1719);
    float _1835 = _1832 * ((cbModelParam._m0[1u].w * (_1820 - _1721)) + _1721);
    float _1838 = fma(_1835, cbSceneParam._m0[89u].z, fma(_1834, cbSceneParam._m0[89u].y, _1833 * cbSceneParam._m0[89u].x));
    float _1841 = fma(_1835, cbSceneParam._m0[90u].z, fma(_1834, cbSceneParam._m0[90u].y, _1833 * cbSceneParam._m0[90u].x));
    float _1844 = fma(_1835, cbSceneParam._m0[91u].z, fma(_1834, cbSceneParam._m0[91u].y, _1833 * cbSceneParam._m0[91u].x));
    float _1878 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1882 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1886 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1890 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1891 = _1878 / _1890;
    float _1892 = _1882 / _1890;
    float _1893 = _1886 / _1890;
    float _2040;
    float _2041;
    float _2042;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1920 = ((uint(_1893 > cbSceneParam._m0[59u].y) + uint(_1893 > cbSceneParam._m0[59u].x)) + uint(_1893 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1921 = _1920 + 43u;
        uint _1929 = _1920 + 44u;
        uint _1937 = _1920 + 45u;
        uint _1945 = _1920 + 46u;
        float _1956 = fma(_1890, cbSceneParam._m0[_1921].w, fma(_1886, cbSceneParam._m0[_1921].z, fma(_1882, cbSceneParam._m0[_1921].y, _1878 * cbSceneParam._m0[_1921].x)));
        float _1960 = fma(_1890, cbSceneParam._m0[_1929].w, fma(_1886, cbSceneParam._m0[_1929].z, fma(_1882, cbSceneParam._m0[_1929].y, _1878 * cbSceneParam._m0[_1929].x)));
        float _1968 = fma(_1890, cbSceneParam._m0[_1945].w, fma(_1886, cbSceneParam._m0[_1945].z, fma(_1882, cbSceneParam._m0[_1945].y, _1878 * cbSceneParam._m0[_1945].x)));
        float _1973 = cbSceneParam._m0[33u].z * _1968;
        float _1975 = cbSceneParam._m0[33u].w * _1968;
        float _1978 = fma(_1890, cbSceneParam._m0[_1937].w, fma(_1886, cbSceneParam._m0[_1937].z, fma(_1882, cbSceneParam._m0[_1937].y, _1878 * cbSceneParam._m0[_1937].x))) / _1968;
        float _2026 = (cbSceneParam._m0[33u].x - sqrt(((_1892 * _1892) + (_1891 * _1891)) + (_1893 * _1893))) * cbSceneParam._m0[33u].y;
        float _4314 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2033 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1973 + _1956) / _1968, (_1975 + _1960) / _1968), _1978), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1975 + _1956) / _1968, (_1960 - _1973) / _1968), _1978), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1956 - _1973) / _1968, (_1960 - _1975) / _1968), _1978), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1956 - _1975) / _1968, (_1973 + _1960) / _1968), _1978), 0.0)).x), vec4(0.25)));
        _2040 = 1.0 - (_2033 * cbSceneParam._m0[34u].x);
        _2041 = 1.0 - (_2033 * cbSceneParam._m0[34u].y);
        _2042 = 1.0 - (_2033 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2040 = 1.0;
        _2041 = 1.0;
        _2042 = 1.0;
    }
    float _2106;
    float _2108;
    float _2110;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2094 = fma(_1890, cbSceneParam._m0[63u].w, fma(_1886, cbSceneParam._m0[63u].z, fma(_1882, cbSceneParam._m0[63u].y, _1878 * cbSceneParam._m0[63u].x)));
        float _2095 = fma(_1890, cbSceneParam._m0[60u].w, fma(_1886, cbSceneParam._m0[60u].z, fma(_1882, cbSceneParam._m0[60u].y, _1878 * cbSceneParam._m0[60u].x))) / _2094;
        float _2096 = fma(_1890, cbSceneParam._m0[61u].w, fma(_1886, cbSceneParam._m0[61u].z, fma(_1882, cbSceneParam._m0[61u].y, _1878 * cbSceneParam._m0[61u].x))) / _2094;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2095 >= cbSceneParam._m0[64u].x) && (_2096 >= cbSceneParam._m0[64u].y)) && (_2095 <= cbSceneParam._m0[64u].z)) && (_2096 <= cbSceneParam._m0[64u].w))
        {
            float _2234 = fma(_1890, cbSceneParam._m0[62u].w, fma(_1886, cbSceneParam._m0[62u].z, fma(_1882, cbSceneParam._m0[62u].y, _1878 * cbSceneParam._m0[62u].x))) / _2094;
            float _2238 = isnan(cbSceneParam._m0[41u].w) ? _2234 : (isnan(_2234) ? cbSceneParam._m0[41u].w : max(_2234, cbSceneParam._m0[41u].w));
            float _2281 = (cbSceneParam._m0[33u].x - sqrt(((_1892 * _1892) + (_1891 * _1891)) + (_1893 * _1893))) * cbSceneParam._m0[33u].y;
            float _4330 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
            float _2288 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2095, cbSceneParam._m0[33u].w + _2096), _2238), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2095, _2096 - cbSceneParam._m0[33u].z), _2238), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2095 - cbSceneParam._m0[33u].z, _2096 - cbSceneParam._m0[33u].w), _2238), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2095 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2096), _2238), 0.0)).x), vec4(0.25)));
            float _2292 = 1.0 - (_2288 * cbSceneParam._m0[34u].x);
            float _2293 = 1.0 - (_2288 * cbSceneParam._m0[34u].y);
            float _2294 = 1.0 - (_2288 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2294) ? _2042 : (isnan(_2042) ? _2294 : min(_2042, _2294));
            frontier_phi_34_33_ladder_1 = isnan(_2293) ? _2041 : (isnan(_2041) ? _2293 : min(_2041, _2293));
            frontier_phi_34_33_ladder_2 = isnan(_2292) ? _2040 : (isnan(_2040) ? _2292 : min(_2040, _2292));
        }
        else
        {
            frontier_phi_34_33_ladder = _2042;
            frontier_phi_34_33_ladder_1 = _2041;
            frontier_phi_34_33_ladder_2 = _2040;
        }
        _2106 = frontier_phi_34_33_ladder_2;
        _2108 = frontier_phi_34_33_ladder_1;
        _2110 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2106 = _2040;
        _2108 = _2041;
        _2110 = _2042;
    }
    uvec4 _2115 = floatBitsToUint(cbInstanceData._m0[_262 + 5u]);
    uint _2117 = _2115.x * 14u;
    uint _2118 = _2117 + 13u;
    float _2125 = _820 + (-1.0);
    float _2130 = (cbLight._m0[_2118].x * _2125) + 1.0;
    float _2131 = (cbLight._m0[_2118].y * _2125) + 1.0;
    float _2132 = (cbLight._m0[_2118].z * _2125) + 1.0;
    float _2133 = (cbLight._m0[_2118].w * _2125) + 1.0;
    uint _2134 = _2117 + 5u;
    float _2140 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
    uint _2144 = _2117 + 4u;
    float _2153 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
    uint _2157 = _2117 | 1u;
    float _2168 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_669, _670, _671));
    float _2171 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_669, _670, _671));
    float _4366 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _4377 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2176 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * 0.3183098733425140380859375;
    float _2178 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * 0.3183098733425140380859375;
    float _2185 = ((cbLight._m0[_2134].x * _2140) * _2178) + (((cbLight._m0[_2144].x * _2106) * _2153) * _2176);
    float _2186 = ((_2140 * cbLight._m0[_2134].y) * _2178) + (((cbLight._m0[_2144].y * _2108) * _2153) * _2176);
    float _2187 = ((_2140 * cbLight._m0[_2134].z) * _2178) + (((cbLight._m0[_2144].z * _2110) * _2153) * _2176);
    uvec4 _2191 = floatBitsToUint(cbLight._m0[_2117 + 12u]);
    bool _2193 = _2191.x == 0u;
    float _2295;
    float _2297;
    float _2299;
    if (_2193)
    {
        _2295 = _2185;
        _2297 = _2186;
        _2299 = _2187;
    }
    else
    {
        uint _2303 = _2117 + 6u;
        float _2319 = (dot(vec3(cbLight._m0[_2117 + 2u].xyz), vec3(_669, _670, _671)) * 0.5) + 0.5;
        float _2320 = _2319 * _2319;
        float _4388 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2321 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2322 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2295 = (((cbLight._m0[_2303].x * 0.3183098733425140380859375) * _2321) * _2322) + _2185;
        _2297 = (((cbLight._m0[_2303].y * 0.3183098733425140380859375) * _2321) * _2322) + _2186;
        _2299 = (((cbLight._m0[_2303].z * 0.3183098733425140380859375) * _2321) * _2322) + _2187;
    }
    bool _2302 = _2191.y == 0u;
    float _2357;
    float _2359;
    float _2361;
    if (_2302)
    {
        _2357 = _2295;
        _2359 = _2297;
        _2361 = _2299;
    }
    else
    {
        uint _2519 = _2117 + 7u;
        float _2535 = (dot(vec3(cbLight._m0[_2117 + 3u].xyz), vec3(_669, _670, _671)) * 0.5) + 0.5;
        float _2536 = _2535 * _2535;
        float _4404 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2537 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2538 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2357 = (((cbLight._m0[_2519].x * 0.3183098733425140380859375) * _2537) * _2538) + _2295;
        _2359 = (((cbLight._m0[_2519].y * 0.3183098733425140380859375) * _2537) * _2538) + _2297;
        _2361 = (((cbLight._m0[_2519].z * 0.3183098733425140380859375) * _2537) * _2538) + _2299;
    }
    uint _2364 = _2117 + 8u;
    float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2117].w)) * _672) * 0.949999988079071044921875);
    float _2378 = _2377 * _2377;
    float _2379 = cbLight._m0[_2117].x + _749;
    float _2380 = cbLight._m0[_2117].y + _750;
    float _2381 = cbLight._m0[_2117].z + _751;
    float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
    float _2386 = _2385 * _2379;
    float _2387 = _2385 * _2380;
    float _2388 = _2385 * _2381;
    float _2389 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2117].xyz));
    float _4420 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _4431 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _2393 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2394 = dot(vec3(_669, _670, _671), vec3(_2386, _2387, _2388));
    float _4442 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2398 = dot(vec3(cbLight._m0[_2117].xyz), vec3(_2386, _2387, _2388));
    float _4453 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2402 = _2378 * _2378;
    float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
    float _2417 = (exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2418 = 1.0 - _2378;
    float _2429 = (0.5 / (((_2393 * ((_2392 * _2418) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2393 * _2418) + _2378) * _2392))) * _2392;
    float _4464 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2431 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
    uint _2445 = _2117 + 9u;
    float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * _672) * 0.949999988079071044921875);
    float _2457 = _2456 * _2456;
    float _2458 = cbLight._m0[_2157].x + _749;
    float _2459 = cbLight._m0[_2157].y + _750;
    float _2460 = cbLight._m0[_2157].z + _751;
    float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
    float _2465 = _2464 * _2458;
    float _2466 = _2464 * _2459;
    float _2467 = _2464 * _2460;
    float _2468 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2157].xyz));
    float _4475 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2472 = dot(vec3(_669, _670, _671), vec3(_2465, _2466, _2467));
    float _4486 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2476 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2465, _2466, _2467));
    float _4497 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2480 = _2457 * _2457;
    float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
    float _2493 = (exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2494 = 1.0 - _2457;
    float _2504 = (0.5 / (((_2393 * ((_2471 * _2494) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2393 * _2494) + _2457) * _2471))) * _2471;
    float _4508 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2506 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
    float _2516 = (((_2493 * cbLight._m0[_2445].x) * _2506) * _2140) + ((((cbLight._m0[_2364].x * _2106) * _2417) * _2431) * _2153);
    float _2517 = (((_2493 * cbLight._m0[_2445].y) * _2506) * _2140) + ((((cbLight._m0[_2364].y * _2108) * _2417) * _2431) * _2153);
    float _2518 = (((_2493 * cbLight._m0[_2445].z) * _2506) * _2140) + ((((cbLight._m0[_2364].z * _2110) * _2417) * _2431) * _2153);
    float _2574;
    float _2576;
    float _2578;
    if (_2193)
    {
        _2574 = _2516;
        _2576 = _2517;
        _2578 = _2518;
    }
    else
    {
        uint _2580 = _2117 + 2u;
        uint _2584 = _2117 + 10u;
        float _2598 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2580].w)) * _672) * 0.949999988079071044921875);
        float _2599 = _2598 * _2598;
        float _2600 = cbLight._m0[_2580].x + _749;
        float _2601 = cbLight._m0[_2580].y + _750;
        float _2602 = cbLight._m0[_2580].z + _751;
        float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
        float _2607 = _2606 * _2600;
        float _2608 = _2606 * _2601;
        float _2609 = _2606 * _2602;
        float _2610 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2580].xyz));
        float _4519 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2614 = dot(vec3(_669, _670, _671), vec3(_2607, _2608, _2609));
        float _4530 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2618 = dot(vec3(cbLight._m0[_2580].xyz), vec3(_2607, _2608, _2609));
        float _4541 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2622 = _2599 * _2599;
        float _2626 = ((_2617 * _2617) * (_2622 + (-1.0))) + 1.0;
        float _2635 = (exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2636 = 1.0 - _2599;
        float _2646 = (0.5 / (((_2393 * ((_2613 * _2636) + _2599)) + 9.9999999392252902907785028219223e-09) + (((_2393 * _2636) + _2599) * _2613))) * _2613;
        float _4552 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2648 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2622 / ((_2626 * _2626) * 3.141590118408203125));
        float _2649 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2574 = (((_2635 * cbLight._m0[_2584].x) * _2648) * _2649) + _2516;
        _2576 = (((_2635 * cbLight._m0[_2584].y) * _2648) * _2649) + _2517;
        _2578 = (((_2635 * cbLight._m0[_2584].z) * _2648) * _2649) + _2518;
    }
    float _2680;
    float _2682;
    float _2684;
    if (_2302)
    {
        _2680 = _2574;
        _2682 = _2576;
        _2684 = _2578;
    }
    else
    {
        uint _2691 = _2117 + 3u;
        uint _2695 = _2117 + 11u;
        float _2709 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2691].w)) * _672) * 0.949999988079071044921875);
        float _2710 = _2709 * _2709;
        float _2711 = cbLight._m0[_2691].x + _749;
        float _2712 = cbLight._m0[_2691].y + _750;
        float _2713 = cbLight._m0[_2691].z + _751;
        float _2717 = inversesqrt(dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713)));
        float _2718 = _2717 * _2711;
        float _2719 = _2717 * _2712;
        float _2720 = _2717 * _2713;
        float _2721 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2691].xyz));
        float _4568 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2724 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2725 = dot(vec3(_669, _670, _671), vec3(_2718, _2719, _2720));
        float _4579 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2728 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2729 = dot(vec3(cbLight._m0[_2691].xyz), vec3(_2718, _2719, _2720));
        float _4590 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2733 = _2710 * _2710;
        float _2737 = ((_2728 * _2728) * (_2733 + (-1.0))) + 1.0;
        float _2746 = (exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2747 = 1.0 - _2710;
        float _2757 = (0.5 / (((_2393 * ((_2724 * _2747) + _2710)) + 9.9999999392252902907785028219223e-09) + (((_2393 * _2747) + _2710) * _2724))) * _2724;
        float _4601 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2759 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2733 / ((_2737 * _2737) * 3.141590118408203125));
        float _2760 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2680 = (((_2746 * cbLight._m0[_2695].x) * _2759) * _2760) + _2574;
        _2682 = (((_2746 * cbLight._m0[_2695].y) * _2759) * _2760) + _2576;
        _2684 = (((_2746 * cbLight._m0[_2695].z) * _2759) * _2760) + _2578;
    }
    float _2826;
    float _2828;
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    if (_2115.y == 0u)
    {
        uvec4 _2781 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2782 = _2781.x;
        uint _2793 = uint((float(_2781.y) * floor(float(uint(cbSceneParam._m0[85u].y * _758) / _2782))) + floor(float(uint(cbSceneParam._m0[85u].x * _757) / _2782)));
        float _2803 = (log2(_1893 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2804 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        uint _2807 = uint(isnan(14.0) ? _2804 : (isnan(_2804) ? 14.0 : min(_2804, 14.0)));
        uvec4 _2812 = texelFetch(g_lightClusterGridBuffer, int(((_2807 << 2u) + (_2793 << 6u)) >> 2u));
        uint _2813 = _2812.x;
        uint _2814 = _2781.z;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        if (((((1u << ((_2814 >> 4u) & 15u)) + 4294967295u) & _2813) == 0u) || ((_2814 & 240u) == 0u))
        {
            _2893 = 0.0;
            _2895 = 0.0;
            _2897 = 0.0;
            _2899 = 0.0;
            _2901 = 0.0;
            _2903 = 0.0;
        }
        else
        {
            float _2894;
            float _2896;
            float _2898;
            float _2900;
            float _2902;
            float _2904;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            uint _3044 = 0u;
            uint _3053;
            bool _3054;
            for (;;)
            {
                _3053 = texelFetch(g_lightClassification, int((((_2807 << 5u) + (_2793 << 9u)) + (_3044 << 2u)) >> 2u)).x;
                _3054 = _3053 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3054)
                {
                    frontier_phi_66_pred = _3043;
                    frontier_phi_66_pred_1 = _3042;
                    frontier_phi_66_pred_2 = _3041;
                    frontier_phi_66_pred_3 = _3040;
                    frontier_phi_66_pred_4 = _3039;
                    frontier_phi_66_pred_5 = _3038;
                }
                else
                {
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    float _3167;
                    uint _3168;
                    _3162 = _3038;
                    _3163 = _3039;
                    _3164 = _3040;
                    _3165 = _3041;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3053;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    for (;;)
                    {
                        uint _3172 = uint(findLSB(_3168)) + (_3044 << 5u);
                        uint _3169 = (_3168 + 4294967295u) & _3168;
                        uint _3174 = _3172 * 48u;
                        vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3174)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 3u)).x));
                        uint _3194 = (_3172 * 48u) + 4u;
                        vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3194)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 3u)).x));
                        uint _3213 = (_3172 * 48u) + 8u;
                        vec3 _3224 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3213)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 2u)).x));
                        float _3228 = _3188.x - _1891;
                        float _3229 = _3188.y - _1892;
                        float _3230 = _3188.z - _1893;
                        float _3231 = dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230));
                        float _3234 = inversesqrt(_3231);
                        float _3235 = _3234 * _3228;
                        float _3236 = _3234 * _3229;
                        float _3237 = _3234 * _3230;
                        float _3238 = dot(vec3(_776, _779, _782), vec3(_3235, _3236, _3237));
                        float _3243 = 1.0 - (_3231 * _3188.w);
                        float _4627 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3244 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3245 = sqrt(_3231) * _3207.w;
                        float _3248 = 1.39999997615814208984375 / (_3245 + 1.39999997615814208984375);
                        float _3249 = _3248 * _3248;
                        float _3252 = ((1.0 - _3249) * _3238) + _3249;
                        float _3255 = _3245 * _3245;
                        float _3259 = ((isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0))) * _3244) / ((_3255 * 0.699999988079071044921875) + 1.0);
                        float _3263 = (-0.0) - _1891;
                        float _3264 = (-0.0) - _1892;
                        float _3265 = (-0.0) - _1893;
                        float _3269 = inversesqrt(dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265)));
                        float _3270 = _3269 * _3263;
                        float _3271 = _3269 * _3264;
                        float _3272 = _3269 * _3265;
                        float _3279 = exp2(log2(1.0 / ((_3255 * 3.5) + 5.0)) * 0.25);
                        float _3280 = 1.0 - _836;
                        float _3287 = sqrt(1.0 - ((1.0 - (_3280 * _3280)) * (1.0 - (_3279 * _3279))));
                        float _3288 = _3287 * _3287;
                        float _3289 = _3288 * _3288;
                        float _3290 = _3270 + _3235;
                        float _3291 = _3271 + _3236;
                        float _3292 = _3272 + _3237;
                        float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                        float _3300 = dot(vec3(_776, _779, _782), vec3(_3270, _3271, _3272));
                        float _4643 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3303 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3304 = dot(vec3(_776, _779, _782), vec3(_3296 * _3290, _3296 * _3291, _3296 * _3292));
                        float _4654 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3307 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3311 = ((_3307 * _3307) * (_3289 + (-1.0))) + 1.0;
                        float _3312 = _3248 * _3288;
                        float _3313 = _3312 * _3312;
                        float _3316 = ((1.0 - _3313) * _3238) + _3313;
                        float _4665 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3317 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3318 = 1.0 - _3288;
                        float _3328 = (0.5 / (((_3317 * ((_3303 * _3318) + _3288)) + 9.9999999392252902907785028219223e-09) + (((_3317 * _3318) + _3288) * _3303))) * _3317;
                        float _4676 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3339 = (((_3289 * 3.1415927410125732421875) * (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) / ((_3311 * _3311) * ((_3255 * 2.1991131305694580078125) + 3.141590118408203125))) * _3244;
                        _3097 = (_3259 * _3207.x) + _3165;
                        _3098 = (_3259 * _3207.y) + _3166;
                        _3099 = (_3259 * _3207.z) + _3167;
                        _3094 = (_3339 * _3224.x) + _3162;
                        _3095 = (_3339 * _3224.y) + _3163;
                        _3096 = (_3339 * _3224.z) + _3164;
                        if (_3169 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3162 = _3094;
                            _3163 = _3095;
                            _3164 = _3096;
                            _3165 = _3097;
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3169;
                        }
                    }
                    frontier_phi_66_pred = _3099;
                    frontier_phi_66_pred_1 = _3098;
                    frontier_phi_66_pred_2 = _3097;
                    frontier_phi_66_pred_3 = _3096;
                    frontier_phi_66_pred_4 = _3095;
                    frontier_phi_66_pred_5 = _3094;
                }
                _2904 = frontier_phi_66_pred;
                _2902 = frontier_phi_66_pred_1;
                _2900 = frontier_phi_66_pred_2;
                _2898 = frontier_phi_66_pred_3;
                _2896 = frontier_phi_66_pred_4;
                _2894 = frontier_phi_66_pred_5;
                uint _3045 = _3044 + 1u;
                if (_3045 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3038 = _2894;
                    _3039 = _2896;
                    _3040 = _2898;
                    _3041 = _2900;
                    _3042 = _2902;
                    _3043 = _2904;
                    _3044 = _3045;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2893 = _2894;
            _2895 = _2896;
            _2897 = _2898;
            _2899 = _2900;
            _2901 = _2902;
            _2903 = _2904;
        }
        uvec4 _2907 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2908 = _2907.z;
        uint _2910 = (_2908 >> 8u) & 15u;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        if (((4294967295u << _2910) & _2813) == 0u)
        {
            _3006 = _2893;
            _3008 = _2895;
            _3010 = _2897;
            _3012 = _2899;
            _3014 = _2901;
            _3016 = _2903;
        }
        else
        {
            float _3031 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
            float _3032 = _3031 * _1891;
            float _3033 = _3031 * _1892;
            float _3034 = _3031 * _1893;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2910 < ((_2908 >> 12u) & 15u))
            {
                float _3007;
                float _3009;
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3145 = _2893;
                float _3146 = _2895;
                float _3147 = _2897;
                float _3148 = _2899;
                float _3149 = _2901;
                float _3150 = _2903;
                uint _3151 = _2910;
                uint _3160;
                bool _3161;
                for (;;)
                {
                    _3160 = texelFetch(g_lightClassification, int((((_2807 << 5u) + (_2793 << 9u)) + (_3151 << 2u)) >> 2u)).x;
                    _3161 = _3160 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3161)
                    {
                        frontier_phi_72_pred = _3150;
                        frontier_phi_72_pred_1 = _3149;
                        frontier_phi_72_pred_2 = _3148;
                        frontier_phi_72_pred_3 = _3147;
                        frontier_phi_72_pred_4 = _3146;
                        frontier_phi_72_pred_5 = _3145;
                    }
                    else
                    {
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3357 = _3145;
                        float _3358 = _3146;
                        float _3359 = _3147;
                        float _3360 = _3148;
                        float _3361 = _3149;
                        float _3362 = _3150;
                        uint _3363 = _3160;
                        uint _3364;
                        vec4 _3389;
                        float _3390;
                        vec4 _3405;
                        vec3 _3417;
                        vec4 _3432;
                        vec4 _3447;
                        float _3493;
                        bool _3494;
                        for (;;)
                        {
                            uint _3374 = ((_3151 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3363));
                            _3364 = (_3363 + 4294967295u) & _3363;
                            uint _3376 = _3374 * 40u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            _3390 = _3389.w;
                            uint _3392 = (_3374 * 40u) + 4u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3407 = (_3374 * 40u) + 8u;
                            _3417 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x));
                            uint _3419 = (_3374 * 40u) + 16u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3434 = (_3374 * 40u) + 20u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3449 = (_3374 * 40u) + 24u;
                            vec4 _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            uint _3468 = (_3374 * 40u) + 28u;
                            vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            _3493 = fma(_1893, _3481.z, fma(_1892, _3481.y, _3481.x * _1891)) + _3481.w;
                            _3494 = !((fma(_1893, _3462.z, fma(_1892, _3462.y, _3462.x * _1891)) + _3462.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3494)
                            {
                                float _3521 = _3389.x - _1891;
                                float _3522 = _3389.y - _1892;
                                float _3523 = _3389.z - _1893;
                                float _3524 = dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523));
                                float _3527 = inversesqrt(_3524);
                                float _3528 = _3527 * _3521;
                                float _3529 = _3527 * _3522;
                                float _3530 = _3527 * _3523;
                                float _3534 = 1.0 - (_3524 / (_3390 * _3390));
                                float _4687 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3535 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3539 = sqrt(_3524) * _3405.w;
                                float _3541 = 1.39999997615814208984375 / (_3539 + 1.39999997615814208984375);
                                float _3542 = _3541 * _3541;
                                float _3545 = ((1.0 - _3542) * dot(vec3(_3528, _3529, _3530), vec3(_776, _779, _782))) + _3542;
                                float _3548 = _3539 * _3539;
                                float _3552 = (fma(_1893, _3432.z, fma(_1892, _3432.y, _3432.x * _1891)) + _3432.w) / _3493;
                                float _3553 = (fma(_1893, _3447.z, fma(_1892, _3447.y, _3447.x * _1891)) + _3447.w) / _3493;
                                float _3557 = 1.0 - dot(vec2(_3552, _3553), vec2(_3552, _3553));
                                float _4703 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3558 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3559 = _3558 * (((isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0))) * _3535) / ((_3548 * 0.699999988079071044921875) + 1.0));
                                float _3571 = exp2(log2(1.0 / ((_3548 * 3.5) + 5.0)) * 0.25);
                                float _3572 = 1.0 - _836;
                                float _3579 = sqrt(1.0 - ((1.0 - (_3572 * _3572)) * (1.0 - (_3571 * _3571))));
                                float _3580 = _3579 * _3579;
                                float _3581 = _3580 * _3580;
                                float _3582 = _3528 - _3032;
                                float _3583 = _3529 - _3033;
                                float _3584 = _3530 - _3034;
                                float _3588 = inversesqrt(dot(vec3(_3582, _3583, _3584), vec3(_3582, _3583, _3584)));
                                float _3592 = dot(vec3(_776, _779, _782), vec3((-0.0) - _3032, (-0.0) - _3033, (-0.0) - _3034));
                                float _4714 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3595 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3596 = dot(vec3(_776, _779, _782), vec3(_3588 * _3582, _3588 * _3583, _3588 * _3584));
                                float _4725 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3599 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3603 = ((_3599 * _3599) * (_3581 + (-1.0))) + 1.0;
                                float _3604 = _3541 * _3580;
                                float _3605 = _3604 * _3604;
                                float _3611 = ((1.0 - _3605) * dot(vec3(_776, _779, _782), vec3(_3528, _3529, _3530))) + _3605;
                                float _4736 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3612 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3613 = 1.0 - _3580;
                                float _3623 = (0.5 / (((_3612 * ((_3595 * _3613) + _3580)) + 9.9999999392252902907785028219223e-09) + (((_3612 * _3613) + _3580) * _3595))) * _3612;
                                float _4747 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3633 = (_3558 * _3535) * (((_3581 * 3.1415927410125732421875) * (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) / ((_3603 * _3603) * ((_3548 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3559 * _3405.y;
                                frontier_phi_78_pred_1 = _3559 * _3405.x;
                                frontier_phi_78_pred_2 = _3633 * _3417.z;
                                frontier_phi_78_pred_3 = _3633 * _3417.y;
                                frontier_phi_78_pred_4 = _3633 * _3417.x;
                                frontier_phi_78_pred_5 = _3559 * _3405.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3641 = frontier_phi_78_pred;
                            _3640 = frontier_phi_78_pred_1;
                            _3639 = frontier_phi_78_pred_2;
                            _3638 = frontier_phi_78_pred_3;
                            _3637 = frontier_phi_78_pred_4;
                            _3642 = frontier_phi_78_pred_5;
                            _3347 = _3640 + _3360;
                            _3348 = _3641 + _3361;
                            _3349 = _3642 + _3362;
                            _3344 = _3637 + _3357;
                            _3345 = _3638 + _3358;
                            _3346 = _3639 + _3359;
                            if (_3364 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3364;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3349;
                        frontier_phi_72_pred_1 = _3348;
                        frontier_phi_72_pred_2 = _3347;
                        frontier_phi_72_pred_3 = _3346;
                        frontier_phi_72_pred_4 = _3345;
                        frontier_phi_72_pred_5 = _3344;
                    }
                    _3017 = frontier_phi_72_pred;
                    _3015 = frontier_phi_72_pred_1;
                    _3013 = frontier_phi_72_pred_2;
                    _3011 = frontier_phi_72_pred_3;
                    _3009 = frontier_phi_72_pred_4;
                    _3007 = frontier_phi_72_pred_5;
                    uint _3152 = _3151 + 1u;
                    if (_3152 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3145 = _3007;
                        _3146 = _3009;
                        _3147 = _3011;
                        _3148 = _3013;
                        _3149 = _3015;
                        _3150 = _3017;
                        _3151 = _3152;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3017;
                frontier_phi_60_61_ladder_1 = _3015;
                frontier_phi_60_61_ladder_2 = _3011;
                frontier_phi_60_61_ladder_3 = _3009;
                frontier_phi_60_61_ladder_4 = _3007;
                frontier_phi_60_61_ladder_5 = _3013;
            }
            else
            {
                frontier_phi_60_61_ladder = _2903;
                frontier_phi_60_61_ladder_1 = _2901;
                frontier_phi_60_61_ladder_2 = _2897;
                frontier_phi_60_61_ladder_3 = _2895;
                frontier_phi_60_61_ladder_4 = _2893;
                frontier_phi_60_61_ladder_5 = _2899;
            }
            _3006 = frontier_phi_60_61_ladder_4;
            _3008 = frontier_phi_60_61_ladder_3;
            _3010 = frontier_phi_60_61_ladder_2;
            _3012 = frontier_phi_60_61_ladder_5;
            _3014 = frontier_phi_60_61_ladder_1;
            _3016 = frontier_phi_60_61_ladder;
        }
        float _3021 = isnan(1.0) ? _820 : (isnan(_820) ? 1.0 : min(_820, 1.0));
        _2826 = (_3021 * _3012) + _2357;
        _2828 = (_3021 * _3014) + _2359;
        _2830 = (_3021 * _3016) + _2361;
        _2832 = ((_3006 * 0.039999999105930328369140625) * _3021) + _2680;
        _2834 = ((_3008 * 0.039999999105930328369140625) * _3021) + _2682;
        _2836 = ((_3010 * 0.039999999105930328369140625) * _3021) + _2684;
    }
    else
    {
        _2826 = _2357;
        _2828 = _2359;
        _2830 = _2361;
        _2832 = _2680;
        _2834 = _2682;
        _2836 = _2684;
    }
    float _4763 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4774 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4785 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    uint _2856 = _262 + 6u;
    float _2864 = _757 / cbSceneParam._m0[86u].x;
    float _2865 = _758 / cbSceneParam._m0[86u].y;
    vec4 _2879 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2864, _2865, (log2((isnan(cbSceneParam._m0[77u].w) ? _690 : (isnan(_690) ? cbSceneParam._m0[77u].w : min(_690, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2881 = _2879.x;
    float _2882 = _2879.y;
    float _2883 = _2879.z;
    float _2884 = _2879.w;
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    if (_690 > cbSceneParam._m0[78u].w)
    {
        float _2918 = isnan(_690) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _690 : min(cbSceneParam._m0[80u].w, _690));
        float _2919 = _2918 / _690;
        float _2930 = _2919 * _742;
        float _2931 = _743 * _2919;
        float _2932 = (-0.0) - _2931;
        float _2934 = _2919 * _744;
        float _2936 = (cbSceneParam._m0[77u].w * _2932) / _2918;
        float _2937 = _2936 + cbSceneParam._m0[79u].w;
        float _2938 = cbSceneParam._m0[79u].w - _2931;
        float _2944 = sqrt(((_2930 * _2930) + (_2931 * _2931)) + (_2934 * _2934));
        float _2947 = (1.0 - (cbSceneParam._m0[77u].w / _2918)) * _2944;
        float _2952 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2954 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3107;
        if (abs((_2932 - _2936) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3107 = ((((_2937 > 0.0) ? exp2(_2952 * _2937) : (2.0 - exp2(_2954 * _2937))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2947;
        }
        else
        {
            float _3067 = 1.0 / cbSceneParam._m0[80u].x;
            float _3068 = isnan(_2938) ? _2937 : (isnan(_2937) ? _2938 : max(_2937, _2938));
            float _3069 = isnan(_2938) ? _2937 : (isnan(_2937) ? _2938 : min(_2937, _2938));
            float _3078 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : min(_3068, 0.0));
            float _3079 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : min(_3069, 0.0));
            _3107 = ((abs(_2944 / _2932) * cbSceneParam._m0[80u].y) * ((((_3078 - _3079) * 2.0) - ((exp2(_2952 * (isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0)))) - exp2(_2952 * (isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))))) * _3067)) - ((exp2(_2954 * _3078) - exp2(_2954 * _3079)) * _3067))) + (_2947 * cbSceneParam._m0[80u].z);
        }
        vec4 _3109 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2864, _2865, 1.0), 0.0);
        float _3118 = exp2((_3107 * (-1.44269502162933349609375)) * (1.0 - _3109.w));
        float _3119 = log2(_3118);
        float _3135 = log2(_2884);
        _2956 = (exp2(_3135 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3119 * cbSceneParam._m0[78u].x)) * _3109.x) / cbSceneParam._m0[78u].x)) + _2881;
        _2958 = (exp2(_3135 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3119 * cbSceneParam._m0[78u].y)) * _3109.y) / cbSceneParam._m0[78u].y)) + _2882;
        _2960 = (exp2(_3135 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3119 * cbSceneParam._m0[78u].z)) * _3109.z) / cbSceneParam._m0[78u].z)) + _2883;
        _2962 = _3118 * _2884;
    }
    else
    {
        _2956 = _2881;
        _2958 = _2882;
        _2960 = _2883;
        _2962 = _2884;
    }
    float _2974 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2975 = _2974 == 3.0;
    float _2976 = log2(_2962);
    float _2983 = exp2(_2976 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2826 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _820))) + ((_2832 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1625)) * cbPerFrame._m0[3u].x));
    float _2984 = exp2(_2976 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2828 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _820))) + ((_2834 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1625)) * cbPerFrame._m0[3u].x));
    float _2985 = exp2(_2976 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2830 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _820))) + ((_2836 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1625)) * cbPerFrame._m0[3u].x));
    float _2994 = (_2974 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2994 * (_2975 ? _2983 : (_2983 + (cbSceneParam._m0[72u].w * _2956)));
    SV_Target.y = _2994 * (_2975 ? _2984 : (_2984 + (cbSceneParam._m0[72u].w * _2958)));
    SV_Target.z = _2994 * (_2975 ? _2985 : (_2985 + (cbSceneParam._m0[72u].w * _2960)));
    SV_Target.w = cbInstanceData._m0[_2856].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2856].w;
}


