#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1062;
float _3425;
float _3426;
float _3427;
float _3428;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _294 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _248) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _249) + cbTextureTilingScale._m0[20u].w));
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _324 = _320.z;
    float _328 = (_320.x * 2.0) + (-1.0);
    float _329 = (_320.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_328, _329), vec2(_328, _329));
    float _3437 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _336 = sqrt(1.0 - (isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))));
    float _341 = _328 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_294.x * 2.0) + (-1.0)));
    float _342 = _329 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_294.y * 2.0) + (-1.0)));
    float _345 = fma(_336, _216, fma(_342, _223, _341 * _209));
    float _348 = fma(_336, _217, fma(_342, _224, _341 * _210));
    float _351 = fma(_336, _218, fma(_342, _225, _341 * _211));
    float _355 = inversesqrt(dot(vec3(_345, _348, _351), vec3(_345, _348, _351)));
    vec4 _391 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _393 = _391.x;
    float _394 = 1.0 - _393;
    float _401 = ((_393 - _394) * cbMtdParam._m0[24u].z) + _394;
    float _403 = (cbMtdParam._m0[19u].x + dot(vec4(_355 * _345, _355 * _348, _355 * _351, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_401 * cbMtdParam._m0[21u].z);
    float _3448 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _419 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_401 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3459 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _424 = ((_404 * (cbMtdParam._m0[17u].x - _274)) * _420) + _274;
    float _425 = ((_404 * (cbMtdParam._m0[17u].y - _275)) * _420) + _275;
    float _426 = ((_404 * (cbMtdParam._m0[17u].z - _276)) * _420) + _276;
    float _431 = (((_294.z - _324) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _324;
    vec4 _444 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _451 = (_444.x * 2.0) + (-1.0);
    float _452 = (_444.y * 2.0) + (-1.0);
    float _453 = dot(vec2(_451, _452), vec2(_451, _452));
    float _3470 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _462 = (((_444.z - _431) * _404) * _420) + _431;
    float _477 = (((cbMtdParam._m0[21u].x * _341) + ((_451 - _341) * _404)) * _420) + _341;
    float _478 = (((cbMtdParam._m0[21u].x * _342) + ((_452 - _342) * _404)) * _420) + _342;
    float _479 = (((sqrt(1.0 - (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) - _336) * _404) * _420) + _336;
    float _484 = cbMtdParam._m0[22u].x + _320.w;
    float _487 = fma(_479, _216, fma(_478, _223, _477 * _209));
    float _490 = fma(_479, _217, fma(_478, _224, _477 * _210));
    float _493 = fma(_479, _218, fma(_478, _225, _477 * _211));
    float _497 = inversesqrt(dot(vec3(_487, _490, _493), vec3(_487, _490, _493)));
    float _498 = _497 * _487;
    float _499 = _497 * _490;
    float _500 = _497 * _493;
    float _3481 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _501 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _3492 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3503 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3514 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _3525 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _519 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _570 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _560);
    float _571 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _560);
    float _572 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _560);
    float _576 = inversesqrt(dot(vec3(_570, _571, _572), vec3(_570, _571, _572)));
    float _577 = _570 * _576;
    float _578 = _571 * _576;
    float _579 = _572 * _576;
    vec4 _584 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _586 = _584.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _743 = sqrt(((_570 * _570) + (_571 * _571)) + (_572 * _572));
        float _749 = (cbMatDynParam._m0[5u].x * _743) + cbMatDynParam._m0[5u].y;
        float _3536 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _754 = (cbMatDynParam._m0[5u].z * _743) + cbMatDynParam._m0[5u].w;
        float _3547 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) - _750)) + _750) < ((_586 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _598 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _599 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _619 = fma(_500, cbSceneParam._m0[5u].z, fma(_499, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _498));
    float _622 = fma(_500, cbSceneParam._m0[6u].z, fma(_499, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _498));
    float _625 = fma(_500, cbSceneParam._m0[7u].z, fma(_499, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _498));
    uint _638 = _228 + 9u;
    uint _639 = _638 + uint(cbMatDynParam._m0[0u].w);
    float _645 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) * cbInstanceData._m0[_639].x;
    float _646 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) * cbInstanceData._m0[_639].y;
    float _647 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)))) * cbInstanceData._m0[_639].z;
    float _3558 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _3569 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _3580 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    vec4 _659 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _598, cbSceneParam._m0[86u].y * _599));
    float _663 = ((isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * TEXCOORD_5.w) * _659.x;
    float _664 = dot(vec3(_498, _499, _500), vec3(_577, _578, _579));
    float _667 = _664 * 2.0;
    float _671 = (_667 * _498) - _577;
    float _672 = (_667 * _499) - _578;
    float _673 = (_667 * _500) - _579;
    float _677 = abs(dot(vec3(_577, _578, _579), vec3(_498, _499, _500)));
    float _3591 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _679 = sqrt(_501);
    float _692 = exp2((_679 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_679 * 3.0));
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1061;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _786 = fma(_732, cbModelParam._m0[26u].z, fma(_728, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _724));
        float _790 = fma(_732, cbModelParam._m0[27u].z, fma(_728, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _724));
        float _794 = fma(_732, cbModelParam._m0[28u].z, fma(_728, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _724));
        float _819 = _724 + _498;
        float _820 = _728 + _499;
        float _821 = _732 + _500;
        float _831 = fma(_821, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _819)) - _786;
        float _832 = fma(_821, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _819)) - _790;
        float _833 = fma(_821, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _819)) - _794;
        float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
        float _850 = ((_837 * _831) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_786 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_837 * _832) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_790 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_837 * _833) / cbModelParam._m0[34u].z) + ((((((_794 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        float _889 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_855.x + (-0.5));
        float _891 = _889 * (_855.y + (-0.5));
        float _892 = _889 * (_855.z + (-0.5));
        float _899 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_862.x + (-0.5));
        float _901 = _899 * (_862.y + (-0.5));
        float _902 = _899 * (_862.z + (-0.5));
        float _909 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_869.x + (-0.5));
        float _911 = _909 * (_869.y + (-0.5));
        float _912 = _909 * (_869.z + (-0.5));
        float _919 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_876.x + (-0.5));
        float _921 = _919 * (_876.y + (-0.5));
        float _922 = _919 * (_876.z + (-0.5));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = _890 * 0.5;
        float _927 = _900 * 0.5;
        float _928 = _910 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _943 = (dot(vec3(_498, _499, _500), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _953 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3639 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_955 + 1.0))) + _960) * _923;
        float _970 = _891 * 0.5;
        float _971 = _901 * 0.5;
        float _972 = _911 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_498, _499, _500), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3650 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3661 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3672 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * (_997 + 1.0))) + _1002) * _924;
        float _1012 = _892 * 0.5;
        float _1013 = _902 * 0.5;
        float _1014 = _912 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_498, _499, _500), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3683 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3694 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3705 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_1039 + 1.0))) + _1044) * _925;
        _1061 = _892;
        _1063 = _891;
        _1064 = _890;
        _1065 = _902;
        _1066 = _901;
        _1067 = _900;
        _1068 = _912;
        _1069 = _911;
        _1070 = _910;
        _1071 = _925;
        _1072 = _924;
        _1073 = _923;
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
    }
    else
    {
        _1061 = _1062;
        _1063 = _1062;
        _1064 = _1062;
        _1065 = _1062;
        _1066 = _1062;
        _1067 = _1062;
        _1068 = _1062;
        _1069 = _1062;
        _1070 = _1062;
        _1071 = _1062;
        _1072 = _1062;
        _1073 = _1062;
        _1074 = 0.0;
        _1075 = 0.0;
        _1076 = 0.0;
    }
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1104 = fma(_732, cbModelParam._m0[30u].z, fma(_728, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _724));
        float _1108 = fma(_732, cbModelParam._m0[31u].z, fma(_728, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _724));
        float _1112 = fma(_732, cbModelParam._m0[32u].z, fma(_728, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _724));
        float _1135 = _724 + _498;
        float _1136 = _728 + _499;
        float _1137 = _732 + _500;
        float _1147 = fma(_1137, cbModelParam._m0[30u].z, fma(_1136, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1135)) - _1104;
        float _1148 = fma(_1137, cbModelParam._m0[31u].z, fma(_1136, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1135)) - _1108;
        float _1149 = fma(_1137, cbModelParam._m0[32u].z, fma(_1136, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1135)) - _1112;
        float _1153 = inversesqrt(dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149)));
        float _1166 = ((_1153 * _1147) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1104 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1153 * _1148) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1108 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1153 * _1149) / cbModelParam._m0[35u].z) + ((((((_1112 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        float _1203 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1170.x + (-0.5));
        float _1205 = _1203 * (_1170.y + (-0.5));
        float _1206 = _1203 * (_1170.z + (-0.5));
        float _1213 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1177.x + (-0.5));
        float _1215 = _1213 * (_1177.y + (-0.5));
        float _1216 = _1213 * (_1177.z + (-0.5));
        float _1223 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1184.x + (-0.5));
        float _1225 = _1223 * (_1184.y + (-0.5));
        float _1226 = _1223 * (_1184.z + (-0.5));
        float _1233 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1191.x + (-0.5));
        float _1235 = _1233 * (_1191.y + (-0.5));
        float _1236 = _1233 * (_1191.z + (-0.5));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = _1204 * 0.5;
        float _1241 = _1214 * 0.5;
        float _1242 = _1224 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_498, _499, _500), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3768 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1267 + 1.0))) + _1272) * _1237;
        float _1282 = _1205 * 0.5;
        float _1283 = _1215 * 0.5;
        float _1284 = _1225 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_498, _499, _500), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3779 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3790 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3801 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1309 + 1.0))) + _1314) * _1238;
        float _1324 = _1206 * 0.5;
        float _1325 = _1216 * 0.5;
        float _1326 = _1226 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_498, _499, _500), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _3812 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3823 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _3834 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1351 + 1.0))) + _1356) * _1239;
        _1373 = _1206;
        _1374 = _1205;
        _1375 = _1204;
        _1376 = _1216;
        _1377 = _1215;
        _1378 = _1214;
        _1379 = _1226;
        _1380 = _1225;
        _1381 = _1224;
        _1382 = _1239;
        _1383 = _1238;
        _1384 = _1237;
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
    }
    else
    {
        _1373 = _1062;
        _1374 = _1062;
        _1375 = _1062;
        _1376 = _1062;
        _1377 = _1062;
        _1378 = _1062;
        _1379 = _1062;
        _1380 = _1062;
        _1381 = _1062;
        _1382 = _1062;
        _1383 = _1062;
        _1384 = _1062;
        _1385 = 0.0;
        _1386 = 0.0;
        _1387 = 0.0;
    }
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1074)) + _1074;
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1075)) + _1075;
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1076)) + _1076;
    float _1420 = fma(_1399, cbSceneParam._m0[89u].z, fma(_1398, cbSceneParam._m0[89u].y, _1397 * cbSceneParam._m0[89u].x));
    float _1423 = fma(_1399, cbSceneParam._m0[90u].z, fma(_1398, cbSceneParam._m0[90u].y, _1397 * cbSceneParam._m0[90u].x));
    float _1426 = fma(_1399, cbSceneParam._m0[91u].z, fma(_1398, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1397));
    float _1441 = _671 * 0.5;
    float _1442 = _672 * 0.5;
    float _1443 = _673 * 0.5;
    float _1444 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1447 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1450 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1484;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1457 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1061, _1065, _1068, _1071));
        float _1461 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1465 = dot(vec4(_1441, _1442, _1443, 1.0), vec4(_1064, _1067, _1070, _1073));
        float _1472 = dot(vec4(cbModelParam._m0[39u]), vec4(_1441, _1442, _1443, 1.0));
        _1484 = dot(vec3(isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1472) ? 0.0 : (isnan(0.0) ? _1472 : max(0.0, _1472))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1484 = 1.0;
    }
    float _1495;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1486 = dot(vec4(cbModelParam._m0[40u]), vec4(_1441, _1442, _1443, 1.0));
        _1495 = dot(vec3(isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1486) ? 0.0 : (isnan(0.0) ? _1486 : max(0.0, _1486))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1495 = 1.0;
    }
    float _1499 = (_1495 * cbModelParam._m0[1u].x) + (_1484 * (1.0 - cbModelParam._m0[1u].x));
    float _1509 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _501);
    float _1510 = isnan(_1509) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1509 : min(cbModelParam._m0[25u].z, _1509));
    float _1591;
    float _1593;
    float _1595;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1558 = fma(_732, cbModelParam._m0[13u].z, fma(_728, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _724)) + cbModelParam._m0[13u].w;
        float _1562 = fma(_732, cbModelParam._m0[14u].z, fma(_728, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _724)) + cbModelParam._m0[14u].w;
        float _1566 = fma(_732, cbModelParam._m0[15u].z, fma(_728, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _724)) + cbModelParam._m0[15u].w;
        float _1569 = fma(_673, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671));
        float _1572 = fma(_673, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671));
        float _1575 = fma(_673, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671));
        float _1603;
        if (_1569 > 0.0)
        {
            _1603 = abs((1.0 - _1558) / _1569);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1558 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1603 = frontier_phi_17_15_ladder;
        }
        float _1806;
        if (_1572 > 0.0)
        {
            _1806 = abs((1.0 - _1562) / _1572);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1562 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1806 = frontier_phi_26_22_ladder;
        }
        float _2049;
        if (_1575 > 0.0)
        {
            _2049 = abs((1.0 - _1566) / _1575);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1566 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2049 = frontier_phi_38_33_ladder;
        }
        float _2051 = isnan(_1806) ? _1603 : (isnan(_1603) ? _1806 : min(_1603, _1806));
        float _2052 = isnan(_2049) ? _2051 : (isnan(_2051) ? _2049 : min(_2051, _2049));
        float _2056 = (_2052 * _1569) + _1558;
        float _2057 = (_2052 * _1572) + _1562;
        float _2058 = (_2052 * _1575) + _1566;
        float _2059 = _2052 * 9.9999997473787516355514526367188e-05;
        float _2061 = (-1.0) - _2059;
        float _2063 = _2059 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2058 > _2063) || ((_2058 < _2061) || ((_2057 > _2063) || ((_2057 < _2061) || ((_2056 < _2061) || (_2056 > _2063))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2182 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2058, cbModelParam._m0[9u].z, fma(_2057, cbModelParam._m0[9u].y, _2056 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2058, cbModelParam._m0[10u].z, fma(_2057, cbModelParam._m0[10u].y, _2056 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2058, cbModelParam._m0[11u].z, fma(_2057, cbModelParam._m0[11u].y, _2056 * cbModelParam._m0[11u].x))), _1510);
            frontier_phi_16_38_ladder = _2182.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2182.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2182.x * cbModelParam._m0[1u].y;
        }
        _1591 = frontier_phi_16_38_ladder_2;
        _1593 = frontier_phi_16_38_ladder_1;
        _1595 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1579 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_671, _672, _673), _1510);
        _1591 = _1579.x * cbModelParam._m0[1u].y;
        _1593 = _1579.y * cbModelParam._m0[1u].y;
        _1595 = _1579.z * cbModelParam._m0[1u].y;
    }
    float _1599 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _501);
    float _1600 = isnan(_1599) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1599 : min(cbModelParam._m0[25u].w, _1599));
    float _1690;
    float _1692;
    float _1694;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1654 = fma(_732, cbModelParam._m0[21u].z, fma(_728, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _724)) + cbModelParam._m0[21u].w;
        float _1658 = fma(_732, cbModelParam._m0[22u].z, fma(_728, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _724)) + cbModelParam._m0[22u].w;
        float _1662 = fma(_732, cbModelParam._m0[23u].z, fma(_728, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _724)) + cbModelParam._m0[23u].w;
        float _1665 = fma(_673, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671));
        float _1668 = fma(_673, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671));
        float _1671 = fma(_673, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671));
        float _1811;
        if (_1665 > 0.0)
        {
            _1811 = abs((1.0 - _1654) / _1665);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1654 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1811 = frontier_phi_28_24_ladder;
        }
        float _2076;
        if (_1668 > 0.0)
        {
            _2076 = abs((1.0 - _1658) / _1668);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1658 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2076 = frontier_phi_40_35_ladder;
        }
        float _2281;
        if (_1671 > 0.0)
        {
            _2281 = abs((1.0 - _1662) / _1671);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1662 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2281 = frontier_phi_49_46_ladder;
        }
        float _2283 = isnan(_2076) ? _1811 : (isnan(_1811) ? _2076 : min(_1811, _2076));
        float _2284 = isnan(_2281) ? _2283 : (isnan(_2283) ? _2281 : min(_2283, _2281));
        float _2288 = (_2284 * _1665) + _1654;
        float _2289 = (_2284 * _1668) + _1658;
        float _2290 = (_2284 * _1671) + _1662;
        float _2291 = _2284 * 9.9999997473787516355514526367188e-05;
        float _2292 = (-1.0) - _2291;
        float _2294 = _2291 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2290 > _2294) || ((_2290 < _2292) || ((_2289 > _2294) || ((_2289 < _2292) || ((_2288 < _2292) || (_2288 > _2294))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2489 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2290, cbModelParam._m0[17u].z, fma(_2289, cbModelParam._m0[17u].y, _2288 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2290, cbModelParam._m0[18u].z, fma(_2289, cbModelParam._m0[18u].y, _2288 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2290, cbModelParam._m0[19u].z, fma(_2289, cbModelParam._m0[19u].y, _2288 * cbModelParam._m0[19u].x))), _1600);
            frontier_phi_25_49_ladder = _2489.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2489.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2489.x * cbModelParam._m0[1u].z;
        }
        _1690 = frontier_phi_25_49_ladder_2;
        _1692 = frontier_phi_25_49_ladder_1;
        _1694 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_671, _672, _673), _1600);
        _1690 = _1674.x * cbModelParam._m0[1u].z;
        _1692 = _1674.y * cbModelParam._m0[1u].z;
        _1694 = _1674.z * cbModelParam._m0[1u].z;
    }
    float _1706 = ((((1.0 - _692) * ((_679 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_692 * _679)) * _663;
    float _1707 = _1706 * ((cbModelParam._m0[1u].w * (_1690 - _1591)) + _1591);
    float _1708 = _1706 * ((cbModelParam._m0[1u].w * (_1692 - _1593)) + _1593);
    float _1709 = _1706 * ((cbModelParam._m0[1u].w * (_1694 - _1595)) + _1595);
    float _1712 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1708, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1715 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1708, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1718 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1708, cbSceneParam._m0[91u].y, _1707 * cbSceneParam._m0[91u].x));
    uvec4 _1728 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1730 = _1728.x * 14u;
    uint _1731 = _1730 + 13u;
    float _1738 = _663 + (-1.0);
    float _1743 = (cbLight._m0[_1731].x * _1738) + 1.0;
    float _1744 = (cbLight._m0[_1731].y * _1738) + 1.0;
    float _1745 = (cbLight._m0[_1731].z * _1738) + 1.0;
    float _1746 = (cbLight._m0[_1731].w * _1738) + 1.0;
    uint _1747 = _1730 + 5u;
    float _1753 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
    uint _1757 = _1730 + 4u;
    float _1764 = isnan(1.0) ? _1743 : (isnan(_1743) ? 1.0 : min(_1743, 1.0));
    uint _1768 = _1730 | 1u;
    float _1779 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_498, _499, _500));
    float _1782 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_498, _499, _500));
    float _3970 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _3981 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1787 = (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * 0.3183098733425140380859375;
    float _1789 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * 0.3183098733425140380859375;
    float _1796 = ((cbLight._m0[_1747].x * _1753) * _1789) + ((cbLight._m0[_1757].x * _1764) * _1787);
    float _1797 = ((_1753 * cbLight._m0[_1747].y) * _1789) + ((_1764 * cbLight._m0[_1757].y) * _1787);
    float _1798 = ((_1753 * cbLight._m0[_1747].z) * _1789) + ((_1764 * cbLight._m0[_1757].z) * _1787);
    uvec4 _1803 = floatBitsToUint(cbLight._m0[_1730 + 12u]);
    bool _1805 = _1803.x == 0u;
    float _1816;
    float _1818;
    float _1820;
    if (_1805)
    {
        _1816 = _1796;
        _1818 = _1797;
        _1820 = _1798;
    }
    else
    {
        uint _1824 = _1730 + 6u;
        float _1840 = (dot(vec3(cbLight._m0[_1730 + 2u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _1841 = _1840 * _1840;
        float _3992 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1842 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1843 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _1816 = (((cbLight._m0[_1824].x * 0.3183098733425140380859375) * _1842) * _1843) + _1796;
        _1818 = (((cbLight._m0[_1824].y * 0.3183098733425140380859375) * _1842) * _1843) + _1797;
        _1820 = (((cbLight._m0[_1824].z * 0.3183098733425140380859375) * _1842) * _1843) + _1798;
    }
    bool _1823 = _1803.y == 0u;
    float _1861;
    float _1863;
    float _1865;
    if (_1823)
    {
        _1861 = _1816;
        _1863 = _1818;
        _1865 = _1820;
    }
    else
    {
        uint _2020 = _1730 + 7u;
        float _2036 = (dot(vec3(cbLight._m0[_1730 + 3u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _2037 = _2036 * _2036;
        float _4008 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2038 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _2039 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _1861 = (((cbLight._m0[_2020].x * 0.3183098733425140380859375) * _2038) * _2039) + _1816;
        _1863 = (((cbLight._m0[_2020].y * 0.3183098733425140380859375) * _2038) * _2039) + _1818;
        _1865 = (((cbLight._m0[_2020].z * 0.3183098733425140380859375) * _2038) * _2039) + _1820;
    }
    uint _1868 = _1730 + 8u;
    float _1881 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1730].w)) * _501) * 0.949999988079071044921875);
    float _1882 = _1881 * _1881;
    float _1883 = cbLight._m0[_1730].x + _577;
    float _1884 = cbLight._m0[_1730].y + _578;
    float _1885 = cbLight._m0[_1730].z + _579;
    float _1889 = inversesqrt(dot(vec3(_1883, _1884, _1885), vec3(_1883, _1884, _1885)));
    float _1890 = _1889 * _1883;
    float _1891 = _1889 * _1884;
    float _1892 = _1889 * _1885;
    float _1893 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_1730].xyz));
    float _4024 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1896 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _1897 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _1898 = dot(vec3(_498, _499, _500), vec3(_1890, _1891, _1892));
    float _4046 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _1902 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1890, _1891, _1892));
    float _4057 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1906 = _1882 * _1882;
    float _1910 = ((_1901 * _1901) * (_1906 + (-1.0))) + 1.0;
    float _1921 = (exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1922 = 1.0 - _1882;
    float _1933 = (0.5 / (((_1897 * ((_1896 * _1922) + _1882)) + 9.9999999392252902907785028219223e-09) + (((_1897 * _1922) + _1882) * _1896))) * _1896;
    float _4068 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1935 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1906 / ((_1910 * _1910) * 3.141590118408203125));
    uint _1946 = _1730 + 9u;
    float _1957 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1768].w)) * _501) * 0.949999988079071044921875);
    float _1958 = _1957 * _1957;
    float _1959 = cbLight._m0[_1768].x + _577;
    float _1960 = cbLight._m0[_1768].y + _578;
    float _1961 = cbLight._m0[_1768].z + _579;
    float _1965 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
    float _1966 = _1965 * _1959;
    float _1967 = _1965 * _1960;
    float _1968 = _1965 * _1961;
    float _1969 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_1768].xyz));
    float _4079 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1972 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _1973 = dot(vec3(_498, _499, _500), vec3(_1966, _1967, _1968));
    float _4090 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1976 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _1977 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_1966, _1967, _1968));
    float _4101 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1981 = _1958 * _1958;
    float _1985 = ((_1976 * _1976) * (_1981 + (-1.0))) + 1.0;
    float _1994 = (exp2(log2(1.0 - (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1995 = 1.0 - _1958;
    float _2005 = (0.5 / (((_1897 * ((_1972 * _1995) + _1958)) + 9.9999999392252902907785028219223e-09) + (((_1897 * _1995) + _1958) * _1972))) * _1972;
    float _4112 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2007 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1981 / ((_1985 * _1985) * 3.141590118408203125));
    float _2017 = (((_1994 * cbLight._m0[_1946].x) * _2007) * _1753) + (((_1921 * cbLight._m0[_1868].x) * _1935) * _1764);
    float _2018 = (((_1994 * cbLight._m0[_1946].y) * _2007) * _1753) + (((_1921 * cbLight._m0[_1868].y) * _1935) * _1764);
    float _2019 = (((_1994 * cbLight._m0[_1946].z) * _2007) * _1753) + (((_1921 * cbLight._m0[_1868].z) * _1935) * _1764);
    float _2081;
    float _2083;
    float _2085;
    if (_1805)
    {
        _2081 = _2017;
        _2083 = _2018;
        _2085 = _2019;
    }
    else
    {
        uint _2087 = _1730 + 2u;
        uint _2091 = _1730 + 10u;
        float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _501) * 0.949999988079071044921875);
        float _2106 = _2105 * _2105;
        float _2107 = cbLight._m0[_2087].x + _577;
        float _2108 = cbLight._m0[_2087].y + _578;
        float _2109 = cbLight._m0[_2087].z + _579;
        float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
        float _2114 = _2113 * _2107;
        float _2115 = _2113 * _2108;
        float _2116 = _2113 * _2109;
        float _2117 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2087].xyz));
        float _4123 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2120 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2121 = dot(vec3(_498, _499, _500), vec3(_2114, _2115, _2116));
        float _4134 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2125 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2114, _2115, _2116));
        float _4145 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2129 = _2106 * _2106;
        float _2133 = ((_2124 * _2124) * (_2129 + (-1.0))) + 1.0;
        float _2142 = (exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2143 = 1.0 - _2106;
        float _2153 = (0.5 / (((_1897 * ((_2120 * _2143) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_1897 * _2143) + _2106) * _2120))) * _2120;
        float _4156 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2155 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2129 / ((_2133 * _2133) * 3.141590118408203125));
        float _2156 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
        _2081 = (((_2142 * cbLight._m0[_2091].x) * _2155) * _2156) + _2017;
        _2083 = (((_2142 * cbLight._m0[_2091].y) * _2155) * _2156) + _2018;
        _2085 = (((_2142 * cbLight._m0[_2091].z) * _2155) * _2156) + _2019;
    }
    float _2191;
    float _2193;
    float _2195;
    if (_1823)
    {
        _2191 = _2081;
        _2193 = _2083;
        _2195 = _2085;
    }
    else
    {
        uint _2202 = _1730 + 3u;
        uint _2206 = _1730 + 11u;
        float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2202].w)) * _501) * 0.949999988079071044921875);
        float _2221 = _2220 * _2220;
        float _2222 = cbLight._m0[_2202].x + _577;
        float _2223 = cbLight._m0[_2202].y + _578;
        float _2224 = cbLight._m0[_2202].z + _579;
        float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
        float _2229 = _2228 * _2222;
        float _2230 = _2228 * _2223;
        float _2231 = _2228 * _2224;
        float _2232 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2202].xyz));
        float _4172 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2235 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2236 = dot(vec3(_498, _499, _500), vec3(_2229, _2230, _2231));
        float _4183 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2239 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _2240 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_2229, _2230, _2231));
        float _4194 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2244 = _2221 * _2221;
        float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
        float _2257 = (exp2(log2(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2258 = 1.0 - _2221;
        float _2268 = (0.5 / (((_1897 * ((_2235 * _2258) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_1897 * _2258) + _2221) * _2235))) * _2235;
        float _4205 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2270 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
        float _2271 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _2191 = (((_2257 * cbLight._m0[_2206].x) * _2270) * _2271) + _2081;
        _2193 = (((_2257 * cbLight._m0[_2206].y) * _2270) * _2271) + _2083;
        _2195 = (((_2257 * cbLight._m0[_2206].z) * _2270) * _2271) + _2085;
    }
    float _2406;
    float _2408;
    float _2410;
    float _2412;
    float _2414;
    float _2416;
    if (_1728.y == 0u)
    {
        float _2346 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2347 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2346;
        float _2348 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2346;
        float _2349 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2346;
        uvec4 _2361 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2362 = _2361.x;
        uint _2373 = uint((float(_2361.y) * floor(float(uint(cbSceneParam._m0[85u].y * _599) / _2362))) + floor(float(uint(cbSceneParam._m0[85u].x * _598) / _2362)));
        float _2383 = (log2(_2349 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2384 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        uint _2387 = uint(isnan(14.0) ? _2384 : (isnan(_2384) ? 14.0 : min(_2384, 14.0)));
        uvec4 _2392 = texelFetch(g_lightClusterGridBuffer, int(((_2387 << 2u) + (_2373 << 6u)) >> 2u));
        uint _2393 = _2392.x;
        uint _2394 = _2361.z;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        if (((((1u << ((_2394 >> 4u) & 15u)) + 4294967295u) & _2393) == 0u) || ((_2394 & 240u) == 0u))
        {
            _2494 = 0.0;
            _2496 = 0.0;
            _2498 = 0.0;
            _2500 = 0.0;
            _2502 = 0.0;
            _2504 = 0.0;
        }
        else
        {
            float _2495;
            float _2497;
            float _2499;
            float _2501;
            float _2503;
            float _2505;
            float _2647 = 0.0;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            uint _2653 = 0u;
            uint _2662;
            bool _2663;
            for (;;)
            {
                _2662 = texelFetch(g_lightClassification, int((((_2387 << 5u) + (_2373 << 9u)) + (_2653 << 2u)) >> 2u)).x;
                _2663 = _2662 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2663)
                {
                    frontier_phi_66_pred = _2647;
                    frontier_phi_66_pred_1 = _2652;
                    frontier_phi_66_pred_2 = _2651;
                    frontier_phi_66_pred_3 = _2650;
                    frontier_phi_66_pred_4 = _2649;
                    frontier_phi_66_pred_5 = _2648;
                }
                else
                {
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    uint _2798;
                    _2792 = _2647;
                    _2793 = _2648;
                    _2794 = _2649;
                    _2795 = _2650;
                    _2796 = _2651;
                    _2797 = _2652;
                    _2798 = _2662;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    for (;;)
                    {
                        uint _2802 = uint(findLSB(_2798)) + (_2653 << 5u);
                        uint _2799 = (_2798 + 4294967295u) & _2798;
                        uint _2804 = _2802 * 48u;
                        vec4 _2818 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2804)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 3u)).x));
                        uint _2824 = (_2802 * 48u) + 4u;
                        vec4 _2837 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2824)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 3u)).x));
                        uint _2843 = (_2802 * 48u) + 8u;
                        vec3 _2854 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x));
                        float _2858 = _2818.x - _2347;
                        float _2859 = _2818.y - _2348;
                        float _2860 = _2818.z - _2349;
                        float _2861 = dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860));
                        float _2864 = inversesqrt(_2861);
                        float _2865 = _2864 * _2858;
                        float _2866 = _2864 * _2859;
                        float _2867 = _2864 * _2860;
                        float _2868 = dot(vec3(_619, _622, _625), vec3(_2865, _2866, _2867));
                        float _2873 = 1.0 - (_2861 * _2818.w);
                        float _4231 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2874 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                        float _2875 = sqrt(_2861) * _2837.w;
                        float _2878 = 1.39999997615814208984375 / (_2875 + 1.39999997615814208984375);
                        float _2879 = _2878 * _2878;
                        float _2882 = ((1.0 - _2879) * _2868) + _2879;
                        float _2885 = _2875 * _2875;
                        float _2889 = ((isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0))) * _2874) / ((_2885 * 0.699999988079071044921875) + 1.0);
                        float _2893 = (-0.0) - _2347;
                        float _2894 = (-0.0) - _2348;
                        float _2895 = (-0.0) - _2349;
                        float _2899 = inversesqrt(dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895)));
                        float _2900 = _2899 * _2893;
                        float _2901 = _2899 * _2894;
                        float _2902 = _2899 * _2895;
                        float _2910 = exp2(log2(1.0 / ((_2885 * 3.5) + 5.0)) * 0.25);
                        float _2911 = 1.0 - _679;
                        float _2918 = sqrt(1.0 - ((1.0 - (_2911 * _2911)) * (1.0 - (_2910 * _2910))));
                        float _2919 = _2918 * _2918;
                        float _2920 = _2919 * _2919;
                        float _2921 = _2900 + _2865;
                        float _2922 = _2901 + _2866;
                        float _2923 = _2902 + _2867;
                        float _2927 = inversesqrt(dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923)));
                        float _2931 = dot(vec3(_619, _622, _625), vec3(_2900, _2901, _2902));
                        float _4247 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2934 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                        float _2935 = dot(vec3(_619, _622, _625), vec3(_2927 * _2921, _2927 * _2922, _2927 * _2923));
                        float _4258 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2938 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                        float _2942 = ((_2938 * _2938) * (_2920 + (-1.0))) + 1.0;
                        float _2943 = _2878 * _2919;
                        float _2944 = _2943 * _2943;
                        float _2947 = ((1.0 - _2944) * _2868) + _2944;
                        float _4269 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2948 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                        float _2949 = 1.0 - _2919;
                        float _2959 = (0.5 / (((_2948 * ((_2934 * _2949) + _2919)) + 9.9999999392252902907785028219223e-09) + (((_2948 * _2949) + _2919) * _2934))) * _2948;
                        float _4280 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2970 = (((_2920 * 3.1415927410125732421875) * (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) / ((_2942 * _2942) * ((_2885 * 2.1991131305694580078125) + 3.141590118408203125))) * _2874;
                        _2722 = (_2889 * _2837.x) + _2795;
                        _2723 = (_2889 * _2837.y) + _2796;
                        _2724 = (_2889 * _2837.z) + _2797;
                        _2719 = (_2970 * _2854.x) + _2792;
                        _2720 = (_2970 * _2854.y) + _2793;
                        _2721 = (_2970 * _2854.z) + _2794;
                        if (_2799 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2792 = _2719;
                            _2793 = _2720;
                            _2794 = _2721;
                            _2795 = _2722;
                            _2796 = _2723;
                            _2797 = _2724;
                            _2798 = _2799;
                        }
                    }
                    frontier_phi_66_pred = _2719;
                    frontier_phi_66_pred_1 = _2724;
                    frontier_phi_66_pred_2 = _2723;
                    frontier_phi_66_pred_3 = _2722;
                    frontier_phi_66_pred_4 = _2721;
                    frontier_phi_66_pred_5 = _2720;
                }
                _2495 = frontier_phi_66_pred;
                _2505 = frontier_phi_66_pred_1;
                _2503 = frontier_phi_66_pred_2;
                _2501 = frontier_phi_66_pred_3;
                _2499 = frontier_phi_66_pred_4;
                _2497 = frontier_phi_66_pred_5;
                uint _2654 = _2653 + 1u;
                if (_2654 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2647 = _2495;
                    _2648 = _2497;
                    _2649 = _2499;
                    _2650 = _2501;
                    _2651 = _2503;
                    _2652 = _2505;
                    _2653 = _2654;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2494 = _2495;
            _2496 = _2497;
            _2498 = _2499;
            _2500 = _2501;
            _2502 = _2503;
            _2504 = _2505;
        }
        uvec4 _2508 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2509 = _2508.z;
        uint _2511 = (_2509 >> 8u) & 15u;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        if (((4294967295u << _2511) & _2393) == 0u)
        {
            _2615 = _2494;
            _2617 = _2496;
            _2619 = _2498;
            _2621 = _2500;
            _2623 = _2502;
            _2625 = _2504;
        }
        else
        {
            float _2640 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
            float _2641 = _2640 * _2347;
            float _2642 = _2640 * _2348;
            float _2643 = _2640 * _2349;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2511 < ((_2509 >> 12u) & 15u))
            {
                float _2616;
                float _2618;
                float _2620;
                float _2622;
                float _2624;
                float _2626;
                float _2775 = _2494;
                float _2776 = _2496;
                float _2777 = _2498;
                float _2778 = _2500;
                float _2779 = _2502;
                float _2780 = _2504;
                uint _2781 = _2511;
                uint _2790;
                bool _2791;
                for (;;)
                {
                    _2790 = texelFetch(g_lightClassification, int((((_2387 << 5u) + (_2373 << 9u)) + (_2781 << 2u)) >> 2u)).x;
                    _2791 = _2790 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2791)
                    {
                        frontier_phi_77_pred = _2780;
                        frontier_phi_77_pred_1 = _2779;
                        frontier_phi_77_pred_2 = _2778;
                        frontier_phi_77_pred_3 = _2777;
                        frontier_phi_77_pred_4 = _2776;
                        frontier_phi_77_pred_5 = _2775;
                    }
                    else
                    {
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _2997 = _2775;
                        float _2998 = _2776;
                        float _2999 = _2777;
                        float _3000 = _2778;
                        float _3001 = _2779;
                        float _3002 = _2780;
                        uint _3003 = _2790;
                        uint _3004;
                        vec4 _3029;
                        float _3030;
                        vec4 _3045;
                        vec3 _3057;
                        vec4 _3073;
                        vec4 _3088;
                        float _3134;
                        bool _3135;
                        for (;;)
                        {
                            uint _3014 = ((_2781 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3003));
                            _3004 = (_3003 + 4294967295u) & _3003;
                            uint _3016 = _3014 * 40u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            _3030 = _3029.w;
                            uint _3032 = (_3014 * 40u) + 4u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3047 = (_3014 * 40u) + 8u;
                            _3057 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x));
                            uint _3060 = (_3014 * 40u) + 16u;
                            _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3075 = (_3014 * 40u) + 20u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3090 = (_3014 * 40u) + 24u;
                            vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3109 = (_3014 * 40u) + 28u;
                            vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            _3134 = fma(_2349, _3122.z, fma(_2348, _3122.y, _3122.x * _2347)) + _3122.w;
                            _3135 = !((fma(_2349, _3103.z, fma(_2348, _3103.y, _3103.x * _2347)) + _3103.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3135)
                            {
                                float _3162 = _3029.x - _2347;
                                float _3163 = _3029.y - _2348;
                                float _3164 = _3029.z - _2349;
                                float _3165 = dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164));
                                float _3168 = inversesqrt(_3165);
                                float _3169 = _3168 * _3162;
                                float _3170 = _3168 * _3163;
                                float _3171 = _3168 * _3164;
                                float _3175 = 1.0 - (_3165 / (_3030 * _3030));
                                float _4291 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3180 = sqrt(_3165) * _3045.w;
                                float _3182 = 1.39999997615814208984375 / (_3180 + 1.39999997615814208984375);
                                float _3183 = _3182 * _3182;
                                float _3186 = ((1.0 - _3183) * dot(vec3(_3169, _3170, _3171), vec3(_619, _622, _625))) + _3183;
                                float _3189 = _3180 * _3180;
                                float _3193 = (fma(_2349, _3073.z, fma(_2348, _3073.y, _3073.x * _2347)) + _3073.w) / _3134;
                                float _3194 = (fma(_2349, _3088.z, fma(_2348, _3088.y, _3088.x * _2347)) + _3088.w) / _3134;
                                float _3198 = 1.0 - dot(vec2(_3193, _3194), vec2(_3193, _3194));
                                float _4307 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3199 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3200 = _3199 * (((isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))) * _3176) / ((_3189 * 0.699999988079071044921875) + 1.0));
                                float _3212 = exp2(log2(1.0 / ((_3189 * 3.5) + 5.0)) * 0.25);
                                float _3213 = 1.0 - _679;
                                float _3220 = sqrt(1.0 - ((1.0 - (_3213 * _3213)) * (1.0 - (_3212 * _3212))));
                                float _3221 = _3220 * _3220;
                                float _3222 = _3221 * _3221;
                                float _3223 = _3169 - _2641;
                                float _3224 = _3170 - _2642;
                                float _3225 = _3171 - _2643;
                                float _3229 = inversesqrt(dot(vec3(_3223, _3224, _3225), vec3(_3223, _3224, _3225)));
                                float _3233 = dot(vec3(_619, _622, _625), vec3((-0.0) - _2641, (-0.0) - _2642, (-0.0) - _2643));
                                float _4318 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3236 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                                float _3237 = dot(vec3(_619, _622, _625), vec3(_3229 * _3223, _3229 * _3224, _3229 * _3225));
                                float _4329 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3240 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                                float _3244 = ((_3240 * _3240) * (_3222 + (-1.0))) + 1.0;
                                float _3245 = _3182 * _3221;
                                float _3246 = _3245 * _3245;
                                float _3252 = ((1.0 - _3246) * dot(vec3(_619, _622, _625), vec3(_3169, _3170, _3171))) + _3246;
                                float _4340 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3253 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3254 = 1.0 - _3221;
                                float _3264 = (0.5 / (((_3253 * ((_3236 * _3254) + _3221)) + 9.9999999392252902907785028219223e-09) + (((_3253 * _3254) + _3221) * _3236))) * _3253;
                                float _4351 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3274 = (_3199 * _3176) * (((_3222 * 3.1415927410125732421875) * (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) / ((_3244 * _3244) * ((_3189 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3200 * _3045.y;
                                frontier_phi_83_pred_1 = _3200 * _3045.x;
                                frontier_phi_83_pred_2 = _3274 * _3057.z;
                                frontier_phi_83_pred_3 = _3274 * _3057.y;
                                frontier_phi_83_pred_4 = _3274 * _3057.x;
                                frontier_phi_83_pred_5 = _3200 * _3045.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3282 = frontier_phi_83_pred;
                            _3281 = frontier_phi_83_pred_1;
                            _3280 = frontier_phi_83_pred_2;
                            _3279 = frontier_phi_83_pred_3;
                            _3278 = frontier_phi_83_pred_4;
                            _3283 = frontier_phi_83_pred_5;
                            _2987 = _3281 + _3000;
                            _2988 = _3282 + _3001;
                            _2989 = _3283 + _3002;
                            _2984 = _3278 + _2997;
                            _2985 = _3279 + _2998;
                            _2986 = _3280 + _2999;
                            if (_3004 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _3004;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2989;
                        frontier_phi_77_pred_1 = _2988;
                        frontier_phi_77_pred_2 = _2987;
                        frontier_phi_77_pred_3 = _2986;
                        frontier_phi_77_pred_4 = _2985;
                        frontier_phi_77_pred_5 = _2984;
                    }
                    _2626 = frontier_phi_77_pred;
                    _2624 = frontier_phi_77_pred_1;
                    _2622 = frontier_phi_77_pred_2;
                    _2620 = frontier_phi_77_pred_3;
                    _2618 = frontier_phi_77_pred_4;
                    _2616 = frontier_phi_77_pred_5;
                    uint _2782 = _2781 + 1u;
                    if (_2782 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2775 = _2616;
                        _2776 = _2618;
                        _2777 = _2620;
                        _2778 = _2622;
                        _2779 = _2624;
                        _2780 = _2626;
                        _2781 = _2782;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2620;
                frontier_phi_58_59_ladder_1 = _2626;
                frontier_phi_58_59_ladder_2 = _2624;
                frontier_phi_58_59_ladder_3 = _2622;
                frontier_phi_58_59_ladder_4 = _2618;
                frontier_phi_58_59_ladder_5 = _2616;
            }
            else
            {
                frontier_phi_58_59_ladder = _2498;
                frontier_phi_58_59_ladder_1 = _2504;
                frontier_phi_58_59_ladder_2 = _2502;
                frontier_phi_58_59_ladder_3 = _2500;
                frontier_phi_58_59_ladder_4 = _2496;
                frontier_phi_58_59_ladder_5 = _2494;
            }
            _2615 = frontier_phi_58_59_ladder_5;
            _2617 = frontier_phi_58_59_ladder_4;
            _2619 = frontier_phi_58_59_ladder;
            _2621 = frontier_phi_58_59_ladder_3;
            _2623 = frontier_phi_58_59_ladder_2;
            _2625 = frontier_phi_58_59_ladder_1;
        }
        float _2630 = isnan(1.0) ? _663 : (isnan(_663) ? 1.0 : min(_663, 1.0));
        _2406 = (_2630 * _2621) + _1861;
        _2408 = (_2630 * _2623) + _1863;
        _2410 = (_2630 * _2625) + _1865;
        _2412 = ((_2615 * 0.039999999105930328369140625) * _2630) + _2191;
        _2414 = ((_2617 * 0.039999999105930328369140625) * _2630) + _2193;
        _2416 = ((_2619 * 0.039999999105930328369140625) * _2630) + _2195;
    }
    else
    {
        _2406 = _1861;
        _2408 = _1863;
        _2410 = _1865;
        _2412 = _2191;
        _2414 = _2193;
        _2416 = _2195;
    }
    float _4367 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4378 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4389 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _2433 = ((isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2406 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _663))) + ((_2412 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1499)) * cbPerFrame._m0[3u].x);
    float _2434 = ((isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2408 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _663))) + ((_2414 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1499)) * cbPerFrame._m0[3u].x);
    float _2435 = ((isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2410 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _663))) + ((_2416 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1499)) * cbPerFrame._m0[3u].x);
    uint _2436 = _228 + 6u;
    float _2444 = _598 / cbSceneParam._m0[86u].x;
    float _2445 = _599 / cbSceneParam._m0[86u].y;
    vec4 _2459 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2444, _2445, (log2((isnan(cbSceneParam._m0[77u].w) ? _519 : (isnan(_519) ? cbSceneParam._m0[77u].w : min(_519, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2461 = _2459.x;
    float _2462 = _2459.y;
    float _2463 = _2459.z;
    float _2464 = _2459.w;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    if (_519 > cbSceneParam._m0[78u].w)
    {
        float _2519 = isnan(_519) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _519 : min(cbSceneParam._m0[80u].w, _519));
        float _2520 = _2519 / _519;
        float _2531 = _2520 * _570;
        float _2532 = _571 * _2520;
        float _2533 = (-0.0) - _2532;
        float _2535 = _2520 * _572;
        float _2537 = (cbSceneParam._m0[77u].w * _2533) / _2519;
        float _2538 = _2537 + cbSceneParam._m0[79u].w;
        float _2539 = cbSceneParam._m0[79u].w - _2532;
        float _2545 = sqrt(((_2531 * _2531) + (_2532 * _2532)) + (_2535 * _2535));
        float _2548 = (1.0 - (cbSceneParam._m0[77u].w / _2519)) * _2545;
        float _2553 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2555 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2732;
        if (abs((_2533 - _2537) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2732 = ((((_2538 > 0.0) ? exp2(_2553 * _2538) : (2.0 - exp2(_2555 * _2538))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2548;
        }
        else
        {
            float _2676 = 1.0 / cbSceneParam._m0[80u].x;
            float _2677 = isnan(_2539) ? _2538 : (isnan(_2538) ? _2539 : max(_2538, _2539));
            float _2678 = isnan(_2539) ? _2538 : (isnan(_2538) ? _2539 : min(_2538, _2539));
            float _2687 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : min(_2677, 0.0));
            float _2688 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : min(_2678, 0.0));
            _2732 = ((abs(_2545 / _2533) * cbSceneParam._m0[80u].y) * ((((_2687 - _2688) * 2.0) - ((exp2(_2553 * (isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0)))) - exp2(_2553 * (isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0))))) * _2676)) - ((exp2(_2555 * _2687) - exp2(_2555 * _2688)) * _2676))) + (_2548 * cbSceneParam._m0[80u].z);
        }
        vec4 _2734 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2444, _2445, 1.0), 0.0);
        float _2743 = exp2((_2732 * (-1.44269502162933349609375)) * (1.0 - _2734.w));
        float _2744 = log2(_2743);
        float _2760 = log2(_2464);
        _2557 = (exp2(_2760 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2744 * cbSceneParam._m0[78u].x)) * _2734.x) / cbSceneParam._m0[78u].x)) + _2461;
        _2559 = (exp2(_2760 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2744 * cbSceneParam._m0[78u].y)) * _2734.y) / cbSceneParam._m0[78u].y)) + _2462;
        _2561 = (exp2(_2760 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2744 * cbSceneParam._m0[78u].z)) * _2734.z) / cbSceneParam._m0[78u].z)) + _2463;
        _2563 = _2743 * _2464;
    }
    else
    {
        _2557 = _2461;
        _2559 = _2462;
        _2561 = _2463;
        _2563 = _2464;
    }
    bool _2770;
    vec4 _2573;
    vec4 _2595;
    float _2597;
    float _2601;
    float _2602;
    float _2603;
    float _2604;
    bool _2614;
    for (;;)
    {
        _2573 = cbMatDynParam._m0[0u];
        float _2575 = roundEven(_2573.y);
        bool _2576 = _2575 == 3.0;
        float _2577 = log2(_2563);
        float _2584 = exp2(_2577 * cbSceneParam._m0[78u].x) * _2433;
        float _2585 = exp2(_2577 * cbSceneParam._m0[78u].y) * _2434;
        float _2586 = exp2(_2577 * cbSceneParam._m0[78u].z) * _2435;
        float _2593 = _586 + (-0.5);
        _2595 = cbMtdParam._m0[1u];
        _2597 = _2595.y * _2593;
        float _2600 = (_2575 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2601 = _2600 * (_2576 ? _2584 : (_2584 + (cbSceneParam._m0[72u].w * _2557)));
        _2602 = _2600 * (_2576 ? _2585 : (_2585 + (cbSceneParam._m0[72u].w * _2559)));
        _2603 = _2600 * (_2576 ? _2586 : (_2586 + (cbSceneParam._m0[72u].w * _2561)));
        _2604 = _2593 * 0.999000012874603271484375;
        _2614 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2614)
        {
            if ((cbInstanceData._m0[_228 + 7u].x + _2604) < 0.5)
            {
                _2770 = true;
                break;
            }
        }
        uint _2711 = _638 + uint(_2573.w);
        if ((cbInstanceData._m0[_2711].w < 1.0) && ((cbInstanceData._m0[_2711].w + _2604) < 0.5))
        {
            _2770 = true;
            break;
        }
        if ((_2597 + 1.0) < _2595.x)
        {
            _2770 = true;
            break;
        }
        _2770 = false;
        break;
    }
    float _2975;
    if (_2770)
    {
        discard_state = true;
        _2975 = 0.0;
    }
    else
    {
        _2975 = cbInstanceData._m0[_2436].w;
    }
    SV_Target.x = _2601;
    SV_Target.y = _2602;
    SV_Target.z = _2603;
    SV_Target.w = _2975;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2436].w;
    discard_exit();
}


