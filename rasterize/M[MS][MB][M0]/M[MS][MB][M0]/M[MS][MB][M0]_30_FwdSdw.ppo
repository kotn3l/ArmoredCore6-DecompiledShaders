#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1022;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _294 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _248) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _249) + cbTextureTilingScale._m0[20u].w));
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _324 = _320.z;
    float _328 = (_320.x * 2.0) + (-1.0);
    float _329 = (_320.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_328, _329), vec2(_328, _329));
    float _3614 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _336 = sqrt(1.0 - (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))));
    float _341 = _328 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_294.x * 2.0) + (-1.0)));
    float _342 = _329 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_294.y * 2.0) + (-1.0)));
    float _345 = fma(_336, _216, fma(_342, _223, _341 * _209));
    float _348 = fma(_336, _217, fma(_342, _224, _341 * _210));
    float _351 = fma(_336, _218, fma(_342, _225, _341 * _211));
    float _355 = inversesqrt(dot(vec3(_345, _348, _351), vec3(_345, _348, _351)));
    vec4 _391 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _393 = _391.x;
    float _394 = 1.0 - _393;
    float _401 = ((_393 - _394) * cbMtdParam._m0[24u].z) + _394;
    float _403 = (cbMtdParam._m0[19u].x + dot(vec4(_355 * _345, _355 * _348, _355 * _351, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_401 * cbMtdParam._m0[21u].z);
    float _3625 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _419 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_401 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3636 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _424 = ((_404 * (cbMtdParam._m0[17u].x - _274)) * _420) + _274;
    float _425 = ((_404 * (cbMtdParam._m0[17u].y - _275)) * _420) + _275;
    float _426 = ((_404 * (cbMtdParam._m0[17u].z - _276)) * _420) + _276;
    float _431 = (((_294.z - _324) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _324;
    vec4 _444 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _451 = (_444.x * 2.0) + (-1.0);
    float _452 = (_444.y * 2.0) + (-1.0);
    float _453 = dot(vec2(_451, _452), vec2(_451, _452));
    float _3647 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _462 = (((_444.z - _431) * _404) * _420) + _431;
    float _477 = (((cbMtdParam._m0[21u].x * _341) + ((_451 - _341) * _404)) * _420) + _341;
    float _478 = (((cbMtdParam._m0[21u].x * _342) + ((_452 - _342) * _404)) * _420) + _342;
    float _479 = (((sqrt(1.0 - (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) - _336) * _404) * _420) + _336;
    float _484 = cbMtdParam._m0[22u].x + _320.w;
    float _487 = fma(_479, _216, fma(_478, _223, _477 * _209));
    float _490 = fma(_479, _217, fma(_478, _224, _477 * _210));
    float _493 = fma(_479, _218, fma(_478, _225, _477 * _211));
    float _497 = inversesqrt(dot(vec3(_487, _490, _493), vec3(_487, _490, _493)));
    float _498 = _497 * _487;
    float _499 = _497 * _490;
    float _500 = _497 * _493;
    float _3658 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _501 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3680 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3691 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _3702 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _519 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _570 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _560);
    float _571 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _560);
    float _572 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _560);
    float _576 = inversesqrt(dot(vec3(_570, _571, _572), vec3(_570, _571, _572)));
    float _577 = _570 * _576;
    float _578 = _571 * _576;
    float _579 = _572 * _576;
    float _585 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _586 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _607 = fma(_500, cbSceneParam._m0[5u].z, fma(_499, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _498));
    float _610 = fma(_500, cbSceneParam._m0[6u].z, fma(_499, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _498));
    float _613 = fma(_500, cbSceneParam._m0[7u].z, fma(_499, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _498));
    uint _627 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _633 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * cbInstanceData._m0[_627].x;
    float _634 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * cbInstanceData._m0[_627].y;
    float _635 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0)))) * cbInstanceData._m0[_627].z;
    float _3713 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _3724 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _3735 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    vec4 _647 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _585, cbSceneParam._m0[86u].y * _586));
    float _651 = ((isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * TEXCOORD_5.w) * _647.x;
    float _652 = dot(vec3(_498, _499, _500), vec3(_577, _578, _579));
    float _655 = _652 * 2.0;
    float _659 = (_655 * _498) - _577;
    float _660 = (_655 * _499) - _578;
    float _661 = (_655 * _500) - _579;
    float _665 = abs(dot(vec3(_577, _578, _579), vec3(_498, _499, _500)));
    float _3746 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _667 = sqrt(_501);
    float _680 = exp2((_667 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_667 * 3.0));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1021;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _746 = fma(_720, cbModelParam._m0[26u].z, fma(_716, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _712));
        float _750 = fma(_720, cbModelParam._m0[27u].z, fma(_716, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _712));
        float _754 = fma(_720, cbModelParam._m0[28u].z, fma(_716, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _712));
        float _779 = _712 + _498;
        float _780 = _716 + _499;
        float _781 = _720 + _500;
        float _791 = fma(_781, cbModelParam._m0[26u].z, fma(_780, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _779)) - _746;
        float _792 = fma(_781, cbModelParam._m0[27u].z, fma(_780, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _779)) - _750;
        float _793 = fma(_781, cbModelParam._m0[28u].z, fma(_780, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _779)) - _754;
        float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
        float _810 = ((_797 * _791) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_746 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _811 = ((_797 * _792) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_750 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _812 = ((_797 * _793) / cbModelParam._m0[34u].z) + ((((((_754 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_810, _811, _812), 0.0);
        float _849 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_815.x + (-0.5));
        float _851 = _849 * (_815.y + (-0.5));
        float _852 = _849 * (_815.z + (-0.5));
        float _859 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _860 = _859 * (_822.x + (-0.5));
        float _861 = _859 * (_822.y + (-0.5));
        float _862 = _859 * (_822.z + (-0.5));
        float _869 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_829.x + (-0.5));
        float _871 = _869 * (_829.y + (-0.5));
        float _872 = _869 * (_829.z + (-0.5));
        float _879 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_836.x + (-0.5));
        float _881 = _879 * (_836.y + (-0.5));
        float _882 = _879 * (_836.z + (-0.5));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = _850 * 0.5;
        float _887 = _860 * 0.5;
        float _888 = _870 * 0.5;
        float _889 = dot(vec3(_886, _887, _888), vec3(_886, _887, _888));
        float _894 = (_889 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_889);
        float _903 = (dot(vec3(_498, _499, _500), vec3(_894 * _886, _894 * _887, _894 * _888)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _913 = sqrt(((_887 * _887) + (_886 * _886)) + (_888 * _888)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3794 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_915 + 1.0))) + _920) * _883;
        float _930 = _851 * 0.5;
        float _931 = _861 * 0.5;
        float _932 = _871 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _946 = (dot(vec3(_498, _499, _500), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _955 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3827 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_957 + 1.0))) + _962) * _884;
        float _972 = _852 * 0.5;
        float _973 = _862 * 0.5;
        float _974 = _872 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_498, _499, _500), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3860 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_999 + 1.0))) + _1004) * _885;
        _1021 = _852;
        _1023 = _851;
        _1024 = _850;
        _1025 = _862;
        _1026 = _861;
        _1027 = _860;
        _1028 = _872;
        _1029 = _871;
        _1030 = _870;
        _1031 = _885;
        _1032 = _884;
        _1033 = _883;
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
    }
    else
    {
        _1021 = _1022;
        _1023 = _1022;
        _1024 = _1022;
        _1025 = _1022;
        _1026 = _1022;
        _1027 = _1022;
        _1028 = _1022;
        _1029 = _1022;
        _1030 = _1022;
        _1031 = _1022;
        _1032 = _1022;
        _1033 = _1022;
        _1034 = 0.0;
        _1035 = 0.0;
        _1036 = 0.0;
    }
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1061 = fma(_720, cbModelParam._m0[30u].z, fma(_716, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _712));
        float _1065 = fma(_720, cbModelParam._m0[31u].z, fma(_716, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _712));
        float _1069 = fma(_720, cbModelParam._m0[32u].z, fma(_716, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _712));
        float _1092 = _712 + _498;
        float _1093 = _716 + _499;
        float _1094 = _720 + _500;
        float _1104 = fma(_1094, cbModelParam._m0[30u].z, fma(_1093, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1092)) - _1061;
        float _1105 = fma(_1094, cbModelParam._m0[31u].z, fma(_1093, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1092)) - _1065;
        float _1106 = fma(_1094, cbModelParam._m0[32u].z, fma(_1093, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1092)) - _1069;
        float _1110 = inversesqrt(dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106)));
        float _1123 = ((_1110 * _1104) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1061 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1124 = ((_1110 * _1105) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1065 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1110 * _1106) / cbModelParam._m0[35u].z) + ((((((_1069 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        float _1160 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1127.x + (-0.5));
        float _1162 = _1160 * (_1127.y + (-0.5));
        float _1163 = _1160 * (_1127.z + (-0.5));
        float _1170 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1134.x + (-0.5));
        float _1172 = _1170 * (_1134.y + (-0.5));
        float _1173 = _1170 * (_1134.z + (-0.5));
        float _1180 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1141.x + (-0.5));
        float _1182 = _1180 * (_1141.y + (-0.5));
        float _1183 = _1180 * (_1141.z + (-0.5));
        float _1190 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1148.x + (-0.5));
        float _1192 = _1190 * (_1148.y + (-0.5));
        float _1193 = _1190 * (_1148.z + (-0.5));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = _1161 * 0.5;
        float _1198 = _1171 * 0.5;
        float _1199 = _1181 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_498, _499, _500), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3923 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1224 + 1.0))) + _1229) * _1194;
        float _1239 = _1162 * 0.5;
        float _1240 = _1172 * 0.5;
        float _1241 = _1182 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_498, _499, _500), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3956 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1266 + 1.0))) + _1271) * _1195;
        float _1281 = _1163 * 0.5;
        float _1282 = _1173 * 0.5;
        float _1283 = _1183 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_498, _499, _500), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3989 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1308 + 1.0))) + _1313) * _1196;
        _1330 = _1163;
        _1331 = _1162;
        _1332 = _1161;
        _1333 = _1173;
        _1334 = _1172;
        _1335 = _1171;
        _1336 = _1183;
        _1337 = _1182;
        _1338 = _1181;
        _1339 = _1196;
        _1340 = _1195;
        _1341 = _1194;
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
    }
    else
    {
        _1330 = _1022;
        _1331 = _1022;
        _1332 = _1022;
        _1333 = _1022;
        _1334 = _1022;
        _1335 = _1022;
        _1336 = _1022;
        _1337 = _1022;
        _1338 = _1022;
        _1339 = _1022;
        _1340 = _1022;
        _1341 = _1022;
        _1342 = 0.0;
        _1343 = 0.0;
        _1344 = 0.0;
    }
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1034)) + _1034;
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1035)) + _1035;
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1036)) + _1036;
    float _1377 = fma(_1356, cbSceneParam._m0[89u].z, fma(_1355, cbSceneParam._m0[89u].y, _1354 * cbSceneParam._m0[89u].x));
    float _1380 = fma(_1356, cbSceneParam._m0[90u].z, fma(_1355, cbSceneParam._m0[90u].y, _1354 * cbSceneParam._m0[90u].x));
    float _1383 = fma(_1356, cbSceneParam._m0[91u].z, fma(_1355, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1354));
    float _1398 = _659 * 0.5;
    float _1399 = _660 * 0.5;
    float _1400 = _661 * 0.5;
    float _1401 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1404 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1407 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1441;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1414 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1021, _1025, _1028, _1031));
        float _1418 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1023, _1026, _1029, _1032));
        float _1422 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1024, _1027, _1030, _1033));
        float _1429 = dot(vec4(cbModelParam._m0[39u]), vec4(_1398, _1399, _1400, 1.0));
        _1441 = dot(vec3(isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1429) ? 0.0 : (isnan(0.0) ? _1429 : max(0.0, _1429))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1441 = 1.0;
    }
    float _1452;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1443 = dot(vec4(cbModelParam._m0[40u]), vec4(_1398, _1399, _1400, 1.0));
        _1452 = dot(vec3(isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1443) ? 0.0 : (isnan(0.0) ? _1443 : max(0.0, _1443))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1452 = 1.0;
    }
    float _1456 = (_1452 * cbModelParam._m0[1u].x) + (_1441 * (1.0 - cbModelParam._m0[1u].x));
    float _1466 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _501);
    float _1467 = isnan(_1466) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1466 : min(cbModelParam._m0[25u].z, _1466));
    float _1548;
    float _1550;
    float _1552;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1515 = fma(_720, cbModelParam._m0[13u].z, fma(_716, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _712)) + cbModelParam._m0[13u].w;
        float _1519 = fma(_720, cbModelParam._m0[14u].z, fma(_716, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _712)) + cbModelParam._m0[14u].w;
        float _1523 = fma(_720, cbModelParam._m0[15u].z, fma(_716, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _712)) + cbModelParam._m0[15u].w;
        float _1526 = fma(_661, cbModelParam._m0[13u].z, fma(_660, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _659));
        float _1529 = fma(_661, cbModelParam._m0[14u].z, fma(_660, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _659));
        float _1532 = fma(_661, cbModelParam._m0[15u].z, fma(_660, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _659));
        float _1560;
        if (_1526 > 0.0)
        {
            _1560 = abs((1.0 - _1515) / _1526);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1515 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1560 = frontier_phi_14_12_ladder;
        }
        float _1731;
        if (_1529 > 0.0)
        {
            _1731 = abs((1.0 - _1519) / _1529);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1519 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1731 = frontier_phi_23_19_ladder;
        }
        float _2027;
        if (_1532 > 0.0)
        {
            _2027 = abs((1.0 - _1523) / _1532);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1523 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2027 = frontier_phi_35_30_ladder;
        }
        float _2029 = isnan(_1731) ? _1560 : (isnan(_1560) ? _1731 : min(_1560, _1731));
        float _2030 = isnan(_2027) ? _2029 : (isnan(_2029) ? _2027 : min(_2029, _2027));
        float _2034 = (_2030 * _1526) + _1515;
        float _2035 = (_2030 * _1529) + _1519;
        float _2036 = (_2030 * _1532) + _1523;
        float _2037 = _2030 * 9.9999997473787516355514526367188e-05;
        float _2039 = (-1.0) - _2037;
        float _2041 = _2037 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2036 > _2041) || ((_2036 < _2039) || ((_2035 > _2041) || ((_2035 < _2039) || ((_2034 < _2039) || (_2034 > _2041))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2181 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2036, cbModelParam._m0[9u].z, fma(_2035, cbModelParam._m0[9u].y, _2034 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2036, cbModelParam._m0[10u].z, fma(_2035, cbModelParam._m0[10u].y, _2034 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2036, cbModelParam._m0[11u].z, fma(_2035, cbModelParam._m0[11u].y, _2034 * cbModelParam._m0[11u].x))), _1467);
            frontier_phi_13_35_ladder = _2181.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2181.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2181.x * cbModelParam._m0[1u].y;
        }
        _1548 = frontier_phi_13_35_ladder_2;
        _1550 = frontier_phi_13_35_ladder_1;
        _1552 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1536 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_659, _660, _661), _1467);
        _1548 = _1536.x * cbModelParam._m0[1u].y;
        _1550 = _1536.y * cbModelParam._m0[1u].y;
        _1552 = _1536.z * cbModelParam._m0[1u].y;
    }
    float _1556 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _501);
    float _1557 = isnan(_1556) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1556 : min(cbModelParam._m0[25u].w, _1556));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1611 = fma(_720, cbModelParam._m0[21u].z, fma(_716, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _712)) + cbModelParam._m0[21u].w;
        float _1615 = fma(_720, cbModelParam._m0[22u].z, fma(_716, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _712)) + cbModelParam._m0[22u].w;
        float _1619 = fma(_720, cbModelParam._m0[23u].z, fma(_716, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _712)) + cbModelParam._m0[23u].w;
        float _1622 = fma(_661, cbModelParam._m0[21u].z, fma(_660, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _659));
        float _1625 = fma(_661, cbModelParam._m0[22u].z, fma(_660, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _659));
        float _1628 = fma(_661, cbModelParam._m0[23u].z, fma(_660, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _659));
        float _1736;
        if (_1622 > 0.0)
        {
            _1736 = abs((1.0 - _1611) / _1622);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1611 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1736 = frontier_phi_25_21_ladder;
        }
        float _2054;
        if (_1625 > 0.0)
        {
            _2054 = abs((1.0 - _1615) / _1625);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1615 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2054 = frontier_phi_37_32_ladder;
        }
        float _2381;
        if (_1628 > 0.0)
        {
            _2381 = abs((1.0 - _1619) / _1628);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1619 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2381 = frontier_phi_47_44_ladder;
        }
        float _2383 = isnan(_2054) ? _1736 : (isnan(_1736) ? _2054 : min(_1736, _2054));
        float _2384 = isnan(_2381) ? _2383 : (isnan(_2383) ? _2381 : min(_2383, _2381));
        float _2388 = (_2384 * _1622) + _1611;
        float _2389 = (_2384 * _1625) + _1615;
        float _2390 = (_2384 * _1628) + _1619;
        float _2391 = _2384 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2391;
        float _2394 = _2391 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2390 > _2394) || ((_2390 < _2392) || ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 < _2392) || (_2388 > _2394))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2508 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2390, cbModelParam._m0[17u].z, fma(_2389, cbModelParam._m0[17u].y, _2388 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2390, cbModelParam._m0[18u].z, fma(_2389, cbModelParam._m0[18u].y, _2388 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2390, cbModelParam._m0[19u].z, fma(_2389, cbModelParam._m0[19u].y, _2388 * cbModelParam._m0[19u].x))), _1557);
            frontier_phi_22_47_ladder = _2508.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2508.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2508.x * cbModelParam._m0[1u].z;
        }
        _1647 = frontier_phi_22_47_ladder_2;
        _1649 = frontier_phi_22_47_ladder_1;
        _1651 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1631 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_659, _660, _661), _1557);
        _1647 = _1631.x * cbModelParam._m0[1u].z;
        _1649 = _1631.y * cbModelParam._m0[1u].z;
        _1651 = _1631.z * cbModelParam._m0[1u].z;
    }
    float _1663 = ((((1.0 - _680) * ((_667 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_680 * _667)) * _651;
    float _1664 = _1663 * ((cbModelParam._m0[1u].w * (_1647 - _1548)) + _1548);
    float _1665 = _1663 * ((cbModelParam._m0[1u].w * (_1649 - _1550)) + _1550);
    float _1666 = _1663 * ((cbModelParam._m0[1u].w * (_1651 - _1552)) + _1552);
    float _1669 = fma(_1666, cbSceneParam._m0[89u].z, fma(_1665, cbSceneParam._m0[89u].y, _1664 * cbSceneParam._m0[89u].x));
    float _1672 = fma(_1666, cbSceneParam._m0[90u].z, fma(_1665, cbSceneParam._m0[90u].y, _1664 * cbSceneParam._m0[90u].x));
    float _1675 = fma(_1666, cbSceneParam._m0[91u].z, fma(_1665, cbSceneParam._m0[91u].y, _1664 * cbSceneParam._m0[91u].x));
    float _1710 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1714 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1718 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1722 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1723 = _1710 / _1722;
    float _1724 = _1714 / _1722;
    float _1725 = _1718 / _1722;
    float _1872;
    float _1873;
    float _1874;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1752 = ((uint(_1725 > cbSceneParam._m0[59u].y) + uint(_1725 > cbSceneParam._m0[59u].x)) + uint(_1725 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1753 = _1752 + 43u;
        uint _1761 = _1752 + 44u;
        uint _1769 = _1752 + 45u;
        uint _1777 = _1752 + 46u;
        float _1788 = fma(_1722, cbSceneParam._m0[_1753].w, fma(_1718, cbSceneParam._m0[_1753].z, fma(_1714, cbSceneParam._m0[_1753].y, _1710 * cbSceneParam._m0[_1753].x)));
        float _1792 = fma(_1722, cbSceneParam._m0[_1761].w, fma(_1718, cbSceneParam._m0[_1761].z, fma(_1714, cbSceneParam._m0[_1761].y, _1710 * cbSceneParam._m0[_1761].x)));
        float _1800 = fma(_1722, cbSceneParam._m0[_1777].w, fma(_1718, cbSceneParam._m0[_1777].z, fma(_1714, cbSceneParam._m0[_1777].y, _1710 * cbSceneParam._m0[_1777].x)));
        float _1805 = cbSceneParam._m0[33u].z * _1800;
        float _1807 = cbSceneParam._m0[33u].w * _1800;
        float _1810 = fma(_1722, cbSceneParam._m0[_1769].w, fma(_1718, cbSceneParam._m0[_1769].z, fma(_1714, cbSceneParam._m0[_1769].y, _1710 * cbSceneParam._m0[_1769].x))) / _1800;
        float _1858 = (cbSceneParam._m0[33u].x - sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725))) * cbSceneParam._m0[33u].y;
        float _4115 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1865 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1805 + _1788) / _1800, (_1807 + _1792) / _1800), _1810), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1807 + _1788) / _1800, (_1792 - _1805) / _1800), _1810), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1788 - _1805) / _1800, (_1792 - _1807) / _1800), _1810), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1788 - _1807) / _1800, (_1805 + _1792) / _1800), _1810), 0.0)).x), vec4(0.25)));
        _1872 = 1.0 - (_1865 * cbSceneParam._m0[34u].x);
        _1873 = 1.0 - (_1865 * cbSceneParam._m0[34u].y);
        _1874 = 1.0 - (_1865 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1872 = 1.0;
        _1873 = 1.0;
        _1874 = 1.0;
    }
    float _1938;
    float _1940;
    float _1942;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1926 = fma(_1722, cbSceneParam._m0[63u].w, fma(_1718, cbSceneParam._m0[63u].z, fma(_1714, cbSceneParam._m0[63u].y, _1710 * cbSceneParam._m0[63u].x)));
        float _1927 = fma(_1722, cbSceneParam._m0[60u].w, fma(_1718, cbSceneParam._m0[60u].z, fma(_1714, cbSceneParam._m0[60u].y, _1710 * cbSceneParam._m0[60u].x))) / _1926;
        float _1928 = fma(_1722, cbSceneParam._m0[61u].w, fma(_1718, cbSceneParam._m0[61u].z, fma(_1714, cbSceneParam._m0[61u].y, _1710 * cbSceneParam._m0[61u].x))) / _1926;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1927 >= cbSceneParam._m0[64u].x) && (_1928 >= cbSceneParam._m0[64u].y)) && (_1927 <= cbSceneParam._m0[64u].z)) && (_1928 <= cbSceneParam._m0[64u].w))
        {
            float _2067 = fma(_1722, cbSceneParam._m0[62u].w, fma(_1718, cbSceneParam._m0[62u].z, fma(_1714, cbSceneParam._m0[62u].y, _1710 * cbSceneParam._m0[62u].x))) / _1926;
            float _2071 = isnan(cbSceneParam._m0[41u].w) ? _2067 : (isnan(_2067) ? cbSceneParam._m0[41u].w : max(_2067, cbSceneParam._m0[41u].w));
            float _2114 = (cbSceneParam._m0[33u].x - sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725))) * cbSceneParam._m0[33u].y;
            float _4131 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
            float _2121 = (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1927, cbSceneParam._m0[33u].w + _1928), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1927, _1928 - cbSceneParam._m0[33u].z), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1927 - cbSceneParam._m0[33u].z, _1928 - cbSceneParam._m0[33u].w), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1927 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1928), _2071), 0.0)).x), vec4(0.25)));
            float _2125 = 1.0 - (_2121 * cbSceneParam._m0[34u].x);
            float _2126 = 1.0 - (_2121 * cbSceneParam._m0[34u].y);
            float _2127 = 1.0 - (_2121 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2127) ? _1874 : (isnan(_1874) ? _2127 : min(_1874, _2127));
            frontier_phi_34_33_ladder_1 = isnan(_2126) ? _1873 : (isnan(_1873) ? _2126 : min(_1873, _2126));
            frontier_phi_34_33_ladder_2 = isnan(_2125) ? _1872 : (isnan(_1872) ? _2125 : min(_1872, _2125));
        }
        else
        {
            frontier_phi_34_33_ladder = _1874;
            frontier_phi_34_33_ladder_1 = _1873;
            frontier_phi_34_33_ladder_2 = _1872;
        }
        _1938 = frontier_phi_34_33_ladder_2;
        _1940 = frontier_phi_34_33_ladder_1;
        _1942 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1938 = _1872;
        _1940 = _1873;
        _1942 = _1874;
    }
    uvec4 _1947 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1949 = _1947.x * 14u;
    uint _1950 = _1949 + 13u;
    float _1957 = _651 + (-1.0);
    float _1962 = (cbLight._m0[_1950].x * _1957) + 1.0;
    float _1963 = (cbLight._m0[_1950].y * _1957) + 1.0;
    float _1964 = (cbLight._m0[_1950].z * _1957) + 1.0;
    float _1965 = (cbLight._m0[_1950].w * _1957) + 1.0;
    uint _1966 = _1949 + 5u;
    float _1972 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
    uint _1976 = _1949 + 4u;
    float _1986 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
    uint _1990 = _1949 | 1u;
    float _2001 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_498, _499, _500));
    float _2004 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_498, _499, _500));
    float _4167 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _4178 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2009 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * 0.3183098733425140380859375;
    float _2011 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * 0.3183098733425140380859375;
    float _2018 = ((cbLight._m0[_1966].x * _1972) * _2011) + (((cbLight._m0[_1976].x * _1938) * _1986) * _2009);
    float _2019 = ((_1972 * cbLight._m0[_1966].y) * _2011) + (((cbLight._m0[_1976].y * _1940) * _1986) * _2009);
    float _2020 = ((_1972 * cbLight._m0[_1966].z) * _2011) + (((cbLight._m0[_1976].z * _1942) * _1986) * _2009);
    uvec4 _2024 = floatBitsToUint(cbLight._m0[_1949 + 12u]);
    bool _2026 = _2024.x == 0u;
    float _2128;
    float _2130;
    float _2132;
    if (_2026)
    {
        _2128 = _2018;
        _2130 = _2019;
        _2132 = _2020;
    }
    else
    {
        uint _2136 = _1949 + 6u;
        float _2152 = (dot(vec3(cbLight._m0[_1949 + 2u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _2153 = _2152 * _2152;
        float _4189 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2154 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _2155 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2128 = (((cbLight._m0[_2136].x * 0.3183098733425140380859375) * _2154) * _2155) + _2018;
        _2130 = (((cbLight._m0[_2136].y * 0.3183098733425140380859375) * _2154) * _2155) + _2019;
        _2132 = (((cbLight._m0[_2136].z * 0.3183098733425140380859375) * _2154) * _2155) + _2020;
    }
    bool _2135 = _2024.y == 0u;
    float _2190;
    float _2192;
    float _2194;
    if (_2135)
    {
        _2190 = _2128;
        _2192 = _2130;
        _2194 = _2132;
    }
    else
    {
        uint _2352 = _1949 + 7u;
        float _2368 = (dot(vec3(cbLight._m0[_1949 + 3u].xyz), vec3(_498, _499, _500)) * 0.5) + 0.5;
        float _2369 = _2368 * _2368;
        float _4205 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2370 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2371 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2190 = (((cbLight._m0[_2352].x * 0.3183098733425140380859375) * _2370) * _2371) + _2128;
        _2192 = (((cbLight._m0[_2352].y * 0.3183098733425140380859375) * _2370) * _2371) + _2130;
        _2194 = (((cbLight._m0[_2352].z * 0.3183098733425140380859375) * _2370) * _2371) + _2132;
    }
    uint _2197 = _1949 + 8u;
    float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1949].w)) * _501) * 0.949999988079071044921875);
    float _2211 = _2210 * _2210;
    float _2212 = cbLight._m0[_1949].x + _577;
    float _2213 = cbLight._m0[_1949].y + _578;
    float _2214 = cbLight._m0[_1949].z + _579;
    float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
    float _2219 = _2218 * _2212;
    float _2220 = _2218 * _2213;
    float _2221 = _2218 * _2214;
    float _2222 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_1949].xyz));
    float _4221 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _4232 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _2226 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2227 = dot(vec3(_498, _499, _500), vec3(_2219, _2220, _2221));
    float _4243 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _2231 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_2219, _2220, _2221));
    float _4254 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2235 = _2211 * _2211;
    float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
    float _2250 = (exp2(log2(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2251 = 1.0 - _2211;
    float _2262 = (0.5 / (((_2226 * ((_2225 * _2251) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2251) + _2211) * _2225))) * _2225;
    float _4265 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2264 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
    uint _2278 = _1949 + 9u;
    float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1990].w)) * _501) * 0.949999988079071044921875);
    float _2290 = _2289 * _2289;
    float _2291 = cbLight._m0[_1990].x + _577;
    float _2292 = cbLight._m0[_1990].y + _578;
    float _2293 = cbLight._m0[_1990].z + _579;
    float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
    float _2298 = _2297 * _2291;
    float _2299 = _2297 * _2292;
    float _2300 = _2297 * _2293;
    float _2301 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_1990].xyz));
    float _4276 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2305 = dot(vec3(_498, _499, _500), vec3(_2298, _2299, _2300));
    float _4287 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _2309 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_2298, _2299, _2300));
    float _4298 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2313 = _2290 * _2290;
    float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
    float _2326 = (exp2(log2(1.0 - (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2327 = 1.0 - _2290;
    float _2337 = (0.5 / (((_2226 * ((_2304 * _2327) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2327) + _2290) * _2304))) * _2304;
    float _4309 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2339 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
    float _2349 = (((_2326 * cbLight._m0[_2278].x) * _2339) * _1972) + ((((cbLight._m0[_2197].x * _1938) * _2250) * _2264) * _1986);
    float _2350 = (((_2326 * cbLight._m0[_2278].y) * _2339) * _1972) + ((((cbLight._m0[_2197].y * _1940) * _2250) * _2264) * _1986);
    float _2351 = (((_2326 * cbLight._m0[_2278].z) * _2339) * _1972) + ((((cbLight._m0[_2197].z * _1942) * _2250) * _2264) * _1986);
    float _2407;
    float _2409;
    float _2411;
    if (_2026)
    {
        _2407 = _2349;
        _2409 = _2350;
        _2411 = _2351;
    }
    else
    {
        uint _2413 = _1949 + 2u;
        uint _2417 = _1949 + 10u;
        float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _501) * 0.949999988079071044921875);
        float _2432 = _2431 * _2431;
        float _2433 = cbLight._m0[_2413].x + _577;
        float _2434 = cbLight._m0[_2413].y + _578;
        float _2435 = cbLight._m0[_2413].z + _579;
        float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
        float _2440 = _2439 * _2433;
        float _2441 = _2439 * _2434;
        float _2442 = _2439 * _2435;
        float _2443 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2413].xyz));
        float _4320 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2447 = dot(vec3(_498, _499, _500), vec3(_2440, _2441, _2442));
        float _4331 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2451 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2440, _2441, _2442));
        float _4342 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2455 = _2432 * _2432;
        float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
        float _2468 = (exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2469 = 1.0 - _2432;
        float _2479 = (0.5 / (((_2226 * ((_2446 * _2469) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2469) + _2432) * _2446))) * _2446;
        float _4353 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2481 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
        float _2482 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
        _2407 = (((_2468 * cbLight._m0[_2417].x) * _2481) * _2482) + _2349;
        _2409 = (((_2468 * cbLight._m0[_2417].y) * _2481) * _2482) + _2350;
        _2411 = (((_2468 * cbLight._m0[_2417].z) * _2481) * _2482) + _2351;
    }
    float _2513;
    float _2515;
    float _2517;
    if (_2135)
    {
        _2513 = _2407;
        _2515 = _2409;
        _2517 = _2411;
    }
    else
    {
        uint _2524 = _1949 + 3u;
        uint _2528 = _1949 + 11u;
        float _2542 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2524].w)) * _501) * 0.949999988079071044921875);
        float _2543 = _2542 * _2542;
        float _2544 = cbLight._m0[_2524].x + _577;
        float _2545 = cbLight._m0[_2524].y + _578;
        float _2546 = cbLight._m0[_2524].z + _579;
        float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
        float _2551 = _2550 * _2544;
        float _2552 = _2550 * _2545;
        float _2553 = _2550 * _2546;
        float _2554 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_2524].xyz));
        float _4369 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2558 = dot(vec3(_498, _499, _500), vec3(_2551, _2552, _2553));
        float _4380 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2561 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2562 = dot(vec3(cbLight._m0[_2524].xyz), vec3(_2551, _2552, _2553));
        float _4391 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2566 = _2543 * _2543;
        float _2570 = ((_2561 * _2561) * (_2566 + (-1.0))) + 1.0;
        float _2579 = (exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2580 = 1.0 - _2543;
        float _2590 = (0.5 / (((_2226 * ((_2557 * _2580) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2580) + _2543) * _2557))) * _2557;
        float _4402 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2592 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2566 / ((_2570 * _2570) * 3.141590118408203125));
        float _2593 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2513 = (((_2579 * cbLight._m0[_2528].x) * _2592) * _2593) + _2407;
        _2515 = (((_2579 * cbLight._m0[_2528].y) * _2592) * _2593) + _2409;
        _2517 = (((_2579 * cbLight._m0[_2528].z) * _2592) * _2593) + _2411;
    }
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    if (_1947.y == 0u)
    {
        uvec4 _2614 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2615 = _2614.x;
        uint _2626 = uint((float(_2614.y) * floor(float(uint(cbSceneParam._m0[85u].y * _586) / _2615))) + floor(float(uint(cbSceneParam._m0[85u].x * _585) / _2615)));
        float _2636 = (log2(_1725 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2637 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        uint _2640 = uint(isnan(14.0) ? _2637 : (isnan(_2637) ? 14.0 : min(_2637, 14.0)));
        uvec4 _2645 = texelFetch(g_lightClusterGridBuffer, int(((_2640 << 2u) + (_2626 << 6u)) >> 2u));
        uint _2646 = _2645.x;
        uint _2647 = _2614.z;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        if (((((1u << ((_2647 >> 4u) & 15u)) + 4294967295u) & _2646) == 0u) || ((_2647 & 240u) == 0u))
        {
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
        }
        else
        {
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2735;
            float _2737;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            uint _2877 = 0u;
            uint _2886;
            bool _2887;
            for (;;)
            {
                _2886 = texelFetch(g_lightClassification, int((((_2640 << 5u) + (_2626 << 9u)) + (_2877 << 2u)) >> 2u)).x;
                _2887 = _2886 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2887)
                {
                    frontier_phi_66_pred = _2876;
                    frontier_phi_66_pred_1 = _2875;
                    frontier_phi_66_pred_2 = _2874;
                    frontier_phi_66_pred_3 = _2873;
                    frontier_phi_66_pred_4 = _2872;
                    frontier_phi_66_pred_5 = _2871;
                }
                else
                {
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    uint _3001;
                    _2995 = _2871;
                    _2996 = _2872;
                    _2997 = _2873;
                    _2998 = _2874;
                    _2999 = _2875;
                    _3000 = _2876;
                    _3001 = _2886;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    for (;;)
                    {
                        uint _3005 = uint(findLSB(_3001)) + (_2877 << 5u);
                        uint _3002 = (_3001 + 4294967295u) & _3001;
                        uint _3007 = _3005 * 48u;
                        vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 3u)).x));
                        uint _3027 = (_3005 * 48u) + 4u;
                        vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3027)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 3u)).x));
                        uint _3046 = (_3005 * 48u) + 8u;
                        vec3 _3057 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x));
                        float _3061 = _3021.x - _1723;
                        float _3062 = _3021.y - _1724;
                        float _3063 = _3021.z - _1725;
                        float _3064 = dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063));
                        float _3067 = inversesqrt(_3064);
                        float _3068 = _3067 * _3061;
                        float _3069 = _3067 * _3062;
                        float _3070 = _3067 * _3063;
                        float _3071 = dot(vec3(_607, _610, _613), vec3(_3068, _3069, _3070));
                        float _3076 = 1.0 - (_3064 * _3021.w);
                        float _4428 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3077 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                        float _3078 = sqrt(_3064) * _3040.w;
                        float _3081 = 1.39999997615814208984375 / (_3078 + 1.39999997615814208984375);
                        float _3082 = _3081 * _3081;
                        float _3085 = ((1.0 - _3082) * _3071) + _3082;
                        float _3088 = _3078 * _3078;
                        float _3092 = ((isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0))) * _3077) / ((_3088 * 0.699999988079071044921875) + 1.0);
                        float _3096 = (-0.0) - _1723;
                        float _3097 = (-0.0) - _1724;
                        float _3098 = (-0.0) - _1725;
                        float _3102 = inversesqrt(dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098)));
                        float _3103 = _3102 * _3096;
                        float _3104 = _3102 * _3097;
                        float _3105 = _3102 * _3098;
                        float _3112 = exp2(log2(1.0 / ((_3088 * 3.5) + 5.0)) * 0.25);
                        float _3113 = 1.0 - _667;
                        float _3120 = sqrt(1.0 - ((1.0 - (_3113 * _3113)) * (1.0 - (_3112 * _3112))));
                        float _3121 = _3120 * _3120;
                        float _3122 = _3121 * _3121;
                        float _3123 = _3103 + _3068;
                        float _3124 = _3104 + _3069;
                        float _3125 = _3105 + _3070;
                        float _3129 = inversesqrt(dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125)));
                        float _3133 = dot(vec3(_607, _610, _613), vec3(_3103, _3104, _3105));
                        float _4444 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3136 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                        float _3137 = dot(vec3(_607, _610, _613), vec3(_3129 * _3123, _3129 * _3124, _3129 * _3125));
                        float _4455 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3140 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3144 = ((_3140 * _3140) * (_3122 + (-1.0))) + 1.0;
                        float _3145 = _3081 * _3121;
                        float _3146 = _3145 * _3145;
                        float _3149 = ((1.0 - _3146) * _3071) + _3146;
                        float _4466 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3150 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                        float _3151 = 1.0 - _3121;
                        float _3161 = (0.5 / (((_3150 * ((_3136 * _3151) + _3121)) + 9.9999999392252902907785028219223e-09) + (((_3150 * _3151) + _3121) * _3136))) * _3150;
                        float _4477 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3172 = (((_3122 * 3.1415927410125732421875) * (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) / ((_3144 * _3144) * ((_3088 * 2.1991131305694580078125) + 3.141590118408203125))) * _3077;
                        _2930 = (_3092 * _3040.x) + _2998;
                        _2931 = (_3092 * _3040.y) + _2999;
                        _2932 = (_3092 * _3040.z) + _3000;
                        _2927 = (_3172 * _3057.x) + _2995;
                        _2928 = (_3172 * _3057.y) + _2996;
                        _2929 = (_3172 * _3057.z) + _2997;
                        if (_3002 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2995 = _2927;
                            _2996 = _2928;
                            _2997 = _2929;
                            _2998 = _2930;
                            _2999 = _2931;
                            _3000 = _2932;
                            _3001 = _3002;
                        }
                    }
                    frontier_phi_66_pred = _2932;
                    frontier_phi_66_pred_1 = _2931;
                    frontier_phi_66_pred_2 = _2930;
                    frontier_phi_66_pred_3 = _2929;
                    frontier_phi_66_pred_4 = _2928;
                    frontier_phi_66_pred_5 = _2927;
                }
                _2737 = frontier_phi_66_pred;
                _2735 = frontier_phi_66_pred_1;
                _2733 = frontier_phi_66_pred_2;
                _2731 = frontier_phi_66_pred_3;
                _2729 = frontier_phi_66_pred_4;
                _2727 = frontier_phi_66_pred_5;
                uint _2878 = _2877 + 1u;
                if (_2878 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2871 = _2727;
                    _2872 = _2729;
                    _2873 = _2731;
                    _2874 = _2733;
                    _2875 = _2735;
                    _2876 = _2737;
                    _2877 = _2878;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
        }
        uvec4 _2740 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2741 = _2740.z;
        uint _2743 = (_2741 >> 8u) & 15u;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        if (((4294967295u << _2743) & _2646) == 0u)
        {
            _2839 = _2726;
            _2841 = _2728;
            _2843 = _2730;
            _2845 = _2732;
            _2847 = _2734;
            _2849 = _2736;
        }
        else
        {
            float _2864 = inversesqrt(dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725)));
            float _2865 = _2864 * _1723;
            float _2866 = _2864 * _1724;
            float _2867 = _2864 * _1725;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2743 < ((_2741 >> 12u) & 15u))
            {
                float _2840;
                float _2842;
                float _2844;
                float _2846;
                float _2848;
                float _2850;
                float _2978 = _2726;
                float _2979 = _2728;
                float _2980 = _2730;
                float _2981 = _2732;
                float _2982 = _2734;
                float _2983 = _2736;
                uint _2984 = _2743;
                uint _2993;
                bool _2994;
                for (;;)
                {
                    _2993 = texelFetch(g_lightClassification, int((((_2640 << 5u) + (_2626 << 9u)) + (_2984 << 2u)) >> 2u)).x;
                    _2994 = _2993 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2994)
                    {
                        frontier_phi_72_pred = _2983;
                        frontier_phi_72_pred_1 = _2982;
                        frontier_phi_72_pred_2 = _2981;
                        frontier_phi_72_pred_3 = _2980;
                        frontier_phi_72_pred_4 = _2979;
                        frontier_phi_72_pred_5 = _2978;
                    }
                    else
                    {
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3190 = _2978;
                        float _3191 = _2979;
                        float _3192 = _2980;
                        float _3193 = _2981;
                        float _3194 = _2982;
                        float _3195 = _2983;
                        uint _3196 = _2993;
                        uint _3197;
                        vec4 _3222;
                        float _3223;
                        vec4 _3238;
                        vec3 _3250;
                        vec4 _3266;
                        vec4 _3281;
                        float _3327;
                        bool _3328;
                        for (;;)
                        {
                            uint _3207 = ((_2984 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3196));
                            _3197 = (_3196 + 4294967295u) & _3196;
                            uint _3209 = _3207 * 40u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            _3223 = _3222.w;
                            uint _3225 = (_3207 * 40u) + 4u;
                            _3238 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3225)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3225 + 3u)).x));
                            uint _3240 = (_3207 * 40u) + 8u;
                            _3250 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x));
                            uint _3253 = (_3207 * 40u) + 16u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            uint _3268 = (_3207 * 40u) + 20u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            uint _3283 = (_3207 * 40u) + 24u;
                            vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            uint _3302 = (_3207 * 40u) + 28u;
                            vec4 _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            _3327 = fma(_1725, _3315.z, fma(_1724, _3315.y, _3315.x * _1723)) + _3315.w;
                            _3328 = !((fma(_1725, _3296.z, fma(_1724, _3296.y, _3296.x * _1723)) + _3296.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3328)
                            {
                                float _3355 = _3222.x - _1723;
                                float _3356 = _3222.y - _1724;
                                float _3357 = _3222.z - _1725;
                                float _3358 = dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357));
                                float _3361 = inversesqrt(_3358);
                                float _3362 = _3361 * _3355;
                                float _3363 = _3361 * _3356;
                                float _3364 = _3361 * _3357;
                                float _3368 = 1.0 - (_3358 / (_3223 * _3223));
                                float _4488 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3369 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                                float _3373 = sqrt(_3358) * _3238.w;
                                float _3375 = 1.39999997615814208984375 / (_3373 + 1.39999997615814208984375);
                                float _3376 = _3375 * _3375;
                                float _3379 = ((1.0 - _3376) * dot(vec3(_3362, _3363, _3364), vec3(_607, _610, _613))) + _3376;
                                float _3382 = _3373 * _3373;
                                float _3386 = (fma(_1725, _3266.z, fma(_1724, _3266.y, _3266.x * _1723)) + _3266.w) / _3327;
                                float _3387 = (fma(_1725, _3281.z, fma(_1724, _3281.y, _3281.x * _1723)) + _3281.w) / _3327;
                                float _3391 = 1.0 - dot(vec2(_3386, _3387), vec2(_3386, _3387));
                                float _4504 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3392 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3393 = _3392 * (((isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0))) * _3369) / ((_3382 * 0.699999988079071044921875) + 1.0));
                                float _3405 = exp2(log2(1.0 / ((_3382 * 3.5) + 5.0)) * 0.25);
                                float _3406 = 1.0 - _667;
                                float _3413 = sqrt(1.0 - ((1.0 - (_3406 * _3406)) * (1.0 - (_3405 * _3405))));
                                float _3414 = _3413 * _3413;
                                float _3415 = _3414 * _3414;
                                float _3416 = _3362 - _2865;
                                float _3417 = _3363 - _2866;
                                float _3418 = _3364 - _2867;
                                float _3422 = inversesqrt(dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418)));
                                float _3426 = dot(vec3(_607, _610, _613), vec3((-0.0) - _2865, (-0.0) - _2866, (-0.0) - _2867));
                                float _4515 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3429 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3430 = dot(vec3(_607, _610, _613), vec3(_3422 * _3416, _3422 * _3417, _3422 * _3418));
                                float _4526 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3433 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                                float _3437 = ((_3433 * _3433) * (_3415 + (-1.0))) + 1.0;
                                float _3438 = _3375 * _3414;
                                float _3439 = _3438 * _3438;
                                float _3445 = ((1.0 - _3439) * dot(vec3(_607, _610, _613), vec3(_3362, _3363, _3364))) + _3439;
                                float _4537 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3446 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3447 = 1.0 - _3414;
                                float _3457 = (0.5 / (((_3446 * ((_3429 * _3447) + _3414)) + 9.9999999392252902907785028219223e-09) + (((_3446 * _3447) + _3414) * _3429))) * _3446;
                                float _4548 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3467 = (_3392 * _3369) * (((_3415 * 3.1415927410125732421875) * (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) / ((_3437 * _3437) * ((_3382 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3393 * _3238.y;
                                frontier_phi_78_pred_1 = _3393 * _3238.x;
                                frontier_phi_78_pred_2 = _3467 * _3250.z;
                                frontier_phi_78_pred_3 = _3467 * _3250.y;
                                frontier_phi_78_pred_4 = _3467 * _3250.x;
                                frontier_phi_78_pred_5 = _3393 * _3238.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3475 = frontier_phi_78_pred;
                            _3474 = frontier_phi_78_pred_1;
                            _3473 = frontier_phi_78_pred_2;
                            _3472 = frontier_phi_78_pred_3;
                            _3471 = frontier_phi_78_pred_4;
                            _3476 = frontier_phi_78_pred_5;
                            _3180 = _3474 + _3193;
                            _3181 = _3475 + _3194;
                            _3182 = _3476 + _3195;
                            _3177 = _3471 + _3190;
                            _3178 = _3472 + _3191;
                            _3179 = _3473 + _3192;
                            if (_3197 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3197;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3182;
                        frontier_phi_72_pred_1 = _3181;
                        frontier_phi_72_pred_2 = _3180;
                        frontier_phi_72_pred_3 = _3179;
                        frontier_phi_72_pred_4 = _3178;
                        frontier_phi_72_pred_5 = _3177;
                    }
                    _2850 = frontier_phi_72_pred;
                    _2848 = frontier_phi_72_pred_1;
                    _2846 = frontier_phi_72_pred_2;
                    _2844 = frontier_phi_72_pred_3;
                    _2842 = frontier_phi_72_pred_4;
                    _2840 = frontier_phi_72_pred_5;
                    uint _2985 = _2984 + 1u;
                    if (_2985 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2978 = _2840;
                        _2979 = _2842;
                        _2980 = _2844;
                        _2981 = _2846;
                        _2982 = _2848;
                        _2983 = _2850;
                        _2984 = _2985;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2850;
                frontier_phi_60_61_ladder_1 = _2848;
                frontier_phi_60_61_ladder_2 = _2844;
                frontier_phi_60_61_ladder_3 = _2842;
                frontier_phi_60_61_ladder_4 = _2840;
                frontier_phi_60_61_ladder_5 = _2846;
            }
            else
            {
                frontier_phi_60_61_ladder = _2736;
                frontier_phi_60_61_ladder_1 = _2734;
                frontier_phi_60_61_ladder_2 = _2730;
                frontier_phi_60_61_ladder_3 = _2728;
                frontier_phi_60_61_ladder_4 = _2726;
                frontier_phi_60_61_ladder_5 = _2732;
            }
            _2839 = frontier_phi_60_61_ladder_4;
            _2841 = frontier_phi_60_61_ladder_3;
            _2843 = frontier_phi_60_61_ladder_2;
            _2845 = frontier_phi_60_61_ladder_5;
            _2847 = frontier_phi_60_61_ladder_1;
            _2849 = frontier_phi_60_61_ladder;
        }
        float _2854 = isnan(1.0) ? _651 : (isnan(_651) ? 1.0 : min(_651, 1.0));
        _2659 = (_2854 * _2845) + _2190;
        _2661 = (_2854 * _2847) + _2192;
        _2663 = (_2854 * _2849) + _2194;
        _2665 = ((_2839 * 0.039999999105930328369140625) * _2854) + _2513;
        _2667 = ((_2841 * 0.039999999105930328369140625) * _2854) + _2515;
        _2669 = ((_2843 * 0.039999999105930328369140625) * _2854) + _2517;
    }
    else
    {
        _2659 = _2190;
        _2661 = _2192;
        _2663 = _2194;
        _2665 = _2513;
        _2667 = _2515;
        _2669 = _2517;
    }
    float _4564 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4575 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4586 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    uint _2689 = _228 + 6u;
    float _2697 = _585 / cbSceneParam._m0[86u].x;
    float _2698 = _586 / cbSceneParam._m0[86u].y;
    vec4 _2712 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2697, _2698, (log2((isnan(cbSceneParam._m0[77u].w) ? _519 : (isnan(_519) ? cbSceneParam._m0[77u].w : min(_519, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2714 = _2712.x;
    float _2715 = _2712.y;
    float _2716 = _2712.z;
    float _2717 = _2712.w;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    if (_519 > cbSceneParam._m0[78u].w)
    {
        float _2751 = isnan(_519) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _519 : min(cbSceneParam._m0[80u].w, _519));
        float _2752 = _2751 / _519;
        float _2763 = _2752 * _570;
        float _2764 = _571 * _2752;
        float _2765 = (-0.0) - _2764;
        float _2767 = _2752 * _572;
        float _2769 = (cbSceneParam._m0[77u].w * _2765) / _2751;
        float _2770 = _2769 + cbSceneParam._m0[79u].w;
        float _2771 = cbSceneParam._m0[79u].w - _2764;
        float _2777 = sqrt(((_2763 * _2763) + (_2764 * _2764)) + (_2767 * _2767));
        float _2780 = (1.0 - (cbSceneParam._m0[77u].w / _2751)) * _2777;
        float _2785 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2787 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2940;
        if (abs((_2765 - _2769) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2940 = ((((_2770 > 0.0) ? exp2(_2785 * _2770) : (2.0 - exp2(_2787 * _2770))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2780;
        }
        else
        {
            float _2900 = 1.0 / cbSceneParam._m0[80u].x;
            float _2901 = isnan(_2771) ? _2770 : (isnan(_2770) ? _2771 : max(_2770, _2771));
            float _2902 = isnan(_2771) ? _2770 : (isnan(_2770) ? _2771 : min(_2770, _2771));
            float _2911 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : min(_2901, 0.0));
            float _2912 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : min(_2902, 0.0));
            _2940 = ((abs(_2777 / _2765) * cbSceneParam._m0[80u].y) * ((((_2911 - _2912) * 2.0) - ((exp2(_2785 * (isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0)))) - exp2(_2785 * (isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0))))) * _2900)) - ((exp2(_2787 * _2911) - exp2(_2787 * _2912)) * _2900))) + (_2780 * cbSceneParam._m0[80u].z);
        }
        vec4 _2942 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2697, _2698, 1.0), 0.0);
        float _2951 = exp2((_2940 * (-1.44269502162933349609375)) * (1.0 - _2942.w));
        float _2952 = log2(_2951);
        float _2968 = log2(_2717);
        _2789 = (exp2(_2968 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].x)) * _2942.x) / cbSceneParam._m0[78u].x)) + _2714;
        _2791 = (exp2(_2968 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].y)) * _2942.y) / cbSceneParam._m0[78u].y)) + _2715;
        _2793 = (exp2(_2968 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2952 * cbSceneParam._m0[78u].z)) * _2942.z) / cbSceneParam._m0[78u].z)) + _2716;
        _2795 = _2951 * _2717;
    }
    else
    {
        _2789 = _2714;
        _2791 = _2715;
        _2793 = _2716;
        _2795 = _2717;
    }
    float _2807 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2808 = _2807 == 3.0;
    float _2809 = log2(_2795);
    float _2816 = exp2(_2809 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2659 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _651))) + ((_2665 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1456)) * cbPerFrame._m0[3u].x));
    float _2817 = exp2(_2809 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2661 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _651))) + ((_2667 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1456)) * cbPerFrame._m0[3u].x));
    float _2818 = exp2(_2809 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2663 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _651))) + ((_2669 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1456)) * cbPerFrame._m0[3u].x));
    float _2827 = (_2807 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2827 * (_2808 ? _2816 : (_2816 + (cbSceneParam._m0[72u].w * _2789)));
    SV_Target.y = _2827 * (_2808 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2791)));
    SV_Target.z = _2827 * (_2808 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2793)));
    SV_Target.w = cbInstanceData._m0[_2689].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2689].w;
}


