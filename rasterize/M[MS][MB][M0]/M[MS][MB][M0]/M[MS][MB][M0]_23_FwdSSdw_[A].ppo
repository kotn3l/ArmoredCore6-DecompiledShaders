#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1102;
float _3488;
float _3489;
float _3490;
float _3491;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _244 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3500 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3511 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3522 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _259 = _254 + 1u;
    uint _263 = _254 + 2u;
    float _272 = sqrt(((cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x));
    float _273 = _272 * TEXCOORD.z;
    float _274 = _272 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _273) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _274) + cbTextureTilingScale._m0[13u].w));
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _315 = _310.x * cbMtdParam._m0[9u].x;
    float _316 = _310.y * cbMtdParam._m0[9u].y;
    float _317 = _310.z * cbMtdParam._m0[9u].z;
    float _321 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _287.x) * _315;
    float _324 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _287.y) * _316;
    float _327 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _287.z) * _317;
    float _334 = ((_315 - _321) * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) + _321;
    float _335 = ((_316 - _324) * (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) + _324;
    float _336 = ((_317 - _327) * (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) + _327;
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _273) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _274) + cbTextureTilingScale._m0[20u].w));
    vec4 _380 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _384 = _380.z;
    float _388 = (_380.x * 2.0) + (-1.0);
    float _389 = (_380.y * 2.0) + (-1.0);
    float _390 = dot(vec2(_388, _389), vec2(_388, _389));
    float _3533 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _395 = sqrt(1.0 - (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))));
    float _400 = _388 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_354.x * 2.0) + (-1.0)));
    float _401 = _389 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_354.y * 2.0) + (-1.0)));
    float _404 = fma(_395, _221, fma(_401, _228, _400 * _214));
    float _407 = fma(_395, _222, fma(_401, _229, _400 * _215));
    float _410 = fma(_395, _223, fma(_401, _230, _400 * _216));
    float _414 = inversesqrt(dot(vec3(_404, _407, _410), vec3(_404, _407, _410)));
    vec4 _450 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _273) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _274) + cbTextureTilingScale._m0[11u].w));
    float _452 = _450.x;
    float _453 = 1.0 - _452;
    float _462 = (cbMtdParam._m0[19u].x + dot(vec4(_414 * _404, _414 * _407, _414 * _410, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_452 - _453) * cbMtdParam._m0[24u].z) + _453) * cbMtdParam._m0[21u].z);
    float _3544 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _470 = (_463 * (cbMtdParam._m0[17u].x - _334)) + _334;
    float _471 = (_463 * (cbMtdParam._m0[17u].y - _335)) + _335;
    float _472 = (_463 * (cbMtdParam._m0[17u].z - _336)) + _336;
    float _477 = (((_354.z - _384) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _384;
    vec4 _490 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _273) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _274) + cbTextureTilingScale._m0[15u].w));
    float _497 = (_490.x * 2.0) + (-1.0);
    float _498 = (_490.y * 2.0) + (-1.0);
    float _499 = dot(vec2(_497, _498), vec2(_497, _498));
    float _3555 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _507 = ((_490.z - _477) * _463) + _477;
    float _517 = ((sqrt(1.0 - (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) - _395) * _463) + _395;
    float _520 = (((_497 - _400) * _463) + _400) + (cbMtdParam._m0[21u].x * _400);
    float _521 = (((_498 - _401) * _463) + _401) + (cbMtdParam._m0[21u].x * _401);
    float _523 = cbMtdParam._m0[22u].x + _380.w;
    float _526 = fma(_517, _221, fma(_521, _228, _520 * _214));
    float _529 = fma(_517, _222, fma(_521, _229, _520 * _215));
    float _532 = fma(_517, _223, fma(_521, _230, _520 * _216));
    float _536 = inversesqrt(dot(vec3(_526, _529, _532), vec3(_526, _529, _532)));
    float _537 = _536 * _526;
    float _538 = _536 * _529;
    float _539 = _536 * _532;
    float _3566 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _540 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _3577 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3588 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _3599 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _3610 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _558 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _599 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _609 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _599);
    float _610 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _599);
    float _611 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _599);
    float _615 = inversesqrt(dot(vec3(_609, _610, _611), vec3(_609, _610, _611)));
    float _616 = _609 * _615;
    float _617 = _610 * _615;
    float _618 = _611 * _615;
    vec4 _623 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _625 = _623.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _782 = sqrt(((_609 * _609) + (_610 * _610)) + (_611 * _611));
        float _788 = (cbMatDynParam._m0[5u].x * _782) + cbMatDynParam._m0[5u].y;
        float _3621 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _793 = (cbMatDynParam._m0[5u].z * _782) + cbMatDynParam._m0[5u].w;
        float _3632 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) - _789)) + _789) < ((_625 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _637 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _638 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _658 = fma(_539, cbSceneParam._m0[5u].z, fma(_538, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _537));
    float _661 = fma(_539, cbSceneParam._m0[6u].z, fma(_538, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _537));
    float _664 = fma(_539, cbSceneParam._m0[7u].z, fma(_538, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _537));
    uint _677 = _254 + 9u;
    uint _678 = _677 + uint(cbMatDynParam._m0[0u].w);
    float _684 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * cbInstanceData._m0[_678].x;
    float _685 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * cbInstanceData._m0[_678].y;
    float _686 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_678].z;
    float _3643 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _687 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _688 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _689 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    vec4 _698 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _637, cbSceneParam._m0[86u].y * _638));
    float _702 = ((isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * TEXCOORD_5.w) * _698.x;
    float _703 = dot(vec3(_537, _538, _539), vec3(_616, _617, _618));
    float _706 = _703 * 2.0;
    float _710 = (_706 * _537) - _616;
    float _711 = (_706 * _538) - _617;
    float _712 = (_706 * _539) - _618;
    float _716 = abs(dot(vec3(_616, _617, _618), vec3(_537, _538, _539)));
    float _3676 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _718 = sqrt(_540);
    float _731 = exp2((_718 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_718 * 3.0));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1101;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _826 = fma(_771, cbModelParam._m0[26u].z, fma(_767, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _763));
        float _830 = fma(_771, cbModelParam._m0[27u].z, fma(_767, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _763));
        float _834 = fma(_771, cbModelParam._m0[28u].z, fma(_767, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _763));
        float _859 = _763 + _537;
        float _860 = _767 + _538;
        float _861 = _771 + _539;
        float _871 = fma(_861, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859)) - _826;
        float _872 = fma(_861, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859)) - _830;
        float _873 = fma(_861, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859)) - _834;
        float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
        float _890 = ((_877 * _871) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_826 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_877 * _872) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_830 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_877 * _873) / cbModelParam._m0[34u].z) + ((((((_834 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        float _929 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_895.x + (-0.5));
        float _931 = _929 * (_895.y + (-0.5));
        float _932 = _929 * (_895.z + (-0.5));
        float _939 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_902.x + (-0.5));
        float _941 = _939 * (_902.y + (-0.5));
        float _942 = _939 * (_902.z + (-0.5));
        float _949 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_909.x + (-0.5));
        float _951 = _949 * (_909.y + (-0.5));
        float _952 = _949 * (_909.z + (-0.5));
        float _959 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_916.x + (-0.5));
        float _961 = _959 * (_916.y + (-0.5));
        float _962 = _959 * (_916.z + (-0.5));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = _930 * 0.5;
        float _967 = _940 * 0.5;
        float _968 = _950 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _983 = (dot(vec3(_537, _538, _539), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _993 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3724 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_995 + 1.0))) + _1000) * _963;
        float _1010 = _931 * 0.5;
        float _1011 = _941 * 0.5;
        float _1012 = _951 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_537, _538, _539), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3757 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1037 + 1.0))) + _1042) * _964;
        float _1052 = _932 * 0.5;
        float _1053 = _942 * 0.5;
        float _1054 = _952 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_537, _538, _539), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3790 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1079 + 1.0))) + _1084) * _965;
        _1101 = _932;
        _1103 = _931;
        _1104 = _930;
        _1105 = _942;
        _1106 = _941;
        _1107 = _940;
        _1108 = _952;
        _1109 = _951;
        _1110 = _950;
        _1111 = _965;
        _1112 = _964;
        _1113 = _963;
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1115 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
    }
    else
    {
        _1101 = _1102;
        _1103 = _1102;
        _1104 = _1102;
        _1105 = _1102;
        _1106 = _1102;
        _1107 = _1102;
        _1108 = _1102;
        _1109 = _1102;
        _1110 = _1102;
        _1111 = _1102;
        _1112 = _1102;
        _1113 = _1102;
        _1114 = 0.0;
        _1115 = 0.0;
        _1116 = 0.0;
    }
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1144 = fma(_771, cbModelParam._m0[30u].z, fma(_767, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _763));
        float _1148 = fma(_771, cbModelParam._m0[31u].z, fma(_767, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _763));
        float _1152 = fma(_771, cbModelParam._m0[32u].z, fma(_767, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _763));
        float _1175 = _763 + _537;
        float _1176 = _767 + _538;
        float _1177 = _771 + _539;
        float _1187 = fma(_1177, cbModelParam._m0[30u].z, fma(_1176, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1175)) - _1144;
        float _1188 = fma(_1177, cbModelParam._m0[31u].z, fma(_1176, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1175)) - _1148;
        float _1189 = fma(_1177, cbModelParam._m0[32u].z, fma(_1176, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1175)) - _1152;
        float _1193 = inversesqrt(dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189)));
        float _1206 = ((_1193 * _1187) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1144 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1193 * _1188) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1148 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1193 * _1189) / cbModelParam._m0[35u].z) + ((((((_1152 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        float _1243 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1210.x + (-0.5));
        float _1245 = _1243 * (_1210.y + (-0.5));
        float _1246 = _1243 * (_1210.z + (-0.5));
        float _1253 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1217.x + (-0.5));
        float _1255 = _1253 * (_1217.y + (-0.5));
        float _1256 = _1253 * (_1217.z + (-0.5));
        float _1263 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1224.x + (-0.5));
        float _1265 = _1263 * (_1224.y + (-0.5));
        float _1266 = _1263 * (_1224.z + (-0.5));
        float _1273 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1231.x + (-0.5));
        float _1275 = _1273 * (_1231.y + (-0.5));
        float _1276 = _1273 * (_1231.z + (-0.5));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = _1244 * 0.5;
        float _1281 = _1254 * 0.5;
        float _1282 = _1264 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_537, _538, _539), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _3853 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1307 + 1.0))) + _1312) * _1277;
        float _1322 = _1245 * 0.5;
        float _1323 = _1255 * 0.5;
        float _1324 = _1265 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_537, _538, _539), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _3886 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1349 + 1.0))) + _1354) * _1278;
        float _1364 = _1246 * 0.5;
        float _1365 = _1256 * 0.5;
        float _1366 = _1266 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_537, _538, _539), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _3919 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1391 + 1.0))) + _1396) * _1279;
        _1413 = _1246;
        _1414 = _1245;
        _1415 = _1244;
        _1416 = _1256;
        _1417 = _1255;
        _1418 = _1254;
        _1419 = _1266;
        _1420 = _1265;
        _1421 = _1264;
        _1422 = _1279;
        _1423 = _1278;
        _1424 = _1277;
        _1425 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1426 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1427 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
    }
    else
    {
        _1413 = _1102;
        _1414 = _1102;
        _1415 = _1102;
        _1416 = _1102;
        _1417 = _1102;
        _1418 = _1102;
        _1419 = _1102;
        _1420 = _1102;
        _1421 = _1102;
        _1422 = _1102;
        _1423 = _1102;
        _1424 = _1102;
        _1425 = 0.0;
        _1426 = 0.0;
        _1427 = 0.0;
    }
    float _1437 = (cbModelParam._m0[1u].x * (_1425 - _1114)) + _1114;
    float _1438 = (cbModelParam._m0[1u].x * (_1426 - _1115)) + _1115;
    float _1439 = (cbModelParam._m0[1u].x * (_1427 - _1116)) + _1116;
    float _1460 = fma(_1439, cbSceneParam._m0[89u].z, fma(_1438, cbSceneParam._m0[89u].y, _1437 * cbSceneParam._m0[89u].x));
    float _1463 = fma(_1439, cbSceneParam._m0[90u].z, fma(_1438, cbSceneParam._m0[90u].y, _1437 * cbSceneParam._m0[90u].x));
    float _1466 = fma(_1439, cbSceneParam._m0[91u].z, fma(_1438, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1437));
    float _1481 = _710 * 0.5;
    float _1482 = _711 * 0.5;
    float _1483 = _712 * 0.5;
    float _1484 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1415, _1418, _1421, _1424));
    float _1487 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1414, _1417, _1420, _1423));
    float _1490 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1413, _1416, _1419, _1422));
    float _1524;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1497 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1101, _1105, _1108, _1111));
        float _1501 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1103, _1106, _1109, _1112));
        float _1505 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1104, _1107, _1110, _1113));
        float _1512 = dot(vec4(cbModelParam._m0[39u]), vec4(_1481, _1482, _1483, 1.0));
        _1524 = dot(vec3(isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1512) ? 0.0 : (isnan(0.0) ? _1512 : max(0.0, _1512))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1524 = 1.0;
    }
    float _1535;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1526 = dot(vec4(cbModelParam._m0[40u]), vec4(_1481, _1482, _1483, 1.0));
        _1535 = dot(vec3(isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1526) ? 0.0 : (isnan(0.0) ? _1526 : max(0.0, _1526))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1535 = 1.0;
    }
    float _1539 = (_1535 * cbModelParam._m0[1u].x) + (_1524 * (1.0 - cbModelParam._m0[1u].x));
    float _1549 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _540);
    float _1550 = isnan(_1549) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1549 : min(cbModelParam._m0[25u].z, _1549));
    float _1631;
    float _1633;
    float _1635;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1598 = fma(_771, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763)) + cbModelParam._m0[13u].w;
        float _1602 = fma(_771, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763)) + cbModelParam._m0[14u].w;
        float _1606 = fma(_771, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763)) + cbModelParam._m0[15u].w;
        float _1609 = fma(_712, cbModelParam._m0[13u].z, fma(_711, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _710));
        float _1612 = fma(_712, cbModelParam._m0[14u].z, fma(_711, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _710));
        float _1615 = fma(_712, cbModelParam._m0[15u].z, fma(_711, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _710));
        float _1643;
        if (_1609 > 0.0)
        {
            _1643 = abs((1.0 - _1598) / _1609);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1598 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1643 = frontier_phi_17_15_ladder;
        }
        float _1867;
        if (_1612 > 0.0)
        {
            _1867 = abs((1.0 - _1602) / _1612);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1602 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1867 = frontier_phi_26_22_ladder;
        }
        float _2113;
        if (_1615 > 0.0)
        {
            _2113 = abs((1.0 - _1606) / _1615);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1606 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2113 = frontier_phi_38_33_ladder;
        }
        float _2115 = isnan(_1867) ? _1643 : (isnan(_1643) ? _1867 : min(_1643, _1867));
        float _2116 = isnan(_2113) ? _2115 : (isnan(_2115) ? _2113 : min(_2115, _2113));
        float _2120 = (_2116 * _1609) + _1598;
        float _2121 = (_2116 * _1612) + _1602;
        float _2122 = (_2116 * _1615) + _1606;
        float _2123 = _2116 * 9.9999997473787516355514526367188e-05;
        float _2125 = (-1.0) - _2123;
        float _2127 = _2123 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2122 > _2127) || ((_2122 < _2125) || ((_2121 > _2127) || ((_2121 < _2125) || ((_2120 < _2125) || (_2120 > _2127))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2246 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2122, cbModelParam._m0[9u].z, fma(_2121, cbModelParam._m0[9u].y, _2120 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2122, cbModelParam._m0[10u].z, fma(_2121, cbModelParam._m0[10u].y, _2120 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2122, cbModelParam._m0[11u].z, fma(_2121, cbModelParam._m0[11u].y, _2120 * cbModelParam._m0[11u].x))), _1550);
            frontier_phi_16_38_ladder = _2246.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2246.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2246.x * cbModelParam._m0[1u].y;
        }
        _1631 = frontier_phi_16_38_ladder_2;
        _1633 = frontier_phi_16_38_ladder_1;
        _1635 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1619 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_710, _711, _712), _1550);
        _1631 = _1619.x * cbModelParam._m0[1u].y;
        _1633 = _1619.y * cbModelParam._m0[1u].y;
        _1635 = _1619.z * cbModelParam._m0[1u].y;
    }
    float _1639 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _540);
    float _1640 = isnan(_1639) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1639 : min(cbModelParam._m0[25u].w, _1639));
    float _1730;
    float _1732;
    float _1734;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1694 = fma(_771, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763)) + cbModelParam._m0[21u].w;
        float _1698 = fma(_771, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763)) + cbModelParam._m0[22u].w;
        float _1702 = fma(_771, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763)) + cbModelParam._m0[23u].w;
        float _1705 = fma(_712, cbModelParam._m0[21u].z, fma(_711, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _710));
        float _1708 = fma(_712, cbModelParam._m0[22u].z, fma(_711, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _710));
        float _1711 = fma(_712, cbModelParam._m0[23u].z, fma(_711, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _710));
        float _1872;
        if (_1705 > 0.0)
        {
            _1872 = abs((1.0 - _1694) / _1705);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1694 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1872 = frontier_phi_28_24_ladder;
        }
        float _2140;
        if (_1708 > 0.0)
        {
            _2140 = abs((1.0 - _1698) / _1708);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1698 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2140 = frontier_phi_40_35_ladder;
        }
        float _2345;
        if (_1711 > 0.0)
        {
            _2345 = abs((1.0 - _1702) / _1711);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1702 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2345 = frontier_phi_49_46_ladder;
        }
        float _2347 = isnan(_2140) ? _1872 : (isnan(_1872) ? _2140 : min(_1872, _2140));
        float _2348 = isnan(_2345) ? _2347 : (isnan(_2347) ? _2345 : min(_2347, _2345));
        float _2352 = (_2348 * _1705) + _1694;
        float _2353 = (_2348 * _1708) + _1698;
        float _2354 = (_2348 * _1711) + _1702;
        float _2355 = _2348 * 9.9999997473787516355514526367188e-05;
        float _2356 = (-1.0) - _2355;
        float _2358 = _2355 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2354 > _2358) || ((_2354 < _2356) || ((_2353 > _2358) || ((_2353 < _2356) || ((_2352 < _2356) || (_2352 > _2358))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2553 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2354, cbModelParam._m0[17u].z, fma(_2353, cbModelParam._m0[17u].y, _2352 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2354, cbModelParam._m0[18u].z, fma(_2353, cbModelParam._m0[18u].y, _2352 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2354, cbModelParam._m0[19u].z, fma(_2353, cbModelParam._m0[19u].y, _2352 * cbModelParam._m0[19u].x))), _1640);
            frontier_phi_25_49_ladder = _2553.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2553.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2553.x * cbModelParam._m0[1u].z;
        }
        _1730 = frontier_phi_25_49_ladder_2;
        _1732 = frontier_phi_25_49_ladder_1;
        _1734 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1714 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_710, _711, _712), _1640);
        _1730 = _1714.x * cbModelParam._m0[1u].z;
        _1732 = _1714.y * cbModelParam._m0[1u].z;
        _1734 = _1714.z * cbModelParam._m0[1u].z;
    }
    float _1746 = ((((1.0 - _731) * ((_718 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_731 * _718)) * _702;
    float _1747 = _1746 * ((cbModelParam._m0[1u].w * (_1730 - _1631)) + _1631);
    float _1748 = _1746 * ((cbModelParam._m0[1u].w * (_1732 - _1633)) + _1633);
    float _1749 = _1746 * ((cbModelParam._m0[1u].w * (_1734 - _1635)) + _1635);
    float _1752 = fma(_1749, cbSceneParam._m0[89u].z, fma(_1748, cbSceneParam._m0[89u].y, _1747 * cbSceneParam._m0[89u].x));
    float _1755 = fma(_1749, cbSceneParam._m0[90u].z, fma(_1748, cbSceneParam._m0[90u].y, _1747 * cbSceneParam._m0[90u].x));
    float _1758 = fma(_1749, cbSceneParam._m0[91u].z, fma(_1748, cbSceneParam._m0[91u].y, _1747 * cbSceneParam._m0[91u].x));
    vec4 _1766 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_637, _638));
    float _1768 = _1766.w;
    float _1780 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1768);
    float _1781 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1768);
    float _1782 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1768);
    uvec4 _1786 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _1788 = _1786.x * 14u;
    uint _1789 = _1788 + 13u;
    float _1796 = _702 + (-1.0);
    float _1801 = (cbLight._m0[_1789].x * _1796) + 1.0;
    float _1802 = (cbLight._m0[_1789].y * _1796) + 1.0;
    float _1803 = (cbLight._m0[_1789].z * _1796) + 1.0;
    float _1804 = (cbLight._m0[_1789].w * _1796) + 1.0;
    uint _1805 = _1788 + 5u;
    float _1811 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
    uint _1815 = _1788 + 4u;
    float _1825 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
    uint _1829 = _1788 | 1u;
    float _1840 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_537, _538, _539));
    float _1843 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_537, _538, _539));
    float _4055 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _4066 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1848 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * 0.3183098733425140380859375;
    float _1850 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * 0.3183098733425140380859375;
    float _1857 = ((cbLight._m0[_1805].x * _1811) * _1850) + (((cbLight._m0[_1815].x * _1780) * _1825) * _1848);
    float _1858 = ((_1811 * cbLight._m0[_1805].y) * _1850) + (((cbLight._m0[_1815].y * _1781) * _1825) * _1848);
    float _1859 = ((_1811 * cbLight._m0[_1805].z) * _1850) + (((cbLight._m0[_1815].z * _1782) * _1825) * _1848);
    uvec4 _1864 = floatBitsToUint(cbLight._m0[_1788 + 12u]);
    bool _1866 = _1864.x == 0u;
    float _1877;
    float _1879;
    float _1881;
    if (_1866)
    {
        _1877 = _1857;
        _1879 = _1858;
        _1881 = _1859;
    }
    else
    {
        uint _1885 = _1788 + 6u;
        float _1901 = (dot(vec3(cbLight._m0[_1788 + 2u].xyz), vec3(_537, _538, _539)) * 0.5) + 0.5;
        float _1902 = _1901 * _1901;
        float _4077 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1904 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
        _1877 = (((cbLight._m0[_1885].x * 0.3183098733425140380859375) * _1903) * _1904) + _1857;
        _1879 = (((cbLight._m0[_1885].y * 0.3183098733425140380859375) * _1903) * _1904) + _1858;
        _1881 = (((cbLight._m0[_1885].z * 0.3183098733425140380859375) * _1903) * _1904) + _1859;
    }
    bool _1884 = _1864.y == 0u;
    float _1922;
    float _1924;
    float _1926;
    if (_1884)
    {
        _1922 = _1877;
        _1924 = _1879;
        _1926 = _1881;
    }
    else
    {
        uint _2084 = _1788 + 7u;
        float _2100 = (dot(vec3(cbLight._m0[_1788 + 3u].xyz), vec3(_537, _538, _539)) * 0.5) + 0.5;
        float _2101 = _2100 * _2100;
        float _4093 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2102 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2103 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
        _1922 = (((cbLight._m0[_2084].x * 0.3183098733425140380859375) * _2102) * _2103) + _1877;
        _1924 = (((cbLight._m0[_2084].y * 0.3183098733425140380859375) * _2102) * _2103) + _1879;
        _1926 = (((cbLight._m0[_2084].z * 0.3183098733425140380859375) * _2102) * _2103) + _1881;
    }
    uint _1929 = _1788 + 8u;
    float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1788].w)) * _540) * 0.949999988079071044921875);
    float _1943 = _1942 * _1942;
    float _1944 = cbLight._m0[_1788].x + _616;
    float _1945 = cbLight._m0[_1788].y + _617;
    float _1946 = cbLight._m0[_1788].z + _618;
    float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
    float _1951 = _1950 * _1944;
    float _1952 = _1950 * _1945;
    float _1953 = _1950 * _1946;
    float _1954 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_1788].xyz));
    float _4109 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _1958 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _1959 = dot(vec3(_537, _538, _539), vec3(_1951, _1952, _1953));
    float _4131 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _1963 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_1951, _1952, _1953));
    float _4142 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1967 = _1943 * _1943;
    float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
    float _1982 = (exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1983 = 1.0 - _1943;
    float _1994 = (0.5 / (((_1958 * ((_1957 * _1983) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _1983) + _1943) * _1957))) * _1957;
    float _4153 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1996 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
    uint _2010 = _1788 + 9u;
    float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1829].w)) * _540) * 0.949999988079071044921875);
    float _2022 = _2021 * _2021;
    float _2023 = cbLight._m0[_1829].x + _616;
    float _2024 = cbLight._m0[_1829].y + _617;
    float _2025 = cbLight._m0[_1829].z + _618;
    float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
    float _2030 = _2029 * _2023;
    float _2031 = _2029 * _2024;
    float _2032 = _2029 * _2025;
    float _2033 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_1829].xyz));
    float _4164 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _2037 = dot(vec3(_537, _538, _539), vec3(_2030, _2031, _2032));
    float _4175 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2041 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_2030, _2031, _2032));
    float _4186 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2045 = _2022 * _2022;
    float _2049 = ((_2040 * _2040) * (_2045 + (-1.0))) + 1.0;
    float _2058 = (exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2059 = 1.0 - _2022;
    float _2069 = (0.5 / (((_1958 * ((_2036 * _2059) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2059) + _2022) * _2036))) * _2036;
    float _4197 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2071 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2045 / ((_2049 * _2049) * 3.141590118408203125));
    float _2081 = (((_2058 * cbLight._m0[_2010].x) * _2071) * _1811) + ((((cbLight._m0[_1929].x * _1780) * _1982) * _1996) * _1825);
    float _2082 = (((_2058 * cbLight._m0[_2010].y) * _2071) * _1811) + ((((cbLight._m0[_1929].y * _1781) * _1982) * _1996) * _1825);
    float _2083 = (((_2058 * cbLight._m0[_2010].z) * _2071) * _1811) + ((((cbLight._m0[_1929].z * _1782) * _1982) * _1996) * _1825);
    float _2145;
    float _2147;
    float _2149;
    if (_1866)
    {
        _2145 = _2081;
        _2147 = _2082;
        _2149 = _2083;
    }
    else
    {
        uint _2151 = _1788 + 2u;
        uint _2155 = _1788 + 10u;
        float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _540) * 0.949999988079071044921875);
        float _2170 = _2169 * _2169;
        float _2171 = cbLight._m0[_2151].x + _616;
        float _2172 = cbLight._m0[_2151].y + _617;
        float _2173 = cbLight._m0[_2151].z + _618;
        float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
        float _2178 = _2177 * _2171;
        float _2179 = _2177 * _2172;
        float _2180 = _2177 * _2173;
        float _2181 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_2151].xyz));
        float _4208 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2184 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2185 = dot(vec3(_537, _538, _539), vec3(_2178, _2179, _2180));
        float _4219 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2188 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2189 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2178, _2179, _2180));
        float _4230 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2193 = _2170 * _2170;
        float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
        float _2206 = (exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2207 = 1.0 - _2170;
        float _2217 = (0.5 / (((_1958 * ((_2184 * _2207) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2207) + _2170) * _2184))) * _2184;
        float _4241 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2219 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
        float _2220 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
        _2145 = (((_2206 * cbLight._m0[_2155].x) * _2219) * _2220) + _2081;
        _2147 = (((_2206 * cbLight._m0[_2155].y) * _2219) * _2220) + _2082;
        _2149 = (((_2206 * cbLight._m0[_2155].z) * _2219) * _2220) + _2083;
    }
    float _2255;
    float _2257;
    float _2259;
    if (_1884)
    {
        _2255 = _2145;
        _2257 = _2147;
        _2259 = _2149;
    }
    else
    {
        uint _2266 = _1788 + 3u;
        uint _2270 = _1788 + 11u;
        float _2284 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2266].w)) * _540) * 0.949999988079071044921875);
        float _2285 = _2284 * _2284;
        float _2286 = cbLight._m0[_2266].x + _616;
        float _2287 = cbLight._m0[_2266].y + _617;
        float _2288 = cbLight._m0[_2266].z + _618;
        float _2292 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
        float _2293 = _2292 * _2286;
        float _2294 = _2292 * _2287;
        float _2295 = _2292 * _2288;
        float _2296 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_2266].xyz));
        float _4257 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2299 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2300 = dot(vec3(_537, _538, _539), vec3(_2293, _2294, _2295));
        float _4268 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2304 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_2293, _2294, _2295));
        float _4279 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2308 = _2285 * _2285;
        float _2312 = ((_2303 * _2303) * (_2308 + (-1.0))) + 1.0;
        float _2321 = (exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2322 = 1.0 - _2285;
        float _2332 = (0.5 / (((_1958 * ((_2299 * _2322) + _2285)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2322) + _2285) * _2299))) * _2299;
        float _4290 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2334 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2308 / ((_2312 * _2312) * 3.141590118408203125));
        float _2335 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
        _2255 = (((_2321 * cbLight._m0[_2270].x) * _2334) * _2335) + _2145;
        _2257 = (((_2321 * cbLight._m0[_2270].y) * _2334) * _2335) + _2147;
        _2259 = (((_2321 * cbLight._m0[_2270].z) * _2334) * _2335) + _2149;
    }
    float _2470;
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    if (_1786.y == 0u)
    {
        float _2410 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2411 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2410;
        float _2412 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2410;
        float _2413 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2410;
        uvec4 _2425 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2426 = _2425.x;
        uint _2437 = uint((float(_2425.y) * floor(float(uint(cbSceneParam._m0[85u].y * _638) / _2426))) + floor(float(uint(cbSceneParam._m0[85u].x * _637) / _2426)));
        float _2447 = (log2(_2413 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2448 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        uint _2451 = uint(isnan(14.0) ? _2448 : (isnan(_2448) ? 14.0 : min(_2448, 14.0)));
        uvec4 _2456 = texelFetch(g_lightClusterGridBuffer, int(((_2451 << 2u) + (_2437 << 6u)) >> 2u));
        uint _2457 = _2456.x;
        uint _2458 = _2425.z;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        if (((((1u << ((_2458 >> 4u) & 15u)) + 4294967295u) & _2457) == 0u) || ((_2458 & 240u) == 0u))
        {
            _2558 = 0.0;
            _2560 = 0.0;
            _2562 = 0.0;
            _2564 = 0.0;
            _2566 = 0.0;
            _2568 = 0.0;
        }
        else
        {
            float _2559;
            float _2561;
            float _2563;
            float _2565;
            float _2567;
            float _2569;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            uint _2717 = 0u;
            uint _2726;
            bool _2727;
            for (;;)
            {
                _2726 = texelFetch(g_lightClassification, int((((_2451 << 5u) + (_2437 << 9u)) + (_2717 << 2u)) >> 2u)).x;
                _2727 = _2726 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2727)
                {
                    frontier_phi_66_pred = _2711;
                    frontier_phi_66_pred_1 = _2716;
                    frontier_phi_66_pred_2 = _2715;
                    frontier_phi_66_pred_3 = _2714;
                    frontier_phi_66_pred_4 = _2713;
                    frontier_phi_66_pred_5 = _2712;
                }
                else
                {
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    uint _2862;
                    _2856 = _2711;
                    _2857 = _2712;
                    _2858 = _2713;
                    _2859 = _2714;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2726;
                    float _2783;
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    for (;;)
                    {
                        uint _2866 = uint(findLSB(_2862)) + (_2717 << 5u);
                        uint _2863 = (_2862 + 4294967295u) & _2862;
                        uint _2868 = _2866 * 48u;
                        vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2868)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2868 + 3u)).x));
                        uint _2888 = (_2866 * 48u) + 4u;
                        vec4 _2901 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 3u)).x));
                        uint _2907 = (_2866 * 48u) + 8u;
                        vec3 _2918 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2907)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2907 + 2u)).x));
                        float _2922 = _2882.x - _2411;
                        float _2923 = _2882.y - _2412;
                        float _2924 = _2882.z - _2413;
                        float _2925 = dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924));
                        float _2928 = inversesqrt(_2925);
                        float _2929 = _2928 * _2922;
                        float _2930 = _2928 * _2923;
                        float _2931 = _2928 * _2924;
                        float _2932 = dot(vec3(_658, _661, _664), vec3(_2929, _2930, _2931));
                        float _2937 = 1.0 - (_2925 * _2882.w);
                        float _4316 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2938 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                        float _2939 = sqrt(_2925) * _2901.w;
                        float _2942 = 1.39999997615814208984375 / (_2939 + 1.39999997615814208984375);
                        float _2943 = _2942 * _2942;
                        float _2946 = ((1.0 - _2943) * _2932) + _2943;
                        float _2949 = _2939 * _2939;
                        float _2953 = ((isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0))) * _2938) / ((_2949 * 0.699999988079071044921875) + 1.0);
                        float _2957 = (-0.0) - _2411;
                        float _2958 = (-0.0) - _2412;
                        float _2959 = (-0.0) - _2413;
                        float _2963 = inversesqrt(dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959)));
                        float _2964 = _2963 * _2957;
                        float _2965 = _2963 * _2958;
                        float _2966 = _2963 * _2959;
                        float _2974 = exp2(log2(1.0 / ((_2949 * 3.5) + 5.0)) * 0.25);
                        float _2975 = 1.0 - _718;
                        float _2982 = sqrt(1.0 - ((1.0 - (_2975 * _2975)) * (1.0 - (_2974 * _2974))));
                        float _2983 = _2982 * _2982;
                        float _2984 = _2983 * _2983;
                        float _2985 = _2964 + _2929;
                        float _2986 = _2965 + _2930;
                        float _2987 = _2966 + _2931;
                        float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
                        float _2995 = dot(vec3(_658, _661, _664), vec3(_2964, _2965, _2966));
                        float _4332 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2998 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _2999 = dot(vec3(_658, _661, _664), vec3(_2991 * _2985, _2991 * _2986, _2991 * _2987));
                        float _4343 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3002 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _3006 = ((_3002 * _3002) * (_2984 + (-1.0))) + 1.0;
                        float _3007 = _2942 * _2983;
                        float _3008 = _3007 * _3007;
                        float _3011 = ((1.0 - _3008) * _2932) + _3008;
                        float _4354 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3012 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3013 = 1.0 - _2983;
                        float _3023 = (0.5 / (((_3012 * ((_2998 * _3013) + _2983)) + 9.9999999392252902907785028219223e-09) + (((_3012 * _3013) + _2983) * _2998))) * _3012;
                        float _4365 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3034 = (((_2984 * 3.1415927410125732421875) * (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) / ((_3006 * _3006) * ((_2949 * 2.1991131305694580078125) + 3.141590118408203125))) * _2938;
                        _2786 = (_2953 * _2901.x) + _2859;
                        _2787 = (_2953 * _2901.y) + _2860;
                        _2788 = (_2953 * _2901.z) + _2861;
                        _2783 = (_3034 * _2918.x) + _2856;
                        _2784 = (_3034 * _2918.y) + _2857;
                        _2785 = (_3034 * _2918.z) + _2858;
                        if (_2863 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2856 = _2783;
                            _2857 = _2784;
                            _2858 = _2785;
                            _2859 = _2786;
                            _2860 = _2787;
                            _2861 = _2788;
                            _2862 = _2863;
                        }
                    }
                    frontier_phi_66_pred = _2783;
                    frontier_phi_66_pred_1 = _2788;
                    frontier_phi_66_pred_2 = _2787;
                    frontier_phi_66_pred_3 = _2786;
                    frontier_phi_66_pred_4 = _2785;
                    frontier_phi_66_pred_5 = _2784;
                }
                _2559 = frontier_phi_66_pred;
                _2569 = frontier_phi_66_pred_1;
                _2567 = frontier_phi_66_pred_2;
                _2565 = frontier_phi_66_pred_3;
                _2563 = frontier_phi_66_pred_4;
                _2561 = frontier_phi_66_pred_5;
                uint _2718 = _2717 + 1u;
                if (_2718 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2711 = _2559;
                    _2712 = _2561;
                    _2713 = _2563;
                    _2714 = _2565;
                    _2715 = _2567;
                    _2716 = _2569;
                    _2717 = _2718;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2558 = _2559;
            _2560 = _2561;
            _2562 = _2563;
            _2564 = _2565;
            _2566 = _2567;
            _2568 = _2569;
        }
        uvec4 _2572 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2573 = _2572.z;
        uint _2575 = (_2573 >> 8u) & 15u;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        if (((4294967295u << _2575) & _2457) == 0u)
        {
            _2679 = _2558;
            _2681 = _2560;
            _2683 = _2562;
            _2685 = _2564;
            _2687 = _2566;
            _2689 = _2568;
        }
        else
        {
            float _2704 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
            float _2705 = _2704 * _2411;
            float _2706 = _2704 * _2412;
            float _2707 = _2704 * _2413;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2575 < ((_2573 >> 12u) & 15u))
            {
                float _2680;
                float _2682;
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2839 = _2558;
                float _2840 = _2560;
                float _2841 = _2562;
                float _2842 = _2564;
                float _2843 = _2566;
                float _2844 = _2568;
                uint _2845 = _2575;
                uint _2854;
                bool _2855;
                for (;;)
                {
                    _2854 = texelFetch(g_lightClassification, int((((_2451 << 5u) + (_2437 << 9u)) + (_2845 << 2u)) >> 2u)).x;
                    _2855 = _2854 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2855)
                    {
                        frontier_phi_77_pred = _2844;
                        frontier_phi_77_pred_1 = _2843;
                        frontier_phi_77_pred_2 = _2842;
                        frontier_phi_77_pred_3 = _2841;
                        frontier_phi_77_pred_4 = _2840;
                        frontier_phi_77_pred_5 = _2839;
                    }
                    else
                    {
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3061 = _2839;
                        float _3062 = _2840;
                        float _3063 = _2841;
                        float _3064 = _2842;
                        float _3065 = _2843;
                        float _3066 = _2844;
                        uint _3067 = _2854;
                        uint _3068;
                        vec4 _3093;
                        float _3094;
                        vec4 _3109;
                        vec3 _3121;
                        vec4 _3136;
                        vec4 _3151;
                        float _3197;
                        bool _3198;
                        for (;;)
                        {
                            uint _3078 = ((_2845 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3067));
                            _3068 = (_3067 + 4294967295u) & _3067;
                            uint _3080 = _3078 * 40u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            _3094 = _3093.w;
                            uint _3096 = (_3078 * 40u) + 4u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3111 = (_3078 * 40u) + 8u;
                            _3121 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x));
                            uint _3123 = (_3078 * 40u) + 16u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3138 = (_3078 * 40u) + 20u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3153 = (_3078 * 40u) + 24u;
                            vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3172 = (_3078 * 40u) + 28u;
                            vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            _3197 = fma(_2413, _3185.z, fma(_2412, _3185.y, _3185.x * _2411)) + _3185.w;
                            _3198 = !((fma(_2413, _3166.z, fma(_2412, _3166.y, _3166.x * _2411)) + _3166.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3198)
                            {
                                float _3225 = _3093.x - _2411;
                                float _3226 = _3093.y - _2412;
                                float _3227 = _3093.z - _2413;
                                float _3228 = dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227));
                                float _3231 = inversesqrt(_3228);
                                float _3232 = _3231 * _3225;
                                float _3233 = _3231 * _3226;
                                float _3234 = _3231 * _3227;
                                float _3238 = 1.0 - (_3228 / (_3094 * _3094));
                                float _4376 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3239 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3243 = sqrt(_3228) * _3109.w;
                                float _3245 = 1.39999997615814208984375 / (_3243 + 1.39999997615814208984375);
                                float _3246 = _3245 * _3245;
                                float _3249 = ((1.0 - _3246) * dot(vec3(_3232, _3233, _3234), vec3(_658, _661, _664))) + _3246;
                                float _3252 = _3243 * _3243;
                                float _3256 = (fma(_2413, _3136.z, fma(_2412, _3136.y, _3136.x * _2411)) + _3136.w) / _3197;
                                float _3257 = (fma(_2413, _3151.z, fma(_2412, _3151.y, _3151.x * _2411)) + _3151.w) / _3197;
                                float _3261 = 1.0 - dot(vec2(_3256, _3257), vec2(_3256, _3257));
                                float _4392 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3263 = _3262 * (((isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0))) * _3239) / ((_3252 * 0.699999988079071044921875) + 1.0));
                                float _3275 = exp2(log2(1.0 / ((_3252 * 3.5) + 5.0)) * 0.25);
                                float _3276 = 1.0 - _718;
                                float _3283 = sqrt(1.0 - ((1.0 - (_3276 * _3276)) * (1.0 - (_3275 * _3275))));
                                float _3284 = _3283 * _3283;
                                float _3285 = _3284 * _3284;
                                float _3286 = _3232 - _2705;
                                float _3287 = _3233 - _2706;
                                float _3288 = _3234 - _2707;
                                float _3292 = inversesqrt(dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288)));
                                float _3296 = dot(vec3(_658, _661, _664), vec3((-0.0) - _2705, (-0.0) - _2706, (-0.0) - _2707));
                                float _4403 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3299 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3300 = dot(vec3(_658, _661, _664), vec3(_3292 * _3286, _3292 * _3287, _3292 * _3288));
                                float _4414 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3303 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3307 = ((_3303 * _3303) * (_3285 + (-1.0))) + 1.0;
                                float _3308 = _3245 * _3284;
                                float _3309 = _3308 * _3308;
                                float _3315 = ((1.0 - _3309) * dot(vec3(_658, _661, _664), vec3(_3232, _3233, _3234))) + _3309;
                                float _4425 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3316 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3317 = 1.0 - _3284;
                                float _3327 = (0.5 / (((_3316 * ((_3299 * _3317) + _3284)) + 9.9999999392252902907785028219223e-09) + (((_3316 * _3317) + _3284) * _3299))) * _3316;
                                float _4436 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3337 = (_3262 * _3239) * (((_3285 * 3.1415927410125732421875) * (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) / ((_3307 * _3307) * ((_3252 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3263 * _3109.y;
                                frontier_phi_83_pred_1 = _3263 * _3109.x;
                                frontier_phi_83_pred_2 = _3337 * _3121.z;
                                frontier_phi_83_pred_3 = _3337 * _3121.y;
                                frontier_phi_83_pred_4 = _3337 * _3121.x;
                                frontier_phi_83_pred_5 = _3263 * _3109.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3345 = frontier_phi_83_pred;
                            _3344 = frontier_phi_83_pred_1;
                            _3343 = frontier_phi_83_pred_2;
                            _3342 = frontier_phi_83_pred_3;
                            _3341 = frontier_phi_83_pred_4;
                            _3346 = frontier_phi_83_pred_5;
                            _3051 = _3344 + _3064;
                            _3052 = _3345 + _3065;
                            _3053 = _3346 + _3066;
                            _3048 = _3341 + _3061;
                            _3049 = _3342 + _3062;
                            _3050 = _3343 + _3063;
                            if (_3068 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3068;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3053;
                        frontier_phi_77_pred_1 = _3052;
                        frontier_phi_77_pred_2 = _3051;
                        frontier_phi_77_pred_3 = _3050;
                        frontier_phi_77_pred_4 = _3049;
                        frontier_phi_77_pred_5 = _3048;
                    }
                    _2690 = frontier_phi_77_pred;
                    _2688 = frontier_phi_77_pred_1;
                    _2686 = frontier_phi_77_pred_2;
                    _2684 = frontier_phi_77_pred_3;
                    _2682 = frontier_phi_77_pred_4;
                    _2680 = frontier_phi_77_pred_5;
                    uint _2846 = _2845 + 1u;
                    if (_2846 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2839 = _2680;
                        _2840 = _2682;
                        _2841 = _2684;
                        _2842 = _2686;
                        _2843 = _2688;
                        _2844 = _2690;
                        _2845 = _2846;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2684;
                frontier_phi_58_59_ladder_1 = _2690;
                frontier_phi_58_59_ladder_2 = _2688;
                frontier_phi_58_59_ladder_3 = _2686;
                frontier_phi_58_59_ladder_4 = _2682;
                frontier_phi_58_59_ladder_5 = _2680;
            }
            else
            {
                frontier_phi_58_59_ladder = _2562;
                frontier_phi_58_59_ladder_1 = _2568;
                frontier_phi_58_59_ladder_2 = _2566;
                frontier_phi_58_59_ladder_3 = _2564;
                frontier_phi_58_59_ladder_4 = _2560;
                frontier_phi_58_59_ladder_5 = _2558;
            }
            _2679 = frontier_phi_58_59_ladder_5;
            _2681 = frontier_phi_58_59_ladder_4;
            _2683 = frontier_phi_58_59_ladder;
            _2685 = frontier_phi_58_59_ladder_3;
            _2687 = frontier_phi_58_59_ladder_2;
            _2689 = frontier_phi_58_59_ladder_1;
        }
        float _2694 = isnan(1.0) ? _702 : (isnan(_702) ? 1.0 : min(_702, 1.0));
        _2470 = (_2694 * _2685) + _1922;
        _2472 = (_2694 * _2687) + _1924;
        _2474 = (_2694 * _2689) + _1926;
        _2476 = ((_2679 * 0.039999999105930328369140625) * _2694) + _2255;
        _2478 = ((_2681 * 0.039999999105930328369140625) * _2694) + _2257;
        _2480 = ((_2683 * 0.039999999105930328369140625) * _2694) + _2259;
    }
    else
    {
        _2470 = _1922;
        _2472 = _1924;
        _2474 = _1926;
        _2476 = _2255;
        _2478 = _2257;
        _2480 = _2259;
    }
    float _4452 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _4463 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4474 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _2497 = ((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2470 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _702))) + ((_2476 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1539)) * cbPerFrame._m0[3u].x);
    float _2498 = ((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2472 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _702))) + ((_2478 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1539)) * cbPerFrame._m0[3u].x);
    float _2499 = ((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2474 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _702))) + ((_2480 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1539)) * cbPerFrame._m0[3u].x);
    uint _2500 = _254 + 6u;
    float _2508 = _637 / cbSceneParam._m0[86u].x;
    float _2509 = _638 / cbSceneParam._m0[86u].y;
    vec4 _2523 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2508, _2509, (log2((isnan(cbSceneParam._m0[77u].w) ? _558 : (isnan(_558) ? cbSceneParam._m0[77u].w : min(_558, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2525 = _2523.x;
    float _2526 = _2523.y;
    float _2527 = _2523.z;
    float _2528 = _2523.w;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    if (_558 > cbSceneParam._m0[78u].w)
    {
        float _2583 = isnan(_558) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _558 : min(cbSceneParam._m0[80u].w, _558));
        float _2584 = _2583 / _558;
        float _2595 = _2584 * _609;
        float _2596 = _610 * _2584;
        float _2597 = (-0.0) - _2596;
        float _2599 = _2584 * _611;
        float _2601 = (cbSceneParam._m0[77u].w * _2597) / _2583;
        float _2602 = _2601 + cbSceneParam._m0[79u].w;
        float _2603 = cbSceneParam._m0[79u].w - _2596;
        float _2609 = sqrt(((_2595 * _2595) + (_2596 * _2596)) + (_2599 * _2599));
        float _2612 = (1.0 - (cbSceneParam._m0[77u].w / _2583)) * _2609;
        float _2617 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2619 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2796;
        if (abs((_2597 - _2601) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2796 = ((((_2602 > 0.0) ? exp2(_2617 * _2602) : (2.0 - exp2(_2619 * _2602))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2612;
        }
        else
        {
            float _2740 = 1.0 / cbSceneParam._m0[80u].x;
            float _2741 = isnan(_2603) ? _2602 : (isnan(_2602) ? _2603 : max(_2602, _2603));
            float _2742 = isnan(_2603) ? _2602 : (isnan(_2602) ? _2603 : min(_2602, _2603));
            float _2751 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : min(_2741, 0.0));
            float _2752 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : min(_2742, 0.0));
            _2796 = ((abs(_2609 / _2597) * cbSceneParam._m0[80u].y) * ((((_2751 - _2752) * 2.0) - ((exp2(_2617 * (isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0)))) - exp2(_2617 * (isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0))))) * _2740)) - ((exp2(_2619 * _2751) - exp2(_2619 * _2752)) * _2740))) + (_2612 * cbSceneParam._m0[80u].z);
        }
        vec4 _2798 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2508, _2509, 1.0), 0.0);
        float _2807 = exp2((_2796 * (-1.44269502162933349609375)) * (1.0 - _2798.w));
        float _2808 = log2(_2807);
        float _2824 = log2(_2528);
        _2621 = (exp2(_2824 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].x)) * _2798.x) / cbSceneParam._m0[78u].x)) + _2525;
        _2623 = (exp2(_2824 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].y)) * _2798.y) / cbSceneParam._m0[78u].y)) + _2526;
        _2625 = (exp2(_2824 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2808 * cbSceneParam._m0[78u].z)) * _2798.z) / cbSceneParam._m0[78u].z)) + _2527;
        _2627 = _2807 * _2528;
    }
    else
    {
        _2621 = _2525;
        _2623 = _2526;
        _2625 = _2527;
        _2627 = _2528;
    }
    bool _2834;
    vec4 _2637;
    vec4 _2659;
    float _2661;
    float _2665;
    float _2666;
    float _2667;
    float _2668;
    bool _2678;
    for (;;)
    {
        _2637 = cbMatDynParam._m0[0u];
        float _2639 = roundEven(_2637.y);
        bool _2640 = _2639 == 3.0;
        float _2641 = log2(_2627);
        float _2648 = exp2(_2641 * cbSceneParam._m0[78u].x) * _2497;
        float _2649 = exp2(_2641 * cbSceneParam._m0[78u].y) * _2498;
        float _2650 = exp2(_2641 * cbSceneParam._m0[78u].z) * _2499;
        float _2657 = _625 + (-0.5);
        _2659 = cbMtdParam._m0[1u];
        _2661 = _2659.y * _2657;
        float _2664 = (_2639 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2665 = _2664 * (_2640 ? _2648 : (_2648 + (cbSceneParam._m0[72u].w * _2621)));
        _2666 = _2664 * (_2640 ? _2649 : (_2649 + (cbSceneParam._m0[72u].w * _2623)));
        _2667 = _2664 * (_2640 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2625)));
        _2668 = _2657 * 0.999000012874603271484375;
        _2678 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2678)
        {
            if ((cbInstanceData._m0[_254 + 7u].x + _2668) < 0.5)
            {
                _2834 = true;
                break;
            }
        }
        uint _2775 = _677 + uint(_2637.w);
        if ((cbInstanceData._m0[_2775].w < 1.0) && ((cbInstanceData._m0[_2775].w + _2668) < 0.5))
        {
            _2834 = true;
            break;
        }
        if ((_2661 + 1.0) < _2659.x)
        {
            _2834 = true;
            break;
        }
        _2834 = false;
        break;
    }
    float _3039;
    if (_2834)
    {
        discard_state = true;
        _3039 = 0.0;
    }
    else
    {
        _3039 = cbInstanceData._m0[_2500].w;
    }
    SV_Target.x = _2665;
    SV_Target.y = _2666;
    SV_Target.z = _2667;
    SV_Target.w = _3039;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2500].w;
    discard_exit();
}


