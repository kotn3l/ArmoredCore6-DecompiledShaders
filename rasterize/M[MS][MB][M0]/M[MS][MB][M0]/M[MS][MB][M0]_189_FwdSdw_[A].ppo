#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1360;
float _4002;
float _4003;
float _4004;
float _4005;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _363 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _365 = _363.x;
    float _375 = dot(vec4(_365, _363.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _392 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_365 - _375) * cbMtdParam._m0[24u].x) + _375) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4014 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _400 = (_393 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _401 = (_393 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _402 = (_393 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _419 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _451 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _465 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_441 - _451) * cbMtdParam._m0[24u].x) + _451) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4025 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _473 = (_466 * ((_419.x * cbMtdParam._m0[13u].x) - _400)) + _400;
    float _474 = (_466 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401;
    float _475 = (_466 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402;
    vec4 _493 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _510 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _512 = _510.x;
    float _513 = _510.y;
    float _514 = _510.z;
    float _521 = ((_493.x - _512) * _393) + _512;
    float _522 = ((_493.y - _513) * _393) + _513;
    float _523 = ((_493.z - _514) * _393) + _514;
    vec4 _535 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _548 = ((_535.z - _523) * _466) + _523;
    float _551 = ((((_535.x - _521) * _466) + _521) * 2.0) + (-1.0);
    float _553 = ((((_535.y - _522) * _466) + _522) * 2.0) + (-1.0);
    float _554 = dot(vec2(_551, _553), vec2(_551, _553));
    float _4036 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = sqrt(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))));
    vec4 _573 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _598 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _600 = _598.x;
    float _601 = 1.0 - _600;
    float _607 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _610 = ((isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : min(_607, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _619 = (_610 - ((((((_600 - _601) * cbMtdParam._m0[24u].z) + _601) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _610))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4057 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _627 = (_620 * (cbMtdParam._m0[17u].x - _473)) + _473;
    float _628 = (_620 * (cbMtdParam._m0[17u].y - _474)) + _474;
    float _629 = (_620 * (cbMtdParam._m0[17u].z - _475)) + _475;
    vec4 _641 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _643 = _641.x;
    float _644 = 1.0 - _643;
    float _671 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_643 - _644) * cbMtdParam._m0[24u].w) + _644) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4068 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _672 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _680 = ((((cbMtdParam._m0[10u].x - _627) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _672) + _627;
    float _681 = ((((cbMtdParam._m0[10u].y - _628) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _672) + _628;
    float _682 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _629)) * _672) + _629;
    float _686 = (cbMtdParam._m0[19u].w * (_573.z - _548)) + _548;
    vec4 _700 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _707 = (_700.x * 2.0) + (-1.0);
    float _708 = (_700.y * 2.0) + (-1.0);
    float _709 = dot(vec2(_707, _708), vec2(_707, _708));
    float _4079 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _717 = (_620 * (_700.z - _686)) + _686;
    float _720 = ((cbMtdParam._m0[23u].y - _717) * _672) + _717;
    vec4 _739 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _745 = (_739.x * 2.0) + (-1.0);
    float _746 = (_739.y * 2.0) + (-1.0);
    float _747 = dot(vec2(_745, _746), vec2(_745, _746));
    float _4090 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _755 = (((_573.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _551;
    float _756 = (((_573.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _553;
    float _768 = (((_707 - _755) + (cbMtdParam._m0[21u].x * _755)) * _620) + _755;
    float _769 = (((_708 - _756) + (cbMtdParam._m0[21u].x * _756)) * _620) + _756;
    float _770 = (_620 * (sqrt(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) - _559)) + _559;
    float _781 = (((_745 - _768) + (_768 * cbMtdParam._m0[22u].z)) * _672) + _768;
    float _782 = (((_746 - _769) + (_769 * cbMtdParam._m0[22u].z)) * _672) + _769;
    float _783 = ((sqrt(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) - _770) * _672) + _770;
    float _785 = cbMtdParam._m0[22u].x + _573.w;
    float _788 = fma(_783, _244 * NORMAL.x, fma(_782, _251 * TANGENT.x, (_237 * _229) * _781));
    float _791 = fma(_783, _244 * NORMAL.y, fma(_782, _251 * TANGENT.y, (_237 * _230) * _781));
    float _794 = fma(_783, _244 * NORMAL.z, fma(_782, _251 * TANGENT.z, (_237 * _231) * _781));
    float _798 = inversesqrt(dot(vec3(_788, _791, _794), vec3(_788, _791, _794)));
    float _799 = _798 * _788;
    float _800 = _798 * _791;
    float _801 = _798 * _794;
    float _4101 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _802 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4123 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _4134 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _4145 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _820 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _871 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _861);
    float _872 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _861);
    float _873 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _861);
    float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
    float _878 = _871 * _877;
    float _879 = _872 * _877;
    float _880 = _873 * _877;
    vec4 _885 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _887 = _885.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1041 = sqrt(((_871 * _871) + (_872 * _872)) + (_873 * _873));
        float _1047 = (cbMatDynParam._m0[5u].x * _1041) + cbMatDynParam._m0[5u].y;
        float _4156 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1052 = (cbMatDynParam._m0[5u].z * _1041) + cbMatDynParam._m0[5u].w;
        float _4167 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) - _1048)) + _1048) < ((_887 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _898 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _899 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _917 = fma(_801, cbSceneParam._m0[5u].z, fma(_800, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _799));
    float _920 = fma(_801, cbSceneParam._m0[6u].z, fma(_800, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _799));
    float _923 = fma(_801, cbSceneParam._m0[7u].z, fma(_800, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _799));
    uint _936 = _257 + 9u;
    uint _937 = _936 + uint(cbMatDynParam._m0[0u].w);
    float _943 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * cbInstanceData._m0[_937].x;
    float _944 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * cbInstanceData._m0[_937].y;
    float _945 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * cbInstanceData._m0[_937].z;
    float _4178 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _4200 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    vec4 _957 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _898, cbSceneParam._m0[86u].y * _899));
    float _961 = ((isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * TEXCOORD_5.w) * _957.x;
    float _962 = dot(vec3(_799, _800, _801), vec3(_878, _879, _880));
    float _965 = _962 * 2.0;
    float _969 = (_965 * _799) - _878;
    float _970 = (_965 * _800) - _879;
    float _971 = (_965 * _801) - _880;
    float _975 = abs(dot(vec3(_878, _879, _880), vec3(_799, _800, _801)));
    float _4211 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _977 = sqrt(_802);
    float _990 = exp2((_977 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_977 * 3.0));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1359;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1084 = fma(_1030, cbModelParam._m0[26u].z, fma(_1026, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1022));
        float _1088 = fma(_1030, cbModelParam._m0[27u].z, fma(_1026, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1022));
        float _1092 = fma(_1030, cbModelParam._m0[28u].z, fma(_1026, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1022));
        float _1117 = _1022 + _799;
        float _1118 = _1026 + _800;
        float _1119 = _1030 + _801;
        float _1129 = fma(_1119, cbModelParam._m0[26u].z, fma(_1118, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1117)) - _1084;
        float _1130 = fma(_1119, cbModelParam._m0[27u].z, fma(_1118, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1117)) - _1088;
        float _1131 = fma(_1119, cbModelParam._m0[28u].z, fma(_1118, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1117)) - _1092;
        float _1135 = inversesqrt(dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131)));
        float _1148 = ((_1135 * _1129) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1084 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1135 * _1130) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1088 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1135 * _1131) / cbModelParam._m0[34u].z) + ((((((_1092 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        float _1187 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1153.x + (-0.5));
        float _1189 = _1187 * (_1153.y + (-0.5));
        float _1190 = _1187 * (_1153.z + (-0.5));
        float _1197 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1160.x + (-0.5));
        float _1199 = _1197 * (_1160.y + (-0.5));
        float _1200 = _1197 * (_1160.z + (-0.5));
        float _1207 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1167.x + (-0.5));
        float _1209 = _1207 * (_1167.y + (-0.5));
        float _1210 = _1207 * (_1167.z + (-0.5));
        float _1217 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1174.x + (-0.5));
        float _1219 = _1217 * (_1174.y + (-0.5));
        float _1220 = _1217 * (_1174.z + (-0.5));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = _1188 * 0.5;
        float _1225 = _1198 * 0.5;
        float _1226 = _1208 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1241 = (dot(vec3(_799, _800, _801), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1251 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4259 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1253 + 1.0))) + _1258) * _1221;
        float _1268 = _1189 * 0.5;
        float _1269 = _1199 * 0.5;
        float _1270 = _1209 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_799, _800, _801), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4292 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1295 + 1.0))) + _1300) * _1222;
        float _1310 = _1190 * 0.5;
        float _1311 = _1200 * 0.5;
        float _1312 = _1210 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_799, _800, _801), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _4325 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1337 + 1.0))) + _1342) * _1223;
        _1359 = _1190;
        _1361 = _1189;
        _1362 = _1188;
        _1363 = _1200;
        _1364 = _1199;
        _1365 = _1198;
        _1366 = _1210;
        _1367 = _1209;
        _1368 = _1208;
        _1369 = _1223;
        _1370 = _1222;
        _1371 = _1221;
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1360;
        _1361 = _1360;
        _1362 = _1360;
        _1363 = _1360;
        _1364 = _1360;
        _1365 = _1360;
        _1366 = _1360;
        _1367 = _1360;
        _1368 = _1360;
        _1369 = _1360;
        _1370 = _1360;
        _1371 = _1360;
        _1372 = 0.0;
        _1373 = 0.0;
        _1374 = 0.0;
    }
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1401 = fma(_1030, cbModelParam._m0[30u].z, fma(_1026, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1022));
        float _1405 = fma(_1030, cbModelParam._m0[31u].z, fma(_1026, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1022));
        float _1409 = fma(_1030, cbModelParam._m0[32u].z, fma(_1026, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1022));
        float _1432 = _1022 + _799;
        float _1433 = _1026 + _800;
        float _1434 = _1030 + _801;
        float _1444 = fma(_1434, cbModelParam._m0[30u].z, fma(_1433, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1432)) - _1401;
        float _1445 = fma(_1434, cbModelParam._m0[31u].z, fma(_1433, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1432)) - _1405;
        float _1446 = fma(_1434, cbModelParam._m0[32u].z, fma(_1433, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1432)) - _1409;
        float _1450 = inversesqrt(dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446)));
        float _1463 = ((_1450 * _1444) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1401 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1464 = ((_1450 * _1445) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1405 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1465 = ((_1450 * _1446) / cbModelParam._m0[35u].z) + ((((((_1409 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        float _1500 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1467.x + (-0.5));
        float _1502 = _1500 * (_1467.y + (-0.5));
        float _1503 = _1500 * (_1467.z + (-0.5));
        float _1510 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1474.x + (-0.5));
        float _1512 = _1510 * (_1474.y + (-0.5));
        float _1513 = _1510 * (_1474.z + (-0.5));
        float _1520 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1481.x + (-0.5));
        float _1522 = _1520 * (_1481.y + (-0.5));
        float _1523 = _1520 * (_1481.z + (-0.5));
        float _1530 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1488.x + (-0.5));
        float _1532 = _1530 * (_1488.y + (-0.5));
        float _1533 = _1530 * (_1488.z + (-0.5));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = _1501 * 0.5;
        float _1538 = _1511 * 0.5;
        float _1539 = _1521 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_799, _800, _801), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4388 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1564 + 1.0))) + _1569) * _1534;
        float _1579 = _1502 * 0.5;
        float _1580 = _1512 * 0.5;
        float _1581 = _1522 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_799, _800, _801), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4421 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1606 + 1.0))) + _1611) * _1535;
        float _1621 = _1503 * 0.5;
        float _1622 = _1513 * 0.5;
        float _1623 = _1523 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_799, _800, _801), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4454 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1648 + 1.0))) + _1653) * _1536;
        _1670 = _1503;
        _1671 = _1502;
        _1672 = _1501;
        _1673 = _1513;
        _1674 = _1512;
        _1675 = _1511;
        _1676 = _1523;
        _1677 = _1522;
        _1678 = _1521;
        _1679 = _1536;
        _1680 = _1535;
        _1681 = _1534;
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
    }
    else
    {
        _1670 = _1360;
        _1671 = _1360;
        _1672 = _1360;
        _1673 = _1360;
        _1674 = _1360;
        _1675 = _1360;
        _1676 = _1360;
        _1677 = _1360;
        _1678 = _1360;
        _1679 = _1360;
        _1680 = _1360;
        _1681 = _1360;
        _1682 = 0.0;
        _1683 = 0.0;
        _1684 = 0.0;
    }
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1372)) + _1372;
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1373)) + _1373;
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1374)) + _1374;
    float _1717 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1695, cbSceneParam._m0[89u].y, _1694 * cbSceneParam._m0[89u].x));
    float _1720 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1695, cbSceneParam._m0[90u].y, _1694 * cbSceneParam._m0[90u].x));
    float _1723 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1695, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1694));
    float _1738 = _969 * 0.5;
    float _1739 = _970 * 0.5;
    float _1740 = _971 * 0.5;
    float _1741 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1744 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1747 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1781;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1754 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1359, _1363, _1366, _1369));
        float _1758 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1361, _1364, _1367, _1370));
        float _1762 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1362, _1365, _1368, _1371));
        float _1769 = dot(vec4(cbModelParam._m0[39u]), vec4(_1738, _1739, _1740, 1.0));
        _1781 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1781 = 1.0;
    }
    float _1792;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1783 = dot(vec4(cbModelParam._m0[40u]), vec4(_1738, _1739, _1740, 1.0));
        _1792 = dot(vec3(isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1783) ? 0.0 : (isnan(0.0) ? _1783 : max(0.0, _1783))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1792 = 1.0;
    }
    float _1796 = (_1792 * cbModelParam._m0[1u].x) + (_1781 * (1.0 - cbModelParam._m0[1u].x));
    float _1806 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _802);
    float _1807 = isnan(_1806) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1806 : min(cbModelParam._m0[25u].z, _1806));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1855 = fma(_1030, cbModelParam._m0[13u].z, fma(_1026, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1022)) + cbModelParam._m0[13u].w;
        float _1859 = fma(_1030, cbModelParam._m0[14u].z, fma(_1026, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1022)) + cbModelParam._m0[14u].w;
        float _1863 = fma(_1030, cbModelParam._m0[15u].z, fma(_1026, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1022)) + cbModelParam._m0[15u].w;
        float _1866 = fma(_971, cbModelParam._m0[13u].z, fma(_970, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _969));
        float _1869 = fma(_971, cbModelParam._m0[14u].z, fma(_970, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _969));
        float _1872 = fma(_971, cbModelParam._m0[15u].z, fma(_970, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _969));
        float _1900;
        if (_1866 > 0.0)
        {
            _1900 = abs((1.0 - _1855) / _1866);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1855 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1900 = frontier_phi_17_15_ladder;
        }
        float _2070;
        if (_1869 > 0.0)
        {
            _2070 = abs((1.0 - _1859) / _1869);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1859 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2070 = frontier_phi_26_22_ladder;
        }
        float _2365;
        if (_1872 > 0.0)
        {
            _2365 = abs((1.0 - _1863) / _1872);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1863 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2365 = frontier_phi_38_33_ladder;
        }
        float _2367 = isnan(_2070) ? _1900 : (isnan(_1900) ? _2070 : min(_1900, _2070));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1866) + _1855;
        float _2373 = (_2368 * _1869) + _1859;
        float _2374 = (_2368 * _1872) + _1863;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2377 = (-1.0) - _2375;
        float _2379 = _2375 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2374 > _2379) || ((_2374 < _2377) || ((_2373 > _2379) || ((_2373 < _2377) || ((_2372 < _2377) || (_2372 > _2379))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2519 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2374, cbModelParam._m0[9u].z, fma(_2373, cbModelParam._m0[9u].y, _2372 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2374, cbModelParam._m0[10u].z, fma(_2373, cbModelParam._m0[10u].y, _2372 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2374, cbModelParam._m0[11u].z, fma(_2373, cbModelParam._m0[11u].y, _2372 * cbModelParam._m0[11u].x))), _1807);
            frontier_phi_16_38_ladder = _2519.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2519.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2519.x * cbModelParam._m0[1u].y;
        }
        _1888 = frontier_phi_16_38_ladder_2;
        _1890 = frontier_phi_16_38_ladder_1;
        _1892 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1876 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_969, _970, _971), _1807);
        _1888 = _1876.x * cbModelParam._m0[1u].y;
        _1890 = _1876.y * cbModelParam._m0[1u].y;
        _1892 = _1876.z * cbModelParam._m0[1u].y;
    }
    float _1896 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _802);
    float _1897 = isnan(_1896) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1896 : min(cbModelParam._m0[25u].w, _1896));
    float _1987;
    float _1989;
    float _1991;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1951 = fma(_1030, cbModelParam._m0[21u].z, fma(_1026, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1022)) + cbModelParam._m0[21u].w;
        float _1955 = fma(_1030, cbModelParam._m0[22u].z, fma(_1026, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1022)) + cbModelParam._m0[22u].w;
        float _1959 = fma(_1030, cbModelParam._m0[23u].z, fma(_1026, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1022)) + cbModelParam._m0[23u].w;
        float _1962 = fma(_971, cbModelParam._m0[21u].z, fma(_970, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _969));
        float _1965 = fma(_971, cbModelParam._m0[22u].z, fma(_970, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _969));
        float _1968 = fma(_971, cbModelParam._m0[23u].z, fma(_970, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _969));
        float _2075;
        if (_1962 > 0.0)
        {
            _2075 = abs((1.0 - _1951) / _1962);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1951 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2075 = frontier_phi_28_24_ladder;
        }
        float _2392;
        if (_1965 > 0.0)
        {
            _2392 = abs((1.0 - _1955) / _1965);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1955 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2392 = frontier_phi_40_35_ladder;
        }
        float _2719;
        if (_1968 > 0.0)
        {
            _2719 = abs((1.0 - _1959) / _1968);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1959 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2719 = frontier_phi_50_47_ladder;
        }
        float _2721 = isnan(_2392) ? _2075 : (isnan(_2075) ? _2392 : min(_2075, _2392));
        float _2722 = isnan(_2719) ? _2721 : (isnan(_2721) ? _2719 : min(_2721, _2719));
        float _2726 = (_2722 * _1962) + _1951;
        float _2727 = (_2722 * _1965) + _1955;
        float _2728 = (_2722 * _1968) + _1959;
        float _2729 = _2722 * 9.9999997473787516355514526367188e-05;
        float _2730 = (-1.0) - _2729;
        float _2732 = _2729 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2728 > _2732) || ((_2728 < _2730) || ((_2727 > _2732) || ((_2727 < _2730) || ((_2726 < _2730) || (_2726 > _2732))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2846 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2728, cbModelParam._m0[17u].z, fma(_2727, cbModelParam._m0[17u].y, _2726 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2728, cbModelParam._m0[18u].z, fma(_2727, cbModelParam._m0[18u].y, _2726 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2728, cbModelParam._m0[19u].z, fma(_2727, cbModelParam._m0[19u].y, _2726 * cbModelParam._m0[19u].x))), _1897);
            frontier_phi_25_50_ladder = _2846.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2846.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2846.x * cbModelParam._m0[1u].z;
        }
        _1987 = frontier_phi_25_50_ladder_2;
        _1989 = frontier_phi_25_50_ladder_1;
        _1991 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1971 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_969, _970, _971), _1897);
        _1987 = _1971.x * cbModelParam._m0[1u].z;
        _1989 = _1971.y * cbModelParam._m0[1u].z;
        _1991 = _1971.z * cbModelParam._m0[1u].z;
    }
    float _2003 = ((((1.0 - _990) * ((_977 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_990 * _977)) * _961;
    float _2004 = _2003 * ((cbModelParam._m0[1u].w * (_1987 - _1888)) + _1888);
    float _2005 = _2003 * ((cbModelParam._m0[1u].w * (_1989 - _1890)) + _1890);
    float _2006 = _2003 * ((cbModelParam._m0[1u].w * (_1991 - _1892)) + _1892);
    float _2009 = fma(_2006, cbSceneParam._m0[89u].z, fma(_2005, cbSceneParam._m0[89u].y, _2004 * cbSceneParam._m0[89u].x));
    float _2012 = fma(_2006, cbSceneParam._m0[90u].z, fma(_2005, cbSceneParam._m0[90u].y, _2004 * cbSceneParam._m0[90u].x));
    float _2015 = fma(_2006, cbSceneParam._m0[91u].z, fma(_2005, cbSceneParam._m0[91u].y, _2004 * cbSceneParam._m0[91u].x));
    float _2049 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2053 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2057 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2061 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2062 = _2049 / _2061;
    float _2063 = _2053 / _2061;
    float _2064 = _2057 / _2061;
    float _2211;
    float _2212;
    float _2213;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2091 = ((uint(_2064 > cbSceneParam._m0[59u].y) + uint(_2064 > cbSceneParam._m0[59u].x)) + uint(_2064 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2092 = _2091 + 43u;
        uint _2100 = _2091 + 44u;
        uint _2108 = _2091 + 45u;
        uint _2116 = _2091 + 46u;
        float _2127 = fma(_2061, cbSceneParam._m0[_2092].w, fma(_2057, cbSceneParam._m0[_2092].z, fma(_2053, cbSceneParam._m0[_2092].y, _2049 * cbSceneParam._m0[_2092].x)));
        float _2131 = fma(_2061, cbSceneParam._m0[_2100].w, fma(_2057, cbSceneParam._m0[_2100].z, fma(_2053, cbSceneParam._m0[_2100].y, _2049 * cbSceneParam._m0[_2100].x)));
        float _2139 = fma(_2061, cbSceneParam._m0[_2116].w, fma(_2057, cbSceneParam._m0[_2116].z, fma(_2053, cbSceneParam._m0[_2116].y, _2049 * cbSceneParam._m0[_2116].x)));
        float _2144 = cbSceneParam._m0[33u].z * _2139;
        float _2146 = cbSceneParam._m0[33u].w * _2139;
        float _2149 = fma(_2061, cbSceneParam._m0[_2108].w, fma(_2057, cbSceneParam._m0[_2108].z, fma(_2053, cbSceneParam._m0[_2108].y, _2049 * cbSceneParam._m0[_2108].x))) / _2139;
        float _2197 = (cbSceneParam._m0[33u].x - sqrt(((_2063 * _2063) + (_2062 * _2062)) + (_2064 * _2064))) * cbSceneParam._m0[33u].y;
        float _4580 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2204 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2144 + _2127) / _2139, (_2146 + _2131) / _2139), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 + _2127) / _2139, (_2131 - _2144) / _2139), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2127 - _2144) / _2139, (_2131 - _2146) / _2139), _2149), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2127 - _2146) / _2139, (_2144 + _2131) / _2139), _2149), 0.0)).x), vec4(0.25)));
        _2211 = 1.0 - (_2204 * cbSceneParam._m0[34u].x);
        _2212 = 1.0 - (_2204 * cbSceneParam._m0[34u].y);
        _2213 = 1.0 - (_2204 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2211 = 1.0;
        _2212 = 1.0;
        _2213 = 1.0;
    }
    float _2277;
    float _2279;
    float _2281;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2265 = fma(_2061, cbSceneParam._m0[63u].w, fma(_2057, cbSceneParam._m0[63u].z, fma(_2053, cbSceneParam._m0[63u].y, _2049 * cbSceneParam._m0[63u].x)));
        float _2266 = fma(_2061, cbSceneParam._m0[60u].w, fma(_2057, cbSceneParam._m0[60u].z, fma(_2053, cbSceneParam._m0[60u].y, _2049 * cbSceneParam._m0[60u].x))) / _2265;
        float _2267 = fma(_2061, cbSceneParam._m0[61u].w, fma(_2057, cbSceneParam._m0[61u].z, fma(_2053, cbSceneParam._m0[61u].y, _2049 * cbSceneParam._m0[61u].x))) / _2265;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2266 >= cbSceneParam._m0[64u].x) && (_2267 >= cbSceneParam._m0[64u].y)) && (_2266 <= cbSceneParam._m0[64u].z)) && (_2267 <= cbSceneParam._m0[64u].w))
        {
            float _2405 = fma(_2061, cbSceneParam._m0[62u].w, fma(_2057, cbSceneParam._m0[62u].z, fma(_2053, cbSceneParam._m0[62u].y, _2049 * cbSceneParam._m0[62u].x))) / _2265;
            float _2409 = isnan(cbSceneParam._m0[41u].w) ? _2405 : (isnan(_2405) ? cbSceneParam._m0[41u].w : max(_2405, cbSceneParam._m0[41u].w));
            float _2452 = (cbSceneParam._m0[33u].x - sqrt(((_2063 * _2063) + (_2062 * _2062)) + (_2064 * _2064))) * cbSceneParam._m0[33u].y;
            float _4596 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
            float _2459 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2266, cbSceneParam._m0[33u].w + _2267), _2409), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2266, _2267 - cbSceneParam._m0[33u].z), _2409), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2266 - cbSceneParam._m0[33u].z, _2267 - cbSceneParam._m0[33u].w), _2409), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2266 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2267), _2409), 0.0)).x), vec4(0.25)));
            float _2463 = 1.0 - (_2459 * cbSceneParam._m0[34u].x);
            float _2464 = 1.0 - (_2459 * cbSceneParam._m0[34u].y);
            float _2465 = 1.0 - (_2459 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2465) ? _2213 : (isnan(_2213) ? _2465 : min(_2213, _2465));
            frontier_phi_37_36_ladder_1 = isnan(_2464) ? _2212 : (isnan(_2212) ? _2464 : min(_2212, _2464));
            frontier_phi_37_36_ladder_2 = isnan(_2463) ? _2211 : (isnan(_2211) ? _2463 : min(_2211, _2463));
        }
        else
        {
            frontier_phi_37_36_ladder = _2213;
            frontier_phi_37_36_ladder_1 = _2212;
            frontier_phi_37_36_ladder_2 = _2211;
        }
        _2277 = frontier_phi_37_36_ladder_2;
        _2279 = frontier_phi_37_36_ladder_1;
        _2281 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2277 = _2211;
        _2279 = _2212;
        _2281 = _2213;
    }
    uvec4 _2286 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2288 = _2286.x * 14u;
    uint _2289 = _2288 + 13u;
    float _2296 = _961 + (-1.0);
    float _2301 = (cbLight._m0[_2289].x * _2296) + 1.0;
    float _2302 = (cbLight._m0[_2289].y * _2296) + 1.0;
    float _2303 = (cbLight._m0[_2289].z * _2296) + 1.0;
    float _2304 = (cbLight._m0[_2289].w * _2296) + 1.0;
    uint _2305 = _2288 + 5u;
    float _2311 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
    uint _2315 = _2288 + 4u;
    float _2324 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
    uint _2328 = _2288 | 1u;
    float _2339 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_799, _800, _801));
    float _2342 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_799, _800, _801));
    float _4632 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _4643 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2347 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * 0.3183098733425140380859375;
    float _2349 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * 0.3183098733425140380859375;
    float _2356 = ((cbLight._m0[_2305].x * _2311) * _2349) + (((cbLight._m0[_2315].x * _2277) * _2324) * _2347);
    float _2357 = ((_2311 * cbLight._m0[_2305].y) * _2349) + (((cbLight._m0[_2315].y * _2279) * _2324) * _2347);
    float _2358 = ((_2311 * cbLight._m0[_2305].z) * _2349) + (((cbLight._m0[_2315].z * _2281) * _2324) * _2347);
    uvec4 _2362 = floatBitsToUint(cbLight._m0[_2288 + 12u]);
    bool _2364 = _2362.x == 0u;
    float _2466;
    float _2468;
    float _2470;
    if (_2364)
    {
        _2466 = _2356;
        _2468 = _2357;
        _2470 = _2358;
    }
    else
    {
        uint _2474 = _2288 + 6u;
        float _2490 = (dot(vec3(cbLight._m0[_2288 + 2u].xyz), vec3(_799, _800, _801)) * 0.5) + 0.5;
        float _2491 = _2490 * _2490;
        float _4654 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2492 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2493 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2466 = (((cbLight._m0[_2474].x * 0.3183098733425140380859375) * _2492) * _2493) + _2356;
        _2468 = (((cbLight._m0[_2474].y * 0.3183098733425140380859375) * _2492) * _2493) + _2357;
        _2470 = (((cbLight._m0[_2474].z * 0.3183098733425140380859375) * _2492) * _2493) + _2358;
    }
    bool _2473 = _2362.y == 0u;
    float _2528;
    float _2530;
    float _2532;
    if (_2473)
    {
        _2528 = _2466;
        _2530 = _2468;
        _2532 = _2470;
    }
    else
    {
        uint _2690 = _2288 + 7u;
        float _2706 = (dot(vec3(cbLight._m0[_2288 + 3u].xyz), vec3(_799, _800, _801)) * 0.5) + 0.5;
        float _2707 = _2706 * _2706;
        float _4670 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2708 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2709 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2528 = (((cbLight._m0[_2690].x * 0.3183098733425140380859375) * _2708) * _2709) + _2466;
        _2530 = (((cbLight._m0[_2690].y * 0.3183098733425140380859375) * _2708) * _2709) + _2468;
        _2532 = (((cbLight._m0[_2690].z * 0.3183098733425140380859375) * _2708) * _2709) + _2470;
    }
    uint _2535 = _2288 + 8u;
    float _2548 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2288].w)) * _802) * 0.949999988079071044921875);
    float _2549 = _2548 * _2548;
    float _2550 = cbLight._m0[_2288].x + _878;
    float _2551 = cbLight._m0[_2288].y + _879;
    float _2552 = cbLight._m0[_2288].z + _880;
    float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
    float _2557 = _2556 * _2550;
    float _2558 = _2556 * _2551;
    float _2559 = _2556 * _2552;
    float _2560 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_2288].xyz));
    float _4686 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2563 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
    float _4697 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _2564 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
    float _2565 = dot(vec3(_799, _800, _801), vec3(_2557, _2558, _2559));
    float _4708 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
    float _2569 = dot(vec3(cbLight._m0[_2288].xyz), vec3(_2557, _2558, _2559));
    float _4719 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2573 = _2549 * _2549;
    float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
    float _2588 = (exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2589 = 1.0 - _2549;
    float _2600 = (0.5 / (((_2564 * ((_2563 * _2589) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2564 * _2589) + _2549) * _2563))) * _2563;
    float _4730 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2602 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
    uint _2616 = _2288 + 9u;
    float _2627 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2328].w)) * _802) * 0.949999988079071044921875);
    float _2628 = _2627 * _2627;
    float _2629 = cbLight._m0[_2328].x + _878;
    float _2630 = cbLight._m0[_2328].y + _879;
    float _2631 = cbLight._m0[_2328].z + _880;
    float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
    float _2636 = _2635 * _2629;
    float _2637 = _2635 * _2630;
    float _2638 = _2635 * _2631;
    float _2639 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_2328].xyz));
    float _4741 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2642 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
    float _2643 = dot(vec3(_799, _800, _801), vec3(_2636, _2637, _2638));
    float _4752 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2646 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
    float _2647 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_2636, _2637, _2638));
    float _4763 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2651 = _2628 * _2628;
    float _2655 = ((_2646 * _2646) * (_2651 + (-1.0))) + 1.0;
    float _2664 = (exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2665 = 1.0 - _2628;
    float _2675 = (0.5 / (((_2564 * ((_2642 * _2665) + _2628)) + 9.9999999392252902907785028219223e-09) + (((_2564 * _2665) + _2628) * _2642))) * _2642;
    float _4774 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2677 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2651 / ((_2655 * _2655) * 3.141590118408203125));
    float _2687 = (((_2664 * cbLight._m0[_2616].x) * _2677) * _2311) + ((((cbLight._m0[_2535].x * _2277) * _2588) * _2602) * _2324);
    float _2688 = (((_2664 * cbLight._m0[_2616].y) * _2677) * _2311) + ((((cbLight._m0[_2535].y * _2279) * _2588) * _2602) * _2324);
    float _2689 = (((_2664 * cbLight._m0[_2616].z) * _2677) * _2311) + ((((cbLight._m0[_2535].z * _2281) * _2588) * _2602) * _2324);
    float _2745;
    float _2747;
    float _2749;
    if (_2364)
    {
        _2745 = _2687;
        _2747 = _2688;
        _2749 = _2689;
    }
    else
    {
        uint _2751 = _2288 + 2u;
        uint _2755 = _2288 + 10u;
        float _2769 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2751].w)) * _802) * 0.949999988079071044921875);
        float _2770 = _2769 * _2769;
        float _2771 = cbLight._m0[_2751].x + _878;
        float _2772 = cbLight._m0[_2751].y + _879;
        float _2773 = cbLight._m0[_2751].z + _880;
        float _2777 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
        float _2778 = _2777 * _2771;
        float _2779 = _2777 * _2772;
        float _2780 = _2777 * _2773;
        float _2781 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_2751].xyz));
        float _4785 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2784 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _2785 = dot(vec3(_799, _800, _801), vec3(_2778, _2779, _2780));
        float _4796 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2788 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
        float _2789 = dot(vec3(cbLight._m0[_2751].xyz), vec3(_2778, _2779, _2780));
        float _4807 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2793 = _2770 * _2770;
        float _2797 = ((_2788 * _2788) * (_2793 + (-1.0))) + 1.0;
        float _2806 = (exp2(log2(1.0 - (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2807 = 1.0 - _2770;
        float _2817 = (0.5 / (((_2564 * ((_2784 * _2807) + _2770)) + 9.9999999392252902907785028219223e-09) + (((_2564 * _2807) + _2770) * _2784))) * _2784;
        float _4818 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2819 = (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2793 / ((_2797 * _2797) * 3.141590118408203125));
        float _2820 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2745 = (((_2806 * cbLight._m0[_2755].x) * _2819) * _2820) + _2687;
        _2747 = (((_2806 * cbLight._m0[_2755].y) * _2819) * _2820) + _2688;
        _2749 = (((_2806 * cbLight._m0[_2755].z) * _2819) * _2820) + _2689;
    }
    float _2851;
    float _2853;
    float _2855;
    if (_2473)
    {
        _2851 = _2745;
        _2853 = _2747;
        _2855 = _2749;
    }
    else
    {
        uint _2862 = _2288 + 3u;
        uint _2866 = _2288 + 11u;
        float _2880 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2862].w)) * _802) * 0.949999988079071044921875);
        float _2881 = _2880 * _2880;
        float _2882 = cbLight._m0[_2862].x + _878;
        float _2883 = cbLight._m0[_2862].y + _879;
        float _2884 = cbLight._m0[_2862].z + _880;
        float _2888 = inversesqrt(dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884)));
        float _2889 = _2888 * _2882;
        float _2890 = _2888 * _2883;
        float _2891 = _2888 * _2884;
        float _2892 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_2862].xyz));
        float _4834 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2895 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2896 = dot(vec3(_799, _800, _801), vec3(_2889, _2890, _2891));
        float _4845 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2899 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
        float _2900 = dot(vec3(cbLight._m0[_2862].xyz), vec3(_2889, _2890, _2891));
        float _4856 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        float _2904 = _2881 * _2881;
        float _2908 = ((_2899 * _2899) * (_2904 + (-1.0))) + 1.0;
        float _2917 = (exp2(log2(1.0 - (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2918 = 1.0 - _2881;
        float _2928 = (0.5 / (((_2564 * ((_2895 * _2918) + _2881)) + 9.9999999392252902907785028219223e-09) + (((_2564 * _2918) + _2881) * _2895))) * _2895;
        float _4867 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2930 = (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2904 / ((_2908 * _2908) * 3.141590118408203125));
        float _2931 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2851 = (((_2917 * cbLight._m0[_2866].x) * _2930) * _2931) + _2745;
        _2853 = (((_2917 * cbLight._m0[_2866].y) * _2930) * _2931) + _2747;
        _2855 = (((_2917 * cbLight._m0[_2866].z) * _2930) * _2931) + _2749;
    }
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    float _3007;
    if (_2286.y == 0u)
    {
        uvec4 _2952 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2953 = _2952.x;
        uint _2964 = uint((float(_2952.y) * floor(float(uint(cbSceneParam._m0[85u].y * _899) / _2953))) + floor(float(uint(cbSceneParam._m0[85u].x * _898) / _2953)));
        float _2974 = (log2(_2064 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2975 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        uint _2978 = uint(isnan(14.0) ? _2975 : (isnan(_2975) ? 14.0 : min(_2975, 14.0)));
        uvec4 _2983 = texelFetch(g_lightClusterGridBuffer, int(((_2978 << 2u) + (_2964 << 6u)) >> 2u));
        uint _2984 = _2983.x;
        uint _2985 = _2952.z;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        if (((((1u << ((_2985 >> 4u) & 15u)) + 4294967295u) & _2984) == 0u) || ((_2985 & 240u) == 0u))
        {
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
            _3070 = 0.0;
            _3072 = 0.0;
            _3074 = 0.0;
        }
        else
        {
            float _3065;
            float _3067;
            float _3069;
            float _3071;
            float _3073;
            float _3075;
            float _3217 = 0.0;
            float _3218 = 0.0;
            float _3219 = 0.0;
            float _3220 = 0.0;
            float _3221 = 0.0;
            float _3222 = 0.0;
            uint _3223 = 0u;
            uint _3232;
            bool _3233;
            for (;;)
            {
                _3232 = texelFetch(g_lightClassification, int((((_2978 << 5u) + (_2964 << 9u)) + (_3223 << 2u)) >> 2u)).x;
                _3233 = _3232 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3233)
                {
                    frontier_phi_71_pred = _3222;
                    frontier_phi_71_pred_1 = _3221;
                    frontier_phi_71_pred_2 = _3220;
                    frontier_phi_71_pred_3 = _3219;
                    frontier_phi_71_pred_4 = _3218;
                    frontier_phi_71_pred_5 = _3217;
                }
                else
                {
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    uint _3368;
                    _3362 = _3217;
                    _3363 = _3218;
                    _3364 = _3219;
                    _3365 = _3220;
                    _3366 = _3221;
                    _3367 = _3222;
                    _3368 = _3232;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    for (;;)
                    {
                        uint _3372 = uint(findLSB(_3368)) + (_3223 << 5u);
                        uint _3369 = (_3368 + 4294967295u) & _3368;
                        uint _3374 = _3372 * 48u;
                        vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3374)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 3u)).x));
                        uint _3394 = (_3372 * 48u) + 4u;
                        vec4 _3407 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 3u)).x));
                        uint _3413 = (_3372 * 48u) + 8u;
                        vec3 _3424 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3413)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 2u)).x));
                        float _3428 = _3388.x - _2062;
                        float _3429 = _3388.y - _2063;
                        float _3430 = _3388.z - _2064;
                        float _3431 = dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430));
                        float _3434 = inversesqrt(_3431);
                        float _3435 = _3434 * _3428;
                        float _3436 = _3434 * _3429;
                        float _3437 = _3434 * _3430;
                        float _3438 = dot(vec3(_917, _920, _923), vec3(_3435, _3436, _3437));
                        float _3443 = 1.0 - (_3431 * _3388.w);
                        float _4893 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3444 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                        float _3445 = sqrt(_3431) * _3407.w;
                        float _3448 = 1.39999997615814208984375 / (_3445 + 1.39999997615814208984375);
                        float _3449 = _3448 * _3448;
                        float _3452 = ((1.0 - _3449) * _3438) + _3449;
                        float _3455 = _3445 * _3445;
                        float _3459 = ((isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0))) * _3444) / ((_3455 * 0.699999988079071044921875) + 1.0);
                        float _3463 = (-0.0) - _2062;
                        float _3464 = (-0.0) - _2063;
                        float _3465 = (-0.0) - _2064;
                        float _3469 = inversesqrt(dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465)));
                        float _3470 = _3469 * _3463;
                        float _3471 = _3469 * _3464;
                        float _3472 = _3469 * _3465;
                        float _3479 = exp2(log2(1.0 / ((_3455 * 3.5) + 5.0)) * 0.25);
                        float _3480 = 1.0 - _977;
                        float _3487 = sqrt(1.0 - ((1.0 - (_3480 * _3480)) * (1.0 - (_3479 * _3479))));
                        float _3488 = _3487 * _3487;
                        float _3489 = _3488 * _3488;
                        float _3490 = _3470 + _3435;
                        float _3491 = _3471 + _3436;
                        float _3492 = _3472 + _3437;
                        float _3496 = inversesqrt(dot(vec3(_3490, _3491, _3492), vec3(_3490, _3491, _3492)));
                        float _3500 = dot(vec3(_917, _920, _923), vec3(_3470, _3471, _3472));
                        float _4909 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                        float _3503 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                        float _3504 = dot(vec3(_917, _920, _923), vec3(_3496 * _3490, _3496 * _3491, _3496 * _3492));
                        float _4920 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3507 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                        float _3511 = ((_3507 * _3507) * (_3489 + (-1.0))) + 1.0;
                        float _3512 = _3448 * _3488;
                        float _3513 = _3512 * _3512;
                        float _3516 = ((1.0 - _3513) * _3438) + _3513;
                        float _4931 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                        float _3517 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                        float _3518 = 1.0 - _3488;
                        float _3528 = (0.5 / (((_3517 * ((_3503 * _3518) + _3488)) + 9.9999999392252902907785028219223e-09) + (((_3517 * _3518) + _3488) * _3503))) * _3517;
                        float _4942 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                        float _3539 = (((_3489 * 3.1415927410125732421875) * (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0)))) / ((_3511 * _3511) * ((_3455 * 2.1991131305694580078125) + 3.141590118408203125))) * _3444;
                        _3292 = (_3459 * _3407.x) + _3365;
                        _3293 = (_3459 * _3407.y) + _3366;
                        _3294 = (_3459 * _3407.z) + _3367;
                        _3289 = (_3539 * _3424.x) + _3362;
                        _3290 = (_3539 * _3424.y) + _3363;
                        _3291 = (_3539 * _3424.z) + _3364;
                        if (_3369 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3362 = _3289;
                            _3363 = _3290;
                            _3364 = _3291;
                            _3365 = _3292;
                            _3366 = _3293;
                            _3367 = _3294;
                            _3368 = _3369;
                        }
                    }
                    frontier_phi_71_pred = _3294;
                    frontier_phi_71_pred_1 = _3293;
                    frontier_phi_71_pred_2 = _3292;
                    frontier_phi_71_pred_3 = _3291;
                    frontier_phi_71_pred_4 = _3290;
                    frontier_phi_71_pred_5 = _3289;
                }
                _3075 = frontier_phi_71_pred;
                _3073 = frontier_phi_71_pred_1;
                _3071 = frontier_phi_71_pred_2;
                _3069 = frontier_phi_71_pred_3;
                _3067 = frontier_phi_71_pred_4;
                _3065 = frontier_phi_71_pred_5;
                uint _3224 = _3223 + 1u;
                if (_3224 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3217 = _3065;
                    _3218 = _3067;
                    _3219 = _3069;
                    _3220 = _3071;
                    _3221 = _3073;
                    _3222 = _3075;
                    _3223 = _3224;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
            _3070 = _3071;
            _3072 = _3073;
            _3074 = _3075;
        }
        uvec4 _3078 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3079 = _3078.z;
        uint _3081 = (_3079 >> 8u) & 15u;
        float _3185;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        if (((4294967295u << _3081) & _2984) == 0u)
        {
            _3185 = _3064;
            _3187 = _3066;
            _3189 = _3068;
            _3191 = _3070;
            _3193 = _3072;
            _3195 = _3074;
        }
        else
        {
            float _3210 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
            float _3211 = _3210 * _2062;
            float _3212 = _3210 * _2063;
            float _3213 = _3210 * _2064;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3081 < ((_3079 >> 12u) & 15u))
            {
                float _3186;
                float _3188;
                float _3190;
                float _3192;
                float _3194;
                float _3196;
                float _3345 = _3064;
                float _3346 = _3066;
                float _3347 = _3068;
                float _3348 = _3070;
                float _3349 = _3072;
                float _3350 = _3074;
                uint _3351 = _3081;
                uint _3360;
                bool _3361;
                for (;;)
                {
                    _3360 = texelFetch(g_lightClassification, int((((_2978 << 5u) + (_2964 << 9u)) + (_3351 << 2u)) >> 2u)).x;
                    _3361 = _3360 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3361)
                    {
                        frontier_phi_82_pred = _3350;
                        frontier_phi_82_pred_1 = _3349;
                        frontier_phi_82_pred_2 = _3348;
                        frontier_phi_82_pred_3 = _3347;
                        frontier_phi_82_pred_4 = _3346;
                        frontier_phi_82_pred_5 = _3345;
                    }
                    else
                    {
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3846;
                        float _3847;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _3851;
                        float _3566 = _3345;
                        float _3567 = _3346;
                        float _3568 = _3347;
                        float _3569 = _3348;
                        float _3570 = _3349;
                        float _3571 = _3350;
                        uint _3572 = _3360;
                        uint _3573;
                        vec4 _3598;
                        float _3599;
                        vec4 _3614;
                        vec3 _3626;
                        vec4 _3641;
                        vec4 _3656;
                        float _3702;
                        bool _3703;
                        for (;;)
                        {
                            uint _3583 = ((_3351 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3572));
                            _3573 = (_3572 + 4294967295u) & _3572;
                            uint _3585 = _3583 * 40u;
                            _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            _3599 = _3598.w;
                            uint _3601 = (_3583 * 40u) + 4u;
                            _3614 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 3u)).x));
                            uint _3616 = (_3583 * 40u) + 8u;
                            _3626 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x));
                            uint _3628 = (_3583 * 40u) + 16u;
                            _3641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 3u)).x));
                            uint _3643 = (_3583 * 40u) + 20u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3658 = (_3583 * 40u) + 24u;
                            vec4 _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            uint _3677 = (_3583 * 40u) + 28u;
                            vec4 _3690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 3u)).x));
                            _3702 = fma(_2064, _3690.z, fma(_2063, _3690.y, _3690.x * _2062)) + _3690.w;
                            _3703 = !((fma(_2064, _3671.z, fma(_2063, _3671.y, _3671.x * _2062)) + _3671.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3703)
                            {
                                float _3730 = _3598.x - _2062;
                                float _3731 = _3598.y - _2063;
                                float _3732 = _3598.z - _2064;
                                float _3733 = dot(vec3(_3730, _3731, _3732), vec3(_3730, _3731, _3732));
                                float _3736 = inversesqrt(_3733);
                                float _3737 = _3736 * _3730;
                                float _3738 = _3736 * _3731;
                                float _3739 = _3736 * _3732;
                                float _3743 = 1.0 - (_3733 / (_3599 * _3599));
                                float _4953 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3744 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                                float _3748 = sqrt(_3733) * _3614.w;
                                float _3750 = 1.39999997615814208984375 / (_3748 + 1.39999997615814208984375);
                                float _3751 = _3750 * _3750;
                                float _3754 = ((1.0 - _3751) * dot(vec3(_3737, _3738, _3739), vec3(_917, _920, _923))) + _3751;
                                float _3757 = _3748 * _3748;
                                float _3761 = (fma(_2064, _3641.z, fma(_2063, _3641.y, _3641.x * _2062)) + _3641.w) / _3702;
                                float _3762 = (fma(_2064, _3656.z, fma(_2063, _3656.y, _3656.x * _2062)) + _3656.w) / _3702;
                                float _3766 = 1.0 - dot(vec2(_3761, _3762), vec2(_3761, _3762));
                                float _4969 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3767 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3768 = _3767 * (((isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0))) * _3744) / ((_3757 * 0.699999988079071044921875) + 1.0));
                                float _3780 = exp2(log2(1.0 / ((_3757 * 3.5) + 5.0)) * 0.25);
                                float _3781 = 1.0 - _977;
                                float _3788 = sqrt(1.0 - ((1.0 - (_3781 * _3781)) * (1.0 - (_3780 * _3780))));
                                float _3789 = _3788 * _3788;
                                float _3790 = _3789 * _3789;
                                float _3791 = _3737 - _3211;
                                float _3792 = _3738 - _3212;
                                float _3793 = _3739 - _3213;
                                float _3797 = inversesqrt(dot(vec3(_3791, _3792, _3793), vec3(_3791, _3792, _3793)));
                                float _3801 = dot(vec3(_917, _920, _923), vec3((-0.0) - _3211, (-0.0) - _3212, (-0.0) - _3213));
                                float _4980 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                                float _3804 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                                float _3805 = dot(vec3(_917, _920, _923), vec3(_3797 * _3791, _3797 * _3792, _3797 * _3793));
                                float _4991 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3808 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                                float _3812 = ((_3808 * _3808) * (_3790 + (-1.0))) + 1.0;
                                float _3813 = _3750 * _3789;
                                float _3814 = _3813 * _3813;
                                float _3820 = ((1.0 - _3814) * dot(vec3(_917, _920, _923), vec3(_3737, _3738, _3739))) + _3814;
                                float _5002 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3821 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
                                float _3822 = 1.0 - _3789;
                                float _3832 = (0.5 / (((_3821 * ((_3804 * _3822) + _3789)) + 9.9999999392252902907785028219223e-09) + (((_3821 * _3822) + _3789) * _3804))) * _3821;
                                float _5013 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                                float _3842 = (_3767 * _3744) * (((_3790 * 3.1415927410125732421875) * (isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0)))) / ((_3812 * _3812) * ((_3757 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3768 * _3614.z;
                                frontier_phi_88_pred_1 = _3768 * _3614.y;
                                frontier_phi_88_pred_2 = _3768 * _3614.x;
                                frontier_phi_88_pred_3 = _3842 * _3626.z;
                                frontier_phi_88_pred_4 = _3842 * _3626.y;
                                frontier_phi_88_pred_5 = _3842 * _3626.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3851 = frontier_phi_88_pred;
                            _3850 = frontier_phi_88_pred_1;
                            _3849 = frontier_phi_88_pred_2;
                            _3848 = frontier_phi_88_pred_3;
                            _3847 = frontier_phi_88_pred_4;
                            _3846 = frontier_phi_88_pred_5;
                            _3556 = _3849 + _3569;
                            _3557 = _3850 + _3570;
                            _3558 = _3851 + _3571;
                            _3553 = _3846 + _3566;
                            _3554 = _3847 + _3567;
                            _3555 = _3848 + _3568;
                            if (_3573 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3566 = _3553;
                                _3567 = _3554;
                                _3568 = _3555;
                                _3569 = _3556;
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3573;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3558;
                        frontier_phi_82_pred_1 = _3557;
                        frontier_phi_82_pred_2 = _3556;
                        frontier_phi_82_pred_3 = _3555;
                        frontier_phi_82_pred_4 = _3554;
                        frontier_phi_82_pred_5 = _3553;
                    }
                    _3196 = frontier_phi_82_pred;
                    _3194 = frontier_phi_82_pred_1;
                    _3192 = frontier_phi_82_pred_2;
                    _3190 = frontier_phi_82_pred_3;
                    _3188 = frontier_phi_82_pred_4;
                    _3186 = frontier_phi_82_pred_5;
                    uint _3352 = _3351 + 1u;
                    if (_3352 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3345 = _3186;
                        _3346 = _3188;
                        _3347 = _3190;
                        _3348 = _3192;
                        _3349 = _3194;
                        _3350 = _3196;
                        _3351 = _3352;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3192;
                frontier_phi_63_64_ladder_1 = _3196;
                frontier_phi_63_64_ladder_2 = _3194;
                frontier_phi_63_64_ladder_3 = _3190;
                frontier_phi_63_64_ladder_4 = _3188;
                frontier_phi_63_64_ladder_5 = _3186;
            }
            else
            {
                frontier_phi_63_64_ladder = _3070;
                frontier_phi_63_64_ladder_1 = _3074;
                frontier_phi_63_64_ladder_2 = _3072;
                frontier_phi_63_64_ladder_3 = _3068;
                frontier_phi_63_64_ladder_4 = _3066;
                frontier_phi_63_64_ladder_5 = _3064;
            }
            _3185 = frontier_phi_63_64_ladder_5;
            _3187 = frontier_phi_63_64_ladder_4;
            _3189 = frontier_phi_63_64_ladder_3;
            _3191 = frontier_phi_63_64_ladder;
            _3193 = frontier_phi_63_64_ladder_2;
            _3195 = frontier_phi_63_64_ladder_1;
        }
        float _3200 = isnan(1.0) ? _961 : (isnan(_961) ? 1.0 : min(_961, 1.0));
        _2997 = (_3200 * _3191) + _2528;
        _2999 = (_3200 * _3193) + _2530;
        _3001 = (_3200 * _3195) + _2532;
        _3003 = ((_3185 * 0.039999999105930328369140625) * _3200) + _2851;
        _3005 = ((_3187 * 0.039999999105930328369140625) * _3200) + _2853;
        _3007 = ((_3189 * 0.039999999105930328369140625) * _3200) + _2855;
    }
    else
    {
        _2997 = _2528;
        _2999 = _2530;
        _3001 = _2532;
        _3003 = _2851;
        _3005 = _2853;
        _3007 = _2855;
    }
    float _5029 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _5040 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _5051 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _3024 = ((isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_2997 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _961))) + ((_3003 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1796)) * cbPerFrame._m0[3u].x);
    float _3025 = ((isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0))) * (_2999 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _961))) + ((_3005 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1796)) * cbPerFrame._m0[3u].x);
    float _3026 = ((isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0))) * (_3001 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _961))) + ((_3007 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1796)) * cbPerFrame._m0[3u].x);
    uint _3027 = _257 + 6u;
    float _3035 = _898 / cbSceneParam._m0[86u].x;
    float _3036 = _899 / cbSceneParam._m0[86u].y;
    vec4 _3050 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3035, _3036, (log2((isnan(cbSceneParam._m0[77u].w) ? _820 : (isnan(_820) ? cbSceneParam._m0[77u].w : min(_820, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3052 = _3050.x;
    float _3053 = _3050.y;
    float _3054 = _3050.z;
    float _3055 = _3050.w;
    float _3127;
    float _3129;
    float _3131;
    float _3133;
    if (_820 > cbSceneParam._m0[78u].w)
    {
        float _3089 = isnan(_820) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _820 : min(cbSceneParam._m0[80u].w, _820));
        float _3090 = _3089 / _820;
        float _3101 = _3090 * _871;
        float _3102 = _872 * _3090;
        float _3103 = (-0.0) - _3102;
        float _3105 = _3090 * _873;
        float _3107 = (cbSceneParam._m0[77u].w * _3103) / _3089;
        float _3108 = _3107 + cbSceneParam._m0[79u].w;
        float _3109 = cbSceneParam._m0[79u].w - _3102;
        float _3115 = sqrt(((_3101 * _3101) + (_3102 * _3102)) + (_3105 * _3105));
        float _3118 = (1.0 - (cbSceneParam._m0[77u].w / _3089)) * _3115;
        float _3123 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3125 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3302;
        if (abs((_3103 - _3107) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3302 = ((((_3108 > 0.0) ? exp2(_3123 * _3108) : (2.0 - exp2(_3125 * _3108))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3118;
        }
        else
        {
            float _3246 = 1.0 / cbSceneParam._m0[80u].x;
            float _3247 = isnan(_3109) ? _3108 : (isnan(_3108) ? _3109 : max(_3108, _3109));
            float _3248 = isnan(_3109) ? _3108 : (isnan(_3108) ? _3109 : min(_3108, _3109));
            float _3257 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : min(_3247, 0.0));
            float _3258 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : min(_3248, 0.0));
            _3302 = ((abs(_3115 / _3103) * cbSceneParam._m0[80u].y) * ((((_3257 - _3258) * 2.0) - ((exp2(_3123 * (isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0)))) - exp2(_3123 * (isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0))))) * _3246)) - ((exp2(_3125 * _3257) - exp2(_3125 * _3258)) * _3246))) + (_3118 * cbSceneParam._m0[80u].z);
        }
        vec4 _3304 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3035, _3036, 1.0), 0.0);
        float _3313 = exp2((_3302 * (-1.44269502162933349609375)) * (1.0 - _3304.w));
        float _3314 = log2(_3313);
        float _3330 = log2(_3055);
        _3127 = (exp2(_3330 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].x)) * _3304.x) / cbSceneParam._m0[78u].x)) + _3052;
        _3129 = (exp2(_3330 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].y)) * _3304.y) / cbSceneParam._m0[78u].y)) + _3053;
        _3131 = (exp2(_3330 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].z)) * _3304.z) / cbSceneParam._m0[78u].z)) + _3054;
        _3133 = _3313 * _3055;
    }
    else
    {
        _3127 = _3052;
        _3129 = _3053;
        _3131 = _3054;
        _3133 = _3055;
    }
    bool _3340;
    vec4 _3143;
    vec4 _3165;
    float _3167;
    float _3171;
    float _3172;
    float _3173;
    float _3174;
    bool _3184;
    for (;;)
    {
        _3143 = cbMatDynParam._m0[0u];
        float _3145 = roundEven(_3143.y);
        bool _3146 = _3145 == 3.0;
        float _3147 = log2(_3133);
        float _3154 = exp2(_3147 * cbSceneParam._m0[78u].x) * _3024;
        float _3155 = exp2(_3147 * cbSceneParam._m0[78u].y) * _3025;
        float _3156 = exp2(_3147 * cbSceneParam._m0[78u].z) * _3026;
        float _3163 = _887 + (-0.5);
        _3165 = cbMtdParam._m0[1u];
        _3167 = _3165.y * _3163;
        float _3170 = (_3145 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3171 = _3170 * (_3146 ? _3154 : (_3154 + (cbSceneParam._m0[72u].w * _3127)));
        _3172 = _3170 * (_3146 ? _3155 : (_3155 + (cbSceneParam._m0[72u].w * _3129)));
        _3173 = _3170 * (_3146 ? _3156 : (_3156 + (cbSceneParam._m0[72u].w * _3131)));
        _3174 = _3163 * 0.999000012874603271484375;
        _3184 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3184)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _3174) < 0.5)
            {
                _3340 = true;
                break;
            }
        }
        uint _3281 = _936 + uint(_3143.w);
        if ((cbInstanceData._m0[_3281].w < 1.0) && ((cbInstanceData._m0[_3281].w + _3174) < 0.5))
        {
            _3340 = true;
            break;
        }
        if ((_3167 + 1.0) < _3165.x)
        {
            _3340 = true;
            break;
        }
        _3340 = false;
        break;
    }
    float _3544;
    if (_3340)
    {
        discard_state = true;
        _3544 = 0.0;
    }
    else
    {
        _3544 = cbInstanceData._m0[_3027].w;
    }
    SV_Target.x = _3171;
    SV_Target.y = _3172;
    SV_Target.z = _3173;
    SV_Target.w = _3544;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3027].w;
    discard_exit();
}


