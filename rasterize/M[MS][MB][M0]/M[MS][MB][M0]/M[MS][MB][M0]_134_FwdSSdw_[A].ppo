#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1356;
float _3738;
float _3739;
float _3740;
float _3741;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3750 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3761 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3772 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _412 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _412) * cbMtdParam._m0[24u].x) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3783 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _437 = (_430 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _438 = (_430 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _439 = (_430 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _443 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _437;
    float _446 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _438;
    float _449 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _439;
    float _456 = ((_437 - _443) * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) + _443;
    float _457 = ((_438 - _446) * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) + _446;
    float _458 = ((_439 - _449) * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) + _449;
    vec4 _477 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _300) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _301) + cbTextureTilingScale._m0[14u].w));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _522 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _539 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _541 = _539.x;
    float _542 = _539.y;
    float _543 = _539.z;
    float _552 = ((_522.z - _543) * _430) + _543;
    float _555 = ((((_522.x - _541) * _430) + _541) * 2.0) + (-1.0);
    float _556 = ((((_522.y - _542) * _430) + _542) * 2.0) + (-1.0);
    float _557 = dot(vec2(_555, _556), vec2(_555, _556));
    float _3794 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _562 = sqrt(1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))));
    vec4 _575 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _593 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _595 = _593.x;
    float _596 = 1.0 - _595;
    float _602 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _605 = ((isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : min(_602, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _614 = (_605 - ((((((_595 - _596) * cbMtdParam._m0[24u].z) + _596) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _605))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3815 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _622 = (_615 * ((_477.x * cbMtdParam._m0[18u].x) - _456)) + _456;
    float _623 = (_615 * ((_477.y * cbMtdParam._m0[18u].y) - _457)) + _457;
    float _624 = (_615 * ((_477.z * cbMtdParam._m0[18u].z) - _458)) + _458;
    vec4 _636 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _638 = _636.x;
    float _639 = 1.0 - _638;
    float _664 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_638 - _639) * cbMtdParam._m0[24u].w) + _639) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3826 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _665 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _673 = ((((cbMtdParam._m0[10u].x - _622) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _665) + _622;
    float _674 = ((((cbMtdParam._m0[10u].y - _623) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _665) + _623;
    float _675 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _624)) * _665) + _624;
    float _680 = (((_497.z - _552) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _552;
    vec4 _694 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _701 = (_694.x * 2.0) + (-1.0);
    float _702 = (_694.y * 2.0) + (-1.0);
    float _703 = dot(vec2(_701, _702), vec2(_701, _702));
    float _3837 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _711 = (_615 * (_694.z - _680)) + _680;
    float _714 = ((cbMtdParam._m0[23u].y - _711) * _665) + _711;
    vec4 _733 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _739 = (_733.x * 2.0) + (-1.0);
    float _740 = (_733.y * 2.0) + (-1.0);
    float _741 = dot(vec2(_739, _740), vec2(_739, _740));
    float _3848 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _751 = _555 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_497.x * 2.0) + (-1.0)));
    float _752 = _556 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_497.y * 2.0) + (-1.0)));
    float _764 = (((_701 - _751) + (cbMtdParam._m0[21u].x * _751)) * _615) + _751;
    float _765 = (((_702 - _752) + (cbMtdParam._m0[21u].x * _752)) * _615) + _752;
    float _766 = (_615 * (sqrt(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) - _562)) + _562;
    float _777 = (((_739 - _764) + (_764 * cbMtdParam._m0[22u].z)) * _665) + _764;
    float _778 = (((_740 - _765) + (_765 * cbMtdParam._m0[22u].z)) * _665) + _765;
    float _779 = ((sqrt(1.0 - (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) - _766) * _665) + _766;
    float _781 = cbMtdParam._m0[22u].x + _575.w;
    float _784 = fma(_779, _249 * NORMAL.x, fma(_778, _256 * TANGENT.x, (_242 * _234) * _777));
    float _787 = fma(_779, _249 * NORMAL.y, fma(_778, _256 * TANGENT.y, (_242 * _235) * _777));
    float _790 = fma(_779, _249 * NORMAL.z, fma(_778, _256 * TANGENT.z, (_242 * _236) * _777));
    float _794 = inversesqrt(dot(vec3(_784, _787, _790), vec3(_784, _787, _790)));
    float _795 = _794 * _784;
    float _796 = _794 * _787;
    float _797 = _794 * _790;
    float _3859 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _798 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _3881 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _3892 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3903 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _816 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _867 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _857);
    float _868 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _857);
    float _869 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _857);
    float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
    float _874 = _867 * _873;
    float _875 = _868 * _873;
    float _876 = _869 * _873;
    vec4 _881 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _883 = _881.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1037 = sqrt(((_867 * _867) + (_868 * _868)) + (_869 * _869));
        float _1043 = (cbMatDynParam._m0[5u].x * _1037) + cbMatDynParam._m0[5u].y;
        float _3914 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1048 = (cbMatDynParam._m0[5u].z * _1037) + cbMatDynParam._m0[5u].w;
        float _3925 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) - _1044)) + _1044) < ((_883 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _894 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _895 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _913 = fma(_797, cbSceneParam._m0[5u].z, fma(_796, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _795));
    float _916 = fma(_797, cbSceneParam._m0[6u].z, fma(_796, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _795));
    float _919 = fma(_797, cbSceneParam._m0[7u].z, fma(_796, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _795));
    uint _932 = _281 + 9u;
    uint _933 = _932 + uint(cbMatDynParam._m0[0u].w);
    float _939 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * cbInstanceData._m0[_933].x;
    float _940 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * cbInstanceData._m0[_933].y;
    float _941 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * cbInstanceData._m0[_933].z;
    float _3936 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _3947 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _3958 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    vec4 _953 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _894, cbSceneParam._m0[86u].y * _895));
    float _957 = ((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * TEXCOORD_5.w) * _953.x;
    float _958 = dot(vec3(_795, _796, _797), vec3(_874, _875, _876));
    float _961 = _958 * 2.0;
    float _965 = (_961 * _795) - _874;
    float _966 = (_961 * _796) - _875;
    float _967 = (_961 * _797) - _876;
    float _971 = abs(dot(vec3(_874, _875, _876), vec3(_795, _796, _797)));
    float _3969 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _973 = sqrt(_798);
    float _986 = exp2((_973 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_973 * 3.0));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1355;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1080 = fma(_1026, cbModelParam._m0[26u].z, fma(_1022, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1018));
        float _1084 = fma(_1026, cbModelParam._m0[27u].z, fma(_1022, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1018));
        float _1088 = fma(_1026, cbModelParam._m0[28u].z, fma(_1022, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1018));
        float _1113 = _1018 + _795;
        float _1114 = _1022 + _796;
        float _1115 = _1026 + _797;
        float _1125 = fma(_1115, cbModelParam._m0[26u].z, fma(_1114, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1113)) - _1080;
        float _1126 = fma(_1115, cbModelParam._m0[27u].z, fma(_1114, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1113)) - _1084;
        float _1127 = fma(_1115, cbModelParam._m0[28u].z, fma(_1114, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1113)) - _1088;
        float _1131 = inversesqrt(dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127)));
        float _1144 = ((_1131 * _1125) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1080 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1131 * _1126) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1084 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1131 * _1127) / cbModelParam._m0[34u].z) + ((((((_1088 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        float _1183 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1149.x + (-0.5));
        float _1185 = _1183 * (_1149.y + (-0.5));
        float _1186 = _1183 * (_1149.z + (-0.5));
        float _1193 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1156.x + (-0.5));
        float _1195 = _1193 * (_1156.y + (-0.5));
        float _1196 = _1193 * (_1156.z + (-0.5));
        float _1203 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1163.x + (-0.5));
        float _1205 = _1203 * (_1163.y + (-0.5));
        float _1206 = _1203 * (_1163.z + (-0.5));
        float _1213 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1170.x + (-0.5));
        float _1215 = _1213 * (_1170.y + (-0.5));
        float _1216 = _1213 * (_1170.z + (-0.5));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = _1184 * 0.5;
        float _1221 = _1194 * 0.5;
        float _1222 = _1204 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1237 = (dot(vec3(_795, _796, _797), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1247 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _4017 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1249 + 1.0))) + _1254) * _1217;
        float _1264 = _1185 * 0.5;
        float _1265 = _1195 * 0.5;
        float _1266 = _1205 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_795, _796, _797), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4050 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1291 + 1.0))) + _1296) * _1218;
        float _1306 = _1186 * 0.5;
        float _1307 = _1196 * 0.5;
        float _1308 = _1206 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_795, _796, _797), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4061 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4072 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4083 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1333 + 1.0))) + _1338) * _1219;
        _1355 = _1186;
        _1357 = _1185;
        _1358 = _1184;
        _1359 = _1196;
        _1360 = _1195;
        _1361 = _1194;
        _1362 = _1206;
        _1363 = _1205;
        _1364 = _1204;
        _1365 = _1219;
        _1366 = _1218;
        _1367 = _1217;
        _1368 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
    }
    else
    {
        _1355 = _1356;
        _1357 = _1356;
        _1358 = _1356;
        _1359 = _1356;
        _1360 = _1356;
        _1361 = _1356;
        _1362 = _1356;
        _1363 = _1356;
        _1364 = _1356;
        _1365 = _1356;
        _1366 = _1356;
        _1367 = _1356;
        _1368 = 0.0;
        _1369 = 0.0;
        _1370 = 0.0;
    }
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1398 = fma(_1026, cbModelParam._m0[30u].z, fma(_1022, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1018));
        float _1402 = fma(_1026, cbModelParam._m0[31u].z, fma(_1022, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1018));
        float _1406 = fma(_1026, cbModelParam._m0[32u].z, fma(_1022, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1018));
        float _1429 = _1018 + _795;
        float _1430 = _1022 + _796;
        float _1431 = _1026 + _797;
        float _1441 = fma(_1431, cbModelParam._m0[30u].z, fma(_1430, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1429)) - _1398;
        float _1442 = fma(_1431, cbModelParam._m0[31u].z, fma(_1430, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1429)) - _1402;
        float _1443 = fma(_1431, cbModelParam._m0[32u].z, fma(_1430, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1429)) - _1406;
        float _1447 = inversesqrt(dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443)));
        float _1460 = ((_1447 * _1441) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1398 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1461 = ((_1447 * _1442) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1402 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1462 = ((_1447 * _1443) / cbModelParam._m0[35u].z) + ((((((_1406 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1460, _1461, _1462), 0.0);
        float _1497 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1464.x + (-0.5));
        float _1499 = _1497 * (_1464.y + (-0.5));
        float _1500 = _1497 * (_1464.z + (-0.5));
        float _1507 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1471.x + (-0.5));
        float _1509 = _1507 * (_1471.y + (-0.5));
        float _1510 = _1507 * (_1471.z + (-0.5));
        float _1517 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1478.x + (-0.5));
        float _1519 = _1517 * (_1478.y + (-0.5));
        float _1520 = _1517 * (_1478.z + (-0.5));
        float _1527 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1485.x + (-0.5));
        float _1529 = _1527 * (_1485.y + (-0.5));
        float _1530 = _1527 * (_1485.z + (-0.5));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = _1498 * 0.5;
        float _1535 = _1508 * 0.5;
        float _1536 = _1518 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_795, _796, _797), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4146 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1561 + 1.0))) + _1566) * _1531;
        float _1576 = _1499 * 0.5;
        float _1577 = _1509 * 0.5;
        float _1578 = _1519 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_795, _796, _797), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4179 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1603 + 1.0))) + _1608) * _1532;
        float _1618 = _1500 * 0.5;
        float _1619 = _1510 * 0.5;
        float _1620 = _1520 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_795, _796, _797), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4212 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1645 + 1.0))) + _1650) * _1533;
        _1667 = _1500;
        _1668 = _1499;
        _1669 = _1498;
        _1670 = _1510;
        _1671 = _1509;
        _1672 = _1508;
        _1673 = _1520;
        _1674 = _1519;
        _1675 = _1518;
        _1676 = _1533;
        _1677 = _1532;
        _1678 = _1531;
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
    }
    else
    {
        _1667 = _1356;
        _1668 = _1356;
        _1669 = _1356;
        _1670 = _1356;
        _1671 = _1356;
        _1672 = _1356;
        _1673 = _1356;
        _1674 = _1356;
        _1675 = _1356;
        _1676 = _1356;
        _1677 = _1356;
        _1678 = _1356;
        _1679 = 0.0;
        _1680 = 0.0;
        _1681 = 0.0;
    }
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1368)) + _1368;
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1369)) + _1369;
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1370)) + _1370;
    float _1714 = fma(_1693, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1717 = fma(_1693, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1720 = fma(_1693, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1691));
    float _1735 = _965 * 0.5;
    float _1736 = _966 * 0.5;
    float _1737 = _967 * 0.5;
    float _1738 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1741 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1744 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1778;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1751 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1355, _1359, _1362, _1365));
        float _1755 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1357, _1360, _1363, _1366));
        float _1759 = dot(vec4(_1735, _1736, _1737, 1.0), vec4(_1358, _1361, _1364, _1367));
        float _1766 = dot(vec4(cbModelParam._m0[39u]), vec4(_1735, _1736, _1737, 1.0));
        _1778 = dot(vec3(isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1766) ? 0.0 : (isnan(0.0) ? _1766 : max(0.0, _1766))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1778 = 1.0;
    }
    float _1789;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1780 = dot(vec4(cbModelParam._m0[40u]), vec4(_1735, _1736, _1737, 1.0));
        _1789 = dot(vec3(isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1780) ? 0.0 : (isnan(0.0) ? _1780 : max(0.0, _1780))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1789 = 1.0;
    }
    float _1793 = (_1789 * cbModelParam._m0[1u].x) + (_1778 * (1.0 - cbModelParam._m0[1u].x));
    float _1803 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _798);
    float _1804 = isnan(_1803) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1803 : min(cbModelParam._m0[25u].z, _1803));
    float _1884;
    float _1886;
    float _1888;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1851 = fma(_1026, cbModelParam._m0[13u].z, fma(_1022, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1018)) + cbModelParam._m0[13u].w;
        float _1855 = fma(_1026, cbModelParam._m0[14u].z, fma(_1022, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1018)) + cbModelParam._m0[14u].w;
        float _1859 = fma(_1026, cbModelParam._m0[15u].z, fma(_1022, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1018)) + cbModelParam._m0[15u].w;
        float _1862 = fma(_967, cbModelParam._m0[13u].z, fma(_966, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _965));
        float _1865 = fma(_967, cbModelParam._m0[14u].z, fma(_966, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _965));
        float _1868 = fma(_967, cbModelParam._m0[15u].z, fma(_966, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _965));
        float _1896;
        if (_1862 > 0.0)
        {
            _1896 = abs((1.0 - _1851) / _1862);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1851 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1896 = frontier_phi_17_15_ladder;
        }
        float _2117;
        if (_1865 > 0.0)
        {
            _2117 = abs((1.0 - _1855) / _1865);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1855 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2117 = frontier_phi_26_22_ladder;
        }
        float _2363;
        if (_1868 > 0.0)
        {
            _2363 = abs((1.0 - _1859) / _1868);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1859 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2363 = frontier_phi_38_33_ladder;
        }
        float _2365 = isnan(_2117) ? _1896 : (isnan(_1896) ? _2117 : min(_1896, _2117));
        float _2366 = isnan(_2363) ? _2365 : (isnan(_2365) ? _2363 : min(_2365, _2363));
        float _2370 = (_2366 * _1862) + _1851;
        float _2371 = (_2366 * _1865) + _1855;
        float _2372 = (_2366 * _1868) + _1859;
        float _2373 = _2366 * 9.9999997473787516355514526367188e-05;
        float _2375 = (-1.0) - _2373;
        float _2377 = _2373 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2372 > _2377) || ((_2372 < _2375) || ((_2371 > _2377) || ((_2371 < _2375) || ((_2370 < _2375) || (_2370 > _2377))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2496 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2372, cbModelParam._m0[9u].z, fma(_2371, cbModelParam._m0[9u].y, _2370 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2372, cbModelParam._m0[10u].z, fma(_2371, cbModelParam._m0[10u].y, _2370 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2372, cbModelParam._m0[11u].z, fma(_2371, cbModelParam._m0[11u].y, _2370 * cbModelParam._m0[11u].x))), _1804);
            frontier_phi_16_38_ladder = _2496.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2496.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2496.x * cbModelParam._m0[1u].y;
        }
        _1884 = frontier_phi_16_38_ladder_2;
        _1886 = frontier_phi_16_38_ladder_1;
        _1888 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_965, _966, _967), _1804);
        _1884 = _1872.x * cbModelParam._m0[1u].y;
        _1886 = _1872.y * cbModelParam._m0[1u].y;
        _1888 = _1872.z * cbModelParam._m0[1u].y;
    }
    float _1892 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _798);
    float _1893 = isnan(_1892) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1892 : min(cbModelParam._m0[25u].w, _1892));
    float _1982;
    float _1984;
    float _1986;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1946 = fma(_1026, cbModelParam._m0[21u].z, fma(_1022, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1018)) + cbModelParam._m0[21u].w;
        float _1950 = fma(_1026, cbModelParam._m0[22u].z, fma(_1022, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1018)) + cbModelParam._m0[22u].w;
        float _1954 = fma(_1026, cbModelParam._m0[23u].z, fma(_1022, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1018)) + cbModelParam._m0[23u].w;
        float _1957 = fma(_967, cbModelParam._m0[21u].z, fma(_966, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _965));
        float _1960 = fma(_967, cbModelParam._m0[22u].z, fma(_966, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _965));
        float _1963 = fma(_967, cbModelParam._m0[23u].z, fma(_966, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _965));
        float _2122;
        if (_1957 > 0.0)
        {
            _2122 = abs((1.0 - _1946) / _1957);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1946 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2122 = frontier_phi_28_24_ladder;
        }
        float _2390;
        if (_1960 > 0.0)
        {
            _2390 = abs((1.0 - _1950) / _1960);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1950 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2390 = frontier_phi_40_35_ladder;
        }
        float _2595;
        if (_1963 > 0.0)
        {
            _2595 = abs((1.0 - _1954) / _1963);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1954 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2595 = frontier_phi_49_46_ladder;
        }
        float _2597 = isnan(_2390) ? _2122 : (isnan(_2122) ? _2390 : min(_2122, _2390));
        float _2598 = isnan(_2595) ? _2597 : (isnan(_2597) ? _2595 : min(_2597, _2595));
        float _2602 = (_2598 * _1957) + _1946;
        float _2603 = (_2598 * _1960) + _1950;
        float _2604 = (_2598 * _1963) + _1954;
        float _2605 = _2598 * 9.9999997473787516355514526367188e-05;
        float _2606 = (-1.0) - _2605;
        float _2608 = _2605 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2604 > _2608) || ((_2604 < _2606) || ((_2603 > _2608) || ((_2603 < _2606) || ((_2602 < _2606) || (_2602 > _2608))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2803 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2604, cbModelParam._m0[17u].z, fma(_2603, cbModelParam._m0[17u].y, _2602 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2604, cbModelParam._m0[18u].z, fma(_2603, cbModelParam._m0[18u].y, _2602 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2604, cbModelParam._m0[19u].z, fma(_2603, cbModelParam._m0[19u].y, _2602 * cbModelParam._m0[19u].x))), _1893);
            frontier_phi_25_49_ladder = _2803.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2803.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2803.x * cbModelParam._m0[1u].z;
        }
        _1982 = frontier_phi_25_49_ladder_2;
        _1984 = frontier_phi_25_49_ladder_1;
        _1986 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1966 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_965, _966, _967), _1893);
        _1982 = _1966.x * cbModelParam._m0[1u].z;
        _1984 = _1966.y * cbModelParam._m0[1u].z;
        _1986 = _1966.z * cbModelParam._m0[1u].z;
    }
    float _1998 = ((((1.0 - _986) * ((_973 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_986 * _973)) * _957;
    float _1999 = _1998 * ((cbModelParam._m0[1u].w * (_1982 - _1884)) + _1884);
    float _2000 = _1998 * ((cbModelParam._m0[1u].w * (_1984 - _1886)) + _1886);
    float _2001 = _1998 * ((cbModelParam._m0[1u].w * (_1986 - _1888)) + _1888);
    float _2004 = fma(_2001, cbSceneParam._m0[89u].z, fma(_2000, cbSceneParam._m0[89u].y, _1999 * cbSceneParam._m0[89u].x));
    float _2007 = fma(_2001, cbSceneParam._m0[90u].z, fma(_2000, cbSceneParam._m0[90u].y, _1999 * cbSceneParam._m0[90u].x));
    float _2010 = fma(_2001, cbSceneParam._m0[91u].z, fma(_2000, cbSceneParam._m0[91u].y, _1999 * cbSceneParam._m0[91u].x));
    vec4 _2018 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_894, _895));
    float _2020 = _2018.w;
    float _2032 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2020);
    float _2033 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2020);
    float _2034 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2020);
    uvec4 _2038 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2040 = _2038.x * 14u;
    uint _2041 = _2040 + 13u;
    float _2048 = _957 + (-1.0);
    float _2053 = (cbLight._m0[_2041].x * _2048) + 1.0;
    float _2054 = (cbLight._m0[_2041].y * _2048) + 1.0;
    float _2055 = (cbLight._m0[_2041].z * _2048) + 1.0;
    float _2056 = (cbLight._m0[_2041].w * _2048) + 1.0;
    uint _2057 = _2040 + 5u;
    float _2063 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
    uint _2067 = _2040 + 4u;
    float _2076 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
    uint _2080 = _2040 | 1u;
    float _2091 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_795, _796, _797));
    float _2094 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_795, _796, _797));
    float _4348 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _4359 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2099 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * 0.3183098733425140380859375;
    float _2101 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * 0.3183098733425140380859375;
    float _2108 = ((cbLight._m0[_2057].x * _2063) * _2101) + (((cbLight._m0[_2067].x * _2032) * _2076) * _2099);
    float _2109 = ((_2063 * cbLight._m0[_2057].y) * _2101) + (((cbLight._m0[_2067].y * _2033) * _2076) * _2099);
    float _2110 = ((_2063 * cbLight._m0[_2057].z) * _2101) + (((cbLight._m0[_2067].z * _2034) * _2076) * _2099);
    uvec4 _2114 = floatBitsToUint(cbLight._m0[_2040 + 12u]);
    bool _2116 = _2114.x == 0u;
    float _2127;
    float _2129;
    float _2131;
    if (_2116)
    {
        _2127 = _2108;
        _2129 = _2109;
        _2131 = _2110;
    }
    else
    {
        uint _2135 = _2040 + 6u;
        float _2151 = (dot(vec3(cbLight._m0[_2040 + 2u].xyz), vec3(_795, _796, _797)) * 0.5) + 0.5;
        float _2152 = _2151 * _2151;
        float _4370 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2153 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2154 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
        _2127 = (((cbLight._m0[_2135].x * 0.3183098733425140380859375) * _2153) * _2154) + _2108;
        _2129 = (((cbLight._m0[_2135].y * 0.3183098733425140380859375) * _2153) * _2154) + _2109;
        _2131 = (((cbLight._m0[_2135].z * 0.3183098733425140380859375) * _2153) * _2154) + _2110;
    }
    bool _2134 = _2114.y == 0u;
    float _2172;
    float _2174;
    float _2176;
    if (_2134)
    {
        _2172 = _2127;
        _2174 = _2129;
        _2176 = _2131;
    }
    else
    {
        uint _2334 = _2040 + 7u;
        float _2350 = (dot(vec3(cbLight._m0[_2040 + 3u].xyz), vec3(_795, _796, _797)) * 0.5) + 0.5;
        float _2351 = _2350 * _2350;
        float _4386 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2352 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2353 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2172 = (((cbLight._m0[_2334].x * 0.3183098733425140380859375) * _2352) * _2353) + _2127;
        _2174 = (((cbLight._m0[_2334].y * 0.3183098733425140380859375) * _2352) * _2353) + _2129;
        _2176 = (((cbLight._m0[_2334].z * 0.3183098733425140380859375) * _2352) * _2353) + _2131;
    }
    uint _2179 = _2040 + 8u;
    float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _798) * 0.949999988079071044921875);
    float _2193 = _2192 * _2192;
    float _2194 = cbLight._m0[_2040].x + _874;
    float _2195 = cbLight._m0[_2040].y + _875;
    float _2196 = cbLight._m0[_2040].z + _876;
    float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
    float _2201 = _2200 * _2194;
    float _2202 = _2200 * _2195;
    float _2203 = _2200 * _2196;
    float _2204 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2040].xyz));
    float _4402 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _4413 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _2208 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _2209 = dot(vec3(_795, _796, _797), vec3(_2201, _2202, _2203));
    float _4424 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _2213 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2201, _2202, _2203));
    float _4435 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2217 = _2193 * _2193;
    float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
    float _2232 = (exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2233 = 1.0 - _2193;
    float _2244 = (0.5 / (((_2208 * ((_2207 * _2233) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2233) + _2193) * _2207))) * _2207;
    float _4446 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2246 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
    uint _2260 = _2040 + 9u;
    float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2080].w)) * _798) * 0.949999988079071044921875);
    float _2272 = _2271 * _2271;
    float _2273 = cbLight._m0[_2080].x + _874;
    float _2274 = cbLight._m0[_2080].y + _875;
    float _2275 = cbLight._m0[_2080].z + _876;
    float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
    float _2280 = _2279 * _2273;
    float _2281 = _2279 * _2274;
    float _2282 = _2279 * _2275;
    float _2283 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2080].xyz));
    float _4457 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2287 = dot(vec3(_795, _796, _797), vec3(_2280, _2281, _2282));
    float _4468 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2290 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _2291 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2280, _2281, _2282));
    float _4479 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2295 = _2272 * _2272;
    float _2299 = ((_2290 * _2290) * (_2295 + (-1.0))) + 1.0;
    float _2308 = (exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2309 = 1.0 - _2272;
    float _2319 = (0.5 / (((_2208 * ((_2286 * _2309) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2309) + _2272) * _2286))) * _2286;
    float _4490 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2321 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2295 / ((_2299 * _2299) * 3.141590118408203125));
    float _2331 = (((_2308 * cbLight._m0[_2260].x) * _2321) * _2063) + ((((cbLight._m0[_2179].x * _2032) * _2232) * _2246) * _2076);
    float _2332 = (((_2308 * cbLight._m0[_2260].y) * _2321) * _2063) + ((((cbLight._m0[_2179].y * _2033) * _2232) * _2246) * _2076);
    float _2333 = (((_2308 * cbLight._m0[_2260].z) * _2321) * _2063) + ((((cbLight._m0[_2179].z * _2034) * _2232) * _2246) * _2076);
    float _2395;
    float _2397;
    float _2399;
    if (_2116)
    {
        _2395 = _2331;
        _2397 = _2332;
        _2399 = _2333;
    }
    else
    {
        uint _2401 = _2040 + 2u;
        uint _2405 = _2040 + 10u;
        float _2419 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2401].w)) * _798) * 0.949999988079071044921875);
        float _2420 = _2419 * _2419;
        float _2421 = cbLight._m0[_2401].x + _874;
        float _2422 = cbLight._m0[_2401].y + _875;
        float _2423 = cbLight._m0[_2401].z + _876;
        float _2427 = inversesqrt(dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423)));
        float _2428 = _2427 * _2421;
        float _2429 = _2427 * _2422;
        float _2430 = _2427 * _2423;
        float _2431 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2401].xyz));
        float _4501 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2434 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2435 = dot(vec3(_795, _796, _797), vec3(_2428, _2429, _2430));
        float _4512 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2439 = dot(vec3(cbLight._m0[_2401].xyz), vec3(_2428, _2429, _2430));
        float _4523 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2443 = _2420 * _2420;
        float _2447 = ((_2438 * _2438) * (_2443 + (-1.0))) + 1.0;
        float _2456 = (exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2457 = 1.0 - _2420;
        float _2467 = (0.5 / (((_2208 * ((_2434 * _2457) + _2420)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2457) + _2420) * _2434))) * _2434;
        float _4534 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2469 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2443 / ((_2447 * _2447) * 3.141590118408203125));
        float _2470 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
        _2395 = (((_2456 * cbLight._m0[_2405].x) * _2469) * _2470) + _2331;
        _2397 = (((_2456 * cbLight._m0[_2405].y) * _2469) * _2470) + _2332;
        _2399 = (((_2456 * cbLight._m0[_2405].z) * _2469) * _2470) + _2333;
    }
    float _2505;
    float _2507;
    float _2509;
    if (_2134)
    {
        _2505 = _2395;
        _2507 = _2397;
        _2509 = _2399;
    }
    else
    {
        uint _2516 = _2040 + 3u;
        uint _2520 = _2040 + 11u;
        float _2534 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2516].w)) * _798) * 0.949999988079071044921875);
        float _2535 = _2534 * _2534;
        float _2536 = cbLight._m0[_2516].x + _874;
        float _2537 = cbLight._m0[_2516].y + _875;
        float _2538 = cbLight._m0[_2516].z + _876;
        float _2542 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
        float _2543 = _2542 * _2536;
        float _2544 = _2542 * _2537;
        float _2545 = _2542 * _2538;
        float _2546 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2516].xyz));
        float _4550 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2550 = dot(vec3(_795, _796, _797), vec3(_2543, _2544, _2545));
        float _4561 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2554 = dot(vec3(cbLight._m0[_2516].xyz), vec3(_2543, _2544, _2545));
        float _4572 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2558 = _2535 * _2535;
        float _2562 = ((_2553 * _2553) * (_2558 + (-1.0))) + 1.0;
        float _2571 = (exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2572 = 1.0 - _2535;
        float _2582 = (0.5 / (((_2208 * ((_2549 * _2572) + _2535)) + 9.9999999392252902907785028219223e-09) + (((_2208 * _2572) + _2535) * _2549))) * _2549;
        float _4583 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2584 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2558 / ((_2562 * _2562) * 3.141590118408203125));
        float _2585 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2505 = (((_2571 * cbLight._m0[_2520].x) * _2584) * _2585) + _2395;
        _2507 = (((_2571 * cbLight._m0[_2520].y) * _2584) * _2585) + _2397;
        _2509 = (((_2571 * cbLight._m0[_2520].z) * _2584) * _2585) + _2399;
    }
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    if (_2038.y == 0u)
    {
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2660;
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2660;
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2660;
        uvec4 _2675 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2676 = _2675.x;
        uint _2687 = uint((float(_2675.y) * floor(float(uint(cbSceneParam._m0[85u].y * _895) / _2676))) + floor(float(uint(cbSceneParam._m0[85u].x * _894) / _2676)));
        float _2697 = (log2(_2663 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2698 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        uint _2701 = uint(isnan(14.0) ? _2698 : (isnan(_2698) ? 14.0 : min(_2698, 14.0)));
        uvec4 _2706 = texelFetch(g_lightClusterGridBuffer, int(((_2701 << 2u) + (_2687 << 6u)) >> 2u));
        uint _2707 = _2706.x;
        uint _2708 = _2675.z;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        if (((((1u << ((_2708 >> 4u) & 15u)) + 4294967295u) & _2707) == 0u) || ((_2708 & 240u) == 0u))
        {
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
        }
        else
        {
            float _2809;
            float _2811;
            float _2813;
            float _2815;
            float _2817;
            float _2819;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            uint _2967 = 0u;
            uint _2976;
            bool _2977;
            for (;;)
            {
                _2976 = texelFetch(g_lightClassification, int((((_2701 << 5u) + (_2687 << 9u)) + (_2967 << 2u)) >> 2u)).x;
                _2977 = _2976 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2977)
                {
                    frontier_phi_66_pred = _2961;
                    frontier_phi_66_pred_1 = _2966;
                    frontier_phi_66_pred_2 = _2965;
                    frontier_phi_66_pred_3 = _2964;
                    frontier_phi_66_pred_4 = _2963;
                    frontier_phi_66_pred_5 = _2962;
                }
                else
                {
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    uint _3112;
                    _3106 = _2961;
                    _3107 = _2962;
                    _3108 = _2963;
                    _3109 = _2964;
                    _3110 = _2965;
                    _3111 = _2966;
                    _3112 = _2976;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    for (;;)
                    {
                        uint _3116 = uint(findLSB(_3112)) + (_2967 << 5u);
                        uint _3113 = (_3112 + 4294967295u) & _3112;
                        uint _3118 = _3116 * 48u;
                        vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3118)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 3u)).x));
                        uint _3138 = (_3116 * 48u) + 4u;
                        vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3138)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 3u)).x));
                        uint _3157 = (_3116 * 48u) + 8u;
                        vec3 _3168 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3157)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 2u)).x));
                        float _3172 = _3132.x - _2661;
                        float _3173 = _3132.y - _2662;
                        float _3174 = _3132.z - _2663;
                        float _3175 = dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174));
                        float _3178 = inversesqrt(_3175);
                        float _3179 = _3178 * _3172;
                        float _3180 = _3178 * _3173;
                        float _3181 = _3178 * _3174;
                        float _3182 = dot(vec3(_913, _916, _919), vec3(_3179, _3180, _3181));
                        float _3187 = 1.0 - (_3175 * _3132.w);
                        float _4609 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3188 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3189 = sqrt(_3175) * _3151.w;
                        float _3192 = 1.39999997615814208984375 / (_3189 + 1.39999997615814208984375);
                        float _3193 = _3192 * _3192;
                        float _3196 = ((1.0 - _3193) * _3182) + _3193;
                        float _3199 = _3189 * _3189;
                        float _3203 = ((isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0))) * _3188) / ((_3199 * 0.699999988079071044921875) + 1.0);
                        float _3207 = (-0.0) - _2661;
                        float _3208 = (-0.0) - _2662;
                        float _3209 = (-0.0) - _2663;
                        float _3213 = inversesqrt(dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209)));
                        float _3214 = _3213 * _3207;
                        float _3215 = _3213 * _3208;
                        float _3216 = _3213 * _3209;
                        float _3224 = exp2(log2(1.0 / ((_3199 * 3.5) + 5.0)) * 0.25);
                        float _3225 = 1.0 - _973;
                        float _3232 = sqrt(1.0 - ((1.0 - (_3225 * _3225)) * (1.0 - (_3224 * _3224))));
                        float _3233 = _3232 * _3232;
                        float _3234 = _3233 * _3233;
                        float _3235 = _3214 + _3179;
                        float _3236 = _3215 + _3180;
                        float _3237 = _3216 + _3181;
                        float _3241 = inversesqrt(dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237)));
                        float _3245 = dot(vec3(_913, _916, _919), vec3(_3214, _3215, _3216));
                        float _4625 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                        float _3248 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3249 = dot(vec3(_913, _916, _919), vec3(_3241 * _3235, _3241 * _3236, _3241 * _3237));
                        float _4636 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3252 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                        float _3256 = ((_3252 * _3252) * (_3234 + (-1.0))) + 1.0;
                        float _3257 = _3192 * _3233;
                        float _3258 = _3257 * _3257;
                        float _3261 = ((1.0 - _3258) * _3182) + _3258;
                        float _4647 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3262 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3263 = 1.0 - _3233;
                        float _3273 = (0.5 / (((_3262 * ((_3248 * _3263) + _3233)) + 9.9999999392252902907785028219223e-09) + (((_3262 * _3263) + _3233) * _3248))) * _3262;
                        float _4658 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3284 = (((_3234 * 3.1415927410125732421875) * (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) / ((_3256 * _3256) * ((_3199 * 2.1991131305694580078125) + 3.141590118408203125))) * _3188;
                        _3036 = (_3203 * _3151.x) + _3109;
                        _3037 = (_3203 * _3151.y) + _3110;
                        _3038 = (_3203 * _3151.z) + _3111;
                        _3033 = (_3284 * _3168.x) + _3106;
                        _3034 = (_3284 * _3168.y) + _3107;
                        _3035 = (_3284 * _3168.z) + _3108;
                        if (_3113 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3106 = _3033;
                            _3107 = _3034;
                            _3108 = _3035;
                            _3109 = _3036;
                            _3110 = _3037;
                            _3111 = _3038;
                            _3112 = _3113;
                        }
                    }
                    frontier_phi_66_pred = _3033;
                    frontier_phi_66_pred_1 = _3038;
                    frontier_phi_66_pred_2 = _3037;
                    frontier_phi_66_pred_3 = _3036;
                    frontier_phi_66_pred_4 = _3035;
                    frontier_phi_66_pred_5 = _3034;
                }
                _2809 = frontier_phi_66_pred;
                _2819 = frontier_phi_66_pred_1;
                _2817 = frontier_phi_66_pred_2;
                _2815 = frontier_phi_66_pred_3;
                _2813 = frontier_phi_66_pred_4;
                _2811 = frontier_phi_66_pred_5;
                uint _2968 = _2967 + 1u;
                if (_2968 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2961 = _2809;
                    _2962 = _2811;
                    _2963 = _2813;
                    _2964 = _2815;
                    _2965 = _2817;
                    _2966 = _2819;
                    _2967 = _2968;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
        }
        uvec4 _2822 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2823 = _2822.z;
        uint _2825 = (_2823 >> 8u) & 15u;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        if (((4294967295u << _2825) & _2707) == 0u)
        {
            _2929 = _2808;
            _2931 = _2810;
            _2933 = _2812;
            _2935 = _2814;
            _2937 = _2816;
            _2939 = _2818;
        }
        else
        {
            float _2954 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
            float _2955 = _2954 * _2661;
            float _2956 = _2954 * _2662;
            float _2957 = _2954 * _2663;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2825 < ((_2823 >> 12u) & 15u))
            {
                float _2930;
                float _2932;
                float _2934;
                float _2936;
                float _2938;
                float _2940;
                float _3089 = _2808;
                float _3090 = _2810;
                float _3091 = _2812;
                float _3092 = _2814;
                float _3093 = _2816;
                float _3094 = _2818;
                uint _3095 = _2825;
                uint _3104;
                bool _3105;
                for (;;)
                {
                    _3104 = texelFetch(g_lightClassification, int((((_2701 << 5u) + (_2687 << 9u)) + (_3095 << 2u)) >> 2u)).x;
                    _3105 = _3104 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3105)
                    {
                        frontier_phi_77_pred = _3094;
                        frontier_phi_77_pred_1 = _3093;
                        frontier_phi_77_pred_2 = _3092;
                        frontier_phi_77_pred_3 = _3091;
                        frontier_phi_77_pred_4 = _3090;
                        frontier_phi_77_pred_5 = _3089;
                    }
                    else
                    {
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3311 = _3089;
                        float _3312 = _3090;
                        float _3313 = _3091;
                        float _3314 = _3092;
                        float _3315 = _3093;
                        float _3316 = _3094;
                        uint _3317 = _3104;
                        uint _3318;
                        vec4 _3343;
                        float _3344;
                        vec4 _3359;
                        vec3 _3371;
                        vec4 _3386;
                        vec4 _3401;
                        float _3447;
                        bool _3448;
                        for (;;)
                        {
                            uint _3328 = ((_3095 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3317));
                            _3318 = (_3317 + 4294967295u) & _3317;
                            uint _3330 = _3328 * 40u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            _3344 = _3343.w;
                            uint _3346 = (_3328 * 40u) + 4u;
                            _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            uint _3361 = (_3328 * 40u) + 8u;
                            _3371 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x));
                            uint _3373 = (_3328 * 40u) + 16u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3388 = (_3328 * 40u) + 20u;
                            _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            uint _3403 = (_3328 * 40u) + 24u;
                            vec4 _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3422 = (_3328 * 40u) + 28u;
                            vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            _3447 = fma(_2663, _3435.z, fma(_2662, _3435.y, _3435.x * _2661)) + _3435.w;
                            _3448 = !((fma(_2663, _3416.z, fma(_2662, _3416.y, _3416.x * _2661)) + _3416.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3448)
                            {
                                float _3475 = _3343.x - _2661;
                                float _3476 = _3343.y - _2662;
                                float _3477 = _3343.z - _2663;
                                float _3478 = dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477));
                                float _3481 = inversesqrt(_3478);
                                float _3482 = _3481 * _3475;
                                float _3483 = _3481 * _3476;
                                float _3484 = _3481 * _3477;
                                float _3488 = 1.0 - (_3478 / (_3344 * _3344));
                                float _4669 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3489 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3493 = sqrt(_3478) * _3359.w;
                                float _3495 = 1.39999997615814208984375 / (_3493 + 1.39999997615814208984375);
                                float _3496 = _3495 * _3495;
                                float _3499 = ((1.0 - _3496) * dot(vec3(_3482, _3483, _3484), vec3(_913, _916, _919))) + _3496;
                                float _3502 = _3493 * _3493;
                                float _3506 = (fma(_2663, _3386.z, fma(_2662, _3386.y, _3386.x * _2661)) + _3386.w) / _3447;
                                float _3507 = (fma(_2663, _3401.z, fma(_2662, _3401.y, _3401.x * _2661)) + _3401.w) / _3447;
                                float _3511 = 1.0 - dot(vec2(_3506, _3507), vec2(_3506, _3507));
                                float _4685 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3512 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3513 = _3512 * (((isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0))) * _3489) / ((_3502 * 0.699999988079071044921875) + 1.0));
                                float _3525 = exp2(log2(1.0 / ((_3502 * 3.5) + 5.0)) * 0.25);
                                float _3526 = 1.0 - _973;
                                float _3533 = sqrt(1.0 - ((1.0 - (_3526 * _3526)) * (1.0 - (_3525 * _3525))));
                                float _3534 = _3533 * _3533;
                                float _3535 = _3534 * _3534;
                                float _3536 = _3482 - _2955;
                                float _3537 = _3483 - _2956;
                                float _3538 = _3484 - _2957;
                                float _3542 = inversesqrt(dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538)));
                                float _3546 = dot(vec3(_913, _916, _919), vec3((-0.0) - _2955, (-0.0) - _2956, (-0.0) - _2957));
                                float _4696 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3549 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3550 = dot(vec3(_913, _916, _919), vec3(_3542 * _3536, _3542 * _3537, _3542 * _3538));
                                float _4707 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3553 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3557 = ((_3553 * _3553) * (_3535 + (-1.0))) + 1.0;
                                float _3558 = _3495 * _3534;
                                float _3559 = _3558 * _3558;
                                float _3565 = ((1.0 - _3559) * dot(vec3(_913, _916, _919), vec3(_3482, _3483, _3484))) + _3559;
                                float _4718 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3567 = 1.0 - _3534;
                                float _3577 = (0.5 / (((_3566 * ((_3549 * _3567) + _3534)) + 9.9999999392252902907785028219223e-09) + (((_3566 * _3567) + _3534) * _3549))) * _3566;
                                float _4729 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3587 = (_3512 * _3489) * (((_3535 * 3.1415927410125732421875) * (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) / ((_3557 * _3557) * ((_3502 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3513 * _3359.y;
                                frontier_phi_83_pred_1 = _3513 * _3359.x;
                                frontier_phi_83_pred_2 = _3587 * _3371.z;
                                frontier_phi_83_pred_3 = _3587 * _3371.y;
                                frontier_phi_83_pred_4 = _3587 * _3371.x;
                                frontier_phi_83_pred_5 = _3513 * _3359.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3595 = frontier_phi_83_pred;
                            _3594 = frontier_phi_83_pred_1;
                            _3593 = frontier_phi_83_pred_2;
                            _3592 = frontier_phi_83_pred_3;
                            _3591 = frontier_phi_83_pred_4;
                            _3596 = frontier_phi_83_pred_5;
                            _3301 = _3594 + _3314;
                            _3302 = _3595 + _3315;
                            _3303 = _3596 + _3316;
                            _3298 = _3591 + _3311;
                            _3299 = _3592 + _3312;
                            _3300 = _3593 + _3313;
                            if (_3318 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3318;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3303;
                        frontier_phi_77_pred_1 = _3302;
                        frontier_phi_77_pred_2 = _3301;
                        frontier_phi_77_pred_3 = _3300;
                        frontier_phi_77_pred_4 = _3299;
                        frontier_phi_77_pred_5 = _3298;
                    }
                    _2940 = frontier_phi_77_pred;
                    _2938 = frontier_phi_77_pred_1;
                    _2936 = frontier_phi_77_pred_2;
                    _2934 = frontier_phi_77_pred_3;
                    _2932 = frontier_phi_77_pred_4;
                    _2930 = frontier_phi_77_pred_5;
                    uint _3096 = _3095 + 1u;
                    if (_3096 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3089 = _2930;
                        _3090 = _2932;
                        _3091 = _2934;
                        _3092 = _2936;
                        _3093 = _2938;
                        _3094 = _2940;
                        _3095 = _3096;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2934;
                frontier_phi_58_59_ladder_1 = _2940;
                frontier_phi_58_59_ladder_2 = _2938;
                frontier_phi_58_59_ladder_3 = _2936;
                frontier_phi_58_59_ladder_4 = _2932;
                frontier_phi_58_59_ladder_5 = _2930;
            }
            else
            {
                frontier_phi_58_59_ladder = _2812;
                frontier_phi_58_59_ladder_1 = _2818;
                frontier_phi_58_59_ladder_2 = _2816;
                frontier_phi_58_59_ladder_3 = _2814;
                frontier_phi_58_59_ladder_4 = _2810;
                frontier_phi_58_59_ladder_5 = _2808;
            }
            _2929 = frontier_phi_58_59_ladder_5;
            _2931 = frontier_phi_58_59_ladder_4;
            _2933 = frontier_phi_58_59_ladder;
            _2935 = frontier_phi_58_59_ladder_3;
            _2937 = frontier_phi_58_59_ladder_2;
            _2939 = frontier_phi_58_59_ladder_1;
        }
        float _2944 = isnan(1.0) ? _957 : (isnan(_957) ? 1.0 : min(_957, 1.0));
        _2720 = (_2944 * _2935) + _2172;
        _2722 = (_2944 * _2937) + _2174;
        _2724 = (_2944 * _2939) + _2176;
        _2726 = ((_2929 * 0.039999999105930328369140625) * _2944) + _2505;
        _2728 = ((_2931 * 0.039999999105930328369140625) * _2944) + _2507;
        _2730 = ((_2933 * 0.039999999105930328369140625) * _2944) + _2509;
    }
    else
    {
        _2720 = _2172;
        _2722 = _2174;
        _2724 = _2176;
        _2726 = _2505;
        _2728 = _2507;
        _2730 = _2509;
    }
    float _4745 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4756 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4767 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _2747 = ((isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2720 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _957))) + ((_2726 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1793)) * cbPerFrame._m0[3u].x);
    float _2748 = ((isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2722 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _957))) + ((_2728 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1793)) * cbPerFrame._m0[3u].x);
    float _2749 = ((isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2724 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _957))) + ((_2730 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1793)) * cbPerFrame._m0[3u].x);
    uint _2750 = _281 + 6u;
    float _2758 = _894 / cbSceneParam._m0[86u].x;
    float _2759 = _895 / cbSceneParam._m0[86u].y;
    vec4 _2773 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2758, _2759, (log2((isnan(cbSceneParam._m0[77u].w) ? _816 : (isnan(_816) ? cbSceneParam._m0[77u].w : min(_816, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2775 = _2773.x;
    float _2776 = _2773.y;
    float _2777 = _2773.z;
    float _2778 = _2773.w;
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    if (_816 > cbSceneParam._m0[78u].w)
    {
        float _2833 = isnan(_816) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _816 : min(cbSceneParam._m0[80u].w, _816));
        float _2834 = _2833 / _816;
        float _2845 = _2834 * _867;
        float _2846 = _868 * _2834;
        float _2847 = (-0.0) - _2846;
        float _2849 = _2834 * _869;
        float _2851 = (cbSceneParam._m0[77u].w * _2847) / _2833;
        float _2852 = _2851 + cbSceneParam._m0[79u].w;
        float _2853 = cbSceneParam._m0[79u].w - _2846;
        float _2859 = sqrt(((_2845 * _2845) + (_2846 * _2846)) + (_2849 * _2849));
        float _2862 = (1.0 - (cbSceneParam._m0[77u].w / _2833)) * _2859;
        float _2867 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2869 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3046;
        if (abs((_2847 - _2851) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3046 = ((((_2852 > 0.0) ? exp2(_2867 * _2852) : (2.0 - exp2(_2869 * _2852))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2862;
        }
        else
        {
            float _2990 = 1.0 / cbSceneParam._m0[80u].x;
            float _2991 = isnan(_2853) ? _2852 : (isnan(_2852) ? _2853 : max(_2852, _2853));
            float _2992 = isnan(_2853) ? _2852 : (isnan(_2852) ? _2853 : min(_2852, _2853));
            float _3001 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : min(_2991, 0.0));
            float _3002 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : min(_2992, 0.0));
            _3046 = ((abs(_2859 / _2847) * cbSceneParam._m0[80u].y) * ((((_3001 - _3002) * 2.0) - ((exp2(_2867 * (isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0)))) - exp2(_2867 * (isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0))))) * _2990)) - ((exp2(_2869 * _3001) - exp2(_2869 * _3002)) * _2990))) + (_2862 * cbSceneParam._m0[80u].z);
        }
        vec4 _3048 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2758, _2759, 1.0), 0.0);
        float _3057 = exp2((_3046 * (-1.44269502162933349609375)) * (1.0 - _3048.w));
        float _3058 = log2(_3057);
        float _3074 = log2(_2778);
        _2871 = (exp2(_3074 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].x)) * _3048.x) / cbSceneParam._m0[78u].x)) + _2775;
        _2873 = (exp2(_3074 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].y)) * _3048.y) / cbSceneParam._m0[78u].y)) + _2776;
        _2875 = (exp2(_3074 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].z)) * _3048.z) / cbSceneParam._m0[78u].z)) + _2777;
        _2877 = _3057 * _2778;
    }
    else
    {
        _2871 = _2775;
        _2873 = _2776;
        _2875 = _2777;
        _2877 = _2778;
    }
    bool _3084;
    vec4 _2887;
    vec4 _2909;
    float _2911;
    float _2915;
    float _2916;
    float _2917;
    float _2918;
    bool _2928;
    for (;;)
    {
        _2887 = cbMatDynParam._m0[0u];
        float _2889 = roundEven(_2887.y);
        bool _2890 = _2889 == 3.0;
        float _2891 = log2(_2877);
        float _2898 = exp2(_2891 * cbSceneParam._m0[78u].x) * _2747;
        float _2899 = exp2(_2891 * cbSceneParam._m0[78u].y) * _2748;
        float _2900 = exp2(_2891 * cbSceneParam._m0[78u].z) * _2749;
        float _2907 = _883 + (-0.5);
        _2909 = cbMtdParam._m0[1u];
        _2911 = _2909.y * _2907;
        float _2914 = (_2889 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2915 = _2914 * (_2890 ? _2898 : (_2898 + (cbSceneParam._m0[72u].w * _2871)));
        _2916 = _2914 * (_2890 ? _2899 : (_2899 + (cbSceneParam._m0[72u].w * _2873)));
        _2917 = _2914 * (_2890 ? _2900 : (_2900 + (cbSceneParam._m0[72u].w * _2875)));
        _2918 = _2907 * 0.999000012874603271484375;
        _2928 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2928)
        {
            if ((cbInstanceData._m0[_281 + 7u].x + _2918) < 0.5)
            {
                _3084 = true;
                break;
            }
        }
        uint _3025 = _932 + uint(_2887.w);
        if ((cbInstanceData._m0[_3025].w < 1.0) && ((cbInstanceData._m0[_3025].w + _2918) < 0.5))
        {
            _3084 = true;
            break;
        }
        if ((_2911 + 1.0) < _2909.x)
        {
            _3084 = true;
            break;
        }
        _3084 = false;
        break;
    }
    float _3289;
    if (_3084)
    {
        discard_state = true;
        _3289 = 0.0;
    }
    else
    {
        _3289 = cbInstanceData._m0[_2750].w;
    }
    SV_Target.x = _2915;
    SV_Target.y = _2916;
    SV_Target.z = _2917;
    SV_Target.w = _3289;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2750].w;
    discard_exit();
}


