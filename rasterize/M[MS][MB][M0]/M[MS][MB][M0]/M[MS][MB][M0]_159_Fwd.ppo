#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1263;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _362 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _362) * cbMtdParam._m0[24u].x) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3567 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _387 = (_380 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _388 = (_380 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _389 = (_380 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _408 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _428 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _445 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _447 = _445.x;
    float _448 = _445.y;
    float _449 = _445.z;
    float _458 = ((_428.z - _449) * _380) + _449;
    float _461 = ((((_428.x - _447) * _380) + _447) * 2.0) + (-1.0);
    float _463 = ((((_428.y - _448) * _380) + _448) * 2.0) + (-1.0);
    float _464 = dot(vec2(_461, _463), vec2(_461, _463));
    float _3578 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _469 = sqrt(1.0 - (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))));
    float _472 = fma(_469, _233, fma(_463, _240, _461 * _226));
    float _475 = fma(_469, _234, fma(_463, _241, _461 * _227));
    float _478 = fma(_469, _235, fma(_463, _242, _461 * _228));
    float _482 = inversesqrt(dot(vec3(_472, _475, _478), vec3(_472, _475, _478)));
    vec4 _498 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _526 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _528 = _526.x;
    float _529 = 1.0 - _528;
    float _533 = ((_528 - _529) * cbMtdParam._m0[24u].z) + _529;
    float _535 = (cbMtdParam._m0[19u].x + dot(vec4(_482 * _472, _482 * _475, _482 * _478, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_533 * cbMtdParam._m0[21u].z);
    float _3589 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _538 = (-0.0) - cbMtdParam._m0[24u].y;
    float _540 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _541 = isnan(1.0) ? _540 : (isnan(_540) ? 1.0 : min(_540, 1.0));
    float _548 = _536 - ((_536 * TEXCOORD_8.x) * _541);
    float _549 = _536 - ((_536 * TEXCOORD_8.y) * _541);
    float _550 = _536 - ((_536 * TEXCOORD_8.z) * _541);
    float _557 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _561 = ((isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : min(_557, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _569 = (_561 - (((_533 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _561))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3620 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _574 = ((_548 * ((_408.x * cbMtdParam._m0[18u].x) - _387)) * _570) + _387;
    float _575 = ((_549 * ((_408.y * cbMtdParam._m0[18u].y) - _388)) * _570) + _388;
    float _576 = ((_550 * ((_408.z * cbMtdParam._m0[18u].z) - _389)) * _570) + _389;
    vec4 _588 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _590 = _588.x;
    float _591 = 1.0 - _590;
    float _618 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_590 - _591) * cbMtdParam._m0[24u].w) + _591) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3631 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _627 = ((((cbMtdParam._m0[10u].x - _574) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _619) + _574;
    float _628 = ((((cbMtdParam._m0[10u].y - _575) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _619) + _575;
    float _629 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _576)) * _619) + _576;
    vec4 _643 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _650 = (_643.x * 2.0) + (-1.0);
    float _651 = (_643.y * 2.0) + (-1.0);
    float _652 = dot(vec2(_650, _651), vec2(_650, _651));
    float _3642 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _661 = (((_643.z - _458) * _548) * _570) + _458;
    float _664 = ((cbMtdParam._m0[23u].y - _661) * _619) + _661;
    vec4 _683 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _689 = (_683.x * 2.0) + (-1.0);
    float _690 = (_683.y * 2.0) + (-1.0);
    float _691 = dot(vec2(_689, _690), vec2(_689, _690));
    float _3653 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _711 = (((cbMtdParam._m0[21u].x * _461) + ((_650 - _461) * _548)) * _570) + _461;
    float _712 = (((cbMtdParam._m0[21u].x * _463) + ((_651 - _463) * _549)) * _570) + _463;
    float _713 = (((sqrt(1.0 - (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) - _469) * _550) * _570) + _469;
    float _724 = (((_689 - _711) + (_711 * cbMtdParam._m0[22u].z)) * _619) + _711;
    float _725 = (((_690 - _712) + (_712 * cbMtdParam._m0[22u].z)) * _619) + _712;
    float _726 = ((sqrt(1.0 - (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) - _713) * _619) + _713;
    float _728 = cbMtdParam._m0[22u].x + _498.w;
    float _731 = fma(_726, _233, fma(_725, _240, _724 * _226));
    float _734 = fma(_726, _234, fma(_725, _241, _724 * _227));
    float _737 = fma(_726, _235, fma(_725, _242, _724 * _228));
    float _741 = inversesqrt(dot(vec3(_731, _734, _737), vec3(_731, _734, _737)));
    float _742 = _741 * _731;
    float _743 = _741 * _734;
    float _744 = _741 * _737;
    float _3664 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _745 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _3686 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3697 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3708 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _763 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _814 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _804);
    float _815 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _804);
    float _816 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _804);
    float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
    float _821 = _814 * _820;
    float _822 = _815 * _820;
    float _823 = _816 * _820;
    float _829 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _830 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _848 = fma(_744, cbSceneParam._m0[5u].z, fma(_743, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _742));
    float _851 = fma(_744, cbSceneParam._m0[6u].z, fma(_743, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _742));
    float _854 = fma(_744, cbSceneParam._m0[7u].z, fma(_743, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _742));
    uint _868 = (_245 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _874 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) * cbInstanceData._m0[_868].x;
    float _875 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) * cbInstanceData._m0[_868].y;
    float _876 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) * cbInstanceData._m0[_868].z;
    float _3719 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _3730 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _3741 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    vec4 _888 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _829, cbSceneParam._m0[86u].y * _830));
    float _892 = ((isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * TEXCOORD_5.w) * _888.x;
    float _893 = dot(vec3(_742, _743, _744), vec3(_821, _822, _823));
    float _896 = _893 * 2.0;
    float _900 = (_896 * _742) - _821;
    float _901 = (_896 * _743) - _822;
    float _902 = (_896 * _744) - _823;
    float _906 = abs(dot(vec3(_821, _822, _823), vec3(_742, _743, _744)));
    float _3752 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _908 = sqrt(_745);
    float _921 = exp2((_908 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_908 * 3.0));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1262;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _987 = fma(_961, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953));
        float _991 = fma(_961, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953));
        float _995 = fma(_961, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953));
        float _1020 = _953 + _742;
        float _1021 = _957 + _743;
        float _1022 = _961 + _744;
        float _1032 = fma(_1022, cbModelParam._m0[26u].z, fma(_1021, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1020)) - _987;
        float _1033 = fma(_1022, cbModelParam._m0[27u].z, fma(_1021, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1020)) - _991;
        float _1034 = fma(_1022, cbModelParam._m0[28u].z, fma(_1021, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1020)) - _995;
        float _1038 = inversesqrt(dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034)));
        float _1051 = ((_1038 * _1032) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_987 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1038 * _1033) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_991 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1038 * _1034) / cbModelParam._m0[34u].z) + ((((((_995 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        float _1090 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1056.x + (-0.5));
        float _1092 = _1090 * (_1056.y + (-0.5));
        float _1093 = _1090 * (_1056.z + (-0.5));
        float _1100 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1063.x + (-0.5));
        float _1102 = _1100 * (_1063.y + (-0.5));
        float _1103 = _1100 * (_1063.z + (-0.5));
        float _1110 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1070.x + (-0.5));
        float _1112 = _1110 * (_1070.y + (-0.5));
        float _1113 = _1110 * (_1070.z + (-0.5));
        float _1120 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1077.x + (-0.5));
        float _1122 = _1120 * (_1077.y + (-0.5));
        float _1123 = _1120 * (_1077.z + (-0.5));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = _1091 * 0.5;
        float _1128 = _1101 * 0.5;
        float _1129 = _1111 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1144 = (dot(vec3(_742, _743, _744), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1154 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3800 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1156 + 1.0))) + _1161) * _1124;
        float _1171 = _1092 * 0.5;
        float _1172 = _1102 * 0.5;
        float _1173 = _1112 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_742, _743, _744), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3811 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3822 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3833 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1198 + 1.0))) + _1203) * _1125;
        float _1213 = _1093 * 0.5;
        float _1214 = _1103 * 0.5;
        float _1215 = _1113 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_742, _743, _744), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3866 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1240 + 1.0))) + _1245) * _1126;
        _1262 = _1093;
        _1264 = _1092;
        _1265 = _1091;
        _1266 = _1103;
        _1267 = _1102;
        _1268 = _1101;
        _1269 = _1113;
        _1270 = _1112;
        _1271 = _1111;
        _1272 = _1126;
        _1273 = _1125;
        _1274 = _1124;
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
    }
    else
    {
        _1262 = _1263;
        _1264 = _1263;
        _1265 = _1263;
        _1266 = _1263;
        _1267 = _1263;
        _1268 = _1263;
        _1269 = _1263;
        _1270 = _1263;
        _1271 = _1263;
        _1272 = _1263;
        _1273 = _1263;
        _1274 = _1263;
        _1275 = 0.0;
        _1276 = 0.0;
        _1277 = 0.0;
    }
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1302 = fma(_961, cbModelParam._m0[30u].z, fma(_957, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953));
        float _1306 = fma(_961, cbModelParam._m0[31u].z, fma(_957, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953));
        float _1310 = fma(_961, cbModelParam._m0[32u].z, fma(_957, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953));
        float _1333 = _953 + _742;
        float _1334 = _957 + _743;
        float _1335 = _961 + _744;
        float _1345 = fma(_1335, cbModelParam._m0[30u].z, fma(_1334, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1333)) - _1302;
        float _1346 = fma(_1335, cbModelParam._m0[31u].z, fma(_1334, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1333)) - _1306;
        float _1347 = fma(_1335, cbModelParam._m0[32u].z, fma(_1334, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1333)) - _1310;
        float _1351 = inversesqrt(dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347)));
        float _1364 = ((_1351 * _1345) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1302 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1351 * _1346) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1306 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1351 * _1347) / cbModelParam._m0[35u].z) + ((((((_1310 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        float _1401 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1368.x + (-0.5));
        float _1403 = _1401 * (_1368.y + (-0.5));
        float _1404 = _1401 * (_1368.z + (-0.5));
        float _1411 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1375.x + (-0.5));
        float _1413 = _1411 * (_1375.y + (-0.5));
        float _1414 = _1411 * (_1375.z + (-0.5));
        float _1421 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1382.x + (-0.5));
        float _1423 = _1421 * (_1382.y + (-0.5));
        float _1424 = _1421 * (_1382.z + (-0.5));
        float _1431 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1389.x + (-0.5));
        float _1433 = _1431 * (_1389.y + (-0.5));
        float _1434 = _1431 * (_1389.z + (-0.5));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = _1402 * 0.5;
        float _1439 = _1412 * 0.5;
        float _1440 = _1422 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_742, _743, _744), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _3929 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1465 + 1.0))) + _1470) * _1435;
        float _1480 = _1403 * 0.5;
        float _1481 = _1413 * 0.5;
        float _1482 = _1423 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_742, _743, _744), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _3962 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1507 + 1.0))) + _1512) * _1436;
        float _1522 = _1404 * 0.5;
        float _1523 = _1414 * 0.5;
        float _1524 = _1424 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_742, _743, _744), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _3995 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1549 + 1.0))) + _1554) * _1437;
        _1571 = _1404;
        _1572 = _1403;
        _1573 = _1402;
        _1574 = _1414;
        _1575 = _1413;
        _1576 = _1412;
        _1577 = _1424;
        _1578 = _1423;
        _1579 = _1422;
        _1580 = _1437;
        _1581 = _1436;
        _1582 = _1435;
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
    }
    else
    {
        _1571 = _1263;
        _1572 = _1263;
        _1573 = _1263;
        _1574 = _1263;
        _1575 = _1263;
        _1576 = _1263;
        _1577 = _1263;
        _1578 = _1263;
        _1579 = _1263;
        _1580 = _1263;
        _1581 = _1263;
        _1582 = _1263;
        _1583 = 0.0;
        _1584 = 0.0;
        _1585 = 0.0;
    }
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1275)) + _1275;
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1276)) + _1276;
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1277)) + _1277;
    float _1618 = fma(_1597, cbSceneParam._m0[89u].z, fma(_1596, cbSceneParam._m0[89u].y, _1595 * cbSceneParam._m0[89u].x));
    float _1621 = fma(_1597, cbSceneParam._m0[90u].z, fma(_1596, cbSceneParam._m0[90u].y, _1595 * cbSceneParam._m0[90u].x));
    float _1624 = fma(_1597, cbSceneParam._m0[91u].z, fma(_1596, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1595));
    float _1639 = _900 * 0.5;
    float _1640 = _901 * 0.5;
    float _1641 = _902 * 0.5;
    float _1642 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1645 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1648 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1682;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1655 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1262, _1266, _1269, _1272));
        float _1659 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1264, _1267, _1270, _1273));
        float _1663 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1265, _1268, _1271, _1274));
        float _1670 = dot(vec4(cbModelParam._m0[39u]), vec4(_1639, _1640, _1641, 1.0));
        _1682 = dot(vec3(isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1670) ? 0.0 : (isnan(0.0) ? _1670 : max(0.0, _1670))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1682 = 1.0;
    }
    float _1693;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1684 = dot(vec4(cbModelParam._m0[40u]), vec4(_1639, _1640, _1641, 1.0));
        _1693 = dot(vec3(isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1693 = 1.0;
    }
    float _1697 = (_1693 * cbModelParam._m0[1u].x) + (_1682 * (1.0 - cbModelParam._m0[1u].x));
    float _1707 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _745);
    float _1708 = isnan(_1707) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1707 : min(cbModelParam._m0[25u].z, _1707));
    float _1788;
    float _1790;
    float _1792;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1755 = fma(_961, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953)) + cbModelParam._m0[13u].w;
        float _1759 = fma(_961, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953)) + cbModelParam._m0[14u].w;
        float _1763 = fma(_961, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953)) + cbModelParam._m0[15u].w;
        float _1766 = fma(_902, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _900));
        float _1769 = fma(_902, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _900));
        float _1772 = fma(_902, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _900));
        float _1800;
        if (_1766 > 0.0)
        {
            _1800 = abs((1.0 - _1755) / _1766);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1755 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1800 = frontier_phi_14_12_ladder;
        }
        float _2000;
        if (_1769 > 0.0)
        {
            _2000 = abs((1.0 - _1759) / _1769);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1759 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2000 = frontier_phi_23_19_ladder;
        }
        float _2243;
        if (_1772 > 0.0)
        {
            _2243 = abs((1.0 - _1763) / _1772);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1763 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2243 = frontier_phi_35_30_ladder;
        }
        float _2245 = isnan(_2000) ? _1800 : (isnan(_1800) ? _2000 : min(_1800, _2000));
        float _2246 = isnan(_2243) ? _2245 : (isnan(_2245) ? _2243 : min(_2245, _2243));
        float _2250 = (_2246 * _1766) + _1755;
        float _2251 = (_2246 * _1769) + _1759;
        float _2252 = (_2246 * _1772) + _1763;
        float _2253 = _2246 * 9.9999997473787516355514526367188e-05;
        float _2255 = (-1.0) - _2253;
        float _2257 = _2253 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2252 > _2257) || ((_2252 < _2255) || ((_2251 > _2257) || ((_2251 < _2255) || ((_2250 < _2255) || (_2250 > _2257))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2376 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2252, cbModelParam._m0[9u].z, fma(_2251, cbModelParam._m0[9u].y, _2250 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2252, cbModelParam._m0[10u].z, fma(_2251, cbModelParam._m0[10u].y, _2250 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2252, cbModelParam._m0[11u].z, fma(_2251, cbModelParam._m0[11u].y, _2250 * cbModelParam._m0[11u].x))), _1708);
            frontier_phi_13_35_ladder = _2376.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2376.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2376.x * cbModelParam._m0[1u].y;
        }
        _1788 = frontier_phi_13_35_ladder_2;
        _1790 = frontier_phi_13_35_ladder_1;
        _1792 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1776 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_900, _901, _902), _1708);
        _1788 = _1776.x * cbModelParam._m0[1u].y;
        _1790 = _1776.y * cbModelParam._m0[1u].y;
        _1792 = _1776.z * cbModelParam._m0[1u].y;
    }
    float _1796 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _745);
    float _1797 = isnan(_1796) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1796 : min(cbModelParam._m0[25u].w, _1796));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1850 = fma(_961, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953)) + cbModelParam._m0[21u].w;
        float _1854 = fma(_961, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953)) + cbModelParam._m0[22u].w;
        float _1858 = fma(_961, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953)) + cbModelParam._m0[23u].w;
        float _1861 = fma(_902, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _900));
        float _1864 = fma(_902, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _900));
        float _1867 = fma(_902, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _900));
        float _2005;
        if (_1861 > 0.0)
        {
            _2005 = abs((1.0 - _1850) / _1861);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1850 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2005 = frontier_phi_25_21_ladder;
        }
        float _2270;
        if (_1864 > 0.0)
        {
            _2270 = abs((1.0 - _1854) / _1864);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1854 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2270 = frontier_phi_37_32_ladder;
        }
        float _2475;
        if (_1867 > 0.0)
        {
            _2475 = abs((1.0 - _1858) / _1867);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1858 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2475 = frontier_phi_46_43_ladder;
        }
        float _2477 = isnan(_2270) ? _2005 : (isnan(_2005) ? _2270 : min(_2005, _2270));
        float _2478 = isnan(_2475) ? _2477 : (isnan(_2477) ? _2475 : min(_2477, _2475));
        float _2482 = (_2478 * _1861) + _1850;
        float _2483 = (_2478 * _1864) + _1854;
        float _2484 = (_2478 * _1867) + _1858;
        float _2485 = _2478 * 9.9999997473787516355514526367188e-05;
        float _2486 = (-1.0) - _2485;
        float _2488 = _2485 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2484 > _2488) || ((_2484 < _2486) || ((_2483 > _2488) || ((_2483 < _2486) || ((_2482 < _2486) || (_2482 > _2488))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2683 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2484, cbModelParam._m0[17u].z, fma(_2483, cbModelParam._m0[17u].y, _2482 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2484, cbModelParam._m0[18u].z, fma(_2483, cbModelParam._m0[18u].y, _2482 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2484, cbModelParam._m0[19u].z, fma(_2483, cbModelParam._m0[19u].y, _2482 * cbModelParam._m0[19u].x))), _1797);
            frontier_phi_22_46_ladder = _2683.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2683.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2683.x * cbModelParam._m0[1u].z;
        }
        _1886 = frontier_phi_22_46_ladder_2;
        _1888 = frontier_phi_22_46_ladder_1;
        _1890 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1870 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_900, _901, _902), _1797);
        _1886 = _1870.x * cbModelParam._m0[1u].z;
        _1888 = _1870.y * cbModelParam._m0[1u].z;
        _1890 = _1870.z * cbModelParam._m0[1u].z;
    }
    float _1902 = ((((1.0 - _921) * ((_908 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_921 * _908)) * _892;
    float _1903 = _1902 * ((cbModelParam._m0[1u].w * (_1886 - _1788)) + _1788);
    float _1904 = _1902 * ((cbModelParam._m0[1u].w * (_1888 - _1790)) + _1790);
    float _1905 = _1902 * ((cbModelParam._m0[1u].w * (_1890 - _1792)) + _1792);
    float _1908 = fma(_1905, cbSceneParam._m0[89u].z, fma(_1904, cbSceneParam._m0[89u].y, _1903 * cbSceneParam._m0[89u].x));
    float _1911 = fma(_1905, cbSceneParam._m0[90u].z, fma(_1904, cbSceneParam._m0[90u].y, _1903 * cbSceneParam._m0[90u].x));
    float _1914 = fma(_1905, cbSceneParam._m0[91u].z, fma(_1904, cbSceneParam._m0[91u].y, _1903 * cbSceneParam._m0[91u].x));
    uvec4 _1924 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1926 = _1924.x * 14u;
    uint _1927 = _1926 + 13u;
    float _1934 = _892 + (-1.0);
    float _1939 = (cbLight._m0[_1927].x * _1934) + 1.0;
    float _1940 = (cbLight._m0[_1927].y * _1934) + 1.0;
    float _1941 = (cbLight._m0[_1927].z * _1934) + 1.0;
    float _1942 = (cbLight._m0[_1927].w * _1934) + 1.0;
    uint _1943 = _1926 + 5u;
    float _1949 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
    uint _1953 = _1926 + 4u;
    float _1959 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
    uint _1963 = _1926 | 1u;
    float _1974 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_742, _743, _744));
    float _1977 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_742, _743, _744));
    float _4131 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _4142 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1982 = (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * 0.3183098733425140380859375;
    float _1984 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * 0.3183098733425140380859375;
    float _1991 = ((cbLight._m0[_1943].x * _1949) * _1984) + ((cbLight._m0[_1953].x * _1959) * _1982);
    float _1992 = ((_1949 * cbLight._m0[_1943].y) * _1984) + ((_1959 * cbLight._m0[_1953].y) * _1982);
    float _1993 = ((_1949 * cbLight._m0[_1943].z) * _1984) + ((_1959 * cbLight._m0[_1953].z) * _1982);
    uvec4 _1997 = floatBitsToUint(cbLight._m0[_1926 + 12u]);
    bool _1999 = _1997.x == 0u;
    float _2010;
    float _2012;
    float _2014;
    if (_1999)
    {
        _2010 = _1991;
        _2012 = _1992;
        _2014 = _1993;
    }
    else
    {
        uint _2018 = _1926 + 6u;
        float _2034 = (dot(vec3(cbLight._m0[_1926 + 2u].xyz), vec3(_742, _743, _744)) * 0.5) + 0.5;
        float _2035 = _2034 * _2034;
        float _4153 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2036 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _2037 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2010 = (((cbLight._m0[_2018].x * 0.3183098733425140380859375) * _2036) * _2037) + _1991;
        _2012 = (((cbLight._m0[_2018].y * 0.3183098733425140380859375) * _2036) * _2037) + _1992;
        _2014 = (((cbLight._m0[_2018].z * 0.3183098733425140380859375) * _2036) * _2037) + _1993;
    }
    bool _2017 = _1997.y == 0u;
    float _2055;
    float _2057;
    float _2059;
    if (_2017)
    {
        _2055 = _2010;
        _2057 = _2012;
        _2059 = _2014;
    }
    else
    {
        uint _2214 = _1926 + 7u;
        float _2230 = (dot(vec3(cbLight._m0[_1926 + 3u].xyz), vec3(_742, _743, _744)) * 0.5) + 0.5;
        float _2231 = _2230 * _2230;
        float _4169 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2232 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2233 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2055 = (((cbLight._m0[_2214].x * 0.3183098733425140380859375) * _2232) * _2233) + _2010;
        _2057 = (((cbLight._m0[_2214].y * 0.3183098733425140380859375) * _2232) * _2233) + _2012;
        _2059 = (((cbLight._m0[_2214].z * 0.3183098733425140380859375) * _2232) * _2233) + _2014;
    }
    uint _2062 = _1926 + 8u;
    float _2075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _745) * 0.949999988079071044921875);
    float _2076 = _2075 * _2075;
    float _2077 = cbLight._m0[_1926].x + _821;
    float _2078 = cbLight._m0[_1926].y + _822;
    float _2079 = cbLight._m0[_1926].z + _823;
    float _2083 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
    float _2084 = _2083 * _2077;
    float _2085 = _2083 * _2078;
    float _2086 = _2083 * _2079;
    float _2087 = dot(vec3(_742, _743, _744), vec3(cbLight._m0[_1926].xyz));
    float _4185 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _4196 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _2091 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _2092 = dot(vec3(_742, _743, _744), vec3(_2084, _2085, _2086));
    float _4207 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _2096 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_2084, _2085, _2086));
    float _4218 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2100 = _2076 * _2076;
    float _2104 = ((_2095 * _2095) * (_2100 + (-1.0))) + 1.0;
    float _2115 = (exp2(log2(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2116 = 1.0 - _2076;
    float _2127 = (0.5 / (((_2091 * ((_2090 * _2116) + _2076)) + 9.9999999392252902907785028219223e-09) + (((_2091 * _2116) + _2076) * _2090))) * _2090;
    float _4229 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2129 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2100 / ((_2104 * _2104) * 3.141590118408203125));
    uint _2140 = _1926 + 9u;
    float _2151 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1963].w)) * _745) * 0.949999988079071044921875);
    float _2152 = _2151 * _2151;
    float _2153 = cbLight._m0[_1963].x + _821;
    float _2154 = cbLight._m0[_1963].y + _822;
    float _2155 = cbLight._m0[_1963].z + _823;
    float _2159 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
    float _2160 = _2159 * _2153;
    float _2161 = _2159 * _2154;
    float _2162 = _2159 * _2155;
    float _2163 = dot(vec3(_742, _743, _744), vec3(cbLight._m0[_1963].xyz));
    float _4240 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _2167 = dot(vec3(_742, _743, _744), vec3(_2160, _2161, _2162));
    float _4251 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _2171 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_2160, _2161, _2162));
    float _4262 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2175 = _2152 * _2152;
    float _2179 = ((_2170 * _2170) * (_2175 + (-1.0))) + 1.0;
    float _2188 = (exp2(log2(1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2189 = 1.0 - _2152;
    float _2199 = (0.5 / (((_2091 * ((_2166 * _2189) + _2152)) + 9.9999999392252902907785028219223e-09) + (((_2091 * _2189) + _2152) * _2166))) * _2166;
    float _4273 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2201 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2175 / ((_2179 * _2179) * 3.141590118408203125));
    float _2211 = (((_2188 * cbLight._m0[_2140].x) * _2201) * _1949) + (((_2115 * cbLight._m0[_2062].x) * _2129) * _1959);
    float _2212 = (((_2188 * cbLight._m0[_2140].y) * _2201) * _1949) + (((_2115 * cbLight._m0[_2062].y) * _2129) * _1959);
    float _2213 = (((_2188 * cbLight._m0[_2140].z) * _2201) * _1949) + (((_2115 * cbLight._m0[_2062].z) * _2129) * _1959);
    float _2275;
    float _2277;
    float _2279;
    if (_1999)
    {
        _2275 = _2211;
        _2277 = _2212;
        _2279 = _2213;
    }
    else
    {
        uint _2281 = _1926 + 2u;
        uint _2285 = _1926 + 10u;
        float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _745) * 0.949999988079071044921875);
        float _2300 = _2299 * _2299;
        float _2301 = cbLight._m0[_2281].x + _821;
        float _2302 = cbLight._m0[_2281].y + _822;
        float _2303 = cbLight._m0[_2281].z + _823;
        float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
        float _2308 = _2307 * _2301;
        float _2309 = _2307 * _2302;
        float _2310 = _2307 * _2303;
        float _2311 = dot(vec3(_742, _743, _744), vec3(cbLight._m0[_2281].xyz));
        float _4284 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2315 = dot(vec3(_742, _743, _744), vec3(_2308, _2309, _2310));
        float _4295 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2319 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2308, _2309, _2310));
        float _4306 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2323 = _2300 * _2300;
        float _2327 = ((_2318 * _2318) * (_2323 + (-1.0))) + 1.0;
        float _2336 = (exp2(log2(1.0 - (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2337 = 1.0 - _2300;
        float _2347 = (0.5 / (((_2091 * ((_2314 * _2337) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_2091 * _2337) + _2300) * _2314))) * _2314;
        float _4317 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2349 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2323 / ((_2327 * _2327) * 3.141590118408203125));
        float _2350 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
        _2275 = (((_2336 * cbLight._m0[_2285].x) * _2349) * _2350) + _2211;
        _2277 = (((_2336 * cbLight._m0[_2285].y) * _2349) * _2350) + _2212;
        _2279 = (((_2336 * cbLight._m0[_2285].z) * _2349) * _2350) + _2213;
    }
    float _2385;
    float _2387;
    float _2389;
    if (_2017)
    {
        _2385 = _2275;
        _2387 = _2277;
        _2389 = _2279;
    }
    else
    {
        uint _2396 = _1926 + 3u;
        uint _2400 = _1926 + 11u;
        float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2396].w)) * _745) * 0.949999988079071044921875);
        float _2415 = _2414 * _2414;
        float _2416 = cbLight._m0[_2396].x + _821;
        float _2417 = cbLight._m0[_2396].y + _822;
        float _2418 = cbLight._m0[_2396].z + _823;
        float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
        float _2423 = _2422 * _2416;
        float _2424 = _2422 * _2417;
        float _2425 = _2422 * _2418;
        float _2426 = dot(vec3(_742, _743, _744), vec3(cbLight._m0[_2396].xyz));
        float _4333 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _2430 = dot(vec3(_742, _743, _744), vec3(_2423, _2424, _2425));
        float _4344 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _2434 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_2423, _2424, _2425));
        float _4355 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2438 = _2415 * _2415;
        float _2442 = ((_2433 * _2433) * (_2438 + (-1.0))) + 1.0;
        float _2451 = (exp2(log2(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2452 = 1.0 - _2415;
        float _2462 = (0.5 / (((_2091 * ((_2429 * _2452) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2091 * _2452) + _2415) * _2429))) * _2429;
        float _4366 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2464 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2438 / ((_2442 * _2442) * 3.141590118408203125));
        float _2465 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
        _2385 = (((_2451 * cbLight._m0[_2400].x) * _2464) * _2465) + _2275;
        _2387 = (((_2451 * cbLight._m0[_2400].y) * _2464) * _2465) + _2277;
        _2389 = (((_2451 * cbLight._m0[_2400].z) * _2464) * _2465) + _2279;
    }
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    if (_1924.y == 0u)
    {
        float _2540 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2541 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2540;
        float _2542 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2540;
        float _2543 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2540;
        uvec4 _2555 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2556 = _2555.x;
        uint _2567 = uint((float(_2555.y) * floor(float(uint(cbSceneParam._m0[85u].y * _830) / _2556))) + floor(float(uint(cbSceneParam._m0[85u].x * _829) / _2556)));
        float _2577 = (log2(_2543 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2578 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        uint _2581 = uint(isnan(14.0) ? _2578 : (isnan(_2578) ? 14.0 : min(_2578, 14.0)));
        uvec4 _2586 = texelFetch(g_lightClusterGridBuffer, int(((_2581 << 2u) + (_2567 << 6u)) >> 2u));
        uint _2587 = _2586.x;
        uint _2588 = _2555.z;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        if (((((1u << ((_2588 >> 4u) & 15u)) + 4294967295u) & _2587) == 0u) || ((_2588 & 240u) == 0u))
        {
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
        }
        else
        {
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            uint _2838 = 0u;
            uint _2847;
            bool _2848;
            for (;;)
            {
                _2847 = texelFetch(g_lightClassification, int((((_2581 << 5u) + (_2567 << 9u)) + (_2838 << 2u)) >> 2u)).x;
                _2848 = _2847 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2848)
                {
                    frontier_phi_61_pred = _2832;
                    frontier_phi_61_pred_1 = _2837;
                    frontier_phi_61_pred_2 = _2836;
                    frontier_phi_61_pred_3 = _2835;
                    frontier_phi_61_pred_4 = _2834;
                    frontier_phi_61_pred_5 = _2833;
                }
                else
                {
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    uint _2962;
                    _2956 = _2832;
                    _2957 = _2833;
                    _2958 = _2834;
                    _2959 = _2835;
                    _2960 = _2836;
                    _2961 = _2837;
                    _2962 = _2847;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    for (;;)
                    {
                        uint _2966 = uint(findLSB(_2962)) + (_2838 << 5u);
                        uint _2963 = (_2962 + 4294967295u) & _2962;
                        uint _2968 = _2966 * 48u;
                        vec4 _2982 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2968)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 3u)).x));
                        uint _2988 = (_2966 * 48u) + 4u;
                        vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2988)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 3u)).x));
                        uint _3007 = (_2966 * 48u) + 8u;
                        vec3 _3018 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x));
                        float _3022 = _2982.x - _2541;
                        float _3023 = _2982.y - _2542;
                        float _3024 = _2982.z - _2543;
                        float _3025 = dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024));
                        float _3028 = inversesqrt(_3025);
                        float _3029 = _3028 * _3022;
                        float _3030 = _3028 * _3023;
                        float _3031 = _3028 * _3024;
                        float _3032 = dot(vec3(_848, _851, _854), vec3(_3029, _3030, _3031));
                        float _3037 = 1.0 - (_3025 * _2982.w);
                        float _4392 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3038 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                        float _3039 = sqrt(_3025) * _3001.w;
                        float _3042 = 1.39999997615814208984375 / (_3039 + 1.39999997615814208984375);
                        float _3043 = _3042 * _3042;
                        float _3046 = ((1.0 - _3043) * _3032) + _3043;
                        float _3049 = _3039 * _3039;
                        float _3053 = ((isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0))) * _3038) / ((_3049 * 0.699999988079071044921875) + 1.0);
                        float _3057 = (-0.0) - _2541;
                        float _3058 = (-0.0) - _2542;
                        float _3059 = (-0.0) - _2543;
                        float _3063 = inversesqrt(dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059)));
                        float _3064 = _3063 * _3057;
                        float _3065 = _3063 * _3058;
                        float _3066 = _3063 * _3059;
                        float _3074 = exp2(log2(1.0 / ((_3049 * 3.5) + 5.0)) * 0.25);
                        float _3075 = 1.0 - _908;
                        float _3082 = sqrt(1.0 - ((1.0 - (_3075 * _3075)) * (1.0 - (_3074 * _3074))));
                        float _3083 = _3082 * _3082;
                        float _3084 = _3083 * _3083;
                        float _3085 = _3064 + _3029;
                        float _3086 = _3065 + _3030;
                        float _3087 = _3066 + _3031;
                        float _3091 = inversesqrt(dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087)));
                        float _3095 = dot(vec3(_848, _851, _854), vec3(_3064, _3065, _3066));
                        float _4408 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3098 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                        float _3099 = dot(vec3(_848, _851, _854), vec3(_3091 * _3085, _3091 * _3086, _3091 * _3087));
                        float _4419 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3102 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                        float _3106 = ((_3102 * _3102) * (_3084 + (-1.0))) + 1.0;
                        float _3107 = _3042 * _3083;
                        float _3108 = _3107 * _3107;
                        float _3111 = ((1.0 - _3108) * _3032) + _3108;
                        float _4430 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3112 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                        float _3113 = 1.0 - _3083;
                        float _3123 = (0.5 / (((_3112 * ((_3098 * _3113) + _3083)) + 9.9999999392252902907785028219223e-09) + (((_3112 * _3113) + _3083) * _3098))) * _3112;
                        float _4441 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3134 = (((_3084 * 3.1415927410125732421875) * (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) / ((_3106 * _3106) * ((_3049 * 2.1991131305694580078125) + 3.141590118408203125))) * _3038;
                        _2891 = (_3053 * _3001.x) + _2959;
                        _2892 = (_3053 * _3001.y) + _2960;
                        _2893 = (_3053 * _3001.z) + _2961;
                        _2888 = (_3134 * _3018.x) + _2956;
                        _2889 = (_3134 * _3018.y) + _2957;
                        _2890 = (_3134 * _3018.z) + _2958;
                        if (_2963 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2956 = _2888;
                            _2957 = _2889;
                            _2958 = _2890;
                            _2959 = _2891;
                            _2960 = _2892;
                            _2961 = _2893;
                            _2962 = _2963;
                        }
                    }
                    frontier_phi_61_pred = _2888;
                    frontier_phi_61_pred_1 = _2893;
                    frontier_phi_61_pred_2 = _2892;
                    frontier_phi_61_pred_3 = _2891;
                    frontier_phi_61_pred_4 = _2890;
                    frontier_phi_61_pred_5 = _2889;
                }
                _2689 = frontier_phi_61_pred;
                _2699 = frontier_phi_61_pred_1;
                _2697 = frontier_phi_61_pred_2;
                _2695 = frontier_phi_61_pred_3;
                _2693 = frontier_phi_61_pred_4;
                _2691 = frontier_phi_61_pred_5;
                uint _2839 = _2838 + 1u;
                if (_2839 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2832 = _2689;
                    _2833 = _2691;
                    _2834 = _2693;
                    _2835 = _2695;
                    _2836 = _2697;
                    _2837 = _2699;
                    _2838 = _2839;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
        }
        uvec4 _2702 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2703 = _2702.z;
        uint _2705 = (_2703 >> 8u) & 15u;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        if (((4294967295u << _2705) & _2587) == 0u)
        {
            _2800 = _2688;
            _2802 = _2690;
            _2804 = _2692;
            _2806 = _2694;
            _2808 = _2696;
            _2810 = _2698;
        }
        else
        {
            float _2825 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
            float _2826 = _2825 * _2541;
            float _2827 = _2825 * _2542;
            float _2828 = _2825 * _2543;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2705 < ((_2703 >> 12u) & 15u))
            {
                float _2801;
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2939 = _2688;
                float _2940 = _2690;
                float _2941 = _2692;
                float _2942 = _2694;
                float _2943 = _2696;
                float _2944 = _2698;
                uint _2945 = _2705;
                uint _2954;
                bool _2955;
                for (;;)
                {
                    _2954 = texelFetch(g_lightClassification, int((((_2581 << 5u) + (_2567 << 9u)) + (_2945 << 2u)) >> 2u)).x;
                    _2955 = _2954 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2955)
                    {
                        frontier_phi_67_pred = _2942;
                        frontier_phi_67_pred_1 = _2943;
                        frontier_phi_67_pred_2 = _2944;
                        frontier_phi_67_pred_3 = _2941;
                        frontier_phi_67_pred_4 = _2940;
                        frontier_phi_67_pred_5 = _2939;
                    }
                    else
                    {
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3152 = _2939;
                        float _3153 = _2940;
                        float _3154 = _2941;
                        float _3155 = _2942;
                        float _3156 = _2943;
                        float _3157 = _2944;
                        uint _3158 = _2954;
                        uint _3159;
                        vec4 _3184;
                        float _3185;
                        vec4 _3200;
                        vec3 _3212;
                        vec4 _3227;
                        vec4 _3243;
                        float _3289;
                        bool _3290;
                        for (;;)
                        {
                            uint _3169 = ((_2945 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3158));
                            _3159 = (_3158 + 4294967295u) & _3158;
                            uint _3171 = _3169 * 40u;
                            _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            _3185 = _3184.w;
                            uint _3187 = (_3169 * 40u) + 4u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            uint _3202 = (_3169 * 40u) + 8u;
                            _3212 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x));
                            uint _3214 = (_3169 * 40u) + 16u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3230 = (_3169 * 40u) + 20u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3245 = (_3169 * 40u) + 24u;
                            vec4 _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3264 = (_3169 * 40u) + 28u;
                            vec4 _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            _3289 = fma(_2543, _3277.z, fma(_2542, _3277.y, _3277.x * _2541)) + _3277.w;
                            _3290 = !((fma(_2543, _3258.z, fma(_2542, _3258.y, _3258.x * _2541)) + _3258.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3290)
                            {
                                float _3317 = _3184.x - _2541;
                                float _3318 = _3184.y - _2542;
                                float _3319 = _3184.z - _2543;
                                float _3320 = dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319));
                                float _3323 = inversesqrt(_3320);
                                float _3324 = _3323 * _3317;
                                float _3325 = _3323 * _3318;
                                float _3326 = _3323 * _3319;
                                float _3330 = 1.0 - (_3320 / (_3185 * _3185));
                                float _4452 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3331 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3335 = sqrt(_3320) * _3200.w;
                                float _3337 = 1.39999997615814208984375 / (_3335 + 1.39999997615814208984375);
                                float _3338 = _3337 * _3337;
                                float _3341 = ((1.0 - _3338) * dot(vec3(_3324, _3325, _3326), vec3(_848, _851, _854))) + _3338;
                                float _3344 = _3335 * _3335;
                                float _3348 = (fma(_2543, _3227.z, fma(_2542, _3227.y, _3227.x * _2541)) + _3227.w) / _3289;
                                float _3349 = (fma(_2543, _3243.z, fma(_2542, _3243.y, _3243.x * _2541)) + _3243.w) / _3289;
                                float _3353 = 1.0 - dot(vec2(_3348, _3349), vec2(_3348, _3349));
                                float _4468 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3354 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                                float _3355 = _3354 * (((isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0))) * _3331) / ((_3344 * 0.699999988079071044921875) + 1.0));
                                float _3367 = exp2(log2(1.0 / ((_3344 * 3.5) + 5.0)) * 0.25);
                                float _3368 = 1.0 - _908;
                                float _3375 = sqrt(1.0 - ((1.0 - (_3368 * _3368)) * (1.0 - (_3367 * _3367))));
                                float _3376 = _3375 * _3375;
                                float _3377 = _3376 * _3376;
                                float _3378 = _3324 - _2826;
                                float _3379 = _3325 - _2827;
                                float _3380 = _3326 - _2828;
                                float _3384 = inversesqrt(dot(vec3(_3378, _3379, _3380), vec3(_3378, _3379, _3380)));
                                float _3388 = dot(vec3(_848, _851, _854), vec3((-0.0) - _2826, (-0.0) - _2827, (-0.0) - _2828));
                                float _4479 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3391 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                                float _3392 = dot(vec3(_848, _851, _854), vec3(_3384 * _3378, _3384 * _3379, _3384 * _3380));
                                float _4490 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3395 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                                float _3399 = ((_3395 * _3395) * (_3377 + (-1.0))) + 1.0;
                                float _3400 = _3337 * _3376;
                                float _3401 = _3400 * _3400;
                                float _3407 = ((1.0 - _3401) * dot(vec3(_848, _851, _854), vec3(_3324, _3325, _3326))) + _3401;
                                float _4501 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3408 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                                float _3409 = 1.0 - _3376;
                                float _3419 = (0.5 / (((_3408 * ((_3391 * _3409) + _3376)) + 9.9999999392252902907785028219223e-09) + (((_3408 * _3409) + _3376) * _3391))) * _3408;
                                float _4512 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3429 = (_3354 * _3331) * (((_3377 * 3.1415927410125732421875) * (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) / ((_3399 * _3399) * ((_3344 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3429 * _3212.x;
                                frontier_phi_73_pred_1 = _3429 * _3212.y;
                                frontier_phi_73_pred_2 = _3355 * _3200.z;
                                frontier_phi_73_pred_3 = _3355 * _3200.y;
                                frontier_phi_73_pred_4 = _3355 * _3200.x;
                                frontier_phi_73_pred_5 = _3429 * _3212.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3433 = frontier_phi_73_pred;
                            _3434 = frontier_phi_73_pred_1;
                            _3438 = frontier_phi_73_pred_2;
                            _3437 = frontier_phi_73_pred_3;
                            _3436 = frontier_phi_73_pred_4;
                            _3435 = frontier_phi_73_pred_5;
                            _3142 = _3436 + _3155;
                            _3143 = _3437 + _3156;
                            _3144 = _3438 + _3157;
                            _3139 = _3433 + _3152;
                            _3140 = _3434 + _3153;
                            _3141 = _3435 + _3154;
                            if (_3159 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3144;
                                _3158 = _3159;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3142;
                        frontier_phi_67_pred_1 = _3143;
                        frontier_phi_67_pred_2 = _3144;
                        frontier_phi_67_pred_3 = _3141;
                        frontier_phi_67_pred_4 = _3140;
                        frontier_phi_67_pred_5 = _3139;
                    }
                    _2807 = frontier_phi_67_pred;
                    _2809 = frontier_phi_67_pred_1;
                    _2811 = frontier_phi_67_pred_2;
                    _2805 = frontier_phi_67_pred_3;
                    _2803 = frontier_phi_67_pred_4;
                    _2801 = frontier_phi_67_pred_5;
                    uint _2946 = _2945 + 1u;
                    if (_2946 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2939 = _2801;
                        _2940 = _2803;
                        _2941 = _2805;
                        _2942 = _2807;
                        _2943 = _2809;
                        _2944 = _2811;
                        _2945 = _2946;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2809;
                frontier_phi_55_56_ladder_1 = _2811;
                frontier_phi_55_56_ladder_2 = _2807;
                frontier_phi_55_56_ladder_3 = _2805;
                frontier_phi_55_56_ladder_4 = _2803;
                frontier_phi_55_56_ladder_5 = _2801;
            }
            else
            {
                frontier_phi_55_56_ladder = _2696;
                frontier_phi_55_56_ladder_1 = _2698;
                frontier_phi_55_56_ladder_2 = _2694;
                frontier_phi_55_56_ladder_3 = _2692;
                frontier_phi_55_56_ladder_4 = _2690;
                frontier_phi_55_56_ladder_5 = _2688;
            }
            _2800 = frontier_phi_55_56_ladder_5;
            _2802 = frontier_phi_55_56_ladder_4;
            _2804 = frontier_phi_55_56_ladder_3;
            _2806 = frontier_phi_55_56_ladder_2;
            _2808 = frontier_phi_55_56_ladder;
            _2810 = frontier_phi_55_56_ladder_1;
        }
        float _2815 = isnan(1.0) ? _892 : (isnan(_892) ? 1.0 : min(_892, 1.0));
        _2600 = (_2815 * _2806) + _2055;
        _2602 = (_2815 * _2808) + _2057;
        _2604 = (_2815 * _2810) + _2059;
        _2606 = ((_2800 * 0.039999999105930328369140625) * _2815) + _2385;
        _2608 = ((_2802 * 0.039999999105930328369140625) * _2815) + _2387;
        _2610 = ((_2804 * 0.039999999105930328369140625) * _2815) + _2389;
    }
    else
    {
        _2600 = _2055;
        _2602 = _2057;
        _2604 = _2059;
        _2606 = _2385;
        _2608 = _2387;
        _2610 = _2389;
    }
    float _4528 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4539 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4550 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    uint _2630 = _245 + 6u;
    float _2638 = _829 / cbSceneParam._m0[86u].x;
    float _2639 = _830 / cbSceneParam._m0[86u].y;
    vec4 _2653 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2638, _2639, (log2((isnan(cbSceneParam._m0[77u].w) ? _763 : (isnan(_763) ? cbSceneParam._m0[77u].w : min(_763, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2655 = _2653.x;
    float _2656 = _2653.y;
    float _2657 = _2653.z;
    float _2658 = _2653.w;
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    if (_763 > cbSceneParam._m0[78u].w)
    {
        float _2713 = isnan(_763) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _763 : min(cbSceneParam._m0[80u].w, _763));
        float _2714 = _2713 / _763;
        float _2725 = _2714 * _814;
        float _2726 = _815 * _2714;
        float _2727 = (-0.0) - _2726;
        float _2728 = _2714 * _816;
        float _2730 = (cbSceneParam._m0[77u].w * _2727) / _2713;
        float _2731 = _2730 + cbSceneParam._m0[79u].w;
        float _2732 = cbSceneParam._m0[79u].w - _2726;
        float _2738 = sqrt(((_2725 * _2725) + (_2726 * _2726)) + (_2728 * _2728));
        float _2741 = (1.0 - (cbSceneParam._m0[77u].w / _2713)) * _2738;
        float _2746 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2748 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2901;
        if (abs((_2727 - _2730) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2901 = ((((_2731 > 0.0) ? exp2(_2746 * _2731) : (2.0 - exp2(_2748 * _2731))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2741;
        }
        else
        {
            float _2861 = 1.0 / cbSceneParam._m0[80u].x;
            float _2862 = isnan(_2732) ? _2731 : (isnan(_2731) ? _2732 : max(_2731, _2732));
            float _2863 = isnan(_2732) ? _2731 : (isnan(_2731) ? _2732 : min(_2731, _2732));
            float _2872 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : min(_2862, 0.0));
            float _2873 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : min(_2863, 0.0));
            _2901 = ((abs(_2738 / _2727) * cbSceneParam._m0[80u].y) * ((((_2872 - _2873) * 2.0) - ((exp2(_2746 * (isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0)))) - exp2(_2746 * (isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0))))) * _2861)) - ((exp2(_2748 * _2872) - exp2(_2748 * _2873)) * _2861))) + (_2741 * cbSceneParam._m0[80u].z);
        }
        vec4 _2903 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2638, _2639, 1.0), 0.0);
        float _2912 = exp2((_2901 * (-1.44269502162933349609375)) * (1.0 - _2903.w));
        float _2913 = log2(_2912);
        float _2929 = log2(_2658);
        _2750 = (exp2(_2929 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].x)) * _2903.x) / cbSceneParam._m0[78u].x)) + _2655;
        _2752 = (exp2(_2929 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].y)) * _2903.y) / cbSceneParam._m0[78u].y)) + _2656;
        _2754 = (exp2(_2929 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].z)) * _2903.z) / cbSceneParam._m0[78u].z)) + _2657;
        _2756 = _2912 * _2658;
    }
    else
    {
        _2750 = _2655;
        _2752 = _2656;
        _2754 = _2657;
        _2756 = _2658;
    }
    float _2768 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2769 = _2768 == 3.0;
    float _2770 = log2(_2756);
    float _2777 = exp2(_2770 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2600 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _892))) + ((_2606 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1697)) * cbPerFrame._m0[3u].x));
    float _2778 = exp2(_2770 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2602 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _892))) + ((_2608 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1697)) * cbPerFrame._m0[3u].x));
    float _2779 = exp2(_2770 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2604 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _892))) + ((_2610 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1697)) * cbPerFrame._m0[3u].x));
    float _2788 = (_2768 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2788 * (_2769 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2750)));
    SV_Target.y = _2788 * (_2769 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2752)));
    SV_Target.z = _2788 * (_2769 ? _2779 : (_2779 + (cbSceneParam._m0[72u].w * _2754)));
    SV_Target.w = cbInstanceData._m0[_2630].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2630].w;
}


