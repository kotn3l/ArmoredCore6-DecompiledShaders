#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1145;
float _3532;
float _3533;
float _3534;
float _3535;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _284.x * cbMtdParam._m0[9u].x;
    float _291 = _284.y * cbMtdParam._m0[9u].y;
    float _292 = _284.z * cbMtdParam._m0[9u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _340 = _336.z;
    float _344 = (_336.x * 2.0) + (-1.0);
    float _345 = (_336.y * 2.0) + (-1.0);
    float _346 = dot(vec2(_344, _345), vec2(_344, _345));
    float _3544 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _352 = sqrt(1.0 - (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))));
    float _357 = _344 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_310.x * 2.0) + (-1.0)));
    float _358 = _345 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_310.y * 2.0) + (-1.0)));
    vec4 _375 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _377 = _375.x;
    float _378 = 1.0 - _377;
    float _387 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _390 = ((isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : min(_387, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _399 = (_390 - ((((((_377 - _378) * cbMtdParam._m0[24u].z) + _378) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _390))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3565 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _407 = (_400 * (cbMtdParam._m0[17u].x - _290)) + _290;
    float _408 = (_400 * (cbMtdParam._m0[17u].y - _291)) + _291;
    float _409 = (_400 * (cbMtdParam._m0[17u].z - _292)) + _292;
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _424 = _422.x;
    float _425 = 1.0 - _424;
    float _454 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_424 - _425) * cbMtdParam._m0[24u].w) + _425) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3576 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _463 = ((((cbMtdParam._m0[10u].x - _407) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _455) + _407;
    float _464 = ((((cbMtdParam._m0[10u].y - _408) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _455) + _408;
    float _465 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _409)) * _455) + _409;
    float _470 = (((_310.z - _340) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _340;
    vec4 _484 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _491 = (_484.x * 2.0) + (-1.0);
    float _492 = (_484.y * 2.0) + (-1.0);
    float _493 = dot(vec2(_491, _492), vec2(_491, _492));
    float _3587 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _501 = (_400 * (_484.z - _470)) + _470;
    float _504 = ((cbMtdParam._m0[23u].y - _501) * _455) + _501;
    vec4 _526 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _532 = (_526.x * 2.0) + (-1.0);
    float _533 = (_526.y * 2.0) + (-1.0);
    float _534 = dot(vec2(_532, _533), vec2(_532, _533));
    float _3598 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _551 = (((_491 - _357) + (cbMtdParam._m0[21u].x * _357)) * _400) + _357;
    float _552 = (((_492 - _358) + (cbMtdParam._m0[21u].x * _358)) * _400) + _358;
    float _553 = (_400 * (sqrt(1.0 - (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) - _352)) + _352;
    float _564 = (((_532 - _551) + (_551 * cbMtdParam._m0[22u].z)) * _455) + _551;
    float _565 = (((_533 - _552) + (_552 * cbMtdParam._m0[22u].z)) * _455) + _552;
    float _566 = ((sqrt(1.0 - (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) - _553) * _455) + _553;
    float _568 = cbMtdParam._m0[22u].x + _336.w;
    float _571 = fma(_566, _232 * NORMAL.x, fma(_565, _239 * TANGENT.x, (_225 * _217) * _564));
    float _574 = fma(_566, _232 * NORMAL.y, fma(_565, _239 * TANGENT.y, (_225 * _218) * _564));
    float _577 = fma(_566, _232 * NORMAL.z, fma(_565, _239 * TANGENT.z, (_225 * _219) * _564));
    float _581 = inversesqrt(dot(vec3(_571, _574, _577), vec3(_571, _574, _577)));
    float _582 = _581 * _571;
    float _583 = _581 * _574;
    float _584 = _581 * _577;
    float _3609 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _585 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _3620 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3631 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3642 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3653 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _603 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _653 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _643);
    float _654 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _643);
    float _655 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _643);
    float _659 = inversesqrt(dot(vec3(_653, _654, _655), vec3(_653, _654, _655)));
    float _660 = _653 * _659;
    float _661 = _654 * _659;
    float _662 = _655 * _659;
    vec4 _667 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _669 = _667.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _826 = sqrt(((_653 * _653) + (_654 * _654)) + (_655 * _655));
        float _832 = (cbMatDynParam._m0[5u].x * _826) + cbMatDynParam._m0[5u].y;
        float _3664 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _837 = (cbMatDynParam._m0[5u].z * _826) + cbMatDynParam._m0[5u].w;
        float _3675 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) - _833)) + _833) < ((_669 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _681 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _682 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _702 = fma(_584, cbSceneParam._m0[5u].z, fma(_583, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _582));
    float _705 = fma(_584, cbSceneParam._m0[6u].z, fma(_583, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _582));
    float _708 = fma(_584, cbSceneParam._m0[7u].z, fma(_583, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _582));
    uint _721 = _245 + 9u;
    uint _722 = _721 + uint(cbMatDynParam._m0[0u].w);
    float _728 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * cbInstanceData._m0[_722].x;
    float _729 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) * cbInstanceData._m0[_722].y;
    float _730 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) * cbInstanceData._m0[_722].z;
    float _3686 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _3697 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _3708 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    vec4 _742 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _681, cbSceneParam._m0[86u].y * _682));
    float _746 = ((isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * TEXCOORD_5.w) * _742.x;
    float _747 = dot(vec3(_582, _583, _584), vec3(_660, _661, _662));
    float _750 = _747 * 2.0;
    float _754 = (_750 * _582) - _660;
    float _755 = (_750 * _583) - _661;
    float _756 = (_750 * _584) - _662;
    float _760 = abs(dot(vec3(_660, _661, _662), vec3(_582, _583, _584)));
    float _3719 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _762 = sqrt(_585);
    float _775 = exp2((_762 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_762 * 3.0));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1144;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _869 = fma(_815, cbModelParam._m0[26u].z, fma(_811, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _807));
        float _873 = fma(_815, cbModelParam._m0[27u].z, fma(_811, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _807));
        float _877 = fma(_815, cbModelParam._m0[28u].z, fma(_811, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _807));
        float _902 = _807 + _582;
        float _903 = _811 + _583;
        float _904 = _815 + _584;
        float _914 = fma(_904, cbModelParam._m0[26u].z, fma(_903, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _902)) - _869;
        float _915 = fma(_904, cbModelParam._m0[27u].z, fma(_903, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _902)) - _873;
        float _916 = fma(_904, cbModelParam._m0[28u].z, fma(_903, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _902)) - _877;
        float _920 = inversesqrt(dot(vec3(_914, _915, _916), vec3(_914, _915, _916)));
        float _933 = ((_920 * _914) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_869 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _934 = ((_920 * _915) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_873 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _935 = ((_920 * _916) / cbModelParam._m0[34u].z) + ((((((_877 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        float _972 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_938.x + (-0.5));
        float _974 = _972 * (_938.y + (-0.5));
        float _975 = _972 * (_938.z + (-0.5));
        float _982 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_945.x + (-0.5));
        float _984 = _982 * (_945.y + (-0.5));
        float _985 = _982 * (_945.z + (-0.5));
        float _992 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_952.x + (-0.5));
        float _994 = _992 * (_952.y + (-0.5));
        float _995 = _992 * (_952.z + (-0.5));
        float _1002 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_959.x + (-0.5));
        float _1004 = _1002 * (_959.y + (-0.5));
        float _1005 = _1002 * (_959.z + (-0.5));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = _973 * 0.5;
        float _1010 = _983 * 0.5;
        float _1011 = _993 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1026 = (dot(vec3(_582, _583, _584), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1036 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3767 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1038 + 1.0))) + _1043) * _1006;
        float _1053 = _974 * 0.5;
        float _1054 = _984 * 0.5;
        float _1055 = _994 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1069 = (dot(vec3(_582, _583, _584), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1078 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _3800 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1080 + 1.0))) + _1085) * _1007;
        float _1095 = _975 * 0.5;
        float _1096 = _985 * 0.5;
        float _1097 = _995 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_582, _583, _584), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3811 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3822 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3833 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1122 + 1.0))) + _1127) * _1008;
        _1144 = _975;
        _1146 = _974;
        _1147 = _973;
        _1148 = _985;
        _1149 = _984;
        _1150 = _983;
        _1151 = _995;
        _1152 = _994;
        _1153 = _993;
        _1154 = _1008;
        _1155 = _1007;
        _1156 = _1006;
        _1157 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
        _1158 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
        _1159 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
    }
    else
    {
        _1144 = _1145;
        _1146 = _1145;
        _1147 = _1145;
        _1148 = _1145;
        _1149 = _1145;
        _1150 = _1145;
        _1151 = _1145;
        _1152 = _1145;
        _1153 = _1145;
        _1154 = _1145;
        _1155 = _1145;
        _1156 = _1145;
        _1157 = 0.0;
        _1158 = 0.0;
        _1159 = 0.0;
    }
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1187 = fma(_815, cbModelParam._m0[30u].z, fma(_811, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _807));
        float _1191 = fma(_815, cbModelParam._m0[31u].z, fma(_811, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _807));
        float _1195 = fma(_815, cbModelParam._m0[32u].z, fma(_811, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _807));
        float _1218 = _807 + _582;
        float _1219 = _811 + _583;
        float _1220 = _815 + _584;
        float _1230 = fma(_1220, cbModelParam._m0[30u].z, fma(_1219, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1218)) - _1187;
        float _1231 = fma(_1220, cbModelParam._m0[31u].z, fma(_1219, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1218)) - _1191;
        float _1232 = fma(_1220, cbModelParam._m0[32u].z, fma(_1219, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1218)) - _1195;
        float _1236 = inversesqrt(dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232)));
        float _1249 = ((_1236 * _1230) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1187 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1236 * _1231) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1191 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1236 * _1232) / cbModelParam._m0[35u].z) + ((((((_1195 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        float _1286 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1253.x + (-0.5));
        float _1288 = _1286 * (_1253.y + (-0.5));
        float _1289 = _1286 * (_1253.z + (-0.5));
        float _1296 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1260.x + (-0.5));
        float _1298 = _1296 * (_1260.y + (-0.5));
        float _1299 = _1296 * (_1260.z + (-0.5));
        float _1306 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1267.x + (-0.5));
        float _1308 = _1306 * (_1267.y + (-0.5));
        float _1309 = _1306 * (_1267.z + (-0.5));
        float _1316 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1274.x + (-0.5));
        float _1318 = _1316 * (_1274.y + (-0.5));
        float _1319 = _1316 * (_1274.z + (-0.5));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = _1287 * 0.5;
        float _1324 = _1297 * 0.5;
        float _1325 = _1307 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_582, _583, _584), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _3896 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1350 + 1.0))) + _1355) * _1320;
        float _1365 = _1288 * 0.5;
        float _1366 = _1298 * 0.5;
        float _1367 = _1308 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_582, _583, _584), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _3929 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1392 + 1.0))) + _1397) * _1321;
        float _1407 = _1289 * 0.5;
        float _1408 = _1299 * 0.5;
        float _1409 = _1309 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_582, _583, _584), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _3962 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1434 + 1.0))) + _1439) * _1322;
        _1456 = _1289;
        _1457 = _1288;
        _1458 = _1287;
        _1459 = _1299;
        _1460 = _1298;
        _1461 = _1297;
        _1462 = _1309;
        _1463 = _1308;
        _1464 = _1307;
        _1465 = _1322;
        _1466 = _1321;
        _1467 = _1320;
        _1468 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1469 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
    }
    else
    {
        _1456 = _1145;
        _1457 = _1145;
        _1458 = _1145;
        _1459 = _1145;
        _1460 = _1145;
        _1461 = _1145;
        _1462 = _1145;
        _1463 = _1145;
        _1464 = _1145;
        _1465 = _1145;
        _1466 = _1145;
        _1467 = _1145;
        _1468 = 0.0;
        _1469 = 0.0;
        _1470 = 0.0;
    }
    float _1480 = (cbModelParam._m0[1u].x * (_1468 - _1157)) + _1157;
    float _1481 = (cbModelParam._m0[1u].x * (_1469 - _1158)) + _1158;
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1159)) + _1159;
    float _1503 = fma(_1482, cbSceneParam._m0[89u].z, fma(_1481, cbSceneParam._m0[89u].y, _1480 * cbSceneParam._m0[89u].x));
    float _1506 = fma(_1482, cbSceneParam._m0[90u].z, fma(_1481, cbSceneParam._m0[90u].y, _1480 * cbSceneParam._m0[90u].x));
    float _1509 = fma(_1482, cbSceneParam._m0[91u].z, fma(_1481, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1480));
    float _1524 = _754 * 0.5;
    float _1525 = _755 * 0.5;
    float _1526 = _756 * 0.5;
    float _1527 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1530 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1457, _1460, _1463, _1466));
    float _1533 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1456, _1459, _1462, _1465));
    float _1567;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1540 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1144, _1148, _1151, _1154));
        float _1544 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1146, _1149, _1152, _1155));
        float _1548 = dot(vec4(_1524, _1525, _1526, 1.0), vec4(_1147, _1150, _1153, _1156));
        float _1555 = dot(vec4(cbModelParam._m0[39u]), vec4(_1524, _1525, _1526, 1.0));
        _1567 = dot(vec3(isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1555) ? 0.0 : (isnan(0.0) ? _1555 : max(0.0, _1555))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1567 = 1.0;
    }
    float _1578;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1569 = dot(vec4(cbModelParam._m0[40u]), vec4(_1524, _1525, _1526, 1.0));
        _1578 = dot(vec3(isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1569) ? 0.0 : (isnan(0.0) ? _1569 : max(0.0, _1569))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1578 = 1.0;
    }
    float _1582 = (_1578 * cbModelParam._m0[1u].x) + (_1567 * (1.0 - cbModelParam._m0[1u].x));
    float _1592 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _585);
    float _1593 = isnan(_1592) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1592 : min(cbModelParam._m0[25u].z, _1592));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1641 = fma(_815, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _807)) + cbModelParam._m0[13u].w;
        float _1645 = fma(_815, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _807)) + cbModelParam._m0[14u].w;
        float _1649 = fma(_815, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _807)) + cbModelParam._m0[15u].w;
        float _1652 = fma(_756, cbModelParam._m0[13u].z, fma(_755, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754));
        float _1655 = fma(_756, cbModelParam._m0[14u].z, fma(_755, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754));
        float _1658 = fma(_756, cbModelParam._m0[15u].z, fma(_755, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754));
        float _1686;
        if (_1652 > 0.0)
        {
            _1686 = abs((1.0 - _1641) / _1652);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1641 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1686 = frontier_phi_17_15_ladder;
        }
        float _1910;
        if (_1655 > 0.0)
        {
            _1910 = abs((1.0 - _1645) / _1655);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1645 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1910 = frontier_phi_26_22_ladder;
        }
        float _2156;
        if (_1658 > 0.0)
        {
            _2156 = abs((1.0 - _1649) / _1658);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1649 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2156 = frontier_phi_38_33_ladder;
        }
        float _2158 = isnan(_1910) ? _1686 : (isnan(_1686) ? _1910 : min(_1686, _1910));
        float _2159 = isnan(_2156) ? _2158 : (isnan(_2158) ? _2156 : min(_2158, _2156));
        float _2163 = (_2159 * _1652) + _1641;
        float _2164 = (_2159 * _1655) + _1645;
        float _2165 = (_2159 * _1658) + _1649;
        float _2166 = _2159 * 9.9999997473787516355514526367188e-05;
        float _2168 = (-1.0) - _2166;
        float _2170 = _2166 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2165 > _2170) || ((_2165 < _2168) || ((_2164 > _2170) || ((_2164 < _2168) || ((_2163 < _2168) || (_2163 > _2170))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2289 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2165, cbModelParam._m0[9u].z, fma(_2164, cbModelParam._m0[9u].y, _2163 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2165, cbModelParam._m0[10u].z, fma(_2164, cbModelParam._m0[10u].y, _2163 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2165, cbModelParam._m0[11u].z, fma(_2164, cbModelParam._m0[11u].y, _2163 * cbModelParam._m0[11u].x))), _1593);
            frontier_phi_16_38_ladder = _2289.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2289.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2289.x * cbModelParam._m0[1u].y;
        }
        _1674 = frontier_phi_16_38_ladder_2;
        _1676 = frontier_phi_16_38_ladder_1;
        _1678 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1662 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_754, _755, _756), _1593);
        _1674 = _1662.x * cbModelParam._m0[1u].y;
        _1676 = _1662.y * cbModelParam._m0[1u].y;
        _1678 = _1662.z * cbModelParam._m0[1u].y;
    }
    float _1682 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _585);
    float _1683 = isnan(_1682) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1682 : min(cbModelParam._m0[25u].w, _1682));
    float _1773;
    float _1775;
    float _1777;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1737 = fma(_815, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _807)) + cbModelParam._m0[21u].w;
        float _1741 = fma(_815, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _807)) + cbModelParam._m0[22u].w;
        float _1745 = fma(_815, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _807)) + cbModelParam._m0[23u].w;
        float _1748 = fma(_756, cbModelParam._m0[21u].z, fma(_755, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754));
        float _1751 = fma(_756, cbModelParam._m0[22u].z, fma(_755, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754));
        float _1754 = fma(_756, cbModelParam._m0[23u].z, fma(_755, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754));
        float _1915;
        if (_1748 > 0.0)
        {
            _1915 = abs((1.0 - _1737) / _1748);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1737 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1915 = frontier_phi_28_24_ladder;
        }
        float _2183;
        if (_1751 > 0.0)
        {
            _2183 = abs((1.0 - _1741) / _1751);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1741 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2183 = frontier_phi_40_35_ladder;
        }
        float _2388;
        if (_1754 > 0.0)
        {
            _2388 = abs((1.0 - _1745) / _1754);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1745 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2388 = frontier_phi_49_46_ladder;
        }
        float _2390 = isnan(_2183) ? _1915 : (isnan(_1915) ? _2183 : min(_1915, _2183));
        float _2391 = isnan(_2388) ? _2390 : (isnan(_2390) ? _2388 : min(_2390, _2388));
        float _2395 = (_2391 * _1748) + _1737;
        float _2396 = (_2391 * _1751) + _1741;
        float _2397 = (_2391 * _1754) + _1745;
        float _2398 = _2391 * 9.9999997473787516355514526367188e-05;
        float _2399 = (-1.0) - _2398;
        float _2401 = _2398 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2397 > _2401) || ((_2397 < _2399) || ((_2396 > _2401) || ((_2396 < _2399) || ((_2395 < _2399) || (_2395 > _2401))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2596 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2397, cbModelParam._m0[17u].z, fma(_2396, cbModelParam._m0[17u].y, _2395 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2397, cbModelParam._m0[18u].z, fma(_2396, cbModelParam._m0[18u].y, _2395 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2397, cbModelParam._m0[19u].z, fma(_2396, cbModelParam._m0[19u].y, _2395 * cbModelParam._m0[19u].x))), _1683);
            frontier_phi_25_49_ladder = _2596.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2596.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2596.x * cbModelParam._m0[1u].z;
        }
        _1773 = frontier_phi_25_49_ladder_2;
        _1775 = frontier_phi_25_49_ladder_1;
        _1777 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1757 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_754, _755, _756), _1683);
        _1773 = _1757.x * cbModelParam._m0[1u].z;
        _1775 = _1757.y * cbModelParam._m0[1u].z;
        _1777 = _1757.z * cbModelParam._m0[1u].z;
    }
    float _1789 = ((((1.0 - _775) * ((_762 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_775 * _762)) * _746;
    float _1790 = _1789 * ((cbModelParam._m0[1u].w * (_1773 - _1674)) + _1674);
    float _1791 = _1789 * ((cbModelParam._m0[1u].w * (_1775 - _1676)) + _1676);
    float _1792 = _1789 * ((cbModelParam._m0[1u].w * (_1777 - _1678)) + _1678);
    float _1795 = fma(_1792, cbSceneParam._m0[89u].z, fma(_1791, cbSceneParam._m0[89u].y, _1790 * cbSceneParam._m0[89u].x));
    float _1798 = fma(_1792, cbSceneParam._m0[90u].z, fma(_1791, cbSceneParam._m0[90u].y, _1790 * cbSceneParam._m0[90u].x));
    float _1801 = fma(_1792, cbSceneParam._m0[91u].z, fma(_1791, cbSceneParam._m0[91u].y, _1790 * cbSceneParam._m0[91u].x));
    vec4 _1809 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_681, _682));
    float _1811 = _1809.w;
    float _1823 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1811);
    float _1824 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1811);
    float _1825 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1811);
    uvec4 _1829 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1831 = _1829.x * 14u;
    uint _1832 = _1831 + 13u;
    float _1839 = _746 + (-1.0);
    float _1844 = (cbLight._m0[_1832].x * _1839) + 1.0;
    float _1845 = (cbLight._m0[_1832].y * _1839) + 1.0;
    float _1846 = (cbLight._m0[_1832].z * _1839) + 1.0;
    float _1847 = (cbLight._m0[_1832].w * _1839) + 1.0;
    uint _1848 = _1831 + 5u;
    float _1854 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
    uint _1858 = _1831 + 4u;
    float _1868 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
    uint _1872 = _1831 | 1u;
    float _1883 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_582, _583, _584));
    float _1886 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_582, _583, _584));
    float _4098 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _4109 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1891 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * 0.3183098733425140380859375;
    float _1893 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * 0.3183098733425140380859375;
    float _1900 = ((cbLight._m0[_1848].x * _1854) * _1893) + (((cbLight._m0[_1858].x * _1823) * _1868) * _1891);
    float _1901 = ((_1854 * cbLight._m0[_1848].y) * _1893) + (((cbLight._m0[_1858].y * _1824) * _1868) * _1891);
    float _1902 = ((_1854 * cbLight._m0[_1848].z) * _1893) + (((cbLight._m0[_1858].z * _1825) * _1868) * _1891);
    uvec4 _1907 = floatBitsToUint(cbLight._m0[_1831 + 12u]);
    bool _1909 = _1907.x == 0u;
    float _1920;
    float _1922;
    float _1924;
    if (_1909)
    {
        _1920 = _1900;
        _1922 = _1901;
        _1924 = _1902;
    }
    else
    {
        uint _1928 = _1831 + 6u;
        float _1944 = (dot(vec3(cbLight._m0[_1831 + 2u].xyz), vec3(_582, _583, _584)) * 0.5) + 0.5;
        float _1945 = _1944 * _1944;
        float _4120 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1946 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1947 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _1920 = (((cbLight._m0[_1928].x * 0.3183098733425140380859375) * _1946) * _1947) + _1900;
        _1922 = (((cbLight._m0[_1928].y * 0.3183098733425140380859375) * _1946) * _1947) + _1901;
        _1924 = (((cbLight._m0[_1928].z * 0.3183098733425140380859375) * _1946) * _1947) + _1902;
    }
    bool _1927 = _1907.y == 0u;
    float _1965;
    float _1967;
    float _1969;
    if (_1927)
    {
        _1965 = _1920;
        _1967 = _1922;
        _1969 = _1924;
    }
    else
    {
        uint _2127 = _1831 + 7u;
        float _2143 = (dot(vec3(cbLight._m0[_1831 + 3u].xyz), vec3(_582, _583, _584)) * 0.5) + 0.5;
        float _2144 = _2143 * _2143;
        float _4136 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2145 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2146 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _1965 = (((cbLight._m0[_2127].x * 0.3183098733425140380859375) * _2145) * _2146) + _1920;
        _1967 = (((cbLight._m0[_2127].y * 0.3183098733425140380859375) * _2145) * _2146) + _1922;
        _1969 = (((cbLight._m0[_2127].z * 0.3183098733425140380859375) * _2145) * _2146) + _1924;
    }
    uint _1972 = _1831 + 8u;
    float _1985 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1831].w)) * _585) * 0.949999988079071044921875);
    float _1986 = _1985 * _1985;
    float _1987 = cbLight._m0[_1831].x + _660;
    float _1988 = cbLight._m0[_1831].y + _661;
    float _1989 = cbLight._m0[_1831].z + _662;
    float _1993 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
    float _1994 = _1993 * _1987;
    float _1995 = _1993 * _1988;
    float _1996 = _1993 * _1989;
    float _1997 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_1831].xyz));
    float _4152 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _4163 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _2001 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _2002 = dot(vec3(_582, _583, _584), vec3(_1994, _1995, _1996));
    float _4174 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _2006 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_1994, _1995, _1996));
    float _4185 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2010 = _1986 * _1986;
    float _2014 = ((_2005 * _2005) * (_2010 + (-1.0))) + 1.0;
    float _2025 = (exp2(log2(1.0 - (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2026 = 1.0 - _1986;
    float _2037 = (0.5 / (((_2001 * ((_2000 * _2026) + _1986)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2026) + _1986) * _2000))) * _2000;
    float _4196 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2039 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2010 / ((_2014 * _2014) * 3.141590118408203125));
    uint _2053 = _1831 + 9u;
    float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1872].w)) * _585) * 0.949999988079071044921875);
    float _2065 = _2064 * _2064;
    float _2066 = cbLight._m0[_1872].x + _660;
    float _2067 = cbLight._m0[_1872].y + _661;
    float _2068 = cbLight._m0[_1872].z + _662;
    float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
    float _2073 = _2072 * _2066;
    float _2074 = _2072 * _2067;
    float _2075 = _2072 * _2068;
    float _2076 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_1872].xyz));
    float _4207 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _2080 = dot(vec3(_582, _583, _584), vec3(_2073, _2074, _2075));
    float _4218 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _2084 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_2073, _2074, _2075));
    float _4229 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2088 = _2065 * _2065;
    float _2092 = ((_2083 * _2083) * (_2088 + (-1.0))) + 1.0;
    float _2101 = (exp2(log2(1.0 - (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2102 = 1.0 - _2065;
    float _2112 = (0.5 / (((_2001 * ((_2079 * _2102) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2102) + _2065) * _2079))) * _2079;
    float _4240 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2114 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_2088 / ((_2092 * _2092) * 3.141590118408203125));
    float _2124 = (((_2101 * cbLight._m0[_2053].x) * _2114) * _1854) + ((((cbLight._m0[_1972].x * _1823) * _2025) * _2039) * _1868);
    float _2125 = (((_2101 * cbLight._m0[_2053].y) * _2114) * _1854) + ((((cbLight._m0[_1972].y * _1824) * _2025) * _2039) * _1868);
    float _2126 = (((_2101 * cbLight._m0[_2053].z) * _2114) * _1854) + ((((cbLight._m0[_1972].z * _1825) * _2025) * _2039) * _1868);
    float _2188;
    float _2190;
    float _2192;
    if (_1909)
    {
        _2188 = _2124;
        _2190 = _2125;
        _2192 = _2126;
    }
    else
    {
        uint _2194 = _1831 + 2u;
        uint _2198 = _1831 + 10u;
        float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2194].w)) * _585) * 0.949999988079071044921875);
        float _2213 = _2212 * _2212;
        float _2214 = cbLight._m0[_2194].x + _660;
        float _2215 = cbLight._m0[_2194].y + _661;
        float _2216 = cbLight._m0[_2194].z + _662;
        float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
        float _2221 = _2220 * _2214;
        float _2222 = _2220 * _2215;
        float _2223 = _2220 * _2216;
        float _2224 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_2194].xyz));
        float _4251 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2228 = dot(vec3(_582, _583, _584), vec3(_2221, _2222, _2223));
        float _4262 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2231 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2232 = dot(vec3(cbLight._m0[_2194].xyz), vec3(_2221, _2222, _2223));
        float _4273 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2236 = _2213 * _2213;
        float _2240 = ((_2231 * _2231) * (_2236 + (-1.0))) + 1.0;
        float _2249 = (exp2(log2(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2250 = 1.0 - _2213;
        float _2260 = (0.5 / (((_2001 * ((_2227 * _2250) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2250) + _2213) * _2227))) * _2227;
        float _4284 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2262 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2236 / ((_2240 * _2240) * 3.141590118408203125));
        float _2263 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
        _2188 = (((_2249 * cbLight._m0[_2198].x) * _2262) * _2263) + _2124;
        _2190 = (((_2249 * cbLight._m0[_2198].y) * _2262) * _2263) + _2125;
        _2192 = (((_2249 * cbLight._m0[_2198].z) * _2262) * _2263) + _2126;
    }
    float _2298;
    float _2300;
    float _2302;
    if (_1927)
    {
        _2298 = _2188;
        _2300 = _2190;
        _2302 = _2192;
    }
    else
    {
        uint _2309 = _1831 + 3u;
        uint _2313 = _1831 + 11u;
        float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _585) * 0.949999988079071044921875);
        float _2328 = _2327 * _2327;
        float _2329 = cbLight._m0[_2309].x + _660;
        float _2330 = cbLight._m0[_2309].y + _661;
        float _2331 = cbLight._m0[_2309].z + _662;
        float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
        float _2336 = _2335 * _2329;
        float _2337 = _2335 * _2330;
        float _2338 = _2335 * _2331;
        float _2339 = dot(vec3(_582, _583, _584), vec3(cbLight._m0[_2309].xyz));
        float _4300 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2343 = dot(vec3(_582, _583, _584), vec3(_2336, _2337, _2338));
        float _4311 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _2347 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2336, _2337, _2338));
        float _4322 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2351 = _2328 * _2328;
        float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
        float _2364 = (exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2365 = 1.0 - _2328;
        float _2375 = (0.5 / (((_2001 * ((_2342 * _2365) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2365) + _2328) * _2342))) * _2342;
        float _4333 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2377 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
        float _2378 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
        _2298 = (((_2364 * cbLight._m0[_2313].x) * _2377) * _2378) + _2188;
        _2300 = (((_2364 * cbLight._m0[_2313].y) * _2377) * _2378) + _2190;
        _2302 = (((_2364 * cbLight._m0[_2313].z) * _2377) * _2378) + _2192;
    }
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    if (_1829.y == 0u)
    {
        float _2453 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2454 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2453;
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2453;
        float _2456 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2453;
        uvec4 _2468 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2469 = _2468.x;
        uint _2480 = uint((float(_2468.y) * floor(float(uint(cbSceneParam._m0[85u].y * _682) / _2469))) + floor(float(uint(cbSceneParam._m0[85u].x * _681) / _2469)));
        float _2490 = (log2(_2456 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2491 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        uint _2494 = uint(isnan(14.0) ? _2491 : (isnan(_2491) ? 14.0 : min(_2491, 14.0)));
        uvec4 _2499 = texelFetch(g_lightClusterGridBuffer, int(((_2494 << 2u) + (_2480 << 6u)) >> 2u));
        uint _2500 = _2499.x;
        uint _2501 = _2468.z;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        if (((((1u << ((_2501 >> 4u) & 15u)) + 4294967295u) & _2500) == 0u) || ((_2501 & 240u) == 0u))
        {
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
            _2609 = 0.0;
            _2611 = 0.0;
        }
        else
        {
            float _2602;
            float _2604;
            float _2606;
            float _2608;
            float _2610;
            float _2612;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            uint _2760 = 0u;
            uint _2769;
            bool _2770;
            for (;;)
            {
                _2769 = texelFetch(g_lightClassification, int((((_2494 << 5u) + (_2480 << 9u)) + (_2760 << 2u)) >> 2u)).x;
                _2770 = _2769 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2770)
                {
                    frontier_phi_66_pred = _2754;
                    frontier_phi_66_pred_1 = _2759;
                    frontier_phi_66_pred_2 = _2758;
                    frontier_phi_66_pred_3 = _2757;
                    frontier_phi_66_pred_4 = _2756;
                    frontier_phi_66_pred_5 = _2755;
                }
                else
                {
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    uint _2905;
                    _2899 = _2754;
                    _2900 = _2755;
                    _2901 = _2756;
                    _2902 = _2757;
                    _2903 = _2758;
                    _2904 = _2759;
                    _2905 = _2769;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    for (;;)
                    {
                        uint _2909 = uint(findLSB(_2905)) + (_2760 << 5u);
                        uint _2906 = (_2905 + 4294967295u) & _2905;
                        uint _2911 = _2909 * 48u;
                        vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 3u)).x));
                        uint _2931 = (_2909 * 48u) + 4u;
                        vec4 _2944 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2931)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 3u)).x));
                        uint _2950 = (_2909 * 48u) + 8u;
                        vec3 _2961 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2950)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 2u)).x));
                        float _2965 = _2925.x - _2454;
                        float _2966 = _2925.y - _2455;
                        float _2967 = _2925.z - _2456;
                        float _2968 = dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967));
                        float _2971 = inversesqrt(_2968);
                        float _2972 = _2971 * _2965;
                        float _2973 = _2971 * _2966;
                        float _2974 = _2971 * _2967;
                        float _2975 = dot(vec3(_702, _705, _708), vec3(_2972, _2973, _2974));
                        float _2980 = 1.0 - (_2968 * _2925.w);
                        float _4359 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2981 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _2982 = sqrt(_2968) * _2944.w;
                        float _2985 = 1.39999997615814208984375 / (_2982 + 1.39999997615814208984375);
                        float _2986 = _2985 * _2985;
                        float _2989 = ((1.0 - _2986) * _2975) + _2986;
                        float _2992 = _2982 * _2982;
                        float _2996 = ((isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))) * _2981) / ((_2992 * 0.699999988079071044921875) + 1.0);
                        float _3000 = (-0.0) - _2454;
                        float _3001 = (-0.0) - _2455;
                        float _3002 = (-0.0) - _2456;
                        float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
                        float _3007 = _3006 * _3000;
                        float _3008 = _3006 * _3001;
                        float _3009 = _3006 * _3002;
                        float _3017 = exp2(log2(1.0 / ((_2992 * 3.5) + 5.0)) * 0.25);
                        float _3018 = 1.0 - _762;
                        float _3025 = sqrt(1.0 - ((1.0 - (_3018 * _3018)) * (1.0 - (_3017 * _3017))));
                        float _3026 = _3025 * _3025;
                        float _3027 = _3026 * _3026;
                        float _3028 = _3007 + _2972;
                        float _3029 = _3008 + _2973;
                        float _3030 = _3009 + _2974;
                        float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
                        float _3038 = dot(vec3(_702, _705, _708), vec3(_3007, _3008, _3009));
                        float _4375 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3041 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _3042 = dot(vec3(_702, _705, _708), vec3(_3034 * _3028, _3034 * _3029, _3034 * _3030));
                        float _4386 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3045 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _3049 = ((_3045 * _3045) * (_3027 + (-1.0))) + 1.0;
                        float _3050 = _2985 * _3026;
                        float _3051 = _3050 * _3050;
                        float _3054 = ((1.0 - _3051) * _2975) + _3051;
                        float _4397 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3055 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                        float _3056 = 1.0 - _3026;
                        float _3066 = (0.5 / (((_3055 * ((_3041 * _3056) + _3026)) + 9.9999999392252902907785028219223e-09) + (((_3055 * _3056) + _3026) * _3041))) * _3055;
                        float _4408 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3077 = (((_3027 * 3.1415927410125732421875) * (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) / ((_3049 * _3049) * ((_2992 * 2.1991131305694580078125) + 3.141590118408203125))) * _2981;
                        _2829 = (_2996 * _2944.x) + _2902;
                        _2830 = (_2996 * _2944.y) + _2903;
                        _2831 = (_2996 * _2944.z) + _2904;
                        _2826 = (_3077 * _2961.x) + _2899;
                        _2827 = (_3077 * _2961.y) + _2900;
                        _2828 = (_3077 * _2961.z) + _2901;
                        if (_2906 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2899 = _2826;
                            _2900 = _2827;
                            _2901 = _2828;
                            _2902 = _2829;
                            _2903 = _2830;
                            _2904 = _2831;
                            _2905 = _2906;
                        }
                    }
                    frontier_phi_66_pred = _2826;
                    frontier_phi_66_pred_1 = _2831;
                    frontier_phi_66_pred_2 = _2830;
                    frontier_phi_66_pred_3 = _2829;
                    frontier_phi_66_pred_4 = _2828;
                    frontier_phi_66_pred_5 = _2827;
                }
                _2602 = frontier_phi_66_pred;
                _2612 = frontier_phi_66_pred_1;
                _2610 = frontier_phi_66_pred_2;
                _2608 = frontier_phi_66_pred_3;
                _2606 = frontier_phi_66_pred_4;
                _2604 = frontier_phi_66_pred_5;
                uint _2761 = _2760 + 1u;
                if (_2761 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2754 = _2602;
                    _2755 = _2604;
                    _2756 = _2606;
                    _2757 = _2608;
                    _2758 = _2610;
                    _2759 = _2612;
                    _2760 = _2761;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
            _2609 = _2610;
            _2611 = _2612;
        }
        uvec4 _2615 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2616 = _2615.z;
        uint _2618 = (_2616 >> 8u) & 15u;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        if (((4294967295u << _2618) & _2500) == 0u)
        {
            _2722 = _2601;
            _2724 = _2603;
            _2726 = _2605;
            _2728 = _2607;
            _2730 = _2609;
            _2732 = _2611;
        }
        else
        {
            float _2747 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
            float _2748 = _2747 * _2454;
            float _2749 = _2747 * _2455;
            float _2750 = _2747 * _2456;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2618 < ((_2616 >> 12u) & 15u))
            {
                float _2723;
                float _2725;
                float _2727;
                float _2729;
                float _2731;
                float _2733;
                float _2882 = _2601;
                float _2883 = _2603;
                float _2884 = _2605;
                float _2885 = _2607;
                float _2886 = _2609;
                float _2887 = _2611;
                uint _2888 = _2618;
                uint _2897;
                bool _2898;
                for (;;)
                {
                    _2897 = texelFetch(g_lightClassification, int((((_2494 << 5u) + (_2480 << 9u)) + (_2888 << 2u)) >> 2u)).x;
                    _2898 = _2897 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2898)
                    {
                        frontier_phi_77_pred = _2887;
                        frontier_phi_77_pred_1 = _2886;
                        frontier_phi_77_pred_2 = _2885;
                        frontier_phi_77_pred_3 = _2884;
                        frontier_phi_77_pred_4 = _2883;
                        frontier_phi_77_pred_5 = _2882;
                    }
                    else
                    {
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3104 = _2882;
                        float _3105 = _2883;
                        float _3106 = _2884;
                        float _3107 = _2885;
                        float _3108 = _2886;
                        float _3109 = _2887;
                        uint _3110 = _2897;
                        uint _3111;
                        vec4 _3136;
                        float _3137;
                        vec4 _3152;
                        vec3 _3164;
                        vec4 _3180;
                        vec4 _3195;
                        float _3241;
                        bool _3242;
                        for (;;)
                        {
                            uint _3121 = ((_2888 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3110));
                            _3111 = (_3110 + 4294967295u) & _3110;
                            uint _3123 = _3121 * 40u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            _3137 = _3136.w;
                            uint _3139 = (_3121 * 40u) + 4u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3154 = (_3121 * 40u) + 8u;
                            _3164 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x));
                            uint _3167 = (_3121 * 40u) + 16u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3182 = (_3121 * 40u) + 20u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3197 = (_3121 * 40u) + 24u;
                            vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3216 = (_3121 * 40u) + 28u;
                            vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            _3241 = fma(_2456, _3229.z, fma(_2455, _3229.y, _3229.x * _2454)) + _3229.w;
                            _3242 = !((fma(_2456, _3210.z, fma(_2455, _3210.y, _3210.x * _2454)) + _3210.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3242)
                            {
                                float _3269 = _3136.x - _2454;
                                float _3270 = _3136.y - _2455;
                                float _3271 = _3136.z - _2456;
                                float _3272 = dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271));
                                float _3275 = inversesqrt(_3272);
                                float _3276 = _3275 * _3269;
                                float _3277 = _3275 * _3270;
                                float _3278 = _3275 * _3271;
                                float _3282 = 1.0 - (_3272 / (_3137 * _3137));
                                float _4419 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3287 = sqrt(_3272) * _3152.w;
                                float _3289 = 1.39999997615814208984375 / (_3287 + 1.39999997615814208984375);
                                float _3290 = _3289 * _3289;
                                float _3293 = ((1.0 - _3290) * dot(vec3(_3276, _3277, _3278), vec3(_702, _705, _708))) + _3290;
                                float _3296 = _3287 * _3287;
                                float _3300 = (fma(_2456, _3180.z, fma(_2455, _3180.y, _3180.x * _2454)) + _3180.w) / _3241;
                                float _3301 = (fma(_2456, _3195.z, fma(_2455, _3195.y, _3195.x * _2454)) + _3195.w) / _3241;
                                float _3305 = 1.0 - dot(vec2(_3300, _3301), vec2(_3300, _3301));
                                float _4435 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3307 = _3306 * (((isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))) * _3283) / ((_3296 * 0.699999988079071044921875) + 1.0));
                                float _3319 = exp2(log2(1.0 / ((_3296 * 3.5) + 5.0)) * 0.25);
                                float _3320 = 1.0 - _762;
                                float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                                float _3328 = _3327 * _3327;
                                float _3329 = _3328 * _3328;
                                float _3330 = _3276 - _2748;
                                float _3331 = _3277 - _2749;
                                float _3332 = _3278 - _2750;
                                float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                                float _3340 = dot(vec3(_702, _705, _708), vec3((-0.0) - _2748, (-0.0) - _2749, (-0.0) - _2750));
                                float _4446 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3343 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3344 = dot(vec3(_702, _705, _708), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                                float _4457 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3347 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
                                float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                                float _3352 = _3289 * _3328;
                                float _3353 = _3352 * _3352;
                                float _3359 = ((1.0 - _3353) * dot(vec3(_702, _705, _708), vec3(_3276, _3277, _3278))) + _3353;
                                float _4468 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3360 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                                float _3361 = 1.0 - _3328;
                                float _3371 = (0.5 / (((_3360 * ((_3343 * _3361) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3360 * _3361) + _3328) * _3343))) * _3360;
                                float _4479 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3381 = (_3306 * _3283) * (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) / ((_3351 * _3351) * ((_3296 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3307 * _3152.y;
                                frontier_phi_83_pred_1 = _3307 * _3152.x;
                                frontier_phi_83_pred_2 = _3381 * _3164.z;
                                frontier_phi_83_pred_3 = _3381 * _3164.y;
                                frontier_phi_83_pred_4 = _3381 * _3164.x;
                                frontier_phi_83_pred_5 = _3307 * _3152.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3389 = frontier_phi_83_pred;
                            _3388 = frontier_phi_83_pred_1;
                            _3387 = frontier_phi_83_pred_2;
                            _3386 = frontier_phi_83_pred_3;
                            _3385 = frontier_phi_83_pred_4;
                            _3390 = frontier_phi_83_pred_5;
                            _3094 = _3388 + _3107;
                            _3095 = _3389 + _3108;
                            _3096 = _3390 + _3109;
                            _3091 = _3385 + _3104;
                            _3092 = _3386 + _3105;
                            _3093 = _3387 + _3106;
                            if (_3111 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3111;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3096;
                        frontier_phi_77_pred_1 = _3095;
                        frontier_phi_77_pred_2 = _3094;
                        frontier_phi_77_pred_3 = _3093;
                        frontier_phi_77_pred_4 = _3092;
                        frontier_phi_77_pred_5 = _3091;
                    }
                    _2733 = frontier_phi_77_pred;
                    _2731 = frontier_phi_77_pred_1;
                    _2729 = frontier_phi_77_pred_2;
                    _2727 = frontier_phi_77_pred_3;
                    _2725 = frontier_phi_77_pred_4;
                    _2723 = frontier_phi_77_pred_5;
                    uint _2889 = _2888 + 1u;
                    if (_2889 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2882 = _2723;
                        _2883 = _2725;
                        _2884 = _2727;
                        _2885 = _2729;
                        _2886 = _2731;
                        _2887 = _2733;
                        _2888 = _2889;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2727;
                frontier_phi_58_59_ladder_1 = _2733;
                frontier_phi_58_59_ladder_2 = _2731;
                frontier_phi_58_59_ladder_3 = _2729;
                frontier_phi_58_59_ladder_4 = _2725;
                frontier_phi_58_59_ladder_5 = _2723;
            }
            else
            {
                frontier_phi_58_59_ladder = _2605;
                frontier_phi_58_59_ladder_1 = _2611;
                frontier_phi_58_59_ladder_2 = _2609;
                frontier_phi_58_59_ladder_3 = _2607;
                frontier_phi_58_59_ladder_4 = _2603;
                frontier_phi_58_59_ladder_5 = _2601;
            }
            _2722 = frontier_phi_58_59_ladder_5;
            _2724 = frontier_phi_58_59_ladder_4;
            _2726 = frontier_phi_58_59_ladder;
            _2728 = frontier_phi_58_59_ladder_3;
            _2730 = frontier_phi_58_59_ladder_2;
            _2732 = frontier_phi_58_59_ladder_1;
        }
        float _2737 = isnan(1.0) ? _746 : (isnan(_746) ? 1.0 : min(_746, 1.0));
        _2513 = (_2737 * _2728) + _1965;
        _2515 = (_2737 * _2730) + _1967;
        _2517 = (_2737 * _2732) + _1969;
        _2519 = ((_2722 * 0.039999999105930328369140625) * _2737) + _2298;
        _2521 = ((_2724 * 0.039999999105930328369140625) * _2737) + _2300;
        _2523 = ((_2726 * 0.039999999105930328369140625) * _2737) + _2302;
    }
    else
    {
        _2513 = _1965;
        _2515 = _1967;
        _2517 = _1969;
        _2519 = _2298;
        _2521 = _2300;
        _2523 = _2302;
    }
    float _4495 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _4506 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4517 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _2540 = ((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2513 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _746))) + ((_2519 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1582)) * cbPerFrame._m0[3u].x);
    float _2541 = ((isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2515 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _746))) + ((_2521 + ((isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))) * _1582)) * cbPerFrame._m0[3u].x);
    float _2542 = ((isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2517 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _746))) + ((_2523 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1582)) * cbPerFrame._m0[3u].x);
    uint _2543 = _245 + 6u;
    float _2551 = _681 / cbSceneParam._m0[86u].x;
    float _2552 = _682 / cbSceneParam._m0[86u].y;
    vec4 _2566 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2551, _2552, (log2((isnan(cbSceneParam._m0[77u].w) ? _603 : (isnan(_603) ? cbSceneParam._m0[77u].w : min(_603, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2568 = _2566.x;
    float _2569 = _2566.y;
    float _2570 = _2566.z;
    float _2571 = _2566.w;
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    if (_603 > cbSceneParam._m0[78u].w)
    {
        float _2626 = isnan(_603) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _603 : min(cbSceneParam._m0[80u].w, _603));
        float _2627 = _2626 / _603;
        float _2638 = _2627 * _653;
        float _2639 = _654 * _2627;
        float _2640 = (-0.0) - _2639;
        float _2642 = _2627 * _655;
        float _2644 = (cbSceneParam._m0[77u].w * _2640) / _2626;
        float _2645 = _2644 + cbSceneParam._m0[79u].w;
        float _2646 = cbSceneParam._m0[79u].w - _2639;
        float _2652 = sqrt(((_2638 * _2638) + (_2639 * _2639)) + (_2642 * _2642));
        float _2655 = (1.0 - (cbSceneParam._m0[77u].w / _2626)) * _2652;
        float _2660 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2662 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2839;
        if (abs((_2640 - _2644) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2839 = ((((_2645 > 0.0) ? exp2(_2660 * _2645) : (2.0 - exp2(_2662 * _2645))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2655;
        }
        else
        {
            float _2783 = 1.0 / cbSceneParam._m0[80u].x;
            float _2784 = isnan(_2646) ? _2645 : (isnan(_2645) ? _2646 : max(_2645, _2646));
            float _2785 = isnan(_2646) ? _2645 : (isnan(_2645) ? _2646 : min(_2645, _2646));
            float _2794 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : min(_2784, 0.0));
            float _2795 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : min(_2785, 0.0));
            _2839 = ((abs(_2652 / _2640) * cbSceneParam._m0[80u].y) * ((((_2794 - _2795) * 2.0) - ((exp2(_2660 * (isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0)))) - exp2(_2660 * (isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0))))) * _2783)) - ((exp2(_2662 * _2794) - exp2(_2662 * _2795)) * _2783))) + (_2655 * cbSceneParam._m0[80u].z);
        }
        vec4 _2841 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2551, _2552, 1.0), 0.0);
        float _2850 = exp2((_2839 * (-1.44269502162933349609375)) * (1.0 - _2841.w));
        float _2851 = log2(_2850);
        float _2867 = log2(_2571);
        _2664 = (exp2(_2867 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].x)) * _2841.x) / cbSceneParam._m0[78u].x)) + _2568;
        _2666 = (exp2(_2867 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].y)) * _2841.y) / cbSceneParam._m0[78u].y)) + _2569;
        _2668 = (exp2(_2867 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].z)) * _2841.z) / cbSceneParam._m0[78u].z)) + _2570;
        _2670 = _2850 * _2571;
    }
    else
    {
        _2664 = _2568;
        _2666 = _2569;
        _2668 = _2570;
        _2670 = _2571;
    }
    bool _2877;
    vec4 _2680;
    vec4 _2702;
    float _2704;
    float _2708;
    float _2709;
    float _2710;
    float _2711;
    bool _2721;
    for (;;)
    {
        _2680 = cbMatDynParam._m0[0u];
        float _2682 = roundEven(_2680.y);
        bool _2683 = _2682 == 3.0;
        float _2684 = log2(_2670);
        float _2691 = exp2(_2684 * cbSceneParam._m0[78u].x) * _2540;
        float _2692 = exp2(_2684 * cbSceneParam._m0[78u].y) * _2541;
        float _2693 = exp2(_2684 * cbSceneParam._m0[78u].z) * _2542;
        float _2700 = _669 + (-0.5);
        _2702 = cbMtdParam._m0[1u];
        _2704 = _2702.y * _2700;
        float _2707 = (_2682 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2708 = _2707 * (_2683 ? _2691 : (_2691 + (cbSceneParam._m0[72u].w * _2664)));
        _2709 = _2707 * (_2683 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2666)));
        _2710 = _2707 * (_2683 ? _2693 : (_2693 + (cbSceneParam._m0[72u].w * _2668)));
        _2711 = _2700 * 0.999000012874603271484375;
        _2721 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2721)
        {
            if ((cbInstanceData._m0[_245 + 7u].x + _2711) < 0.5)
            {
                _2877 = true;
                break;
            }
        }
        uint _2818 = _721 + uint(_2680.w);
        if ((cbInstanceData._m0[_2818].w < 1.0) && ((cbInstanceData._m0[_2818].w + _2711) < 0.5))
        {
            _2877 = true;
            break;
        }
        if ((_2704 + 1.0) < _2702.x)
        {
            _2877 = true;
            break;
        }
        _2877 = false;
        break;
    }
    float _3082;
    if (_2877)
    {
        discard_state = true;
        _3082 = 0.0;
    }
    else
    {
        _3082 = cbInstanceData._m0[_2543].w;
    }
    SV_Target.x = _2708;
    SV_Target.y = _2709;
    SV_Target.z = _2710;
    SV_Target.w = _3082;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2543].w;
    discard_exit();
}


