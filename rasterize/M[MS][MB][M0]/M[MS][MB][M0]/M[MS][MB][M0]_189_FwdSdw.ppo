#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1316;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _361 = _359.x;
    float _371 = dot(vec4(_361, _359.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _388 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_361 - _371) * cbMtdParam._m0[24u].x) + _371) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3904 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _396 = (_389 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _397 = (_389 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _398 = (_389 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _415 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _435 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _437 = _435.x;
    float _447 = dot(vec4(_437, _435.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _461 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_437 - _447) * cbMtdParam._m0[24u].x) + _447) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3915 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _469 = (_462 * ((_415.x * cbMtdParam._m0[13u].x) - _396)) + _396;
    float _470 = (_462 * ((_415.y * cbMtdParam._m0[13u].y) - _397)) + _397;
    float _471 = (_462 * ((_415.z * cbMtdParam._m0[13u].z) - _398)) + _398;
    vec4 _489 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _506 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _508 = _506.x;
    float _509 = _506.y;
    float _510 = _506.z;
    float _517 = ((_489.x - _508) * _389) + _508;
    float _518 = ((_489.y - _509) * _389) + _509;
    float _519 = ((_489.z - _510) * _389) + _510;
    vec4 _531 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _544 = ((_531.z - _519) * _462) + _519;
    float _547 = ((((_531.x - _517) * _462) + _517) * 2.0) + (-1.0);
    float _549 = ((((_531.y - _518) * _462) + _518) * 2.0) + (-1.0);
    float _550 = dot(vec2(_547, _549), vec2(_547, _549));
    float _3926 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))));
    vec4 _569 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _594 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _596 = _594.x;
    float _597 = 1.0 - _596;
    float _603 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _606 = ((isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : min(_603, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _615 = (_606 - ((((((_596 - _597) * cbMtdParam._m0[24u].z) + _597) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _606))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3947 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _616 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _623 = (_616 * (cbMtdParam._m0[17u].x - _469)) + _469;
    float _624 = (_616 * (cbMtdParam._m0[17u].y - _470)) + _470;
    float _625 = (_616 * (cbMtdParam._m0[17u].z - _471)) + _471;
    vec4 _637 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _639 = _637.x;
    float _640 = 1.0 - _639;
    float _667 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_639 - _640) * cbMtdParam._m0[24u].w) + _640) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3958 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _668 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _676 = ((((cbMtdParam._m0[10u].x - _623) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _668) + _623;
    float _677 = ((((cbMtdParam._m0[10u].y - _624) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _668) + _624;
    float _678 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _625)) * _668) + _625;
    float _682 = (cbMtdParam._m0[19u].w * (_569.z - _544)) + _544;
    vec4 _696 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _703 = (_696.x * 2.0) + (-1.0);
    float _704 = (_696.y * 2.0) + (-1.0);
    float _705 = dot(vec2(_703, _704), vec2(_703, _704));
    float _3969 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _713 = (_616 * (_696.z - _682)) + _682;
    float _716 = ((cbMtdParam._m0[23u].y - _713) * _668) + _713;
    vec4 _735 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _741 = (_735.x * 2.0) + (-1.0);
    float _742 = (_735.y * 2.0) + (-1.0);
    float _743 = dot(vec2(_741, _742), vec2(_741, _742));
    float _3980 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _751 = (((_569.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _547;
    float _752 = (((_569.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _549;
    float _764 = (((_703 - _751) + (cbMtdParam._m0[21u].x * _751)) * _616) + _751;
    float _765 = (((_704 - _752) + (cbMtdParam._m0[21u].x * _752)) * _616) + _752;
    float _766 = (_616 * (sqrt(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) - _555)) + _555;
    float _777 = (((_741 - _764) + (_764 * cbMtdParam._m0[22u].z)) * _668) + _764;
    float _778 = (((_742 - _765) + (_765 * cbMtdParam._m0[22u].z)) * _668) + _765;
    float _779 = ((sqrt(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) - _766) * _668) + _766;
    float _781 = cbMtdParam._m0[22u].x + _569.w;
    float _784 = fma(_779, _240 * NORMAL.x, fma(_778, _247 * TANGENT.x, (_233 * _225) * _777));
    float _787 = fma(_779, _240 * NORMAL.y, fma(_778, _247 * TANGENT.y, (_233 * _226) * _777));
    float _790 = fma(_779, _240 * NORMAL.z, fma(_778, _247 * TANGENT.z, (_233 * _227) * _777));
    float _794 = inversesqrt(dot(vec3(_784, _787, _790), vec3(_784, _787, _790)));
    float _795 = _794 * _784;
    float _796 = _794 * _787;
    float _797 = _794 * _790;
    float _3991 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _798 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _4002 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4013 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _4024 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _4035 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _816 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _867 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _857);
    float _868 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _857);
    float _869 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _857);
    float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
    float _874 = _867 * _873;
    float _875 = _868 * _873;
    float _876 = _869 * _873;
    float _882 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _883 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _901 = fma(_797, cbSceneParam._m0[5u].z, fma(_796, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _795));
    float _904 = fma(_797, cbSceneParam._m0[6u].z, fma(_796, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _795));
    float _907 = fma(_797, cbSceneParam._m0[7u].z, fma(_796, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _795));
    uint _921 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _927 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_921].x;
    float _928 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_921].y;
    float _929 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * cbInstanceData._m0[_921].z;
    float _4046 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    vec4 _941 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _882, cbSceneParam._m0[86u].y * _883));
    float _945 = ((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * TEXCOORD_5.w) * _941.x;
    float _946 = dot(vec3(_795, _796, _797), vec3(_874, _875, _876));
    float _949 = _946 * 2.0;
    float _953 = (_949 * _795) - _874;
    float _954 = (_949 * _796) - _875;
    float _955 = (_949 * _797) - _876;
    float _959 = abs(dot(vec3(_874, _875, _876), vec3(_795, _796, _797)));
    float _4079 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _961 = sqrt(_798);
    float _974 = exp2((_961 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_961 * 3.0));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1315;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1040 = fma(_1014, cbModelParam._m0[26u].z, fma(_1010, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1006));
        float _1044 = fma(_1014, cbModelParam._m0[27u].z, fma(_1010, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1006));
        float _1048 = fma(_1014, cbModelParam._m0[28u].z, fma(_1010, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1006));
        float _1073 = _1006 + _795;
        float _1074 = _1010 + _796;
        float _1075 = _1014 + _797;
        float _1085 = fma(_1075, cbModelParam._m0[26u].z, fma(_1074, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1073)) - _1040;
        float _1086 = fma(_1075, cbModelParam._m0[27u].z, fma(_1074, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1073)) - _1044;
        float _1087 = fma(_1075, cbModelParam._m0[28u].z, fma(_1074, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1073)) - _1048;
        float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
        float _1104 = ((_1091 * _1085) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1040 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1091 * _1086) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1044 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1091 * _1087) / cbModelParam._m0[34u].z) + ((((((_1048 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        float _1143 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1109.x + (-0.5));
        float _1145 = _1143 * (_1109.y + (-0.5));
        float _1146 = _1143 * (_1109.z + (-0.5));
        float _1153 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1116.x + (-0.5));
        float _1155 = _1153 * (_1116.y + (-0.5));
        float _1156 = _1153 * (_1116.z + (-0.5));
        float _1163 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1123.x + (-0.5));
        float _1165 = _1163 * (_1123.y + (-0.5));
        float _1166 = _1163 * (_1123.z + (-0.5));
        float _1173 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1130.x + (-0.5));
        float _1175 = _1173 * (_1130.y + (-0.5));
        float _1176 = _1173 * (_1130.z + (-0.5));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = _1144 * 0.5;
        float _1181 = _1154 * 0.5;
        float _1182 = _1164 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1197 = (dot(vec3(_795, _796, _797), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1207 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _4127 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1209 + 1.0))) + _1214) * _1177;
        float _1224 = _1145 * 0.5;
        float _1225 = _1155 * 0.5;
        float _1226 = _1165 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_795, _796, _797), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _4160 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1251 + 1.0))) + _1256) * _1178;
        float _1266 = _1146 * 0.5;
        float _1267 = _1156 * 0.5;
        float _1268 = _1166 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_795, _796, _797), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _4193 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1293 + 1.0))) + _1298) * _1179;
        _1315 = _1146;
        _1317 = _1145;
        _1318 = _1144;
        _1319 = _1156;
        _1320 = _1155;
        _1321 = _1154;
        _1322 = _1166;
        _1323 = _1165;
        _1324 = _1164;
        _1325 = _1179;
        _1326 = _1178;
        _1327 = _1177;
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
    }
    else
    {
        _1315 = _1316;
        _1317 = _1316;
        _1318 = _1316;
        _1319 = _1316;
        _1320 = _1316;
        _1321 = _1316;
        _1322 = _1316;
        _1323 = _1316;
        _1324 = _1316;
        _1325 = _1316;
        _1326 = _1316;
        _1327 = _1316;
        _1328 = 0.0;
        _1329 = 0.0;
        _1330 = 0.0;
    }
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1354 = fma(_1014, cbModelParam._m0[30u].z, fma(_1010, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1006));
        float _1358 = fma(_1014, cbModelParam._m0[31u].z, fma(_1010, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1006));
        float _1362 = fma(_1014, cbModelParam._m0[32u].z, fma(_1010, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1006));
        float _1385 = _1006 + _795;
        float _1386 = _1010 + _796;
        float _1387 = _1014 + _797;
        float _1397 = fma(_1387, cbModelParam._m0[30u].z, fma(_1386, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1385)) - _1354;
        float _1398 = fma(_1387, cbModelParam._m0[31u].z, fma(_1386, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1385)) - _1358;
        float _1399 = fma(_1387, cbModelParam._m0[32u].z, fma(_1386, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1385)) - _1362;
        float _1403 = inversesqrt(dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399)));
        float _1416 = ((_1403 * _1397) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1354 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1417 = ((_1403 * _1398) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1358 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1418 = ((_1403 * _1399) / cbModelParam._m0[35u].z) + ((((((_1362 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        float _1453 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1420.x + (-0.5));
        float _1455 = _1453 * (_1420.y + (-0.5));
        float _1456 = _1453 * (_1420.z + (-0.5));
        float _1463 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1427.x + (-0.5));
        float _1465 = _1463 * (_1427.y + (-0.5));
        float _1466 = _1463 * (_1427.z + (-0.5));
        float _1473 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1434.x + (-0.5));
        float _1475 = _1473 * (_1434.y + (-0.5));
        float _1476 = _1473 * (_1434.z + (-0.5));
        float _1483 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1441.x + (-0.5));
        float _1485 = _1483 * (_1441.y + (-0.5));
        float _1486 = _1483 * (_1441.z + (-0.5));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = _1454 * 0.5;
        float _1491 = _1464 * 0.5;
        float _1492 = _1474 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_795, _796, _797), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4256 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1517 + 1.0))) + _1522) * _1487;
        float _1532 = _1455 * 0.5;
        float _1533 = _1465 * 0.5;
        float _1534 = _1475 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_795, _796, _797), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4289 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1559 + 1.0))) + _1564) * _1488;
        float _1574 = _1456 * 0.5;
        float _1575 = _1466 * 0.5;
        float _1576 = _1476 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_795, _796, _797), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4322 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1601 + 1.0))) + _1606) * _1489;
        _1623 = _1456;
        _1624 = _1455;
        _1625 = _1454;
        _1626 = _1466;
        _1627 = _1465;
        _1628 = _1464;
        _1629 = _1476;
        _1630 = _1475;
        _1631 = _1474;
        _1632 = _1489;
        _1633 = _1488;
        _1634 = _1487;
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1636 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
    }
    else
    {
        _1623 = _1316;
        _1624 = _1316;
        _1625 = _1316;
        _1626 = _1316;
        _1627 = _1316;
        _1628 = _1316;
        _1629 = _1316;
        _1630 = _1316;
        _1631 = _1316;
        _1632 = _1316;
        _1633 = _1316;
        _1634 = _1316;
        _1635 = 0.0;
        _1636 = 0.0;
        _1637 = 0.0;
    }
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1328)) + _1328;
    float _1648 = (cbModelParam._m0[1u].x * (_1636 - _1329)) + _1329;
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1330)) + _1330;
    float _1670 = fma(_1649, cbSceneParam._m0[89u].z, fma(_1648, cbSceneParam._m0[89u].y, _1647 * cbSceneParam._m0[89u].x));
    float _1673 = fma(_1649, cbSceneParam._m0[90u].z, fma(_1648, cbSceneParam._m0[90u].y, _1647 * cbSceneParam._m0[90u].x));
    float _1676 = fma(_1649, cbSceneParam._m0[91u].z, fma(_1648, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1647));
    float _1691 = _953 * 0.5;
    float _1692 = _954 * 0.5;
    float _1693 = _955 * 0.5;
    float _1694 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1697 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1624, _1627, _1630, _1633));
    float _1700 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1734;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1707 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1315, _1319, _1322, _1325));
        float _1711 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1317, _1320, _1323, _1326));
        float _1715 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1318, _1321, _1324, _1327));
        float _1722 = dot(vec4(cbModelParam._m0[39u]), vec4(_1691, _1692, _1693, 1.0));
        _1734 = dot(vec3(isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1722) ? 0.0 : (isnan(0.0) ? _1722 : max(0.0, _1722))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1734 = 1.0;
    }
    float _1745;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1736 = dot(vec4(cbModelParam._m0[40u]), vec4(_1691, _1692, _1693, 1.0));
        _1745 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1736) ? 0.0 : (isnan(0.0) ? _1736 : max(0.0, _1736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1745 = 1.0;
    }
    float _1749 = (_1745 * cbModelParam._m0[1u].x) + (_1734 * (1.0 - cbModelParam._m0[1u].x));
    float _1759 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _798);
    float _1760 = isnan(_1759) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1759 : min(cbModelParam._m0[25u].z, _1759));
    float _1841;
    float _1843;
    float _1845;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1808 = fma(_1014, cbModelParam._m0[13u].z, fma(_1010, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1006)) + cbModelParam._m0[13u].w;
        float _1812 = fma(_1014, cbModelParam._m0[14u].z, fma(_1010, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1006)) + cbModelParam._m0[14u].w;
        float _1816 = fma(_1014, cbModelParam._m0[15u].z, fma(_1010, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1006)) + cbModelParam._m0[15u].w;
        float _1819 = fma(_955, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953));
        float _1822 = fma(_955, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953));
        float _1825 = fma(_955, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953));
        float _1853;
        if (_1819 > 0.0)
        {
            _1853 = abs((1.0 - _1808) / _1819);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1808 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1853 = frontier_phi_14_12_ladder;
        }
        float _2023;
        if (_1822 > 0.0)
        {
            _2023 = abs((1.0 - _1812) / _1822);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1812 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2023 = frontier_phi_23_19_ladder;
        }
        float _2318;
        if (_1825 > 0.0)
        {
            _2318 = abs((1.0 - _1816) / _1825);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1816 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2318 = frontier_phi_35_30_ladder;
        }
        float _2320 = isnan(_2023) ? _1853 : (isnan(_1853) ? _2023 : min(_1853, _2023));
        float _2321 = isnan(_2318) ? _2320 : (isnan(_2320) ? _2318 : min(_2320, _2318));
        float _2325 = (_2321 * _1819) + _1808;
        float _2326 = (_2321 * _1822) + _1812;
        float _2327 = (_2321 * _1825) + _1816;
        float _2328 = _2321 * 9.9999997473787516355514526367188e-05;
        float _2330 = (-1.0) - _2328;
        float _2332 = _2328 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2327 > _2332) || ((_2327 < _2330) || ((_2326 > _2332) || ((_2326 < _2330) || ((_2325 < _2330) || (_2325 > _2332))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2472 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2327, cbModelParam._m0[9u].z, fma(_2326, cbModelParam._m0[9u].y, _2325 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2327, cbModelParam._m0[10u].z, fma(_2326, cbModelParam._m0[10u].y, _2325 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2327, cbModelParam._m0[11u].z, fma(_2326, cbModelParam._m0[11u].y, _2325 * cbModelParam._m0[11u].x))), _1760);
            frontier_phi_13_35_ladder = _2472.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2472.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2472.x * cbModelParam._m0[1u].y;
        }
        _1841 = frontier_phi_13_35_ladder_2;
        _1843 = frontier_phi_13_35_ladder_1;
        _1845 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1829 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_953, _954, _955), _1760);
        _1841 = _1829.x * cbModelParam._m0[1u].y;
        _1843 = _1829.y * cbModelParam._m0[1u].y;
        _1845 = _1829.z * cbModelParam._m0[1u].y;
    }
    float _1849 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _798);
    float _1850 = isnan(_1849) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1849 : min(cbModelParam._m0[25u].w, _1849));
    float _1940;
    float _1942;
    float _1944;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1904 = fma(_1014, cbModelParam._m0[21u].z, fma(_1010, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1006)) + cbModelParam._m0[21u].w;
        float _1908 = fma(_1014, cbModelParam._m0[22u].z, fma(_1010, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1006)) + cbModelParam._m0[22u].w;
        float _1912 = fma(_1014, cbModelParam._m0[23u].z, fma(_1010, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1006)) + cbModelParam._m0[23u].w;
        float _1915 = fma(_955, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953));
        float _1918 = fma(_955, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953));
        float _1921 = fma(_955, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953));
        float _2028;
        if (_1915 > 0.0)
        {
            _2028 = abs((1.0 - _1904) / _1915);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1904 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2028 = frontier_phi_25_21_ladder;
        }
        float _2345;
        if (_1918 > 0.0)
        {
            _2345 = abs((1.0 - _1908) / _1918);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1908 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2345 = frontier_phi_37_32_ladder;
        }
        float _2672;
        if (_1921 > 0.0)
        {
            _2672 = abs((1.0 - _1912) / _1921);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1912 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2672 = frontier_phi_47_44_ladder;
        }
        float _2674 = isnan(_2345) ? _2028 : (isnan(_2028) ? _2345 : min(_2028, _2345));
        float _2675 = isnan(_2672) ? _2674 : (isnan(_2674) ? _2672 : min(_2674, _2672));
        float _2679 = (_2675 * _1915) + _1904;
        float _2680 = (_2675 * _1918) + _1908;
        float _2681 = (_2675 * _1921) + _1912;
        float _2682 = _2675 * 9.9999997473787516355514526367188e-05;
        float _2683 = (-1.0) - _2682;
        float _2685 = _2682 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2681 > _2685) || ((_2681 < _2683) || ((_2680 > _2685) || ((_2680 < _2683) || ((_2679 < _2683) || (_2679 > _2685))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2799 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2681, cbModelParam._m0[17u].z, fma(_2680, cbModelParam._m0[17u].y, _2679 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2681, cbModelParam._m0[18u].z, fma(_2680, cbModelParam._m0[18u].y, _2679 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2681, cbModelParam._m0[19u].z, fma(_2680, cbModelParam._m0[19u].y, _2679 * cbModelParam._m0[19u].x))), _1850);
            frontier_phi_22_47_ladder = _2799.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2799.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2799.x * cbModelParam._m0[1u].z;
        }
        _1940 = frontier_phi_22_47_ladder_2;
        _1942 = frontier_phi_22_47_ladder_1;
        _1944 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_953, _954, _955), _1850);
        _1940 = _1924.x * cbModelParam._m0[1u].z;
        _1942 = _1924.y * cbModelParam._m0[1u].z;
        _1944 = _1924.z * cbModelParam._m0[1u].z;
    }
    float _1956 = ((((1.0 - _974) * ((_961 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_974 * _961)) * _945;
    float _1957 = _1956 * ((cbModelParam._m0[1u].w * (_1940 - _1841)) + _1841);
    float _1958 = _1956 * ((cbModelParam._m0[1u].w * (_1942 - _1843)) + _1843);
    float _1959 = _1956 * ((cbModelParam._m0[1u].w * (_1944 - _1845)) + _1845);
    float _1962 = fma(_1959, cbSceneParam._m0[89u].z, fma(_1958, cbSceneParam._m0[89u].y, _1957 * cbSceneParam._m0[89u].x));
    float _1965 = fma(_1959, cbSceneParam._m0[90u].z, fma(_1958, cbSceneParam._m0[90u].y, _1957 * cbSceneParam._m0[90u].x));
    float _1968 = fma(_1959, cbSceneParam._m0[91u].z, fma(_1958, cbSceneParam._m0[91u].y, _1957 * cbSceneParam._m0[91u].x));
    float _2002 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2006 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2010 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2014 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2015 = _2002 / _2014;
    float _2016 = _2006 / _2014;
    float _2017 = _2010 / _2014;
    float _2164;
    float _2165;
    float _2166;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2044 = ((uint(_2017 > cbSceneParam._m0[59u].y) + uint(_2017 > cbSceneParam._m0[59u].x)) + uint(_2017 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2045 = _2044 + 43u;
        uint _2053 = _2044 + 44u;
        uint _2061 = _2044 + 45u;
        uint _2069 = _2044 + 46u;
        float _2080 = fma(_2014, cbSceneParam._m0[_2045].w, fma(_2010, cbSceneParam._m0[_2045].z, fma(_2006, cbSceneParam._m0[_2045].y, _2002 * cbSceneParam._m0[_2045].x)));
        float _2084 = fma(_2014, cbSceneParam._m0[_2053].w, fma(_2010, cbSceneParam._m0[_2053].z, fma(_2006, cbSceneParam._m0[_2053].y, _2002 * cbSceneParam._m0[_2053].x)));
        float _2092 = fma(_2014, cbSceneParam._m0[_2069].w, fma(_2010, cbSceneParam._m0[_2069].z, fma(_2006, cbSceneParam._m0[_2069].y, _2002 * cbSceneParam._m0[_2069].x)));
        float _2097 = cbSceneParam._m0[33u].z * _2092;
        float _2099 = cbSceneParam._m0[33u].w * _2092;
        float _2102 = fma(_2014, cbSceneParam._m0[_2061].w, fma(_2010, cbSceneParam._m0[_2061].z, fma(_2006, cbSceneParam._m0[_2061].y, _2002 * cbSceneParam._m0[_2061].x))) / _2092;
        float _2150 = (cbSceneParam._m0[33u].x - sqrt(((_2016 * _2016) + (_2015 * _2015)) + (_2017 * _2017))) * cbSceneParam._m0[33u].y;
        float _4448 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2157 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2097 + _2080) / _2092, (_2099 + _2084) / _2092), _2102), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2099 + _2080) / _2092, (_2084 - _2097) / _2092), _2102), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2080 - _2097) / _2092, (_2084 - _2099) / _2092), _2102), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2080 - _2099) / _2092, (_2097 + _2084) / _2092), _2102), 0.0)).x), vec4(0.25)));
        _2164 = 1.0 - (_2157 * cbSceneParam._m0[34u].x);
        _2165 = 1.0 - (_2157 * cbSceneParam._m0[34u].y);
        _2166 = 1.0 - (_2157 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2164 = 1.0;
        _2165 = 1.0;
        _2166 = 1.0;
    }
    float _2230;
    float _2232;
    float _2234;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2218 = fma(_2014, cbSceneParam._m0[63u].w, fma(_2010, cbSceneParam._m0[63u].z, fma(_2006, cbSceneParam._m0[63u].y, _2002 * cbSceneParam._m0[63u].x)));
        float _2219 = fma(_2014, cbSceneParam._m0[60u].w, fma(_2010, cbSceneParam._m0[60u].z, fma(_2006, cbSceneParam._m0[60u].y, _2002 * cbSceneParam._m0[60u].x))) / _2218;
        float _2220 = fma(_2014, cbSceneParam._m0[61u].w, fma(_2010, cbSceneParam._m0[61u].z, fma(_2006, cbSceneParam._m0[61u].y, _2002 * cbSceneParam._m0[61u].x))) / _2218;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2219 >= cbSceneParam._m0[64u].x) && (_2220 >= cbSceneParam._m0[64u].y)) && (_2219 <= cbSceneParam._m0[64u].z)) && (_2220 <= cbSceneParam._m0[64u].w))
        {
            float _2358 = fma(_2014, cbSceneParam._m0[62u].w, fma(_2010, cbSceneParam._m0[62u].z, fma(_2006, cbSceneParam._m0[62u].y, _2002 * cbSceneParam._m0[62u].x))) / _2218;
            float _2362 = isnan(cbSceneParam._m0[41u].w) ? _2358 : (isnan(_2358) ? cbSceneParam._m0[41u].w : max(_2358, cbSceneParam._m0[41u].w));
            float _2405 = (cbSceneParam._m0[33u].x - sqrt(((_2016 * _2016) + (_2015 * _2015)) + (_2017 * _2017))) * cbSceneParam._m0[33u].y;
            float _4464 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
            float _2412 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2219, cbSceneParam._m0[33u].w + _2220), _2362), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2219, _2220 - cbSceneParam._m0[33u].z), _2362), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2219 - cbSceneParam._m0[33u].z, _2220 - cbSceneParam._m0[33u].w), _2362), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2219 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2220), _2362), 0.0)).x), vec4(0.25)));
            float _2416 = 1.0 - (_2412 * cbSceneParam._m0[34u].x);
            float _2417 = 1.0 - (_2412 * cbSceneParam._m0[34u].y);
            float _2418 = 1.0 - (_2412 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2418) ? _2166 : (isnan(_2166) ? _2418 : min(_2166, _2418));
            frontier_phi_34_33_ladder_1 = isnan(_2417) ? _2165 : (isnan(_2165) ? _2417 : min(_2165, _2417));
            frontier_phi_34_33_ladder_2 = isnan(_2416) ? _2164 : (isnan(_2164) ? _2416 : min(_2164, _2416));
        }
        else
        {
            frontier_phi_34_33_ladder = _2166;
            frontier_phi_34_33_ladder_1 = _2165;
            frontier_phi_34_33_ladder_2 = _2164;
        }
        _2230 = frontier_phi_34_33_ladder_2;
        _2232 = frontier_phi_34_33_ladder_1;
        _2234 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2230 = _2164;
        _2232 = _2165;
        _2234 = _2166;
    }
    uvec4 _2239 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2241 = _2239.x * 14u;
    uint _2242 = _2241 + 13u;
    float _2249 = _945 + (-1.0);
    float _2254 = (cbLight._m0[_2242].x * _2249) + 1.0;
    float _2255 = (cbLight._m0[_2242].y * _2249) + 1.0;
    float _2256 = (cbLight._m0[_2242].z * _2249) + 1.0;
    float _2257 = (cbLight._m0[_2242].w * _2249) + 1.0;
    uint _2258 = _2241 + 5u;
    float _2264 = isnan(1.0) ? _2255 : (isnan(_2255) ? 1.0 : min(_2255, 1.0));
    uint _2268 = _2241 + 4u;
    float _2277 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
    uint _2281 = _2241 | 1u;
    float _2292 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_795, _796, _797));
    float _2295 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_795, _796, _797));
    float _4500 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _4511 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2300 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * 0.3183098733425140380859375;
    float _2302 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * 0.3183098733425140380859375;
    float _2309 = ((cbLight._m0[_2258].x * _2264) * _2302) + (((cbLight._m0[_2268].x * _2230) * _2277) * _2300);
    float _2310 = ((_2264 * cbLight._m0[_2258].y) * _2302) + (((cbLight._m0[_2268].y * _2232) * _2277) * _2300);
    float _2311 = ((_2264 * cbLight._m0[_2258].z) * _2302) + (((cbLight._m0[_2268].z * _2234) * _2277) * _2300);
    uvec4 _2315 = floatBitsToUint(cbLight._m0[_2241 + 12u]);
    bool _2317 = _2315.x == 0u;
    float _2419;
    float _2421;
    float _2423;
    if (_2317)
    {
        _2419 = _2309;
        _2421 = _2310;
        _2423 = _2311;
    }
    else
    {
        uint _2427 = _2241 + 6u;
        float _2443 = (dot(vec3(cbLight._m0[_2241 + 2u].xyz), vec3(_795, _796, _797)) * 0.5) + 0.5;
        float _2444 = _2443 * _2443;
        float _4522 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2445 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2446 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
        _2419 = (((cbLight._m0[_2427].x * 0.3183098733425140380859375) * _2445) * _2446) + _2309;
        _2421 = (((cbLight._m0[_2427].y * 0.3183098733425140380859375) * _2445) * _2446) + _2310;
        _2423 = (((cbLight._m0[_2427].z * 0.3183098733425140380859375) * _2445) * _2446) + _2311;
    }
    bool _2426 = _2315.y == 0u;
    float _2481;
    float _2483;
    float _2485;
    if (_2426)
    {
        _2481 = _2419;
        _2483 = _2421;
        _2485 = _2423;
    }
    else
    {
        uint _2643 = _2241 + 7u;
        float _2659 = (dot(vec3(cbLight._m0[_2241 + 3u].xyz), vec3(_795, _796, _797)) * 0.5) + 0.5;
        float _2660 = _2659 * _2659;
        float _4538 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2661 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2662 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
        _2481 = (((cbLight._m0[_2643].x * 0.3183098733425140380859375) * _2661) * _2662) + _2419;
        _2483 = (((cbLight._m0[_2643].y * 0.3183098733425140380859375) * _2661) * _2662) + _2421;
        _2485 = (((cbLight._m0[_2643].z * 0.3183098733425140380859375) * _2661) * _2662) + _2423;
    }
    uint _2488 = _2241 + 8u;
    float _2501 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _798) * 0.949999988079071044921875);
    float _2502 = _2501 * _2501;
    float _2503 = cbLight._m0[_2241].x + _874;
    float _2504 = cbLight._m0[_2241].y + _875;
    float _2505 = cbLight._m0[_2241].z + _876;
    float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
    float _2510 = _2509 * _2503;
    float _2511 = _2509 * _2504;
    float _2512 = _2509 * _2505;
    float _2513 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2241].xyz));
    float _4554 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2516 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _4565 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _2517 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2518 = dot(vec3(_795, _796, _797), vec3(_2510, _2511, _2512));
    float _4576 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2521 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _2522 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2510, _2511, _2512));
    float _4587 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2526 = _2502 * _2502;
    float _2530 = ((_2521 * _2521) * (_2526 + (-1.0))) + 1.0;
    float _2541 = (exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2542 = 1.0 - _2502;
    float _2553 = (0.5 / (((_2517 * ((_2516 * _2542) + _2502)) + 9.9999999392252902907785028219223e-09) + (((_2517 * _2542) + _2502) * _2516))) * _2516;
    float _4598 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2555 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2526 / ((_2530 * _2530) * 3.141590118408203125));
    uint _2569 = _2241 + 9u;
    float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _798) * 0.949999988079071044921875);
    float _2581 = _2580 * _2580;
    float _2582 = cbLight._m0[_2281].x + _874;
    float _2583 = cbLight._m0[_2281].y + _875;
    float _2584 = cbLight._m0[_2281].z + _876;
    float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
    float _2589 = _2588 * _2582;
    float _2590 = _2588 * _2583;
    float _2591 = _2588 * _2584;
    float _2592 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2281].xyz));
    float _4609 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2595 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2596 = dot(vec3(_795, _796, _797), vec3(_2589, _2590, _2591));
    float _4620 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2599 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
    float _2600 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2589, _2590, _2591));
    float _4631 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2604 = _2581 * _2581;
    float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
    float _2617 = (exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2618 = 1.0 - _2581;
    float _2628 = (0.5 / (((_2517 * ((_2595 * _2618) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2517 * _2618) + _2581) * _2595))) * _2595;
    float _4642 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2630 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
    float _2640 = (((_2617 * cbLight._m0[_2569].x) * _2630) * _2264) + ((((cbLight._m0[_2488].x * _2230) * _2541) * _2555) * _2277);
    float _2641 = (((_2617 * cbLight._m0[_2569].y) * _2630) * _2264) + ((((cbLight._m0[_2488].y * _2232) * _2541) * _2555) * _2277);
    float _2642 = (((_2617 * cbLight._m0[_2569].z) * _2630) * _2264) + ((((cbLight._m0[_2488].z * _2234) * _2541) * _2555) * _2277);
    float _2698;
    float _2700;
    float _2702;
    if (_2317)
    {
        _2698 = _2640;
        _2700 = _2641;
        _2702 = _2642;
    }
    else
    {
        uint _2704 = _2241 + 2u;
        uint _2708 = _2241 + 10u;
        float _2722 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2704].w)) * _798) * 0.949999988079071044921875);
        float _2723 = _2722 * _2722;
        float _2724 = cbLight._m0[_2704].x + _874;
        float _2725 = cbLight._m0[_2704].y + _875;
        float _2726 = cbLight._m0[_2704].z + _876;
        float _2730 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
        float _2731 = _2730 * _2724;
        float _2732 = _2730 * _2725;
        float _2733 = _2730 * _2726;
        float _2734 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2704].xyz));
        float _4653 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2738 = dot(vec3(_795, _796, _797), vec3(_2731, _2732, _2733));
        float _4664 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2741 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2742 = dot(vec3(cbLight._m0[_2704].xyz), vec3(_2731, _2732, _2733));
        float _4675 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2746 = _2723 * _2723;
        float _2750 = ((_2741 * _2741) * (_2746 + (-1.0))) + 1.0;
        float _2759 = (exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2760 = 1.0 - _2723;
        float _2770 = (0.5 / (((_2517 * ((_2737 * _2760) + _2723)) + 9.9999999392252902907785028219223e-09) + (((_2517 * _2760) + _2723) * _2737))) * _2737;
        float _4686 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2772 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2746 / ((_2750 * _2750) * 3.141590118408203125));
        float _2773 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
        _2698 = (((_2759 * cbLight._m0[_2708].x) * _2772) * _2773) + _2640;
        _2700 = (((_2759 * cbLight._m0[_2708].y) * _2772) * _2773) + _2641;
        _2702 = (((_2759 * cbLight._m0[_2708].z) * _2772) * _2773) + _2642;
    }
    float _2804;
    float _2806;
    float _2808;
    if (_2426)
    {
        _2804 = _2698;
        _2806 = _2700;
        _2808 = _2702;
    }
    else
    {
        uint _2815 = _2241 + 3u;
        uint _2819 = _2241 + 11u;
        float _2833 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2815].w)) * _798) * 0.949999988079071044921875);
        float _2834 = _2833 * _2833;
        float _2835 = cbLight._m0[_2815].x + _874;
        float _2836 = cbLight._m0[_2815].y + _875;
        float _2837 = cbLight._m0[_2815].z + _876;
        float _2841 = inversesqrt(dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837)));
        float _2842 = _2841 * _2835;
        float _2843 = _2841 * _2836;
        float _2844 = _2841 * _2837;
        float _2845 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2815].xyz));
        float _4702 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2848 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2849 = dot(vec3(_795, _796, _797), vec3(_2842, _2843, _2844));
        float _4713 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2852 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2853 = dot(vec3(cbLight._m0[_2815].xyz), vec3(_2842, _2843, _2844));
        float _4724 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2857 = _2834 * _2834;
        float _2861 = ((_2852 * _2852) * (_2857 + (-1.0))) + 1.0;
        float _2870 = (exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2871 = 1.0 - _2834;
        float _2881 = (0.5 / (((_2517 * ((_2848 * _2871) + _2834)) + 9.9999999392252902907785028219223e-09) + (((_2517 * _2871) + _2834) * _2848))) * _2848;
        float _4735 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2883 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2857 / ((_2861 * _2861) * 3.141590118408203125));
        float _2884 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
        _2804 = (((_2870 * cbLight._m0[_2819].x) * _2883) * _2884) + _2698;
        _2806 = (((_2870 * cbLight._m0[_2819].y) * _2883) * _2884) + _2700;
        _2808 = (((_2870 * cbLight._m0[_2819].z) * _2883) * _2884) + _2702;
    }
    float _2950;
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    float _2960;
    if (_2239.y == 0u)
    {
        uvec4 _2905 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2906 = _2905.x;
        uint _2917 = uint((float(_2905.y) * floor(float(uint(cbSceneParam._m0[85u].y * _883) / _2906))) + floor(float(uint(cbSceneParam._m0[85u].x * _882) / _2906)));
        float _2927 = (log2(_2017 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2928 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        uint _2931 = uint(isnan(14.0) ? _2928 : (isnan(_2928) ? 14.0 : min(_2928, 14.0)));
        uvec4 _2936 = texelFetch(g_lightClusterGridBuffer, int(((_2931 << 2u) + (_2917 << 6u)) >> 2u));
        uint _2937 = _2936.x;
        uint _2938 = _2905.z;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        if (((((1u << ((_2938 >> 4u) & 15u)) + 4294967295u) & _2937) == 0u) || ((_2938 & 240u) == 0u))
        {
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
        }
        else
        {
            float _3018;
            float _3020;
            float _3022;
            float _3024;
            float _3026;
            float _3028;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            uint _3168 = 0u;
            uint _3177;
            bool _3178;
            for (;;)
            {
                _3177 = texelFetch(g_lightClassification, int((((_2931 << 5u) + (_2917 << 9u)) + (_3168 << 2u)) >> 2u)).x;
                _3178 = _3177 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3178)
                {
                    frontier_phi_66_pred = _3167;
                    frontier_phi_66_pred_1 = _3166;
                    frontier_phi_66_pred_2 = _3165;
                    frontier_phi_66_pred_3 = _3164;
                    frontier_phi_66_pred_4 = _3163;
                    frontier_phi_66_pred_5 = _3162;
                }
                else
                {
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    uint _3292;
                    _3286 = _3162;
                    _3287 = _3163;
                    _3288 = _3164;
                    _3289 = _3165;
                    _3290 = _3166;
                    _3291 = _3167;
                    _3292 = _3177;
                    float _3218;
                    float _3219;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    for (;;)
                    {
                        uint _3296 = uint(findLSB(_3292)) + (_3168 << 5u);
                        uint _3293 = (_3292 + 4294967295u) & _3292;
                        uint _3298 = _3296 * 48u;
                        vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3298)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 3u)).x));
                        uint _3318 = (_3296 * 48u) + 4u;
                        vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 3u)).x));
                        uint _3337 = (_3296 * 48u) + 8u;
                        vec3 _3348 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3337)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 2u)).x));
                        float _3352 = _3312.x - _2015;
                        float _3353 = _3312.y - _2016;
                        float _3354 = _3312.z - _2017;
                        float _3355 = dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354));
                        float _3358 = inversesqrt(_3355);
                        float _3359 = _3358 * _3352;
                        float _3360 = _3358 * _3353;
                        float _3361 = _3358 * _3354;
                        float _3362 = dot(vec3(_901, _904, _907), vec3(_3359, _3360, _3361));
                        float _3367 = 1.0 - (_3355 * _3312.w);
                        float _4761 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3368 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3369 = sqrt(_3355) * _3331.w;
                        float _3372 = 1.39999997615814208984375 / (_3369 + 1.39999997615814208984375);
                        float _3373 = _3372 * _3372;
                        float _3376 = ((1.0 - _3373) * _3362) + _3373;
                        float _3379 = _3369 * _3369;
                        float _3383 = ((isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0))) * _3368) / ((_3379 * 0.699999988079071044921875) + 1.0);
                        float _3387 = (-0.0) - _2015;
                        float _3388 = (-0.0) - _2016;
                        float _3389 = (-0.0) - _2017;
                        float _3393 = inversesqrt(dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389)));
                        float _3394 = _3393 * _3387;
                        float _3395 = _3393 * _3388;
                        float _3396 = _3393 * _3389;
                        float _3403 = exp2(log2(1.0 / ((_3379 * 3.5) + 5.0)) * 0.25);
                        float _3404 = 1.0 - _961;
                        float _3411 = sqrt(1.0 - ((1.0 - (_3404 * _3404)) * (1.0 - (_3403 * _3403))));
                        float _3412 = _3411 * _3411;
                        float _3413 = _3412 * _3412;
                        float _3414 = _3394 + _3359;
                        float _3415 = _3395 + _3360;
                        float _3416 = _3396 + _3361;
                        float _3420 = inversesqrt(dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416)));
                        float _3424 = dot(vec3(_901, _904, _907), vec3(_3394, _3395, _3396));
                        float _4777 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3427 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3428 = dot(vec3(_901, _904, _907), vec3(_3420 * _3414, _3420 * _3415, _3420 * _3416));
                        float _4788 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3431 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                        float _3435 = ((_3431 * _3431) * (_3413 + (-1.0))) + 1.0;
                        float _3436 = _3372 * _3412;
                        float _3437 = _3436 * _3436;
                        float _3440 = ((1.0 - _3437) * _3362) + _3437;
                        float _4799 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3441 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3442 = 1.0 - _3412;
                        float _3452 = (0.5 / (((_3441 * ((_3427 * _3442) + _3412)) + 9.9999999392252902907785028219223e-09) + (((_3441 * _3442) + _3412) * _3427))) * _3441;
                        float _4810 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3463 = (((_3413 * 3.1415927410125732421875) * (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) / ((_3435 * _3435) * ((_3379 * 2.1991131305694580078125) + 3.141590118408203125))) * _3368;
                        _3221 = (_3383 * _3331.x) + _3289;
                        _3222 = (_3383 * _3331.y) + _3290;
                        _3223 = (_3383 * _3331.z) + _3291;
                        _3218 = (_3463 * _3348.x) + _3286;
                        _3219 = (_3463 * _3348.y) + _3287;
                        _3220 = (_3463 * _3348.z) + _3288;
                        if (_3293 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3286 = _3218;
                            _3287 = _3219;
                            _3288 = _3220;
                            _3289 = _3221;
                            _3290 = _3222;
                            _3291 = _3223;
                            _3292 = _3293;
                        }
                    }
                    frontier_phi_66_pred = _3223;
                    frontier_phi_66_pred_1 = _3222;
                    frontier_phi_66_pred_2 = _3221;
                    frontier_phi_66_pred_3 = _3220;
                    frontier_phi_66_pred_4 = _3219;
                    frontier_phi_66_pred_5 = _3218;
                }
                _3028 = frontier_phi_66_pred;
                _3026 = frontier_phi_66_pred_1;
                _3024 = frontier_phi_66_pred_2;
                _3022 = frontier_phi_66_pred_3;
                _3020 = frontier_phi_66_pred_4;
                _3018 = frontier_phi_66_pred_5;
                uint _3169 = _3168 + 1u;
                if (_3169 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3162 = _3018;
                    _3163 = _3020;
                    _3164 = _3022;
                    _3165 = _3024;
                    _3166 = _3026;
                    _3167 = _3028;
                    _3168 = _3169;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
        }
        uvec4 _3031 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3032 = _3031.z;
        uint _3034 = (_3032 >> 8u) & 15u;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        if (((4294967295u << _3034) & _2937) == 0u)
        {
            _3130 = _3017;
            _3132 = _3019;
            _3134 = _3021;
            _3136 = _3023;
            _3138 = _3025;
            _3140 = _3027;
        }
        else
        {
            float _3155 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
            float _3156 = _3155 * _2015;
            float _3157 = _3155 * _2016;
            float _3158 = _3155 * _2017;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3034 < ((_3032 >> 12u) & 15u))
            {
                float _3131;
                float _3133;
                float _3135;
                float _3137;
                float _3139;
                float _3141;
                float _3269 = _3017;
                float _3270 = _3019;
                float _3271 = _3021;
                float _3272 = _3023;
                float _3273 = _3025;
                float _3274 = _3027;
                uint _3275 = _3034;
                uint _3284;
                bool _3285;
                for (;;)
                {
                    _3284 = texelFetch(g_lightClassification, int((((_2931 << 5u) + (_2917 << 9u)) + (_3275 << 2u)) >> 2u)).x;
                    _3285 = _3284 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3285)
                    {
                        frontier_phi_72_pred = _3274;
                        frontier_phi_72_pred_1 = _3273;
                        frontier_phi_72_pred_2 = _3272;
                        frontier_phi_72_pred_3 = _3271;
                        frontier_phi_72_pred_4 = _3270;
                        frontier_phi_72_pred_5 = _3269;
                    }
                    else
                    {
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3481 = _3269;
                        float _3482 = _3270;
                        float _3483 = _3271;
                        float _3484 = _3272;
                        float _3485 = _3273;
                        float _3486 = _3274;
                        uint _3487 = _3284;
                        uint _3488;
                        vec4 _3513;
                        float _3514;
                        vec4 _3529;
                        vec3 _3541;
                        vec4 _3556;
                        vec4 _3571;
                        float _3617;
                        bool _3618;
                        for (;;)
                        {
                            uint _3498 = ((_3275 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3487));
                            _3488 = (_3487 + 4294967295u) & _3487;
                            uint _3500 = _3498 * 40u;
                            _3513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3500 + 3u)).x));
                            _3514 = _3513.w;
                            uint _3516 = (_3498 * 40u) + 4u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3531 = (_3498 * 40u) + 8u;
                            _3541 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x));
                            uint _3543 = (_3498 * 40u) + 16u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3558 = (_3498 * 40u) + 20u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3573 = (_3498 * 40u) + 24u;
                            vec4 _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            uint _3592 = (_3498 * 40u) + 28u;
                            vec4 _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            _3617 = fma(_2017, _3605.z, fma(_2016, _3605.y, _3605.x * _2015)) + _3605.w;
                            _3618 = !((fma(_2017, _3586.z, fma(_2016, _3586.y, _3586.x * _2015)) + _3586.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3618)
                            {
                                float _3645 = _3513.x - _2015;
                                float _3646 = _3513.y - _2016;
                                float _3647 = _3513.z - _2017;
                                float _3648 = dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647));
                                float _3651 = inversesqrt(_3648);
                                float _3652 = _3651 * _3645;
                                float _3653 = _3651 * _3646;
                                float _3654 = _3651 * _3647;
                                float _3658 = 1.0 - (_3648 / (_3514 * _3514));
                                float _4821 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3663 = sqrt(_3648) * _3529.w;
                                float _3665 = 1.39999997615814208984375 / (_3663 + 1.39999997615814208984375);
                                float _3666 = _3665 * _3665;
                                float _3669 = ((1.0 - _3666) * dot(vec3(_3652, _3653, _3654), vec3(_901, _904, _907))) + _3666;
                                float _3672 = _3663 * _3663;
                                float _3676 = (fma(_2017, _3556.z, fma(_2016, _3556.y, _3556.x * _2015)) + _3556.w) / _3617;
                                float _3677 = (fma(_2017, _3571.z, fma(_2016, _3571.y, _3571.x * _2015)) + _3571.w) / _3617;
                                float _3681 = 1.0 - dot(vec2(_3676, _3677), vec2(_3676, _3677));
                                float _4837 = isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0));
                                float _3682 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3683 = _3682 * (((isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0))) * _3659) / ((_3672 * 0.699999988079071044921875) + 1.0));
                                float _3695 = exp2(log2(1.0 / ((_3672 * 3.5) + 5.0)) * 0.25);
                                float _3696 = 1.0 - _961;
                                float _3703 = sqrt(1.0 - ((1.0 - (_3696 * _3696)) * (1.0 - (_3695 * _3695))));
                                float _3704 = _3703 * _3703;
                                float _3705 = _3704 * _3704;
                                float _3706 = _3652 - _3156;
                                float _3707 = _3653 - _3157;
                                float _3708 = _3654 - _3158;
                                float _3712 = inversesqrt(dot(vec3(_3706, _3707, _3708), vec3(_3706, _3707, _3708)));
                                float _3716 = dot(vec3(_901, _904, _907), vec3((-0.0) - _3156, (-0.0) - _3157, (-0.0) - _3158));
                                float _4848 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3719 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3720 = dot(vec3(_901, _904, _907), vec3(_3712 * _3706, _3712 * _3707, _3712 * _3708));
                                float _4859 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3723 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3727 = ((_3723 * _3723) * (_3705 + (-1.0))) + 1.0;
                                float _3728 = _3665 * _3704;
                                float _3729 = _3728 * _3728;
                                float _3735 = ((1.0 - _3729) * dot(vec3(_901, _904, _907), vec3(_3652, _3653, _3654))) + _3729;
                                float _4870 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3736 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3737 = 1.0 - _3704;
                                float _3747 = (0.5 / (((_3736 * ((_3719 * _3737) + _3704)) + 9.9999999392252902907785028219223e-09) + (((_3736 * _3737) + _3704) * _3719))) * _3736;
                                float _4881 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3757 = (_3682 * _3659) * (((_3705 * 3.1415927410125732421875) * (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) / ((_3727 * _3727) * ((_3672 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3683 * _3529.y;
                                frontier_phi_78_pred_1 = _3683 * _3529.x;
                                frontier_phi_78_pred_2 = _3757 * _3541.z;
                                frontier_phi_78_pred_3 = _3757 * _3541.y;
                                frontier_phi_78_pred_4 = _3757 * _3541.x;
                                frontier_phi_78_pred_5 = _3683 * _3529.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3765 = frontier_phi_78_pred;
                            _3764 = frontier_phi_78_pred_1;
                            _3763 = frontier_phi_78_pred_2;
                            _3762 = frontier_phi_78_pred_3;
                            _3761 = frontier_phi_78_pred_4;
                            _3766 = frontier_phi_78_pred_5;
                            _3471 = _3764 + _3484;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            if (_3488 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3488;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3473;
                        frontier_phi_72_pred_1 = _3472;
                        frontier_phi_72_pred_2 = _3471;
                        frontier_phi_72_pred_3 = _3470;
                        frontier_phi_72_pred_4 = _3469;
                        frontier_phi_72_pred_5 = _3468;
                    }
                    _3141 = frontier_phi_72_pred;
                    _3139 = frontier_phi_72_pred_1;
                    _3137 = frontier_phi_72_pred_2;
                    _3135 = frontier_phi_72_pred_3;
                    _3133 = frontier_phi_72_pred_4;
                    _3131 = frontier_phi_72_pred_5;
                    uint _3276 = _3275 + 1u;
                    if (_3276 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3269 = _3131;
                        _3270 = _3133;
                        _3271 = _3135;
                        _3272 = _3137;
                        _3273 = _3139;
                        _3274 = _3141;
                        _3275 = _3276;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3141;
                frontier_phi_60_61_ladder_1 = _3139;
                frontier_phi_60_61_ladder_2 = _3135;
                frontier_phi_60_61_ladder_3 = _3133;
                frontier_phi_60_61_ladder_4 = _3131;
                frontier_phi_60_61_ladder_5 = _3137;
            }
            else
            {
                frontier_phi_60_61_ladder = _3027;
                frontier_phi_60_61_ladder_1 = _3025;
                frontier_phi_60_61_ladder_2 = _3021;
                frontier_phi_60_61_ladder_3 = _3019;
                frontier_phi_60_61_ladder_4 = _3017;
                frontier_phi_60_61_ladder_5 = _3023;
            }
            _3130 = frontier_phi_60_61_ladder_4;
            _3132 = frontier_phi_60_61_ladder_3;
            _3134 = frontier_phi_60_61_ladder_2;
            _3136 = frontier_phi_60_61_ladder_5;
            _3138 = frontier_phi_60_61_ladder_1;
            _3140 = frontier_phi_60_61_ladder;
        }
        float _3145 = isnan(1.0) ? _945 : (isnan(_945) ? 1.0 : min(_945, 1.0));
        _2950 = (_3145 * _3136) + _2481;
        _2952 = (_3145 * _3138) + _2483;
        _2954 = (_3145 * _3140) + _2485;
        _2956 = ((_3130 * 0.039999999105930328369140625) * _3145) + _2804;
        _2958 = ((_3132 * 0.039999999105930328369140625) * _3145) + _2806;
        _2960 = ((_3134 * 0.039999999105930328369140625) * _3145) + _2808;
    }
    else
    {
        _2950 = _2481;
        _2952 = _2483;
        _2954 = _2485;
        _2956 = _2804;
        _2958 = _2806;
        _2960 = _2808;
    }
    float _4897 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _4908 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _4919 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    uint _2980 = _253 + 6u;
    float _2988 = _882 / cbSceneParam._m0[86u].x;
    float _2989 = _883 / cbSceneParam._m0[86u].y;
    vec4 _3003 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2988, _2989, (log2((isnan(cbSceneParam._m0[77u].w) ? _816 : (isnan(_816) ? cbSceneParam._m0[77u].w : min(_816, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3005 = _3003.x;
    float _3006 = _3003.y;
    float _3007 = _3003.z;
    float _3008 = _3003.w;
    float _3080;
    float _3082;
    float _3084;
    float _3086;
    if (_816 > cbSceneParam._m0[78u].w)
    {
        float _3042 = isnan(_816) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _816 : min(cbSceneParam._m0[80u].w, _816));
        float _3043 = _3042 / _816;
        float _3054 = _3043 * _867;
        float _3055 = _868 * _3043;
        float _3056 = (-0.0) - _3055;
        float _3058 = _3043 * _869;
        float _3060 = (cbSceneParam._m0[77u].w * _3056) / _3042;
        float _3061 = _3060 + cbSceneParam._m0[79u].w;
        float _3062 = cbSceneParam._m0[79u].w - _3055;
        float _3068 = sqrt(((_3054 * _3054) + (_3055 * _3055)) + (_3058 * _3058));
        float _3071 = (1.0 - (cbSceneParam._m0[77u].w / _3042)) * _3068;
        float _3076 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3078 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3231;
        if (abs((_3056 - _3060) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3231 = ((((_3061 > 0.0) ? exp2(_3076 * _3061) : (2.0 - exp2(_3078 * _3061))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3071;
        }
        else
        {
            float _3191 = 1.0 / cbSceneParam._m0[80u].x;
            float _3192 = isnan(_3062) ? _3061 : (isnan(_3061) ? _3062 : max(_3061, _3062));
            float _3193 = isnan(_3062) ? _3061 : (isnan(_3061) ? _3062 : min(_3061, _3062));
            float _3202 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : min(_3192, 0.0));
            float _3203 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : min(_3193, 0.0));
            _3231 = ((abs(_3068 / _3056) * cbSceneParam._m0[80u].y) * ((((_3202 - _3203) * 2.0) - ((exp2(_3076 * (isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0)))) - exp2(_3076 * (isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0))))) * _3191)) - ((exp2(_3078 * _3202) - exp2(_3078 * _3203)) * _3191))) + (_3071 * cbSceneParam._m0[80u].z);
        }
        vec4 _3233 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2988, _2989, 1.0), 0.0);
        float _3242 = exp2((_3231 * (-1.44269502162933349609375)) * (1.0 - _3233.w));
        float _3243 = log2(_3242);
        float _3259 = log2(_3008);
        _3080 = (exp2(_3259 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3243 * cbSceneParam._m0[78u].x)) * _3233.x) / cbSceneParam._m0[78u].x)) + _3005;
        _3082 = (exp2(_3259 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3243 * cbSceneParam._m0[78u].y)) * _3233.y) / cbSceneParam._m0[78u].y)) + _3006;
        _3084 = (exp2(_3259 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3243 * cbSceneParam._m0[78u].z)) * _3233.z) / cbSceneParam._m0[78u].z)) + _3007;
        _3086 = _3242 * _3008;
    }
    else
    {
        _3080 = _3005;
        _3082 = _3006;
        _3084 = _3007;
        _3086 = _3008;
    }
    float _3098 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3099 = _3098 == 3.0;
    float _3100 = log2(_3086);
    float _3107 = exp2(_3100 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2950 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _945))) + ((_2956 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1749)) * cbPerFrame._m0[3u].x));
    float _3108 = exp2(_3100 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2952 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _945))) + ((_2958 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1749)) * cbPerFrame._m0[3u].x));
    float _3109 = exp2(_3100 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (_2954 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _945))) + ((_2960 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1749)) * cbPerFrame._m0[3u].x));
    float _3118 = (_3098 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3118 * (_3099 ? _3107 : (_3107 + (cbSceneParam._m0[72u].w * _3080)));
    SV_Target.y = _3118 * (_3099 ? _3108 : (_3108 + (cbSceneParam._m0[72u].w * _3082)));
    SV_Target.z = _3118 * (_3099 ? _3109 : (_3109 + (cbSceneParam._m0[72u].w * _3084)));
    SV_Target.w = cbInstanceData._m0[_2980].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2980].w;
}


