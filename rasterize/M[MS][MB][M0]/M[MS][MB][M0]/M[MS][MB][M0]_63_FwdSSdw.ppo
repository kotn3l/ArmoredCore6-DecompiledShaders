#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _997;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _265 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _271 = _265.x * cbMtdParam._m0[11u].x;
    float _272 = _265.y * cbMtdParam._m0[11u].y;
    float _273 = _265.z * cbMtdParam._m0[11u].z;
    vec4 _292 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _244) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _245) + cbTextureTilingScale._m0[5u].w));
    vec4 _330 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _332 = _330.x;
    float _342 = dot(vec4(_332, _330.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _359 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_332 - _342) * cbMtdParam._m0[24u].x) + _342) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3330 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _360 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
    float _367 = (_360 * ((_292.x * cbMtdParam._m0[12u].x) - _271)) + _271;
    float _368 = (_360 * ((_292.y * cbMtdParam._m0[12u].y) - _272)) + _272;
    float _369 = (_360 * ((_292.z * cbMtdParam._m0[12u].z) - _273)) + _273;
    vec4 _382 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _244) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _245) + cbTextureTilingScale._m0[4u].w));
    vec4 _399 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _401 = _399.x;
    float _402 = _399.y;
    float _403 = _399.z;
    float _412 = ((_382.z - _403) * _360) + _403;
    float _415 = ((((_382.x - _401) * _360) + _401) * 2.0) + (-1.0);
    float _417 = ((((_382.y - _402) * _360) + _402) * 2.0) + (-1.0);
    float _418 = dot(vec2(_415, _417), vec2(_415, _417));
    float _3341 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _423 = sqrt(1.0 - (isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))));
    vec4 _439 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _451 = (((_439.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _415;
    float _452 = (((_439.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _417;
    float _456 = (cbMtdParam._m0[19u].w * (_439.z - _412)) + _412;
    float _461 = cbMtdParam._m0[22u].x + _439.w;
    float _464 = fma(_423, _211 * NORMAL.x, fma(_452, _218 * TANGENT.x, (_204 * _196) * _451));
    float _467 = fma(_423, _211 * NORMAL.y, fma(_452, _218 * TANGENT.y, (_204 * _197) * _451));
    float _470 = fma(_423, _211 * NORMAL.z, fma(_452, _218 * TANGENT.z, (_204 * _198) * _451));
    float _474 = inversesqrt(dot(vec3(_464, _467, _470), vec3(_464, _467, _470)));
    float _475 = _474 * _464;
    float _476 = _474 * _467;
    float _477 = _474 * _470;
    float _3352 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _478 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _3363 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3374 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _3385 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _3396 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _496 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _548 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _538);
    float _549 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _538);
    float _550 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _538);
    float _554 = inversesqrt(dot(vec3(_548, _549, _550), vec3(_548, _549, _550)));
    float _555 = _548 * _554;
    float _556 = _549 * _554;
    float _557 = _550 * _554;
    float _563 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _564 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _582 = fma(_477, cbSceneParam._m0[5u].z, fma(_476, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _475));
    float _585 = fma(_477, cbSceneParam._m0[6u].z, fma(_476, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _475));
    float _588 = fma(_477, cbSceneParam._m0[7u].z, fma(_476, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _475));
    uint _602 = (_224 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _608 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) * cbInstanceData._m0[_602].x;
    float _609 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)))) * cbInstanceData._m0[_602].y;
    float _610 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0)))) * cbInstanceData._m0[_602].z;
    float _3407 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _3418 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _3429 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    vec4 _622 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _563, cbSceneParam._m0[86u].y * _564));
    float _626 = ((isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * TEXCOORD_5.w) * _622.x;
    float _627 = dot(vec3(_475, _476, _477), vec3(_555, _556, _557));
    float _630 = _627 * 2.0;
    float _634 = (_630 * _475) - _555;
    float _635 = (_630 * _476) - _556;
    float _636 = (_630 * _477) - _557;
    float _640 = abs(dot(vec3(_555, _556, _557), vec3(_475, _476, _477)));
    float _3440 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _642 = sqrt(_478);
    float _655 = exp2((_642 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_642 * 3.0));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _996;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _721 = fma(_695, cbModelParam._m0[26u].z, fma(_691, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _687));
        float _725 = fma(_695, cbModelParam._m0[27u].z, fma(_691, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _687));
        float _729 = fma(_695, cbModelParam._m0[28u].z, fma(_691, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _687));
        float _754 = _687 + _475;
        float _755 = _691 + _476;
        float _756 = _695 + _477;
        float _766 = fma(_756, cbModelParam._m0[26u].z, fma(_755, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _754)) - _721;
        float _767 = fma(_756, cbModelParam._m0[27u].z, fma(_755, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _754)) - _725;
        float _768 = fma(_756, cbModelParam._m0[28u].z, fma(_755, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _754)) - _729;
        float _772 = inversesqrt(dot(vec3(_766, _767, _768), vec3(_766, _767, _768)));
        float _785 = ((_772 * _766) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_721 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _786 = ((_772 * _767) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_725 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _787 = ((_772 * _768) / cbModelParam._m0[34u].z) + ((((((_729 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        float _824 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_790.x + (-0.5));
        float _826 = _824 * (_790.y + (-0.5));
        float _827 = _824 * (_790.z + (-0.5));
        float _834 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_797.x + (-0.5));
        float _836 = _834 * (_797.y + (-0.5));
        float _837 = _834 * (_797.z + (-0.5));
        float _844 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_804.x + (-0.5));
        float _846 = _844 * (_804.y + (-0.5));
        float _847 = _844 * (_804.z + (-0.5));
        float _854 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_811.x + (-0.5));
        float _856 = _854 * (_811.y + (-0.5));
        float _857 = _854 * (_811.z + (-0.5));
        float _858 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _861 = _825 * 0.5;
        float _862 = _835 * 0.5;
        float _863 = _845 * 0.5;
        float _864 = dot(vec3(_861, _862, _863), vec3(_861, _862, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _878 = (dot(vec3(_475, _476, _477), vec3(_869 * _861, _869 * _862, _869 * _863)) + 1.0) * 0.5;
        float _3466 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _888 = sqrt(((_862 * _862) + (_861 * _861)) + (_863 * _863)) / (_858 + 9.9999997473787516355514526367188e-06);
        float _3477 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3488 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * (_890 + 1.0))) + _895) * _858;
        float _905 = _826 * 0.5;
        float _906 = _836 * 0.5;
        float _907 = _846 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _921 = (dot(vec3(_475, _476, _477), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3499 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _930 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _3510 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _932 = _931 * 2.0;
        float _936 = (1.0 - _931) / (_931 + 1.0);
        float _3521 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _946 = ((((1.0 - _937) * (_932 + 2.0)) * exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * (_932 + 1.0))) + _937) * _859;
        float _947 = _827 * 0.5;
        float _948 = _837 * 0.5;
        float _949 = _847 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _963 = (dot(vec3(_475, _476, _477), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _972 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_860 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3554 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_974 + 1.0))) + _979) * _860;
        _996 = _827;
        _998 = _826;
        _999 = _825;
        _1000 = _837;
        _1001 = _836;
        _1002 = _835;
        _1003 = _847;
        _1004 = _846;
        _1005 = _845;
        _1006 = _860;
        _1007 = _859;
        _1008 = _858;
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
        _1010 = cbModelParam._m0[36u].z * (isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0)));
        _1011 = cbModelParam._m0[36u].z * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
    }
    else
    {
        _996 = _997;
        _998 = _997;
        _999 = _997;
        _1000 = _997;
        _1001 = _997;
        _1002 = _997;
        _1003 = _997;
        _1004 = _997;
        _1005 = _997;
        _1006 = _997;
        _1007 = _997;
        _1008 = _997;
        _1009 = 0.0;
        _1010 = 0.0;
        _1011 = 0.0;
    }
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1036 = fma(_695, cbModelParam._m0[30u].z, fma(_691, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _687));
        float _1040 = fma(_695, cbModelParam._m0[31u].z, fma(_691, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _687));
        float _1044 = fma(_695, cbModelParam._m0[32u].z, fma(_691, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _687));
        float _1067 = _687 + _475;
        float _1068 = _691 + _476;
        float _1069 = _695 + _477;
        float _1079 = fma(_1069, cbModelParam._m0[30u].z, fma(_1068, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1067)) - _1036;
        float _1080 = fma(_1069, cbModelParam._m0[31u].z, fma(_1068, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1067)) - _1040;
        float _1081 = fma(_1069, cbModelParam._m0[32u].z, fma(_1068, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1067)) - _1044;
        float _1085 = inversesqrt(dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081)));
        float _1098 = ((_1085 * _1079) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1036 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1085 * _1080) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1040 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1085 * _1081) / cbModelParam._m0[35u].z) + ((((((_1044 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        float _1135 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1102.x + (-0.5));
        float _1137 = _1135 * (_1102.y + (-0.5));
        float _1138 = _1135 * (_1102.z + (-0.5));
        float _1145 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1109.x + (-0.5));
        float _1147 = _1145 * (_1109.y + (-0.5));
        float _1148 = _1145 * (_1109.z + (-0.5));
        float _1155 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1116.x + (-0.5));
        float _1157 = _1155 * (_1116.y + (-0.5));
        float _1158 = _1155 * (_1116.z + (-0.5));
        float _1165 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1123.x + (-0.5));
        float _1167 = _1165 * (_1123.y + (-0.5));
        float _1168 = _1165 * (_1123.z + (-0.5));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = _1136 * 0.5;
        float _1173 = _1146 * 0.5;
        float _1174 = _1156 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_475, _476, _477), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3617 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_1199 + 1.0))) + _1204) * _1169;
        float _1214 = _1137 * 0.5;
        float _1215 = _1147 * 0.5;
        float _1216 = _1157 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_475, _476, _477), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3650 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1241 + 1.0))) + _1246) * _1170;
        float _1256 = _1138 * 0.5;
        float _1257 = _1148 * 0.5;
        float _1258 = _1158 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_475, _476, _477), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3683 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1283 + 1.0))) + _1288) * _1171;
        _1305 = _1138;
        _1306 = _1137;
        _1307 = _1136;
        _1308 = _1148;
        _1309 = _1147;
        _1310 = _1146;
        _1311 = _1158;
        _1312 = _1157;
        _1313 = _1156;
        _1314 = _1171;
        _1315 = _1170;
        _1316 = _1169;
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
    }
    else
    {
        _1305 = _997;
        _1306 = _997;
        _1307 = _997;
        _1308 = _997;
        _1309 = _997;
        _1310 = _997;
        _1311 = _997;
        _1312 = _997;
        _1313 = _997;
        _1314 = _997;
        _1315 = _997;
        _1316 = _997;
        _1317 = 0.0;
        _1318 = 0.0;
        _1319 = 0.0;
    }
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1009)) + _1009;
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1010)) + _1010;
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1011)) + _1011;
    float _1352 = fma(_1331, cbSceneParam._m0[89u].z, fma(_1330, cbSceneParam._m0[89u].y, _1329 * cbSceneParam._m0[89u].x));
    float _1355 = fma(_1331, cbSceneParam._m0[90u].z, fma(_1330, cbSceneParam._m0[90u].y, _1329 * cbSceneParam._m0[90u].x));
    float _1358 = fma(_1331, cbSceneParam._m0[91u].z, fma(_1330, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1329));
    float _1373 = _634 * 0.5;
    float _1374 = _635 * 0.5;
    float _1375 = _636 * 0.5;
    float _1376 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1379 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1382 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1416;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1389 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_996, _1000, _1003, _1006));
        float _1393 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_998, _1001, _1004, _1007));
        float _1397 = dot(vec4(_1373, _1374, _1375, 1.0), vec4(_999, _1002, _1005, _1008));
        float _1404 = dot(vec4(cbModelParam._m0[39u]), vec4(_1373, _1374, _1375, 1.0));
        _1416 = dot(vec3(isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1404) ? 0.0 : (isnan(0.0) ? _1404 : max(0.0, _1404))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1416 = 1.0;
    }
    float _1427;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1418 = dot(vec4(cbModelParam._m0[40u]), vec4(_1373, _1374, _1375, 1.0));
        _1427 = dot(vec3(isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1418) ? 0.0 : (isnan(0.0) ? _1418 : max(0.0, _1418))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1427 = 1.0;
    }
    float _1431 = (_1427 * cbModelParam._m0[1u].x) + (_1416 * (1.0 - cbModelParam._m0[1u].x));
    float _1441 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _478);
    float _1442 = isnan(_1441) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1441 : min(cbModelParam._m0[25u].z, _1441));
    float _1524;
    float _1526;
    float _1528;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1491 = fma(_695, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687)) + cbModelParam._m0[13u].w;
        float _1495 = fma(_695, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687)) + cbModelParam._m0[14u].w;
        float _1499 = fma(_695, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687)) + cbModelParam._m0[15u].w;
        float _1502 = fma(_636, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634));
        float _1505 = fma(_636, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634));
        float _1508 = fma(_636, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634));
        float _1536;
        if (_1502 > 0.0)
        {
            _1536 = abs((1.0 - _1491) / _1502);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1491 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1536 = frontier_phi_14_12_ladder;
        }
        float _1759;
        if (_1505 > 0.0)
        {
            _1759 = abs((1.0 - _1495) / _1505);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1495 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1759 = frontier_phi_23_19_ladder;
        }
        float _2005;
        if (_1508 > 0.0)
        {
            _2005 = abs((1.0 - _1499) / _1508);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1499 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2005 = frontier_phi_35_30_ladder;
        }
        float _2007 = isnan(_1759) ? _1536 : (isnan(_1536) ? _1759 : min(_1536, _1759));
        float _2008 = isnan(_2005) ? _2007 : (isnan(_2007) ? _2005 : min(_2007, _2005));
        float _2012 = (_2008 * _1502) + _1491;
        float _2013 = (_2008 * _1505) + _1495;
        float _2014 = (_2008 * _1508) + _1499;
        float _2015 = _2008 * 9.9999997473787516355514526367188e-05;
        float _2017 = (-1.0) - _2015;
        float _2019 = _2015 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2014 > _2019) || ((_2014 < _2017) || ((_2013 > _2019) || ((_2013 < _2017) || ((_2012 < _2017) || (_2012 > _2019))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2138 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2014, cbModelParam._m0[9u].z, fma(_2013, cbModelParam._m0[9u].y, _2012 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2014, cbModelParam._m0[10u].z, fma(_2013, cbModelParam._m0[10u].y, _2012 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2014, cbModelParam._m0[11u].z, fma(_2013, cbModelParam._m0[11u].y, _2012 * cbModelParam._m0[11u].x))), _1442);
            frontier_phi_13_35_ladder = _2138.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2138.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2138.x * cbModelParam._m0[1u].y;
        }
        _1524 = frontier_phi_13_35_ladder_2;
        _1526 = frontier_phi_13_35_ladder_1;
        _1528 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1512 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_634, _635, _636), _1442);
        _1524 = _1512.x * cbModelParam._m0[1u].y;
        _1526 = _1512.y * cbModelParam._m0[1u].y;
        _1528 = _1512.z * cbModelParam._m0[1u].y;
    }
    float _1532 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _478);
    float _1533 = isnan(_1532) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1532 : min(cbModelParam._m0[25u].w, _1532));
    float _1624;
    float _1626;
    float _1628;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1588 = fma(_695, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687)) + cbModelParam._m0[21u].w;
        float _1592 = fma(_695, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687)) + cbModelParam._m0[22u].w;
        float _1596 = fma(_695, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687)) + cbModelParam._m0[23u].w;
        float _1599 = fma(_636, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634));
        float _1602 = fma(_636, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634));
        float _1605 = fma(_636, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634));
        float _1764;
        if (_1599 > 0.0)
        {
            _1764 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1764 = frontier_phi_25_21_ladder;
        }
        float _2032;
        if (_1602 > 0.0)
        {
            _2032 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2032 = frontier_phi_37_32_ladder;
        }
        float _2237;
        if (_1605 > 0.0)
        {
            _2237 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2237 = frontier_phi_46_43_ladder;
        }
        float _2239 = isnan(_2032) ? _1764 : (isnan(_1764) ? _2032 : min(_1764, _2032));
        float _2240 = isnan(_2237) ? _2239 : (isnan(_2239) ? _2237 : min(_2239, _2237));
        float _2244 = (_2240 * _1599) + _1588;
        float _2245 = (_2240 * _1602) + _1592;
        float _2246 = (_2240 * _1605) + _1596;
        float _2247 = _2240 * 9.9999997473787516355514526367188e-05;
        float _2248 = (-1.0) - _2247;
        float _2250 = _2247 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2246 > _2250) || ((_2246 < _2248) || ((_2245 > _2250) || ((_2245 < _2248) || ((_2244 < _2248) || (_2244 > _2250))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2445 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2246, cbModelParam._m0[17u].z, fma(_2245, cbModelParam._m0[17u].y, _2244 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2246, cbModelParam._m0[18u].z, fma(_2245, cbModelParam._m0[18u].y, _2244 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2246, cbModelParam._m0[19u].z, fma(_2245, cbModelParam._m0[19u].y, _2244 * cbModelParam._m0[19u].x))), _1533);
            frontier_phi_22_46_ladder = _2445.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2445.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2445.x * cbModelParam._m0[1u].z;
        }
        _1624 = frontier_phi_22_46_ladder_2;
        _1626 = frontier_phi_22_46_ladder_1;
        _1628 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1608 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_634, _635, _636), _1533);
        _1624 = _1608.x * cbModelParam._m0[1u].z;
        _1626 = _1608.y * cbModelParam._m0[1u].z;
        _1628 = _1608.z * cbModelParam._m0[1u].z;
    }
    float _1640 = ((((1.0 - _655) * ((_642 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_655 * _642)) * _626;
    float _1641 = _1640 * ((cbModelParam._m0[1u].w * (_1624 - _1524)) + _1524);
    float _1642 = _1640 * ((cbModelParam._m0[1u].w * (_1626 - _1526)) + _1526);
    float _1643 = _1640 * ((cbModelParam._m0[1u].w * (_1628 - _1528)) + _1528);
    float _1646 = fma(_1643, cbSceneParam._m0[89u].z, fma(_1642, cbSceneParam._m0[89u].y, _1641 * cbSceneParam._m0[89u].x));
    float _1649 = fma(_1643, cbSceneParam._m0[90u].z, fma(_1642, cbSceneParam._m0[90u].y, _1641 * cbSceneParam._m0[90u].x));
    float _1652 = fma(_1643, cbSceneParam._m0[91u].z, fma(_1642, cbSceneParam._m0[91u].y, _1641 * cbSceneParam._m0[91u].x));
    vec4 _1660 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_563, _564));
    float _1662 = _1660.w;
    float _1674 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1662);
    float _1675 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1662);
    float _1676 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1662);
    uvec4 _1680 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1682 = _1680.x * 14u;
    uint _1683 = _1682 + 13u;
    float _1690 = _626 + (-1.0);
    float _1695 = (cbLight._m0[_1683].x * _1690) + 1.0;
    float _1696 = (cbLight._m0[_1683].y * _1690) + 1.0;
    float _1697 = (cbLight._m0[_1683].z * _1690) + 1.0;
    float _1698 = (cbLight._m0[_1683].w * _1690) + 1.0;
    uint _1699 = _1682 + 5u;
    float _1705 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
    uint _1709 = _1682 + 4u;
    float _1718 = isnan(1.0) ? _1695 : (isnan(_1695) ? 1.0 : min(_1695, 1.0));
    uint _1722 = _1682 | 1u;
    float _1733 = dot(vec3(cbLight._m0[_1682].xyz), vec3(_475, _476, _477));
    float _1736 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_475, _476, _477));
    float _3819 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _3830 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1741 = (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * 0.3183098733425140380859375;
    float _1743 = (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.3183098733425140380859375;
    float _1750 = ((cbLight._m0[_1699].x * _1705) * _1743) + (((cbLight._m0[_1709].x * _1674) * _1718) * _1741);
    float _1751 = ((_1705 * cbLight._m0[_1699].y) * _1743) + (((cbLight._m0[_1709].y * _1675) * _1718) * _1741);
    float _1752 = ((_1705 * cbLight._m0[_1699].z) * _1743) + (((cbLight._m0[_1709].z * _1676) * _1718) * _1741);
    uvec4 _1756 = floatBitsToUint(cbLight._m0[_1682 + 12u]);
    bool _1758 = _1756.x == 0u;
    float _1769;
    float _1771;
    float _1773;
    if (_1758)
    {
        _1769 = _1750;
        _1771 = _1751;
        _1773 = _1752;
    }
    else
    {
        uint _1777 = _1682 + 6u;
        float _1793 = (dot(vec3(cbLight._m0[_1682 + 2u].xyz), vec3(_475, _476, _477)) * 0.5) + 0.5;
        float _1794 = _1793 * _1793;
        float _3841 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1796 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
        _1769 = (((cbLight._m0[_1777].x * 0.3183098733425140380859375) * _1795) * _1796) + _1750;
        _1771 = (((cbLight._m0[_1777].y * 0.3183098733425140380859375) * _1795) * _1796) + _1751;
        _1773 = (((cbLight._m0[_1777].z * 0.3183098733425140380859375) * _1795) * _1796) + _1752;
    }
    bool _1776 = _1756.y == 0u;
    float _1814;
    float _1816;
    float _1818;
    if (_1776)
    {
        _1814 = _1769;
        _1816 = _1771;
        _1818 = _1773;
    }
    else
    {
        uint _1976 = _1682 + 7u;
        float _1992 = (dot(vec3(cbLight._m0[_1682 + 3u].xyz), vec3(_475, _476, _477)) * 0.5) + 0.5;
        float _1993 = _1992 * _1992;
        float _3857 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1994 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1995 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _1814 = (((cbLight._m0[_1976].x * 0.3183098733425140380859375) * _1994) * _1995) + _1769;
        _1816 = (((cbLight._m0[_1976].y * 0.3183098733425140380859375) * _1994) * _1995) + _1771;
        _1818 = (((cbLight._m0[_1976].z * 0.3183098733425140380859375) * _1994) * _1995) + _1773;
    }
    uint _1821 = _1682 + 8u;
    float _1834 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1682].w)) * _478) * 0.949999988079071044921875);
    float _1835 = _1834 * _1834;
    float _1836 = cbLight._m0[_1682].x + _555;
    float _1837 = cbLight._m0[_1682].y + _556;
    float _1838 = cbLight._m0[_1682].z + _557;
    float _1842 = inversesqrt(dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838)));
    float _1843 = _1842 * _1836;
    float _1844 = _1842 * _1837;
    float _1845 = _1842 * _1838;
    float _1846 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1682].xyz));
    float _3873 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1849 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _1850 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _1851 = dot(vec3(_475, _476, _477), vec3(_1843, _1844, _1845));
    float _3895 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _1855 = dot(vec3(cbLight._m0[_1682].xyz), vec3(_1843, _1844, _1845));
    float _3906 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1859 = _1835 * _1835;
    float _1863 = ((_1854 * _1854) * (_1859 + (-1.0))) + 1.0;
    float _1874 = (exp2(log2(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1875 = 1.0 - _1835;
    float _1886 = (0.5 / (((_1850 * ((_1849 * _1875) + _1835)) + 9.9999999392252902907785028219223e-09) + (((_1850 * _1875) + _1835) * _1849))) * _1849;
    float _3917 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1888 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1859 / ((_1863 * _1863) * 3.141590118408203125));
    uint _1902 = _1682 + 9u;
    float _1913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1722].w)) * _478) * 0.949999988079071044921875);
    float _1914 = _1913 * _1913;
    float _1915 = cbLight._m0[_1722].x + _555;
    float _1916 = cbLight._m0[_1722].y + _556;
    float _1917 = cbLight._m0[_1722].z + _557;
    float _1921 = inversesqrt(dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917)));
    float _1922 = _1921 * _1915;
    float _1923 = _1921 * _1916;
    float _1924 = _1921 * _1917;
    float _1925 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_1722].xyz));
    float _3928 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1928 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _1929 = dot(vec3(_475, _476, _477), vec3(_1922, _1923, _1924));
    float _3939 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _1933 = dot(vec3(cbLight._m0[_1722].xyz), vec3(_1922, _1923, _1924));
    float _3950 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1937 = _1914 * _1914;
    float _1941 = ((_1932 * _1932) * (_1937 + (-1.0))) + 1.0;
    float _1950 = (exp2(log2(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1951 = 1.0 - _1914;
    float _1961 = (0.5 / (((_1850 * ((_1928 * _1951) + _1914)) + 9.9999999392252902907785028219223e-09) + (((_1850 * _1951) + _1914) * _1928))) * _1928;
    float _3961 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1963 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1937 / ((_1941 * _1941) * 3.141590118408203125));
    float _1973 = (((_1950 * cbLight._m0[_1902].x) * _1963) * _1705) + ((((cbLight._m0[_1821].x * _1674) * _1874) * _1888) * _1718);
    float _1974 = (((_1950 * cbLight._m0[_1902].y) * _1963) * _1705) + ((((cbLight._m0[_1821].y * _1675) * _1874) * _1888) * _1718);
    float _1975 = (((_1950 * cbLight._m0[_1902].z) * _1963) * _1705) + ((((cbLight._m0[_1821].z * _1676) * _1874) * _1888) * _1718);
    float _2037;
    float _2039;
    float _2041;
    if (_1758)
    {
        _2037 = _1973;
        _2039 = _1974;
        _2041 = _1975;
    }
    else
    {
        uint _2043 = _1682 + 2u;
        uint _2047 = _1682 + 10u;
        float _2061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _478) * 0.949999988079071044921875);
        float _2062 = _2061 * _2061;
        float _2063 = cbLight._m0[_2043].x + _555;
        float _2064 = cbLight._m0[_2043].y + _556;
        float _2065 = cbLight._m0[_2043].z + _557;
        float _2069 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
        float _2070 = _2069 * _2063;
        float _2071 = _2069 * _2064;
        float _2072 = _2069 * _2065;
        float _2073 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_2043].xyz));
        float _3972 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _2077 = dot(vec3(_475, _476, _477), vec3(_2070, _2071, _2072));
        float _3983 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2080 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _2081 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2070, _2071, _2072));
        float _3994 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2085 = _2062 * _2062;
        float _2089 = ((_2080 * _2080) * (_2085 + (-1.0))) + 1.0;
        float _2098 = (exp2(log2(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2099 = 1.0 - _2062;
        float _2109 = (0.5 / (((_1850 * ((_2076 * _2099) + _2062)) + 9.9999999392252902907785028219223e-09) + (((_1850 * _2099) + _2062) * _2076))) * _2076;
        float _4005 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2111 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_2085 / ((_2089 * _2089) * 3.141590118408203125));
        float _2112 = isnan(1.0) ? _1697 : (isnan(_1697) ? 1.0 : min(_1697, 1.0));
        _2037 = (((_2098 * cbLight._m0[_2047].x) * _2111) * _2112) + _1973;
        _2039 = (((_2098 * cbLight._m0[_2047].y) * _2111) * _2112) + _1974;
        _2041 = (((_2098 * cbLight._m0[_2047].z) * _2111) * _2112) + _1975;
    }
    float _2147;
    float _2149;
    float _2151;
    if (_1776)
    {
        _2147 = _2037;
        _2149 = _2039;
        _2151 = _2041;
    }
    else
    {
        uint _2158 = _1682 + 3u;
        uint _2162 = _1682 + 11u;
        float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _478) * 0.949999988079071044921875);
        float _2177 = _2176 * _2176;
        float _2178 = cbLight._m0[_2158].x + _555;
        float _2179 = cbLight._m0[_2158].y + _556;
        float _2180 = cbLight._m0[_2158].z + _557;
        float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
        float _2185 = _2184 * _2178;
        float _2186 = _2184 * _2179;
        float _2187 = _2184 * _2180;
        float _2188 = dot(vec3(_475, _476, _477), vec3(cbLight._m0[_2158].xyz));
        float _4021 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2191 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _2192 = dot(vec3(_475, _476, _477), vec3(_2185, _2186, _2187));
        float _4032 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2196 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2185, _2186, _2187));
        float _4043 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2200 = _2177 * _2177;
        float _2204 = ((_2195 * _2195) * (_2200 + (-1.0))) + 1.0;
        float _2213 = (exp2(log2(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2214 = 1.0 - _2177;
        float _2224 = (0.5 / (((_1850 * ((_2191 * _2214) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_1850 * _2214) + _2177) * _2191))) * _2191;
        float _4054 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2226 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_2200 / ((_2204 * _2204) * 3.141590118408203125));
        float _2227 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
        _2147 = (((_2213 * cbLight._m0[_2162].x) * _2226) * _2227) + _2037;
        _2149 = (((_2213 * cbLight._m0[_2162].y) * _2226) * _2227) + _2039;
        _2151 = (((_2213 * cbLight._m0[_2162].z) * _2226) * _2227) + _2041;
    }
    float _2362;
    float _2364;
    float _2366;
    float _2368;
    float _2370;
    float _2372;
    if (_1680.y == 0u)
    {
        float _2302 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2303 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2302;
        float _2304 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2302;
        float _2305 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2302;
        uvec4 _2317 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2318 = _2317.x;
        uint _2329 = uint((float(_2317.y) * floor(float(uint(cbSceneParam._m0[85u].y * _564) / _2318))) + floor(float(uint(cbSceneParam._m0[85u].x * _563) / _2318)));
        float _2339 = (log2(_2305 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2340 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        uint _2343 = uint(isnan(14.0) ? _2340 : (isnan(_2340) ? 14.0 : min(_2340, 14.0)));
        uvec4 _2348 = texelFetch(g_lightClusterGridBuffer, int(((_2343 << 2u) + (_2329 << 6u)) >> 2u));
        uint _2349 = _2348.x;
        uint _2350 = _2317.z;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        if (((((1u << ((_2350 >> 4u) & 15u)) + 4294967295u) & _2349) == 0u) || ((_2350 & 240u) == 0u))
        {
            _2450 = 0.0;
            _2452 = 0.0;
            _2454 = 0.0;
            _2456 = 0.0;
            _2458 = 0.0;
            _2460 = 0.0;
        }
        else
        {
            float _2451;
            float _2453;
            float _2455;
            float _2457;
            float _2459;
            float _2461;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            float _2598 = 0.0;
            float _2599 = 0.0;
            float _2600 = 0.0;
            uint _2601 = 0u;
            uint _2610;
            bool _2611;
            for (;;)
            {
                _2610 = texelFetch(g_lightClassification, int((((_2343 << 5u) + (_2329 << 9u)) + (_2601 << 2u)) >> 2u)).x;
                _2611 = _2610 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2611)
                {
                    frontier_phi_61_pred = _2595;
                    frontier_phi_61_pred_1 = _2600;
                    frontier_phi_61_pred_2 = _2599;
                    frontier_phi_61_pred_3 = _2598;
                    frontier_phi_61_pred_4 = _2597;
                    frontier_phi_61_pred_5 = _2596;
                }
                else
                {
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    uint _2725;
                    _2719 = _2595;
                    _2720 = _2596;
                    _2721 = _2597;
                    _2722 = _2598;
                    _2723 = _2599;
                    _2724 = _2600;
                    _2725 = _2610;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    for (;;)
                    {
                        uint _2729 = uint(findLSB(_2725)) + (_2601 << 5u);
                        uint _2726 = (_2725 + 4294967295u) & _2725;
                        uint _2731 = _2729 * 48u;
                        vec4 _2745 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2731)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 3u)).x));
                        uint _2751 = (_2729 * 48u) + 4u;
                        vec4 _2764 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2751)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2751 + 3u)).x));
                        uint _2770 = (_2729 * 48u) + 8u;
                        vec3 _2781 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x));
                        float _2785 = _2745.x - _2303;
                        float _2786 = _2745.y - _2304;
                        float _2787 = _2745.z - _2305;
                        float _2788 = dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787));
                        float _2791 = inversesqrt(_2788);
                        float _2792 = _2791 * _2785;
                        float _2793 = _2791 * _2786;
                        float _2794 = _2791 * _2787;
                        float _2795 = dot(vec3(_582, _585, _588), vec3(_2792, _2793, _2794));
                        float _2800 = 1.0 - (_2788 * _2745.w);
                        float _4080 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2801 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                        float _2802 = sqrt(_2788) * _2764.w;
                        float _2805 = 1.39999997615814208984375 / (_2802 + 1.39999997615814208984375);
                        float _2806 = _2805 * _2805;
                        float _2809 = ((1.0 - _2806) * _2795) + _2806;
                        float _2812 = _2802 * _2802;
                        float _2816 = ((isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0))) * _2801) / ((_2812 * 0.699999988079071044921875) + 1.0);
                        float _2820 = (-0.0) - _2303;
                        float _2821 = (-0.0) - _2304;
                        float _2822 = (-0.0) - _2305;
                        float _2826 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
                        float _2827 = _2826 * _2820;
                        float _2828 = _2826 * _2821;
                        float _2829 = _2826 * _2822;
                        float _2837 = exp2(log2(1.0 / ((_2812 * 3.5) + 5.0)) * 0.25);
                        float _2838 = 1.0 - _642;
                        float _2845 = sqrt(1.0 - ((1.0 - (_2838 * _2838)) * (1.0 - (_2837 * _2837))));
                        float _2846 = _2845 * _2845;
                        float _2847 = _2846 * _2846;
                        float _2848 = _2827 + _2792;
                        float _2849 = _2828 + _2793;
                        float _2850 = _2829 + _2794;
                        float _2854 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
                        float _2858 = dot(vec3(_582, _585, _588), vec3(_2827, _2828, _2829));
                        float _4096 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2861 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2862 = dot(vec3(_582, _585, _588), vec3(_2854 * _2848, _2854 * _2849, _2854 * _2850));
                        float _4107 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                        float _2865 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                        float _2869 = ((_2865 * _2865) * (_2847 + (-1.0))) + 1.0;
                        float _2870 = _2805 * _2846;
                        float _2871 = _2870 * _2870;
                        float _2874 = ((1.0 - _2871) * _2795) + _2871;
                        float _4118 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2875 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                        float _2876 = 1.0 - _2846;
                        float _2886 = (0.5 / (((_2875 * ((_2861 * _2876) + _2846)) + 9.9999999392252902907785028219223e-09) + (((_2875 * _2876) + _2846) * _2861))) * _2875;
                        float _4129 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                        float _2897 = (((_2847 * 3.1415927410125732421875) * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) / ((_2869 * _2869) * ((_2812 * 2.1991131305694580078125) + 3.141590118408203125))) * _2801;
                        _2654 = (_2816 * _2764.x) + _2722;
                        _2655 = (_2816 * _2764.y) + _2723;
                        _2656 = (_2816 * _2764.z) + _2724;
                        _2651 = (_2897 * _2781.x) + _2719;
                        _2652 = (_2897 * _2781.y) + _2720;
                        _2653 = (_2897 * _2781.z) + _2721;
                        if (_2726 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2719 = _2651;
                            _2720 = _2652;
                            _2721 = _2653;
                            _2722 = _2654;
                            _2723 = _2655;
                            _2724 = _2656;
                            _2725 = _2726;
                        }
                    }
                    frontier_phi_61_pred = _2651;
                    frontier_phi_61_pred_1 = _2656;
                    frontier_phi_61_pred_2 = _2655;
                    frontier_phi_61_pred_3 = _2654;
                    frontier_phi_61_pred_4 = _2653;
                    frontier_phi_61_pred_5 = _2652;
                }
                _2451 = frontier_phi_61_pred;
                _2461 = frontier_phi_61_pred_1;
                _2459 = frontier_phi_61_pred_2;
                _2457 = frontier_phi_61_pred_3;
                _2455 = frontier_phi_61_pred_4;
                _2453 = frontier_phi_61_pred_5;
                uint _2602 = _2601 + 1u;
                if (_2602 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2595 = _2451;
                    _2596 = _2453;
                    _2597 = _2455;
                    _2598 = _2457;
                    _2599 = _2459;
                    _2600 = _2461;
                    _2601 = _2602;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2450 = _2451;
            _2452 = _2453;
            _2454 = _2455;
            _2456 = _2457;
            _2458 = _2459;
            _2460 = _2461;
        }
        uvec4 _2464 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2465 = _2464.z;
        uint _2467 = (_2465 >> 8u) & 15u;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        if (((4294967295u << _2467) & _2349) == 0u)
        {
            _2563 = _2450;
            _2565 = _2452;
            _2567 = _2454;
            _2569 = _2456;
            _2571 = _2458;
            _2573 = _2460;
        }
        else
        {
            float _2588 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
            float _2589 = _2588 * _2303;
            float _2590 = _2588 * _2304;
            float _2591 = _2588 * _2305;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2467 < ((_2465 >> 12u) & 15u))
            {
                float _2564;
                float _2566;
                float _2568;
                float _2570;
                float _2572;
                float _2574;
                float _2702 = _2450;
                float _2703 = _2452;
                float _2704 = _2454;
                float _2705 = _2456;
                float _2706 = _2458;
                float _2707 = _2460;
                uint _2708 = _2467;
                uint _2717;
                bool _2718;
                for (;;)
                {
                    _2717 = texelFetch(g_lightClassification, int((((_2343 << 5u) + (_2329 << 9u)) + (_2708 << 2u)) >> 2u)).x;
                    _2718 = _2717 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2718)
                    {
                        frontier_phi_67_pred = _2705;
                        frontier_phi_67_pred_1 = _2706;
                        frontier_phi_67_pred_2 = _2707;
                        frontier_phi_67_pred_3 = _2704;
                        frontier_phi_67_pred_4 = _2703;
                        frontier_phi_67_pred_5 = _2702;
                    }
                    else
                    {
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _2915 = _2702;
                        float _2916 = _2703;
                        float _2917 = _2704;
                        float _2918 = _2705;
                        float _2919 = _2706;
                        float _2920 = _2707;
                        uint _2921 = _2717;
                        uint _2922;
                        vec4 _2947;
                        float _2948;
                        vec4 _2963;
                        vec3 _2975;
                        vec4 _2990;
                        vec4 _3006;
                        float _3052;
                        bool _3053;
                        for (;;)
                        {
                            uint _2932 = ((_2708 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2921));
                            _2922 = (_2921 + 4294967295u) & _2921;
                            uint _2934 = _2932 * 40u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            _2948 = _2947.w;
                            uint _2950 = (_2932 * 40u) + 4u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2965 = (_2932 * 40u) + 8u;
                            _2975 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x));
                            uint _2977 = (_2932 * 40u) + 16u;
                            _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            uint _2993 = (_2932 * 40u) + 20u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3008 = (_2932 * 40u) + 24u;
                            vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            uint _3027 = (_2932 * 40u) + 28u;
                            vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            _3052 = fma(_2305, _3040.z, fma(_2304, _3040.y, _3040.x * _2303)) + _3040.w;
                            _3053 = !((fma(_2305, _3021.z, fma(_2304, _3021.y, _3021.x * _2303)) + _3021.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3053)
                            {
                                float _3080 = _2947.x - _2303;
                                float _3081 = _2947.y - _2304;
                                float _3082 = _2947.z - _2305;
                                float _3083 = dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082));
                                float _3086 = inversesqrt(_3083);
                                float _3087 = _3086 * _3080;
                                float _3088 = _3086 * _3081;
                                float _3089 = _3086 * _3082;
                                float _3093 = 1.0 - (_3083 / (_2948 * _2948));
                                float _4140 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3094 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                                float _3098 = sqrt(_3083) * _2963.w;
                                float _3100 = 1.39999997615814208984375 / (_3098 + 1.39999997615814208984375);
                                float _3101 = _3100 * _3100;
                                float _3104 = ((1.0 - _3101) * dot(vec3(_3087, _3088, _3089), vec3(_582, _585, _588))) + _3101;
                                float _3107 = _3098 * _3098;
                                float _3111 = (fma(_2305, _2990.z, fma(_2304, _2990.y, _2990.x * _2303)) + _2990.w) / _3052;
                                float _3112 = (fma(_2305, _3006.z, fma(_2304, _3006.y, _3006.x * _2303)) + _3006.w) / _3052;
                                float _3116 = 1.0 - dot(vec2(_3111, _3112), vec2(_3111, _3112));
                                float _4156 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3117 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3118 = _3117 * (((isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0))) * _3094) / ((_3107 * 0.699999988079071044921875) + 1.0));
                                float _3130 = exp2(log2(1.0 / ((_3107 * 3.5) + 5.0)) * 0.25);
                                float _3131 = 1.0 - _642;
                                float _3138 = sqrt(1.0 - ((1.0 - (_3131 * _3131)) * (1.0 - (_3130 * _3130))));
                                float _3139 = _3138 * _3138;
                                float _3140 = _3139 * _3139;
                                float _3141 = _3087 - _2589;
                                float _3142 = _3088 - _2590;
                                float _3143 = _3089 - _2591;
                                float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
                                float _3151 = dot(vec3(_582, _585, _588), vec3((-0.0) - _2589, (-0.0) - _2590, (-0.0) - _2591));
                                float _4167 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3154 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3155 = dot(vec3(_582, _585, _588), vec3(_3147 * _3141, _3147 * _3142, _3147 * _3143));
                                float _4178 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3158 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3162 = ((_3158 * _3158) * (_3140 + (-1.0))) + 1.0;
                                float _3163 = _3100 * _3139;
                                float _3164 = _3163 * _3163;
                                float _3170 = ((1.0 - _3164) * dot(vec3(_582, _585, _588), vec3(_3087, _3088, _3089))) + _3164;
                                float _4189 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3171 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3172 = 1.0 - _3139;
                                float _3182 = (0.5 / (((_3171 * ((_3154 * _3172) + _3139)) + 9.9999999392252902907785028219223e-09) + (((_3171 * _3172) + _3139) * _3154))) * _3171;
                                float _4200 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3192 = (_3117 * _3094) * (((_3140 * 3.1415927410125732421875) * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) / ((_3162 * _3162) * ((_3107 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3192 * _2975.x;
                                frontier_phi_73_pred_1 = _3192 * _2975.y;
                                frontier_phi_73_pred_2 = _3118 * _2963.z;
                                frontier_phi_73_pred_3 = _3118 * _2963.y;
                                frontier_phi_73_pred_4 = _3118 * _2963.x;
                                frontier_phi_73_pred_5 = _3192 * _2975.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3196 = frontier_phi_73_pred;
                            _3197 = frontier_phi_73_pred_1;
                            _3201 = frontier_phi_73_pred_2;
                            _3200 = frontier_phi_73_pred_3;
                            _3199 = frontier_phi_73_pred_4;
                            _3198 = frontier_phi_73_pred_5;
                            _2905 = _3199 + _2918;
                            _2906 = _3200 + _2919;
                            _2907 = _3201 + _2920;
                            _2902 = _3196 + _2915;
                            _2903 = _3197 + _2916;
                            _2904 = _3198 + _2917;
                            if (_2922 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2922;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2905;
                        frontier_phi_67_pred_1 = _2906;
                        frontier_phi_67_pred_2 = _2907;
                        frontier_phi_67_pred_3 = _2904;
                        frontier_phi_67_pred_4 = _2903;
                        frontier_phi_67_pred_5 = _2902;
                    }
                    _2570 = frontier_phi_67_pred;
                    _2572 = frontier_phi_67_pred_1;
                    _2574 = frontier_phi_67_pred_2;
                    _2568 = frontier_phi_67_pred_3;
                    _2566 = frontier_phi_67_pred_4;
                    _2564 = frontier_phi_67_pred_5;
                    uint _2709 = _2708 + 1u;
                    if (_2709 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2702 = _2564;
                        _2703 = _2566;
                        _2704 = _2568;
                        _2705 = _2570;
                        _2706 = _2572;
                        _2707 = _2574;
                        _2708 = _2709;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2572;
                frontier_phi_55_56_ladder_1 = _2574;
                frontier_phi_55_56_ladder_2 = _2570;
                frontier_phi_55_56_ladder_3 = _2568;
                frontier_phi_55_56_ladder_4 = _2566;
                frontier_phi_55_56_ladder_5 = _2564;
            }
            else
            {
                frontier_phi_55_56_ladder = _2458;
                frontier_phi_55_56_ladder_1 = _2460;
                frontier_phi_55_56_ladder_2 = _2456;
                frontier_phi_55_56_ladder_3 = _2454;
                frontier_phi_55_56_ladder_4 = _2452;
                frontier_phi_55_56_ladder_5 = _2450;
            }
            _2563 = frontier_phi_55_56_ladder_5;
            _2565 = frontier_phi_55_56_ladder_4;
            _2567 = frontier_phi_55_56_ladder_3;
            _2569 = frontier_phi_55_56_ladder_2;
            _2571 = frontier_phi_55_56_ladder;
            _2573 = frontier_phi_55_56_ladder_1;
        }
        float _2578 = isnan(1.0) ? _626 : (isnan(_626) ? 1.0 : min(_626, 1.0));
        _2362 = (_2578 * _2569) + _1814;
        _2364 = (_2578 * _2571) + _1816;
        _2366 = (_2578 * _2573) + _1818;
        _2368 = ((_2563 * 0.039999999105930328369140625) * _2578) + _2147;
        _2370 = ((_2565 * 0.039999999105930328369140625) * _2578) + _2149;
        _2372 = ((_2567 * 0.039999999105930328369140625) * _2578) + _2151;
    }
    else
    {
        _2362 = _1814;
        _2364 = _1816;
        _2366 = _1818;
        _2368 = _2147;
        _2370 = _2149;
        _2372 = _2151;
    }
    float _4216 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4227 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4238 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    uint _2392 = _224 + 6u;
    float _2400 = _563 / cbSceneParam._m0[86u].x;
    float _2401 = _564 / cbSceneParam._m0[86u].y;
    vec4 _2415 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2400, _2401, (log2((isnan(cbSceneParam._m0[77u].w) ? _496 : (isnan(_496) ? cbSceneParam._m0[77u].w : min(_496, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2417 = _2415.x;
    float _2418 = _2415.y;
    float _2419 = _2415.z;
    float _2420 = _2415.w;
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    if (_496 > cbSceneParam._m0[78u].w)
    {
        float _2475 = isnan(_496) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _496 : min(cbSceneParam._m0[80u].w, _496));
        float _2476 = _2475 / _496;
        float _2487 = _2476 * _548;
        float _2488 = _549 * _2476;
        float _2489 = (-0.0) - _2488;
        float _2491 = _2476 * _550;
        float _2493 = (cbSceneParam._m0[77u].w * _2489) / _2475;
        float _2494 = _2493 + cbSceneParam._m0[79u].w;
        float _2495 = cbSceneParam._m0[79u].w - _2488;
        float _2501 = sqrt(((_2487 * _2487) + (_2488 * _2488)) + (_2491 * _2491));
        float _2504 = (1.0 - (cbSceneParam._m0[77u].w / _2475)) * _2501;
        float _2509 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2511 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2664;
        if (abs((_2489 - _2493) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2664 = ((((_2494 > 0.0) ? exp2(_2509 * _2494) : (2.0 - exp2(_2511 * _2494))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2504;
        }
        else
        {
            float _2624 = 1.0 / cbSceneParam._m0[80u].x;
            float _2625 = isnan(_2495) ? _2494 : (isnan(_2494) ? _2495 : max(_2494, _2495));
            float _2626 = isnan(_2495) ? _2494 : (isnan(_2494) ? _2495 : min(_2494, _2495));
            float _2635 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : min(_2625, 0.0));
            float _2636 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : min(_2626, 0.0));
            _2664 = ((abs(_2501 / _2489) * cbSceneParam._m0[80u].y) * ((((_2635 - _2636) * 2.0) - ((exp2(_2509 * (isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0)))) - exp2(_2509 * (isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0))))) * _2624)) - ((exp2(_2511 * _2635) - exp2(_2511 * _2636)) * _2624))) + (_2504 * cbSceneParam._m0[80u].z);
        }
        vec4 _2666 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2400, _2401, 1.0), 0.0);
        float _2675 = exp2((_2664 * (-1.44269502162933349609375)) * (1.0 - _2666.w));
        float _2676 = log2(_2675);
        float _2692 = log2(_2420);
        _2513 = (exp2(_2692 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2676 * cbSceneParam._m0[78u].x)) * _2666.x) / cbSceneParam._m0[78u].x)) + _2417;
        _2515 = (exp2(_2692 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2676 * cbSceneParam._m0[78u].y)) * _2666.y) / cbSceneParam._m0[78u].y)) + _2418;
        _2517 = (exp2(_2692 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2676 * cbSceneParam._m0[78u].z)) * _2666.z) / cbSceneParam._m0[78u].z)) + _2419;
        _2519 = _2675 * _2420;
    }
    else
    {
        _2513 = _2417;
        _2515 = _2418;
        _2517 = _2419;
        _2519 = _2420;
    }
    float _2531 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2532 = _2531 == 3.0;
    float _2533 = log2(_2519);
    float _2540 = exp2(_2533 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2362 + ((isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))) * _626))) + ((_2368 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _1431)) * cbPerFrame._m0[3u].x));
    float _2541 = exp2(_2533 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2364 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _626))) + ((_2370 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1431)) * cbPerFrame._m0[3u].x));
    float _2542 = exp2(_2533 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2366 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _626))) + ((_2372 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1431)) * cbPerFrame._m0[3u].x));
    float _2551 = (_2531 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2551 * (_2532 ? _2540 : (_2540 + (cbSceneParam._m0[72u].w * _2513)));
    SV_Target.y = _2551 * (_2532 ? _2541 : (_2541 + (cbSceneParam._m0[72u].w * _2515)));
    SV_Target.z = _2551 * (_2532 ? _2542 : (_2542 + (cbSceneParam._m0[72u].w * _2517)));
    SV_Target.w = cbInstanceData._m0[_2392].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2392].w;
}


