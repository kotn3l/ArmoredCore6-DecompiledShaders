#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _962;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    uint _220 = uint(roundEven(NORMAL.w)) * 13u;
    uint _226 = _220 + 1u;
    uint _230 = _220 + 2u;
    float _239 = sqrt(((cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x) + (cbInstanceData._m0[_220].x * cbInstanceData._m0[_220].x)) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x));
    float _240 = _239 * TEXCOORD.z;
    float _241 = _239 * TEXCOORD.w;
    vec4 _260 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _266 = _260.x * cbMtdParam._m0[9u].x;
    float _267 = _260.y * cbMtdParam._m0[9u].y;
    float _268 = _260.z * cbMtdParam._m0[9u].z;
    vec4 _286 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _290 = _286.z;
    float _295 = (_286.x * 2.0) + (-1.0);
    float _297 = (_286.y * 2.0) + (-1.0);
    float _298 = dot(vec2(_295, _297), vec2(_295, _297));
    float _3555 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _304 = sqrt(1.0 - (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))));
    float _307 = fma(_304, _208, fma(_297, _215, _295 * _201));
    float _310 = fma(_304, _209, fma(_297, _216, _295 * _202));
    float _313 = fma(_304, _210, fma(_297, _217, _295 * _203));
    float _317 = inversesqrt(dot(vec3(_307, _310, _313), vec3(_307, _310, _313)));
    vec4 _353 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _240) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _241) + cbTextureTilingScale._m0[11u].w));
    float _355 = _353.x;
    float _356 = 1.0 - _355;
    float _365 = (cbMtdParam._m0[19u].x + dot(vec4(_317 * _307, _317 * _310, _317 * _313, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_355 - _356) * cbMtdParam._m0[24u].z) + _356) * cbMtdParam._m0[21u].z);
    float _3566 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _373 = (_366 * (cbMtdParam._m0[17u].x - _266)) + _266;
    float _374 = (_366 * (cbMtdParam._m0[17u].y - _267)) + _267;
    float _375 = (_366 * (cbMtdParam._m0[17u].z - _268)) + _268;
    vec4 _388 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _240) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _241) + cbTextureTilingScale._m0[15u].w));
    float _395 = (_388.x * 2.0) + (-1.0);
    float _396 = (_388.y * 2.0) + (-1.0);
    float _397 = dot(vec2(_395, _396), vec2(_395, _396));
    float _3577 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _405 = ((_388.z - _290) * _366) + _290;
    float _415 = ((sqrt(1.0 - (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) - _304) * _366) + _304;
    float _418 = (((_395 - _295) * _366) + _295) + (cbMtdParam._m0[21u].x * _295);
    float _419 = (((_396 - _297) * _366) + _297) + (cbMtdParam._m0[21u].x * _297);
    float _424 = cbMtdParam._m0[22u].x + _286.w;
    float _427 = fma(_415, _208, fma(_419, _215, _418 * _201));
    float _430 = fma(_415, _209, fma(_419, _216, _418 * _202));
    float _433 = fma(_415, _210, fma(_419, _217, _418 * _203));
    float _437 = inversesqrt(dot(vec3(_427, _430, _433), vec3(_427, _430, _433)));
    float _438 = _437 * _427;
    float _439 = _437 * _430;
    float _440 = _437 * _433;
    float _3588 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _441 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _3599 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3610 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3621 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3632 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _459 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _510 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _500);
    float _511 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _500);
    float _512 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _500);
    float _516 = inversesqrt(dot(vec3(_510, _511, _512), vec3(_510, _511, _512)));
    float _517 = _510 * _516;
    float _518 = _511 * _516;
    float _519 = _512 * _516;
    float _525 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _526 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _547 = fma(_440, cbSceneParam._m0[5u].z, fma(_439, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _438));
    float _550 = fma(_440, cbSceneParam._m0[6u].z, fma(_439, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _438));
    float _553 = fma(_440, cbSceneParam._m0[7u].z, fma(_439, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _438));
    uint _567 = (_220 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _573 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_567].x;
    float _574 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) * cbInstanceData._m0[_567].y;
    float _575 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * cbInstanceData._m0[_567].z;
    float _3643 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _577 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    vec4 _587 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _525, cbSceneParam._m0[86u].y * _526));
    float _591 = ((isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * TEXCOORD_5.w) * _587.x;
    float _592 = dot(vec3(_438, _439, _440), vec3(_517, _518, _519));
    float _595 = _592 * 2.0;
    float _599 = (_595 * _438) - _517;
    float _600 = (_595 * _439) - _518;
    float _601 = (_595 * _440) - _519;
    float _605 = abs(dot(vec3(_517, _518, _519), vec3(_438, _439, _440)));
    float _3676 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _607 = sqrt(_441);
    float _620 = exp2((_607 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_607 * 3.0));
    float _652 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _656 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _961;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _686 = fma(_660, cbModelParam._m0[26u].z, fma(_656, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _652));
        float _690 = fma(_660, cbModelParam._m0[27u].z, fma(_656, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _652));
        float _694 = fma(_660, cbModelParam._m0[28u].z, fma(_656, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _652));
        float _719 = _652 + _438;
        float _720 = _656 + _439;
        float _721 = _660 + _440;
        float _731 = fma(_721, cbModelParam._m0[26u].z, fma(_720, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _719)) - _686;
        float _732 = fma(_721, cbModelParam._m0[27u].z, fma(_720, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _719)) - _690;
        float _733 = fma(_721, cbModelParam._m0[28u].z, fma(_720, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _719)) - _694;
        float _737 = inversesqrt(dot(vec3(_731, _732, _733), vec3(_731, _732, _733)));
        float _750 = ((_737 * _731) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_686 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _751 = ((_737 * _732) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_690 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _752 = ((_737 * _733) / cbModelParam._m0[34u].z) + ((((((_694 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _755 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        vec4 _762 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        vec4 _769 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_750, _751, _752), 0.0);
        float _789 = exp2((_755.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_755.x + (-0.5));
        float _791 = _789 * (_755.y + (-0.5));
        float _792 = _789 * (_755.z + (-0.5));
        float _799 = exp2((_762.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_762.x + (-0.5));
        float _801 = _799 * (_762.y + (-0.5));
        float _802 = _799 * (_762.z + (-0.5));
        float _809 = exp2((_769.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_769.x + (-0.5));
        float _811 = _809 * (_769.y + (-0.5));
        float _812 = _809 * (_769.z + (-0.5));
        float _819 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_776.x + (-0.5));
        float _821 = _819 * (_776.y + (-0.5));
        float _822 = _819 * (_776.z + (-0.5));
        float _823 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _824 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _825 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _826 = _790 * 0.5;
        float _827 = _800 * 0.5;
        float _828 = _810 * 0.5;
        float _829 = dot(vec3(_826, _827, _828), vec3(_826, _827, _828));
        float _834 = (_829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_829);
        float _843 = (dot(vec3(_438, _439, _440), vec3(_834 * _826, _834 * _827, _834 * _828)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _853 = sqrt(((_827 * _827) + (_826 * _826)) + (_828 * _828)) / (_823 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _855 = _854 * 2.0;
        float _859 = (1.0 - _854) / (_854 + 1.0);
        float _3724 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _869 = ((((1.0 - _860) * (_855 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_855 + 1.0))) + _860) * _823;
        float _870 = _791 * 0.5;
        float _871 = _801 * 0.5;
        float _872 = _811 * 0.5;
        float _873 = dot(vec3(_870, _871, _872), vec3(_870, _871, _872));
        float _878 = (_873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_873);
        float _886 = (dot(vec3(_438, _439, _440), vec3(_878 * _870, _878 * _871, _878 * _872)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _895 = sqrt(((_871 * _871) + (_870 * _870)) + (_872 * _872)) / (_824 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3757 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_897 + 1.0))) + _902) * _824;
        float _912 = _792 * 0.5;
        float _913 = _802 * 0.5;
        float _914 = _812 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _928 = (dot(vec3(_438, _439, _440), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _937 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_825 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3790 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_939 + 1.0))) + _944) * _825;
        _961 = _792;
        _963 = _791;
        _964 = _790;
        _965 = _802;
        _966 = _801;
        _967 = _800;
        _968 = _812;
        _969 = _811;
        _970 = _810;
        _971 = _825;
        _972 = _824;
        _973 = _823;
        _974 = cbModelParam._m0[36u].z * (isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0)));
        _975 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
        _976 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
    }
    else
    {
        _961 = _962;
        _963 = _962;
        _964 = _962;
        _965 = _962;
        _966 = _962;
        _967 = _962;
        _968 = _962;
        _969 = _962;
        _970 = _962;
        _971 = _962;
        _972 = _962;
        _973 = _962;
        _974 = 0.0;
        _975 = 0.0;
        _976 = 0.0;
    }
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1001 = fma(_660, cbModelParam._m0[30u].z, fma(_656, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _652));
        float _1005 = fma(_660, cbModelParam._m0[31u].z, fma(_656, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _652));
        float _1009 = fma(_660, cbModelParam._m0[32u].z, fma(_656, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _652));
        float _1032 = _652 + _438;
        float _1033 = _656 + _439;
        float _1034 = _660 + _440;
        float _1044 = fma(_1034, cbModelParam._m0[30u].z, fma(_1033, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1032)) - _1001;
        float _1045 = fma(_1034, cbModelParam._m0[31u].z, fma(_1033, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1032)) - _1005;
        float _1046 = fma(_1034, cbModelParam._m0[32u].z, fma(_1033, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1032)) - _1009;
        float _1050 = inversesqrt(dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046)));
        float _1063 = ((_1050 * _1044) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1001 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1050 * _1045) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1005 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1065 = ((_1050 * _1046) / cbModelParam._m0[35u].z) + ((((((_1009 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1063, _1064, _1065), 0.0);
        float _1100 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1067.x + (-0.5));
        float _1102 = _1100 * (_1067.y + (-0.5));
        float _1103 = _1100 * (_1067.z + (-0.5));
        float _1110 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1074.x + (-0.5));
        float _1112 = _1110 * (_1074.y + (-0.5));
        float _1113 = _1110 * (_1074.z + (-0.5));
        float _1120 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1081.x + (-0.5));
        float _1122 = _1120 * (_1081.y + (-0.5));
        float _1123 = _1120 * (_1081.z + (-0.5));
        float _1130 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1088.x + (-0.5));
        float _1132 = _1130 * (_1088.y + (-0.5));
        float _1133 = _1130 * (_1088.z + (-0.5));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1137 = _1101 * 0.5;
        float _1138 = _1111 * 0.5;
        float _1139 = _1121 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_438, _439, _440), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3853 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1164 + 1.0))) + _1169) * _1134;
        float _1179 = _1102 * 0.5;
        float _1180 = _1112 * 0.5;
        float _1181 = _1122 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_438, _439, _440), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3886 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1206 + 1.0))) + _1211) * _1135;
        float _1221 = _1103 * 0.5;
        float _1222 = _1113 * 0.5;
        float _1223 = _1123 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_438, _439, _440), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1136 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3919 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1248 + 1.0))) + _1253) * _1136;
        _1270 = _1103;
        _1271 = _1102;
        _1272 = _1101;
        _1273 = _1113;
        _1274 = _1112;
        _1275 = _1111;
        _1276 = _1123;
        _1277 = _1122;
        _1278 = _1121;
        _1279 = _1136;
        _1280 = _1135;
        _1281 = _1134;
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1283 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1284 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
    }
    else
    {
        _1270 = _962;
        _1271 = _962;
        _1272 = _962;
        _1273 = _962;
        _1274 = _962;
        _1275 = _962;
        _1276 = _962;
        _1277 = _962;
        _1278 = _962;
        _1279 = _962;
        _1280 = _962;
        _1281 = _962;
        _1282 = 0.0;
        _1283 = 0.0;
        _1284 = 0.0;
    }
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _974)) + _974;
    float _1295 = (cbModelParam._m0[1u].x * (_1283 - _975)) + _975;
    float _1296 = (cbModelParam._m0[1u].x * (_1284 - _976)) + _976;
    float _1317 = fma(_1296, cbSceneParam._m0[89u].z, fma(_1295, cbSceneParam._m0[89u].y, _1294 * cbSceneParam._m0[89u].x));
    float _1320 = fma(_1296, cbSceneParam._m0[90u].z, fma(_1295, cbSceneParam._m0[90u].y, _1294 * cbSceneParam._m0[90u].x));
    float _1323 = fma(_1296, cbSceneParam._m0[91u].z, fma(_1295, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1294));
    float _1338 = _599 * 0.5;
    float _1339 = _600 * 0.5;
    float _1340 = _601 * 0.5;
    float _1341 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1272, _1275, _1278, _1281));
    float _1344 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1271, _1274, _1277, _1280));
    float _1347 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1381;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1354 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_961, _965, _968, _971));
        float _1358 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_963, _966, _969, _972));
        float _1362 = dot(vec4(_1338, _1339, _1340, 1.0), vec4(_964, _967, _970, _973));
        float _1369 = dot(vec4(cbModelParam._m0[39u]), vec4(_1338, _1339, _1340, 1.0));
        _1381 = dot(vec3(isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1369) ? 0.0 : (isnan(0.0) ? _1369 : max(0.0, _1369))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1381 = 1.0;
    }
    float _1392;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1383 = dot(vec4(cbModelParam._m0[40u]), vec4(_1338, _1339, _1340, 1.0));
        _1392 = dot(vec3(isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)), isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)), isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1383) ? 0.0 : (isnan(0.0) ? _1383 : max(0.0, _1383))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1392 = 1.0;
    }
    float _1396 = (_1392 * cbModelParam._m0[1u].x) + (_1381 * (1.0 - cbModelParam._m0[1u].x));
    float _1406 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _441);
    float _1407 = isnan(_1406) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1406 : min(cbModelParam._m0[25u].z, _1406));
    float _1488;
    float _1490;
    float _1492;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1455 = fma(_660, cbModelParam._m0[13u].z, fma(_656, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _652)) + cbModelParam._m0[13u].w;
        float _1459 = fma(_660, cbModelParam._m0[14u].z, fma(_656, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _652)) + cbModelParam._m0[14u].w;
        float _1463 = fma(_660, cbModelParam._m0[15u].z, fma(_656, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _652)) + cbModelParam._m0[15u].w;
        float _1466 = fma(_601, cbModelParam._m0[13u].z, fma(_600, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _599));
        float _1469 = fma(_601, cbModelParam._m0[14u].z, fma(_600, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _599));
        float _1472 = fma(_601, cbModelParam._m0[15u].z, fma(_600, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _599));
        float _1500;
        if (_1466 > 0.0)
        {
            _1500 = abs((1.0 - _1455) / _1466);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1455 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1500 = frontier_phi_14_12_ladder;
        }
        float _1671;
        if (_1469 > 0.0)
        {
            _1671 = abs((1.0 - _1459) / _1469);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1459 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1671 = frontier_phi_23_19_ladder;
        }
        float _1967;
        if (_1472 > 0.0)
        {
            _1967 = abs((1.0 - _1463) / _1472);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1463 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1967 = frontier_phi_35_30_ladder;
        }
        float _1969 = isnan(_1671) ? _1500 : (isnan(_1500) ? _1671 : min(_1500, _1671));
        float _1970 = isnan(_1967) ? _1969 : (isnan(_1969) ? _1967 : min(_1969, _1967));
        float _1974 = (_1970 * _1466) + _1455;
        float _1975 = (_1970 * _1469) + _1459;
        float _1976 = (_1970 * _1472) + _1463;
        float _1977 = _1970 * 9.9999997473787516355514526367188e-05;
        float _1979 = (-1.0) - _1977;
        float _1981 = _1977 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1976 > _1981) || ((_1976 < _1979) || ((_1975 > _1981) || ((_1975 < _1979) || ((_1974 < _1979) || (_1974 > _1981))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2121 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1976, cbModelParam._m0[9u].z, fma(_1975, cbModelParam._m0[9u].y, _1974 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1976, cbModelParam._m0[10u].z, fma(_1975, cbModelParam._m0[10u].y, _1974 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1976, cbModelParam._m0[11u].z, fma(_1975, cbModelParam._m0[11u].y, _1974 * cbModelParam._m0[11u].x))), _1407);
            frontier_phi_13_35_ladder = _2121.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2121.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2121.x * cbModelParam._m0[1u].y;
        }
        _1488 = frontier_phi_13_35_ladder_2;
        _1490 = frontier_phi_13_35_ladder_1;
        _1492 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1476 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_599, _600, _601), _1407);
        _1488 = _1476.x * cbModelParam._m0[1u].y;
        _1490 = _1476.y * cbModelParam._m0[1u].y;
        _1492 = _1476.z * cbModelParam._m0[1u].y;
    }
    float _1496 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _441);
    float _1497 = isnan(_1496) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1496 : min(cbModelParam._m0[25u].w, _1496));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1551 = fma(_660, cbModelParam._m0[21u].z, fma(_656, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _652)) + cbModelParam._m0[21u].w;
        float _1555 = fma(_660, cbModelParam._m0[22u].z, fma(_656, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _652)) + cbModelParam._m0[22u].w;
        float _1559 = fma(_660, cbModelParam._m0[23u].z, fma(_656, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _652)) + cbModelParam._m0[23u].w;
        float _1562 = fma(_601, cbModelParam._m0[21u].z, fma(_600, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _599));
        float _1565 = fma(_601, cbModelParam._m0[22u].z, fma(_600, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _599));
        float _1568 = fma(_601, cbModelParam._m0[23u].z, fma(_600, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _599));
        float _1676;
        if (_1562 > 0.0)
        {
            _1676 = abs((1.0 - _1551) / _1562);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1551 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1676 = frontier_phi_25_21_ladder;
        }
        float _1994;
        if (_1565 > 0.0)
        {
            _1994 = abs((1.0 - _1555) / _1565);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1555 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1994 = frontier_phi_37_32_ladder;
        }
        float _2321;
        if (_1568 > 0.0)
        {
            _2321 = abs((1.0 - _1559) / _1568);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1559 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2321 = frontier_phi_47_44_ladder;
        }
        float _2323 = isnan(_1994) ? _1676 : (isnan(_1676) ? _1994 : min(_1676, _1994));
        float _2324 = isnan(_2321) ? _2323 : (isnan(_2323) ? _2321 : min(_2323, _2321));
        float _2328 = (_2324 * _1562) + _1551;
        float _2329 = (_2324 * _1565) + _1555;
        float _2330 = (_2324 * _1568) + _1559;
        float _2331 = _2324 * 9.9999997473787516355514526367188e-05;
        float _2332 = (-1.0) - _2331;
        float _2334 = _2331 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2330 > _2334) || ((_2330 < _2332) || ((_2329 > _2334) || ((_2329 < _2332) || ((_2328 < _2332) || (_2328 > _2334))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2448 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2330, cbModelParam._m0[17u].z, fma(_2329, cbModelParam._m0[17u].y, _2328 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2330, cbModelParam._m0[18u].z, fma(_2329, cbModelParam._m0[18u].y, _2328 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2330, cbModelParam._m0[19u].z, fma(_2329, cbModelParam._m0[19u].y, _2328 * cbModelParam._m0[19u].x))), _1497);
            frontier_phi_22_47_ladder = _2448.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2448.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2448.x * cbModelParam._m0[1u].z;
        }
        _1587 = frontier_phi_22_47_ladder_2;
        _1589 = frontier_phi_22_47_ladder_1;
        _1591 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1571 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_599, _600, _601), _1497);
        _1587 = _1571.x * cbModelParam._m0[1u].z;
        _1589 = _1571.y * cbModelParam._m0[1u].z;
        _1591 = _1571.z * cbModelParam._m0[1u].z;
    }
    float _1603 = ((((1.0 - _620) * ((_607 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_620 * _607)) * _591;
    float _1604 = _1603 * ((cbModelParam._m0[1u].w * (_1587 - _1488)) + _1488);
    float _1605 = _1603 * ((cbModelParam._m0[1u].w * (_1589 - _1490)) + _1490);
    float _1606 = _1603 * ((cbModelParam._m0[1u].w * (_1591 - _1492)) + _1492);
    float _1609 = fma(_1606, cbSceneParam._m0[89u].z, fma(_1605, cbSceneParam._m0[89u].y, _1604 * cbSceneParam._m0[89u].x));
    float _1612 = fma(_1606, cbSceneParam._m0[90u].z, fma(_1605, cbSceneParam._m0[90u].y, _1604 * cbSceneParam._m0[90u].x));
    float _1615 = fma(_1606, cbSceneParam._m0[91u].z, fma(_1605, cbSceneParam._m0[91u].y, _1604 * cbSceneParam._m0[91u].x));
    float _1650 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1654 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1658 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1662 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1663 = _1650 / _1662;
    float _1664 = _1654 / _1662;
    float _1665 = _1658 / _1662;
    float _1812;
    float _1813;
    float _1814;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1692 = ((uint(_1665 > cbSceneParam._m0[59u].y) + uint(_1665 > cbSceneParam._m0[59u].x)) + uint(_1665 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1693 = _1692 + 43u;
        uint _1701 = _1692 + 44u;
        uint _1709 = _1692 + 45u;
        uint _1717 = _1692 + 46u;
        float _1728 = fma(_1662, cbSceneParam._m0[_1693].w, fma(_1658, cbSceneParam._m0[_1693].z, fma(_1654, cbSceneParam._m0[_1693].y, _1650 * cbSceneParam._m0[_1693].x)));
        float _1732 = fma(_1662, cbSceneParam._m0[_1701].w, fma(_1658, cbSceneParam._m0[_1701].z, fma(_1654, cbSceneParam._m0[_1701].y, _1650 * cbSceneParam._m0[_1701].x)));
        float _1740 = fma(_1662, cbSceneParam._m0[_1717].w, fma(_1658, cbSceneParam._m0[_1717].z, fma(_1654, cbSceneParam._m0[_1717].y, _1650 * cbSceneParam._m0[_1717].x)));
        float _1745 = cbSceneParam._m0[33u].z * _1740;
        float _1747 = cbSceneParam._m0[33u].w * _1740;
        float _1750 = fma(_1662, cbSceneParam._m0[_1709].w, fma(_1658, cbSceneParam._m0[_1709].z, fma(_1654, cbSceneParam._m0[_1709].y, _1650 * cbSceneParam._m0[_1709].x))) / _1740;
        float _1798 = (cbSceneParam._m0[33u].x - sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665))) * cbSceneParam._m0[33u].y;
        float _4045 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1805 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1745 + _1728) / _1740, (_1747 + _1732) / _1740), _1750), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1747 + _1728) / _1740, (_1732 - _1745) / _1740), _1750), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1728 - _1745) / _1740, (_1732 - _1747) / _1740), _1750), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1728 - _1747) / _1740, (_1745 + _1732) / _1740), _1750), 0.0)).x), vec4(0.25)));
        _1812 = 1.0 - (_1805 * cbSceneParam._m0[34u].x);
        _1813 = 1.0 - (_1805 * cbSceneParam._m0[34u].y);
        _1814 = 1.0 - (_1805 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1812 = 1.0;
        _1813 = 1.0;
        _1814 = 1.0;
    }
    float _1878;
    float _1880;
    float _1882;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1866 = fma(_1662, cbSceneParam._m0[63u].w, fma(_1658, cbSceneParam._m0[63u].z, fma(_1654, cbSceneParam._m0[63u].y, _1650 * cbSceneParam._m0[63u].x)));
        float _1867 = fma(_1662, cbSceneParam._m0[60u].w, fma(_1658, cbSceneParam._m0[60u].z, fma(_1654, cbSceneParam._m0[60u].y, _1650 * cbSceneParam._m0[60u].x))) / _1866;
        float _1868 = fma(_1662, cbSceneParam._m0[61u].w, fma(_1658, cbSceneParam._m0[61u].z, fma(_1654, cbSceneParam._m0[61u].y, _1650 * cbSceneParam._m0[61u].x))) / _1866;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1867 >= cbSceneParam._m0[64u].x) && (_1868 >= cbSceneParam._m0[64u].y)) && (_1867 <= cbSceneParam._m0[64u].z)) && (_1868 <= cbSceneParam._m0[64u].w))
        {
            float _2007 = fma(_1662, cbSceneParam._m0[62u].w, fma(_1658, cbSceneParam._m0[62u].z, fma(_1654, cbSceneParam._m0[62u].y, _1650 * cbSceneParam._m0[62u].x))) / _1866;
            float _2011 = isnan(cbSceneParam._m0[41u].w) ? _2007 : (isnan(_2007) ? cbSceneParam._m0[41u].w : max(_2007, cbSceneParam._m0[41u].w));
            float _2054 = (cbSceneParam._m0[33u].x - sqrt(((_1664 * _1664) + (_1663 * _1663)) + (_1665 * _1665))) * cbSceneParam._m0[33u].y;
            float _4061 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
            float _2061 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1867, cbSceneParam._m0[33u].w + _1868), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1867, _1868 - cbSceneParam._m0[33u].z), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1867 - cbSceneParam._m0[33u].z, _1868 - cbSceneParam._m0[33u].w), _2011), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1867 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1868), _2011), 0.0)).x), vec4(0.25)));
            float _2065 = 1.0 - (_2061 * cbSceneParam._m0[34u].x);
            float _2066 = 1.0 - (_2061 * cbSceneParam._m0[34u].y);
            float _2067 = 1.0 - (_2061 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2067) ? _1814 : (isnan(_1814) ? _2067 : min(_1814, _2067));
            frontier_phi_34_33_ladder_1 = isnan(_2066) ? _1813 : (isnan(_1813) ? _2066 : min(_1813, _2066));
            frontier_phi_34_33_ladder_2 = isnan(_2065) ? _1812 : (isnan(_1812) ? _2065 : min(_1812, _2065));
        }
        else
        {
            frontier_phi_34_33_ladder = _1814;
            frontier_phi_34_33_ladder_1 = _1813;
            frontier_phi_34_33_ladder_2 = _1812;
        }
        _1878 = frontier_phi_34_33_ladder_2;
        _1880 = frontier_phi_34_33_ladder_1;
        _1882 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1878 = _1812;
        _1880 = _1813;
        _1882 = _1814;
    }
    uvec4 _1887 = floatBitsToUint(cbInstanceData._m0[_220 + 5u]);
    uint _1889 = _1887.x * 14u;
    uint _1890 = _1889 + 13u;
    float _1897 = _591 + (-1.0);
    float _1902 = (cbLight._m0[_1890].x * _1897) + 1.0;
    float _1903 = (cbLight._m0[_1890].y * _1897) + 1.0;
    float _1904 = (cbLight._m0[_1890].z * _1897) + 1.0;
    float _1905 = (cbLight._m0[_1890].w * _1897) + 1.0;
    uint _1906 = _1889 + 5u;
    float _1912 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
    uint _1916 = _1889 + 4u;
    float _1926 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
    uint _1930 = _1889 | 1u;
    float _1941 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_438, _439, _440));
    float _1944 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_438, _439, _440));
    float _4097 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _4108 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1949 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 0.3183098733425140380859375;
    float _1951 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * 0.3183098733425140380859375;
    float _1958 = ((cbLight._m0[_1906].x * _1912) * _1951) + (((cbLight._m0[_1916].x * _1878) * _1926) * _1949);
    float _1959 = ((_1912 * cbLight._m0[_1906].y) * _1951) + (((cbLight._m0[_1916].y * _1880) * _1926) * _1949);
    float _1960 = ((_1912 * cbLight._m0[_1906].z) * _1951) + (((cbLight._m0[_1916].z * _1882) * _1926) * _1949);
    uvec4 _1964 = floatBitsToUint(cbLight._m0[_1889 + 12u]);
    bool _1966 = _1964.x == 0u;
    float _2068;
    float _2070;
    float _2072;
    if (_1966)
    {
        _2068 = _1958;
        _2070 = _1959;
        _2072 = _1960;
    }
    else
    {
        uint _2076 = _1889 + 6u;
        float _2092 = (dot(vec3(cbLight._m0[_1889 + 2u].xyz), vec3(_438, _439, _440)) * 0.5) + 0.5;
        float _2093 = _2092 * _2092;
        float _4119 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2094 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2095 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2068 = (((cbLight._m0[_2076].x * 0.3183098733425140380859375) * _2094) * _2095) + _1958;
        _2070 = (((cbLight._m0[_2076].y * 0.3183098733425140380859375) * _2094) * _2095) + _1959;
        _2072 = (((cbLight._m0[_2076].z * 0.3183098733425140380859375) * _2094) * _2095) + _1960;
    }
    bool _2075 = _1964.y == 0u;
    float _2130;
    float _2132;
    float _2134;
    if (_2075)
    {
        _2130 = _2068;
        _2132 = _2070;
        _2134 = _2072;
    }
    else
    {
        uint _2292 = _1889 + 7u;
        float _2308 = (dot(vec3(cbLight._m0[_1889 + 3u].xyz), vec3(_438, _439, _440)) * 0.5) + 0.5;
        float _2309 = _2308 * _2308;
        float _4135 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2310 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _2311 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2130 = (((cbLight._m0[_2292].x * 0.3183098733425140380859375) * _2310) * _2311) + _2068;
        _2132 = (((cbLight._m0[_2292].y * 0.3183098733425140380859375) * _2310) * _2311) + _2070;
        _2134 = (((cbLight._m0[_2292].z * 0.3183098733425140380859375) * _2310) * _2311) + _2072;
    }
    uint _2137 = _1889 + 8u;
    float _2150 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1889].w)) * _441) * 0.949999988079071044921875);
    float _2151 = _2150 * _2150;
    float _2152 = cbLight._m0[_1889].x + _517;
    float _2153 = cbLight._m0[_1889].y + _518;
    float _2154 = cbLight._m0[_1889].z + _519;
    float _2158 = inversesqrt(dot(vec3(_2152, _2153, _2154), vec3(_2152, _2153, _2154)));
    float _2159 = _2158 * _2152;
    float _2160 = _2158 * _2153;
    float _2161 = _2158 * _2154;
    float _2162 = dot(vec3(_438, _439, _440), vec3(cbLight._m0[_1889].xyz));
    float _4151 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _4162 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _2166 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2167 = dot(vec3(_438, _439, _440), vec3(_2159, _2160, _2161));
    float _4173 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2171 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_2159, _2160, _2161));
    float _4184 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2175 = _2151 * _2151;
    float _2179 = ((_2170 * _2170) * (_2175 + (-1.0))) + 1.0;
    float _2190 = (exp2(log2(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2191 = 1.0 - _2151;
    float _2202 = (0.5 / (((_2166 * ((_2165 * _2191) + _2151)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2191) + _2151) * _2165))) * _2165;
    float _4195 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2204 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2175 / ((_2179 * _2179) * 3.141590118408203125));
    uint _2218 = _1889 + 9u;
    float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _441) * 0.949999988079071044921875);
    float _2230 = _2229 * _2229;
    float _2231 = cbLight._m0[_1930].x + _517;
    float _2232 = cbLight._m0[_1930].y + _518;
    float _2233 = cbLight._m0[_1930].z + _519;
    float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
    float _2238 = _2237 * _2231;
    float _2239 = _2237 * _2232;
    float _2240 = _2237 * _2233;
    float _2241 = dot(vec3(_438, _439, _440), vec3(cbLight._m0[_1930].xyz));
    float _4206 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2244 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _2245 = dot(vec3(_438, _439, _440), vec3(_2238, _2239, _2240));
    float _4217 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _2249 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2238, _2239, _2240));
    float _4228 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2253 = _2230 * _2230;
    float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
    float _2266 = (exp2(log2(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2267 = 1.0 - _2230;
    float _2277 = (0.5 / (((_2166 * ((_2244 * _2267) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2267) + _2230) * _2244))) * _2244;
    float _4239 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2279 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
    float _2289 = (((_2266 * cbLight._m0[_2218].x) * _2279) * _1912) + ((((cbLight._m0[_2137].x * _1878) * _2190) * _2204) * _1926);
    float _2290 = (((_2266 * cbLight._m0[_2218].y) * _2279) * _1912) + ((((cbLight._m0[_2137].y * _1880) * _2190) * _2204) * _1926);
    float _2291 = (((_2266 * cbLight._m0[_2218].z) * _2279) * _1912) + ((((cbLight._m0[_2137].z * _1882) * _2190) * _2204) * _1926);
    float _2347;
    float _2349;
    float _2351;
    if (_1966)
    {
        _2347 = _2289;
        _2349 = _2290;
        _2351 = _2291;
    }
    else
    {
        uint _2353 = _1889 + 2u;
        uint _2357 = _1889 + 10u;
        float _2371 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2353].w)) * _441) * 0.949999988079071044921875);
        float _2372 = _2371 * _2371;
        float _2373 = cbLight._m0[_2353].x + _517;
        float _2374 = cbLight._m0[_2353].y + _518;
        float _2375 = cbLight._m0[_2353].z + _519;
        float _2379 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
        float _2380 = _2379 * _2373;
        float _2381 = _2379 * _2374;
        float _2382 = _2379 * _2375;
        float _2383 = dot(vec3(_438, _439, _440), vec3(cbLight._m0[_2353].xyz));
        float _4250 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2386 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2387 = dot(vec3(_438, _439, _440), vec3(_2380, _2381, _2382));
        float _4261 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2391 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_2380, _2381, _2382));
        float _4272 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2395 = _2372 * _2372;
        float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
        float _2408 = (exp2(log2(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2409 = 1.0 - _2372;
        float _2419 = (0.5 / (((_2166 * ((_2386 * _2409) + _2372)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2409) + _2372) * _2386))) * _2386;
        float _4283 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2421 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
        float _2422 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2347 = (((_2408 * cbLight._m0[_2357].x) * _2421) * _2422) + _2289;
        _2349 = (((_2408 * cbLight._m0[_2357].y) * _2421) * _2422) + _2290;
        _2351 = (((_2408 * cbLight._m0[_2357].z) * _2421) * _2422) + _2291;
    }
    float _2453;
    float _2455;
    float _2457;
    if (_2075)
    {
        _2453 = _2347;
        _2455 = _2349;
        _2457 = _2351;
    }
    else
    {
        uint _2464 = _1889 + 3u;
        uint _2468 = _1889 + 11u;
        float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2464].w)) * _441) * 0.949999988079071044921875);
        float _2483 = _2482 * _2482;
        float _2484 = cbLight._m0[_2464].x + _517;
        float _2485 = cbLight._m0[_2464].y + _518;
        float _2486 = cbLight._m0[_2464].z + _519;
        float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
        float _2491 = _2490 * _2484;
        float _2492 = _2490 * _2485;
        float _2493 = _2490 * _2486;
        float _2494 = dot(vec3(_438, _439, _440), vec3(cbLight._m0[_2464].xyz));
        float _4299 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2498 = dot(vec3(_438, _439, _440), vec3(_2491, _2492, _2493));
        float _4310 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2501 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2502 = dot(vec3(cbLight._m0[_2464].xyz), vec3(_2491, _2492, _2493));
        float _4321 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2506 = _2483 * _2483;
        float _2510 = ((_2501 * _2501) * (_2506 + (-1.0))) + 1.0;
        float _2519 = (exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2520 = 1.0 - _2483;
        float _2530 = (0.5 / (((_2166 * ((_2497 * _2520) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2166 * _2520) + _2483) * _2497))) * _2497;
        float _4332 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2532 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2506 / ((_2510 * _2510) * 3.141590118408203125));
        float _2533 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2453 = (((_2519 * cbLight._m0[_2468].x) * _2532) * _2533) + _2347;
        _2455 = (((_2519 * cbLight._m0[_2468].y) * _2532) * _2533) + _2349;
        _2457 = (((_2519 * cbLight._m0[_2468].z) * _2532) * _2533) + _2351;
    }
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    float _2609;
    if (_1887.y == 0u)
    {
        uvec4 _2554 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2555 = _2554.x;
        uint _2566 = uint((float(_2554.y) * floor(float(uint(cbSceneParam._m0[85u].y * _526) / _2555))) + floor(float(uint(cbSceneParam._m0[85u].x * _525) / _2555)));
        float _2576 = (log2(_1665 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2577 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        uint _2580 = uint(isnan(14.0) ? _2577 : (isnan(_2577) ? 14.0 : min(_2577, 14.0)));
        uvec4 _2585 = texelFetch(g_lightClusterGridBuffer, int(((_2580 << 2u) + (_2566 << 6u)) >> 2u));
        uint _2586 = _2585.x;
        uint _2587 = _2554.z;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        if (((((1u << ((_2587 >> 4u) & 15u)) + 4294967295u) & _2586) == 0u) || ((_2587 & 240u) == 0u))
        {
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
        }
        else
        {
            float _2667;
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2677;
            float _2811 = 0.0;
            float _2812 = 0.0;
            float _2813 = 0.0;
            float _2814 = 0.0;
            float _2815 = 0.0;
            float _2816 = 0.0;
            uint _2817 = 0u;
            uint _2826;
            bool _2827;
            for (;;)
            {
                _2826 = texelFetch(g_lightClassification, int((((_2580 << 5u) + (_2566 << 9u)) + (_2817 << 2u)) >> 2u)).x;
                _2827 = _2826 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2827)
                {
                    frontier_phi_66_pred = _2816;
                    frontier_phi_66_pred_1 = _2815;
                    frontier_phi_66_pred_2 = _2814;
                    frontier_phi_66_pred_3 = _2813;
                    frontier_phi_66_pred_4 = _2812;
                    frontier_phi_66_pred_5 = _2811;
                }
                else
                {
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    uint _2941;
                    _2935 = _2811;
                    _2936 = _2812;
                    _2937 = _2813;
                    _2938 = _2814;
                    _2939 = _2815;
                    _2940 = _2816;
                    _2941 = _2826;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    for (;;)
                    {
                        uint _2945 = uint(findLSB(_2941)) + (_2817 << 5u);
                        uint _2942 = (_2941 + 4294967295u) & _2941;
                        uint _2947 = _2945 * 48u;
                        vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2947)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 3u)).x));
                        uint _2967 = (_2945 * 48u) + 4u;
                        vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 3u)).x));
                        uint _2986 = (_2945 * 48u) + 8u;
                        vec3 _2997 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2986)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 2u)).x));
                        float _3001 = _2961.x - _1663;
                        float _3002 = _2961.y - _1664;
                        float _3003 = _2961.z - _1665;
                        float _3004 = dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003));
                        float _3007 = inversesqrt(_3004);
                        float _3008 = _3007 * _3001;
                        float _3009 = _3007 * _3002;
                        float _3010 = _3007 * _3003;
                        float _3011 = dot(vec3(_547, _550, _553), vec3(_3008, _3009, _3010));
                        float _3016 = 1.0 - (_3004 * _2961.w);
                        float _4358 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3017 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _3018 = sqrt(_3004) * _2980.w;
                        float _3021 = 1.39999997615814208984375 / (_3018 + 1.39999997615814208984375);
                        float _3022 = _3021 * _3021;
                        float _3025 = ((1.0 - _3022) * _3011) + _3022;
                        float _3028 = _3018 * _3018;
                        float _3032 = ((isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0))) * _3017) / ((_3028 * 0.699999988079071044921875) + 1.0);
                        float _3036 = (-0.0) - _1663;
                        float _3037 = (-0.0) - _1664;
                        float _3038 = (-0.0) - _1665;
                        float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
                        float _3043 = _3042 * _3036;
                        float _3044 = _3042 * _3037;
                        float _3045 = _3042 * _3038;
                        float _3052 = exp2(log2(1.0 / ((_3028 * 3.5) + 5.0)) * 0.25);
                        float _3053 = 1.0 - _607;
                        float _3060 = sqrt(1.0 - ((1.0 - (_3053 * _3053)) * (1.0 - (_3052 * _3052))));
                        float _3061 = _3060 * _3060;
                        float _3062 = _3061 * _3061;
                        float _3063 = _3043 + _3008;
                        float _3064 = _3044 + _3009;
                        float _3065 = _3045 + _3010;
                        float _3069 = inversesqrt(dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065)));
                        float _3073 = dot(vec3(_547, _550, _553), vec3(_3043, _3044, _3045));
                        float _4374 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3076 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                        float _3077 = dot(vec3(_547, _550, _553), vec3(_3069 * _3063, _3069 * _3064, _3069 * _3065));
                        float _4385 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3080 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3084 = ((_3080 * _3080) * (_3062 + (-1.0))) + 1.0;
                        float _3085 = _3021 * _3061;
                        float _3086 = _3085 * _3085;
                        float _3089 = ((1.0 - _3086) * _3011) + _3086;
                        float _4396 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3090 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                        float _3091 = 1.0 - _3061;
                        float _3101 = (0.5 / (((_3090 * ((_3076 * _3091) + _3061)) + 9.9999999392252902907785028219223e-09) + (((_3090 * _3091) + _3061) * _3076))) * _3090;
                        float _4407 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3112 = (((_3062 * 3.1415927410125732421875) * (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) / ((_3084 * _3084) * ((_3028 * 2.1991131305694580078125) + 3.141590118408203125))) * _3017;
                        _2870 = (_3032 * _2980.x) + _2938;
                        _2871 = (_3032 * _2980.y) + _2939;
                        _2872 = (_3032 * _2980.z) + _2940;
                        _2867 = (_3112 * _2997.x) + _2935;
                        _2868 = (_3112 * _2997.y) + _2936;
                        _2869 = (_3112 * _2997.z) + _2937;
                        if (_2942 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2935 = _2867;
                            _2936 = _2868;
                            _2937 = _2869;
                            _2938 = _2870;
                            _2939 = _2871;
                            _2940 = _2872;
                            _2941 = _2942;
                        }
                    }
                    frontier_phi_66_pred = _2872;
                    frontier_phi_66_pred_1 = _2871;
                    frontier_phi_66_pred_2 = _2870;
                    frontier_phi_66_pred_3 = _2869;
                    frontier_phi_66_pred_4 = _2868;
                    frontier_phi_66_pred_5 = _2867;
                }
                _2677 = frontier_phi_66_pred;
                _2675 = frontier_phi_66_pred_1;
                _2673 = frontier_phi_66_pred_2;
                _2671 = frontier_phi_66_pred_3;
                _2669 = frontier_phi_66_pred_4;
                _2667 = frontier_phi_66_pred_5;
                uint _2818 = _2817 + 1u;
                if (_2818 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2811 = _2667;
                    _2812 = _2669;
                    _2813 = _2671;
                    _2814 = _2673;
                    _2815 = _2675;
                    _2816 = _2677;
                    _2817 = _2818;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
        }
        uvec4 _2680 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2681 = _2680.z;
        uint _2683 = (_2681 >> 8u) & 15u;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        if (((4294967295u << _2683) & _2586) == 0u)
        {
            _2779 = _2666;
            _2781 = _2668;
            _2783 = _2670;
            _2785 = _2672;
            _2787 = _2674;
            _2789 = _2676;
        }
        else
        {
            float _2804 = inversesqrt(dot(vec3(_1663, _1664, _1665), vec3(_1663, _1664, _1665)));
            float _2805 = _2804 * _1663;
            float _2806 = _2804 * _1664;
            float _2807 = _2804 * _1665;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2683 < ((_2681 >> 12u) & 15u))
            {
                float _2780;
                float _2782;
                float _2784;
                float _2786;
                float _2788;
                float _2790;
                float _2918 = _2666;
                float _2919 = _2668;
                float _2920 = _2670;
                float _2921 = _2672;
                float _2922 = _2674;
                float _2923 = _2676;
                uint _2924 = _2683;
                uint _2933;
                bool _2934;
                for (;;)
                {
                    _2933 = texelFetch(g_lightClassification, int((((_2580 << 5u) + (_2566 << 9u)) + (_2924 << 2u)) >> 2u)).x;
                    _2934 = _2933 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2934)
                    {
                        frontier_phi_72_pred = _2923;
                        frontier_phi_72_pred_1 = _2922;
                        frontier_phi_72_pred_2 = _2921;
                        frontier_phi_72_pred_3 = _2920;
                        frontier_phi_72_pred_4 = _2919;
                        frontier_phi_72_pred_5 = _2918;
                    }
                    else
                    {
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3130 = _2918;
                        float _3131 = _2919;
                        float _3132 = _2920;
                        float _3133 = _2921;
                        float _3134 = _2922;
                        float _3135 = _2923;
                        uint _3136 = _2933;
                        uint _3137;
                        vec4 _3162;
                        float _3163;
                        vec4 _3178;
                        vec3 _3190;
                        vec4 _3206;
                        vec4 _3222;
                        float _3268;
                        bool _3269;
                        for (;;)
                        {
                            uint _3147 = ((_2924 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3136));
                            _3137 = (_3136 + 4294967295u) & _3136;
                            uint _3149 = _3147 * 40u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            _3163 = _3162.w;
                            uint _3165 = (_3147 * 40u) + 4u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3180 = (_3147 * 40u) + 8u;
                            _3190 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x));
                            uint _3193 = (_3147 * 40u) + 16u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3209 = (_3147 * 40u) + 20u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3224 = (_3147 * 40u) + 24u;
                            vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            uint _3243 = (_3147 * 40u) + 28u;
                            vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            _3268 = fma(_1665, _3256.z, fma(_1664, _3256.y, _3256.x * _1663)) + _3256.w;
                            _3269 = !((fma(_1665, _3237.z, fma(_1664, _3237.y, _3237.x * _1663)) + _3237.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3269)
                            {
                                float _3296 = _3162.x - _1663;
                                float _3297 = _3162.y - _1664;
                                float _3298 = _3162.z - _1665;
                                float _3299 = dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298));
                                float _3302 = inversesqrt(_3299);
                                float _3303 = _3302 * _3296;
                                float _3304 = _3302 * _3297;
                                float _3305 = _3302 * _3298;
                                float _3309 = 1.0 - (_3299 / (_3163 * _3163));
                                float _4418 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3310 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3314 = sqrt(_3299) * _3178.w;
                                float _3316 = 1.39999997615814208984375 / (_3314 + 1.39999997615814208984375);
                                float _3317 = _3316 * _3316;
                                float _3320 = ((1.0 - _3317) * dot(vec3(_3303, _3304, _3305), vec3(_547, _550, _553))) + _3317;
                                float _3323 = _3314 * _3314;
                                float _3327 = (fma(_1665, _3206.z, fma(_1664, _3206.y, _3206.x * _1663)) + _3206.w) / _3268;
                                float _3328 = (fma(_1665, _3222.z, fma(_1664, _3222.y, _3222.x * _1663)) + _3222.w) / _3268;
                                float _3332 = 1.0 - dot(vec2(_3327, _3328), vec2(_3327, _3328));
                                float _4434 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3333 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3334 = _3333 * (((isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0))) * _3310) / ((_3323 * 0.699999988079071044921875) + 1.0));
                                float _3346 = exp2(log2(1.0 / ((_3323 * 3.5) + 5.0)) * 0.25);
                                float _3347 = 1.0 - _607;
                                float _3354 = sqrt(1.0 - ((1.0 - (_3347 * _3347)) * (1.0 - (_3346 * _3346))));
                                float _3355 = _3354 * _3354;
                                float _3356 = _3355 * _3355;
                                float _3357 = _3303 - _2805;
                                float _3358 = _3304 - _2806;
                                float _3359 = _3305 - _2807;
                                float _3363 = inversesqrt(dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359)));
                                float _3367 = dot(vec3(_547, _550, _553), vec3((-0.0) - _2805, (-0.0) - _2806, (-0.0) - _2807));
                                float _4445 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3370 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3371 = dot(vec3(_547, _550, _553), vec3(_3363 * _3357, _3363 * _3358, _3363 * _3359));
                                float _4456 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3374 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3378 = ((_3374 * _3374) * (_3356 + (-1.0))) + 1.0;
                                float _3379 = _3316 * _3355;
                                float _3380 = _3379 * _3379;
                                float _3386 = ((1.0 - _3380) * dot(vec3(_547, _550, _553), vec3(_3303, _3304, _3305))) + _3380;
                                float _4467 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3387 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3388 = 1.0 - _3355;
                                float _3398 = (0.5 / (((_3387 * ((_3370 * _3388) + _3355)) + 9.9999999392252902907785028219223e-09) + (((_3387 * _3388) + _3355) * _3370))) * _3387;
                                float _4478 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3408 = (_3333 * _3310) * (((_3356 * 3.1415927410125732421875) * (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) / ((_3378 * _3378) * ((_3323 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3334 * _3178.y;
                                frontier_phi_78_pred_1 = _3334 * _3178.x;
                                frontier_phi_78_pred_2 = _3408 * _3190.z;
                                frontier_phi_78_pred_3 = _3408 * _3190.y;
                                frontier_phi_78_pred_4 = _3408 * _3190.x;
                                frontier_phi_78_pred_5 = _3334 * _3178.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3416 = frontier_phi_78_pred;
                            _3415 = frontier_phi_78_pred_1;
                            _3414 = frontier_phi_78_pred_2;
                            _3413 = frontier_phi_78_pred_3;
                            _3412 = frontier_phi_78_pred_4;
                            _3417 = frontier_phi_78_pred_5;
                            _3120 = _3415 + _3133;
                            _3121 = _3416 + _3134;
                            _3122 = _3417 + _3135;
                            _3117 = _3412 + _3130;
                            _3118 = _3413 + _3131;
                            _3119 = _3414 + _3132;
                            if (_3137 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3137;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3122;
                        frontier_phi_72_pred_1 = _3121;
                        frontier_phi_72_pred_2 = _3120;
                        frontier_phi_72_pred_3 = _3119;
                        frontier_phi_72_pred_4 = _3118;
                        frontier_phi_72_pred_5 = _3117;
                    }
                    _2790 = frontier_phi_72_pred;
                    _2788 = frontier_phi_72_pred_1;
                    _2786 = frontier_phi_72_pred_2;
                    _2784 = frontier_phi_72_pred_3;
                    _2782 = frontier_phi_72_pred_4;
                    _2780 = frontier_phi_72_pred_5;
                    uint _2925 = _2924 + 1u;
                    if (_2925 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2918 = _2780;
                        _2919 = _2782;
                        _2920 = _2784;
                        _2921 = _2786;
                        _2922 = _2788;
                        _2923 = _2790;
                        _2924 = _2925;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2790;
                frontier_phi_60_61_ladder_1 = _2788;
                frontier_phi_60_61_ladder_2 = _2784;
                frontier_phi_60_61_ladder_3 = _2782;
                frontier_phi_60_61_ladder_4 = _2780;
                frontier_phi_60_61_ladder_5 = _2786;
            }
            else
            {
                frontier_phi_60_61_ladder = _2676;
                frontier_phi_60_61_ladder_1 = _2674;
                frontier_phi_60_61_ladder_2 = _2670;
                frontier_phi_60_61_ladder_3 = _2668;
                frontier_phi_60_61_ladder_4 = _2666;
                frontier_phi_60_61_ladder_5 = _2672;
            }
            _2779 = frontier_phi_60_61_ladder_4;
            _2781 = frontier_phi_60_61_ladder_3;
            _2783 = frontier_phi_60_61_ladder_2;
            _2785 = frontier_phi_60_61_ladder_5;
            _2787 = frontier_phi_60_61_ladder_1;
            _2789 = frontier_phi_60_61_ladder;
        }
        float _2794 = isnan(1.0) ? _591 : (isnan(_591) ? 1.0 : min(_591, 1.0));
        _2599 = (_2794 * _2785) + _2130;
        _2601 = (_2794 * _2787) + _2132;
        _2603 = (_2794 * _2789) + _2134;
        _2605 = ((_2779 * 0.039999999105930328369140625) * _2794) + _2453;
        _2607 = ((_2781 * 0.039999999105930328369140625) * _2794) + _2455;
        _2609 = ((_2783 * 0.039999999105930328369140625) * _2794) + _2457;
    }
    else
    {
        _2599 = _2130;
        _2601 = _2132;
        _2603 = _2134;
        _2605 = _2453;
        _2607 = _2455;
        _2609 = _2457;
    }
    float _4494 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _4505 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _4516 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    uint _2629 = _220 + 6u;
    float _2637 = _525 / cbSceneParam._m0[86u].x;
    float _2638 = _526 / cbSceneParam._m0[86u].y;
    vec4 _2652 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2637, _2638, (log2((isnan(cbSceneParam._m0[77u].w) ? _459 : (isnan(_459) ? cbSceneParam._m0[77u].w : min(_459, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2654 = _2652.x;
    float _2655 = _2652.y;
    float _2656 = _2652.z;
    float _2657 = _2652.w;
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    if (_459 > cbSceneParam._m0[78u].w)
    {
        float _2691 = isnan(_459) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _459 : min(cbSceneParam._m0[80u].w, _459));
        float _2692 = _2691 / _459;
        float _2703 = _2692 * _510;
        float _2704 = _511 * _2692;
        float _2705 = (-0.0) - _2704;
        float _2707 = _2692 * _512;
        float _2709 = (cbSceneParam._m0[77u].w * _2705) / _2691;
        float _2710 = _2709 + cbSceneParam._m0[79u].w;
        float _2711 = cbSceneParam._m0[79u].w - _2704;
        float _2717 = sqrt(((_2703 * _2703) + (_2704 * _2704)) + (_2707 * _2707));
        float _2720 = (1.0 - (cbSceneParam._m0[77u].w / _2691)) * _2717;
        float _2725 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2727 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2880;
        if (abs((_2705 - _2709) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2880 = ((((_2710 > 0.0) ? exp2(_2725 * _2710) : (2.0 - exp2(_2727 * _2710))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2720;
        }
        else
        {
            float _2840 = 1.0 / cbSceneParam._m0[80u].x;
            float _2841 = isnan(_2711) ? _2710 : (isnan(_2710) ? _2711 : max(_2710, _2711));
            float _2842 = isnan(_2711) ? _2710 : (isnan(_2710) ? _2711 : min(_2710, _2711));
            float _2851 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : min(_2841, 0.0));
            float _2852 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : min(_2842, 0.0));
            _2880 = ((abs(_2717 / _2705) * cbSceneParam._m0[80u].y) * ((((_2851 - _2852) * 2.0) - ((exp2(_2725 * (isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0)))) - exp2(_2725 * (isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0))))) * _2840)) - ((exp2(_2727 * _2851) - exp2(_2727 * _2852)) * _2840))) + (_2720 * cbSceneParam._m0[80u].z);
        }
        vec4 _2882 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2637, _2638, 1.0), 0.0);
        float _2891 = exp2((_2880 * (-1.44269502162933349609375)) * (1.0 - _2882.w));
        float _2892 = log2(_2891);
        float _2908 = log2(_2657);
        _2729 = (exp2(_2908 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].x)) * _2882.x) / cbSceneParam._m0[78u].x)) + _2654;
        _2731 = (exp2(_2908 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].y)) * _2882.y) / cbSceneParam._m0[78u].y)) + _2655;
        _2733 = (exp2(_2908 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].z)) * _2882.z) / cbSceneParam._m0[78u].z)) + _2656;
        _2735 = _2891 * _2657;
    }
    else
    {
        _2729 = _2654;
        _2731 = _2655;
        _2733 = _2656;
        _2735 = _2657;
    }
    float _2747 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2748 = _2747 == 3.0;
    float _2749 = log2(_2735);
    float _2756 = exp2(_2749 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2599 + ((isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))) * _591))) + ((_2605 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _1396)) * cbPerFrame._m0[3u].x));
    float _2757 = exp2(_2749 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2601 + ((isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0))) * _591))) + ((_2607 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _1396)) * cbPerFrame._m0[3u].x));
    float _2758 = exp2(_2749 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2603 + ((isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))) * _591))) + ((_2609 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _1396)) * cbPerFrame._m0[3u].x));
    float _2767 = (_2747 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2767 * (_2748 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2729)));
    SV_Target.y = _2767 * (_2748 ? _2757 : (_2757 + (cbSceneParam._m0[72u].w * _2731)));
    SV_Target.z = _2767 * (_2748 ? _2758 : (_2758 + (cbSceneParam._m0[72u].w * _2733)));
    SV_Target.w = cbInstanceData._m0[_2629].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2629].w;
}


