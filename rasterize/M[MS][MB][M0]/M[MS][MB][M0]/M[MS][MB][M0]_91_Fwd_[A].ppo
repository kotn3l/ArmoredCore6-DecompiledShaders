#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1253;
float _3614;
float _3615;
float _3616;
float _3617;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _364 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _364) * cbMtdParam._m0[24u].x) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3626 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _389 = (_382 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _390 = (_382 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _391 = (_382 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _409 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _426 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _428 = _426.x;
    float _429 = _426.y;
    float _430 = _426.z;
    float _439 = ((_409.z - _430) * _382) + _430;
    float _442 = ((((_409.x - _428) * _382) + _428) * 2.0) + (-1.0);
    float _444 = ((((_409.y - _429) * _382) + _429) * 2.0) + (-1.0);
    float _445 = dot(vec2(_442, _444), vec2(_442, _444));
    float _3637 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _450 = sqrt(1.0 - (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))));
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _491 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _493 = _491.x;
    float _494 = 1.0 - _493;
    float _500 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _503 = ((isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : min(_500, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _512 = (_503 - ((((((_493 - _494) * cbMtdParam._m0[24u].z) + _494) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _503))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3658 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _513 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _520 = (_513 * (cbMtdParam._m0[17u].x - _389)) + _389;
    float _521 = (_513 * (cbMtdParam._m0[17u].y - _390)) + _390;
    float _522 = (_513 * (cbMtdParam._m0[17u].z - _391)) + _391;
    vec4 _534 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _536 = _534.x;
    float _537 = 1.0 - _536;
    float _564 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_536 - _537) * cbMtdParam._m0[24u].w) + _537) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3669 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _573 = ((((cbMtdParam._m0[10u].x - _520) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _565) + _520;
    float _574 = ((((cbMtdParam._m0[10u].y - _521) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _565) + _521;
    float _575 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _522)) * _565) + _522;
    float _579 = (cbMtdParam._m0[19u].w * (_466.z - _439)) + _439;
    vec4 _593 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _600 = (_593.x * 2.0) + (-1.0);
    float _601 = (_593.y * 2.0) + (-1.0);
    float _602 = dot(vec2(_600, _601), vec2(_600, _601));
    float _3680 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _610 = (_513 * (_593.z - _579)) + _579;
    float _613 = ((cbMtdParam._m0[23u].y - _610) * _565) + _610;
    vec4 _632 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _638 = (_632.x * 2.0) + (-1.0);
    float _639 = (_632.y * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _3691 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _648 = (((_466.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _442;
    float _649 = (((_466.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _444;
    float _661 = (((_600 - _648) + (cbMtdParam._m0[21u].x * _648)) * _513) + _648;
    float _662 = (((_601 - _649) + (cbMtdParam._m0[21u].x * _649)) * _513) + _649;
    float _663 = (_513 * (sqrt(1.0 - (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) - _450)) + _450;
    float _674 = (((_638 - _661) + (_661 * cbMtdParam._m0[22u].z)) * _565) + _661;
    float _675 = (((_639 - _662) + (_662 * cbMtdParam._m0[22u].z)) * _565) + _662;
    float _676 = ((sqrt(1.0 - (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) - _663) * _565) + _663;
    float _678 = cbMtdParam._m0[22u].x + _466.w;
    float _681 = fma(_676, _234 * NORMAL.x, fma(_675, _241 * TANGENT.x, (_227 * _219) * _674));
    float _684 = fma(_676, _234 * NORMAL.y, fma(_675, _241 * TANGENT.y, (_227 * _220) * _674));
    float _687 = fma(_676, _234 * NORMAL.z, fma(_675, _241 * TANGENT.z, (_227 * _221) * _674));
    float _691 = inversesqrt(dot(vec3(_681, _684, _687), vec3(_681, _684, _687)));
    float _692 = _691 * _681;
    float _693 = _691 * _684;
    float _694 = _691 * _687;
    float _3702 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _695 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _3724 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3735 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _3746 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _713 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _764 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _754);
    float _765 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _754);
    float _766 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _754);
    float _770 = inversesqrt(dot(vec3(_764, _765, _766), vec3(_764, _765, _766)));
    float _771 = _764 * _770;
    float _772 = _765 * _770;
    float _773 = _766 * _770;
    vec4 _778 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _780 = _778.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _934 = sqrt(((_764 * _764) + (_765 * _765)) + (_766 * _766));
        float _940 = (cbMatDynParam._m0[5u].x * _934) + cbMatDynParam._m0[5u].y;
        float _3757 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _945 = (cbMatDynParam._m0[5u].z * _934) + cbMatDynParam._m0[5u].w;
        float _3768 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) - _941)) + _941) < ((_780 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _791 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _792 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _810 = fma(_694, cbSceneParam._m0[5u].z, fma(_693, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _692));
    float _813 = fma(_694, cbSceneParam._m0[6u].z, fma(_693, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _692));
    float _816 = fma(_694, cbSceneParam._m0[7u].z, fma(_693, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _692));
    uint _829 = _247 + 9u;
    uint _830 = _829 + uint(cbMatDynParam._m0[0u].w);
    float _836 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * cbInstanceData._m0[_830].x;
    float _837 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) * cbInstanceData._m0[_830].y;
    float _838 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) * cbInstanceData._m0[_830].z;
    float _3779 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _3790 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _3801 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    vec4 _850 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _791, cbSceneParam._m0[86u].y * _792));
    float _854 = ((isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * TEXCOORD_5.w) * _850.x;
    float _855 = dot(vec3(_692, _693, _694), vec3(_771, _772, _773));
    float _858 = _855 * 2.0;
    float _862 = (_858 * _692) - _771;
    float _863 = (_858 * _693) - _772;
    float _864 = (_858 * _694) - _773;
    float _868 = abs(dot(vec3(_771, _772, _773), vec3(_692, _693, _694)));
    float _3812 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _870 = sqrt(_695);
    float _883 = exp2((_870 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_870 * 3.0));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1252;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _977 = fma(_923, cbModelParam._m0[26u].z, fma(_919, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _915));
        float _981 = fma(_923, cbModelParam._m0[27u].z, fma(_919, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _915));
        float _985 = fma(_923, cbModelParam._m0[28u].z, fma(_919, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _915));
        float _1010 = _915 + _692;
        float _1011 = _919 + _693;
        float _1012 = _923 + _694;
        float _1022 = fma(_1012, cbModelParam._m0[26u].z, fma(_1011, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1010)) - _977;
        float _1023 = fma(_1012, cbModelParam._m0[27u].z, fma(_1011, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1010)) - _981;
        float _1024 = fma(_1012, cbModelParam._m0[28u].z, fma(_1011, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1010)) - _985;
        float _1028 = inversesqrt(dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024)));
        float _1041 = ((_1028 * _1022) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_977 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1028 * _1023) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_981 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1028 * _1024) / cbModelParam._m0[34u].z) + ((((((_985 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1041, _1042, _1043), 0.0);
        float _1080 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1046.x + (-0.5));
        float _1082 = _1080 * (_1046.y + (-0.5));
        float _1083 = _1080 * (_1046.z + (-0.5));
        float _1090 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1053.x + (-0.5));
        float _1092 = _1090 * (_1053.y + (-0.5));
        float _1093 = _1090 * (_1053.z + (-0.5));
        float _1100 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1060.x + (-0.5));
        float _1102 = _1100 * (_1060.y + (-0.5));
        float _1103 = _1100 * (_1060.z + (-0.5));
        float _1110 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1067.x + (-0.5));
        float _1112 = _1110 * (_1067.y + (-0.5));
        float _1113 = _1110 * (_1067.z + (-0.5));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = _1081 * 0.5;
        float _1118 = _1091 * 0.5;
        float _1119 = _1101 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1134 = (dot(vec3(_692, _693, _694), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1144 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3860 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1146 + 1.0))) + _1151) * _1114;
        float _1161 = _1082 * 0.5;
        float _1162 = _1092 * 0.5;
        float _1163 = _1102 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_692, _693, _694), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3893 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1188 + 1.0))) + _1193) * _1115;
        float _1203 = _1083 * 0.5;
        float _1204 = _1093 * 0.5;
        float _1205 = _1103 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_692, _693, _694), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3926 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1230 + 1.0))) + _1235) * _1116;
        _1252 = _1083;
        _1254 = _1082;
        _1255 = _1081;
        _1256 = _1093;
        _1257 = _1092;
        _1258 = _1091;
        _1259 = _1103;
        _1260 = _1102;
        _1261 = _1101;
        _1262 = _1116;
        _1263 = _1115;
        _1264 = _1114;
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
    }
    else
    {
        _1252 = _1253;
        _1254 = _1253;
        _1255 = _1253;
        _1256 = _1253;
        _1257 = _1253;
        _1258 = _1253;
        _1259 = _1253;
        _1260 = _1253;
        _1261 = _1253;
        _1262 = _1253;
        _1263 = _1253;
        _1264 = _1253;
        _1265 = 0.0;
        _1266 = 0.0;
        _1267 = 0.0;
    }
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1295 = fma(_923, cbModelParam._m0[30u].z, fma(_919, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _915));
        float _1299 = fma(_923, cbModelParam._m0[31u].z, fma(_919, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _915));
        float _1303 = fma(_923, cbModelParam._m0[32u].z, fma(_919, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _915));
        float _1326 = _915 + _692;
        float _1327 = _919 + _693;
        float _1328 = _923 + _694;
        float _1338 = fma(_1328, cbModelParam._m0[30u].z, fma(_1327, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1326)) - _1295;
        float _1339 = fma(_1328, cbModelParam._m0[31u].z, fma(_1327, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1326)) - _1299;
        float _1340 = fma(_1328, cbModelParam._m0[32u].z, fma(_1327, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1326)) - _1303;
        float _1344 = inversesqrt(dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340)));
        float _1357 = ((_1344 * _1338) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1295 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1344 * _1339) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1299 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1344 * _1340) / cbModelParam._m0[35u].z) + ((((((_1303 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        float _1394 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1361.x + (-0.5));
        float _1396 = _1394 * (_1361.y + (-0.5));
        float _1397 = _1394 * (_1361.z + (-0.5));
        float _1404 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1368.x + (-0.5));
        float _1406 = _1404 * (_1368.y + (-0.5));
        float _1407 = _1404 * (_1368.z + (-0.5));
        float _1414 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1375.x + (-0.5));
        float _1416 = _1414 * (_1375.y + (-0.5));
        float _1417 = _1414 * (_1375.z + (-0.5));
        float _1424 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1382.x + (-0.5));
        float _1426 = _1424 * (_1382.y + (-0.5));
        float _1427 = _1424 * (_1382.z + (-0.5));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = _1395 * 0.5;
        float _1432 = _1405 * 0.5;
        float _1433 = _1415 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_692, _693, _694), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _3989 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1458 + 1.0))) + _1463) * _1428;
        float _1473 = _1396 * 0.5;
        float _1474 = _1406 * 0.5;
        float _1475 = _1416 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_692, _693, _694), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4022 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1500 + 1.0))) + _1505) * _1429;
        float _1515 = _1397 * 0.5;
        float _1516 = _1407 * 0.5;
        float _1517 = _1417 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_692, _693, _694), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4055 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1542 + 1.0))) + _1547) * _1430;
        _1564 = _1397;
        _1565 = _1396;
        _1566 = _1395;
        _1567 = _1407;
        _1568 = _1406;
        _1569 = _1405;
        _1570 = _1417;
        _1571 = _1416;
        _1572 = _1415;
        _1573 = _1430;
        _1574 = _1429;
        _1575 = _1428;
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
    }
    else
    {
        _1564 = _1253;
        _1565 = _1253;
        _1566 = _1253;
        _1567 = _1253;
        _1568 = _1253;
        _1569 = _1253;
        _1570 = _1253;
        _1571 = _1253;
        _1572 = _1253;
        _1573 = _1253;
        _1574 = _1253;
        _1575 = _1253;
        _1576 = 0.0;
        _1577 = 0.0;
        _1578 = 0.0;
    }
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1265)) + _1265;
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1266)) + _1266;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1267)) + _1267;
    float _1611 = fma(_1590, cbSceneParam._m0[89u].z, fma(_1589, cbSceneParam._m0[89u].y, _1588 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1590, cbSceneParam._m0[90u].z, fma(_1589, cbSceneParam._m0[90u].y, _1588 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1590, cbSceneParam._m0[91u].z, fma(_1589, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1588));
    float _1632 = _862 * 0.5;
    float _1633 = _863 * 0.5;
    float _1634 = _864 * 0.5;
    float _1635 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1638 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1641 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1675;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1648 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1252, _1256, _1259, _1262));
        float _1652 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1254, _1257, _1260, _1263));
        float _1656 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1255, _1258, _1261, _1264));
        float _1663 = dot(vec4(cbModelParam._m0[39u]), vec4(_1632, _1633, _1634, 1.0));
        _1675 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1663) ? 0.0 : (isnan(0.0) ? _1663 : max(0.0, _1663))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1675 = 1.0;
    }
    float _1686;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1677 = dot(vec4(cbModelParam._m0[40u]), vec4(_1632, _1633, _1634, 1.0));
        _1686 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1677) ? 0.0 : (isnan(0.0) ? _1677 : max(0.0, _1677))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1686 = 1.0;
    }
    float _1690 = (_1686 * cbModelParam._m0[1u].x) + (_1675 * (1.0 - cbModelParam._m0[1u].x));
    float _1700 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _695);
    float _1701 = isnan(_1700) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1700 : min(cbModelParam._m0[25u].z, _1700));
    float _1782;
    float _1784;
    float _1786;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1749 = fma(_923, cbModelParam._m0[13u].z, fma(_919, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _915)) + cbModelParam._m0[13u].w;
        float _1753 = fma(_923, cbModelParam._m0[14u].z, fma(_919, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _915)) + cbModelParam._m0[14u].w;
        float _1757 = fma(_923, cbModelParam._m0[15u].z, fma(_919, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _915)) + cbModelParam._m0[15u].w;
        float _1760 = fma(_864, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862));
        float _1763 = fma(_864, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862));
        float _1766 = fma(_864, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862));
        float _1794;
        if (_1760 > 0.0)
        {
            _1794 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1794 = frontier_phi_17_15_ladder;
        }
        float _1995;
        if (_1763 > 0.0)
        {
            _1995 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1995 = frontier_phi_26_22_ladder;
        }
        float _2238;
        if (_1766 > 0.0)
        {
            _2238 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2238 = frontier_phi_38_33_ladder;
        }
        float _2240 = isnan(_1995) ? _1794 : (isnan(_1794) ? _1995 : min(_1794, _1995));
        float _2241 = isnan(_2238) ? _2240 : (isnan(_2240) ? _2238 : min(_2240, _2238));
        float _2245 = (_2241 * _1760) + _1749;
        float _2246 = (_2241 * _1763) + _1753;
        float _2247 = (_2241 * _1766) + _1757;
        float _2248 = _2241 * 9.9999997473787516355514526367188e-05;
        float _2250 = (-1.0) - _2248;
        float _2252 = _2248 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2247 > _2252) || ((_2247 < _2250) || ((_2246 > _2252) || ((_2246 < _2250) || ((_2245 < _2250) || (_2245 > _2252))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2371 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2247, cbModelParam._m0[9u].z, fma(_2246, cbModelParam._m0[9u].y, _2245 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2247, cbModelParam._m0[10u].z, fma(_2246, cbModelParam._m0[10u].y, _2245 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2247, cbModelParam._m0[11u].z, fma(_2246, cbModelParam._m0[11u].y, _2245 * cbModelParam._m0[11u].x))), _1701);
            frontier_phi_16_38_ladder = _2371.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2371.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2371.x * cbModelParam._m0[1u].y;
        }
        _1782 = frontier_phi_16_38_ladder_2;
        _1784 = frontier_phi_16_38_ladder_1;
        _1786 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1770 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_862, _863, _864), _1701);
        _1782 = _1770.x * cbModelParam._m0[1u].y;
        _1784 = _1770.y * cbModelParam._m0[1u].y;
        _1786 = _1770.z * cbModelParam._m0[1u].y;
    }
    float _1790 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _695);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1790 : min(cbModelParam._m0[25u].w, _1790));
    float _1881;
    float _1883;
    float _1885;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1845 = fma(_923, cbModelParam._m0[21u].z, fma(_919, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _915)) + cbModelParam._m0[21u].w;
        float _1849 = fma(_923, cbModelParam._m0[22u].z, fma(_919, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _915)) + cbModelParam._m0[22u].w;
        float _1853 = fma(_923, cbModelParam._m0[23u].z, fma(_919, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _915)) + cbModelParam._m0[23u].w;
        float _1856 = fma(_864, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862));
        float _1859 = fma(_864, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862));
        float _1862 = fma(_864, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862));
        float _2000;
        if (_1856 > 0.0)
        {
            _2000 = abs((1.0 - _1845) / _1856);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1845 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2000 = frontier_phi_28_24_ladder;
        }
        float _2265;
        if (_1859 > 0.0)
        {
            _2265 = abs((1.0 - _1849) / _1859);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1849 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2265 = frontier_phi_40_35_ladder;
        }
        float _2470;
        if (_1862 > 0.0)
        {
            _2470 = abs((1.0 - _1853) / _1862);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1853 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2470 = frontier_phi_49_46_ladder;
        }
        float _2472 = isnan(_2265) ? _2000 : (isnan(_2000) ? _2265 : min(_2000, _2265));
        float _2473 = isnan(_2470) ? _2472 : (isnan(_2472) ? _2470 : min(_2472, _2470));
        float _2477 = (_2473 * _1856) + _1845;
        float _2478 = (_2473 * _1859) + _1849;
        float _2479 = (_2473 * _1862) + _1853;
        float _2480 = _2473 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2480;
        float _2483 = _2480 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2479 > _2483) || ((_2479 < _2481) || ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 < _2481) || (_2477 > _2483))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2678 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2479, cbModelParam._m0[17u].z, fma(_2478, cbModelParam._m0[17u].y, _2477 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2479, cbModelParam._m0[18u].z, fma(_2478, cbModelParam._m0[18u].y, _2477 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2479, cbModelParam._m0[19u].z, fma(_2478, cbModelParam._m0[19u].y, _2477 * cbModelParam._m0[19u].x))), _1791);
            frontier_phi_25_49_ladder = _2678.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2678.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2678.x * cbModelParam._m0[1u].z;
        }
        _1881 = frontier_phi_25_49_ladder_2;
        _1883 = frontier_phi_25_49_ladder_1;
        _1885 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1865 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_862, _863, _864), _1791);
        _1881 = _1865.x * cbModelParam._m0[1u].z;
        _1883 = _1865.y * cbModelParam._m0[1u].z;
        _1885 = _1865.z * cbModelParam._m0[1u].z;
    }
    float _1897 = ((((1.0 - _883) * ((_870 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_883 * _870)) * _854;
    float _1898 = _1897 * ((cbModelParam._m0[1u].w * (_1881 - _1782)) + _1782);
    float _1899 = _1897 * ((cbModelParam._m0[1u].w * (_1883 - _1784)) + _1784);
    float _1900 = _1897 * ((cbModelParam._m0[1u].w * (_1885 - _1786)) + _1786);
    float _1903 = fma(_1900, cbSceneParam._m0[89u].z, fma(_1899, cbSceneParam._m0[89u].y, _1898 * cbSceneParam._m0[89u].x));
    float _1906 = fma(_1900, cbSceneParam._m0[90u].z, fma(_1899, cbSceneParam._m0[90u].y, _1898 * cbSceneParam._m0[90u].x));
    float _1909 = fma(_1900, cbSceneParam._m0[91u].z, fma(_1899, cbSceneParam._m0[91u].y, _1898 * cbSceneParam._m0[91u].x));
    uvec4 _1919 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1921 = _1919.x * 14u;
    uint _1922 = _1921 + 13u;
    float _1929 = _854 + (-1.0);
    float _1934 = (cbLight._m0[_1922].x * _1929) + 1.0;
    float _1935 = (cbLight._m0[_1922].y * _1929) + 1.0;
    float _1936 = (cbLight._m0[_1922].z * _1929) + 1.0;
    float _1937 = (cbLight._m0[_1922].w * _1929) + 1.0;
    uint _1938 = _1921 + 5u;
    float _1944 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
    uint _1948 = _1921 + 4u;
    float _1954 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
    uint _1958 = _1921 | 1u;
    float _1969 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_692, _693, _694));
    float _1972 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_692, _693, _694));
    float _4191 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _4202 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1977 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * 0.3183098733425140380859375;
    float _1979 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * 0.3183098733425140380859375;
    float _1986 = ((cbLight._m0[_1938].x * _1944) * _1979) + ((cbLight._m0[_1948].x * _1954) * _1977);
    float _1987 = ((_1944 * cbLight._m0[_1938].y) * _1979) + ((_1954 * cbLight._m0[_1948].y) * _1977);
    float _1988 = ((_1944 * cbLight._m0[_1938].z) * _1979) + ((_1954 * cbLight._m0[_1948].z) * _1977);
    uvec4 _1992 = floatBitsToUint(cbLight._m0[_1921 + 12u]);
    bool _1994 = _1992.x == 0u;
    float _2005;
    float _2007;
    float _2009;
    if (_1994)
    {
        _2005 = _1986;
        _2007 = _1987;
        _2009 = _1988;
    }
    else
    {
        uint _2013 = _1921 + 6u;
        float _2029 = (dot(vec3(cbLight._m0[_1921 + 2u].xyz), vec3(_692, _693, _694)) * 0.5) + 0.5;
        float _2030 = _2029 * _2029;
        float _4213 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2031 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2032 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
        _2005 = (((cbLight._m0[_2013].x * 0.3183098733425140380859375) * _2031) * _2032) + _1986;
        _2007 = (((cbLight._m0[_2013].y * 0.3183098733425140380859375) * _2031) * _2032) + _1987;
        _2009 = (((cbLight._m0[_2013].z * 0.3183098733425140380859375) * _2031) * _2032) + _1988;
    }
    bool _2012 = _1992.y == 0u;
    float _2050;
    float _2052;
    float _2054;
    if (_2012)
    {
        _2050 = _2005;
        _2052 = _2007;
        _2054 = _2009;
    }
    else
    {
        uint _2209 = _1921 + 7u;
        float _2225 = (dot(vec3(cbLight._m0[_1921 + 3u].xyz), vec3(_692, _693, _694)) * 0.5) + 0.5;
        float _2226 = _2225 * _2225;
        float _4229 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2227 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2228 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
        _2050 = (((cbLight._m0[_2209].x * 0.3183098733425140380859375) * _2227) * _2228) + _2005;
        _2052 = (((cbLight._m0[_2209].y * 0.3183098733425140380859375) * _2227) * _2228) + _2007;
        _2054 = (((cbLight._m0[_2209].z * 0.3183098733425140380859375) * _2227) * _2228) + _2009;
    }
    uint _2057 = _1921 + 8u;
    float _2070 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1921].w)) * _695) * 0.949999988079071044921875);
    float _2071 = _2070 * _2070;
    float _2072 = cbLight._m0[_1921].x + _771;
    float _2073 = cbLight._m0[_1921].y + _772;
    float _2074 = cbLight._m0[_1921].z + _773;
    float _2078 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
    float _2079 = _2078 * _2072;
    float _2080 = _2078 * _2073;
    float _2081 = _2078 * _2074;
    float _2082 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_1921].xyz));
    float _4245 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _4256 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _2086 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _2087 = dot(vec3(_692, _693, _694), vec3(_2079, _2080, _2081));
    float _4267 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2091 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_2079, _2080, _2081));
    float _4278 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2095 = _2071 * _2071;
    float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
    float _2110 = (exp2(log2(1.0 - (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2111 = 1.0 - _2071;
    float _2122 = (0.5 / (((_2086 * ((_2085 * _2111) + _2071)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2111) + _2071) * _2085))) * _2085;
    float _4289 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2124 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
    uint _2135 = _1921 + 9u;
    float _2146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _695) * 0.949999988079071044921875);
    float _2147 = _2146 * _2146;
    float _2148 = cbLight._m0[_1958].x + _771;
    float _2149 = cbLight._m0[_1958].y + _772;
    float _2150 = cbLight._m0[_1958].z + _773;
    float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
    float _2155 = _2154 * _2148;
    float _2156 = _2154 * _2149;
    float _2157 = _2154 * _2150;
    float _2158 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_1958].xyz));
    float _4300 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _2162 = dot(vec3(_692, _693, _694), vec3(_2155, _2156, _2157));
    float _4311 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2166 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_2155, _2156, _2157));
    float _4322 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2170 = _2147 * _2147;
    float _2174 = ((_2165 * _2165) * (_2170 + (-1.0))) + 1.0;
    float _2183 = (exp2(log2(1.0 - (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2184 = 1.0 - _2147;
    float _2194 = (0.5 / (((_2086 * ((_2161 * _2184) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2184) + _2147) * _2161))) * _2161;
    float _4333 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2196 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2170 / ((_2174 * _2174) * 3.141590118408203125));
    float _2206 = (((_2183 * cbLight._m0[_2135].x) * _2196) * _1944) + (((_2110 * cbLight._m0[_2057].x) * _2124) * _1954);
    float _2207 = (((_2183 * cbLight._m0[_2135].y) * _2196) * _1944) + (((_2110 * cbLight._m0[_2057].y) * _2124) * _1954);
    float _2208 = (((_2183 * cbLight._m0[_2135].z) * _2196) * _1944) + (((_2110 * cbLight._m0[_2057].z) * _2124) * _1954);
    float _2270;
    float _2272;
    float _2274;
    if (_1994)
    {
        _2270 = _2206;
        _2272 = _2207;
        _2274 = _2208;
    }
    else
    {
        uint _2276 = _1921 + 2u;
        uint _2280 = _1921 + 10u;
        float _2294 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2276].w)) * _695) * 0.949999988079071044921875);
        float _2295 = _2294 * _2294;
        float _2296 = cbLight._m0[_2276].x + _771;
        float _2297 = cbLight._m0[_2276].y + _772;
        float _2298 = cbLight._m0[_2276].z + _773;
        float _2302 = inversesqrt(dot(vec3(_2296, _2297, _2298), vec3(_2296, _2297, _2298)));
        float _2303 = _2302 * _2296;
        float _2304 = _2302 * _2297;
        float _2305 = _2302 * _2298;
        float _2306 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2276].xyz));
        float _4344 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2309 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _2310 = dot(vec3(_692, _693, _694), vec3(_2303, _2304, _2305));
        float _4355 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2313 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _2314 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_2303, _2304, _2305));
        float _4366 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2318 = _2295 * _2295;
        float _2322 = ((_2313 * _2313) * (_2318 + (-1.0))) + 1.0;
        float _2331 = (exp2(log2(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2332 = 1.0 - _2295;
        float _2342 = (0.5 / (((_2086 * ((_2309 * _2332) + _2295)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2332) + _2295) * _2309))) * _2309;
        float _4377 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2344 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2318 / ((_2322 * _2322) * 3.141590118408203125));
        float _2345 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
        _2270 = (((_2331 * cbLight._m0[_2280].x) * _2344) * _2345) + _2206;
        _2272 = (((_2331 * cbLight._m0[_2280].y) * _2344) * _2345) + _2207;
        _2274 = (((_2331 * cbLight._m0[_2280].z) * _2344) * _2345) + _2208;
    }
    float _2380;
    float _2382;
    float _2384;
    if (_2012)
    {
        _2380 = _2270;
        _2382 = _2272;
        _2384 = _2274;
    }
    else
    {
        uint _2391 = _1921 + 3u;
        uint _2395 = _1921 + 11u;
        float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _695) * 0.949999988079071044921875);
        float _2410 = _2409 * _2409;
        float _2411 = cbLight._m0[_2391].x + _771;
        float _2412 = cbLight._m0[_2391].y + _772;
        float _2413 = cbLight._m0[_2391].z + _773;
        float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
        float _2418 = _2417 * _2411;
        float _2419 = _2417 * _2412;
        float _2420 = _2417 * _2413;
        float _2421 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2391].xyz));
        float _4393 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2425 = dot(vec3(_692, _693, _694), vec3(_2418, _2419, _2420));
        float _4404 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2429 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2418, _2419, _2420));
        float _4415 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2433 = _2410 * _2410;
        float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
        float _2446 = (exp2(log2(1.0 - (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2447 = 1.0 - _2410;
        float _2457 = (0.5 / (((_2086 * ((_2424 * _2447) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2447) + _2410) * _2424))) * _2424;
        float _4426 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2459 = (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
        float _2460 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
        _2380 = (((_2446 * cbLight._m0[_2395].x) * _2459) * _2460) + _2270;
        _2382 = (((_2446 * cbLight._m0[_2395].y) * _2459) * _2460) + _2272;
        _2384 = (((_2446 * cbLight._m0[_2395].z) * _2459) * _2460) + _2274;
    }
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    if (_1919.y == 0u)
    {
        float _2535 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2535;
        float _2537 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2535;
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2535;
        uvec4 _2550 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2551 = _2550.x;
        uint _2562 = uint((float(_2550.y) * floor(float(uint(cbSceneParam._m0[85u].y * _792) / _2551))) + floor(float(uint(cbSceneParam._m0[85u].x * _791) / _2551)));
        float _2572 = (log2(_2538 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2573 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        uint _2576 = uint(isnan(14.0) ? _2573 : (isnan(_2573) ? 14.0 : min(_2573, 14.0)));
        uvec4 _2581 = texelFetch(g_lightClusterGridBuffer, int(((_2576 << 2u) + (_2562 << 6u)) >> 2u));
        uint _2582 = _2581.x;
        uint _2583 = _2550.z;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        if (((((1u << ((_2583 >> 4u) & 15u)) + 4294967295u) & _2582) == 0u) || ((_2583 & 240u) == 0u))
        {
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
        }
        else
        {
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            uint _2842 = 0u;
            uint _2851;
            bool _2852;
            for (;;)
            {
                _2851 = texelFetch(g_lightClassification, int((((_2576 << 5u) + (_2562 << 9u)) + (_2842 << 2u)) >> 2u)).x;
                _2852 = _2851 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2852)
                {
                    frontier_phi_66_pred = _2836;
                    frontier_phi_66_pred_1 = _2841;
                    frontier_phi_66_pred_2 = _2840;
                    frontier_phi_66_pred_3 = _2839;
                    frontier_phi_66_pred_4 = _2838;
                    frontier_phi_66_pred_5 = _2837;
                }
                else
                {
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    uint _2987;
                    _2981 = _2836;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2841;
                    _2987 = _2851;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    for (;;)
                    {
                        uint _2991 = uint(findLSB(_2987)) + (_2842 << 5u);
                        uint _2988 = (_2987 + 4294967295u) & _2987;
                        uint _2993 = _2991 * 48u;
                        vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2993)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 3u)).x));
                        uint _3013 = (_2991 * 48u) + 4u;
                        vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 3u)).x));
                        uint _3032 = (_2991 * 48u) + 8u;
                        vec3 _3043 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x));
                        float _3047 = _3007.x - _2536;
                        float _3048 = _3007.y - _2537;
                        float _3049 = _3007.z - _2538;
                        float _3050 = dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049));
                        float _3053 = inversesqrt(_3050);
                        float _3054 = _3053 * _3047;
                        float _3055 = _3053 * _3048;
                        float _3056 = _3053 * _3049;
                        float _3057 = dot(vec3(_810, _813, _816), vec3(_3054, _3055, _3056));
                        float _3062 = 1.0 - (_3050 * _3007.w);
                        float _4452 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3063 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3064 = sqrt(_3050) * _3026.w;
                        float _3067 = 1.39999997615814208984375 / (_3064 + 1.39999997615814208984375);
                        float _3068 = _3067 * _3067;
                        float _3071 = ((1.0 - _3068) * _3057) + _3068;
                        float _3074 = _3064 * _3064;
                        float _3078 = ((isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0))) * _3063) / ((_3074 * 0.699999988079071044921875) + 1.0);
                        float _3082 = (-0.0) - _2536;
                        float _3083 = (-0.0) - _2537;
                        float _3084 = (-0.0) - _2538;
                        float _3088 = inversesqrt(dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084)));
                        float _3089 = _3088 * _3082;
                        float _3090 = _3088 * _3083;
                        float _3091 = _3088 * _3084;
                        float _3099 = exp2(log2(1.0 / ((_3074 * 3.5) + 5.0)) * 0.25);
                        float _3100 = 1.0 - _870;
                        float _3107 = sqrt(1.0 - ((1.0 - (_3100 * _3100)) * (1.0 - (_3099 * _3099))));
                        float _3108 = _3107 * _3107;
                        float _3109 = _3108 * _3108;
                        float _3110 = _3089 + _3054;
                        float _3111 = _3090 + _3055;
                        float _3112 = _3091 + _3056;
                        float _3116 = inversesqrt(dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112)));
                        float _3120 = dot(vec3(_810, _813, _816), vec3(_3089, _3090, _3091));
                        float _4468 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3123 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
                        float _3124 = dot(vec3(_810, _813, _816), vec3(_3116 * _3110, _3116 * _3111, _3116 * _3112));
                        float _4479 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3127 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3131 = ((_3127 * _3127) * (_3109 + (-1.0))) + 1.0;
                        float _3132 = _3067 * _3108;
                        float _3133 = _3132 * _3132;
                        float _3136 = ((1.0 - _3133) * _3057) + _3133;
                        float _4490 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3137 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3138 = 1.0 - _3108;
                        float _3148 = (0.5 / (((_3137 * ((_3123 * _3138) + _3108)) + 9.9999999392252902907785028219223e-09) + (((_3137 * _3138) + _3108) * _3123))) * _3137;
                        float _4501 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3159 = (((_3109 * 3.1415927410125732421875) * (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) / ((_3131 * _3131) * ((_3074 * 2.1991131305694580078125) + 3.141590118408203125))) * _3063;
                        _2911 = (_3078 * _3026.x) + _2984;
                        _2912 = (_3078 * _3026.y) + _2985;
                        _2913 = (_3078 * _3026.z) + _2986;
                        _2908 = (_3159 * _3043.x) + _2981;
                        _2909 = (_3159 * _3043.y) + _2982;
                        _2910 = (_3159 * _3043.z) + _2983;
                        if (_2988 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2981 = _2908;
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2913;
                            _2987 = _2988;
                        }
                    }
                    frontier_phi_66_pred = _2908;
                    frontier_phi_66_pred_1 = _2913;
                    frontier_phi_66_pred_2 = _2912;
                    frontier_phi_66_pred_3 = _2911;
                    frontier_phi_66_pred_4 = _2910;
                    frontier_phi_66_pred_5 = _2909;
                }
                _2684 = frontier_phi_66_pred;
                _2694 = frontier_phi_66_pred_1;
                _2692 = frontier_phi_66_pred_2;
                _2690 = frontier_phi_66_pred_3;
                _2688 = frontier_phi_66_pred_4;
                _2686 = frontier_phi_66_pred_5;
                uint _2843 = _2842 + 1u;
                if (_2843 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2836 = _2684;
                    _2837 = _2686;
                    _2838 = _2688;
                    _2839 = _2690;
                    _2840 = _2692;
                    _2841 = _2694;
                    _2842 = _2843;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
        }
        uvec4 _2697 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2698 = _2697.z;
        uint _2700 = (_2698 >> 8u) & 15u;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        if (((4294967295u << _2700) & _2582) == 0u)
        {
            _2804 = _2683;
            _2806 = _2685;
            _2808 = _2687;
            _2810 = _2689;
            _2812 = _2691;
            _2814 = _2693;
        }
        else
        {
            float _2829 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
            float _2830 = _2829 * _2536;
            float _2831 = _2829 * _2537;
            float _2832 = _2829 * _2538;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2700 < ((_2698 >> 12u) & 15u))
            {
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2815;
                float _2964 = _2683;
                float _2965 = _2685;
                float _2966 = _2687;
                float _2967 = _2689;
                float _2968 = _2691;
                float _2969 = _2693;
                uint _2970 = _2700;
                uint _2979;
                bool _2980;
                for (;;)
                {
                    _2979 = texelFetch(g_lightClassification, int((((_2576 << 5u) + (_2562 << 9u)) + (_2970 << 2u)) >> 2u)).x;
                    _2980 = _2979 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2980)
                    {
                        frontier_phi_77_pred = _2969;
                        frontier_phi_77_pred_1 = _2968;
                        frontier_phi_77_pred_2 = _2967;
                        frontier_phi_77_pred_3 = _2966;
                        frontier_phi_77_pred_4 = _2965;
                        frontier_phi_77_pred_5 = _2964;
                    }
                    else
                    {
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3186 = _2964;
                        float _3187 = _2965;
                        float _3188 = _2966;
                        float _3189 = _2967;
                        float _3190 = _2968;
                        float _3191 = _2969;
                        uint _3192 = _2979;
                        uint _3193;
                        vec4 _3218;
                        float _3219;
                        vec4 _3234;
                        vec3 _3246;
                        vec4 _3261;
                        vec4 _3277;
                        float _3323;
                        bool _3324;
                        for (;;)
                        {
                            uint _3203 = ((_2970 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3192));
                            _3193 = (_3192 + 4294967295u) & _3192;
                            uint _3205 = _3203 * 40u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            _3219 = _3218.w;
                            uint _3221 = (_3203 * 40u) + 4u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3236 = (_3203 * 40u) + 8u;
                            _3246 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x));
                            uint _3248 = (_3203 * 40u) + 16u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3264 = (_3203 * 40u) + 20u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3279 = (_3203 * 40u) + 24u;
                            vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3298 = (_3203 * 40u) + 28u;
                            vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            _3323 = fma(_2538, _3311.z, fma(_2537, _3311.y, _3311.x * _2536)) + _3311.w;
                            _3324 = !((fma(_2538, _3292.z, fma(_2537, _3292.y, _3292.x * _2536)) + _3292.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3324)
                            {
                                float _3351 = _3218.x - _2536;
                                float _3352 = _3218.y - _2537;
                                float _3353 = _3218.z - _2538;
                                float _3354 = dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353));
                                float _3357 = inversesqrt(_3354);
                                float _3358 = _3357 * _3351;
                                float _3359 = _3357 * _3352;
                                float _3360 = _3357 * _3353;
                                float _3364 = 1.0 - (_3354 / (_3219 * _3219));
                                float _4512 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3365 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3369 = sqrt(_3354) * _3234.w;
                                float _3371 = 1.39999997615814208984375 / (_3369 + 1.39999997615814208984375);
                                float _3372 = _3371 * _3371;
                                float _3375 = ((1.0 - _3372) * dot(vec3(_3358, _3359, _3360), vec3(_810, _813, _816))) + _3372;
                                float _3378 = _3369 * _3369;
                                float _3382 = (fma(_2538, _3261.z, fma(_2537, _3261.y, _3261.x * _2536)) + _3261.w) / _3323;
                                float _3383 = (fma(_2538, _3277.z, fma(_2537, _3277.y, _3277.x * _2536)) + _3277.w) / _3323;
                                float _3387 = 1.0 - dot(vec2(_3382, _3383), vec2(_3382, _3383));
                                float _4528 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3388 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                                float _3389 = _3388 * (((isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0))) * _3365) / ((_3378 * 0.699999988079071044921875) + 1.0));
                                float _3401 = exp2(log2(1.0 / ((_3378 * 3.5) + 5.0)) * 0.25);
                                float _3402 = 1.0 - _870;
                                float _3409 = sqrt(1.0 - ((1.0 - (_3402 * _3402)) * (1.0 - (_3401 * _3401))));
                                float _3410 = _3409 * _3409;
                                float _3411 = _3410 * _3410;
                                float _3412 = _3358 - _2830;
                                float _3413 = _3359 - _2831;
                                float _3414 = _3360 - _2832;
                                float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                                float _3422 = dot(vec3(_810, _813, _816), vec3((-0.0) - _2830, (-0.0) - _2831, (-0.0) - _2832));
                                float _4539 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3425 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3426 = dot(vec3(_810, _813, _816), vec3(_3418 * _3412, _3418 * _3413, _3418 * _3414));
                                float _4550 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3429 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3433 = ((_3429 * _3429) * (_3411 + (-1.0))) + 1.0;
                                float _3434 = _3371 * _3410;
                                float _3435 = _3434 * _3434;
                                float _3441 = ((1.0 - _3435) * dot(vec3(_810, _813, _816), vec3(_3358, _3359, _3360))) + _3435;
                                float _4561 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3443 = 1.0 - _3410;
                                float _3453 = (0.5 / (((_3442 * ((_3425 * _3443) + _3410)) + 9.9999999392252902907785028219223e-09) + (((_3442 * _3443) + _3410) * _3425))) * _3442;
                                float _4572 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3463 = (_3388 * _3365) * (((_3411 * 3.1415927410125732421875) * (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) / ((_3433 * _3433) * ((_3378 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3389 * _3234.y;
                                frontier_phi_83_pred_1 = _3389 * _3234.x;
                                frontier_phi_83_pred_2 = _3463 * _3246.z;
                                frontier_phi_83_pred_3 = _3463 * _3246.y;
                                frontier_phi_83_pred_4 = _3463 * _3246.x;
                                frontier_phi_83_pred_5 = _3389 * _3234.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3471 = frontier_phi_83_pred;
                            _3470 = frontier_phi_83_pred_1;
                            _3469 = frontier_phi_83_pred_2;
                            _3468 = frontier_phi_83_pred_3;
                            _3467 = frontier_phi_83_pred_4;
                            _3472 = frontier_phi_83_pred_5;
                            _3176 = _3470 + _3189;
                            _3177 = _3471 + _3190;
                            _3178 = _3472 + _3191;
                            _3173 = _3467 + _3186;
                            _3174 = _3468 + _3187;
                            _3175 = _3469 + _3188;
                            if (_3193 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3193;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3178;
                        frontier_phi_77_pred_1 = _3177;
                        frontier_phi_77_pred_2 = _3176;
                        frontier_phi_77_pred_3 = _3175;
                        frontier_phi_77_pred_4 = _3174;
                        frontier_phi_77_pred_5 = _3173;
                    }
                    _2815 = frontier_phi_77_pred;
                    _2813 = frontier_phi_77_pred_1;
                    _2811 = frontier_phi_77_pred_2;
                    _2809 = frontier_phi_77_pred_3;
                    _2807 = frontier_phi_77_pred_4;
                    _2805 = frontier_phi_77_pred_5;
                    uint _2971 = _2970 + 1u;
                    if (_2971 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2964 = _2805;
                        _2965 = _2807;
                        _2966 = _2809;
                        _2967 = _2811;
                        _2968 = _2813;
                        _2969 = _2815;
                        _2970 = _2971;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2809;
                frontier_phi_58_59_ladder_1 = _2815;
                frontier_phi_58_59_ladder_2 = _2813;
                frontier_phi_58_59_ladder_3 = _2811;
                frontier_phi_58_59_ladder_4 = _2807;
                frontier_phi_58_59_ladder_5 = _2805;
            }
            else
            {
                frontier_phi_58_59_ladder = _2687;
                frontier_phi_58_59_ladder_1 = _2693;
                frontier_phi_58_59_ladder_2 = _2691;
                frontier_phi_58_59_ladder_3 = _2689;
                frontier_phi_58_59_ladder_4 = _2685;
                frontier_phi_58_59_ladder_5 = _2683;
            }
            _2804 = frontier_phi_58_59_ladder_5;
            _2806 = frontier_phi_58_59_ladder_4;
            _2808 = frontier_phi_58_59_ladder;
            _2810 = frontier_phi_58_59_ladder_3;
            _2812 = frontier_phi_58_59_ladder_2;
            _2814 = frontier_phi_58_59_ladder_1;
        }
        float _2819 = isnan(1.0) ? _854 : (isnan(_854) ? 1.0 : min(_854, 1.0));
        _2595 = (_2819 * _2810) + _2050;
        _2597 = (_2819 * _2812) + _2052;
        _2599 = (_2819 * _2814) + _2054;
        _2601 = ((_2804 * 0.039999999105930328369140625) * _2819) + _2380;
        _2603 = ((_2806 * 0.039999999105930328369140625) * _2819) + _2382;
        _2605 = ((_2808 * 0.039999999105930328369140625) * _2819) + _2384;
    }
    else
    {
        _2595 = _2050;
        _2597 = _2052;
        _2599 = _2054;
        _2601 = _2380;
        _2603 = _2382;
        _2605 = _2384;
    }
    float _4588 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4599 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4610 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _2622 = ((isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2595 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _854))) + ((_2601 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1690)) * cbPerFrame._m0[3u].x);
    float _2623 = ((isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2597 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _854))) + ((_2603 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1690)) * cbPerFrame._m0[3u].x);
    float _2624 = ((isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2599 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _854))) + ((_2605 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1690)) * cbPerFrame._m0[3u].x);
    uint _2625 = _247 + 6u;
    float _2633 = _791 / cbSceneParam._m0[86u].x;
    float _2634 = _792 / cbSceneParam._m0[86u].y;
    vec4 _2648 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2633, _2634, (log2((isnan(cbSceneParam._m0[77u].w) ? _713 : (isnan(_713) ? cbSceneParam._m0[77u].w : min(_713, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2650 = _2648.x;
    float _2651 = _2648.y;
    float _2652 = _2648.z;
    float _2653 = _2648.w;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    if (_713 > cbSceneParam._m0[78u].w)
    {
        float _2708 = isnan(_713) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _713 : min(cbSceneParam._m0[80u].w, _713));
        float _2709 = _2708 / _713;
        float _2720 = _2709 * _764;
        float _2721 = _765 * _2709;
        float _2722 = (-0.0) - _2721;
        float _2724 = _2709 * _766;
        float _2726 = (cbSceneParam._m0[77u].w * _2722) / _2708;
        float _2727 = _2726 + cbSceneParam._m0[79u].w;
        float _2728 = cbSceneParam._m0[79u].w - _2721;
        float _2734 = sqrt(((_2720 * _2720) + (_2721 * _2721)) + (_2724 * _2724));
        float _2737 = (1.0 - (cbSceneParam._m0[77u].w / _2708)) * _2734;
        float _2742 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2744 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2921;
        if (abs((_2722 - _2726) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2921 = ((((_2727 > 0.0) ? exp2(_2742 * _2727) : (2.0 - exp2(_2744 * _2727))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2737;
        }
        else
        {
            float _2865 = 1.0 / cbSceneParam._m0[80u].x;
            float _2866 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : max(_2727, _2728));
            float _2867 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : min(_2727, _2728));
            float _2876 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : min(_2866, 0.0));
            float _2877 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : min(_2867, 0.0));
            _2921 = ((abs(_2734 / _2722) * cbSceneParam._m0[80u].y) * ((((_2876 - _2877) * 2.0) - ((exp2(_2742 * (isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0)))) - exp2(_2742 * (isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0))))) * _2865)) - ((exp2(_2744 * _2876) - exp2(_2744 * _2877)) * _2865))) + (_2737 * cbSceneParam._m0[80u].z);
        }
        vec4 _2923 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2633, _2634, 1.0), 0.0);
        float _2932 = exp2((_2921 * (-1.44269502162933349609375)) * (1.0 - _2923.w));
        float _2933 = log2(_2932);
        float _2949 = log2(_2653);
        _2746 = (exp2(_2949 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].x)) * _2923.x) / cbSceneParam._m0[78u].x)) + _2650;
        _2748 = (exp2(_2949 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].y)) * _2923.y) / cbSceneParam._m0[78u].y)) + _2651;
        _2750 = (exp2(_2949 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].z)) * _2923.z) / cbSceneParam._m0[78u].z)) + _2652;
        _2752 = _2932 * _2653;
    }
    else
    {
        _2746 = _2650;
        _2748 = _2651;
        _2750 = _2652;
        _2752 = _2653;
    }
    bool _2959;
    vec4 _2762;
    vec4 _2784;
    float _2786;
    float _2790;
    float _2791;
    float _2792;
    float _2793;
    bool _2803;
    for (;;)
    {
        _2762 = cbMatDynParam._m0[0u];
        float _2764 = roundEven(_2762.y);
        bool _2765 = _2764 == 3.0;
        float _2766 = log2(_2752);
        float _2773 = exp2(_2766 * cbSceneParam._m0[78u].x) * _2622;
        float _2774 = exp2(_2766 * cbSceneParam._m0[78u].y) * _2623;
        float _2775 = exp2(_2766 * cbSceneParam._m0[78u].z) * _2624;
        float _2782 = _780 + (-0.5);
        _2784 = cbMtdParam._m0[1u];
        _2786 = _2784.y * _2782;
        float _2789 = (_2764 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2790 = _2789 * (_2765 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2746)));
        _2791 = _2789 * (_2765 ? _2774 : (_2774 + (cbSceneParam._m0[72u].w * _2748)));
        _2792 = _2789 * (_2765 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2750)));
        _2793 = _2782 * 0.999000012874603271484375;
        _2803 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2803)
        {
            if ((cbInstanceData._m0[_247 + 7u].x + _2793) < 0.5)
            {
                _2959 = true;
                break;
            }
        }
        uint _2900 = _829 + uint(_2762.w);
        if ((cbInstanceData._m0[_2900].w < 1.0) && ((cbInstanceData._m0[_2900].w + _2793) < 0.5))
        {
            _2959 = true;
            break;
        }
        if ((_2786 + 1.0) < _2784.x)
        {
            _2959 = true;
            break;
        }
        _2959 = false;
        break;
    }
    float _3164;
    if (_2959)
    {
        discard_state = true;
        _3164 = 0.0;
    }
    else
    {
        _3164 = cbInstanceData._m0[_2625].w;
    }
    SV_Target.x = _2790;
    SV_Target.y = _2791;
    SV_Target.z = _2792;
    SV_Target.w = _3164;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2625].w;
    discard_exit();
}


