#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1286;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _370 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _370) * cbMtdParam._m0[24u].x) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3872 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _395 = (_388 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _396 = (_388 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _397 = (_388 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _272) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _273) + cbTextureTilingScale._m0[20u].w));
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _480 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _482 = _480.x;
    float _483 = _480.y;
    float _484 = _480.z;
    float _493 = ((_463.z - _484) * _388) + _484;
    float _496 = ((((_463.x - _482) * _388) + _482) * 2.0) + (-1.0);
    float _497 = ((((_463.y - _483) * _388) + _483) * 2.0) + (-1.0);
    float _498 = dot(vec2(_496, _497), vec2(_496, _497));
    float _3883 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _503 = sqrt(1.0 - (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))));
    float _506 = _496 + ((((_436.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _507 = _497 + ((((_436.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _510 = fma(_503, _241, fma(_507, _248, _506 * _234));
    float _513 = fma(_503, _242, fma(_507, _249, _506 * _235));
    float _516 = fma(_503, _243, fma(_507, _250, _506 * _236));
    float _520 = inversesqrt(dot(vec3(_510, _513, _516), vec3(_510, _513, _516)));
    vec4 _536 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _564 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _566 = _564.x;
    float _567 = 1.0 - _566;
    float _573 = (cbMtdParam._m0[19u].x + dot(vec4(_520 * _510, _520 * _513, _520 * _516, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_566 - _567) * cbMtdParam._m0[24u].z) + _567) * cbMtdParam._m0[21u].z);
    float _3894 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _576 = (-0.0) - cbMtdParam._m0[24u].y;
    float _578 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _579 = isnan(1.0) ? _578 : (isnan(_578) ? 1.0 : min(_578, 1.0));
    float _586 = _574 - ((_574 * TEXCOORD_8.x) * _579);
    float _587 = _574 - ((_574 * TEXCOORD_8.y) * _579);
    float _588 = _574 - ((_574 * TEXCOORD_8.z) * _579);
    float _595 = (_586 * ((_416.x * cbMtdParam._m0[18u].x) - _395)) + _395;
    float _596 = (_587 * ((_416.y * cbMtdParam._m0[18u].y) - _396)) + _396;
    float _597 = (_588 * ((_416.z * cbMtdParam._m0[18u].z) - _397)) + _397;
    vec4 _609 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _611 = _609.x;
    float _612 = 1.0 - _611;
    float _640 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_611 - _612) * cbMtdParam._m0[24u].w) + _612) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3915 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _641 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _649 = ((((cbMtdParam._m0[10u].x - _595) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _641) + _595;
    float _650 = ((((cbMtdParam._m0[10u].y - _596) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _641) + _596;
    float _651 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _597)) * _641) + _597;
    float _656 = (((_436.z - _493) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _493;
    vec4 _670 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _677 = (_670.x * 2.0) + (-1.0);
    float _678 = (_670.y * 2.0) + (-1.0);
    float _679 = dot(vec2(_677, _678), vec2(_677, _678));
    float _3926 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _687 = ((_670.z - _656) * _586) + _656;
    float _690 = ((cbMtdParam._m0[23u].y - _687) * _641) + _687;
    vec4 _709 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _715 = (_709.x * 2.0) + (-1.0);
    float _716 = (_709.y * 2.0) + (-1.0);
    float _717 = dot(vec2(_715, _716), vec2(_715, _716));
    float _3937 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _732 = ((sqrt(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) - _503) * _588) + _503;
    float _735 = (((_677 - _506) * _586) + _506) + (cbMtdParam._m0[21u].x * _506);
    float _736 = (((_678 - _507) * _587) + _507) + (cbMtdParam._m0[21u].x * _507);
    float _747 = (((_715 - _735) + (_735 * cbMtdParam._m0[22u].z)) * _641) + _735;
    float _748 = (((_716 - _736) + (_736 * cbMtdParam._m0[22u].z)) * _641) + _736;
    float _749 = (_641 * (sqrt(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) - _732)) + _732;
    float _751 = cbMtdParam._m0[22u].x + _536.w;
    float _754 = fma(_749, _241, fma(_748, _248, _747 * _234));
    float _757 = fma(_749, _242, fma(_748, _249, _747 * _235));
    float _760 = fma(_749, _243, fma(_748, _250, _747 * _236));
    float _764 = inversesqrt(dot(vec3(_754, _757, _760), vec3(_754, _757, _760)));
    float _765 = _764 * _754;
    float _766 = _764 * _757;
    float _767 = _764 * _760;
    float _3948 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _768 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _3970 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _3981 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _3992 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _786 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _837 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _827);
    float _838 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _827);
    float _839 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _827);
    float _843 = inversesqrt(dot(vec3(_837, _838, _839), vec3(_837, _838, _839)));
    float _844 = _837 * _843;
    float _845 = _838 * _843;
    float _846 = _839 * _843;
    float _852 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _853 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _871 = fma(_767, cbSceneParam._m0[5u].z, fma(_766, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _765));
    float _874 = fma(_767, cbSceneParam._m0[6u].z, fma(_766, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _765));
    float _877 = fma(_767, cbSceneParam._m0[7u].z, fma(_766, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _765));
    uint _891 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _897 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * cbInstanceData._m0[_891].x;
    float _898 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * cbInstanceData._m0[_891].y;
    float _899 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * cbInstanceData._m0[_891].z;
    float _4003 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _900 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _901 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _4025 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    vec4 _911 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _852, cbSceneParam._m0[86u].y * _853));
    float _915 = ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * TEXCOORD_5.w) * _911.x;
    float _916 = dot(vec3(_765, _766, _767), vec3(_844, _845, _846));
    float _919 = _916 * 2.0;
    float _923 = (_919 * _765) - _844;
    float _924 = (_919 * _766) - _845;
    float _925 = (_919 * _767) - _846;
    float _929 = abs(dot(vec3(_844, _845, _846), vec3(_765, _766, _767)));
    float _4036 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _931 = sqrt(_768);
    float _944 = exp2((_931 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_931 * 3.0));
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1285;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1010 = fma(_984, cbModelParam._m0[26u].z, fma(_980, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _976));
        float _1014 = fma(_984, cbModelParam._m0[27u].z, fma(_980, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _976));
        float _1018 = fma(_984, cbModelParam._m0[28u].z, fma(_980, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _976));
        float _1043 = _976 + _765;
        float _1044 = _980 + _766;
        float _1045 = _984 + _767;
        float _1055 = fma(_1045, cbModelParam._m0[26u].z, fma(_1044, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043)) - _1010;
        float _1056 = fma(_1045, cbModelParam._m0[27u].z, fma(_1044, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043)) - _1014;
        float _1057 = fma(_1045, cbModelParam._m0[28u].z, fma(_1044, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043)) - _1018;
        float _1061 = inversesqrt(dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057)));
        float _1074 = ((_1061 * _1055) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1010 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1075 = ((_1061 * _1056) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1014 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1061 * _1057) / cbModelParam._m0[34u].z) + ((((((_1018 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1074, _1075, _1076), 0.0);
        float _1113 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1079.x + (-0.5));
        float _1115 = _1113 * (_1079.y + (-0.5));
        float _1116 = _1113 * (_1079.z + (-0.5));
        float _1123 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1086.x + (-0.5));
        float _1125 = _1123 * (_1086.y + (-0.5));
        float _1126 = _1123 * (_1086.z + (-0.5));
        float _1133 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1093.x + (-0.5));
        float _1135 = _1133 * (_1093.y + (-0.5));
        float _1136 = _1133 * (_1093.z + (-0.5));
        float _1143 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1100.x + (-0.5));
        float _1145 = _1143 * (_1100.y + (-0.5));
        float _1146 = _1143 * (_1100.z + (-0.5));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = _1114 * 0.5;
        float _1151 = _1124 * 0.5;
        float _1152 = _1134 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1167 = (dot(vec3(_765, _766, _767), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1177 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _4084 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1179 + 1.0))) + _1184) * _1147;
        float _1194 = _1115 * 0.5;
        float _1195 = _1125 * 0.5;
        float _1196 = _1135 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_765, _766, _767), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _4117 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1221 + 1.0))) + _1226) * _1148;
        float _1236 = _1116 * 0.5;
        float _1237 = _1126 * 0.5;
        float _1238 = _1136 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_765, _766, _767), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _4150 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1263 + 1.0))) + _1268) * _1149;
        _1285 = _1116;
        _1287 = _1115;
        _1288 = _1114;
        _1289 = _1126;
        _1290 = _1125;
        _1291 = _1124;
        _1292 = _1136;
        _1293 = _1135;
        _1294 = _1134;
        _1295 = _1149;
        _1296 = _1148;
        _1297 = _1147;
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
    }
    else
    {
        _1285 = _1286;
        _1287 = _1286;
        _1288 = _1286;
        _1289 = _1286;
        _1290 = _1286;
        _1291 = _1286;
        _1292 = _1286;
        _1293 = _1286;
        _1294 = _1286;
        _1295 = _1286;
        _1296 = _1286;
        _1297 = _1286;
        _1298 = 0.0;
        _1299 = 0.0;
        _1300 = 0.0;
    }
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1325 = fma(_984, cbModelParam._m0[30u].z, fma(_980, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _976));
        float _1329 = fma(_984, cbModelParam._m0[31u].z, fma(_980, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _976));
        float _1333 = fma(_984, cbModelParam._m0[32u].z, fma(_980, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _976));
        float _1356 = _976 + _765;
        float _1357 = _980 + _766;
        float _1358 = _984 + _767;
        float _1368 = fma(_1358, cbModelParam._m0[30u].z, fma(_1357, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1356)) - _1325;
        float _1369 = fma(_1358, cbModelParam._m0[31u].z, fma(_1357, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1356)) - _1329;
        float _1370 = fma(_1358, cbModelParam._m0[32u].z, fma(_1357, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1356)) - _1333;
        float _1374 = inversesqrt(dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370)));
        float _1387 = ((_1374 * _1368) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1325 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1374 * _1369) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1329 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1374 * _1370) / cbModelParam._m0[35u].z) + ((((((_1333 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        float _1424 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1391.x + (-0.5));
        float _1426 = _1424 * (_1391.y + (-0.5));
        float _1427 = _1424 * (_1391.z + (-0.5));
        float _1434 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1398.x + (-0.5));
        float _1436 = _1434 * (_1398.y + (-0.5));
        float _1437 = _1434 * (_1398.z + (-0.5));
        float _1444 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1405.x + (-0.5));
        float _1446 = _1444 * (_1405.y + (-0.5));
        float _1447 = _1444 * (_1405.z + (-0.5));
        float _1454 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1412.x + (-0.5));
        float _1456 = _1454 * (_1412.y + (-0.5));
        float _1457 = _1454 * (_1412.z + (-0.5));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = _1425 * 0.5;
        float _1462 = _1435 * 0.5;
        float _1463 = _1445 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_765, _766, _767), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _4213 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1488 + 1.0))) + _1493) * _1458;
        float _1503 = _1426 * 0.5;
        float _1504 = _1436 * 0.5;
        float _1505 = _1446 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_765, _766, _767), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4224 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4235 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4246 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_1530 + 1.0))) + _1535) * _1459;
        float _1545 = _1427 * 0.5;
        float _1546 = _1437 * 0.5;
        float _1547 = _1447 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_765, _766, _767), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4279 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1572 + 1.0))) + _1577) * _1460;
        _1594 = _1427;
        _1595 = _1426;
        _1596 = _1425;
        _1597 = _1437;
        _1598 = _1436;
        _1599 = _1435;
        _1600 = _1447;
        _1601 = _1446;
        _1602 = _1445;
        _1603 = _1460;
        _1604 = _1459;
        _1605 = _1458;
        _1606 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
    }
    else
    {
        _1594 = _1286;
        _1595 = _1286;
        _1596 = _1286;
        _1597 = _1286;
        _1598 = _1286;
        _1599 = _1286;
        _1600 = _1286;
        _1601 = _1286;
        _1602 = _1286;
        _1603 = _1286;
        _1604 = _1286;
        _1605 = _1286;
        _1606 = 0.0;
        _1607 = 0.0;
        _1608 = 0.0;
    }
    float _1618 = (cbModelParam._m0[1u].x * (_1606 - _1298)) + _1298;
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1299)) + _1299;
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1300)) + _1300;
    float _1641 = fma(_1620, cbSceneParam._m0[89u].z, fma(_1619, cbSceneParam._m0[89u].y, _1618 * cbSceneParam._m0[89u].x));
    float _1644 = fma(_1620, cbSceneParam._m0[90u].z, fma(_1619, cbSceneParam._m0[90u].y, _1618 * cbSceneParam._m0[90u].x));
    float _1647 = fma(_1620, cbSceneParam._m0[91u].z, fma(_1619, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1618));
    float _1662 = _923 * 0.5;
    float _1663 = _924 * 0.5;
    float _1664 = _925 * 0.5;
    float _1665 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1668 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1671 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1594, _1597, _1600, _1603));
    float _1705;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1678 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1285, _1289, _1292, _1295));
        float _1682 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1287, _1290, _1293, _1296));
        float _1686 = dot(vec4(_1662, _1663, _1664, 1.0), vec4(_1288, _1291, _1294, _1297));
        float _1693 = dot(vec4(cbModelParam._m0[39u]), vec4(_1662, _1663, _1664, 1.0));
        _1705 = dot(vec3(isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1693) ? 0.0 : (isnan(0.0) ? _1693 : max(0.0, _1693))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1705 = 1.0;
    }
    float _1716;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1707 = dot(vec4(cbModelParam._m0[40u]), vec4(_1662, _1663, _1664, 1.0));
        _1716 = dot(vec3(isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1707) ? 0.0 : (isnan(0.0) ? _1707 : max(0.0, _1707))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1716 = 1.0;
    }
    float _1720 = (_1716 * cbModelParam._m0[1u].x) + (_1705 * (1.0 - cbModelParam._m0[1u].x));
    float _1730 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _768);
    float _1731 = isnan(_1730) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1730 : min(cbModelParam._m0[25u].z, _1730));
    float _1811;
    float _1813;
    float _1815;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1778 = fma(_984, cbModelParam._m0[13u].z, fma(_980, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _976)) + cbModelParam._m0[13u].w;
        float _1782 = fma(_984, cbModelParam._m0[14u].z, fma(_980, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _976)) + cbModelParam._m0[14u].w;
        float _1786 = fma(_984, cbModelParam._m0[15u].z, fma(_980, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _976)) + cbModelParam._m0[15u].w;
        float _1789 = fma(_925, cbModelParam._m0[13u].z, fma(_924, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _923));
        float _1792 = fma(_925, cbModelParam._m0[14u].z, fma(_924, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _923));
        float _1795 = fma(_925, cbModelParam._m0[15u].z, fma(_924, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _923));
        float _1823;
        if (_1789 > 0.0)
        {
            _1823 = abs((1.0 - _1778) / _1789);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1778 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1823 = frontier_phi_14_12_ladder;
        }
        float _1992;
        if (_1792 > 0.0)
        {
            _1992 = abs((1.0 - _1782) / _1792);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1782 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1992 = frontier_phi_23_19_ladder;
        }
        float _2287;
        if (_1795 > 0.0)
        {
            _2287 = abs((1.0 - _1786) / _1795);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1786 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2287 = frontier_phi_35_30_ladder;
        }
        float _2289 = isnan(_1992) ? _1823 : (isnan(_1823) ? _1992 : min(_1823, _1992));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1789) + _1778;
        float _2295 = (_2290 * _1792) + _1782;
        float _2296 = (_2290 * _1795) + _1786;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2299 = (-1.0) - _2297;
        float _2301 = _2297 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2296 > _2301) || ((_2296 < _2299) || ((_2295 > _2301) || ((_2295 < _2299) || ((_2294 < _2299) || (_2294 > _2301))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2441 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2296, cbModelParam._m0[9u].z, fma(_2295, cbModelParam._m0[9u].y, _2294 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2296, cbModelParam._m0[10u].z, fma(_2295, cbModelParam._m0[10u].y, _2294 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2296, cbModelParam._m0[11u].z, fma(_2295, cbModelParam._m0[11u].y, _2294 * cbModelParam._m0[11u].x))), _1731);
            frontier_phi_13_35_ladder = _2441.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2441.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2441.x * cbModelParam._m0[1u].y;
        }
        _1811 = frontier_phi_13_35_ladder_2;
        _1813 = frontier_phi_13_35_ladder_1;
        _1815 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1799 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_923, _924, _925), _1731);
        _1811 = _1799.x * cbModelParam._m0[1u].y;
        _1813 = _1799.y * cbModelParam._m0[1u].y;
        _1815 = _1799.z * cbModelParam._m0[1u].y;
    }
    float _1819 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _768);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1819 : min(cbModelParam._m0[25u].w, _1819));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1873 = fma(_984, cbModelParam._m0[21u].z, fma(_980, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _976)) + cbModelParam._m0[21u].w;
        float _1877 = fma(_984, cbModelParam._m0[22u].z, fma(_980, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _976)) + cbModelParam._m0[22u].w;
        float _1881 = fma(_984, cbModelParam._m0[23u].z, fma(_980, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _976)) + cbModelParam._m0[23u].w;
        float _1884 = fma(_925, cbModelParam._m0[21u].z, fma(_924, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _923));
        float _1887 = fma(_925, cbModelParam._m0[22u].z, fma(_924, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _923));
        float _1890 = fma(_925, cbModelParam._m0[23u].z, fma(_924, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _923));
        float _1997;
        if (_1884 > 0.0)
        {
            _1997 = abs((1.0 - _1873) / _1884);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1873 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1997 = frontier_phi_25_21_ladder;
        }
        float _2314;
        if (_1887 > 0.0)
        {
            _2314 = abs((1.0 - _1877) / _1887);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1877 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2314 = frontier_phi_37_32_ladder;
        }
        float _2641;
        if (_1890 > 0.0)
        {
            _2641 = abs((1.0 - _1881) / _1890);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1881 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2641 = frontier_phi_47_44_ladder;
        }
        float _2643 = isnan(_2314) ? _1997 : (isnan(_1997) ? _2314 : min(_1997, _2314));
        float _2644 = isnan(_2641) ? _2643 : (isnan(_2643) ? _2641 : min(_2643, _2641));
        float _2648 = (_2644 * _1884) + _1873;
        float _2649 = (_2644 * _1887) + _1877;
        float _2650 = (_2644 * _1890) + _1881;
        float _2651 = _2644 * 9.9999997473787516355514526367188e-05;
        float _2652 = (-1.0) - _2651;
        float _2654 = _2651 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2650 > _2654) || ((_2650 < _2652) || ((_2649 > _2654) || ((_2649 < _2652) || ((_2648 < _2652) || (_2648 > _2654))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2768 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2650, cbModelParam._m0[17u].z, fma(_2649, cbModelParam._m0[17u].y, _2648 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2650, cbModelParam._m0[18u].z, fma(_2649, cbModelParam._m0[18u].y, _2648 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2650, cbModelParam._m0[19u].z, fma(_2649, cbModelParam._m0[19u].y, _2648 * cbModelParam._m0[19u].x))), _1820);
            frontier_phi_22_47_ladder = _2768.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2768.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2768.x * cbModelParam._m0[1u].z;
        }
        _1909 = frontier_phi_22_47_ladder_2;
        _1911 = frontier_phi_22_47_ladder_1;
        _1913 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_923, _924, _925), _1820);
        _1909 = _1893.x * cbModelParam._m0[1u].z;
        _1911 = _1893.y * cbModelParam._m0[1u].z;
        _1913 = _1893.z * cbModelParam._m0[1u].z;
    }
    float _1925 = ((((1.0 - _944) * ((_931 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_944 * _931)) * _915;
    float _1926 = _1925 * ((cbModelParam._m0[1u].w * (_1909 - _1811)) + _1811);
    float _1927 = _1925 * ((cbModelParam._m0[1u].w * (_1911 - _1813)) + _1813);
    float _1928 = _1925 * ((cbModelParam._m0[1u].w * (_1913 - _1815)) + _1815);
    float _1931 = fma(_1928, cbSceneParam._m0[89u].z, fma(_1927, cbSceneParam._m0[89u].y, _1926 * cbSceneParam._m0[89u].x));
    float _1934 = fma(_1928, cbSceneParam._m0[90u].z, fma(_1927, cbSceneParam._m0[90u].y, _1926 * cbSceneParam._m0[90u].x));
    float _1937 = fma(_1928, cbSceneParam._m0[91u].z, fma(_1927, cbSceneParam._m0[91u].y, _1926 * cbSceneParam._m0[91u].x));
    float _1971 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1975 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1979 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1983 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1984 = _1971 / _1983;
    float _1985 = _1975 / _1983;
    float _1986 = _1979 / _1983;
    float _2133;
    float _2134;
    float _2135;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2013 = ((uint(_1986 > cbSceneParam._m0[59u].y) + uint(_1986 > cbSceneParam._m0[59u].x)) + uint(_1986 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2014 = _2013 + 43u;
        uint _2022 = _2013 + 44u;
        uint _2030 = _2013 + 45u;
        uint _2038 = _2013 + 46u;
        float _2049 = fma(_1983, cbSceneParam._m0[_2014].w, fma(_1979, cbSceneParam._m0[_2014].z, fma(_1975, cbSceneParam._m0[_2014].y, _1971 * cbSceneParam._m0[_2014].x)));
        float _2053 = fma(_1983, cbSceneParam._m0[_2022].w, fma(_1979, cbSceneParam._m0[_2022].z, fma(_1975, cbSceneParam._m0[_2022].y, _1971 * cbSceneParam._m0[_2022].x)));
        float _2061 = fma(_1983, cbSceneParam._m0[_2038].w, fma(_1979, cbSceneParam._m0[_2038].z, fma(_1975, cbSceneParam._m0[_2038].y, _1971 * cbSceneParam._m0[_2038].x)));
        float _2066 = cbSceneParam._m0[33u].z * _2061;
        float _2068 = cbSceneParam._m0[33u].w * _2061;
        float _2071 = fma(_1983, cbSceneParam._m0[_2030].w, fma(_1979, cbSceneParam._m0[_2030].z, fma(_1975, cbSceneParam._m0[_2030].y, _1971 * cbSceneParam._m0[_2030].x))) / _2061;
        float _2119 = (cbSceneParam._m0[33u].x - sqrt(((_1985 * _1985) + (_1984 * _1984)) + (_1986 * _1986))) * cbSceneParam._m0[33u].y;
        float _4405 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2126 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2066 + _2049) / _2061, (_2068 + _2053) / _2061), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2068 + _2049) / _2061, (_2053 - _2066) / _2061), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2049 - _2066) / _2061, (_2053 - _2068) / _2061), _2071), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2049 - _2068) / _2061, (_2066 + _2053) / _2061), _2071), 0.0)).x), vec4(0.25)));
        _2133 = 1.0 - (_2126 * cbSceneParam._m0[34u].x);
        _2134 = 1.0 - (_2126 * cbSceneParam._m0[34u].y);
        _2135 = 1.0 - (_2126 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2133 = 1.0;
        _2134 = 1.0;
        _2135 = 1.0;
    }
    float _2199;
    float _2201;
    float _2203;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2187 = fma(_1983, cbSceneParam._m0[63u].w, fma(_1979, cbSceneParam._m0[63u].z, fma(_1975, cbSceneParam._m0[63u].y, _1971 * cbSceneParam._m0[63u].x)));
        float _2188 = fma(_1983, cbSceneParam._m0[60u].w, fma(_1979, cbSceneParam._m0[60u].z, fma(_1975, cbSceneParam._m0[60u].y, _1971 * cbSceneParam._m0[60u].x))) / _2187;
        float _2189 = fma(_1983, cbSceneParam._m0[61u].w, fma(_1979, cbSceneParam._m0[61u].z, fma(_1975, cbSceneParam._m0[61u].y, _1971 * cbSceneParam._m0[61u].x))) / _2187;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2188 >= cbSceneParam._m0[64u].x) && (_2189 >= cbSceneParam._m0[64u].y)) && (_2188 <= cbSceneParam._m0[64u].z)) && (_2189 <= cbSceneParam._m0[64u].w))
        {
            float _2327 = fma(_1983, cbSceneParam._m0[62u].w, fma(_1979, cbSceneParam._m0[62u].z, fma(_1975, cbSceneParam._m0[62u].y, _1971 * cbSceneParam._m0[62u].x))) / _2187;
            float _2331 = isnan(cbSceneParam._m0[41u].w) ? _2327 : (isnan(_2327) ? cbSceneParam._m0[41u].w : max(_2327, cbSceneParam._m0[41u].w));
            float _2374 = (cbSceneParam._m0[33u].x - sqrt(((_1985 * _1985) + (_1984 * _1984)) + (_1986 * _1986))) * cbSceneParam._m0[33u].y;
            float _4421 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
            float _2381 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2188, cbSceneParam._m0[33u].w + _2189), _2331), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2188, _2189 - cbSceneParam._m0[33u].z), _2331), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2188 - cbSceneParam._m0[33u].z, _2189 - cbSceneParam._m0[33u].w), _2331), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2188 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2189), _2331), 0.0)).x), vec4(0.25)));
            float _2385 = 1.0 - (_2381 * cbSceneParam._m0[34u].x);
            float _2386 = 1.0 - (_2381 * cbSceneParam._m0[34u].y);
            float _2387 = 1.0 - (_2381 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2387) ? _2135 : (isnan(_2135) ? _2387 : min(_2135, _2387));
            frontier_phi_34_33_ladder_1 = isnan(_2386) ? _2134 : (isnan(_2134) ? _2386 : min(_2134, _2386));
            frontier_phi_34_33_ladder_2 = isnan(_2385) ? _2133 : (isnan(_2133) ? _2385 : min(_2133, _2385));
        }
        else
        {
            frontier_phi_34_33_ladder = _2135;
            frontier_phi_34_33_ladder_1 = _2134;
            frontier_phi_34_33_ladder_2 = _2133;
        }
        _2199 = frontier_phi_34_33_ladder_2;
        _2201 = frontier_phi_34_33_ladder_1;
        _2203 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2199 = _2133;
        _2201 = _2134;
        _2203 = _2135;
    }
    uvec4 _2208 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2210 = _2208.x * 14u;
    uint _2211 = _2210 + 13u;
    float _2218 = _915 + (-1.0);
    float _2223 = (cbLight._m0[_2211].x * _2218) + 1.0;
    float _2224 = (cbLight._m0[_2211].y * _2218) + 1.0;
    float _2225 = (cbLight._m0[_2211].z * _2218) + 1.0;
    float _2226 = (cbLight._m0[_2211].w * _2218) + 1.0;
    uint _2227 = _2210 + 5u;
    float _2233 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
    uint _2237 = _2210 + 4u;
    float _2246 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
    uint _2250 = _2210 | 1u;
    float _2261 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_765, _766, _767));
    float _2264 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_765, _766, _767));
    float _4457 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _4468 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2269 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * 0.3183098733425140380859375;
    float _2271 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * 0.3183098733425140380859375;
    float _2278 = ((cbLight._m0[_2227].x * _2233) * _2271) + (((cbLight._m0[_2237].x * _2199) * _2246) * _2269);
    float _2279 = ((_2233 * cbLight._m0[_2227].y) * _2271) + (((cbLight._m0[_2237].y * _2201) * _2246) * _2269);
    float _2280 = ((_2233 * cbLight._m0[_2227].z) * _2271) + (((cbLight._m0[_2237].z * _2203) * _2246) * _2269);
    uvec4 _2284 = floatBitsToUint(cbLight._m0[_2210 + 12u]);
    bool _2286 = _2284.x == 0u;
    float _2388;
    float _2390;
    float _2392;
    if (_2286)
    {
        _2388 = _2278;
        _2390 = _2279;
        _2392 = _2280;
    }
    else
    {
        uint _2396 = _2210 + 6u;
        float _2412 = (dot(vec3(cbLight._m0[_2210 + 2u].xyz), vec3(_765, _766, _767)) * 0.5) + 0.5;
        float _2413 = _2412 * _2412;
        float _4479 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2414 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2415 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
        _2388 = (((cbLight._m0[_2396].x * 0.3183098733425140380859375) * _2414) * _2415) + _2278;
        _2390 = (((cbLight._m0[_2396].y * 0.3183098733425140380859375) * _2414) * _2415) + _2279;
        _2392 = (((cbLight._m0[_2396].z * 0.3183098733425140380859375) * _2414) * _2415) + _2280;
    }
    bool _2395 = _2284.y == 0u;
    float _2450;
    float _2452;
    float _2454;
    if (_2395)
    {
        _2450 = _2388;
        _2452 = _2390;
        _2454 = _2392;
    }
    else
    {
        uint _2612 = _2210 + 7u;
        float _2628 = (dot(vec3(cbLight._m0[_2210 + 3u].xyz), vec3(_765, _766, _767)) * 0.5) + 0.5;
        float _2629 = _2628 * _2628;
        float _4495 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2630 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2631 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2450 = (((cbLight._m0[_2612].x * 0.3183098733425140380859375) * _2630) * _2631) + _2388;
        _2452 = (((cbLight._m0[_2612].y * 0.3183098733425140380859375) * _2630) * _2631) + _2390;
        _2454 = (((cbLight._m0[_2612].z * 0.3183098733425140380859375) * _2630) * _2631) + _2392;
    }
    uint _2457 = _2210 + 8u;
    float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _768) * 0.949999988079071044921875);
    float _2471 = _2470 * _2470;
    float _2472 = cbLight._m0[_2210].x + _844;
    float _2473 = cbLight._m0[_2210].y + _845;
    float _2474 = cbLight._m0[_2210].z + _846;
    float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
    float _2479 = _2478 * _2472;
    float _2480 = _2478 * _2473;
    float _2481 = _2478 * _2474;
    float _2482 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2210].xyz));
    float _4511 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2485 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _4522 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _2486 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _2487 = dot(vec3(_765, _766, _767), vec3(_2479, _2480, _2481));
    float _4533 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2490 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _2491 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2479, _2480, _2481));
    float _4544 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2495 = _2471 * _2471;
    float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
    float _2510 = (exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2511 = 1.0 - _2471;
    float _2522 = (0.5 / (((_2486 * ((_2485 * _2511) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2511) + _2471) * _2485))) * _2485;
    float _4555 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2524 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
    uint _2538 = _2210 + 9u;
    float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2250].w)) * _768) * 0.949999988079071044921875);
    float _2550 = _2549 * _2549;
    float _2551 = cbLight._m0[_2250].x + _844;
    float _2552 = cbLight._m0[_2250].y + _845;
    float _2553 = cbLight._m0[_2250].z + _846;
    float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
    float _2558 = _2557 * _2551;
    float _2559 = _2557 * _2552;
    float _2560 = _2557 * _2553;
    float _2561 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2250].xyz));
    float _4566 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2564 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _2565 = dot(vec3(_765, _766, _767), vec3(_2558, _2559, _2560));
    float _4577 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2569 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_2558, _2559, _2560));
    float _4588 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2573 = _2550 * _2550;
    float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
    float _2586 = (exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2587 = 1.0 - _2550;
    float _2597 = (0.5 / (((_2486 * ((_2564 * _2587) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2587) + _2550) * _2564))) * _2564;
    float _4599 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2599 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
    float _2609 = (((_2586 * cbLight._m0[_2538].x) * _2599) * _2233) + ((((cbLight._m0[_2457].x * _2199) * _2510) * _2524) * _2246);
    float _2610 = (((_2586 * cbLight._m0[_2538].y) * _2599) * _2233) + ((((cbLight._m0[_2457].y * _2201) * _2510) * _2524) * _2246);
    float _2611 = (((_2586 * cbLight._m0[_2538].z) * _2599) * _2233) + ((((cbLight._m0[_2457].z * _2203) * _2510) * _2524) * _2246);
    float _2667;
    float _2669;
    float _2671;
    if (_2286)
    {
        _2667 = _2609;
        _2669 = _2610;
        _2671 = _2611;
    }
    else
    {
        uint _2673 = _2210 + 2u;
        uint _2677 = _2210 + 10u;
        float _2691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2673].w)) * _768) * 0.949999988079071044921875);
        float _2692 = _2691 * _2691;
        float _2693 = cbLight._m0[_2673].x + _844;
        float _2694 = cbLight._m0[_2673].y + _845;
        float _2695 = cbLight._m0[_2673].z + _846;
        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
        float _2700 = _2699 * _2693;
        float _2701 = _2699 * _2694;
        float _2702 = _2699 * _2695;
        float _2703 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2673].xyz));
        float _4610 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2707 = dot(vec3(_765, _766, _767), vec3(_2700, _2701, _2702));
        float _4621 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2711 = dot(vec3(cbLight._m0[_2673].xyz), vec3(_2700, _2701, _2702));
        float _4632 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2715 = _2692 * _2692;
        float _2719 = ((_2710 * _2710) * (_2715 + (-1.0))) + 1.0;
        float _2728 = (exp2(log2(1.0 - (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2729 = 1.0 - _2692;
        float _2739 = (0.5 / (((_2486 * ((_2706 * _2729) + _2692)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2729) + _2692) * _2706))) * _2706;
        float _4643 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2741 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2715 / ((_2719 * _2719) * 3.141590118408203125));
        float _2742 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
        _2667 = (((_2728 * cbLight._m0[_2677].x) * _2741) * _2742) + _2609;
        _2669 = (((_2728 * cbLight._m0[_2677].y) * _2741) * _2742) + _2610;
        _2671 = (((_2728 * cbLight._m0[_2677].z) * _2741) * _2742) + _2611;
    }
    float _2773;
    float _2775;
    float _2777;
    if (_2395)
    {
        _2773 = _2667;
        _2775 = _2669;
        _2777 = _2671;
    }
    else
    {
        uint _2784 = _2210 + 3u;
        uint _2788 = _2210 + 11u;
        float _2802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2784].w)) * _768) * 0.949999988079071044921875);
        float _2803 = _2802 * _2802;
        float _2804 = cbLight._m0[_2784].x + _844;
        float _2805 = cbLight._m0[_2784].y + _845;
        float _2806 = cbLight._m0[_2784].z + _846;
        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
        float _2811 = _2810 * _2804;
        float _2812 = _2810 * _2805;
        float _2813 = _2810 * _2806;
        float _2814 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2784].xyz));
        float _4659 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2818 = dot(vec3(_765, _766, _767), vec3(_2811, _2812, _2813));
        float _4670 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2821 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2822 = dot(vec3(cbLight._m0[_2784].xyz), vec3(_2811, _2812, _2813));
        float _4681 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2826 = _2803 * _2803;
        float _2830 = ((_2821 * _2821) * (_2826 + (-1.0))) + 1.0;
        float _2839 = (exp2(log2(1.0 - (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2840 = 1.0 - _2803;
        float _2850 = (0.5 / (((_2486 * ((_2817 * _2840) + _2803)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2840) + _2803) * _2817))) * _2817;
        float _4692 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2852 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2826 / ((_2830 * _2830) * 3.141590118408203125));
        float _2853 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2773 = (((_2839 * cbLight._m0[_2788].x) * _2852) * _2853) + _2667;
        _2775 = (((_2839 * cbLight._m0[_2788].y) * _2852) * _2853) + _2669;
        _2777 = (((_2839 * cbLight._m0[_2788].z) * _2852) * _2853) + _2671;
    }
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    float _2929;
    if (_2208.y == 0u)
    {
        uvec4 _2874 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2875 = _2874.x;
        uint _2886 = uint((float(_2874.y) * floor(float(uint(cbSceneParam._m0[85u].y * _853) / _2875))) + floor(float(uint(cbSceneParam._m0[85u].x * _852) / _2875)));
        float _2896 = (log2(_1986 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2897 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        uint _2900 = uint(isnan(14.0) ? _2897 : (isnan(_2897) ? 14.0 : min(_2897, 14.0)));
        uvec4 _2905 = texelFetch(g_lightClusterGridBuffer, int(((_2900 << 2u) + (_2886 << 6u)) >> 2u));
        uint _2906 = _2905.x;
        uint _2907 = _2874.z;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        if (((((1u << ((_2907 >> 4u) & 15u)) + 4294967295u) & _2906) == 0u) || ((_2907 & 240u) == 0u))
        {
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
        }
        else
        {
            float _2987;
            float _2989;
            float _2991;
            float _2993;
            float _2995;
            float _2997;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            uint _3136 = 0u;
            uint _3145;
            bool _3146;
            for (;;)
            {
                _3145 = texelFetch(g_lightClassification, int((((_2900 << 5u) + (_2886 << 9u)) + (_3136 << 2u)) >> 2u)).x;
                _3146 = _3145 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3146)
                {
                    frontier_phi_66_pred = _3135;
                    frontier_phi_66_pred_1 = _3134;
                    frontier_phi_66_pred_2 = _3133;
                    frontier_phi_66_pred_3 = _3132;
                    frontier_phi_66_pred_4 = _3131;
                    frontier_phi_66_pred_5 = _3130;
                }
                else
                {
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    uint _3260;
                    _3254 = _3130;
                    _3255 = _3131;
                    _3256 = _3132;
                    _3257 = _3133;
                    _3258 = _3134;
                    _3259 = _3135;
                    _3260 = _3145;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    for (;;)
                    {
                        uint _3264 = uint(findLSB(_3260)) + (_3136 << 5u);
                        uint _3261 = (_3260 + 4294967295u) & _3260;
                        uint _3266 = _3264 * 48u;
                        vec4 _3280 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3266)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 3u)).x));
                        uint _3286 = (_3264 * 48u) + 4u;
                        vec4 _3299 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3286)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 3u)).x));
                        uint _3305 = (_3264 * 48u) + 8u;
                        vec3 _3316 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3305)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 2u)).x));
                        float _3320 = _3280.x - _1984;
                        float _3321 = _3280.y - _1985;
                        float _3322 = _3280.z - _1986;
                        float _3323 = dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322));
                        float _3326 = inversesqrt(_3323);
                        float _3327 = _3326 * _3320;
                        float _3328 = _3326 * _3321;
                        float _3329 = _3326 * _3322;
                        float _3330 = dot(vec3(_871, _874, _877), vec3(_3327, _3328, _3329));
                        float _3335 = 1.0 - (_3323 * _3280.w);
                        float _4718 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3336 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                        float _3337 = sqrt(_3323) * _3299.w;
                        float _3340 = 1.39999997615814208984375 / (_3337 + 1.39999997615814208984375);
                        float _3341 = _3340 * _3340;
                        float _3344 = ((1.0 - _3341) * _3330) + _3341;
                        float _3347 = _3337 * _3337;
                        float _3351 = ((isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0))) * _3336) / ((_3347 * 0.699999988079071044921875) + 1.0);
                        float _3355 = (-0.0) - _1984;
                        float _3356 = (-0.0) - _1985;
                        float _3357 = (-0.0) - _1986;
                        float _3361 = inversesqrt(dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357)));
                        float _3362 = _3361 * _3355;
                        float _3363 = _3361 * _3356;
                        float _3364 = _3361 * _3357;
                        float _3371 = exp2(log2(1.0 / ((_3347 * 3.5) + 5.0)) * 0.25);
                        float _3372 = 1.0 - _931;
                        float _3379 = sqrt(1.0 - ((1.0 - (_3372 * _3372)) * (1.0 - (_3371 * _3371))));
                        float _3380 = _3379 * _3379;
                        float _3381 = _3380 * _3380;
                        float _3382 = _3362 + _3327;
                        float _3383 = _3363 + _3328;
                        float _3384 = _3364 + _3329;
                        float _3388 = inversesqrt(dot(vec3(_3382, _3383, _3384), vec3(_3382, _3383, _3384)));
                        float _3392 = dot(vec3(_871, _874, _877), vec3(_3362, _3363, _3364));
                        float _4734 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3395 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                        float _3396 = dot(vec3(_871, _874, _877), vec3(_3388 * _3382, _3388 * _3383, _3388 * _3384));
                        float _4745 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3399 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3403 = ((_3399 * _3399) * (_3381 + (-1.0))) + 1.0;
                        float _3404 = _3340 * _3380;
                        float _3405 = _3404 * _3404;
                        float _3408 = ((1.0 - _3405) * _3330) + _3405;
                        float _4756 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3409 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3410 = 1.0 - _3380;
                        float _3420 = (0.5 / (((_3409 * ((_3395 * _3410) + _3380)) + 9.9999999392252902907785028219223e-09) + (((_3409 * _3410) + _3380) * _3395))) * _3409;
                        float _4767 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3431 = (((_3381 * 3.1415927410125732421875) * (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) / ((_3403 * _3403) * ((_3347 * 2.1991131305694580078125) + 3.141590118408203125))) * _3336;
                        _3189 = (_3351 * _3299.x) + _3257;
                        _3190 = (_3351 * _3299.y) + _3258;
                        _3191 = (_3351 * _3299.z) + _3259;
                        _3186 = (_3431 * _3316.x) + _3254;
                        _3187 = (_3431 * _3316.y) + _3255;
                        _3188 = (_3431 * _3316.z) + _3256;
                        if (_3261 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3254 = _3186;
                            _3255 = _3187;
                            _3256 = _3188;
                            _3257 = _3189;
                            _3258 = _3190;
                            _3259 = _3191;
                            _3260 = _3261;
                        }
                    }
                    frontier_phi_66_pred = _3191;
                    frontier_phi_66_pred_1 = _3190;
                    frontier_phi_66_pred_2 = _3189;
                    frontier_phi_66_pred_3 = _3188;
                    frontier_phi_66_pred_4 = _3187;
                    frontier_phi_66_pred_5 = _3186;
                }
                _2997 = frontier_phi_66_pred;
                _2995 = frontier_phi_66_pred_1;
                _2993 = frontier_phi_66_pred_2;
                _2991 = frontier_phi_66_pred_3;
                _2989 = frontier_phi_66_pred_4;
                _2987 = frontier_phi_66_pred_5;
                uint _3137 = _3136 + 1u;
                if (_3137 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3130 = _2987;
                    _3131 = _2989;
                    _3132 = _2991;
                    _3133 = _2993;
                    _3134 = _2995;
                    _3135 = _2997;
                    _3136 = _3137;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
        }
        uvec4 _3000 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3001 = _3000.z;
        uint _3003 = (_3001 >> 8u) & 15u;
        float _3098;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        if (((4294967295u << _3003) & _2906) == 0u)
        {
            _3098 = _2986;
            _3100 = _2988;
            _3102 = _2990;
            _3104 = _2992;
            _3106 = _2994;
            _3108 = _2996;
        }
        else
        {
            float _3123 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
            float _3124 = _3123 * _1984;
            float _3125 = _3123 * _1985;
            float _3126 = _3123 * _1986;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3003 < ((_3001 >> 12u) & 15u))
            {
                float _3099;
                float _3101;
                float _3103;
                float _3105;
                float _3107;
                float _3109;
                float _3237 = _2986;
                float _3238 = _2988;
                float _3239 = _2990;
                float _3240 = _2992;
                float _3241 = _2994;
                float _3242 = _2996;
                uint _3243 = _3003;
                uint _3252;
                bool _3253;
                for (;;)
                {
                    _3252 = texelFetch(g_lightClassification, int((((_2900 << 5u) + (_2886 << 9u)) + (_3243 << 2u)) >> 2u)).x;
                    _3253 = _3252 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3253)
                    {
                        frontier_phi_72_pred = _3242;
                        frontier_phi_72_pred_1 = _3241;
                        frontier_phi_72_pred_2 = _3240;
                        frontier_phi_72_pred_3 = _3239;
                        frontier_phi_72_pred_4 = _3238;
                        frontier_phi_72_pred_5 = _3237;
                    }
                    else
                    {
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3449 = _3237;
                        float _3450 = _3238;
                        float _3451 = _3239;
                        float _3452 = _3240;
                        float _3453 = _3241;
                        float _3454 = _3242;
                        uint _3455 = _3252;
                        uint _3456;
                        vec4 _3481;
                        float _3482;
                        vec4 _3497;
                        vec3 _3509;
                        vec4 _3524;
                        vec4 _3539;
                        float _3585;
                        bool _3586;
                        for (;;)
                        {
                            uint _3466 = ((_3243 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3455));
                            _3456 = (_3455 + 4294967295u) & _3455;
                            uint _3468 = _3466 * 40u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            _3482 = _3481.w;
                            uint _3484 = (_3466 * 40u) + 4u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3499 = (_3466 * 40u) + 8u;
                            _3509 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x));
                            uint _3511 = (_3466 * 40u) + 16u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3526 = (_3466 * 40u) + 20u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3541 = (_3466 * 40u) + 24u;
                            vec4 _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3560 = (_3466 * 40u) + 28u;
                            vec4 _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            _3585 = fma(_1986, _3573.z, fma(_1985, _3573.y, _3573.x * _1984)) + _3573.w;
                            _3586 = !((fma(_1986, _3554.z, fma(_1985, _3554.y, _3554.x * _1984)) + _3554.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3586)
                            {
                                float _3613 = _3481.x - _1984;
                                float _3614 = _3481.y - _1985;
                                float _3615 = _3481.z - _1986;
                                float _3616 = dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615));
                                float _3619 = inversesqrt(_3616);
                                float _3620 = _3619 * _3613;
                                float _3621 = _3619 * _3614;
                                float _3622 = _3619 * _3615;
                                float _3626 = 1.0 - (_3616 / (_3482 * _3482));
                                float _4778 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3627 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                                float _3631 = sqrt(_3616) * _3497.w;
                                float _3633 = 1.39999997615814208984375 / (_3631 + 1.39999997615814208984375);
                                float _3634 = _3633 * _3633;
                                float _3637 = ((1.0 - _3634) * dot(vec3(_3620, _3621, _3622), vec3(_871, _874, _877))) + _3634;
                                float _3640 = _3631 * _3631;
                                float _3644 = (fma(_1986, _3524.z, fma(_1985, _3524.y, _3524.x * _1984)) + _3524.w) / _3585;
                                float _3645 = (fma(_1986, _3539.z, fma(_1985, _3539.y, _3539.x * _1984)) + _3539.w) / _3585;
                                float _3649 = 1.0 - dot(vec2(_3644, _3645), vec2(_3644, _3645));
                                float _4794 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3650 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                                float _3651 = _3650 * (((isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0))) * _3627) / ((_3640 * 0.699999988079071044921875) + 1.0));
                                float _3663 = exp2(log2(1.0 / ((_3640 * 3.5) + 5.0)) * 0.25);
                                float _3664 = 1.0 - _931;
                                float _3671 = sqrt(1.0 - ((1.0 - (_3664 * _3664)) * (1.0 - (_3663 * _3663))));
                                float _3672 = _3671 * _3671;
                                float _3673 = _3672 * _3672;
                                float _3674 = _3620 - _3124;
                                float _3675 = _3621 - _3125;
                                float _3676 = _3622 - _3126;
                                float _3680 = inversesqrt(dot(vec3(_3674, _3675, _3676), vec3(_3674, _3675, _3676)));
                                float _3684 = dot(vec3(_871, _874, _877), vec3((-0.0) - _3124, (-0.0) - _3125, (-0.0) - _3126));
                                float _4805 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3687 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3688 = dot(vec3(_871, _874, _877), vec3(_3680 * _3674, _3680 * _3675, _3680 * _3676));
                                float _4816 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3691 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3695 = ((_3691 * _3691) * (_3673 + (-1.0))) + 1.0;
                                float _3696 = _3633 * _3672;
                                float _3697 = _3696 * _3696;
                                float _3703 = ((1.0 - _3697) * dot(vec3(_871, _874, _877), vec3(_3620, _3621, _3622))) + _3697;
                                float _4827 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3704 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3705 = 1.0 - _3672;
                                float _3715 = (0.5 / (((_3704 * ((_3687 * _3705) + _3672)) + 9.9999999392252902907785028219223e-09) + (((_3704 * _3705) + _3672) * _3687))) * _3704;
                                float _4838 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3725 = (_3650 * _3627) * (((_3673 * 3.1415927410125732421875) * (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) / ((_3695 * _3695) * ((_3640 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3651 * _3497.y;
                                frontier_phi_78_pred_1 = _3651 * _3497.x;
                                frontier_phi_78_pred_2 = _3725 * _3509.z;
                                frontier_phi_78_pred_3 = _3725 * _3509.y;
                                frontier_phi_78_pred_4 = _3725 * _3509.x;
                                frontier_phi_78_pred_5 = _3651 * _3497.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3733 = frontier_phi_78_pred;
                            _3732 = frontier_phi_78_pred_1;
                            _3731 = frontier_phi_78_pred_2;
                            _3730 = frontier_phi_78_pred_3;
                            _3729 = frontier_phi_78_pred_4;
                            _3734 = frontier_phi_78_pred_5;
                            _3439 = _3732 + _3452;
                            _3440 = _3733 + _3453;
                            _3441 = _3734 + _3454;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            _3438 = _3731 + _3451;
                            if (_3456 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3456;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3441;
                        frontier_phi_72_pred_1 = _3440;
                        frontier_phi_72_pred_2 = _3439;
                        frontier_phi_72_pred_3 = _3438;
                        frontier_phi_72_pred_4 = _3437;
                        frontier_phi_72_pred_5 = _3436;
                    }
                    _3109 = frontier_phi_72_pred;
                    _3107 = frontier_phi_72_pred_1;
                    _3105 = frontier_phi_72_pred_2;
                    _3103 = frontier_phi_72_pred_3;
                    _3101 = frontier_phi_72_pred_4;
                    _3099 = frontier_phi_72_pred_5;
                    uint _3244 = _3243 + 1u;
                    if (_3244 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3237 = _3099;
                        _3238 = _3101;
                        _3239 = _3103;
                        _3240 = _3105;
                        _3241 = _3107;
                        _3242 = _3109;
                        _3243 = _3244;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3109;
                frontier_phi_60_61_ladder_1 = _3107;
                frontier_phi_60_61_ladder_2 = _3103;
                frontier_phi_60_61_ladder_3 = _3101;
                frontier_phi_60_61_ladder_4 = _3099;
                frontier_phi_60_61_ladder_5 = _3105;
            }
            else
            {
                frontier_phi_60_61_ladder = _2996;
                frontier_phi_60_61_ladder_1 = _2994;
                frontier_phi_60_61_ladder_2 = _2990;
                frontier_phi_60_61_ladder_3 = _2988;
                frontier_phi_60_61_ladder_4 = _2986;
                frontier_phi_60_61_ladder_5 = _2992;
            }
            _3098 = frontier_phi_60_61_ladder_4;
            _3100 = frontier_phi_60_61_ladder_3;
            _3102 = frontier_phi_60_61_ladder_2;
            _3104 = frontier_phi_60_61_ladder_5;
            _3106 = frontier_phi_60_61_ladder_1;
            _3108 = frontier_phi_60_61_ladder;
        }
        float _3113 = isnan(1.0) ? _915 : (isnan(_915) ? 1.0 : min(_915, 1.0));
        _2919 = (_3113 * _3104) + _2450;
        _2921 = (_3113 * _3106) + _2452;
        _2923 = (_3113 * _3108) + _2454;
        _2925 = ((_3098 * 0.039999999105930328369140625) * _3113) + _2773;
        _2927 = ((_3100 * 0.039999999105930328369140625) * _3113) + _2775;
        _2929 = ((_3102 * 0.039999999105930328369140625) * _3113) + _2777;
    }
    else
    {
        _2919 = _2450;
        _2921 = _2452;
        _2923 = _2454;
        _2925 = _2773;
        _2927 = _2775;
        _2929 = _2777;
    }
    float _4854 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _4865 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _4876 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    uint _2949 = _253 + 6u;
    float _2957 = _852 / cbSceneParam._m0[86u].x;
    float _2958 = _853 / cbSceneParam._m0[86u].y;
    vec4 _2972 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2957, _2958, (log2((isnan(cbSceneParam._m0[77u].w) ? _786 : (isnan(_786) ? cbSceneParam._m0[77u].w : min(_786, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2974 = _2972.x;
    float _2975 = _2972.y;
    float _2976 = _2972.z;
    float _2977 = _2972.w;
    float _3048;
    float _3050;
    float _3052;
    float _3054;
    if (_786 > cbSceneParam._m0[78u].w)
    {
        float _3011 = isnan(_786) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _786 : min(cbSceneParam._m0[80u].w, _786));
        float _3012 = _3011 / _786;
        float _3023 = _3012 * _837;
        float _3024 = _838 * _3012;
        float _3025 = (-0.0) - _3024;
        float _3026 = _3012 * _839;
        float _3028 = (cbSceneParam._m0[77u].w * _3025) / _3011;
        float _3029 = _3028 + cbSceneParam._m0[79u].w;
        float _3030 = cbSceneParam._m0[79u].w - _3024;
        float _3036 = sqrt(((_3023 * _3023) + (_3024 * _3024)) + (_3026 * _3026));
        float _3039 = (1.0 - (cbSceneParam._m0[77u].w / _3011)) * _3036;
        float _3044 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3046 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3199;
        if (abs((_3025 - _3028) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3199 = ((((_3029 > 0.0) ? exp2(_3044 * _3029) : (2.0 - exp2(_3046 * _3029))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3039;
        }
        else
        {
            float _3159 = 1.0 / cbSceneParam._m0[80u].x;
            float _3160 = isnan(_3030) ? _3029 : (isnan(_3029) ? _3030 : max(_3029, _3030));
            float _3161 = isnan(_3030) ? _3029 : (isnan(_3029) ? _3030 : min(_3029, _3030));
            float _3170 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : min(_3160, 0.0));
            float _3171 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : min(_3161, 0.0));
            _3199 = ((abs(_3036 / _3025) * cbSceneParam._m0[80u].y) * ((((_3170 - _3171) * 2.0) - ((exp2(_3044 * (isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0)))) - exp2(_3044 * (isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))))) * _3159)) - ((exp2(_3046 * _3170) - exp2(_3046 * _3171)) * _3159))) + (_3039 * cbSceneParam._m0[80u].z);
        }
        vec4 _3201 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2957, _2958, 1.0), 0.0);
        float _3210 = exp2((_3199 * (-1.44269502162933349609375)) * (1.0 - _3201.w));
        float _3211 = log2(_3210);
        float _3227 = log2(_2977);
        _3048 = (exp2(_3227 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].x)) * _3201.x) / cbSceneParam._m0[78u].x)) + _2974;
        _3050 = (exp2(_3227 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].y)) * _3201.y) / cbSceneParam._m0[78u].y)) + _2975;
        _3052 = (exp2(_3227 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3211 * cbSceneParam._m0[78u].z)) * _3201.z) / cbSceneParam._m0[78u].z)) + _2976;
        _3054 = _3210 * _2977;
    }
    else
    {
        _3048 = _2974;
        _3050 = _2975;
        _3052 = _2976;
        _3054 = _2977;
    }
    float _3066 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3067 = _3066 == 3.0;
    float _3068 = log2(_3054);
    float _3075 = exp2(_3068 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * (_2919 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _915))) + ((_2925 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1720)) * cbPerFrame._m0[3u].x));
    float _3076 = exp2(_3068 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2921 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _915))) + ((_2927 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1720)) * cbPerFrame._m0[3u].x));
    float _3077 = exp2(_3068 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2923 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _915))) + ((_2929 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1720)) * cbPerFrame._m0[3u].x));
    float _3086 = (_3066 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3086 * (_3067 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3048)));
    SV_Target.y = _3086 * (_3067 ? _3076 : (_3076 + (cbSceneParam._m0[72u].w * _3050)));
    SV_Target.z = _3086 * (_3067 ? _3077 : (_3077 + (cbSceneParam._m0[72u].w * _3052)));
    SV_Target.w = cbInstanceData._m0[_2949].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2949].w;
}


