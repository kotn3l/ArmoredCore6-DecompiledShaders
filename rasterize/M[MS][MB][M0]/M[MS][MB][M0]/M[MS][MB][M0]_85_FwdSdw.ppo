#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1174;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3763 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3774 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3785 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _326 = _321.x * cbMtdParam._m0[11u].x;
    float _327 = _321.y * cbMtdParam._m0[11u].y;
    float _328 = _321.z * cbMtdParam._m0[11u].z;
    vec4 _347 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _383 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _395 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _412 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_385 - _395) * cbMtdParam._m0[24u].x) + _395) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3796 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _420 = (_413 * ((_347.x * cbMtdParam._m0[12u].x) - _326)) + _326;
    float _421 = (_413 * ((_347.y * cbMtdParam._m0[12u].y) - _327)) + _327;
    float _422 = (_413 * ((_347.z * cbMtdParam._m0[12u].z) - _328)) + _328;
    float _426 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _420;
    float _429 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _421;
    float _432 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _422;
    float _439 = ((_420 - _426) * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) + _426;
    float _440 = ((_421 - _429) * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) + _429;
    float _441 = ((_422 - _432) * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) + _432;
    vec4 _459 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _484 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _503 = _501.x;
    float _504 = _501.y;
    float _505 = _501.z;
    float _514 = ((_484.z - _505) * _413) + _505;
    float _517 = ((((_484.x - _503) * _413) + _503) * 2.0) + (-1.0);
    float _518 = ((((_484.y - _504) * _413) + _504) * 2.0) + (-1.0);
    float _519 = dot(vec2(_517, _518), vec2(_517, _518));
    float _3807 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _524 = sqrt(1.0 - (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))));
    vec4 _537 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _555 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _283) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _284) + cbTextureTilingScale._m0[11u].w));
    float _557 = _555.x;
    float _558 = 1.0 - _557;
    float _571 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_557 - _558) * cbMtdParam._m0[24u].z) + _558) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3818 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _572 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _579 = (_572 * (cbMtdParam._m0[17u].x - _439)) + _439;
    float _580 = (_572 * (cbMtdParam._m0[17u].y - _440)) + _440;
    float _581 = (_572 * (cbMtdParam._m0[17u].z - _441)) + _441;
    float _586 = (((_459.z - _514) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _514;
    vec4 _599 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _283) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _284) + cbTextureTilingScale._m0[15u].w));
    float _606 = (_599.x * 2.0) + (-1.0);
    float _607 = (_599.y * 2.0) + (-1.0);
    float _608 = dot(vec2(_606, _607), vec2(_606, _607));
    float _3829 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _616 = (_572 * (_599.z - _586)) + _586;
    float _621 = _517 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_459.x * 2.0) + (-1.0)));
    float _622 = _518 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_459.y * 2.0) + (-1.0)));
    float _634 = (((_606 - _621) + (cbMtdParam._m0[21u].x * _621)) * _572) + _621;
    float _635 = (((_607 - _622) + (cbMtdParam._m0[21u].x * _622)) * _572) + _622;
    float _636 = (_572 * (sqrt(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) - _524)) + _524;
    float _638 = cbMtdParam._m0[22u].x + _537.w;
    float _641 = fma(_636, _230 * NORMAL.x, fma(_635, _237 * TANGENT.x, (_223 * _215) * _634));
    float _644 = fma(_636, _230 * NORMAL.y, fma(_635, _237 * TANGENT.y, (_223 * _216) * _634));
    float _647 = fma(_636, _230 * NORMAL.z, fma(_635, _237 * TANGENT.z, (_223 * _217) * _634));
    float _651 = inversesqrt(dot(vec3(_641, _644, _647), vec3(_641, _644, _647)));
    float _652 = _651 * _641;
    float _653 = _651 * _644;
    float _654 = _651 * _647;
    float _3840 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _655 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _3851 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _3862 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _3873 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _3884 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _673 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _725 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _715);
    float _726 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _715);
    float _727 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _715);
    float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
    float _732 = _725 * _731;
    float _733 = _726 * _731;
    float _734 = _727 * _731;
    float _740 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _741 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _759 = fma(_654, cbSceneParam._m0[5u].z, fma(_653, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _652));
    float _762 = fma(_654, cbSceneParam._m0[6u].z, fma(_653, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _652));
    float _765 = fma(_654, cbSceneParam._m0[7u].z, fma(_653, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _652));
    uint _779 = (_264 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _785 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * cbInstanceData._m0[_779].x;
    float _786 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_779].y;
    float _787 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * cbInstanceData._m0[_779].z;
    float _3895 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _3917 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    vec4 _799 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _740, cbSceneParam._m0[86u].y * _741));
    float _803 = ((isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * TEXCOORD_5.w) * _799.x;
    float _804 = dot(vec3(_652, _653, _654), vec3(_732, _733, _734));
    float _807 = _804 * 2.0;
    float _811 = (_807 * _652) - _732;
    float _812 = (_807 * _653) - _733;
    float _813 = (_807 * _654) - _734;
    float _817 = abs(dot(vec3(_732, _733, _734), vec3(_652, _653, _654)));
    float _3928 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _819 = sqrt(_655);
    float _832 = exp2((_819 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_819 * 3.0));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1173;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _898 = fma(_872, cbModelParam._m0[26u].z, fma(_868, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _864));
        float _902 = fma(_872, cbModelParam._m0[27u].z, fma(_868, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _864));
        float _906 = fma(_872, cbModelParam._m0[28u].z, fma(_868, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _864));
        float _931 = _864 + _652;
        float _932 = _868 + _653;
        float _933 = _872 + _654;
        float _943 = fma(_933, cbModelParam._m0[26u].z, fma(_932, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _931)) - _898;
        float _944 = fma(_933, cbModelParam._m0[27u].z, fma(_932, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _931)) - _902;
        float _945 = fma(_933, cbModelParam._m0[28u].z, fma(_932, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _931)) - _906;
        float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
        float _962 = ((_949 * _943) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_898 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_949 * _944) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_902 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_949 * _945) / cbModelParam._m0[34u].z) + ((((((_906 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        float _1001 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_967.x + (-0.5));
        float _1003 = _1001 * (_967.y + (-0.5));
        float _1004 = _1001 * (_967.z + (-0.5));
        float _1011 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_974.x + (-0.5));
        float _1013 = _1011 * (_974.y + (-0.5));
        float _1014 = _1011 * (_974.z + (-0.5));
        float _1021 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_981.x + (-0.5));
        float _1023 = _1021 * (_981.y + (-0.5));
        float _1024 = _1021 * (_981.z + (-0.5));
        float _1031 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_988.x + (-0.5));
        float _1033 = _1031 * (_988.y + (-0.5));
        float _1034 = _1031 * (_988.z + (-0.5));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = _1002 * 0.5;
        float _1039 = _1012 * 0.5;
        float _1040 = _1022 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1055 = (dot(vec3(_652, _653, _654), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1065 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3976 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1067 + 1.0))) + _1072) * _1035;
        float _1082 = _1003 * 0.5;
        float _1083 = _1013 * 0.5;
        float _1084 = _1023 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_652, _653, _654), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _4009 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1109 + 1.0))) + _1114) * _1036;
        float _1124 = _1004 * 0.5;
        float _1125 = _1014 * 0.5;
        float _1126 = _1024 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_652, _653, _654), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _4042 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1151 + 1.0))) + _1156) * _1037;
        _1173 = _1004;
        _1175 = _1003;
        _1176 = _1002;
        _1177 = _1014;
        _1178 = _1013;
        _1179 = _1012;
        _1180 = _1024;
        _1181 = _1023;
        _1182 = _1022;
        _1183 = _1037;
        _1184 = _1036;
        _1185 = _1035;
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
    }
    else
    {
        _1173 = _1174;
        _1175 = _1174;
        _1176 = _1174;
        _1177 = _1174;
        _1178 = _1174;
        _1179 = _1174;
        _1180 = _1174;
        _1181 = _1174;
        _1182 = _1174;
        _1183 = _1174;
        _1184 = _1174;
        _1185 = _1174;
        _1186 = 0.0;
        _1187 = 0.0;
        _1188 = 0.0;
    }
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1213 = fma(_872, cbModelParam._m0[30u].z, fma(_868, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _864));
        float _1217 = fma(_872, cbModelParam._m0[31u].z, fma(_868, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _864));
        float _1221 = fma(_872, cbModelParam._m0[32u].z, fma(_868, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _864));
        float _1244 = _864 + _652;
        float _1245 = _868 + _653;
        float _1246 = _872 + _654;
        float _1256 = fma(_1246, cbModelParam._m0[30u].z, fma(_1245, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1244)) - _1213;
        float _1257 = fma(_1246, cbModelParam._m0[31u].z, fma(_1245, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1244)) - _1217;
        float _1258 = fma(_1246, cbModelParam._m0[32u].z, fma(_1245, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1244)) - _1221;
        float _1262 = inversesqrt(dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258)));
        float _1275 = ((_1262 * _1256) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1213 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1262 * _1257) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1217 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1262 * _1258) / cbModelParam._m0[35u].z) + ((((((_1221 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        float _1312 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1279.x + (-0.5));
        float _1314 = _1312 * (_1279.y + (-0.5));
        float _1315 = _1312 * (_1279.z + (-0.5));
        float _1322 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1286.x + (-0.5));
        float _1324 = _1322 * (_1286.y + (-0.5));
        float _1325 = _1322 * (_1286.z + (-0.5));
        float _1332 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1293.x + (-0.5));
        float _1334 = _1332 * (_1293.y + (-0.5));
        float _1335 = _1332 * (_1293.z + (-0.5));
        float _1342 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1300.x + (-0.5));
        float _1344 = _1342 * (_1300.y + (-0.5));
        float _1345 = _1342 * (_1300.z + (-0.5));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = _1313 * 0.5;
        float _1350 = _1323 * 0.5;
        float _1351 = _1333 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_652, _653, _654), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4105 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1376 + 1.0))) + _1381) * _1346;
        float _1391 = _1314 * 0.5;
        float _1392 = _1324 * 0.5;
        float _1393 = _1334 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_652, _653, _654), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4138 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1418 + 1.0))) + _1423) * _1347;
        float _1433 = _1315 * 0.5;
        float _1434 = _1325 * 0.5;
        float _1435 = _1335 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_652, _653, _654), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4171 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1460 + 1.0))) + _1465) * _1348;
        _1482 = _1315;
        _1483 = _1314;
        _1484 = _1313;
        _1485 = _1325;
        _1486 = _1324;
        _1487 = _1323;
        _1488 = _1335;
        _1489 = _1334;
        _1490 = _1333;
        _1491 = _1348;
        _1492 = _1347;
        _1493 = _1346;
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
    }
    else
    {
        _1482 = _1174;
        _1483 = _1174;
        _1484 = _1174;
        _1485 = _1174;
        _1486 = _1174;
        _1487 = _1174;
        _1488 = _1174;
        _1489 = _1174;
        _1490 = _1174;
        _1491 = _1174;
        _1492 = _1174;
        _1493 = _1174;
        _1494 = 0.0;
        _1495 = 0.0;
        _1496 = 0.0;
    }
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1186)) + _1186;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1187)) + _1187;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1188)) + _1188;
    float _1529 = fma(_1508, cbSceneParam._m0[89u].z, fma(_1507, cbSceneParam._m0[89u].y, _1506 * cbSceneParam._m0[89u].x));
    float _1532 = fma(_1508, cbSceneParam._m0[90u].z, fma(_1507, cbSceneParam._m0[90u].y, _1506 * cbSceneParam._m0[90u].x));
    float _1535 = fma(_1508, cbSceneParam._m0[91u].z, fma(_1507, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1506));
    float _1550 = _811 * 0.5;
    float _1551 = _812 * 0.5;
    float _1552 = _813 * 0.5;
    float _1553 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1556 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1559 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1593;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1566 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1173, _1177, _1180, _1183));
        float _1570 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1175, _1178, _1181, _1184));
        float _1574 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1581 = dot(vec4(cbModelParam._m0[39u]), vec4(_1550, _1551, _1552, 1.0));
        _1593 = dot(vec3(isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1581) ? 0.0 : (isnan(0.0) ? _1581 : max(0.0, _1581))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1593 = 1.0;
    }
    float _1604;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1595 = dot(vec4(cbModelParam._m0[40u]), vec4(_1550, _1551, _1552, 1.0));
        _1604 = dot(vec3(isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1595) ? 0.0 : (isnan(0.0) ? _1595 : max(0.0, _1595))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1604 = 1.0;
    }
    float _1608 = (_1604 * cbModelParam._m0[1u].x) + (_1593 * (1.0 - cbModelParam._m0[1u].x));
    float _1618 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _655);
    float _1619 = isnan(_1618) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1618 : min(cbModelParam._m0[25u].z, _1618));
    float _1700;
    float _1702;
    float _1704;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1667 = fma(_872, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _864)) + cbModelParam._m0[13u].w;
        float _1671 = fma(_872, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _864)) + cbModelParam._m0[14u].w;
        float _1675 = fma(_872, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _864)) + cbModelParam._m0[15u].w;
        float _1678 = fma(_813, cbModelParam._m0[13u].z, fma(_812, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _811));
        float _1681 = fma(_813, cbModelParam._m0[14u].z, fma(_812, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _811));
        float _1684 = fma(_813, cbModelParam._m0[15u].z, fma(_812, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _811));
        float _1712;
        if (_1678 > 0.0)
        {
            _1712 = abs((1.0 - _1667) / _1678);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1667 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1712 = frontier_phi_14_12_ladder;
        }
        float _1882;
        if (_1681 > 0.0)
        {
            _1882 = abs((1.0 - _1671) / _1681);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1671 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1882 = frontier_phi_23_19_ladder;
        }
        float _2177;
        if (_1684 > 0.0)
        {
            _2177 = abs((1.0 - _1675) / _1684);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1675 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2177 = frontier_phi_35_30_ladder;
        }
        float _2179 = isnan(_1882) ? _1712 : (isnan(_1712) ? _1882 : min(_1712, _1882));
        float _2180 = isnan(_2177) ? _2179 : (isnan(_2179) ? _2177 : min(_2179, _2177));
        float _2184 = (_2180 * _1678) + _1667;
        float _2185 = (_2180 * _1681) + _1671;
        float _2186 = (_2180 * _1684) + _1675;
        float _2187 = _2180 * 9.9999997473787516355514526367188e-05;
        float _2189 = (-1.0) - _2187;
        float _2191 = _2187 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2186 > _2191) || ((_2186 < _2189) || ((_2185 > _2191) || ((_2185 < _2189) || ((_2184 < _2189) || (_2184 > _2191))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2331 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2186, cbModelParam._m0[9u].z, fma(_2185, cbModelParam._m0[9u].y, _2184 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2186, cbModelParam._m0[10u].z, fma(_2185, cbModelParam._m0[10u].y, _2184 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2186, cbModelParam._m0[11u].z, fma(_2185, cbModelParam._m0[11u].y, _2184 * cbModelParam._m0[11u].x))), _1619);
            frontier_phi_13_35_ladder = _2331.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2331.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2331.x * cbModelParam._m0[1u].y;
        }
        _1700 = frontier_phi_13_35_ladder_2;
        _1702 = frontier_phi_13_35_ladder_1;
        _1704 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1688 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_811, _812, _813), _1619);
        _1700 = _1688.x * cbModelParam._m0[1u].y;
        _1702 = _1688.y * cbModelParam._m0[1u].y;
        _1704 = _1688.z * cbModelParam._m0[1u].y;
    }
    float _1708 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _655);
    float _1709 = isnan(_1708) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1708 : min(cbModelParam._m0[25u].w, _1708));
    float _1799;
    float _1801;
    float _1803;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1763 = fma(_872, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _864)) + cbModelParam._m0[21u].w;
        float _1767 = fma(_872, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _864)) + cbModelParam._m0[22u].w;
        float _1771 = fma(_872, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _864)) + cbModelParam._m0[23u].w;
        float _1774 = fma(_813, cbModelParam._m0[21u].z, fma(_812, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _811));
        float _1777 = fma(_813, cbModelParam._m0[22u].z, fma(_812, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _811));
        float _1780 = fma(_813, cbModelParam._m0[23u].z, fma(_812, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _811));
        float _1887;
        if (_1774 > 0.0)
        {
            _1887 = abs((1.0 - _1763) / _1774);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1763 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1887 = frontier_phi_25_21_ladder;
        }
        float _2204;
        if (_1777 > 0.0)
        {
            _2204 = abs((1.0 - _1767) / _1777);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1767 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2204 = frontier_phi_37_32_ladder;
        }
        float _2531;
        if (_1780 > 0.0)
        {
            _2531 = abs((1.0 - _1771) / _1780);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1771 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2531 = frontier_phi_47_44_ladder;
        }
        float _2533 = isnan(_2204) ? _1887 : (isnan(_1887) ? _2204 : min(_1887, _2204));
        float _2534 = isnan(_2531) ? _2533 : (isnan(_2533) ? _2531 : min(_2533, _2531));
        float _2538 = (_2534 * _1774) + _1763;
        float _2539 = (_2534 * _1777) + _1767;
        float _2540 = (_2534 * _1780) + _1771;
        float _2541 = _2534 * 9.9999997473787516355514526367188e-05;
        float _2542 = (-1.0) - _2541;
        float _2544 = _2541 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2540 > _2544) || ((_2540 < _2542) || ((_2539 > _2544) || ((_2539 < _2542) || ((_2538 < _2542) || (_2538 > _2544))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2658 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2540, cbModelParam._m0[17u].z, fma(_2539, cbModelParam._m0[17u].y, _2538 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2540, cbModelParam._m0[18u].z, fma(_2539, cbModelParam._m0[18u].y, _2538 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2540, cbModelParam._m0[19u].z, fma(_2539, cbModelParam._m0[19u].y, _2538 * cbModelParam._m0[19u].x))), _1709);
            frontier_phi_22_47_ladder = _2658.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2658.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2658.x * cbModelParam._m0[1u].z;
        }
        _1799 = frontier_phi_22_47_ladder_2;
        _1801 = frontier_phi_22_47_ladder_1;
        _1803 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1783 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_811, _812, _813), _1709);
        _1799 = _1783.x * cbModelParam._m0[1u].z;
        _1801 = _1783.y * cbModelParam._m0[1u].z;
        _1803 = _1783.z * cbModelParam._m0[1u].z;
    }
    float _1815 = ((((1.0 - _832) * ((_819 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_832 * _819)) * _803;
    float _1816 = _1815 * ((cbModelParam._m0[1u].w * (_1799 - _1700)) + _1700);
    float _1817 = _1815 * ((cbModelParam._m0[1u].w * (_1801 - _1702)) + _1702);
    float _1818 = _1815 * ((cbModelParam._m0[1u].w * (_1803 - _1704)) + _1704);
    float _1821 = fma(_1818, cbSceneParam._m0[89u].z, fma(_1817, cbSceneParam._m0[89u].y, _1816 * cbSceneParam._m0[89u].x));
    float _1824 = fma(_1818, cbSceneParam._m0[90u].z, fma(_1817, cbSceneParam._m0[90u].y, _1816 * cbSceneParam._m0[90u].x));
    float _1827 = fma(_1818, cbSceneParam._m0[91u].z, fma(_1817, cbSceneParam._m0[91u].y, _1816 * cbSceneParam._m0[91u].x));
    float _1861 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1865 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1869 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1873 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1874 = _1861 / _1873;
    float _1875 = _1865 / _1873;
    float _1876 = _1869 / _1873;
    float _2023;
    float _2024;
    float _2025;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1903 = ((uint(_1876 > cbSceneParam._m0[59u].y) + uint(_1876 > cbSceneParam._m0[59u].x)) + uint(_1876 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1904 = _1903 + 43u;
        uint _1912 = _1903 + 44u;
        uint _1920 = _1903 + 45u;
        uint _1928 = _1903 + 46u;
        float _1939 = fma(_1873, cbSceneParam._m0[_1904].w, fma(_1869, cbSceneParam._m0[_1904].z, fma(_1865, cbSceneParam._m0[_1904].y, _1861 * cbSceneParam._m0[_1904].x)));
        float _1943 = fma(_1873, cbSceneParam._m0[_1912].w, fma(_1869, cbSceneParam._m0[_1912].z, fma(_1865, cbSceneParam._m0[_1912].y, _1861 * cbSceneParam._m0[_1912].x)));
        float _1951 = fma(_1873, cbSceneParam._m0[_1928].w, fma(_1869, cbSceneParam._m0[_1928].z, fma(_1865, cbSceneParam._m0[_1928].y, _1861 * cbSceneParam._m0[_1928].x)));
        float _1956 = cbSceneParam._m0[33u].z * _1951;
        float _1958 = cbSceneParam._m0[33u].w * _1951;
        float _1961 = fma(_1873, cbSceneParam._m0[_1920].w, fma(_1869, cbSceneParam._m0[_1920].z, fma(_1865, cbSceneParam._m0[_1920].y, _1861 * cbSceneParam._m0[_1920].x))) / _1951;
        float _2009 = (cbSceneParam._m0[33u].x - sqrt(((_1875 * _1875) + (_1874 * _1874)) + (_1876 * _1876))) * cbSceneParam._m0[33u].y;
        float _4297 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2016 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1956 + _1939) / _1951, (_1958 + _1943) / _1951), _1961), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1958 + _1939) / _1951, (_1943 - _1956) / _1951), _1961), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1939 - _1956) / _1951, (_1943 - _1958) / _1951), _1961), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1939 - _1958) / _1951, (_1956 + _1943) / _1951), _1961), 0.0)).x), vec4(0.25)));
        _2023 = 1.0 - (_2016 * cbSceneParam._m0[34u].x);
        _2024 = 1.0 - (_2016 * cbSceneParam._m0[34u].y);
        _2025 = 1.0 - (_2016 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2023 = 1.0;
        _2024 = 1.0;
        _2025 = 1.0;
    }
    float _2089;
    float _2091;
    float _2093;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2077 = fma(_1873, cbSceneParam._m0[63u].w, fma(_1869, cbSceneParam._m0[63u].z, fma(_1865, cbSceneParam._m0[63u].y, _1861 * cbSceneParam._m0[63u].x)));
        float _2078 = fma(_1873, cbSceneParam._m0[60u].w, fma(_1869, cbSceneParam._m0[60u].z, fma(_1865, cbSceneParam._m0[60u].y, _1861 * cbSceneParam._m0[60u].x))) / _2077;
        float _2079 = fma(_1873, cbSceneParam._m0[61u].w, fma(_1869, cbSceneParam._m0[61u].z, fma(_1865, cbSceneParam._m0[61u].y, _1861 * cbSceneParam._m0[61u].x))) / _2077;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2078 >= cbSceneParam._m0[64u].x) && (_2079 >= cbSceneParam._m0[64u].y)) && (_2078 <= cbSceneParam._m0[64u].z)) && (_2079 <= cbSceneParam._m0[64u].w))
        {
            float _2217 = fma(_1873, cbSceneParam._m0[62u].w, fma(_1869, cbSceneParam._m0[62u].z, fma(_1865, cbSceneParam._m0[62u].y, _1861 * cbSceneParam._m0[62u].x))) / _2077;
            float _2221 = isnan(cbSceneParam._m0[41u].w) ? _2217 : (isnan(_2217) ? cbSceneParam._m0[41u].w : max(_2217, cbSceneParam._m0[41u].w));
            float _2264 = (cbSceneParam._m0[33u].x - sqrt(((_1875 * _1875) + (_1874 * _1874)) + (_1876 * _1876))) * cbSceneParam._m0[33u].y;
            float _4313 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
            float _2271 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2078, cbSceneParam._m0[33u].w + _2079), _2221), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2078, _2079 - cbSceneParam._m0[33u].z), _2221), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2078 - cbSceneParam._m0[33u].z, _2079 - cbSceneParam._m0[33u].w), _2221), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2078 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2079), _2221), 0.0)).x), vec4(0.25)));
            float _2275 = 1.0 - (_2271 * cbSceneParam._m0[34u].x);
            float _2276 = 1.0 - (_2271 * cbSceneParam._m0[34u].y);
            float _2277 = 1.0 - (_2271 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2277) ? _2025 : (isnan(_2025) ? _2277 : min(_2025, _2277));
            frontier_phi_34_33_ladder_1 = isnan(_2276) ? _2024 : (isnan(_2024) ? _2276 : min(_2024, _2276));
            frontier_phi_34_33_ladder_2 = isnan(_2275) ? _2023 : (isnan(_2023) ? _2275 : min(_2023, _2275));
        }
        else
        {
            frontier_phi_34_33_ladder = _2025;
            frontier_phi_34_33_ladder_1 = _2024;
            frontier_phi_34_33_ladder_2 = _2023;
        }
        _2089 = frontier_phi_34_33_ladder_2;
        _2091 = frontier_phi_34_33_ladder_1;
        _2093 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2089 = _2023;
        _2091 = _2024;
        _2093 = _2025;
    }
    uvec4 _2098 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _2100 = _2098.x * 14u;
    uint _2101 = _2100 + 13u;
    float _2108 = _803 + (-1.0);
    float _2113 = (cbLight._m0[_2101].x * _2108) + 1.0;
    float _2114 = (cbLight._m0[_2101].y * _2108) + 1.0;
    float _2115 = (cbLight._m0[_2101].z * _2108) + 1.0;
    float _2116 = (cbLight._m0[_2101].w * _2108) + 1.0;
    uint _2117 = _2100 + 5u;
    float _2123 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
    uint _2127 = _2100 + 4u;
    float _2136 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
    uint _2140 = _2100 | 1u;
    float _2151 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_652, _653, _654));
    float _2154 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_652, _653, _654));
    float _4349 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _4360 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2159 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * 0.3183098733425140380859375;
    float _2161 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * 0.3183098733425140380859375;
    float _2168 = ((cbLight._m0[_2117].x * _2123) * _2161) + (((cbLight._m0[_2127].x * _2089) * _2136) * _2159);
    float _2169 = ((_2123 * cbLight._m0[_2117].y) * _2161) + (((cbLight._m0[_2127].y * _2091) * _2136) * _2159);
    float _2170 = ((_2123 * cbLight._m0[_2117].z) * _2161) + (((cbLight._m0[_2127].z * _2093) * _2136) * _2159);
    uvec4 _2174 = floatBitsToUint(cbLight._m0[_2100 + 12u]);
    bool _2176 = _2174.x == 0u;
    float _2278;
    float _2280;
    float _2282;
    if (_2176)
    {
        _2278 = _2168;
        _2280 = _2169;
        _2282 = _2170;
    }
    else
    {
        uint _2286 = _2100 + 6u;
        float _2302 = (dot(vec3(cbLight._m0[_2100 + 2u].xyz), vec3(_652, _653, _654)) * 0.5) + 0.5;
        float _2303 = _2302 * _2302;
        float _4371 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2304 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2305 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2278 = (((cbLight._m0[_2286].x * 0.3183098733425140380859375) * _2304) * _2305) + _2168;
        _2280 = (((cbLight._m0[_2286].y * 0.3183098733425140380859375) * _2304) * _2305) + _2169;
        _2282 = (((cbLight._m0[_2286].z * 0.3183098733425140380859375) * _2304) * _2305) + _2170;
    }
    bool _2285 = _2174.y == 0u;
    float _2340;
    float _2342;
    float _2344;
    if (_2285)
    {
        _2340 = _2278;
        _2342 = _2280;
        _2344 = _2282;
    }
    else
    {
        uint _2502 = _2100 + 7u;
        float _2518 = (dot(vec3(cbLight._m0[_2100 + 3u].xyz), vec3(_652, _653, _654)) * 0.5) + 0.5;
        float _2519 = _2518 * _2518;
        float _4387 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2520 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2521 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
        _2340 = (((cbLight._m0[_2502].x * 0.3183098733425140380859375) * _2520) * _2521) + _2278;
        _2342 = (((cbLight._m0[_2502].y * 0.3183098733425140380859375) * _2520) * _2521) + _2280;
        _2344 = (((cbLight._m0[_2502].z * 0.3183098733425140380859375) * _2520) * _2521) + _2282;
    }
    uint _2347 = _2100 + 8u;
    float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2100].w)) * _655) * 0.949999988079071044921875);
    float _2361 = _2360 * _2360;
    float _2362 = cbLight._m0[_2100].x + _732;
    float _2363 = cbLight._m0[_2100].y + _733;
    float _2364 = cbLight._m0[_2100].z + _734;
    float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
    float _2369 = _2368 * _2362;
    float _2370 = _2368 * _2363;
    float _2371 = _2368 * _2364;
    float _2372 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2100].xyz));
    float _4403 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2375 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _4414 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _2376 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _2377 = dot(vec3(_652, _653, _654), vec3(_2369, _2370, _2371));
    float _4425 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2381 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_2369, _2370, _2371));
    float _4436 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2385 = _2361 * _2361;
    float _2389 = ((_2380 * _2380) * (_2385 + (-1.0))) + 1.0;
    float _2400 = (exp2(log2(1.0 - (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2401 = 1.0 - _2361;
    float _2412 = (0.5 / (((_2376 * ((_2375 * _2401) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2376 * _2401) + _2361) * _2375))) * _2375;
    float _4447 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2414 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2385 / ((_2389 * _2389) * 3.141590118408203125));
    uint _2428 = _2100 + 9u;
    float _2439 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2140].w)) * _655) * 0.949999988079071044921875);
    float _2440 = _2439 * _2439;
    float _2441 = cbLight._m0[_2140].x + _732;
    float _2442 = cbLight._m0[_2140].y + _733;
    float _2443 = cbLight._m0[_2140].z + _734;
    float _2447 = inversesqrt(dot(vec3(_2441, _2442, _2443), vec3(_2441, _2442, _2443)));
    float _2448 = _2447 * _2441;
    float _2449 = _2447 * _2442;
    float _2450 = _2447 * _2443;
    float _2451 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2140].xyz));
    float _4458 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2454 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2455 = dot(vec3(_652, _653, _654), vec3(_2448, _2449, _2450));
    float _4469 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2459 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_2448, _2449, _2450));
    float _4480 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2463 = _2440 * _2440;
    float _2467 = ((_2458 * _2458) * (_2463 + (-1.0))) + 1.0;
    float _2476 = (exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2477 = 1.0 - _2440;
    float _2487 = (0.5 / (((_2376 * ((_2454 * _2477) + _2440)) + 9.9999999392252902907785028219223e-09) + (((_2376 * _2477) + _2440) * _2454))) * _2454;
    float _4491 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2489 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2463 / ((_2467 * _2467) * 3.141590118408203125));
    float _2499 = (((_2476 * cbLight._m0[_2428].x) * _2489) * _2123) + ((((cbLight._m0[_2347].x * _2089) * _2400) * _2414) * _2136);
    float _2500 = (((_2476 * cbLight._m0[_2428].y) * _2489) * _2123) + ((((cbLight._m0[_2347].y * _2091) * _2400) * _2414) * _2136);
    float _2501 = (((_2476 * cbLight._m0[_2428].z) * _2489) * _2123) + ((((cbLight._m0[_2347].z * _2093) * _2400) * _2414) * _2136);
    float _2557;
    float _2559;
    float _2561;
    if (_2176)
    {
        _2557 = _2499;
        _2559 = _2500;
        _2561 = _2501;
    }
    else
    {
        uint _2563 = _2100 + 2u;
        uint _2567 = _2100 + 10u;
        float _2581 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2563].w)) * _655) * 0.949999988079071044921875);
        float _2582 = _2581 * _2581;
        float _2583 = cbLight._m0[_2563].x + _732;
        float _2584 = cbLight._m0[_2563].y + _733;
        float _2585 = cbLight._m0[_2563].z + _734;
        float _2589 = inversesqrt(dot(vec3(_2583, _2584, _2585), vec3(_2583, _2584, _2585)));
        float _2590 = _2589 * _2583;
        float _2591 = _2589 * _2584;
        float _2592 = _2589 * _2585;
        float _2593 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2563].xyz));
        float _4502 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2597 = dot(vec3(_652, _653, _654), vec3(_2590, _2591, _2592));
        float _4513 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2600 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2601 = dot(vec3(cbLight._m0[_2563].xyz), vec3(_2590, _2591, _2592));
        float _4524 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2605 = _2582 * _2582;
        float _2609 = ((_2600 * _2600) * (_2605 + (-1.0))) + 1.0;
        float _2618 = (exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2619 = 1.0 - _2582;
        float _2629 = (0.5 / (((_2376 * ((_2596 * _2619) + _2582)) + 9.9999999392252902907785028219223e-09) + (((_2376 * _2619) + _2582) * _2596))) * _2596;
        float _4535 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2631 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2605 / ((_2609 * _2609) * 3.141590118408203125));
        float _2632 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2557 = (((_2618 * cbLight._m0[_2567].x) * _2631) * _2632) + _2499;
        _2559 = (((_2618 * cbLight._m0[_2567].y) * _2631) * _2632) + _2500;
        _2561 = (((_2618 * cbLight._m0[_2567].z) * _2631) * _2632) + _2501;
    }
    float _2663;
    float _2665;
    float _2667;
    if (_2285)
    {
        _2663 = _2557;
        _2665 = _2559;
        _2667 = _2561;
    }
    else
    {
        uint _2674 = _2100 + 3u;
        uint _2678 = _2100 + 11u;
        float _2692 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2674].w)) * _655) * 0.949999988079071044921875);
        float _2693 = _2692 * _2692;
        float _2694 = cbLight._m0[_2674].x + _732;
        float _2695 = cbLight._m0[_2674].y + _733;
        float _2696 = cbLight._m0[_2674].z + _734;
        float _2700 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
        float _2701 = _2700 * _2694;
        float _2702 = _2700 * _2695;
        float _2703 = _2700 * _2696;
        float _2704 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2674].xyz));
        float _4551 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2707 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2708 = dot(vec3(_652, _653, _654), vec3(_2701, _2702, _2703));
        float _4562 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2711 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2712 = dot(vec3(cbLight._m0[_2674].xyz), vec3(_2701, _2702, _2703));
        float _4573 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2716 = _2693 * _2693;
        float _2720 = ((_2711 * _2711) * (_2716 + (-1.0))) + 1.0;
        float _2729 = (exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2730 = 1.0 - _2693;
        float _2740 = (0.5 / (((_2376 * ((_2707 * _2730) + _2693)) + 9.9999999392252902907785028219223e-09) + (((_2376 * _2730) + _2693) * _2707))) * _2707;
        float _4584 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2742 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2716 / ((_2720 * _2720) * 3.141590118408203125));
        float _2743 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
        _2663 = (((_2729 * cbLight._m0[_2678].x) * _2742) * _2743) + _2557;
        _2665 = (((_2729 * cbLight._m0[_2678].y) * _2742) * _2743) + _2559;
        _2667 = (((_2729 * cbLight._m0[_2678].z) * _2742) * _2743) + _2561;
    }
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    if (_2098.y == 0u)
    {
        uvec4 _2764 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2765 = _2764.x;
        uint _2776 = uint((float(_2764.y) * floor(float(uint(cbSceneParam._m0[85u].y * _741) / _2765))) + floor(float(uint(cbSceneParam._m0[85u].x * _740) / _2765)));
        float _2786 = (log2(_1876 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2787 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        uint _2790 = uint(isnan(14.0) ? _2787 : (isnan(_2787) ? 14.0 : min(_2787, 14.0)));
        uvec4 _2795 = texelFetch(g_lightClusterGridBuffer, int(((_2790 << 2u) + (_2776 << 6u)) >> 2u));
        uint _2796 = _2795.x;
        uint _2797 = _2764.z;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        if (((((1u << ((_2797 >> 4u) & 15u)) + 4294967295u) & _2796) == 0u) || ((_2797 & 240u) == 0u))
        {
            _2876 = 0.0;
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
        }
        else
        {
            float _2877;
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            uint _3027 = 0u;
            uint _3036;
            bool _3037;
            for (;;)
            {
                _3036 = texelFetch(g_lightClassification, int((((_2790 << 5u) + (_2776 << 9u)) + (_3027 << 2u)) >> 2u)).x;
                _3037 = _3036 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3037)
                {
                    frontier_phi_66_pred = _3026;
                    frontier_phi_66_pred_1 = _3025;
                    frontier_phi_66_pred_2 = _3024;
                    frontier_phi_66_pred_3 = _3023;
                    frontier_phi_66_pred_4 = _3022;
                    frontier_phi_66_pred_5 = _3021;
                }
                else
                {
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    uint _3151;
                    _3145 = _3021;
                    _3146 = _3022;
                    _3147 = _3023;
                    _3148 = _3024;
                    _3149 = _3025;
                    _3150 = _3026;
                    _3151 = _3036;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    for (;;)
                    {
                        uint _3155 = uint(findLSB(_3151)) + (_3027 << 5u);
                        uint _3152 = (_3151 + 4294967295u) & _3151;
                        uint _3157 = _3155 * 48u;
                        vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3157)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 3u)).x));
                        uint _3177 = (_3155 * 48u) + 4u;
                        vec4 _3190 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3177)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 3u)).x));
                        uint _3196 = (_3155 * 48u) + 8u;
                        vec3 _3207 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3196)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3196 + 2u)).x));
                        float _3211 = _3171.x - _1874;
                        float _3212 = _3171.y - _1875;
                        float _3213 = _3171.z - _1876;
                        float _3214 = dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213));
                        float _3217 = inversesqrt(_3214);
                        float _3218 = _3217 * _3211;
                        float _3219 = _3217 * _3212;
                        float _3220 = _3217 * _3213;
                        float _3221 = dot(vec3(_759, _762, _765), vec3(_3218, _3219, _3220));
                        float _3226 = 1.0 - (_3214 * _3171.w);
                        float _4610 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3227 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                        float _3228 = sqrt(_3214) * _3190.w;
                        float _3231 = 1.39999997615814208984375 / (_3228 + 1.39999997615814208984375);
                        float _3232 = _3231 * _3231;
                        float _3235 = ((1.0 - _3232) * _3221) + _3232;
                        float _3238 = _3228 * _3228;
                        float _3242 = ((isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))) * _3227) / ((_3238 * 0.699999988079071044921875) + 1.0);
                        float _3246 = (-0.0) - _1874;
                        float _3247 = (-0.0) - _1875;
                        float _3248 = (-0.0) - _1876;
                        float _3252 = inversesqrt(dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248)));
                        float _3253 = _3252 * _3246;
                        float _3254 = _3252 * _3247;
                        float _3255 = _3252 * _3248;
                        float _3262 = exp2(log2(1.0 / ((_3238 * 3.5) + 5.0)) * 0.25);
                        float _3263 = 1.0 - _819;
                        float _3270 = sqrt(1.0 - ((1.0 - (_3263 * _3263)) * (1.0 - (_3262 * _3262))));
                        float _3271 = _3270 * _3270;
                        float _3272 = _3271 * _3271;
                        float _3273 = _3253 + _3218;
                        float _3274 = _3254 + _3219;
                        float _3275 = _3255 + _3220;
                        float _3279 = inversesqrt(dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275)));
                        float _3283 = dot(vec3(_759, _762, _765), vec3(_3253, _3254, _3255));
                        float _4626 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3286 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3287 = dot(vec3(_759, _762, _765), vec3(_3279 * _3273, _3279 * _3274, _3279 * _3275));
                        float _4637 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3290 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3294 = ((_3290 * _3290) * (_3272 + (-1.0))) + 1.0;
                        float _3295 = _3231 * _3271;
                        float _3296 = _3295 * _3295;
                        float _3299 = ((1.0 - _3296) * _3221) + _3296;
                        float _4648 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3300 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3301 = 1.0 - _3271;
                        float _3311 = (0.5 / (((_3300 * ((_3286 * _3301) + _3271)) + 9.9999999392252902907785028219223e-09) + (((_3300 * _3301) + _3271) * _3286))) * _3300;
                        float _4659 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3322 = (((_3272 * 3.1415927410125732421875) * (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) / ((_3294 * _3294) * ((_3238 * 2.1991131305694580078125) + 3.141590118408203125))) * _3227;
                        _3080 = (_3242 * _3190.x) + _3148;
                        _3081 = (_3242 * _3190.y) + _3149;
                        _3082 = (_3242 * _3190.z) + _3150;
                        _3077 = (_3322 * _3207.x) + _3145;
                        _3078 = (_3322 * _3207.y) + _3146;
                        _3079 = (_3322 * _3207.z) + _3147;
                        if (_3152 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3145 = _3077;
                            _3146 = _3078;
                            _3147 = _3079;
                            _3148 = _3080;
                            _3149 = _3081;
                            _3150 = _3082;
                            _3151 = _3152;
                        }
                    }
                    frontier_phi_66_pred = _3082;
                    frontier_phi_66_pred_1 = _3081;
                    frontier_phi_66_pred_2 = _3080;
                    frontier_phi_66_pred_3 = _3079;
                    frontier_phi_66_pred_4 = _3078;
                    frontier_phi_66_pred_5 = _3077;
                }
                _2887 = frontier_phi_66_pred;
                _2885 = frontier_phi_66_pred_1;
                _2883 = frontier_phi_66_pred_2;
                _2881 = frontier_phi_66_pred_3;
                _2879 = frontier_phi_66_pred_4;
                _2877 = frontier_phi_66_pred_5;
                uint _3028 = _3027 + 1u;
                if (_3028 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3021 = _2877;
                    _3022 = _2879;
                    _3023 = _2881;
                    _3024 = _2883;
                    _3025 = _2885;
                    _3026 = _2887;
                    _3027 = _3028;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2876 = _2877;
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
        }
        uvec4 _2890 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2891 = _2890.z;
        uint _2893 = (_2891 >> 8u) & 15u;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        if (((4294967295u << _2893) & _2796) == 0u)
        {
            _2989 = _2876;
            _2991 = _2878;
            _2993 = _2880;
            _2995 = _2882;
            _2997 = _2884;
            _2999 = _2886;
        }
        else
        {
            float _3014 = inversesqrt(dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876)));
            float _3015 = _3014 * _1874;
            float _3016 = _3014 * _1875;
            float _3017 = _3014 * _1876;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2893 < ((_2891 >> 12u) & 15u))
            {
                float _2990;
                float _2992;
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3128 = _2876;
                float _3129 = _2878;
                float _3130 = _2880;
                float _3131 = _2882;
                float _3132 = _2884;
                float _3133 = _2886;
                uint _3134 = _2893;
                uint _3143;
                bool _3144;
                for (;;)
                {
                    _3143 = texelFetch(g_lightClassification, int((((_2790 << 5u) + (_2776 << 9u)) + (_3134 << 2u)) >> 2u)).x;
                    _3144 = _3143 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3144)
                    {
                        frontier_phi_72_pred = _3133;
                        frontier_phi_72_pred_1 = _3132;
                        frontier_phi_72_pred_2 = _3131;
                        frontier_phi_72_pred_3 = _3130;
                        frontier_phi_72_pred_4 = _3129;
                        frontier_phi_72_pred_5 = _3128;
                    }
                    else
                    {
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3340 = _3128;
                        float _3341 = _3129;
                        float _3342 = _3130;
                        float _3343 = _3131;
                        float _3344 = _3132;
                        float _3345 = _3133;
                        uint _3346 = _3143;
                        uint _3347;
                        vec4 _3372;
                        float _3373;
                        vec4 _3388;
                        vec3 _3400;
                        vec4 _3415;
                        vec4 _3430;
                        float _3476;
                        bool _3477;
                        for (;;)
                        {
                            uint _3357 = ((_3134 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3346));
                            _3347 = (_3346 + 4294967295u) & _3346;
                            uint _3359 = _3357 * 40u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            _3373 = _3372.w;
                            uint _3375 = (_3357 * 40u) + 4u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3390 = (_3357 * 40u) + 8u;
                            _3400 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x));
                            uint _3402 = (_3357 * 40u) + 16u;
                            _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            uint _3417 = (_3357 * 40u) + 20u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3432 = (_3357 * 40u) + 24u;
                            vec4 _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            uint _3451 = (_3357 * 40u) + 28u;
                            vec4 _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            _3476 = fma(_1876, _3464.z, fma(_1875, _3464.y, _3464.x * _1874)) + _3464.w;
                            _3477 = !((fma(_1876, _3445.z, fma(_1875, _3445.y, _3445.x * _1874)) + _3445.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3477)
                            {
                                float _3504 = _3372.x - _1874;
                                float _3505 = _3372.y - _1875;
                                float _3506 = _3372.z - _1876;
                                float _3507 = dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506));
                                float _3510 = inversesqrt(_3507);
                                float _3511 = _3510 * _3504;
                                float _3512 = _3510 * _3505;
                                float _3513 = _3510 * _3506;
                                float _3517 = 1.0 - (_3507 / (_3373 * _3373));
                                float _4670 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3518 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3522 = sqrt(_3507) * _3388.w;
                                float _3524 = 1.39999997615814208984375 / (_3522 + 1.39999997615814208984375);
                                float _3525 = _3524 * _3524;
                                float _3528 = ((1.0 - _3525) * dot(vec3(_3511, _3512, _3513), vec3(_759, _762, _765))) + _3525;
                                float _3531 = _3522 * _3522;
                                float _3535 = (fma(_1876, _3415.z, fma(_1875, _3415.y, _3415.x * _1874)) + _3415.w) / _3476;
                                float _3536 = (fma(_1876, _3430.z, fma(_1875, _3430.y, _3430.x * _1874)) + _3430.w) / _3476;
                                float _3540 = 1.0 - dot(vec2(_3535, _3536), vec2(_3535, _3536));
                                float _4686 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3541 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3542 = _3541 * (((isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0))) * _3518) / ((_3531 * 0.699999988079071044921875) + 1.0));
                                float _3554 = exp2(log2(1.0 / ((_3531 * 3.5) + 5.0)) * 0.25);
                                float _3555 = 1.0 - _819;
                                float _3562 = sqrt(1.0 - ((1.0 - (_3555 * _3555)) * (1.0 - (_3554 * _3554))));
                                float _3563 = _3562 * _3562;
                                float _3564 = _3563 * _3563;
                                float _3565 = _3511 - _3015;
                                float _3566 = _3512 - _3016;
                                float _3567 = _3513 - _3017;
                                float _3571 = inversesqrt(dot(vec3(_3565, _3566, _3567), vec3(_3565, _3566, _3567)));
                                float _3575 = dot(vec3(_759, _762, _765), vec3((-0.0) - _3015, (-0.0) - _3016, (-0.0) - _3017));
                                float _4697 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3578 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3579 = dot(vec3(_759, _762, _765), vec3(_3571 * _3565, _3571 * _3566, _3571 * _3567));
                                float _4708 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3582 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3586 = ((_3582 * _3582) * (_3564 + (-1.0))) + 1.0;
                                float _3587 = _3524 * _3563;
                                float _3588 = _3587 * _3587;
                                float _3594 = ((1.0 - _3588) * dot(vec3(_759, _762, _765), vec3(_3511, _3512, _3513))) + _3588;
                                float _4719 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3595 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3596 = 1.0 - _3563;
                                float _3606 = (0.5 / (((_3595 * ((_3578 * _3596) + _3563)) + 9.9999999392252902907785028219223e-09) + (((_3595 * _3596) + _3563) * _3578))) * _3595;
                                float _4730 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3616 = (_3541 * _3518) * (((_3564 * 3.1415927410125732421875) * (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) / ((_3586 * _3586) * ((_3531 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3542 * _3388.y;
                                frontier_phi_78_pred_1 = _3542 * _3388.x;
                                frontier_phi_78_pred_2 = _3616 * _3400.z;
                                frontier_phi_78_pred_3 = _3616 * _3400.y;
                                frontier_phi_78_pred_4 = _3616 * _3400.x;
                                frontier_phi_78_pred_5 = _3542 * _3388.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3624 = frontier_phi_78_pred;
                            _3623 = frontier_phi_78_pred_1;
                            _3622 = frontier_phi_78_pred_2;
                            _3621 = frontier_phi_78_pred_3;
                            _3620 = frontier_phi_78_pred_4;
                            _3625 = frontier_phi_78_pred_5;
                            _3330 = _3623 + _3343;
                            _3331 = _3624 + _3344;
                            _3332 = _3625 + _3345;
                            _3327 = _3620 + _3340;
                            _3328 = _3621 + _3341;
                            _3329 = _3622 + _3342;
                            if (_3347 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3347;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3332;
                        frontier_phi_72_pred_1 = _3331;
                        frontier_phi_72_pred_2 = _3330;
                        frontier_phi_72_pred_3 = _3329;
                        frontier_phi_72_pred_4 = _3328;
                        frontier_phi_72_pred_5 = _3327;
                    }
                    _3000 = frontier_phi_72_pred;
                    _2998 = frontier_phi_72_pred_1;
                    _2996 = frontier_phi_72_pred_2;
                    _2994 = frontier_phi_72_pred_3;
                    _2992 = frontier_phi_72_pred_4;
                    _2990 = frontier_phi_72_pred_5;
                    uint _3135 = _3134 + 1u;
                    if (_3135 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3128 = _2990;
                        _3129 = _2992;
                        _3130 = _2994;
                        _3131 = _2996;
                        _3132 = _2998;
                        _3133 = _3000;
                        _3134 = _3135;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3000;
                frontier_phi_60_61_ladder_1 = _2998;
                frontier_phi_60_61_ladder_2 = _2994;
                frontier_phi_60_61_ladder_3 = _2992;
                frontier_phi_60_61_ladder_4 = _2990;
                frontier_phi_60_61_ladder_5 = _2996;
            }
            else
            {
                frontier_phi_60_61_ladder = _2886;
                frontier_phi_60_61_ladder_1 = _2884;
                frontier_phi_60_61_ladder_2 = _2880;
                frontier_phi_60_61_ladder_3 = _2878;
                frontier_phi_60_61_ladder_4 = _2876;
                frontier_phi_60_61_ladder_5 = _2882;
            }
            _2989 = frontier_phi_60_61_ladder_4;
            _2991 = frontier_phi_60_61_ladder_3;
            _2993 = frontier_phi_60_61_ladder_2;
            _2995 = frontier_phi_60_61_ladder_5;
            _2997 = frontier_phi_60_61_ladder_1;
            _2999 = frontier_phi_60_61_ladder;
        }
        float _3004 = isnan(1.0) ? _803 : (isnan(_803) ? 1.0 : min(_803, 1.0));
        _2809 = (_3004 * _2995) + _2340;
        _2811 = (_3004 * _2997) + _2342;
        _2813 = (_3004 * _2999) + _2344;
        _2815 = ((_2989 * 0.039999999105930328369140625) * _3004) + _2663;
        _2817 = ((_2991 * 0.039999999105930328369140625) * _3004) + _2665;
        _2819 = ((_2993 * 0.039999999105930328369140625) * _3004) + _2667;
    }
    else
    {
        _2809 = _2340;
        _2811 = _2342;
        _2813 = _2344;
        _2815 = _2663;
        _2817 = _2665;
        _2819 = _2667;
    }
    float _4746 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4757 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4768 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    uint _2839 = _264 + 6u;
    float _2847 = _740 / cbSceneParam._m0[86u].x;
    float _2848 = _741 / cbSceneParam._m0[86u].y;
    vec4 _2862 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2847, _2848, (log2((isnan(cbSceneParam._m0[77u].w) ? _673 : (isnan(_673) ? cbSceneParam._m0[77u].w : min(_673, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2864 = _2862.x;
    float _2865 = _2862.y;
    float _2866 = _2862.z;
    float _2867 = _2862.w;
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    if (_673 > cbSceneParam._m0[78u].w)
    {
        float _2901 = isnan(_673) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _673 : min(cbSceneParam._m0[80u].w, _673));
        float _2902 = _2901 / _673;
        float _2913 = _2902 * _725;
        float _2914 = _726 * _2902;
        float _2915 = (-0.0) - _2914;
        float _2917 = _2902 * _727;
        float _2919 = (cbSceneParam._m0[77u].w * _2915) / _2901;
        float _2920 = _2919 + cbSceneParam._m0[79u].w;
        float _2921 = cbSceneParam._m0[79u].w - _2914;
        float _2927 = sqrt(((_2913 * _2913) + (_2914 * _2914)) + (_2917 * _2917));
        float _2930 = (1.0 - (cbSceneParam._m0[77u].w / _2901)) * _2927;
        float _2935 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2937 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3090;
        if (abs((_2915 - _2919) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3090 = ((((_2920 > 0.0) ? exp2(_2935 * _2920) : (2.0 - exp2(_2937 * _2920))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2930;
        }
        else
        {
            float _3050 = 1.0 / cbSceneParam._m0[80u].x;
            float _3051 = isnan(_2921) ? _2920 : (isnan(_2920) ? _2921 : max(_2920, _2921));
            float _3052 = isnan(_2921) ? _2920 : (isnan(_2920) ? _2921 : min(_2920, _2921));
            float _3061 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : min(_3051, 0.0));
            float _3062 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : min(_3052, 0.0));
            _3090 = ((abs(_2927 / _2915) * cbSceneParam._m0[80u].y) * ((((_3061 - _3062) * 2.0) - ((exp2(_2935 * (isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0)))) - exp2(_2935 * (isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))))) * _3050)) - ((exp2(_2937 * _3061) - exp2(_2937 * _3062)) * _3050))) + (_2930 * cbSceneParam._m0[80u].z);
        }
        vec4 _3092 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2847, _2848, 1.0), 0.0);
        float _3101 = exp2((_3090 * (-1.44269502162933349609375)) * (1.0 - _3092.w));
        float _3102 = log2(_3101);
        float _3118 = log2(_2867);
        _2939 = (exp2(_3118 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3102 * cbSceneParam._m0[78u].x)) * _3092.x) / cbSceneParam._m0[78u].x)) + _2864;
        _2941 = (exp2(_3118 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3102 * cbSceneParam._m0[78u].y)) * _3092.y) / cbSceneParam._m0[78u].y)) + _2865;
        _2943 = (exp2(_3118 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3102 * cbSceneParam._m0[78u].z)) * _3092.z) / cbSceneParam._m0[78u].z)) + _2866;
        _2945 = _3101 * _2867;
    }
    else
    {
        _2939 = _2864;
        _2941 = _2865;
        _2943 = _2866;
        _2945 = _2867;
    }
    float _2957 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2958 = _2957 == 3.0;
    float _2959 = log2(_2945);
    float _2966 = exp2(_2959 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2809 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _803))) + ((_2815 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1608)) * cbPerFrame._m0[3u].x));
    float _2967 = exp2(_2959 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2811 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _803))) + ((_2817 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1608)) * cbPerFrame._m0[3u].x));
    float _2968 = exp2(_2959 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2813 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _803))) + ((_2819 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1608)) * cbPerFrame._m0[3u].x));
    float _2977 = (_2957 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2977 * (_2958 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2939)));
    SV_Target.y = _2977 * (_2958 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2941)));
    SV_Target.z = _2977 * (_2958 ? _2968 : (_2968 + (cbSceneParam._m0[72u].w * _2943)));
    SV_Target.w = cbInstanceData._m0[_2839].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2839].w;
}


