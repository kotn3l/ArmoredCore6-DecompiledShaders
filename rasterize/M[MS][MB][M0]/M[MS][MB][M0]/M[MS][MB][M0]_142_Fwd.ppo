#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1173;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _352 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _369 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _352) * cbMtdParam._m0[24u].x) + _352) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3477 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _377 = (_370 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _378 = (_370 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _379 = (_370 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _254) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _255) + cbTextureTilingScale._m0[14u].w));
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _254) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _255) + cbTextureTilingScale._m0[20u].w));
    vec4 _445 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _462 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _464 = _462.x;
    float _465 = _462.y;
    float _466 = _462.z;
    float _475 = ((_445.z - _466) * _370) + _466;
    float _478 = ((((_445.x - _464) * _370) + _464) * 2.0) + (-1.0);
    float _479 = ((((_445.y - _465) * _370) + _465) * 2.0) + (-1.0);
    float _480 = dot(vec2(_478, _479), vec2(_478, _479));
    float _3488 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _485 = sqrt(1.0 - (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))));
    vec4 _505 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _517 = (_478 + ((((_418.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_505.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _518 = (_479 + ((((_418.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_505.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _521 = fma(_485, _222, fma(_518, _229, _517 * _215));
    float _524 = fma(_485, _223, fma(_518, _230, _517 * _216));
    float _527 = fma(_485, _224, fma(_518, _231, _517 * _217));
    float _531 = inversesqrt(dot(vec3(_521, _524, _527), vec3(_521, _524, _527)));
    vec4 _560 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _562 = _560.x;
    float _563 = 1.0 - _562;
    float _569 = (cbMtdParam._m0[19u].x + dot(vec4(_531 * _521, _531 * _524, _531 * _527, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_562 - _563) * cbMtdParam._m0[24u].z) + _563) * cbMtdParam._m0[21u].z);
    float _3499 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _577 = (_570 * ((_398.x * cbMtdParam._m0[18u].x) - _377)) + _377;
    float _578 = (_570 * ((_398.y * cbMtdParam._m0[18u].y) - _378)) + _378;
    float _579 = (_570 * ((_398.z * cbMtdParam._m0[18u].z) - _379)) + _379;
    float _584 = (((_418.z - _475) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _475;
    float _588 = ((_505.z - _584) * cbMtdParam._m0[19u].w) + _584;
    vec4 _601 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _608 = (_601.x * 2.0) + (-1.0);
    float _609 = (_601.y * 2.0) + (-1.0);
    float _610 = dot(vec2(_608, _609), vec2(_608, _609));
    float _3510 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _618 = ((_601.z - _588) * _570) + _588;
    float _628 = ((sqrt(1.0 - (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) - _485) * _570) + _485;
    float _631 = (((_608 - _517) * _570) + _517) + (cbMtdParam._m0[21u].x * _517);
    float _632 = (((_609 - _518) * _570) + _518) + (cbMtdParam._m0[21u].x * _518);
    float _637 = cbMtdParam._m0[22u].x + _505.w;
    float _640 = fma(_628, _222, fma(_632, _229, _631 * _215));
    float _643 = fma(_628, _223, fma(_632, _230, _631 * _216));
    float _646 = fma(_628, _224, fma(_632, _231, _631 * _217));
    float _650 = inversesqrt(dot(vec3(_640, _643, _646), vec3(_640, _643, _646)));
    float _651 = _650 * _640;
    float _652 = _650 * _643;
    float _653 = _650 * _646;
    float _3521 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _654 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _3532 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3543 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _3554 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3565 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _672 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _724 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _714);
    float _725 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _714);
    float _726 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _714);
    float _730 = inversesqrt(dot(vec3(_724, _725, _726), vec3(_724, _725, _726)));
    float _731 = _724 * _730;
    float _732 = _725 * _730;
    float _733 = _726 * _730;
    float _739 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _740 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _758 = fma(_653, cbSceneParam._m0[5u].z, fma(_652, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _651));
    float _761 = fma(_653, cbSceneParam._m0[6u].z, fma(_652, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _651));
    float _764 = fma(_653, cbSceneParam._m0[7u].z, fma(_652, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _651));
    uint _778 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _784 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_778].x;
    float _785 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) * cbInstanceData._m0[_778].y;
    float _786 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) * cbInstanceData._m0[_778].z;
    float _3576 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _3587 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    vec4 _798 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _739, cbSceneParam._m0[86u].y * _740));
    float _802 = ((isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * TEXCOORD_5.w) * _798.x;
    float _803 = dot(vec3(_651, _652, _653), vec3(_731, _732, _733));
    float _806 = _803 * 2.0;
    float _810 = (_806 * _651) - _731;
    float _811 = (_806 * _652) - _732;
    float _812 = (_806 * _653) - _733;
    float _816 = abs(dot(vec3(_731, _732, _733), vec3(_651, _652, _653)));
    float _3609 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _818 = sqrt(_654);
    float _831 = exp2((_818 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_818 * 3.0));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1172;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _897 = fma(_871, cbModelParam._m0[26u].z, fma(_867, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _863));
        float _901 = fma(_871, cbModelParam._m0[27u].z, fma(_867, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _863));
        float _905 = fma(_871, cbModelParam._m0[28u].z, fma(_867, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _863));
        float _930 = _863 + _651;
        float _931 = _867 + _652;
        float _932 = _871 + _653;
        float _942 = fma(_932, cbModelParam._m0[26u].z, fma(_931, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _930)) - _897;
        float _943 = fma(_932, cbModelParam._m0[27u].z, fma(_931, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _930)) - _901;
        float _944 = fma(_932, cbModelParam._m0[28u].z, fma(_931, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _930)) - _905;
        float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
        float _961 = ((_948 * _942) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_897 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_948 * _943) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_901 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_948 * _944) / cbModelParam._m0[34u].z) + ((((((_905 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        float _1000 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_966.x + (-0.5));
        float _1002 = _1000 * (_966.y + (-0.5));
        float _1003 = _1000 * (_966.z + (-0.5));
        float _1010 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_973.x + (-0.5));
        float _1012 = _1010 * (_973.y + (-0.5));
        float _1013 = _1010 * (_973.z + (-0.5));
        float _1020 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_980.x + (-0.5));
        float _1022 = _1020 * (_980.y + (-0.5));
        float _1023 = _1020 * (_980.z + (-0.5));
        float _1030 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_987.x + (-0.5));
        float _1032 = _1030 * (_987.y + (-0.5));
        float _1033 = _1030 * (_987.z + (-0.5));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = _1001 * 0.5;
        float _1038 = _1011 * 0.5;
        float _1039 = _1021 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1054 = (dot(vec3(_651, _652, _653), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1064 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3657 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_1066 + 1.0))) + _1071) * _1034;
        float _1081 = _1002 * 0.5;
        float _1082 = _1012 * 0.5;
        float _1083 = _1022 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_651, _652, _653), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3690 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1108 + 1.0))) + _1113) * _1035;
        float _1123 = _1003 * 0.5;
        float _1124 = _1013 * 0.5;
        float _1125 = _1023 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_651, _652, _653), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3723 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1150 + 1.0))) + _1155) * _1036;
        _1172 = _1003;
        _1174 = _1002;
        _1175 = _1001;
        _1176 = _1013;
        _1177 = _1012;
        _1178 = _1011;
        _1179 = _1023;
        _1180 = _1022;
        _1181 = _1021;
        _1182 = _1036;
        _1183 = _1035;
        _1184 = _1034;
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
    }
    else
    {
        _1172 = _1173;
        _1174 = _1173;
        _1175 = _1173;
        _1176 = _1173;
        _1177 = _1173;
        _1178 = _1173;
        _1179 = _1173;
        _1180 = _1173;
        _1181 = _1173;
        _1182 = _1173;
        _1183 = _1173;
        _1184 = _1173;
        _1185 = 0.0;
        _1186 = 0.0;
        _1187 = 0.0;
    }
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1212 = fma(_871, cbModelParam._m0[30u].z, fma(_867, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _863));
        float _1216 = fma(_871, cbModelParam._m0[31u].z, fma(_867, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _863));
        float _1220 = fma(_871, cbModelParam._m0[32u].z, fma(_867, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _863));
        float _1243 = _863 + _651;
        float _1244 = _867 + _652;
        float _1245 = _871 + _653;
        float _1255 = fma(_1245, cbModelParam._m0[30u].z, fma(_1244, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1243)) - _1212;
        float _1256 = fma(_1245, cbModelParam._m0[31u].z, fma(_1244, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1243)) - _1216;
        float _1257 = fma(_1245, cbModelParam._m0[32u].z, fma(_1244, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1243)) - _1220;
        float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
        float _1274 = ((_1261 * _1255) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1212 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1261 * _1256) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1216 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1261 * _1257) / cbModelParam._m0[35u].z) + ((((((_1220 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        float _1311 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1278.x + (-0.5));
        float _1313 = _1311 * (_1278.y + (-0.5));
        float _1314 = _1311 * (_1278.z + (-0.5));
        float _1321 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1285.x + (-0.5));
        float _1323 = _1321 * (_1285.y + (-0.5));
        float _1324 = _1321 * (_1285.z + (-0.5));
        float _1331 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1292.x + (-0.5));
        float _1333 = _1331 * (_1292.y + (-0.5));
        float _1334 = _1331 * (_1292.z + (-0.5));
        float _1341 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1299.x + (-0.5));
        float _1343 = _1341 * (_1299.y + (-0.5));
        float _1344 = _1341 * (_1299.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_651, _652, _653), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _3786 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1375 + 1.0))) + _1380) * _1345;
        float _1390 = _1313 * 0.5;
        float _1391 = _1323 * 0.5;
        float _1392 = _1333 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_651, _652, _653), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3819 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1417 + 1.0))) + _1422) * _1346;
        float _1432 = _1314 * 0.5;
        float _1433 = _1324 * 0.5;
        float _1434 = _1334 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_651, _652, _653), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _3852 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1459 + 1.0))) + _1464) * _1347;
        _1481 = _1314;
        _1482 = _1313;
        _1483 = _1312;
        _1484 = _1324;
        _1485 = _1323;
        _1486 = _1322;
        _1487 = _1334;
        _1488 = _1333;
        _1489 = _1332;
        _1490 = _1347;
        _1491 = _1346;
        _1492 = _1345;
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
    }
    else
    {
        _1481 = _1173;
        _1482 = _1173;
        _1483 = _1173;
        _1484 = _1173;
        _1485 = _1173;
        _1486 = _1173;
        _1487 = _1173;
        _1488 = _1173;
        _1489 = _1173;
        _1490 = _1173;
        _1491 = _1173;
        _1492 = _1173;
        _1493 = 0.0;
        _1494 = 0.0;
        _1495 = 0.0;
    }
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1185)) + _1185;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1186)) + _1186;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1187)) + _1187;
    float _1528 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1505 * cbSceneParam._m0[89u].x));
    float _1531 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1505 * cbSceneParam._m0[90u].x));
    float _1534 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1505));
    float _1549 = _810 * 0.5;
    float _1550 = _811 * 0.5;
    float _1551 = _812 * 0.5;
    float _1552 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1555 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1558 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1592;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1565 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1172, _1176, _1179, _1182));
        float _1569 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1174, _1177, _1180, _1183));
        float _1573 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1175, _1178, _1181, _1184));
        float _1580 = dot(vec4(cbModelParam._m0[39u]), vec4(_1549, _1550, _1551, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1603;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1594 = dot(vec4(cbModelParam._m0[40u]), vec4(_1549, _1550, _1551, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1607 = (_1603 * cbModelParam._m0[1u].x) + (_1592 * (1.0 - cbModelParam._m0[1u].x));
    float _1617 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _654);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1617 : min(cbModelParam._m0[25u].z, _1617));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1665 = fma(_871, cbModelParam._m0[13u].z, fma(_867, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _863)) + cbModelParam._m0[13u].w;
        float _1669 = fma(_871, cbModelParam._m0[14u].z, fma(_867, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _863)) + cbModelParam._m0[14u].w;
        float _1673 = fma(_871, cbModelParam._m0[15u].z, fma(_867, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _863)) + cbModelParam._m0[15u].w;
        float _1676 = fma(_812, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _810));
        float _1679 = fma(_812, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _810));
        float _1682 = fma(_812, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _810));
        float _1710;
        if (_1676 > 0.0)
        {
            _1710 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1710 = frontier_phi_14_12_ladder;
        }
        float _1910;
        if (_1679 > 0.0)
        {
            _1910 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1910 = frontier_phi_23_19_ladder;
        }
        float _2153;
        if (_1682 > 0.0)
        {
            _2153 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2153 = frontier_phi_35_30_ladder;
        }
        float _2155 = isnan(_1910) ? _1710 : (isnan(_1710) ? _1910 : min(_1710, _1910));
        float _2156 = isnan(_2153) ? _2155 : (isnan(_2155) ? _2153 : min(_2155, _2153));
        float _2160 = (_2156 * _1676) + _1665;
        float _2161 = (_2156 * _1679) + _1669;
        float _2162 = (_2156 * _1682) + _1673;
        float _2163 = _2156 * 9.9999997473787516355514526367188e-05;
        float _2165 = (-1.0) - _2163;
        float _2167 = _2163 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2162 > _2167) || ((_2162 < _2165) || ((_2161 > _2167) || ((_2161 < _2165) || ((_2160 < _2165) || (_2160 > _2167))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2286 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2162, cbModelParam._m0[9u].z, fma(_2161, cbModelParam._m0[9u].y, _2160 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2162, cbModelParam._m0[10u].z, fma(_2161, cbModelParam._m0[10u].y, _2160 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2162, cbModelParam._m0[11u].z, fma(_2161, cbModelParam._m0[11u].y, _2160 * cbModelParam._m0[11u].x))), _1618);
            frontier_phi_13_35_ladder = _2286.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2286.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2286.x * cbModelParam._m0[1u].y;
        }
        _1698 = frontier_phi_13_35_ladder_2;
        _1700 = frontier_phi_13_35_ladder_1;
        _1702 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1686 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_810, _811, _812), _1618);
        _1698 = _1686.x * cbModelParam._m0[1u].y;
        _1700 = _1686.y * cbModelParam._m0[1u].y;
        _1702 = _1686.z * cbModelParam._m0[1u].y;
    }
    float _1706 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _654);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1706 : min(cbModelParam._m0[25u].w, _1706));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1760 = fma(_871, cbModelParam._m0[21u].z, fma(_867, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _863)) + cbModelParam._m0[21u].w;
        float _1764 = fma(_871, cbModelParam._m0[22u].z, fma(_867, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _863)) + cbModelParam._m0[22u].w;
        float _1768 = fma(_871, cbModelParam._m0[23u].z, fma(_867, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _863)) + cbModelParam._m0[23u].w;
        float _1771 = fma(_812, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _810));
        float _1774 = fma(_812, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _810));
        float _1777 = fma(_812, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _810));
        float _1915;
        if (_1771 > 0.0)
        {
            _1915 = abs((1.0 - _1760) / _1771);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1760 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1915 = frontier_phi_25_21_ladder;
        }
        float _2180;
        if (_1774 > 0.0)
        {
            _2180 = abs((1.0 - _1764) / _1774);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1764 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2180 = frontier_phi_37_32_ladder;
        }
        float _2385;
        if (_1777 > 0.0)
        {
            _2385 = abs((1.0 - _1768) / _1777);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1768 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2385 = frontier_phi_46_43_ladder;
        }
        float _2387 = isnan(_2180) ? _1915 : (isnan(_1915) ? _2180 : min(_1915, _2180));
        float _2388 = isnan(_2385) ? _2387 : (isnan(_2387) ? _2385 : min(_2387, _2385));
        float _2392 = (_2388 * _1771) + _1760;
        float _2393 = (_2388 * _1774) + _1764;
        float _2394 = (_2388 * _1777) + _1768;
        float _2395 = _2388 * 9.9999997473787516355514526367188e-05;
        float _2396 = (-1.0) - _2395;
        float _2398 = _2395 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2394 > _2398) || ((_2394 < _2396) || ((_2393 > _2398) || ((_2393 < _2396) || ((_2392 < _2396) || (_2392 > _2398))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2593 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2394, cbModelParam._m0[17u].z, fma(_2393, cbModelParam._m0[17u].y, _2392 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2394, cbModelParam._m0[18u].z, fma(_2393, cbModelParam._m0[18u].y, _2392 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2394, cbModelParam._m0[19u].z, fma(_2393, cbModelParam._m0[19u].y, _2392 * cbModelParam._m0[19u].x))), _1707);
            frontier_phi_22_46_ladder = _2593.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2593.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2593.x * cbModelParam._m0[1u].z;
        }
        _1796 = frontier_phi_22_46_ladder_2;
        _1798 = frontier_phi_22_46_ladder_1;
        _1800 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_810, _811, _812), _1707);
        _1796 = _1780.x * cbModelParam._m0[1u].z;
        _1798 = _1780.y * cbModelParam._m0[1u].z;
        _1800 = _1780.z * cbModelParam._m0[1u].z;
    }
    float _1812 = ((((1.0 - _831) * ((_818 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_831 * _818)) * _802;
    float _1813 = _1812 * ((cbModelParam._m0[1u].w * (_1796 - _1698)) + _1698);
    float _1814 = _1812 * ((cbModelParam._m0[1u].w * (_1798 - _1700)) + _1700);
    float _1815 = _1812 * ((cbModelParam._m0[1u].w * (_1800 - _1702)) + _1702);
    float _1818 = fma(_1815, cbSceneParam._m0[89u].z, fma(_1814, cbSceneParam._m0[89u].y, _1813 * cbSceneParam._m0[89u].x));
    float _1821 = fma(_1815, cbSceneParam._m0[90u].z, fma(_1814, cbSceneParam._m0[90u].y, _1813 * cbSceneParam._m0[90u].x));
    float _1824 = fma(_1815, cbSceneParam._m0[91u].z, fma(_1814, cbSceneParam._m0[91u].y, _1813 * cbSceneParam._m0[91u].x));
    uvec4 _1834 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1836 = _1834.x * 14u;
    uint _1837 = _1836 + 13u;
    float _1844 = _802 + (-1.0);
    float _1849 = (cbLight._m0[_1837].x * _1844) + 1.0;
    float _1850 = (cbLight._m0[_1837].y * _1844) + 1.0;
    float _1851 = (cbLight._m0[_1837].z * _1844) + 1.0;
    float _1852 = (cbLight._m0[_1837].w * _1844) + 1.0;
    uint _1853 = _1836 + 5u;
    float _1859 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
    uint _1863 = _1836 + 4u;
    float _1869 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
    uint _1873 = _1836 | 1u;
    float _1884 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_651, _652, _653));
    float _1887 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_651, _652, _653));
    float _3988 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _3999 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1892 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 0.3183098733425140380859375;
    float _1894 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * 0.3183098733425140380859375;
    float _1901 = ((cbLight._m0[_1853].x * _1859) * _1894) + ((cbLight._m0[_1863].x * _1869) * _1892);
    float _1902 = ((_1859 * cbLight._m0[_1853].y) * _1894) + ((_1869 * cbLight._m0[_1863].y) * _1892);
    float _1903 = ((_1859 * cbLight._m0[_1853].z) * _1894) + ((_1869 * cbLight._m0[_1863].z) * _1892);
    uvec4 _1907 = floatBitsToUint(cbLight._m0[_1836 + 12u]);
    bool _1909 = _1907.x == 0u;
    float _1920;
    float _1922;
    float _1924;
    if (_1909)
    {
        _1920 = _1901;
        _1922 = _1902;
        _1924 = _1903;
    }
    else
    {
        uint _1928 = _1836 + 6u;
        float _1944 = (dot(vec3(cbLight._m0[_1836 + 2u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _1945 = _1944 * _1944;
        float _4010 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1946 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1947 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _1920 = (((cbLight._m0[_1928].x * 0.3183098733425140380859375) * _1946) * _1947) + _1901;
        _1922 = (((cbLight._m0[_1928].y * 0.3183098733425140380859375) * _1946) * _1947) + _1902;
        _1924 = (((cbLight._m0[_1928].z * 0.3183098733425140380859375) * _1946) * _1947) + _1903;
    }
    bool _1927 = _1907.y == 0u;
    float _1965;
    float _1967;
    float _1969;
    if (_1927)
    {
        _1965 = _1920;
        _1967 = _1922;
        _1969 = _1924;
    }
    else
    {
        uint _2124 = _1836 + 7u;
        float _2140 = (dot(vec3(cbLight._m0[_1836 + 3u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _2141 = _2140 * _2140;
        float _4026 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2142 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2143 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _1965 = (((cbLight._m0[_2124].x * 0.3183098733425140380859375) * _2142) * _2143) + _1920;
        _1967 = (((cbLight._m0[_2124].y * 0.3183098733425140380859375) * _2142) * _2143) + _1922;
        _1969 = (((cbLight._m0[_2124].z * 0.3183098733425140380859375) * _2142) * _2143) + _1924;
    }
    uint _1972 = _1836 + 8u;
    float _1985 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1836].w)) * _654) * 0.949999988079071044921875);
    float _1986 = _1985 * _1985;
    float _1987 = cbLight._m0[_1836].x + _731;
    float _1988 = cbLight._m0[_1836].y + _732;
    float _1989 = cbLight._m0[_1836].z + _733;
    float _1993 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
    float _1994 = _1993 * _1987;
    float _1995 = _1993 * _1988;
    float _1996 = _1993 * _1989;
    float _1997 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_1836].xyz));
    float _4042 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _2001 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _2002 = dot(vec3(_651, _652, _653), vec3(_1994, _1995, _1996));
    float _4064 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _2006 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_1994, _1995, _1996));
    float _4075 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2010 = _1986 * _1986;
    float _2014 = ((_2005 * _2005) * (_2010 + (-1.0))) + 1.0;
    float _2025 = (exp2(log2(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2026 = 1.0 - _1986;
    float _2037 = (0.5 / (((_2001 * ((_2000 * _2026) + _1986)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2026) + _1986) * _2000))) * _2000;
    float _4086 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2039 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_2010 / ((_2014 * _2014) * 3.141590118408203125));
    uint _2050 = _1836 + 9u;
    float _2061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1873].w)) * _654) * 0.949999988079071044921875);
    float _2062 = _2061 * _2061;
    float _2063 = cbLight._m0[_1873].x + _731;
    float _2064 = cbLight._m0[_1873].y + _732;
    float _2065 = cbLight._m0[_1873].z + _733;
    float _2069 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
    float _2070 = _2069 * _2063;
    float _2071 = _2069 * _2064;
    float _2072 = _2069 * _2065;
    float _2073 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_1873].xyz));
    float _4097 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _2077 = dot(vec3(_651, _652, _653), vec3(_2070, _2071, _2072));
    float _4108 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _2081 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_2070, _2071, _2072));
    float _4119 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2085 = _2062 * _2062;
    float _2089 = ((_2080 * _2080) * (_2085 + (-1.0))) + 1.0;
    float _2098 = (exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2099 = 1.0 - _2062;
    float _2109 = (0.5 / (((_2001 * ((_2076 * _2099) + _2062)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2099) + _2062) * _2076))) * _2076;
    float _4130 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2111 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2085 / ((_2089 * _2089) * 3.141590118408203125));
    float _2121 = (((_2098 * cbLight._m0[_2050].x) * _2111) * _1859) + (((_2025 * cbLight._m0[_1972].x) * _2039) * _1869);
    float _2122 = (((_2098 * cbLight._m0[_2050].y) * _2111) * _1859) + (((_2025 * cbLight._m0[_1972].y) * _2039) * _1869);
    float _2123 = (((_2098 * cbLight._m0[_2050].z) * _2111) * _1859) + (((_2025 * cbLight._m0[_1972].z) * _2039) * _1869);
    float _2185;
    float _2187;
    float _2189;
    if (_1909)
    {
        _2185 = _2121;
        _2187 = _2122;
        _2189 = _2123;
    }
    else
    {
        uint _2191 = _1836 + 2u;
        uint _2195 = _1836 + 10u;
        float _2209 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _654) * 0.949999988079071044921875);
        float _2210 = _2209 * _2209;
        float _2211 = cbLight._m0[_2191].x + _731;
        float _2212 = cbLight._m0[_2191].y + _732;
        float _2213 = cbLight._m0[_2191].z + _733;
        float _2217 = inversesqrt(dot(vec3(_2211, _2212, _2213), vec3(_2211, _2212, _2213)));
        float _2218 = _2217 * _2211;
        float _2219 = _2217 * _2212;
        float _2220 = _2217 * _2213;
        float _2221 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2191].xyz));
        float _4141 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2225 = dot(vec3(_651, _652, _653), vec3(_2218, _2219, _2220));
        float _4152 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2228 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _2229 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2218, _2219, _2220));
        float _4163 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2233 = _2210 * _2210;
        float _2237 = ((_2228 * _2228) * (_2233 + (-1.0))) + 1.0;
        float _2246 = (exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2247 = 1.0 - _2210;
        float _2257 = (0.5 / (((_2001 * ((_2224 * _2247) + _2210)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2247) + _2210) * _2224))) * _2224;
        float _4174 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2259 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2233 / ((_2237 * _2237) * 3.141590118408203125));
        float _2260 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _2185 = (((_2246 * cbLight._m0[_2195].x) * _2259) * _2260) + _2121;
        _2187 = (((_2246 * cbLight._m0[_2195].y) * _2259) * _2260) + _2122;
        _2189 = (((_2246 * cbLight._m0[_2195].z) * _2259) * _2260) + _2123;
    }
    float _2295;
    float _2297;
    float _2299;
    if (_1927)
    {
        _2295 = _2185;
        _2297 = _2187;
        _2299 = _2189;
    }
    else
    {
        uint _2306 = _1836 + 3u;
        uint _2310 = _1836 + 11u;
        float _2324 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2306].w)) * _654) * 0.949999988079071044921875);
        float _2325 = _2324 * _2324;
        float _2326 = cbLight._m0[_2306].x + _731;
        float _2327 = cbLight._m0[_2306].y + _732;
        float _2328 = cbLight._m0[_2306].z + _733;
        float _2332 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
        float _2333 = _2332 * _2326;
        float _2334 = _2332 * _2327;
        float _2335 = _2332 * _2328;
        float _2336 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2306].xyz));
        float _4190 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2339 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2340 = dot(vec3(_651, _652, _653), vec3(_2333, _2334, _2335));
        float _4201 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2343 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2344 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_2333, _2334, _2335));
        float _4212 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2348 = _2325 * _2325;
        float _2352 = ((_2343 * _2343) * (_2348 + (-1.0))) + 1.0;
        float _2361 = (exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2362 = 1.0 - _2325;
        float _2372 = (0.5 / (((_2001 * ((_2339 * _2362) + _2325)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2362) + _2325) * _2339))) * _2339;
        float _4223 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2374 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2348 / ((_2352 * _2352) * 3.141590118408203125));
        float _2375 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _2295 = (((_2361 * cbLight._m0[_2310].x) * _2374) * _2375) + _2185;
        _2297 = (((_2361 * cbLight._m0[_2310].y) * _2374) * _2375) + _2187;
        _2299 = (((_2361 * cbLight._m0[_2310].z) * _2374) * _2375) + _2189;
    }
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    if (_1834.y == 0u)
    {
        float _2450 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2451 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2450;
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2450;
        float _2453 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2450;
        uvec4 _2465 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2466 = _2465.x;
        uint _2477 = uint((float(_2465.y) * floor(float(uint(cbSceneParam._m0[85u].y * _740) / _2466))) + floor(float(uint(cbSceneParam._m0[85u].x * _739) / _2466)));
        float _2487 = (log2(_2453 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2488 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        uint _2491 = uint(isnan(14.0) ? _2488 : (isnan(_2488) ? 14.0 : min(_2488, 14.0)));
        uvec4 _2496 = texelFetch(g_lightClusterGridBuffer, int(((_2491 << 2u) + (_2477 << 6u)) >> 2u));
        uint _2497 = _2496.x;
        uint _2498 = _2465.z;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        if (((((1u << ((_2498 >> 4u) & 15u)) + 4294967295u) & _2497) == 0u) || ((_2498 & 240u) == 0u))
        {
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
        }
        else
        {
            float _2599;
            float _2601;
            float _2603;
            float _2605;
            float _2607;
            float _2609;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            uint _2749 = 0u;
            uint _2758;
            bool _2759;
            for (;;)
            {
                _2758 = texelFetch(g_lightClassification, int((((_2491 << 5u) + (_2477 << 9u)) + (_2749 << 2u)) >> 2u)).x;
                _2759 = _2758 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2759)
                {
                    frontier_phi_61_pred = _2743;
                    frontier_phi_61_pred_1 = _2748;
                    frontier_phi_61_pred_2 = _2747;
                    frontier_phi_61_pred_3 = _2746;
                    frontier_phi_61_pred_4 = _2745;
                    frontier_phi_61_pred_5 = _2744;
                }
                else
                {
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    uint _2873;
                    _2867 = _2743;
                    _2868 = _2744;
                    _2869 = _2745;
                    _2870 = _2746;
                    _2871 = _2747;
                    _2872 = _2748;
                    _2873 = _2758;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    for (;;)
                    {
                        uint _2877 = uint(findLSB(_2873)) + (_2749 << 5u);
                        uint _2874 = (_2873 + 4294967295u) & _2873;
                        uint _2879 = _2877 * 48u;
                        vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2879)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 3u)).x));
                        uint _2899 = (_2877 * 48u) + 4u;
                        vec4 _2912 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2899)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 3u)).x));
                        uint _2918 = (_2877 * 48u) + 8u;
                        vec3 _2929 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2918)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 2u)).x));
                        float _2933 = _2893.x - _2451;
                        float _2934 = _2893.y - _2452;
                        float _2935 = _2893.z - _2453;
                        float _2936 = dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935));
                        float _2939 = inversesqrt(_2936);
                        float _2940 = _2939 * _2933;
                        float _2941 = _2939 * _2934;
                        float _2942 = _2939 * _2935;
                        float _2943 = dot(vec3(_758, _761, _764), vec3(_2940, _2941, _2942));
                        float _2948 = 1.0 - (_2936 * _2893.w);
                        float _4249 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2949 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                        float _2950 = sqrt(_2936) * _2912.w;
                        float _2953 = 1.39999997615814208984375 / (_2950 + 1.39999997615814208984375);
                        float _2954 = _2953 * _2953;
                        float _2957 = ((1.0 - _2954) * _2943) + _2954;
                        float _2960 = _2950 * _2950;
                        float _2964 = ((isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))) * _2949) / ((_2960 * 0.699999988079071044921875) + 1.0);
                        float _2968 = (-0.0) - _2451;
                        float _2969 = (-0.0) - _2452;
                        float _2970 = (-0.0) - _2453;
                        float _2974 = inversesqrt(dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970)));
                        float _2975 = _2974 * _2968;
                        float _2976 = _2974 * _2969;
                        float _2977 = _2974 * _2970;
                        float _2985 = exp2(log2(1.0 / ((_2960 * 3.5) + 5.0)) * 0.25);
                        float _2986 = 1.0 - _818;
                        float _2993 = sqrt(1.0 - ((1.0 - (_2986 * _2986)) * (1.0 - (_2985 * _2985))));
                        float _2994 = _2993 * _2993;
                        float _2995 = _2994 * _2994;
                        float _2996 = _2975 + _2940;
                        float _2997 = _2976 + _2941;
                        float _2998 = _2977 + _2942;
                        float _3002 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
                        float _3006 = dot(vec3(_758, _761, _764), vec3(_2975, _2976, _2977));
                        float _4265 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3009 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _3010 = dot(vec3(_758, _761, _764), vec3(_3002 * _2996, _3002 * _2997, _3002 * _2998));
                        float _4276 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3013 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                        float _3017 = ((_3013 * _3013) * (_2995 + (-1.0))) + 1.0;
                        float _3018 = _2953 * _2994;
                        float _3019 = _3018 * _3018;
                        float _3022 = ((1.0 - _3019) * _2943) + _3019;
                        float _4287 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3023 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                        float _3024 = 1.0 - _2994;
                        float _3034 = (0.5 / (((_3023 * ((_3009 * _3024) + _2994)) + 9.9999999392252902907785028219223e-09) + (((_3023 * _3024) + _2994) * _3009))) * _3023;
                        float _4298 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3045 = (((_2995 * 3.1415927410125732421875) * (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) / ((_3017 * _3017) * ((_2960 * 2.1991131305694580078125) + 3.141590118408203125))) * _2949;
                        _2802 = (_2964 * _2912.x) + _2870;
                        _2803 = (_2964 * _2912.y) + _2871;
                        _2804 = (_2964 * _2912.z) + _2872;
                        _2799 = (_3045 * _2929.x) + _2867;
                        _2800 = (_3045 * _2929.y) + _2868;
                        _2801 = (_3045 * _2929.z) + _2869;
                        if (_2874 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2867 = _2799;
                            _2868 = _2800;
                            _2869 = _2801;
                            _2870 = _2802;
                            _2871 = _2803;
                            _2872 = _2804;
                            _2873 = _2874;
                        }
                    }
                    frontier_phi_61_pred = _2799;
                    frontier_phi_61_pred_1 = _2804;
                    frontier_phi_61_pred_2 = _2803;
                    frontier_phi_61_pred_3 = _2802;
                    frontier_phi_61_pred_4 = _2801;
                    frontier_phi_61_pred_5 = _2800;
                }
                _2599 = frontier_phi_61_pred;
                _2609 = frontier_phi_61_pred_1;
                _2607 = frontier_phi_61_pred_2;
                _2605 = frontier_phi_61_pred_3;
                _2603 = frontier_phi_61_pred_4;
                _2601 = frontier_phi_61_pred_5;
                uint _2750 = _2749 + 1u;
                if (_2750 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2743 = _2599;
                    _2744 = _2601;
                    _2745 = _2603;
                    _2746 = _2605;
                    _2747 = _2607;
                    _2748 = _2609;
                    _2749 = _2750;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
        }
        uvec4 _2612 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2613 = _2612.z;
        uint _2615 = (_2613 >> 8u) & 15u;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        if (((4294967295u << _2615) & _2497) == 0u)
        {
            _2711 = _2598;
            _2713 = _2600;
            _2715 = _2602;
            _2717 = _2604;
            _2719 = _2606;
            _2721 = _2608;
        }
        else
        {
            float _2736 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
            float _2737 = _2736 * _2451;
            float _2738 = _2736 * _2452;
            float _2739 = _2736 * _2453;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2615 < ((_2613 >> 12u) & 15u))
            {
                float _2712;
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2850 = _2598;
                float _2851 = _2600;
                float _2852 = _2602;
                float _2853 = _2604;
                float _2854 = _2606;
                float _2855 = _2608;
                uint _2856 = _2615;
                uint _2865;
                bool _2866;
                for (;;)
                {
                    _2865 = texelFetch(g_lightClassification, int((((_2491 << 5u) + (_2477 << 9u)) + (_2856 << 2u)) >> 2u)).x;
                    _2866 = _2865 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2866)
                    {
                        frontier_phi_67_pred = _2853;
                        frontier_phi_67_pred_1 = _2854;
                        frontier_phi_67_pred_2 = _2855;
                        frontier_phi_67_pred_3 = _2852;
                        frontier_phi_67_pred_4 = _2851;
                        frontier_phi_67_pred_5 = _2850;
                    }
                    else
                    {
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3063 = _2850;
                        float _3064 = _2851;
                        float _3065 = _2852;
                        float _3066 = _2853;
                        float _3067 = _2854;
                        float _3068 = _2855;
                        uint _3069 = _2865;
                        uint _3070;
                        vec4 _3095;
                        float _3096;
                        vec4 _3111;
                        vec3 _3123;
                        vec4 _3138;
                        vec4 _3153;
                        float _3199;
                        bool _3200;
                        for (;;)
                        {
                            uint _3080 = ((_2856 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3069));
                            _3070 = (_3069 + 4294967295u) & _3069;
                            uint _3082 = _3080 * 40u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            _3096 = _3095.w;
                            uint _3098 = (_3080 * 40u) + 4u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            uint _3113 = (_3080 * 40u) + 8u;
                            _3123 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x));
                            uint _3125 = (_3080 * 40u) + 16u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3140 = (_3080 * 40u) + 20u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3155 = (_3080 * 40u) + 24u;
                            vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3174 = (_3080 * 40u) + 28u;
                            vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            _3199 = fma(_2453, _3187.z, fma(_2452, _3187.y, _3187.x * _2451)) + _3187.w;
                            _3200 = !((fma(_2453, _3168.z, fma(_2452, _3168.y, _3168.x * _2451)) + _3168.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3200)
                            {
                                float _3227 = _3095.x - _2451;
                                float _3228 = _3095.y - _2452;
                                float _3229 = _3095.z - _2453;
                                float _3230 = dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229));
                                float _3233 = inversesqrt(_3230);
                                float _3234 = _3233 * _3227;
                                float _3235 = _3233 * _3228;
                                float _3236 = _3233 * _3229;
                                float _3240 = 1.0 - (_3230 / (_3096 * _3096));
                                float _4309 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                                float _3245 = sqrt(_3230) * _3111.w;
                                float _3247 = 1.39999997615814208984375 / (_3245 + 1.39999997615814208984375);
                                float _3248 = _3247 * _3247;
                                float _3251 = ((1.0 - _3248) * dot(vec3(_3234, _3235, _3236), vec3(_758, _761, _764))) + _3248;
                                float _3254 = _3245 * _3245;
                                float _3258 = (fma(_2453, _3138.z, fma(_2452, _3138.y, _3138.x * _2451)) + _3138.w) / _3199;
                                float _3259 = (fma(_2453, _3153.z, fma(_2452, _3153.y, _3153.x * _2451)) + _3153.w) / _3199;
                                float _3263 = 1.0 - dot(vec2(_3258, _3259), vec2(_3258, _3259));
                                float _4325 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3265 = _3264 * (((isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0))) * _3241) / ((_3254 * 0.699999988079071044921875) + 1.0));
                                float _3277 = exp2(log2(1.0 / ((_3254 * 3.5) + 5.0)) * 0.25);
                                float _3278 = 1.0 - _818;
                                float _3285 = sqrt(1.0 - ((1.0 - (_3278 * _3278)) * (1.0 - (_3277 * _3277))));
                                float _3286 = _3285 * _3285;
                                float _3287 = _3286 * _3286;
                                float _3288 = _3234 - _2737;
                                float _3289 = _3235 - _2738;
                                float _3290 = _3236 - _2739;
                                float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                                float _3298 = dot(vec3(_758, _761, _764), vec3((-0.0) - _2737, (-0.0) - _2738, (-0.0) - _2739));
                                float _4336 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3301 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3302 = dot(vec3(_758, _761, _764), vec3(_3294 * _3288, _3294 * _3289, _3294 * _3290));
                                float _4347 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3305 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3309 = ((_3305 * _3305) * (_3287 + (-1.0))) + 1.0;
                                float _3310 = _3247 * _3286;
                                float _3311 = _3310 * _3310;
                                float _3317 = ((1.0 - _3311) * dot(vec3(_758, _761, _764), vec3(_3234, _3235, _3236))) + _3311;
                                float _4358 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3319 = 1.0 - _3286;
                                float _3329 = (0.5 / (((_3318 * ((_3301 * _3319) + _3286)) + 9.9999999392252902907785028219223e-09) + (((_3318 * _3319) + _3286) * _3301))) * _3318;
                                float _4369 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3339 = (_3264 * _3241) * (((_3287 * 3.1415927410125732421875) * (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) / ((_3309 * _3309) * ((_3254 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3339 * _3123.x;
                                frontier_phi_73_pred_1 = _3339 * _3123.y;
                                frontier_phi_73_pred_2 = _3265 * _3111.z;
                                frontier_phi_73_pred_3 = _3265 * _3111.y;
                                frontier_phi_73_pred_4 = _3265 * _3111.x;
                                frontier_phi_73_pred_5 = _3339 * _3123.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3343 = frontier_phi_73_pred;
                            _3344 = frontier_phi_73_pred_1;
                            _3348 = frontier_phi_73_pred_2;
                            _3347 = frontier_phi_73_pred_3;
                            _3346 = frontier_phi_73_pred_4;
                            _3345 = frontier_phi_73_pred_5;
                            _3053 = _3346 + _3066;
                            _3054 = _3347 + _3067;
                            _3055 = _3348 + _3068;
                            _3050 = _3343 + _3063;
                            _3051 = _3344 + _3064;
                            _3052 = _3345 + _3065;
                            if (_3070 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3070;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3053;
                        frontier_phi_67_pred_1 = _3054;
                        frontier_phi_67_pred_2 = _3055;
                        frontier_phi_67_pred_3 = _3052;
                        frontier_phi_67_pred_4 = _3051;
                        frontier_phi_67_pred_5 = _3050;
                    }
                    _2718 = frontier_phi_67_pred;
                    _2720 = frontier_phi_67_pred_1;
                    _2722 = frontier_phi_67_pred_2;
                    _2716 = frontier_phi_67_pred_3;
                    _2714 = frontier_phi_67_pred_4;
                    _2712 = frontier_phi_67_pred_5;
                    uint _2857 = _2856 + 1u;
                    if (_2857 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2850 = _2712;
                        _2851 = _2714;
                        _2852 = _2716;
                        _2853 = _2718;
                        _2854 = _2720;
                        _2855 = _2722;
                        _2856 = _2857;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2720;
                frontier_phi_55_56_ladder_1 = _2722;
                frontier_phi_55_56_ladder_2 = _2718;
                frontier_phi_55_56_ladder_3 = _2716;
                frontier_phi_55_56_ladder_4 = _2714;
                frontier_phi_55_56_ladder_5 = _2712;
            }
            else
            {
                frontier_phi_55_56_ladder = _2606;
                frontier_phi_55_56_ladder_1 = _2608;
                frontier_phi_55_56_ladder_2 = _2604;
                frontier_phi_55_56_ladder_3 = _2602;
                frontier_phi_55_56_ladder_4 = _2600;
                frontier_phi_55_56_ladder_5 = _2598;
            }
            _2711 = frontier_phi_55_56_ladder_5;
            _2713 = frontier_phi_55_56_ladder_4;
            _2715 = frontier_phi_55_56_ladder_3;
            _2717 = frontier_phi_55_56_ladder_2;
            _2719 = frontier_phi_55_56_ladder;
            _2721 = frontier_phi_55_56_ladder_1;
        }
        float _2726 = isnan(1.0) ? _802 : (isnan(_802) ? 1.0 : min(_802, 1.0));
        _2510 = (_2726 * _2717) + _1965;
        _2512 = (_2726 * _2719) + _1967;
        _2514 = (_2726 * _2721) + _1969;
        _2516 = ((_2711 * 0.039999999105930328369140625) * _2726) + _2295;
        _2518 = ((_2713 * 0.039999999105930328369140625) * _2726) + _2297;
        _2520 = ((_2715 * 0.039999999105930328369140625) * _2726) + _2299;
    }
    else
    {
        _2510 = _1965;
        _2512 = _1967;
        _2514 = _1969;
        _2516 = _2295;
        _2518 = _2297;
        _2520 = _2299;
    }
    float _4385 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4396 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4407 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    uint _2540 = _234 + 6u;
    float _2548 = _739 / cbSceneParam._m0[86u].x;
    float _2549 = _740 / cbSceneParam._m0[86u].y;
    vec4 _2563 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2548, _2549, (log2((isnan(cbSceneParam._m0[77u].w) ? _672 : (isnan(_672) ? cbSceneParam._m0[77u].w : min(_672, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2565 = _2563.x;
    float _2566 = _2563.y;
    float _2567 = _2563.z;
    float _2568 = _2563.w;
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    if (_672 > cbSceneParam._m0[78u].w)
    {
        float _2623 = isnan(_672) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _672 : min(cbSceneParam._m0[80u].w, _672));
        float _2624 = _2623 / _672;
        float _2635 = _2624 * _724;
        float _2636 = _725 * _2624;
        float _2637 = (-0.0) - _2636;
        float _2639 = _2624 * _726;
        float _2641 = (cbSceneParam._m0[77u].w * _2637) / _2623;
        float _2642 = _2641 + cbSceneParam._m0[79u].w;
        float _2643 = cbSceneParam._m0[79u].w - _2636;
        float _2649 = sqrt(((_2635 * _2635) + (_2636 * _2636)) + (_2639 * _2639));
        float _2652 = (1.0 - (cbSceneParam._m0[77u].w / _2623)) * _2649;
        float _2657 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2659 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2812;
        if (abs((_2637 - _2641) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2812 = ((((_2642 > 0.0) ? exp2(_2657 * _2642) : (2.0 - exp2(_2659 * _2642))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2652;
        }
        else
        {
            float _2772 = 1.0 / cbSceneParam._m0[80u].x;
            float _2773 = isnan(_2643) ? _2642 : (isnan(_2642) ? _2643 : max(_2642, _2643));
            float _2774 = isnan(_2643) ? _2642 : (isnan(_2642) ? _2643 : min(_2642, _2643));
            float _2783 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : min(_2773, 0.0));
            float _2784 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : min(_2774, 0.0));
            _2812 = ((abs(_2649 / _2637) * cbSceneParam._m0[80u].y) * ((((_2783 - _2784) * 2.0) - ((exp2(_2657 * (isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0)))) - exp2(_2657 * (isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0))))) * _2772)) - ((exp2(_2659 * _2783) - exp2(_2659 * _2784)) * _2772))) + (_2652 * cbSceneParam._m0[80u].z);
        }
        vec4 _2814 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2548, _2549, 1.0), 0.0);
        float _2823 = exp2((_2812 * (-1.44269502162933349609375)) * (1.0 - _2814.w));
        float _2824 = log2(_2823);
        float _2840 = log2(_2568);
        _2661 = (exp2(_2840 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2824 * cbSceneParam._m0[78u].x)) * _2814.x) / cbSceneParam._m0[78u].x)) + _2565;
        _2663 = (exp2(_2840 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2824 * cbSceneParam._m0[78u].y)) * _2814.y) / cbSceneParam._m0[78u].y)) + _2566;
        _2665 = (exp2(_2840 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2824 * cbSceneParam._m0[78u].z)) * _2814.z) / cbSceneParam._m0[78u].z)) + _2567;
        _2667 = _2823 * _2568;
    }
    else
    {
        _2661 = _2565;
        _2663 = _2566;
        _2665 = _2567;
        _2667 = _2568;
    }
    float _2679 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2680 = _2679 == 3.0;
    float _2681 = log2(_2667);
    float _2688 = exp2(_2681 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2510 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _802))) + ((_2516 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2689 = exp2(_2681 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2512 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _802))) + ((_2518 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2690 = exp2(_2681 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2514 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _802))) + ((_2520 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2699 = (_2679 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2699 * (_2680 ? _2688 : (_2688 + (cbSceneParam._m0[72u].w * _2661)));
    SV_Target.y = _2699 * (_2680 ? _2689 : (_2689 + (cbSceneParam._m0[72u].w * _2663)));
    SV_Target.z = _2699 * (_2680 ? _2690 : (_2690 + (cbSceneParam._m0[72u].w * _2665)));
    SV_Target.w = cbInstanceData._m0[_2540].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2540].w;
}


