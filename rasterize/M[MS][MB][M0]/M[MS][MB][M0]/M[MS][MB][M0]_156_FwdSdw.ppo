#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1196;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _221 = _220 * _212;
    float _222 = _220 * _213;
    float _223 = _220 * _214;
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = _234 * TANGENT.x;
    float _236 = _234 * TANGENT.y;
    float _237 = _234 * TANGENT.z;
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _358 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _358) * cbMtdParam._m0[24u].x) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3783 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _383 = (_376 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _384 = (_376 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _385 = (_376 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _404 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _451 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _468 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _470 = _468.x;
    float _471 = _468.y;
    float _472 = _468.z;
    float _481 = ((_451.z - _472) * _376) + _472;
    float _484 = ((((_451.x - _470) * _376) + _470) * 2.0) + (-1.0);
    float _485 = ((((_451.y - _471) * _376) + _471) * 2.0) + (-1.0);
    float _486 = dot(vec2(_484, _485), vec2(_484, _485));
    float _3794 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _491 = sqrt(1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))));
    vec4 _511 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _523 = (_484 + ((((_424.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_511.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _524 = (_485 + ((((_424.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_511.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _527 = fma(_491, _228, fma(_524, _235, _523 * _221));
    float _530 = fma(_491, _229, fma(_524, _236, _523 * _222));
    float _533 = fma(_491, _230, fma(_524, _237, _523 * _223));
    float _537 = inversesqrt(dot(vec3(_527, _530, _533), vec3(_527, _530, _533)));
    vec4 _566 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _568 = _566.x;
    float _569 = 1.0 - _568;
    float _573 = ((_568 - _569) * cbMtdParam._m0[24u].z) + _569;
    float _575 = (cbMtdParam._m0[19u].x + dot(vec4(_537 * _527, _537 * _530, _537 * _533, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_573 * cbMtdParam._m0[21u].z);
    float _3805 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _576 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _591 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_573 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3816 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _596 = ((_576 * ((_404.x * cbMtdParam._m0[18u].x) - _383)) * _592) + _383;
    float _597 = ((_576 * ((_404.y * cbMtdParam._m0[18u].y) - _384)) * _592) + _384;
    float _598 = ((_576 * ((_404.z * cbMtdParam._m0[18u].z) - _385)) * _592) + _385;
    float _603 = (((_424.z - _481) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _481;
    float _607 = ((_511.z - _603) * cbMtdParam._m0[19u].w) + _603;
    vec4 _620 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _627 = (_620.x * 2.0) + (-1.0);
    float _628 = (_620.y * 2.0) + (-1.0);
    float _629 = dot(vec2(_627, _628), vec2(_627, _628));
    float _3827 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _638 = (((_620.z - _607) * _576) * _592) + _607;
    float _653 = (((cbMtdParam._m0[21u].x * _523) + ((_627 - _523) * _576)) * _592) + _523;
    float _654 = (((cbMtdParam._m0[21u].x * _524) + ((_628 - _524) * _576)) * _592) + _524;
    float _655 = (((sqrt(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) - _491) * _576) * _592) + _491;
    float _660 = cbMtdParam._m0[22u].x + _511.w;
    float _663 = fma(_655, _228, fma(_654, _235, _653 * _221));
    float _666 = fma(_655, _229, fma(_654, _236, _653 * _222));
    float _669 = fma(_655, _230, fma(_654, _237, _653 * _223));
    float _673 = inversesqrt(dot(vec3(_663, _666, _669), vec3(_663, _666, _669)));
    float _674 = _673 * _663;
    float _675 = _673 * _666;
    float _676 = _673 * _669;
    float _3838 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _677 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _3860 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _3871 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _3882 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _695 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _747 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _737);
    float _748 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _737);
    float _749 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _737);
    float _753 = inversesqrt(dot(vec3(_747, _748, _749), vec3(_747, _748, _749)));
    float _754 = _747 * _753;
    float _755 = _748 * _753;
    float _756 = _749 * _753;
    float _762 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _763 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _781 = fma(_676, cbSceneParam._m0[5u].z, fma(_675, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _674));
    float _784 = fma(_676, cbSceneParam._m0[6u].z, fma(_675, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _674));
    float _787 = fma(_676, cbSceneParam._m0[7u].z, fma(_675, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _674));
    uint _801 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _807 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_801].x;
    float _808 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_801].y;
    float _809 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_801].z;
    float _3893 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _811 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _812 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    vec4 _821 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _762, cbSceneParam._m0[86u].y * _763));
    float _825 = ((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * TEXCOORD_5.w) * _821.x;
    float _826 = dot(vec3(_674, _675, _676), vec3(_754, _755, _756));
    float _829 = _826 * 2.0;
    float _833 = (_829 * _674) - _754;
    float _834 = (_829 * _675) - _755;
    float _835 = (_829 * _676) - _756;
    float _839 = abs(dot(vec3(_754, _755, _756), vec3(_674, _675, _676)));
    float _3926 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _841 = sqrt(_677);
    float _854 = exp2((_841 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_841 * 3.0));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1195;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _920 = fma(_894, cbModelParam._m0[26u].z, fma(_890, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _886));
        float _924 = fma(_894, cbModelParam._m0[27u].z, fma(_890, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _886));
        float _928 = fma(_894, cbModelParam._m0[28u].z, fma(_890, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _886));
        float _953 = _886 + _674;
        float _954 = _890 + _675;
        float _955 = _894 + _676;
        float _965 = fma(_955, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953)) - _920;
        float _966 = fma(_955, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953)) - _924;
        float _967 = fma(_955, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953)) - _928;
        float _971 = inversesqrt(dot(vec3(_965, _966, _967), vec3(_965, _966, _967)));
        float _984 = ((_971 * _965) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_920 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_971 * _966) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_924 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _986 = ((_971 * _967) / cbModelParam._m0[34u].z) + ((((((_928 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        float _1023 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_989.x + (-0.5));
        float _1025 = _1023 * (_989.y + (-0.5));
        float _1026 = _1023 * (_989.z + (-0.5));
        float _1033 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_996.x + (-0.5));
        float _1035 = _1033 * (_996.y + (-0.5));
        float _1036 = _1033 * (_996.z + (-0.5));
        float _1043 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1003.x + (-0.5));
        float _1045 = _1043 * (_1003.y + (-0.5));
        float _1046 = _1043 * (_1003.z + (-0.5));
        float _1053 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1010.x + (-0.5));
        float _1055 = _1053 * (_1010.y + (-0.5));
        float _1056 = _1053 * (_1010.z + (-0.5));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = _1024 * 0.5;
        float _1061 = _1034 * 0.5;
        float _1062 = _1044 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1077 = (dot(vec3(_674, _675, _676), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1087 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3974 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1089 + 1.0))) + _1094) * _1057;
        float _1104 = _1025 * 0.5;
        float _1105 = _1035 * 0.5;
        float _1106 = _1045 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_674, _675, _676), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _4007 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1131 + 1.0))) + _1136) * _1058;
        float _1146 = _1026 * 0.5;
        float _1147 = _1036 * 0.5;
        float _1148 = _1046 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_674, _675, _676), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _4040 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1173 + 1.0))) + _1178) * _1059;
        _1195 = _1026;
        _1197 = _1025;
        _1198 = _1024;
        _1199 = _1036;
        _1200 = _1035;
        _1201 = _1034;
        _1202 = _1046;
        _1203 = _1045;
        _1204 = _1044;
        _1205 = _1059;
        _1206 = _1058;
        _1207 = _1057;
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
    }
    else
    {
        _1195 = _1196;
        _1197 = _1196;
        _1198 = _1196;
        _1199 = _1196;
        _1200 = _1196;
        _1201 = _1196;
        _1202 = _1196;
        _1203 = _1196;
        _1204 = _1196;
        _1205 = _1196;
        _1206 = _1196;
        _1207 = _1196;
        _1208 = 0.0;
        _1209 = 0.0;
        _1210 = 0.0;
    }
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1235 = fma(_894, cbModelParam._m0[30u].z, fma(_890, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _886));
        float _1239 = fma(_894, cbModelParam._m0[31u].z, fma(_890, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _886));
        float _1243 = fma(_894, cbModelParam._m0[32u].z, fma(_890, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _886));
        float _1266 = _886 + _674;
        float _1267 = _890 + _675;
        float _1268 = _894 + _676;
        float _1278 = fma(_1268, cbModelParam._m0[30u].z, fma(_1267, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1266)) - _1235;
        float _1279 = fma(_1268, cbModelParam._m0[31u].z, fma(_1267, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1266)) - _1239;
        float _1280 = fma(_1268, cbModelParam._m0[32u].z, fma(_1267, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1266)) - _1243;
        float _1284 = inversesqrt(dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280)));
        float _1297 = ((_1284 * _1278) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1235 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1284 * _1279) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1239 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1284 * _1280) / cbModelParam._m0[35u].z) + ((((((_1243 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        float _1334 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1301.x + (-0.5));
        float _1336 = _1334 * (_1301.y + (-0.5));
        float _1337 = _1334 * (_1301.z + (-0.5));
        float _1344 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1308.x + (-0.5));
        float _1346 = _1344 * (_1308.y + (-0.5));
        float _1347 = _1344 * (_1308.z + (-0.5));
        float _1354 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1315.x + (-0.5));
        float _1356 = _1354 * (_1315.y + (-0.5));
        float _1357 = _1354 * (_1315.z + (-0.5));
        float _1364 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1322.x + (-0.5));
        float _1366 = _1364 * (_1322.y + (-0.5));
        float _1367 = _1364 * (_1322.z + (-0.5));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = _1335 * 0.5;
        float _1372 = _1345 * 0.5;
        float _1373 = _1355 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_674, _675, _676), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4103 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1398 + 1.0))) + _1403) * _1368;
        float _1413 = _1336 * 0.5;
        float _1414 = _1346 * 0.5;
        float _1415 = _1356 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_674, _675, _676), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1369 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4136 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1440 + 1.0))) + _1445) * _1369;
        float _1455 = _1337 * 0.5;
        float _1456 = _1347 * 0.5;
        float _1457 = _1357 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_674, _675, _676), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4169 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1482 + 1.0))) + _1487) * _1370;
        _1504 = _1337;
        _1505 = _1336;
        _1506 = _1335;
        _1507 = _1347;
        _1508 = _1346;
        _1509 = _1345;
        _1510 = _1357;
        _1511 = _1356;
        _1512 = _1355;
        _1513 = _1370;
        _1514 = _1369;
        _1515 = _1368;
        _1516 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1517 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
    }
    else
    {
        _1504 = _1196;
        _1505 = _1196;
        _1506 = _1196;
        _1507 = _1196;
        _1508 = _1196;
        _1509 = _1196;
        _1510 = _1196;
        _1511 = _1196;
        _1512 = _1196;
        _1513 = _1196;
        _1514 = _1196;
        _1515 = _1196;
        _1516 = 0.0;
        _1517 = 0.0;
        _1518 = 0.0;
    }
    float _1528 = (cbModelParam._m0[1u].x * (_1516 - _1208)) + _1208;
    float _1529 = (cbModelParam._m0[1u].x * (_1517 - _1209)) + _1209;
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1210)) + _1210;
    float _1551 = fma(_1530, cbSceneParam._m0[89u].z, fma(_1529, cbSceneParam._m0[89u].y, _1528 * cbSceneParam._m0[89u].x));
    float _1554 = fma(_1530, cbSceneParam._m0[90u].z, fma(_1529, cbSceneParam._m0[90u].y, _1528 * cbSceneParam._m0[90u].x));
    float _1557 = fma(_1530, cbSceneParam._m0[91u].z, fma(_1529, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1528));
    float _1572 = _833 * 0.5;
    float _1573 = _834 * 0.5;
    float _1574 = _835 * 0.5;
    float _1575 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1578 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1505, _1508, _1511, _1514));
    float _1581 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1504, _1507, _1510, _1513));
    float _1615;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1588 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1195, _1199, _1202, _1205));
        float _1592 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1197, _1200, _1203, _1206));
        float _1596 = dot(vec4(_1572, _1573, _1574, 1.0), vec4(_1198, _1201, _1204, _1207));
        float _1603 = dot(vec4(cbModelParam._m0[39u]), vec4(_1572, _1573, _1574, 1.0));
        _1615 = dot(vec3(isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)), isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1603) ? 0.0 : (isnan(0.0) ? _1603 : max(0.0, _1603))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1615 = 1.0;
    }
    float _1626;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1617 = dot(vec4(cbModelParam._m0[40u]), vec4(_1572, _1573, _1574, 1.0));
        _1626 = dot(vec3(isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1617) ? 0.0 : (isnan(0.0) ? _1617 : max(0.0, _1617))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1626 = 1.0;
    }
    float _1630 = (_1626 * cbModelParam._m0[1u].x) + (_1615 * (1.0 - cbModelParam._m0[1u].x));
    float _1640 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _677);
    float _1641 = isnan(_1640) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1640 : min(cbModelParam._m0[25u].z, _1640));
    float _1721;
    float _1723;
    float _1725;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1688 = fma(_894, cbModelParam._m0[13u].z, fma(_890, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _886)) + cbModelParam._m0[13u].w;
        float _1692 = fma(_894, cbModelParam._m0[14u].z, fma(_890, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _886)) + cbModelParam._m0[14u].w;
        float _1696 = fma(_894, cbModelParam._m0[15u].z, fma(_890, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _886)) + cbModelParam._m0[15u].w;
        float _1699 = fma(_835, cbModelParam._m0[13u].z, fma(_834, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _833));
        float _1702 = fma(_835, cbModelParam._m0[14u].z, fma(_834, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _833));
        float _1705 = fma(_835, cbModelParam._m0[15u].z, fma(_834, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _833));
        float _1733;
        if (_1699 > 0.0)
        {
            _1733 = abs((1.0 - _1688) / _1699);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1688 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1733 = frontier_phi_14_12_ladder;
        }
        float _1902;
        if (_1702 > 0.0)
        {
            _1902 = abs((1.0 - _1692) / _1702);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1692 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1902 = frontier_phi_23_19_ladder;
        }
        float _2197;
        if (_1705 > 0.0)
        {
            _2197 = abs((1.0 - _1696) / _1705);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1696 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2197 = frontier_phi_35_30_ladder;
        }
        float _2199 = isnan(_1902) ? _1733 : (isnan(_1733) ? _1902 : min(_1733, _1902));
        float _2200 = isnan(_2197) ? _2199 : (isnan(_2199) ? _2197 : min(_2199, _2197));
        float _2204 = (_2200 * _1699) + _1688;
        float _2205 = (_2200 * _1702) + _1692;
        float _2206 = (_2200 * _1705) + _1696;
        float _2207 = _2200 * 9.9999997473787516355514526367188e-05;
        float _2209 = (-1.0) - _2207;
        float _2211 = _2207 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2206 > _2211) || ((_2206 < _2209) || ((_2205 > _2211) || ((_2205 < _2209) || ((_2204 < _2209) || (_2204 > _2211))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2351 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2206, cbModelParam._m0[9u].z, fma(_2205, cbModelParam._m0[9u].y, _2204 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2206, cbModelParam._m0[10u].z, fma(_2205, cbModelParam._m0[10u].y, _2204 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2206, cbModelParam._m0[11u].z, fma(_2205, cbModelParam._m0[11u].y, _2204 * cbModelParam._m0[11u].x))), _1641);
            frontier_phi_13_35_ladder = _2351.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2351.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2351.x * cbModelParam._m0[1u].y;
        }
        _1721 = frontier_phi_13_35_ladder_2;
        _1723 = frontier_phi_13_35_ladder_1;
        _1725 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1709 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_833, _834, _835), _1641);
        _1721 = _1709.x * cbModelParam._m0[1u].y;
        _1723 = _1709.y * cbModelParam._m0[1u].y;
        _1725 = _1709.z * cbModelParam._m0[1u].y;
    }
    float _1729 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _677);
    float _1730 = isnan(_1729) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1729 : min(cbModelParam._m0[25u].w, _1729));
    float _1819;
    float _1821;
    float _1823;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1783 = fma(_894, cbModelParam._m0[21u].z, fma(_890, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _886)) + cbModelParam._m0[21u].w;
        float _1787 = fma(_894, cbModelParam._m0[22u].z, fma(_890, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _886)) + cbModelParam._m0[22u].w;
        float _1791 = fma(_894, cbModelParam._m0[23u].z, fma(_890, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _886)) + cbModelParam._m0[23u].w;
        float _1794 = fma(_835, cbModelParam._m0[21u].z, fma(_834, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _833));
        float _1797 = fma(_835, cbModelParam._m0[22u].z, fma(_834, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _833));
        float _1800 = fma(_835, cbModelParam._m0[23u].z, fma(_834, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _833));
        float _1907;
        if (_1794 > 0.0)
        {
            _1907 = abs((1.0 - _1783) / _1794);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1783 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1907 = frontier_phi_25_21_ladder;
        }
        float _2224;
        if (_1797 > 0.0)
        {
            _2224 = abs((1.0 - _1787) / _1797);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1787 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2224 = frontier_phi_37_32_ladder;
        }
        float _2551;
        if (_1800 > 0.0)
        {
            _2551 = abs((1.0 - _1791) / _1800);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1791 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2551 = frontier_phi_47_44_ladder;
        }
        float _2553 = isnan(_2224) ? _1907 : (isnan(_1907) ? _2224 : min(_1907, _2224));
        float _2554 = isnan(_2551) ? _2553 : (isnan(_2553) ? _2551 : min(_2553, _2551));
        float _2558 = (_2554 * _1794) + _1783;
        float _2559 = (_2554 * _1797) + _1787;
        float _2560 = (_2554 * _1800) + _1791;
        float _2561 = _2554 * 9.9999997473787516355514526367188e-05;
        float _2562 = (-1.0) - _2561;
        float _2564 = _2561 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2560 > _2564) || ((_2560 < _2562) || ((_2559 > _2564) || ((_2559 < _2562) || ((_2558 < _2562) || (_2558 > _2564))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2678 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2560, cbModelParam._m0[17u].z, fma(_2559, cbModelParam._m0[17u].y, _2558 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2560, cbModelParam._m0[18u].z, fma(_2559, cbModelParam._m0[18u].y, _2558 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2560, cbModelParam._m0[19u].z, fma(_2559, cbModelParam._m0[19u].y, _2558 * cbModelParam._m0[19u].x))), _1730);
            frontier_phi_22_47_ladder = _2678.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2678.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2678.x * cbModelParam._m0[1u].z;
        }
        _1819 = frontier_phi_22_47_ladder_2;
        _1821 = frontier_phi_22_47_ladder_1;
        _1823 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1803 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_833, _834, _835), _1730);
        _1819 = _1803.x * cbModelParam._m0[1u].z;
        _1821 = _1803.y * cbModelParam._m0[1u].z;
        _1823 = _1803.z * cbModelParam._m0[1u].z;
    }
    float _1835 = ((((1.0 - _854) * ((_841 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_854 * _841)) * _825;
    float _1836 = _1835 * ((cbModelParam._m0[1u].w * (_1819 - _1721)) + _1721);
    float _1837 = _1835 * ((cbModelParam._m0[1u].w * (_1821 - _1723)) + _1723);
    float _1838 = _1835 * ((cbModelParam._m0[1u].w * (_1823 - _1725)) + _1725);
    float _1841 = fma(_1838, cbSceneParam._m0[89u].z, fma(_1837, cbSceneParam._m0[89u].y, _1836 * cbSceneParam._m0[89u].x));
    float _1844 = fma(_1838, cbSceneParam._m0[90u].z, fma(_1837, cbSceneParam._m0[90u].y, _1836 * cbSceneParam._m0[90u].x));
    float _1847 = fma(_1838, cbSceneParam._m0[91u].z, fma(_1837, cbSceneParam._m0[91u].y, _1836 * cbSceneParam._m0[91u].x));
    float _1881 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1885 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1889 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1893 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1894 = _1881 / _1893;
    float _1895 = _1885 / _1893;
    float _1896 = _1889 / _1893;
    float _2043;
    float _2044;
    float _2045;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1923 = ((uint(_1896 > cbSceneParam._m0[59u].y) + uint(_1896 > cbSceneParam._m0[59u].x)) + uint(_1896 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1924 = _1923 + 43u;
        uint _1932 = _1923 + 44u;
        uint _1940 = _1923 + 45u;
        uint _1948 = _1923 + 46u;
        float _1959 = fma(_1893, cbSceneParam._m0[_1924].w, fma(_1889, cbSceneParam._m0[_1924].z, fma(_1885, cbSceneParam._m0[_1924].y, _1881 * cbSceneParam._m0[_1924].x)));
        float _1963 = fma(_1893, cbSceneParam._m0[_1932].w, fma(_1889, cbSceneParam._m0[_1932].z, fma(_1885, cbSceneParam._m0[_1932].y, _1881 * cbSceneParam._m0[_1932].x)));
        float _1971 = fma(_1893, cbSceneParam._m0[_1948].w, fma(_1889, cbSceneParam._m0[_1948].z, fma(_1885, cbSceneParam._m0[_1948].y, _1881 * cbSceneParam._m0[_1948].x)));
        float _1976 = cbSceneParam._m0[33u].z * _1971;
        float _1978 = cbSceneParam._m0[33u].w * _1971;
        float _1981 = fma(_1893, cbSceneParam._m0[_1940].w, fma(_1889, cbSceneParam._m0[_1940].z, fma(_1885, cbSceneParam._m0[_1940].y, _1881 * cbSceneParam._m0[_1940].x))) / _1971;
        float _2029 = (cbSceneParam._m0[33u].x - sqrt(((_1895 * _1895) + (_1894 * _1894)) + (_1896 * _1896))) * cbSceneParam._m0[33u].y;
        float _4295 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2036 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1976 + _1959) / _1971, (_1978 + _1963) / _1971), _1981), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1978 + _1959) / _1971, (_1963 - _1976) / _1971), _1981), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1959 - _1976) / _1971, (_1963 - _1978) / _1971), _1981), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1959 - _1978) / _1971, (_1976 + _1963) / _1971), _1981), 0.0)).x), vec4(0.25)));
        _2043 = 1.0 - (_2036 * cbSceneParam._m0[34u].x);
        _2044 = 1.0 - (_2036 * cbSceneParam._m0[34u].y);
        _2045 = 1.0 - (_2036 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2043 = 1.0;
        _2044 = 1.0;
        _2045 = 1.0;
    }
    float _2109;
    float _2111;
    float _2113;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2097 = fma(_1893, cbSceneParam._m0[63u].w, fma(_1889, cbSceneParam._m0[63u].z, fma(_1885, cbSceneParam._m0[63u].y, _1881 * cbSceneParam._m0[63u].x)));
        float _2098 = fma(_1893, cbSceneParam._m0[60u].w, fma(_1889, cbSceneParam._m0[60u].z, fma(_1885, cbSceneParam._m0[60u].y, _1881 * cbSceneParam._m0[60u].x))) / _2097;
        float _2099 = fma(_1893, cbSceneParam._m0[61u].w, fma(_1889, cbSceneParam._m0[61u].z, fma(_1885, cbSceneParam._m0[61u].y, _1881 * cbSceneParam._m0[61u].x))) / _2097;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2098 >= cbSceneParam._m0[64u].x) && (_2099 >= cbSceneParam._m0[64u].y)) && (_2098 <= cbSceneParam._m0[64u].z)) && (_2099 <= cbSceneParam._m0[64u].w))
        {
            float _2237 = fma(_1893, cbSceneParam._m0[62u].w, fma(_1889, cbSceneParam._m0[62u].z, fma(_1885, cbSceneParam._m0[62u].y, _1881 * cbSceneParam._m0[62u].x))) / _2097;
            float _2241 = isnan(cbSceneParam._m0[41u].w) ? _2237 : (isnan(_2237) ? cbSceneParam._m0[41u].w : max(_2237, cbSceneParam._m0[41u].w));
            float _2284 = (cbSceneParam._m0[33u].x - sqrt(((_1895 * _1895) + (_1894 * _1894)) + (_1896 * _1896))) * cbSceneParam._m0[33u].y;
            float _4311 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
            float _2291 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2098, cbSceneParam._m0[33u].w + _2099), _2241), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2098, _2099 - cbSceneParam._m0[33u].z), _2241), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2098 - cbSceneParam._m0[33u].z, _2099 - cbSceneParam._m0[33u].w), _2241), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2098 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2099), _2241), 0.0)).x), vec4(0.25)));
            float _2295 = 1.0 - (_2291 * cbSceneParam._m0[34u].x);
            float _2296 = 1.0 - (_2291 * cbSceneParam._m0[34u].y);
            float _2297 = 1.0 - (_2291 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2297) ? _2045 : (isnan(_2045) ? _2297 : min(_2045, _2297));
            frontier_phi_34_33_ladder_1 = isnan(_2296) ? _2044 : (isnan(_2044) ? _2296 : min(_2044, _2296));
            frontier_phi_34_33_ladder_2 = isnan(_2295) ? _2043 : (isnan(_2043) ? _2295 : min(_2043, _2295));
        }
        else
        {
            frontier_phi_34_33_ladder = _2045;
            frontier_phi_34_33_ladder_1 = _2044;
            frontier_phi_34_33_ladder_2 = _2043;
        }
        _2109 = frontier_phi_34_33_ladder_2;
        _2111 = frontier_phi_34_33_ladder_1;
        _2113 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2109 = _2043;
        _2111 = _2044;
        _2113 = _2045;
    }
    uvec4 _2118 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2120 = _2118.x * 14u;
    uint _2121 = _2120 + 13u;
    float _2128 = _825 + (-1.0);
    float _2133 = (cbLight._m0[_2121].x * _2128) + 1.0;
    float _2134 = (cbLight._m0[_2121].y * _2128) + 1.0;
    float _2135 = (cbLight._m0[_2121].z * _2128) + 1.0;
    float _2136 = (cbLight._m0[_2121].w * _2128) + 1.0;
    uint _2137 = _2120 + 5u;
    float _2143 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
    uint _2147 = _2120 + 4u;
    float _2156 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
    uint _2160 = _2120 | 1u;
    float _2171 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_674, _675, _676));
    float _2174 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_674, _675, _676));
    float _4347 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _4358 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2179 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * 0.3183098733425140380859375;
    float _2181 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * 0.3183098733425140380859375;
    float _2188 = ((cbLight._m0[_2137].x * _2143) * _2181) + (((cbLight._m0[_2147].x * _2109) * _2156) * _2179);
    float _2189 = ((_2143 * cbLight._m0[_2137].y) * _2181) + (((cbLight._m0[_2147].y * _2111) * _2156) * _2179);
    float _2190 = ((_2143 * cbLight._m0[_2137].z) * _2181) + (((cbLight._m0[_2147].z * _2113) * _2156) * _2179);
    uvec4 _2194 = floatBitsToUint(cbLight._m0[_2120 + 12u]);
    bool _2196 = _2194.x == 0u;
    float _2298;
    float _2300;
    float _2302;
    if (_2196)
    {
        _2298 = _2188;
        _2300 = _2189;
        _2302 = _2190;
    }
    else
    {
        uint _2306 = _2120 + 6u;
        float _2322 = (dot(vec3(cbLight._m0[_2120 + 2u].xyz), vec3(_674, _675, _676)) * 0.5) + 0.5;
        float _2323 = _2322 * _2322;
        float _4369 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2324 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2325 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
        _2298 = (((cbLight._m0[_2306].x * 0.3183098733425140380859375) * _2324) * _2325) + _2188;
        _2300 = (((cbLight._m0[_2306].y * 0.3183098733425140380859375) * _2324) * _2325) + _2189;
        _2302 = (((cbLight._m0[_2306].z * 0.3183098733425140380859375) * _2324) * _2325) + _2190;
    }
    bool _2305 = _2194.y == 0u;
    float _2360;
    float _2362;
    float _2364;
    if (_2305)
    {
        _2360 = _2298;
        _2362 = _2300;
        _2364 = _2302;
    }
    else
    {
        uint _2522 = _2120 + 7u;
        float _2538 = (dot(vec3(cbLight._m0[_2120 + 3u].xyz), vec3(_674, _675, _676)) * 0.5) + 0.5;
        float _2539 = _2538 * _2538;
        float _4385 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2540 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2541 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2360 = (((cbLight._m0[_2522].x * 0.3183098733425140380859375) * _2540) * _2541) + _2298;
        _2362 = (((cbLight._m0[_2522].y * 0.3183098733425140380859375) * _2540) * _2541) + _2300;
        _2364 = (((cbLight._m0[_2522].z * 0.3183098733425140380859375) * _2540) * _2541) + _2302;
    }
    uint _2367 = _2120 + 8u;
    float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2120].w)) * _677) * 0.949999988079071044921875);
    float _2381 = _2380 * _2380;
    float _2382 = cbLight._m0[_2120].x + _754;
    float _2383 = cbLight._m0[_2120].y + _755;
    float _2384 = cbLight._m0[_2120].z + _756;
    float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
    float _2389 = _2388 * _2382;
    float _2390 = _2388 * _2383;
    float _2391 = _2388 * _2384;
    float _2392 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2120].xyz));
    float _4401 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _4412 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _2396 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _2397 = dot(vec3(_674, _675, _676), vec3(_2389, _2390, _2391));
    float _4423 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2401 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_2389, _2390, _2391));
    float _4434 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2405 = _2381 * _2381;
    float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
    float _2420 = (exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2421 = 1.0 - _2381;
    float _2432 = (0.5 / (((_2396 * ((_2395 * _2421) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2396 * _2421) + _2381) * _2395))) * _2395;
    float _4445 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2434 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
    uint _2448 = _2120 + 9u;
    float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2160].w)) * _677) * 0.949999988079071044921875);
    float _2460 = _2459 * _2459;
    float _2461 = cbLight._m0[_2160].x + _754;
    float _2462 = cbLight._m0[_2160].y + _755;
    float _2463 = cbLight._m0[_2160].z + _756;
    float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
    float _2468 = _2467 * _2461;
    float _2469 = _2467 * _2462;
    float _2470 = _2467 * _2463;
    float _2471 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2160].xyz));
    float _4456 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2474 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2475 = dot(vec3(_674, _675, _676), vec3(_2468, _2469, _2470));
    float _4467 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2478 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2479 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2468, _2469, _2470));
    float _4478 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2483 = _2460 * _2460;
    float _2487 = ((_2478 * _2478) * (_2483 + (-1.0))) + 1.0;
    float _2496 = (exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2497 = 1.0 - _2460;
    float _2507 = (0.5 / (((_2396 * ((_2474 * _2497) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2396 * _2497) + _2460) * _2474))) * _2474;
    float _4489 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2509 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2483 / ((_2487 * _2487) * 3.141590118408203125));
    float _2519 = (((_2496 * cbLight._m0[_2448].x) * _2509) * _2143) + ((((cbLight._m0[_2367].x * _2109) * _2420) * _2434) * _2156);
    float _2520 = (((_2496 * cbLight._m0[_2448].y) * _2509) * _2143) + ((((cbLight._m0[_2367].y * _2111) * _2420) * _2434) * _2156);
    float _2521 = (((_2496 * cbLight._m0[_2448].z) * _2509) * _2143) + ((((cbLight._m0[_2367].z * _2113) * _2420) * _2434) * _2156);
    float _2577;
    float _2579;
    float _2581;
    if (_2196)
    {
        _2577 = _2519;
        _2579 = _2520;
        _2581 = _2521;
    }
    else
    {
        uint _2583 = _2120 + 2u;
        uint _2587 = _2120 + 10u;
        float _2601 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2583].w)) * _677) * 0.949999988079071044921875);
        float _2602 = _2601 * _2601;
        float _2603 = cbLight._m0[_2583].x + _754;
        float _2604 = cbLight._m0[_2583].y + _755;
        float _2605 = cbLight._m0[_2583].z + _756;
        float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
        float _2610 = _2609 * _2603;
        float _2611 = _2609 * _2604;
        float _2612 = _2609 * _2605;
        float _2613 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2583].xyz));
        float _4500 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2617 = dot(vec3(_674, _675, _676), vec3(_2610, _2611, _2612));
        float _4511 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2621 = dot(vec3(cbLight._m0[_2583].xyz), vec3(_2610, _2611, _2612));
        float _4522 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2625 = _2602 * _2602;
        float _2629 = ((_2620 * _2620) * (_2625 + (-1.0))) + 1.0;
        float _2638 = (exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2639 = 1.0 - _2602;
        float _2649 = (0.5 / (((_2396 * ((_2616 * _2639) + _2602)) + 9.9999999392252902907785028219223e-09) + (((_2396 * _2639) + _2602) * _2616))) * _2616;
        float _4533 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2651 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2625 / ((_2629 * _2629) * 3.141590118408203125));
        float _2652 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
        _2577 = (((_2638 * cbLight._m0[_2587].x) * _2651) * _2652) + _2519;
        _2579 = (((_2638 * cbLight._m0[_2587].y) * _2651) * _2652) + _2520;
        _2581 = (((_2638 * cbLight._m0[_2587].z) * _2651) * _2652) + _2521;
    }
    float _2683;
    float _2685;
    float _2687;
    if (_2305)
    {
        _2683 = _2577;
        _2685 = _2579;
        _2687 = _2581;
    }
    else
    {
        uint _2694 = _2120 + 3u;
        uint _2698 = _2120 + 11u;
        float _2712 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2694].w)) * _677) * 0.949999988079071044921875);
        float _2713 = _2712 * _2712;
        float _2714 = cbLight._m0[_2694].x + _754;
        float _2715 = cbLight._m0[_2694].y + _755;
        float _2716 = cbLight._m0[_2694].z + _756;
        float _2720 = inversesqrt(dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716)));
        float _2721 = _2720 * _2714;
        float _2722 = _2720 * _2715;
        float _2723 = _2720 * _2716;
        float _2724 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2694].xyz));
        float _4549 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2727 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2728 = dot(vec3(_674, _675, _676), vec3(_2721, _2722, _2723));
        float _4560 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2731 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2732 = dot(vec3(cbLight._m0[_2694].xyz), vec3(_2721, _2722, _2723));
        float _4571 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2736 = _2713 * _2713;
        float _2740 = ((_2731 * _2731) * (_2736 + (-1.0))) + 1.0;
        float _2749 = (exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2750 = 1.0 - _2713;
        float _2760 = (0.5 / (((_2396 * ((_2727 * _2750) + _2713)) + 9.9999999392252902907785028219223e-09) + (((_2396 * _2750) + _2713) * _2727))) * _2727;
        float _4582 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2762 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2736 / ((_2740 * _2740) * 3.141590118408203125));
        float _2763 = isnan(1.0) ? _2136 : (isnan(_2136) ? 1.0 : min(_2136, 1.0));
        _2683 = (((_2749 * cbLight._m0[_2698].x) * _2762) * _2763) + _2577;
        _2685 = (((_2749 * cbLight._m0[_2698].y) * _2762) * _2763) + _2579;
        _2687 = (((_2749 * cbLight._m0[_2698].z) * _2762) * _2763) + _2581;
    }
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    if (_2118.y == 0u)
    {
        uvec4 _2784 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2785 = _2784.x;
        uint _2796 = uint((float(_2784.y) * floor(float(uint(cbSceneParam._m0[85u].y * _763) / _2785))) + floor(float(uint(cbSceneParam._m0[85u].x * _762) / _2785)));
        float _2806 = (log2(_1896 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2807 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        uint _2810 = uint(isnan(14.0) ? _2807 : (isnan(_2807) ? 14.0 : min(_2807, 14.0)));
        uvec4 _2815 = texelFetch(g_lightClusterGridBuffer, int(((_2810 << 2u) + (_2796 << 6u)) >> 2u));
        uint _2816 = _2815.x;
        uint _2817 = _2784.z;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        if (((((1u << ((_2817 >> 4u) & 15u)) + 4294967295u) & _2816) == 0u) || ((_2817 & 240u) == 0u))
        {
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
        }
        else
        {
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _3041 = 0.0;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            uint _3047 = 0u;
            uint _3056;
            bool _3057;
            for (;;)
            {
                _3056 = texelFetch(g_lightClassification, int((((_2810 << 5u) + (_2796 << 9u)) + (_3047 << 2u)) >> 2u)).x;
                _3057 = _3056 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3057)
                {
                    frontier_phi_66_pred = _3046;
                    frontier_phi_66_pred_1 = _3045;
                    frontier_phi_66_pred_2 = _3044;
                    frontier_phi_66_pred_3 = _3043;
                    frontier_phi_66_pred_4 = _3042;
                    frontier_phi_66_pred_5 = _3041;
                }
                else
                {
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    uint _3171;
                    _3165 = _3041;
                    _3166 = _3042;
                    _3167 = _3043;
                    _3168 = _3044;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3056;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    for (;;)
                    {
                        uint _3175 = uint(findLSB(_3171)) + (_3047 << 5u);
                        uint _3172 = (_3171 + 4294967295u) & _3171;
                        uint _3177 = _3175 * 48u;
                        vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3177)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3177 + 3u)).x));
                        uint _3197 = (_3175 * 48u) + 4u;
                        vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3197)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3197 + 3u)).x));
                        uint _3216 = (_3175 * 48u) + 8u;
                        vec3 _3227 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3216)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3216 + 2u)).x));
                        float _3231 = _3191.x - _1894;
                        float _3232 = _3191.y - _1895;
                        float _3233 = _3191.z - _1896;
                        float _3234 = dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233));
                        float _3237 = inversesqrt(_3234);
                        float _3238 = _3237 * _3231;
                        float _3239 = _3237 * _3232;
                        float _3240 = _3237 * _3233;
                        float _3241 = dot(vec3(_781, _784, _787), vec3(_3238, _3239, _3240));
                        float _3246 = 1.0 - (_3234 * _3191.w);
                        float _4608 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3247 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3248 = sqrt(_3234) * _3210.w;
                        float _3251 = 1.39999997615814208984375 / (_3248 + 1.39999997615814208984375);
                        float _3252 = _3251 * _3251;
                        float _3255 = ((1.0 - _3252) * _3241) + _3252;
                        float _3258 = _3248 * _3248;
                        float _3262 = ((isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0))) * _3247) / ((_3258 * 0.699999988079071044921875) + 1.0);
                        float _3266 = (-0.0) - _1894;
                        float _3267 = (-0.0) - _1895;
                        float _3268 = (-0.0) - _1896;
                        float _3272 = inversesqrt(dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268)));
                        float _3273 = _3272 * _3266;
                        float _3274 = _3272 * _3267;
                        float _3275 = _3272 * _3268;
                        float _3282 = exp2(log2(1.0 / ((_3258 * 3.5) + 5.0)) * 0.25);
                        float _3283 = 1.0 - _841;
                        float _3290 = sqrt(1.0 - ((1.0 - (_3283 * _3283)) * (1.0 - (_3282 * _3282))));
                        float _3291 = _3290 * _3290;
                        float _3292 = _3291 * _3291;
                        float _3293 = _3273 + _3238;
                        float _3294 = _3274 + _3239;
                        float _3295 = _3275 + _3240;
                        float _3299 = inversesqrt(dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295)));
                        float _3303 = dot(vec3(_781, _784, _787), vec3(_3273, _3274, _3275));
                        float _4624 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3306 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3307 = dot(vec3(_781, _784, _787), vec3(_3299 * _3293, _3299 * _3294, _3299 * _3295));
                        float _4635 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3310 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3314 = ((_3310 * _3310) * (_3292 + (-1.0))) + 1.0;
                        float _3315 = _3251 * _3291;
                        float _3316 = _3315 * _3315;
                        float _3319 = ((1.0 - _3316) * _3241) + _3316;
                        float _4646 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3320 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3321 = 1.0 - _3291;
                        float _3331 = (0.5 / (((_3320 * ((_3306 * _3321) + _3291)) + 9.9999999392252902907785028219223e-09) + (((_3320 * _3321) + _3291) * _3306))) * _3320;
                        float _4657 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3342 = (((_3292 * 3.1415927410125732421875) * (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) / ((_3314 * _3314) * ((_3258 * 2.1991131305694580078125) + 3.141590118408203125))) * _3247;
                        _3100 = (_3262 * _3210.x) + _3168;
                        _3101 = (_3262 * _3210.y) + _3169;
                        _3102 = (_3262 * _3210.z) + _3170;
                        _3097 = (_3342 * _3227.x) + _3165;
                        _3098 = (_3342 * _3227.y) + _3166;
                        _3099 = (_3342 * _3227.z) + _3167;
                        if (_3172 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3165 = _3097;
                            _3166 = _3098;
                            _3167 = _3099;
                            _3168 = _3100;
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3172;
                        }
                    }
                    frontier_phi_66_pred = _3102;
                    frontier_phi_66_pred_1 = _3101;
                    frontier_phi_66_pred_2 = _3100;
                    frontier_phi_66_pred_3 = _3099;
                    frontier_phi_66_pred_4 = _3098;
                    frontier_phi_66_pred_5 = _3097;
                }
                _2907 = frontier_phi_66_pred;
                _2905 = frontier_phi_66_pred_1;
                _2903 = frontier_phi_66_pred_2;
                _2901 = frontier_phi_66_pred_3;
                _2899 = frontier_phi_66_pred_4;
                _2897 = frontier_phi_66_pred_5;
                uint _3048 = _3047 + 1u;
                if (_3048 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3041 = _2897;
                    _3042 = _2899;
                    _3043 = _2901;
                    _3044 = _2903;
                    _3045 = _2905;
                    _3046 = _2907;
                    _3047 = _3048;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
        }
        uvec4 _2910 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2911 = _2910.z;
        uint _2913 = (_2911 >> 8u) & 15u;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        if (((4294967295u << _2913) & _2816) == 0u)
        {
            _3009 = _2896;
            _3011 = _2898;
            _3013 = _2900;
            _3015 = _2902;
            _3017 = _2904;
            _3019 = _2906;
        }
        else
        {
            float _3034 = inversesqrt(dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896)));
            float _3035 = _3034 * _1894;
            float _3036 = _3034 * _1895;
            float _3037 = _3034 * _1896;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2913 < ((_2911 >> 12u) & 15u))
            {
                float _3010;
                float _3012;
                float _3014;
                float _3016;
                float _3018;
                float _3020;
                float _3148 = _2896;
                float _3149 = _2898;
                float _3150 = _2900;
                float _3151 = _2902;
                float _3152 = _2904;
                float _3153 = _2906;
                uint _3154 = _2913;
                uint _3163;
                bool _3164;
                for (;;)
                {
                    _3163 = texelFetch(g_lightClassification, int((((_2810 << 5u) + (_2796 << 9u)) + (_3154 << 2u)) >> 2u)).x;
                    _3164 = _3163 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3164)
                    {
                        frontier_phi_72_pred = _3153;
                        frontier_phi_72_pred_1 = _3152;
                        frontier_phi_72_pred_2 = _3151;
                        frontier_phi_72_pred_3 = _3150;
                        frontier_phi_72_pred_4 = _3149;
                        frontier_phi_72_pred_5 = _3148;
                    }
                    else
                    {
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3360 = _3148;
                        float _3361 = _3149;
                        float _3362 = _3150;
                        float _3363 = _3151;
                        float _3364 = _3152;
                        float _3365 = _3153;
                        uint _3366 = _3163;
                        uint _3367;
                        vec4 _3392;
                        float _3393;
                        vec4 _3408;
                        vec3 _3420;
                        vec4 _3435;
                        vec4 _3450;
                        float _3496;
                        bool _3497;
                        for (;;)
                        {
                            uint _3377 = ((_3154 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3366));
                            _3367 = (_3366 + 4294967295u) & _3366;
                            uint _3379 = _3377 * 40u;
                            _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            _3393 = _3392.w;
                            uint _3395 = (_3377 * 40u) + 4u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3410 = (_3377 * 40u) + 8u;
                            _3420 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x));
                            uint _3422 = (_3377 * 40u) + 16u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3437 = (_3377 * 40u) + 20u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3452 = (_3377 * 40u) + 24u;
                            vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3471 = (_3377 * 40u) + 28u;
                            vec4 _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            _3496 = fma(_1896, _3484.z, fma(_1895, _3484.y, _3484.x * _1894)) + _3484.w;
                            _3497 = !((fma(_1896, _3465.z, fma(_1895, _3465.y, _3465.x * _1894)) + _3465.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3497)
                            {
                                float _3524 = _3392.x - _1894;
                                float _3525 = _3392.y - _1895;
                                float _3526 = _3392.z - _1896;
                                float _3527 = dot(vec3(_3524, _3525, _3526), vec3(_3524, _3525, _3526));
                                float _3530 = inversesqrt(_3527);
                                float _3531 = _3530 * _3524;
                                float _3532 = _3530 * _3525;
                                float _3533 = _3530 * _3526;
                                float _3537 = 1.0 - (_3527 / (_3393 * _3393));
                                float _4668 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3538 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3542 = sqrt(_3527) * _3408.w;
                                float _3544 = 1.39999997615814208984375 / (_3542 + 1.39999997615814208984375);
                                float _3545 = _3544 * _3544;
                                float _3548 = ((1.0 - _3545) * dot(vec3(_3531, _3532, _3533), vec3(_781, _784, _787))) + _3545;
                                float _3551 = _3542 * _3542;
                                float _3555 = (fma(_1896, _3435.z, fma(_1895, _3435.y, _3435.x * _1894)) + _3435.w) / _3496;
                                float _3556 = (fma(_1896, _3450.z, fma(_1895, _3450.y, _3450.x * _1894)) + _3450.w) / _3496;
                                float _3560 = 1.0 - dot(vec2(_3555, _3556), vec2(_3555, _3556));
                                float _4684 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3562 = _3561 * (((isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0))) * _3538) / ((_3551 * 0.699999988079071044921875) + 1.0));
                                float _3574 = exp2(log2(1.0 / ((_3551 * 3.5) + 5.0)) * 0.25);
                                float _3575 = 1.0 - _841;
                                float _3582 = sqrt(1.0 - ((1.0 - (_3575 * _3575)) * (1.0 - (_3574 * _3574))));
                                float _3583 = _3582 * _3582;
                                float _3584 = _3583 * _3583;
                                float _3585 = _3531 - _3035;
                                float _3586 = _3532 - _3036;
                                float _3587 = _3533 - _3037;
                                float _3591 = inversesqrt(dot(vec3(_3585, _3586, _3587), vec3(_3585, _3586, _3587)));
                                float _3595 = dot(vec3(_781, _784, _787), vec3((-0.0) - _3035, (-0.0) - _3036, (-0.0) - _3037));
                                float _4695 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3598 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3599 = dot(vec3(_781, _784, _787), vec3(_3591 * _3585, _3591 * _3586, _3591 * _3587));
                                float _4706 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3602 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3606 = ((_3602 * _3602) * (_3584 + (-1.0))) + 1.0;
                                float _3607 = _3544 * _3583;
                                float _3608 = _3607 * _3607;
                                float _3614 = ((1.0 - _3608) * dot(vec3(_781, _784, _787), vec3(_3531, _3532, _3533))) + _3608;
                                float _4717 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3615 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3616 = 1.0 - _3583;
                                float _3626 = (0.5 / (((_3615 * ((_3598 * _3616) + _3583)) + 9.9999999392252902907785028219223e-09) + (((_3615 * _3616) + _3583) * _3598))) * _3615;
                                float _4728 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3636 = (_3561 * _3538) * (((_3584 * 3.1415927410125732421875) * (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) / ((_3606 * _3606) * ((_3551 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3562 * _3408.y;
                                frontier_phi_78_pred_1 = _3562 * _3408.x;
                                frontier_phi_78_pred_2 = _3636 * _3420.z;
                                frontier_phi_78_pred_3 = _3636 * _3420.y;
                                frontier_phi_78_pred_4 = _3636 * _3420.x;
                                frontier_phi_78_pred_5 = _3562 * _3408.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3644 = frontier_phi_78_pred;
                            _3643 = frontier_phi_78_pred_1;
                            _3642 = frontier_phi_78_pred_2;
                            _3641 = frontier_phi_78_pred_3;
                            _3640 = frontier_phi_78_pred_4;
                            _3645 = frontier_phi_78_pred_5;
                            _3350 = _3643 + _3363;
                            _3351 = _3644 + _3364;
                            _3352 = _3645 + _3365;
                            _3347 = _3640 + _3360;
                            _3348 = _3641 + _3361;
                            _3349 = _3642 + _3362;
                            if (_3367 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3367;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3352;
                        frontier_phi_72_pred_1 = _3351;
                        frontier_phi_72_pred_2 = _3350;
                        frontier_phi_72_pred_3 = _3349;
                        frontier_phi_72_pred_4 = _3348;
                        frontier_phi_72_pred_5 = _3347;
                    }
                    _3020 = frontier_phi_72_pred;
                    _3018 = frontier_phi_72_pred_1;
                    _3016 = frontier_phi_72_pred_2;
                    _3014 = frontier_phi_72_pred_3;
                    _3012 = frontier_phi_72_pred_4;
                    _3010 = frontier_phi_72_pred_5;
                    uint _3155 = _3154 + 1u;
                    if (_3155 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3148 = _3010;
                        _3149 = _3012;
                        _3150 = _3014;
                        _3151 = _3016;
                        _3152 = _3018;
                        _3153 = _3020;
                        _3154 = _3155;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3020;
                frontier_phi_60_61_ladder_1 = _3018;
                frontier_phi_60_61_ladder_2 = _3014;
                frontier_phi_60_61_ladder_3 = _3012;
                frontier_phi_60_61_ladder_4 = _3010;
                frontier_phi_60_61_ladder_5 = _3016;
            }
            else
            {
                frontier_phi_60_61_ladder = _2906;
                frontier_phi_60_61_ladder_1 = _2904;
                frontier_phi_60_61_ladder_2 = _2900;
                frontier_phi_60_61_ladder_3 = _2898;
                frontier_phi_60_61_ladder_4 = _2896;
                frontier_phi_60_61_ladder_5 = _2902;
            }
            _3009 = frontier_phi_60_61_ladder_4;
            _3011 = frontier_phi_60_61_ladder_3;
            _3013 = frontier_phi_60_61_ladder_2;
            _3015 = frontier_phi_60_61_ladder_5;
            _3017 = frontier_phi_60_61_ladder_1;
            _3019 = frontier_phi_60_61_ladder;
        }
        float _3024 = isnan(1.0) ? _825 : (isnan(_825) ? 1.0 : min(_825, 1.0));
        _2829 = (_3024 * _3015) + _2360;
        _2831 = (_3024 * _3017) + _2362;
        _2833 = (_3024 * _3019) + _2364;
        _2835 = ((_3009 * 0.039999999105930328369140625) * _3024) + _2683;
        _2837 = ((_3011 * 0.039999999105930328369140625) * _3024) + _2685;
        _2839 = ((_3013 * 0.039999999105930328369140625) * _3024) + _2687;
    }
    else
    {
        _2829 = _2360;
        _2831 = _2362;
        _2833 = _2364;
        _2835 = _2683;
        _2837 = _2685;
        _2839 = _2687;
    }
    float _4744 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4755 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4766 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    uint _2859 = _240 + 6u;
    float _2867 = _762 / cbSceneParam._m0[86u].x;
    float _2868 = _763 / cbSceneParam._m0[86u].y;
    vec4 _2882 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2867, _2868, (log2((isnan(cbSceneParam._m0[77u].w) ? _695 : (isnan(_695) ? cbSceneParam._m0[77u].w : min(_695, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2884 = _2882.x;
    float _2885 = _2882.y;
    float _2886 = _2882.z;
    float _2887 = _2882.w;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    if (_695 > cbSceneParam._m0[78u].w)
    {
        float _2921 = isnan(_695) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _695 : min(cbSceneParam._m0[80u].w, _695));
        float _2922 = _2921 / _695;
        float _2933 = _2922 * _747;
        float _2934 = _748 * _2922;
        float _2935 = (-0.0) - _2934;
        float _2937 = _2922 * _749;
        float _2939 = (cbSceneParam._m0[77u].w * _2935) / _2921;
        float _2940 = _2939 + cbSceneParam._m0[79u].w;
        float _2941 = cbSceneParam._m0[79u].w - _2934;
        float _2947 = sqrt(((_2933 * _2933) + (_2934 * _2934)) + (_2937 * _2937));
        float _2950 = (1.0 - (cbSceneParam._m0[77u].w / _2921)) * _2947;
        float _2955 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2957 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3110;
        if (abs((_2935 - _2939) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3110 = ((((_2940 > 0.0) ? exp2(_2955 * _2940) : (2.0 - exp2(_2957 * _2940))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2950;
        }
        else
        {
            float _3070 = 1.0 / cbSceneParam._m0[80u].x;
            float _3071 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : max(_2940, _2941));
            float _3072 = isnan(_2941) ? _2940 : (isnan(_2940) ? _2941 : min(_2940, _2941));
            float _3081 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : min(_3071, 0.0));
            float _3082 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : min(_3072, 0.0));
            _3110 = ((abs(_2947 / _2935) * cbSceneParam._m0[80u].y) * ((((_3081 - _3082) * 2.0) - ((exp2(_2955 * (isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0)))) - exp2(_2955 * (isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0))))) * _3070)) - ((exp2(_2957 * _3081) - exp2(_2957 * _3082)) * _3070))) + (_2950 * cbSceneParam._m0[80u].z);
        }
        vec4 _3112 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2867, _2868, 1.0), 0.0);
        float _3121 = exp2((_3110 * (-1.44269502162933349609375)) * (1.0 - _3112.w));
        float _3122 = log2(_3121);
        float _3138 = log2(_2887);
        _2959 = (exp2(_3138 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].x)) * _3112.x) / cbSceneParam._m0[78u].x)) + _2884;
        _2961 = (exp2(_3138 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].y)) * _3112.y) / cbSceneParam._m0[78u].y)) + _2885;
        _2963 = (exp2(_3138 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].z)) * _3112.z) / cbSceneParam._m0[78u].z)) + _2886;
        _2965 = _3121 * _2887;
    }
    else
    {
        _2959 = _2884;
        _2961 = _2885;
        _2963 = _2886;
        _2965 = _2887;
    }
    float _2977 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2978 = _2977 == 3.0;
    float _2979 = log2(_2965);
    float _2986 = exp2(_2979 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2829 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _825))) + ((_2835 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1630)) * cbPerFrame._m0[3u].x));
    float _2987 = exp2(_2979 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2831 + ((isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))) * _825))) + ((_2837 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1630)) * cbPerFrame._m0[3u].x));
    float _2988 = exp2(_2979 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2833 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _825))) + ((_2839 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1630)) * cbPerFrame._m0[3u].x));
    float _2997 = (_2977 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2997 * (_2978 ? _2986 : (_2986 + (cbSceneParam._m0[72u].w * _2959)));
    SV_Target.y = _2997 * (_2978 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2961)));
    SV_Target.z = _2997 * (_2978 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2963)));
    SV_Target.w = cbInstanceData._m0[_2859].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2859].w;
}


