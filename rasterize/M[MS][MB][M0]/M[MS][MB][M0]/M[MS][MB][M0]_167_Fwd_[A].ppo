#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1165;
float _3526;
float _3527;
float _3528;
float _3529;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _345 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _347 = _345.x;
    float _357 = dot(vec4(_347, _345.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _374 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_347 - _357) * cbMtdParam._m0[24u].x) + _357) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3538 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _382 = (_375 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _383 = (_375 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _384 = (_375 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _258) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _259) + cbTextureTilingScale._m0[3u].w));
    vec4 _421 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _423 = _421.x;
    float _433 = dot(vec4(_423, _421.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _447 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_423 - _433) * cbMtdParam._m0[24u].x) + _433) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3549 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _455 = (_448 * ((_401.x * cbMtdParam._m0[13u].x) - _382)) + _382;
    float _456 = (_448 * ((_401.y * cbMtdParam._m0[13u].y) - _383)) + _383;
    float _457 = (_448 * ((_401.z * cbMtdParam._m0[13u].z) - _384)) + _384;
    vec4 _469 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _258) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _259) + cbTextureTilingScale._m0[20u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _520 = ((_492.x - _511) * _375) + _511;
    float _521 = ((_492.y - _512) * _375) + _512;
    float _522 = ((_492.z - _513) * _375) + _513;
    vec4 _534 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _258) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w));
    float _547 = ((_534.z - _522) * _448) + _522;
    float _550 = ((((_534.x - _520) * _448) + _520) * 2.0) + (-1.0);
    float _551 = ((((_534.y - _521) * _448) + _521) * 2.0) + (-1.0);
    float _552 = dot(vec2(_550, _551), vec2(_550, _551));
    float _3560 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _557 = sqrt(1.0 - (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))));
    float _562 = _550 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_469.x * 2.0) + (-1.0)));
    float _563 = _551 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_469.y * 2.0) + (-1.0)));
    vec4 _576 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _583 = (((_469.z - _547) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _547;
    float _588 = cbMtdParam._m0[22u].x + _576.w;
    float _591 = fma(_557, _225 * NORMAL.x, fma(_563, _232 * TANGENT.x, (_218 * _210) * _562));
    float _594 = fma(_557, _225 * NORMAL.y, fma(_563, _232 * TANGENT.y, (_218 * _211) * _562));
    float _597 = fma(_557, _225 * NORMAL.z, fma(_563, _232 * TANGENT.z, (_218 * _212) * _562));
    float _601 = inversesqrt(dot(vec3(_591, _594, _597), vec3(_591, _594, _597)));
    float _602 = _601 * _591;
    float _603 = _601 * _594;
    float _604 = _601 * _597;
    float _3571 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _605 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _3582 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _3593 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3604 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3615 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _623 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _675 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _665);
    float _676 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _665);
    float _677 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _665);
    float _681 = inversesqrt(dot(vec3(_675, _676, _677), vec3(_675, _676, _677)));
    float _682 = _675 * _681;
    float _683 = _676 * _681;
    float _684 = _677 * _681;
    vec4 _689 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _691 = _689.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _845 = sqrt(((_675 * _675) + (_676 * _676)) + (_677 * _677));
        float _851 = (cbMatDynParam._m0[5u].x * _845) + cbMatDynParam._m0[5u].y;
        float _3626 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _852 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _856 = (cbMatDynParam._m0[5u].z * _845) + cbMatDynParam._m0[5u].w;
        float _3637 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) - _852)) + _852) < ((_691 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _702 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _703 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _721 = fma(_604, cbSceneParam._m0[5u].z, fma(_603, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _602));
    float _724 = fma(_604, cbSceneParam._m0[6u].z, fma(_603, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _602));
    float _727 = fma(_604, cbSceneParam._m0[7u].z, fma(_603, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _602));
    uint _740 = _238 + 9u;
    uint _741 = _740 + uint(cbMatDynParam._m0[0u].w);
    float _747 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_741].x;
    float _748 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * cbInstanceData._m0[_741].y;
    float _749 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * cbInstanceData._m0[_741].z;
    float _3648 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _3670 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    vec4 _761 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _702, cbSceneParam._m0[86u].y * _703));
    float _765 = ((isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * TEXCOORD_5.w) * _761.x;
    float _766 = dot(vec3(_602, _603, _604), vec3(_682, _683, _684));
    float _769 = _766 * 2.0;
    float _773 = (_769 * _602) - _682;
    float _774 = (_769 * _603) - _683;
    float _775 = (_769 * _604) - _684;
    float _779 = abs(dot(vec3(_682, _683, _684), vec3(_602, _603, _604)));
    float _3681 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _781 = sqrt(_605);
    float _794 = exp2((_781 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_781 * 3.0));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1164;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _889 = fma(_834, cbModelParam._m0[26u].z, fma(_830, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _826));
        float _893 = fma(_834, cbModelParam._m0[27u].z, fma(_830, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _826));
        float _897 = fma(_834, cbModelParam._m0[28u].z, fma(_830, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _826));
        float _922 = _826 + _602;
        float _923 = _830 + _603;
        float _924 = _834 + _604;
        float _934 = fma(_924, cbModelParam._m0[26u].z, fma(_923, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _922)) - _889;
        float _935 = fma(_924, cbModelParam._m0[27u].z, fma(_923, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _922)) - _893;
        float _936 = fma(_924, cbModelParam._m0[28u].z, fma(_923, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _922)) - _897;
        float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
        float _953 = ((_940 * _934) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_889 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_940 * _935) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_893 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_940 * _936) / cbModelParam._m0[34u].z) + ((((((_897 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        float _992 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_958.x + (-0.5));
        float _994 = _992 * (_958.y + (-0.5));
        float _995 = _992 * (_958.z + (-0.5));
        float _1002 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_965.x + (-0.5));
        float _1004 = _1002 * (_965.y + (-0.5));
        float _1005 = _1002 * (_965.z + (-0.5));
        float _1012 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_972.x + (-0.5));
        float _1014 = _1012 * (_972.y + (-0.5));
        float _1015 = _1012 * (_972.z + (-0.5));
        float _1022 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_979.x + (-0.5));
        float _1024 = _1022 * (_979.y + (-0.5));
        float _1025 = _1022 * (_979.z + (-0.5));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = _993 * 0.5;
        float _1030 = _1003 * 0.5;
        float _1031 = _1013 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1046 = (dot(vec3(_602, _603, _604), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1056 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3729 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_1058 + 1.0))) + _1063) * _1026;
        float _1073 = _994 * 0.5;
        float _1074 = _1004 * 0.5;
        float _1075 = _1014 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_602, _603, _604), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3740 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3751 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3762 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_1100 + 1.0))) + _1105) * _1027;
        float _1115 = _995 * 0.5;
        float _1116 = _1005 * 0.5;
        float _1117 = _1015 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_602, _603, _604), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3795 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1142 + 1.0))) + _1147) * _1028;
        _1164 = _995;
        _1166 = _994;
        _1167 = _993;
        _1168 = _1005;
        _1169 = _1004;
        _1170 = _1003;
        _1171 = _1015;
        _1172 = _1014;
        _1173 = _1013;
        _1174 = _1028;
        _1175 = _1027;
        _1176 = _1026;
        _1177 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1178 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
    }
    else
    {
        _1164 = _1165;
        _1166 = _1165;
        _1167 = _1165;
        _1168 = _1165;
        _1169 = _1165;
        _1170 = _1165;
        _1171 = _1165;
        _1172 = _1165;
        _1173 = _1165;
        _1174 = _1165;
        _1175 = _1165;
        _1176 = _1165;
        _1177 = 0.0;
        _1178 = 0.0;
        _1179 = 0.0;
    }
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1206 = fma(_834, cbModelParam._m0[30u].z, fma(_830, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _826));
        float _1210 = fma(_834, cbModelParam._m0[31u].z, fma(_830, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _826));
        float _1214 = fma(_834, cbModelParam._m0[32u].z, fma(_830, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _826));
        float _1237 = _826 + _602;
        float _1238 = _830 + _603;
        float _1239 = _834 + _604;
        float _1249 = fma(_1239, cbModelParam._m0[30u].z, fma(_1238, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1237)) - _1206;
        float _1250 = fma(_1239, cbModelParam._m0[31u].z, fma(_1238, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1237)) - _1210;
        float _1251 = fma(_1239, cbModelParam._m0[32u].z, fma(_1238, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1237)) - _1214;
        float _1255 = inversesqrt(dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251)));
        float _1268 = ((_1255 * _1249) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1206 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1255 * _1250) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1210 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1255 * _1251) / cbModelParam._m0[35u].z) + ((((((_1214 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        float _1305 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1272.x + (-0.5));
        float _1307 = _1305 * (_1272.y + (-0.5));
        float _1308 = _1305 * (_1272.z + (-0.5));
        float _1315 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1279.x + (-0.5));
        float _1317 = _1315 * (_1279.y + (-0.5));
        float _1318 = _1315 * (_1279.z + (-0.5));
        float _1325 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1286.x + (-0.5));
        float _1327 = _1325 * (_1286.y + (-0.5));
        float _1328 = _1325 * (_1286.z + (-0.5));
        float _1335 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1293.x + (-0.5));
        float _1337 = _1335 * (_1293.y + (-0.5));
        float _1338 = _1335 * (_1293.z + (-0.5));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = _1306 * 0.5;
        float _1343 = _1316 * 0.5;
        float _1344 = _1326 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_602, _603, _604), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _3858 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1369 + 1.0))) + _1374) * _1339;
        float _1384 = _1307 * 0.5;
        float _1385 = _1317 * 0.5;
        float _1386 = _1327 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_602, _603, _604), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _3891 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1411 + 1.0))) + _1416) * _1340;
        float _1426 = _1308 * 0.5;
        float _1427 = _1318 * 0.5;
        float _1428 = _1328 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_602, _603, _604), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _3924 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1453 + 1.0))) + _1458) * _1341;
        _1475 = _1308;
        _1476 = _1307;
        _1477 = _1306;
        _1478 = _1318;
        _1479 = _1317;
        _1480 = _1316;
        _1481 = _1328;
        _1482 = _1327;
        _1483 = _1326;
        _1484 = _1341;
        _1485 = _1340;
        _1486 = _1339;
        _1487 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
    }
    else
    {
        _1475 = _1165;
        _1476 = _1165;
        _1477 = _1165;
        _1478 = _1165;
        _1479 = _1165;
        _1480 = _1165;
        _1481 = _1165;
        _1482 = _1165;
        _1483 = _1165;
        _1484 = _1165;
        _1485 = _1165;
        _1486 = _1165;
        _1487 = 0.0;
        _1488 = 0.0;
        _1489 = 0.0;
    }
    float _1499 = (cbModelParam._m0[1u].x * (_1487 - _1177)) + _1177;
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1178)) + _1178;
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1179)) + _1179;
    float _1522 = fma(_1501, cbSceneParam._m0[89u].z, fma(_1500, cbSceneParam._m0[89u].y, _1499 * cbSceneParam._m0[89u].x));
    float _1525 = fma(_1501, cbSceneParam._m0[90u].z, fma(_1500, cbSceneParam._m0[90u].y, _1499 * cbSceneParam._m0[90u].x));
    float _1528 = fma(_1501, cbSceneParam._m0[91u].z, fma(_1500, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1499));
    float _1543 = _773 * 0.5;
    float _1544 = _774 * 0.5;
    float _1545 = _775 * 0.5;
    float _1546 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1549 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1552 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1475, _1478, _1481, _1484));
    float _1586;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1559 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1164, _1168, _1171, _1174));
        float _1563 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1166, _1169, _1172, _1175));
        float _1567 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1167, _1170, _1173, _1176));
        float _1574 = dot(vec4(cbModelParam._m0[39u]), vec4(_1543, _1544, _1545, 1.0));
        _1586 = dot(vec3(isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1574) ? 0.0 : (isnan(0.0) ? _1574 : max(0.0, _1574))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1586 = 1.0;
    }
    float _1597;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1588 = dot(vec4(cbModelParam._m0[40u]), vec4(_1543, _1544, _1545, 1.0));
        _1597 = dot(vec3(isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1588) ? 0.0 : (isnan(0.0) ? _1588 : max(0.0, _1588))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1597 = 1.0;
    }
    float _1601 = (_1597 * cbModelParam._m0[1u].x) + (_1586 * (1.0 - cbModelParam._m0[1u].x));
    float _1611 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _605);
    float _1612 = isnan(_1611) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1611 : min(cbModelParam._m0[25u].z, _1611));
    float _1694;
    float _1696;
    float _1698;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1661 = fma(_834, cbModelParam._m0[13u].z, fma(_830, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _826)) + cbModelParam._m0[13u].w;
        float _1665 = fma(_834, cbModelParam._m0[14u].z, fma(_830, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _826)) + cbModelParam._m0[14u].w;
        float _1669 = fma(_834, cbModelParam._m0[15u].z, fma(_830, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _826)) + cbModelParam._m0[15u].w;
        float _1672 = fma(_775, cbModelParam._m0[13u].z, fma(_774, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _773));
        float _1675 = fma(_775, cbModelParam._m0[14u].z, fma(_774, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _773));
        float _1678 = fma(_775, cbModelParam._m0[15u].z, fma(_774, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _773));
        float _1706;
        if (_1672 > 0.0)
        {
            _1706 = abs((1.0 - _1661) / _1672);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1661 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1706 = frontier_phi_17_15_ladder;
        }
        float _1908;
        if (_1675 > 0.0)
        {
            _1908 = abs((1.0 - _1665) / _1675);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1665 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1908 = frontier_phi_26_22_ladder;
        }
        float _2151;
        if (_1678 > 0.0)
        {
            _2151 = abs((1.0 - _1669) / _1678);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1669 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2151 = frontier_phi_38_33_ladder;
        }
        float _2153 = isnan(_1908) ? _1706 : (isnan(_1706) ? _1908 : min(_1706, _1908));
        float _2154 = isnan(_2151) ? _2153 : (isnan(_2153) ? _2151 : min(_2153, _2151));
        float _2158 = (_2154 * _1672) + _1661;
        float _2159 = (_2154 * _1675) + _1665;
        float _2160 = (_2154 * _1678) + _1669;
        float _2161 = _2154 * 9.9999997473787516355514526367188e-05;
        float _2163 = (-1.0) - _2161;
        float _2165 = _2161 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2160 > _2165) || ((_2160 < _2163) || ((_2159 > _2165) || ((_2159 < _2163) || ((_2158 < _2163) || (_2158 > _2165))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2284 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2160, cbModelParam._m0[9u].z, fma(_2159, cbModelParam._m0[9u].y, _2158 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2160, cbModelParam._m0[10u].z, fma(_2159, cbModelParam._m0[10u].y, _2158 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2160, cbModelParam._m0[11u].z, fma(_2159, cbModelParam._m0[11u].y, _2158 * cbModelParam._m0[11u].x))), _1612);
            frontier_phi_16_38_ladder = _2284.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2284.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2284.x * cbModelParam._m0[1u].y;
        }
        _1694 = frontier_phi_16_38_ladder_2;
        _1696 = frontier_phi_16_38_ladder_1;
        _1698 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1682 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_773, _774, _775), _1612);
        _1694 = _1682.x * cbModelParam._m0[1u].y;
        _1696 = _1682.y * cbModelParam._m0[1u].y;
        _1698 = _1682.z * cbModelParam._m0[1u].y;
    }
    float _1702 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _605);
    float _1703 = isnan(_1702) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1702 : min(cbModelParam._m0[25u].w, _1702));
    float _1794;
    float _1796;
    float _1798;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1758 = fma(_834, cbModelParam._m0[21u].z, fma(_830, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _826)) + cbModelParam._m0[21u].w;
        float _1762 = fma(_834, cbModelParam._m0[22u].z, fma(_830, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _826)) + cbModelParam._m0[22u].w;
        float _1766 = fma(_834, cbModelParam._m0[23u].z, fma(_830, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _826)) + cbModelParam._m0[23u].w;
        float _1769 = fma(_775, cbModelParam._m0[21u].z, fma(_774, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _773));
        float _1772 = fma(_775, cbModelParam._m0[22u].z, fma(_774, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _773));
        float _1775 = fma(_775, cbModelParam._m0[23u].z, fma(_774, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _773));
        float _1913;
        if (_1769 > 0.0)
        {
            _1913 = abs((1.0 - _1758) / _1769);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1758 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1913 = frontier_phi_28_24_ladder;
        }
        float _2178;
        if (_1772 > 0.0)
        {
            _2178 = abs((1.0 - _1762) / _1772);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1762 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2178 = frontier_phi_40_35_ladder;
        }
        float _2383;
        if (_1775 > 0.0)
        {
            _2383 = abs((1.0 - _1766) / _1775);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1766 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2383 = frontier_phi_49_46_ladder;
        }
        float _2385 = isnan(_2178) ? _1913 : (isnan(_1913) ? _2178 : min(_1913, _2178));
        float _2386 = isnan(_2383) ? _2385 : (isnan(_2385) ? _2383 : min(_2385, _2383));
        float _2390 = (_2386 * _1769) + _1758;
        float _2391 = (_2386 * _1772) + _1762;
        float _2392 = (_2386 * _1775) + _1766;
        float _2393 = _2386 * 9.9999997473787516355514526367188e-05;
        float _2394 = (-1.0) - _2393;
        float _2396 = _2393 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2392 > _2396) || ((_2392 < _2394) || ((_2391 > _2396) || ((_2391 < _2394) || ((_2390 < _2394) || (_2390 > _2396))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2591 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2392, cbModelParam._m0[17u].z, fma(_2391, cbModelParam._m0[17u].y, _2390 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2392, cbModelParam._m0[18u].z, fma(_2391, cbModelParam._m0[18u].y, _2390 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2392, cbModelParam._m0[19u].z, fma(_2391, cbModelParam._m0[19u].y, _2390 * cbModelParam._m0[19u].x))), _1703);
            frontier_phi_25_49_ladder = _2591.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2591.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2591.x * cbModelParam._m0[1u].z;
        }
        _1794 = frontier_phi_25_49_ladder_2;
        _1796 = frontier_phi_25_49_ladder_1;
        _1798 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1778 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_773, _774, _775), _1703);
        _1794 = _1778.x * cbModelParam._m0[1u].z;
        _1796 = _1778.y * cbModelParam._m0[1u].z;
        _1798 = _1778.z * cbModelParam._m0[1u].z;
    }
    float _1810 = ((((1.0 - _794) * ((_781 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_794 * _781)) * _765;
    float _1811 = _1810 * ((cbModelParam._m0[1u].w * (_1794 - _1694)) + _1694);
    float _1812 = _1810 * ((cbModelParam._m0[1u].w * (_1796 - _1696)) + _1696);
    float _1813 = _1810 * ((cbModelParam._m0[1u].w * (_1798 - _1698)) + _1698);
    float _1816 = fma(_1813, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1811 * cbSceneParam._m0[89u].x));
    float _1819 = fma(_1813, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1811 * cbSceneParam._m0[90u].x));
    float _1822 = fma(_1813, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, _1811 * cbSceneParam._m0[91u].x));
    uvec4 _1832 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1834 = _1832.x * 14u;
    uint _1835 = _1834 + 13u;
    float _1842 = _765 + (-1.0);
    float _1847 = (cbLight._m0[_1835].x * _1842) + 1.0;
    float _1848 = (cbLight._m0[_1835].y * _1842) + 1.0;
    float _1849 = (cbLight._m0[_1835].z * _1842) + 1.0;
    float _1850 = (cbLight._m0[_1835].w * _1842) + 1.0;
    uint _1851 = _1834 + 5u;
    float _1857 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1861 = _1834 + 4u;
    float _1867 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
    uint _1871 = _1834 | 1u;
    float _1882 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_602, _603, _604));
    float _1885 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_602, _603, _604));
    float _4060 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _4071 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1890 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.3183098733425140380859375;
    float _1892 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * 0.3183098733425140380859375;
    float _1899 = ((cbLight._m0[_1851].x * _1857) * _1892) + ((cbLight._m0[_1861].x * _1867) * _1890);
    float _1900 = ((_1857 * cbLight._m0[_1851].y) * _1892) + ((_1867 * cbLight._m0[_1861].y) * _1890);
    float _1901 = ((_1857 * cbLight._m0[_1851].z) * _1892) + ((_1867 * cbLight._m0[_1861].z) * _1890);
    uvec4 _1905 = floatBitsToUint(cbLight._m0[_1834 + 12u]);
    bool _1907 = _1905.x == 0u;
    float _1918;
    float _1920;
    float _1922;
    if (_1907)
    {
        _1918 = _1899;
        _1920 = _1900;
        _1922 = _1901;
    }
    else
    {
        uint _1926 = _1834 + 6u;
        float _1942 = (dot(vec3(cbLight._m0[_1834 + 2u].xyz), vec3(_602, _603, _604)) * 0.5) + 0.5;
        float _1943 = _1942 * _1942;
        float _4082 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1945 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _1918 = (((cbLight._m0[_1926].x * 0.3183098733425140380859375) * _1944) * _1945) + _1899;
        _1920 = (((cbLight._m0[_1926].y * 0.3183098733425140380859375) * _1944) * _1945) + _1900;
        _1922 = (((cbLight._m0[_1926].z * 0.3183098733425140380859375) * _1944) * _1945) + _1901;
    }
    bool _1925 = _1905.y == 0u;
    float _1963;
    float _1965;
    float _1967;
    if (_1925)
    {
        _1963 = _1918;
        _1965 = _1920;
        _1967 = _1922;
    }
    else
    {
        uint _2122 = _1834 + 7u;
        float _2138 = (dot(vec3(cbLight._m0[_1834 + 3u].xyz), vec3(_602, _603, _604)) * 0.5) + 0.5;
        float _2139 = _2138 * _2138;
        float _4098 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2140 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2141 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _1963 = (((cbLight._m0[_2122].x * 0.3183098733425140380859375) * _2140) * _2141) + _1918;
        _1965 = (((cbLight._m0[_2122].y * 0.3183098733425140380859375) * _2140) * _2141) + _1920;
        _1967 = (((cbLight._m0[_2122].z * 0.3183098733425140380859375) * _2140) * _2141) + _1922;
    }
    uint _1970 = _1834 + 8u;
    float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _605) * 0.949999988079071044921875);
    float _1984 = _1983 * _1983;
    float _1985 = cbLight._m0[_1834].x + _682;
    float _1986 = cbLight._m0[_1834].y + _683;
    float _1987 = cbLight._m0[_1834].z + _684;
    float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
    float _1992 = _1991 * _1985;
    float _1993 = _1991 * _1986;
    float _1994 = _1991 * _1987;
    float _1995 = dot(vec3(_602, _603, _604), vec3(cbLight._m0[_1834].xyz));
    float _4114 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _1999 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _2000 = dot(vec3(_602, _603, _604), vec3(_1992, _1993, _1994));
    float _4136 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _2004 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_1992, _1993, _1994));
    float _4147 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2008 = _1984 * _1984;
    float _2012 = ((_2003 * _2003) * (_2008 + (-1.0))) + 1.0;
    float _2023 = (exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2024 = 1.0 - _1984;
    float _2035 = (0.5 / (((_1999 * ((_1998 * _2024) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2024) + _1984) * _1998))) * _1998;
    float _4158 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2037 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2008 / ((_2012 * _2012) * 3.141590118408203125));
    uint _2048 = _1834 + 9u;
    float _2059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1871].w)) * _605) * 0.949999988079071044921875);
    float _2060 = _2059 * _2059;
    float _2061 = cbLight._m0[_1871].x + _682;
    float _2062 = cbLight._m0[_1871].y + _683;
    float _2063 = cbLight._m0[_1871].z + _684;
    float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
    float _2068 = _2067 * _2061;
    float _2069 = _2067 * _2062;
    float _2070 = _2067 * _2063;
    float _2071 = dot(vec3(_602, _603, _604), vec3(cbLight._m0[_1871].xyz));
    float _4169 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2075 = dot(vec3(_602, _603, _604), vec3(_2068, _2069, _2070));
    float _4180 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2078 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2079 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_2068, _2069, _2070));
    float _4191 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2083 = _2060 * _2060;
    float _2087 = ((_2078 * _2078) * (_2083 + (-1.0))) + 1.0;
    float _2096 = (exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2097 = 1.0 - _2060;
    float _2107 = (0.5 / (((_1999 * ((_2074 * _2097) + _2060)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2097) + _2060) * _2074))) * _2074;
    float _4202 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2109 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2083 / ((_2087 * _2087) * 3.141590118408203125));
    float _2119 = (((_2096 * cbLight._m0[_2048].x) * _2109) * _1857) + (((_2023 * cbLight._m0[_1970].x) * _2037) * _1867);
    float _2120 = (((_2096 * cbLight._m0[_2048].y) * _2109) * _1857) + (((_2023 * cbLight._m0[_1970].y) * _2037) * _1867);
    float _2121 = (((_2096 * cbLight._m0[_2048].z) * _2109) * _1857) + (((_2023 * cbLight._m0[_1970].z) * _2037) * _1867);
    float _2183;
    float _2185;
    float _2187;
    if (_1907)
    {
        _2183 = _2119;
        _2185 = _2120;
        _2187 = _2121;
    }
    else
    {
        uint _2189 = _1834 + 2u;
        uint _2193 = _1834 + 10u;
        float _2207 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _605) * 0.949999988079071044921875);
        float _2208 = _2207 * _2207;
        float _2209 = cbLight._m0[_2189].x + _682;
        float _2210 = cbLight._m0[_2189].y + _683;
        float _2211 = cbLight._m0[_2189].z + _684;
        float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
        float _2216 = _2215 * _2209;
        float _2217 = _2215 * _2210;
        float _2218 = _2215 * _2211;
        float _2219 = dot(vec3(_602, _603, _604), vec3(cbLight._m0[_2189].xyz));
        float _4213 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2223 = dot(vec3(_602, _603, _604), vec3(_2216, _2217, _2218));
        float _4224 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2226 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2227 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2216, _2217, _2218));
        float _4235 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2231 = _2208 * _2208;
        float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
        float _2244 = (exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2245 = 1.0 - _2208;
        float _2255 = (0.5 / (((_1999 * ((_2222 * _2245) + _2208)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2245) + _2208) * _2222))) * _2222;
        float _4246 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2257 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
        float _2258 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
        _2183 = (((_2244 * cbLight._m0[_2193].x) * _2257) * _2258) + _2119;
        _2185 = (((_2244 * cbLight._m0[_2193].y) * _2257) * _2258) + _2120;
        _2187 = (((_2244 * cbLight._m0[_2193].z) * _2257) * _2258) + _2121;
    }
    float _2293;
    float _2295;
    float _2297;
    if (_1925)
    {
        _2293 = _2183;
        _2295 = _2185;
        _2297 = _2187;
    }
    else
    {
        uint _2304 = _1834 + 3u;
        uint _2308 = _1834 + 11u;
        float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _605) * 0.949999988079071044921875);
        float _2323 = _2322 * _2322;
        float _2324 = cbLight._m0[_2304].x + _682;
        float _2325 = cbLight._m0[_2304].y + _683;
        float _2326 = cbLight._m0[_2304].z + _684;
        float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
        float _2331 = _2330 * _2324;
        float _2332 = _2330 * _2325;
        float _2333 = _2330 * _2326;
        float _2334 = dot(vec3(_602, _603, _604), vec3(cbLight._m0[_2304].xyz));
        float _4262 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2338 = dot(vec3(_602, _603, _604), vec3(_2331, _2332, _2333));
        float _4273 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2342 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2331, _2332, _2333));
        float _4284 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2346 = _2323 * _2323;
        float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
        float _2359 = (exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2360 = 1.0 - _2323;
        float _2370 = (0.5 / (((_1999 * ((_2337 * _2360) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2360) + _2323) * _2337))) * _2337;
        float _4295 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2372 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
        float _2373 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2293 = (((_2359 * cbLight._m0[_2308].x) * _2372) * _2373) + _2183;
        _2295 = (((_2359 * cbLight._m0[_2308].y) * _2372) * _2373) + _2185;
        _2297 = (((_2359 * cbLight._m0[_2308].z) * _2372) * _2373) + _2187;
    }
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    if (_1832.y == 0u)
    {
        float _2448 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2449 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2448;
        float _2450 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2448;
        float _2451 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2448;
        uvec4 _2463 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2464 = _2463.x;
        uint _2475 = uint((float(_2463.y) * floor(float(uint(cbSceneParam._m0[85u].y * _703) / _2464))) + floor(float(uint(cbSceneParam._m0[85u].x * _702) / _2464)));
        float _2485 = (log2(_2451 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2486 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        uint _2489 = uint(isnan(14.0) ? _2486 : (isnan(_2486) ? 14.0 : min(_2486, 14.0)));
        uvec4 _2494 = texelFetch(g_lightClusterGridBuffer, int(((_2489 << 2u) + (_2475 << 6u)) >> 2u));
        uint _2495 = _2494.x;
        uint _2496 = _2463.z;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        if (((((1u << ((_2496 >> 4u) & 15u)) + 4294967295u) & _2495) == 0u) || ((_2496 & 240u) == 0u))
        {
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
        }
        else
        {
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2605;
            float _2607;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            uint _2755 = 0u;
            uint _2764;
            bool _2765;
            for (;;)
            {
                _2764 = texelFetch(g_lightClassification, int((((_2489 << 5u) + (_2475 << 9u)) + (_2755 << 2u)) >> 2u)).x;
                _2765 = _2764 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2765)
                {
                    frontier_phi_66_pred = _2749;
                    frontier_phi_66_pred_1 = _2754;
                    frontier_phi_66_pred_2 = _2753;
                    frontier_phi_66_pred_3 = _2752;
                    frontier_phi_66_pred_4 = _2751;
                    frontier_phi_66_pred_5 = _2750;
                }
                else
                {
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    uint _2900;
                    _2894 = _2749;
                    _2895 = _2750;
                    _2896 = _2751;
                    _2897 = _2752;
                    _2898 = _2753;
                    _2899 = _2754;
                    _2900 = _2764;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    for (;;)
                    {
                        uint _2904 = uint(findLSB(_2900)) + (_2755 << 5u);
                        uint _2901 = (_2900 + 4294967295u) & _2900;
                        uint _2906 = _2904 * 48u;
                        vec4 _2920 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2906)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 3u)).x));
                        uint _2926 = (_2904 * 48u) + 4u;
                        vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2926)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2926 + 3u)).x));
                        uint _2945 = (_2904 * 48u) + 8u;
                        vec3 _2956 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x));
                        float _2960 = _2920.x - _2449;
                        float _2961 = _2920.y - _2450;
                        float _2962 = _2920.z - _2451;
                        float _2963 = dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962));
                        float _2966 = inversesqrt(_2963);
                        float _2967 = _2966 * _2960;
                        float _2968 = _2966 * _2961;
                        float _2969 = _2966 * _2962;
                        float _2970 = dot(vec3(_721, _724, _727), vec3(_2967, _2968, _2969));
                        float _2975 = 1.0 - (_2963 * _2920.w);
                        float _4321 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2976 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _2977 = sqrt(_2963) * _2939.w;
                        float _2980 = 1.39999997615814208984375 / (_2977 + 1.39999997615814208984375);
                        float _2981 = _2980 * _2980;
                        float _2984 = ((1.0 - _2981) * _2970) + _2981;
                        float _2987 = _2977 * _2977;
                        float _2991 = ((isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0))) * _2976) / ((_2987 * 0.699999988079071044921875) + 1.0);
                        float _2995 = (-0.0) - _2449;
                        float _2996 = (-0.0) - _2450;
                        float _2997 = (-0.0) - _2451;
                        float _3001 = inversesqrt(dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997)));
                        float _3002 = _3001 * _2995;
                        float _3003 = _3001 * _2996;
                        float _3004 = _3001 * _2997;
                        float _3012 = exp2(log2(1.0 / ((_2987 * 3.5) + 5.0)) * 0.25);
                        float _3013 = 1.0 - _781;
                        float _3020 = sqrt(1.0 - ((1.0 - (_3013 * _3013)) * (1.0 - (_3012 * _3012))));
                        float _3021 = _3020 * _3020;
                        float _3022 = _3021 * _3021;
                        float _3023 = _3002 + _2967;
                        float _3024 = _3003 + _2968;
                        float _3025 = _3004 + _2969;
                        float _3029 = inversesqrt(dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025)));
                        float _3033 = dot(vec3(_721, _724, _727), vec3(_3002, _3003, _3004));
                        float _4337 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3036 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3037 = dot(vec3(_721, _724, _727), vec3(_3029 * _3023, _3029 * _3024, _3029 * _3025));
                        float _4348 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3040 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3044 = ((_3040 * _3040) * (_3022 + (-1.0))) + 1.0;
                        float _3045 = _2980 * _3021;
                        float _3046 = _3045 * _3045;
                        float _3049 = ((1.0 - _3046) * _2970) + _3046;
                        float _4359 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3050 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _3051 = 1.0 - _3021;
                        float _3061 = (0.5 / (((_3050 * ((_3036 * _3051) + _3021)) + 9.9999999392252902907785028219223e-09) + (((_3050 * _3051) + _3021) * _3036))) * _3050;
                        float _4370 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3072 = (((_3022 * 3.1415927410125732421875) * (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) / ((_3044 * _3044) * ((_2987 * 2.1991131305694580078125) + 3.141590118408203125))) * _2976;
                        _2824 = (_2991 * _2939.x) + _2897;
                        _2825 = (_2991 * _2939.y) + _2898;
                        _2826 = (_2991 * _2939.z) + _2899;
                        _2821 = (_3072 * _2956.x) + _2894;
                        _2822 = (_3072 * _2956.y) + _2895;
                        _2823 = (_3072 * _2956.z) + _2896;
                        if (_2901 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2894 = _2821;
                            _2895 = _2822;
                            _2896 = _2823;
                            _2897 = _2824;
                            _2898 = _2825;
                            _2899 = _2826;
                            _2900 = _2901;
                        }
                    }
                    frontier_phi_66_pred = _2821;
                    frontier_phi_66_pred_1 = _2826;
                    frontier_phi_66_pred_2 = _2825;
                    frontier_phi_66_pred_3 = _2824;
                    frontier_phi_66_pred_4 = _2823;
                    frontier_phi_66_pred_5 = _2822;
                }
                _2597 = frontier_phi_66_pred;
                _2607 = frontier_phi_66_pred_1;
                _2605 = frontier_phi_66_pred_2;
                _2603 = frontier_phi_66_pred_3;
                _2601 = frontier_phi_66_pred_4;
                _2599 = frontier_phi_66_pred_5;
                uint _2756 = _2755 + 1u;
                if (_2756 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2749 = _2597;
                    _2750 = _2599;
                    _2751 = _2601;
                    _2752 = _2603;
                    _2753 = _2605;
                    _2754 = _2607;
                    _2755 = _2756;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
        }
        uvec4 _2610 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2611 = _2610.z;
        uint _2613 = (_2611 >> 8u) & 15u;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        if (((4294967295u << _2613) & _2495) == 0u)
        {
            _2717 = _2596;
            _2719 = _2598;
            _2721 = _2600;
            _2723 = _2602;
            _2725 = _2604;
            _2727 = _2606;
        }
        else
        {
            float _2742 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
            float _2743 = _2742 * _2449;
            float _2744 = _2742 * _2450;
            float _2745 = _2742 * _2451;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2613 < ((_2611 >> 12u) & 15u))
            {
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2877 = _2596;
                float _2878 = _2598;
                float _2879 = _2600;
                float _2880 = _2602;
                float _2881 = _2604;
                float _2882 = _2606;
                uint _2883 = _2613;
                uint _2892;
                bool _2893;
                for (;;)
                {
                    _2892 = texelFetch(g_lightClassification, int((((_2489 << 5u) + (_2475 << 9u)) + (_2883 << 2u)) >> 2u)).x;
                    _2893 = _2892 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2893)
                    {
                        frontier_phi_77_pred = _2882;
                        frontier_phi_77_pred_1 = _2881;
                        frontier_phi_77_pred_2 = _2880;
                        frontier_phi_77_pred_3 = _2879;
                        frontier_phi_77_pred_4 = _2878;
                        frontier_phi_77_pred_5 = _2877;
                    }
                    else
                    {
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3099 = _2877;
                        float _3100 = _2878;
                        float _3101 = _2879;
                        float _3102 = _2880;
                        float _3103 = _2881;
                        float _3104 = _2882;
                        uint _3105 = _2892;
                        uint _3106;
                        vec4 _3131;
                        float _3132;
                        vec4 _3147;
                        vec3 _3159;
                        vec4 _3174;
                        vec4 _3189;
                        float _3235;
                        bool _3236;
                        for (;;)
                        {
                            uint _3116 = ((_2883 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3105));
                            _3106 = (_3105 + 4294967295u) & _3105;
                            uint _3118 = _3116 * 40u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            _3132 = _3131.w;
                            uint _3134 = (_3116 * 40u) + 4u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3149 = (_3116 * 40u) + 8u;
                            _3159 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x));
                            uint _3161 = (_3116 * 40u) + 16u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3176 = (_3116 * 40u) + 20u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3191 = (_3116 * 40u) + 24u;
                            vec4 _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3210 = (_3116 * 40u) + 28u;
                            vec4 _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            _3235 = fma(_2451, _3223.z, fma(_2450, _3223.y, _3223.x * _2449)) + _3223.w;
                            _3236 = !((fma(_2451, _3204.z, fma(_2450, _3204.y, _3204.x * _2449)) + _3204.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3236)
                            {
                                float _3263 = _3131.x - _2449;
                                float _3264 = _3131.y - _2450;
                                float _3265 = _3131.z - _2451;
                                float _3266 = dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265));
                                float _3269 = inversesqrt(_3266);
                                float _3270 = _3269 * _3263;
                                float _3271 = _3269 * _3264;
                                float _3272 = _3269 * _3265;
                                float _3276 = 1.0 - (_3266 / (_3132 * _3132));
                                float _4381 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3277 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3281 = sqrt(_3266) * _3147.w;
                                float _3283 = 1.39999997615814208984375 / (_3281 + 1.39999997615814208984375);
                                float _3284 = _3283 * _3283;
                                float _3287 = ((1.0 - _3284) * dot(vec3(_3270, _3271, _3272), vec3(_721, _724, _727))) + _3284;
                                float _3290 = _3281 * _3281;
                                float _3294 = (fma(_2451, _3174.z, fma(_2450, _3174.y, _3174.x * _2449)) + _3174.w) / _3235;
                                float _3295 = (fma(_2451, _3189.z, fma(_2450, _3189.y, _3189.x * _2449)) + _3189.w) / _3235;
                                float _3299 = 1.0 - dot(vec2(_3294, _3295), vec2(_3294, _3295));
                                float _4397 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3301 = _3300 * (((isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0))) * _3277) / ((_3290 * 0.699999988079071044921875) + 1.0));
                                float _3313 = exp2(log2(1.0 / ((_3290 * 3.5) + 5.0)) * 0.25);
                                float _3314 = 1.0 - _781;
                                float _3321 = sqrt(1.0 - ((1.0 - (_3314 * _3314)) * (1.0 - (_3313 * _3313))));
                                float _3322 = _3321 * _3321;
                                float _3323 = _3322 * _3322;
                                float _3324 = _3270 - _2743;
                                float _3325 = _3271 - _2744;
                                float _3326 = _3272 - _2745;
                                float _3330 = inversesqrt(dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326)));
                                float _3334 = dot(vec3(_721, _724, _727), vec3((-0.0) - _2743, (-0.0) - _2744, (-0.0) - _2745));
                                float _4408 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3337 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3338 = dot(vec3(_721, _724, _727), vec3(_3330 * _3324, _3330 * _3325, _3330 * _3326));
                                float _4419 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3341 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3345 = ((_3341 * _3341) * (_3323 + (-1.0))) + 1.0;
                                float _3346 = _3283 * _3322;
                                float _3347 = _3346 * _3346;
                                float _3353 = ((1.0 - _3347) * dot(vec3(_721, _724, _727), vec3(_3270, _3271, _3272))) + _3347;
                                float _4430 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3354 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3355 = 1.0 - _3322;
                                float _3365 = (0.5 / (((_3354 * ((_3337 * _3355) + _3322)) + 9.9999999392252902907785028219223e-09) + (((_3354 * _3355) + _3322) * _3337))) * _3354;
                                float _4441 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3375 = (_3300 * _3277) * (((_3323 * 3.1415927410125732421875) * (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) / ((_3345 * _3345) * ((_3290 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3301 * _3147.y;
                                frontier_phi_83_pred_1 = _3301 * _3147.x;
                                frontier_phi_83_pred_2 = _3375 * _3159.z;
                                frontier_phi_83_pred_3 = _3375 * _3159.y;
                                frontier_phi_83_pred_4 = _3375 * _3159.x;
                                frontier_phi_83_pred_5 = _3301 * _3147.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3383 = frontier_phi_83_pred;
                            _3382 = frontier_phi_83_pred_1;
                            _3381 = frontier_phi_83_pred_2;
                            _3380 = frontier_phi_83_pred_3;
                            _3379 = frontier_phi_83_pred_4;
                            _3384 = frontier_phi_83_pred_5;
                            _3089 = _3382 + _3102;
                            _3090 = _3383 + _3103;
                            _3091 = _3384 + _3104;
                            _3086 = _3379 + _3099;
                            _3087 = _3380 + _3100;
                            _3088 = _3381 + _3101;
                            if (_3106 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3106;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3091;
                        frontier_phi_77_pred_1 = _3090;
                        frontier_phi_77_pred_2 = _3089;
                        frontier_phi_77_pred_3 = _3088;
                        frontier_phi_77_pred_4 = _3087;
                        frontier_phi_77_pred_5 = _3086;
                    }
                    _2728 = frontier_phi_77_pred;
                    _2726 = frontier_phi_77_pred_1;
                    _2724 = frontier_phi_77_pred_2;
                    _2722 = frontier_phi_77_pred_3;
                    _2720 = frontier_phi_77_pred_4;
                    _2718 = frontier_phi_77_pred_5;
                    uint _2884 = _2883 + 1u;
                    if (_2884 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2877 = _2718;
                        _2878 = _2720;
                        _2879 = _2722;
                        _2880 = _2724;
                        _2881 = _2726;
                        _2882 = _2728;
                        _2883 = _2884;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2722;
                frontier_phi_58_59_ladder_1 = _2728;
                frontier_phi_58_59_ladder_2 = _2726;
                frontier_phi_58_59_ladder_3 = _2724;
                frontier_phi_58_59_ladder_4 = _2720;
                frontier_phi_58_59_ladder_5 = _2718;
            }
            else
            {
                frontier_phi_58_59_ladder = _2600;
                frontier_phi_58_59_ladder_1 = _2606;
                frontier_phi_58_59_ladder_2 = _2604;
                frontier_phi_58_59_ladder_3 = _2602;
                frontier_phi_58_59_ladder_4 = _2598;
                frontier_phi_58_59_ladder_5 = _2596;
            }
            _2717 = frontier_phi_58_59_ladder_5;
            _2719 = frontier_phi_58_59_ladder_4;
            _2721 = frontier_phi_58_59_ladder;
            _2723 = frontier_phi_58_59_ladder_3;
            _2725 = frontier_phi_58_59_ladder_2;
            _2727 = frontier_phi_58_59_ladder_1;
        }
        float _2732 = isnan(1.0) ? _765 : (isnan(_765) ? 1.0 : min(_765, 1.0));
        _2508 = (_2732 * _2723) + _1963;
        _2510 = (_2732 * _2725) + _1965;
        _2512 = (_2732 * _2727) + _1967;
        _2514 = ((_2717 * 0.039999999105930328369140625) * _2732) + _2293;
        _2516 = ((_2719 * 0.039999999105930328369140625) * _2732) + _2295;
        _2518 = ((_2721 * 0.039999999105930328369140625) * _2732) + _2297;
    }
    else
    {
        _2508 = _1963;
        _2510 = _1965;
        _2512 = _1967;
        _2514 = _2293;
        _2516 = _2295;
        _2518 = _2297;
    }
    float _4457 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _4468 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4479 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _2535 = ((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2508 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _765))) + ((_2514 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1601)) * cbPerFrame._m0[3u].x);
    float _2536 = ((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2510 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _765))) + ((_2516 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1601)) * cbPerFrame._m0[3u].x);
    float _2537 = ((isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2512 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _765))) + ((_2518 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1601)) * cbPerFrame._m0[3u].x);
    uint _2538 = _238 + 6u;
    float _2546 = _702 / cbSceneParam._m0[86u].x;
    float _2547 = _703 / cbSceneParam._m0[86u].y;
    vec4 _2561 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2546, _2547, (log2((isnan(cbSceneParam._m0[77u].w) ? _623 : (isnan(_623) ? cbSceneParam._m0[77u].w : min(_623, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2563 = _2561.x;
    float _2564 = _2561.y;
    float _2565 = _2561.z;
    float _2566 = _2561.w;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    if (_623 > cbSceneParam._m0[78u].w)
    {
        float _2621 = isnan(_623) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _623 : min(cbSceneParam._m0[80u].w, _623));
        float _2622 = _2621 / _623;
        float _2633 = _2622 * _675;
        float _2634 = _676 * _2622;
        float _2635 = (-0.0) - _2634;
        float _2637 = _2622 * _677;
        float _2639 = (cbSceneParam._m0[77u].w * _2635) / _2621;
        float _2640 = _2639 + cbSceneParam._m0[79u].w;
        float _2641 = cbSceneParam._m0[79u].w - _2634;
        float _2647 = sqrt(((_2633 * _2633) + (_2634 * _2634)) + (_2637 * _2637));
        float _2650 = (1.0 - (cbSceneParam._m0[77u].w / _2621)) * _2647;
        float _2655 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2657 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2834;
        if (abs((_2635 - _2639) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2834 = ((((_2640 > 0.0) ? exp2(_2655 * _2640) : (2.0 - exp2(_2657 * _2640))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2650;
        }
        else
        {
            float _2778 = 1.0 / cbSceneParam._m0[80u].x;
            float _2779 = isnan(_2641) ? _2640 : (isnan(_2640) ? _2641 : max(_2640, _2641));
            float _2780 = isnan(_2641) ? _2640 : (isnan(_2640) ? _2641 : min(_2640, _2641));
            float _2789 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : min(_2779, 0.0));
            float _2790 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : min(_2780, 0.0));
            _2834 = ((abs(_2647 / _2635) * cbSceneParam._m0[80u].y) * ((((_2789 - _2790) * 2.0) - ((exp2(_2655 * (isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0)))) - exp2(_2655 * (isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0))))) * _2778)) - ((exp2(_2657 * _2789) - exp2(_2657 * _2790)) * _2778))) + (_2650 * cbSceneParam._m0[80u].z);
        }
        vec4 _2836 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2546, _2547, 1.0), 0.0);
        float _2845 = exp2((_2834 * (-1.44269502162933349609375)) * (1.0 - _2836.w));
        float _2846 = log2(_2845);
        float _2862 = log2(_2566);
        _2659 = (exp2(_2862 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].x)) * _2836.x) / cbSceneParam._m0[78u].x)) + _2563;
        _2661 = (exp2(_2862 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].y)) * _2836.y) / cbSceneParam._m0[78u].y)) + _2564;
        _2663 = (exp2(_2862 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2846 * cbSceneParam._m0[78u].z)) * _2836.z) / cbSceneParam._m0[78u].z)) + _2565;
        _2665 = _2845 * _2566;
    }
    else
    {
        _2659 = _2563;
        _2661 = _2564;
        _2663 = _2565;
        _2665 = _2566;
    }
    bool _2872;
    vec4 _2675;
    vec4 _2697;
    float _2699;
    float _2703;
    float _2704;
    float _2705;
    float _2706;
    bool _2716;
    for (;;)
    {
        _2675 = cbMatDynParam._m0[0u];
        float _2677 = roundEven(_2675.y);
        bool _2678 = _2677 == 3.0;
        float _2679 = log2(_2665);
        float _2686 = exp2(_2679 * cbSceneParam._m0[78u].x) * _2535;
        float _2687 = exp2(_2679 * cbSceneParam._m0[78u].y) * _2536;
        float _2688 = exp2(_2679 * cbSceneParam._m0[78u].z) * _2537;
        float _2695 = _691 + (-0.5);
        _2697 = cbMtdParam._m0[1u];
        _2699 = _2697.y * _2695;
        float _2702 = (_2677 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2703 = _2702 * (_2678 ? _2686 : (_2686 + (cbSceneParam._m0[72u].w * _2659)));
        _2704 = _2702 * (_2678 ? _2687 : (_2687 + (cbSceneParam._m0[72u].w * _2661)));
        _2705 = _2702 * (_2678 ? _2688 : (_2688 + (cbSceneParam._m0[72u].w * _2663)));
        _2706 = _2695 * 0.999000012874603271484375;
        _2716 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2716)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2706) < 0.5)
            {
                _2872 = true;
                break;
            }
        }
        uint _2813 = _740 + uint(_2675.w);
        if ((cbInstanceData._m0[_2813].w < 1.0) && ((cbInstanceData._m0[_2813].w + _2706) < 0.5))
        {
            _2872 = true;
            break;
        }
        if ((_2699 + 1.0) < _2697.x)
        {
            _2872 = true;
            break;
        }
        _2872 = false;
        break;
    }
    float _3077;
    if (_2872)
    {
        discard_state = true;
        _3077 = 0.0;
    }
    else
    {
        _3077 = cbInstanceData._m0[_2538].w;
    }
    SV_Target.x = _2703;
    SV_Target.y = _2704;
    SV_Target.z = _2705;
    SV_Target.w = _3077;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2538].w;
    discard_exit();
}


