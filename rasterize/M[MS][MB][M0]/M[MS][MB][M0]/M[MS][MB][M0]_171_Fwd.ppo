#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1191;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3498 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3509 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3520 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _322 = _317.x * cbMtdParam._m0[11u].x;
    float _323 = _317.y * cbMtdParam._m0[11u].y;
    float _324 = _317.z * cbMtdParam._m0[11u].z;
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _279) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _280) + cbTextureTilingScale._m0[5u].w));
    vec4 _380 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _382 = _380.x;
    float _392 = dot(vec4(_382, _380.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_382 - _392) * cbMtdParam._m0[24u].x) + _392) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3531 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _417 = (_410 * ((_343.x * cbMtdParam._m0[12u].x) - _322)) + _322;
    float _418 = (_410 * ((_343.y * cbMtdParam._m0[12u].y) - _323)) + _323;
    float _419 = (_410 * ((_343.z * cbMtdParam._m0[12u].z) - _324)) + _324;
    vec4 _436 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _279) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _280) + cbTextureTilingScale._m0[3u].w));
    vec4 _456 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _468 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _482 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_458 - _468) * cbMtdParam._m0[24u].x) + _468) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3542 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _490 = (_483 * ((_436.x * cbMtdParam._m0[13u].x) - _417)) + _417;
    float _491 = (_483 * ((_436.y * cbMtdParam._m0[13u].y) - _418)) + _418;
    float _492 = (_483 * ((_436.z * cbMtdParam._m0[13u].z) - _419)) + _419;
    float _496 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _490;
    float _499 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _491;
    float _502 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _492;
    float _509 = ((_490 - _496) * (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) + _496;
    float _510 = ((_491 - _499) * (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) + _499;
    float _511 = ((_492 - _502) * (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)))) + _502;
    vec4 _523 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _546 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _279) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _280) + cbTextureTilingScale._m0[4u].w));
    vec4 _563 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _565 = _563.x;
    float _566 = _563.y;
    float _567 = _563.z;
    float _574 = ((_546.x - _565) * _410) + _565;
    float _575 = ((_546.y - _566) * _410) + _566;
    float _576 = ((_546.z - _567) * _410) + _567;
    vec4 _588 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _279) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _280) + cbTextureTilingScale._m0[2u].w));
    float _601 = ((_588.z - _576) * _483) + _576;
    float _604 = ((((_588.x - _574) * _483) + _574) * 2.0) + (-1.0);
    float _605 = ((((_588.y - _575) * _483) + _575) * 2.0) + (-1.0);
    float _606 = dot(vec2(_604, _605), vec2(_604, _605));
    float _3553 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _611 = sqrt(1.0 - (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))));
    vec4 _631 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _643 = (_604 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_523.x * 2.0) + (-1.0)))) + (((_631.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _644 = (_605 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_523.y * 2.0) + (-1.0)))) + (((_631.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _649 = (((_523.z - _601) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _601;
    float _653 = ((_631.z - _649) * cbMtdParam._m0[19u].w) + _649;
    float _655 = cbMtdParam._m0[22u].x + _631.w;
    float _658 = fma(_611, _226 * NORMAL.x, fma(_644, _233 * TANGENT.x, (_219 * _211) * _643));
    float _661 = fma(_611, _226 * NORMAL.y, fma(_644, _233 * TANGENT.y, (_219 * _212) * _643));
    float _664 = fma(_611, _226 * NORMAL.z, fma(_644, _233 * TANGENT.z, (_219 * _213) * _643));
    float _668 = inversesqrt(dot(vec3(_658, _661, _664), vec3(_658, _661, _664)));
    float _669 = _668 * _658;
    float _670 = _668 * _661;
    float _671 = _668 * _664;
    float _3564 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _672 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _3575 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _3586 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3597 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _3608 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _690 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _742 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _732);
    float _743 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _732);
    float _744 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _732);
    float _748 = inversesqrt(dot(vec3(_742, _743, _744), vec3(_742, _743, _744)));
    float _749 = _742 * _748;
    float _750 = _743 * _748;
    float _751 = _744 * _748;
    float _757 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _758 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _776 = fma(_671, cbSceneParam._m0[5u].z, fma(_670, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _669));
    float _779 = fma(_671, cbSceneParam._m0[6u].z, fma(_670, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _669));
    float _782 = fma(_671, cbSceneParam._m0[7u].z, fma(_670, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _669));
    uint _796 = (_260 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _802 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_796].x;
    float _803 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * cbInstanceData._m0[_796].y;
    float _804 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * cbInstanceData._m0[_796].z;
    float _3619 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _3641 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    vec4 _816 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _757, cbSceneParam._m0[86u].y * _758));
    float _820 = ((isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * TEXCOORD_5.w) * _816.x;
    float _821 = dot(vec3(_669, _670, _671), vec3(_749, _750, _751));
    float _824 = _821 * 2.0;
    float _828 = (_824 * _669) - _749;
    float _829 = (_824 * _670) - _750;
    float _830 = (_824 * _671) - _751;
    float _834 = abs(dot(vec3(_749, _750, _751), vec3(_669, _670, _671)));
    float _3652 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _836 = sqrt(_672);
    float _849 = exp2((_836 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_836 * 3.0));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1190;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _915 = fma(_889, cbModelParam._m0[26u].z, fma(_885, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881));
        float _919 = fma(_889, cbModelParam._m0[27u].z, fma(_885, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881));
        float _923 = fma(_889, cbModelParam._m0[28u].z, fma(_885, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881));
        float _948 = _881 + _669;
        float _949 = _885 + _670;
        float _950 = _889 + _671;
        float _960 = fma(_950, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _948)) - _915;
        float _961 = fma(_950, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _948)) - _919;
        float _962 = fma(_950, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _948)) - _923;
        float _966 = inversesqrt(dot(vec3(_960, _961, _962), vec3(_960, _961, _962)));
        float _979 = ((_966 * _960) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_915 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _980 = ((_966 * _961) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_919 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_966 * _962) / cbModelParam._m0[34u].z) + ((((((_923 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        float _1018 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_984.x + (-0.5));
        float _1020 = _1018 * (_984.y + (-0.5));
        float _1021 = _1018 * (_984.z + (-0.5));
        float _1028 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_991.x + (-0.5));
        float _1030 = _1028 * (_991.y + (-0.5));
        float _1031 = _1028 * (_991.z + (-0.5));
        float _1038 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_998.x + (-0.5));
        float _1040 = _1038 * (_998.y + (-0.5));
        float _1041 = _1038 * (_998.z + (-0.5));
        float _1048 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1005.x + (-0.5));
        float _1050 = _1048 * (_1005.y + (-0.5));
        float _1051 = _1048 * (_1005.z + (-0.5));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = _1019 * 0.5;
        float _1056 = _1029 * 0.5;
        float _1057 = _1039 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1072 = (dot(vec3(_669, _670, _671), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3678 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1082 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3689 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3700 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * (_1084 + 1.0))) + _1089) * _1052;
        float _1099 = _1020 * 0.5;
        float _1100 = _1030 * 0.5;
        float _1101 = _1040 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_669, _670, _671), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3711 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3722 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3733 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1126 + 1.0))) + _1131) * _1053;
        float _1141 = _1021 * 0.5;
        float _1142 = _1031 * 0.5;
        float _1143 = _1041 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_669, _670, _671), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3766 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1168 + 1.0))) + _1173) * _1054;
        _1190 = _1021;
        _1192 = _1020;
        _1193 = _1019;
        _1194 = _1031;
        _1195 = _1030;
        _1196 = _1029;
        _1197 = _1041;
        _1198 = _1040;
        _1199 = _1039;
        _1200 = _1054;
        _1201 = _1053;
        _1202 = _1052;
        _1203 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1204 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
    }
    else
    {
        _1190 = _1191;
        _1192 = _1191;
        _1193 = _1191;
        _1194 = _1191;
        _1195 = _1191;
        _1196 = _1191;
        _1197 = _1191;
        _1198 = _1191;
        _1199 = _1191;
        _1200 = _1191;
        _1201 = _1191;
        _1202 = _1191;
        _1203 = 0.0;
        _1204 = 0.0;
        _1205 = 0.0;
    }
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1229 = fma(_889, cbModelParam._m0[30u].z, fma(_885, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _881));
        float _1233 = fma(_889, cbModelParam._m0[31u].z, fma(_885, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _881));
        float _1237 = fma(_889, cbModelParam._m0[32u].z, fma(_885, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _881));
        float _1260 = _881 + _669;
        float _1261 = _885 + _670;
        float _1262 = _889 + _671;
        float _1272 = fma(_1262, cbModelParam._m0[30u].z, fma(_1261, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1260)) - _1229;
        float _1273 = fma(_1262, cbModelParam._m0[31u].z, fma(_1261, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1260)) - _1233;
        float _1274 = fma(_1262, cbModelParam._m0[32u].z, fma(_1261, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1260)) - _1237;
        float _1278 = inversesqrt(dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274)));
        float _1291 = ((_1278 * _1272) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1229 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1278 * _1273) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1233 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1278 * _1274) / cbModelParam._m0[35u].z) + ((((((_1237 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        float _1328 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1295.x + (-0.5));
        float _1330 = _1328 * (_1295.y + (-0.5));
        float _1331 = _1328 * (_1295.z + (-0.5));
        float _1338 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1302.x + (-0.5));
        float _1340 = _1338 * (_1302.y + (-0.5));
        float _1341 = _1338 * (_1302.z + (-0.5));
        float _1348 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1309.x + (-0.5));
        float _1350 = _1348 * (_1309.y + (-0.5));
        float _1351 = _1348 * (_1309.z + (-0.5));
        float _1358 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1316.x + (-0.5));
        float _1360 = _1358 * (_1316.y + (-0.5));
        float _1361 = _1358 * (_1316.z + (-0.5));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = _1329 * 0.5;
        float _1366 = _1339 * 0.5;
        float _1367 = _1349 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_669, _670, _671), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _3807 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _3818 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _3829 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * (_1392 + 1.0))) + _1397) * _1362;
        float _1407 = _1330 * 0.5;
        float _1408 = _1340 * 0.5;
        float _1409 = _1350 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_669, _670, _671), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _3862 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1434 + 1.0))) + _1439) * _1363;
        float _1449 = _1331 * 0.5;
        float _1450 = _1341 * 0.5;
        float _1451 = _1351 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_669, _670, _671), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _3895 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1476 + 1.0))) + _1481) * _1364;
        _1498 = _1331;
        _1499 = _1330;
        _1500 = _1329;
        _1501 = _1341;
        _1502 = _1340;
        _1503 = _1339;
        _1504 = _1351;
        _1505 = _1350;
        _1506 = _1349;
        _1507 = _1364;
        _1508 = _1363;
        _1509 = _1362;
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1511 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1512 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
    }
    else
    {
        _1498 = _1191;
        _1499 = _1191;
        _1500 = _1191;
        _1501 = _1191;
        _1502 = _1191;
        _1503 = _1191;
        _1504 = _1191;
        _1505 = _1191;
        _1506 = _1191;
        _1507 = _1191;
        _1508 = _1191;
        _1509 = _1191;
        _1510 = 0.0;
        _1511 = 0.0;
        _1512 = 0.0;
    }
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1203)) + _1203;
    float _1523 = (cbModelParam._m0[1u].x * (_1511 - _1204)) + _1204;
    float _1524 = (cbModelParam._m0[1u].x * (_1512 - _1205)) + _1205;
    float _1545 = fma(_1524, cbSceneParam._m0[89u].z, fma(_1523, cbSceneParam._m0[89u].y, _1522 * cbSceneParam._m0[89u].x));
    float _1548 = fma(_1524, cbSceneParam._m0[90u].z, fma(_1523, cbSceneParam._m0[90u].y, _1522 * cbSceneParam._m0[90u].x));
    float _1551 = fma(_1524, cbSceneParam._m0[91u].z, fma(_1523, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1522));
    float _1566 = _828 * 0.5;
    float _1567 = _829 * 0.5;
    float _1568 = _830 * 0.5;
    float _1569 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1500, _1503, _1506, _1509));
    float _1572 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1499, _1502, _1505, _1508));
    float _1575 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1609;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1582 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1190, _1194, _1197, _1200));
        float _1586 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1192, _1195, _1198, _1201));
        float _1590 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1193, _1196, _1199, _1202));
        float _1597 = dot(vec4(cbModelParam._m0[39u]), vec4(_1566, _1567, _1568, 1.0));
        _1609 = dot(vec3(isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1597) ? 0.0 : (isnan(0.0) ? _1597 : max(0.0, _1597))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1609 = 1.0;
    }
    float _1620;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1611 = dot(vec4(cbModelParam._m0[40u]), vec4(_1566, _1567, _1568, 1.0));
        _1620 = dot(vec3(isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1611) ? 0.0 : (isnan(0.0) ? _1611 : max(0.0, _1611))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1620 = 1.0;
    }
    float _1624 = (_1620 * cbModelParam._m0[1u].x) + (_1609 * (1.0 - cbModelParam._m0[1u].x));
    float _1634 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _672);
    float _1635 = isnan(_1634) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1634 : min(cbModelParam._m0[25u].z, _1634));
    float _1717;
    float _1719;
    float _1721;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1684 = fma(_889, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881)) + cbModelParam._m0[13u].w;
        float _1688 = fma(_889, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881)) + cbModelParam._m0[14u].w;
        float _1692 = fma(_889, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881)) + cbModelParam._m0[15u].w;
        float _1695 = fma(_830, cbModelParam._m0[13u].z, fma(_829, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _828));
        float _1698 = fma(_830, cbModelParam._m0[14u].z, fma(_829, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _828));
        float _1701 = fma(_830, cbModelParam._m0[15u].z, fma(_829, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _828));
        float _1729;
        if (_1695 > 0.0)
        {
            _1729 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1729 = frontier_phi_14_12_ladder;
        }
        float _1931;
        if (_1698 > 0.0)
        {
            _1931 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1931 = frontier_phi_23_19_ladder;
        }
        float _2174;
        if (_1701 > 0.0)
        {
            _2174 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2174 = frontier_phi_35_30_ladder;
        }
        float _2176 = isnan(_1931) ? _1729 : (isnan(_1729) ? _1931 : min(_1729, _1931));
        float _2177 = isnan(_2174) ? _2176 : (isnan(_2176) ? _2174 : min(_2176, _2174));
        float _2181 = (_2177 * _1695) + _1684;
        float _2182 = (_2177 * _1698) + _1688;
        float _2183 = (_2177 * _1701) + _1692;
        float _2184 = _2177 * 9.9999997473787516355514526367188e-05;
        float _2186 = (-1.0) - _2184;
        float _2188 = _2184 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2183 > _2188) || ((_2183 < _2186) || ((_2182 > _2188) || ((_2182 < _2186) || ((_2181 < _2186) || (_2181 > _2188))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2307 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2183, cbModelParam._m0[9u].z, fma(_2182, cbModelParam._m0[9u].y, _2181 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2183, cbModelParam._m0[10u].z, fma(_2182, cbModelParam._m0[10u].y, _2181 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2183, cbModelParam._m0[11u].z, fma(_2182, cbModelParam._m0[11u].y, _2181 * cbModelParam._m0[11u].x))), _1635);
            frontier_phi_13_35_ladder = _2307.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2307.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2307.x * cbModelParam._m0[1u].y;
        }
        _1717 = frontier_phi_13_35_ladder_2;
        _1719 = frontier_phi_13_35_ladder_1;
        _1721 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1705 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_828, _829, _830), _1635);
        _1717 = _1705.x * cbModelParam._m0[1u].y;
        _1719 = _1705.y * cbModelParam._m0[1u].y;
        _1721 = _1705.z * cbModelParam._m0[1u].y;
    }
    float _1725 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _672);
    float _1726 = isnan(_1725) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1725 : min(cbModelParam._m0[25u].w, _1725));
    float _1817;
    float _1819;
    float _1821;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1781 = fma(_889, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881)) + cbModelParam._m0[21u].w;
        float _1785 = fma(_889, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881)) + cbModelParam._m0[22u].w;
        float _1789 = fma(_889, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881)) + cbModelParam._m0[23u].w;
        float _1792 = fma(_830, cbModelParam._m0[21u].z, fma(_829, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _828));
        float _1795 = fma(_830, cbModelParam._m0[22u].z, fma(_829, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _828));
        float _1798 = fma(_830, cbModelParam._m0[23u].z, fma(_829, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _828));
        float _1936;
        if (_1792 > 0.0)
        {
            _1936 = abs((1.0 - _1781) / _1792);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1781 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1936 = frontier_phi_25_21_ladder;
        }
        float _2201;
        if (_1795 > 0.0)
        {
            _2201 = abs((1.0 - _1785) / _1795);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1785 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2201 = frontier_phi_37_32_ladder;
        }
        float _2406;
        if (_1798 > 0.0)
        {
            _2406 = abs((1.0 - _1789) / _1798);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1789 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2406 = frontier_phi_46_43_ladder;
        }
        float _2408 = isnan(_2201) ? _1936 : (isnan(_1936) ? _2201 : min(_1936, _2201));
        float _2409 = isnan(_2406) ? _2408 : (isnan(_2408) ? _2406 : min(_2408, _2406));
        float _2413 = (_2409 * _1792) + _1781;
        float _2414 = (_2409 * _1795) + _1785;
        float _2415 = (_2409 * _1798) + _1789;
        float _2416 = _2409 * 9.9999997473787516355514526367188e-05;
        float _2417 = (-1.0) - _2416;
        float _2419 = _2416 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2415 > _2419) || ((_2415 < _2417) || ((_2414 > _2419) || ((_2414 < _2417) || ((_2413 < _2417) || (_2413 > _2419))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2614 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2415, cbModelParam._m0[17u].z, fma(_2414, cbModelParam._m0[17u].y, _2413 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2415, cbModelParam._m0[18u].z, fma(_2414, cbModelParam._m0[18u].y, _2413 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2415, cbModelParam._m0[19u].z, fma(_2414, cbModelParam._m0[19u].y, _2413 * cbModelParam._m0[19u].x))), _1726);
            frontier_phi_22_46_ladder = _2614.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2614.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2614.x * cbModelParam._m0[1u].z;
        }
        _1817 = frontier_phi_22_46_ladder_2;
        _1819 = frontier_phi_22_46_ladder_1;
        _1821 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1801 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_828, _829, _830), _1726);
        _1817 = _1801.x * cbModelParam._m0[1u].z;
        _1819 = _1801.y * cbModelParam._m0[1u].z;
        _1821 = _1801.z * cbModelParam._m0[1u].z;
    }
    float _1833 = ((((1.0 - _849) * ((_836 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_849 * _836)) * _820;
    float _1834 = _1833 * ((cbModelParam._m0[1u].w * (_1817 - _1717)) + _1717);
    float _1835 = _1833 * ((cbModelParam._m0[1u].w * (_1819 - _1719)) + _1719);
    float _1836 = _1833 * ((cbModelParam._m0[1u].w * (_1821 - _1721)) + _1721);
    float _1839 = fma(_1836, cbSceneParam._m0[89u].z, fma(_1835, cbSceneParam._m0[89u].y, _1834 * cbSceneParam._m0[89u].x));
    float _1842 = fma(_1836, cbSceneParam._m0[90u].z, fma(_1835, cbSceneParam._m0[90u].y, _1834 * cbSceneParam._m0[90u].x));
    float _1845 = fma(_1836, cbSceneParam._m0[91u].z, fma(_1835, cbSceneParam._m0[91u].y, _1834 * cbSceneParam._m0[91u].x));
    uvec4 _1855 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _1857 = _1855.x * 14u;
    uint _1858 = _1857 + 13u;
    float _1865 = _820 + (-1.0);
    float _1870 = (cbLight._m0[_1858].x * _1865) + 1.0;
    float _1871 = (cbLight._m0[_1858].y * _1865) + 1.0;
    float _1872 = (cbLight._m0[_1858].z * _1865) + 1.0;
    float _1873 = (cbLight._m0[_1858].w * _1865) + 1.0;
    uint _1874 = _1857 + 5u;
    float _1880 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
    uint _1884 = _1857 + 4u;
    float _1890 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
    uint _1894 = _1857 | 1u;
    float _1905 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_669, _670, _671));
    float _1908 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_669, _670, _671));
    float _4031 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _4042 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1913 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * 0.3183098733425140380859375;
    float _1915 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * 0.3183098733425140380859375;
    float _1922 = ((cbLight._m0[_1874].x * _1880) * _1915) + ((cbLight._m0[_1884].x * _1890) * _1913);
    float _1923 = ((_1880 * cbLight._m0[_1874].y) * _1915) + ((_1890 * cbLight._m0[_1884].y) * _1913);
    float _1924 = ((_1880 * cbLight._m0[_1874].z) * _1915) + ((_1890 * cbLight._m0[_1884].z) * _1913);
    uvec4 _1928 = floatBitsToUint(cbLight._m0[_1857 + 12u]);
    bool _1930 = _1928.x == 0u;
    float _1941;
    float _1943;
    float _1945;
    if (_1930)
    {
        _1941 = _1922;
        _1943 = _1923;
        _1945 = _1924;
    }
    else
    {
        uint _1949 = _1857 + 6u;
        float _1965 = (dot(vec3(cbLight._m0[_1857 + 2u].xyz), vec3(_669, _670, _671)) * 0.5) + 0.5;
        float _1966 = _1965 * _1965;
        float _4053 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1967 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1968 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _1941 = (((cbLight._m0[_1949].x * 0.3183098733425140380859375) * _1967) * _1968) + _1922;
        _1943 = (((cbLight._m0[_1949].y * 0.3183098733425140380859375) * _1967) * _1968) + _1923;
        _1945 = (((cbLight._m0[_1949].z * 0.3183098733425140380859375) * _1967) * _1968) + _1924;
    }
    bool _1948 = _1928.y == 0u;
    float _1986;
    float _1988;
    float _1990;
    if (_1948)
    {
        _1986 = _1941;
        _1988 = _1943;
        _1990 = _1945;
    }
    else
    {
        uint _2145 = _1857 + 7u;
        float _2161 = (dot(vec3(cbLight._m0[_1857 + 3u].xyz), vec3(_669, _670, _671)) * 0.5) + 0.5;
        float _2162 = _2161 * _2161;
        float _4069 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2163 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _2164 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _1986 = (((cbLight._m0[_2145].x * 0.3183098733425140380859375) * _2163) * _2164) + _1941;
        _1988 = (((cbLight._m0[_2145].y * 0.3183098733425140380859375) * _2163) * _2164) + _1943;
        _1990 = (((cbLight._m0[_2145].z * 0.3183098733425140380859375) * _2163) * _2164) + _1945;
    }
    uint _1993 = _1857 + 8u;
    float _2006 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1857].w)) * _672) * 0.949999988079071044921875);
    float _2007 = _2006 * _2006;
    float _2008 = cbLight._m0[_1857].x + _749;
    float _2009 = cbLight._m0[_1857].y + _750;
    float _2010 = cbLight._m0[_1857].z + _751;
    float _2014 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
    float _2015 = _2014 * _2008;
    float _2016 = _2014 * _2009;
    float _2017 = _2014 * _2010;
    float _2018 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_1857].xyz));
    float _4085 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _2022 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _2023 = dot(vec3(_669, _670, _671), vec3(_2015, _2016, _2017));
    float _4107 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _2027 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_2015, _2016, _2017));
    float _4118 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2031 = _2007 * _2007;
    float _2035 = ((_2026 * _2026) * (_2031 + (-1.0))) + 1.0;
    float _2046 = (exp2(log2(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2047 = 1.0 - _2007;
    float _2058 = (0.5 / (((_2022 * ((_2021 * _2047) + _2007)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2047) + _2007) * _2021))) * _2021;
    float _4129 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2060 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_2031 / ((_2035 * _2035) * 3.141590118408203125));
    uint _2071 = _1857 + 9u;
    float _2082 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1894].w)) * _672) * 0.949999988079071044921875);
    float _2083 = _2082 * _2082;
    float _2084 = cbLight._m0[_1894].x + _749;
    float _2085 = cbLight._m0[_1894].y + _750;
    float _2086 = cbLight._m0[_1894].z + _751;
    float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
    float _2091 = _2090 * _2084;
    float _2092 = _2090 * _2085;
    float _2093 = _2090 * _2086;
    float _2094 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_1894].xyz));
    float _4140 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2098 = dot(vec3(_669, _670, _671), vec3(_2091, _2092, _2093));
    float _4151 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2102 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_2091, _2092, _2093));
    float _4162 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2106 = _2083 * _2083;
    float _2110 = ((_2101 * _2101) * (_2106 + (-1.0))) + 1.0;
    float _2119 = (exp2(log2(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2120 = 1.0 - _2083;
    float _2130 = (0.5 / (((_2022 * ((_2097 * _2120) + _2083)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2120) + _2083) * _2097))) * _2097;
    float _4173 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2132 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2106 / ((_2110 * _2110) * 3.141590118408203125));
    float _2142 = (((_2119 * cbLight._m0[_2071].x) * _2132) * _1880) + (((_2046 * cbLight._m0[_1993].x) * _2060) * _1890);
    float _2143 = (((_2119 * cbLight._m0[_2071].y) * _2132) * _1880) + (((_2046 * cbLight._m0[_1993].y) * _2060) * _1890);
    float _2144 = (((_2119 * cbLight._m0[_2071].z) * _2132) * _1880) + (((_2046 * cbLight._m0[_1993].z) * _2060) * _1890);
    float _2206;
    float _2208;
    float _2210;
    if (_1930)
    {
        _2206 = _2142;
        _2208 = _2143;
        _2210 = _2144;
    }
    else
    {
        uint _2212 = _1857 + 2u;
        uint _2216 = _1857 + 10u;
        float _2230 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2212].w)) * _672) * 0.949999988079071044921875);
        float _2231 = _2230 * _2230;
        float _2232 = cbLight._m0[_2212].x + _749;
        float _2233 = cbLight._m0[_2212].y + _750;
        float _2234 = cbLight._m0[_2212].z + _751;
        float _2238 = inversesqrt(dot(vec3(_2232, _2233, _2234), vec3(_2232, _2233, _2234)));
        float _2239 = _2238 * _2232;
        float _2240 = _2238 * _2233;
        float _2241 = _2238 * _2234;
        float _2242 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2212].xyz));
        float _4184 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2245 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2246 = dot(vec3(_669, _670, _671), vec3(_2239, _2240, _2241));
        float _4195 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2250 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_2239, _2240, _2241));
        float _4206 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2254 = _2231 * _2231;
        float _2258 = ((_2249 * _2249) * (_2254 + (-1.0))) + 1.0;
        float _2267 = (exp2(log2(1.0 - (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2268 = 1.0 - _2231;
        float _2278 = (0.5 / (((_2022 * ((_2245 * _2268) + _2231)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2268) + _2231) * _2245))) * _2245;
        float _4217 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2280 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2254 / ((_2258 * _2258) * 3.141590118408203125));
        float _2281 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _2206 = (((_2267 * cbLight._m0[_2216].x) * _2280) * _2281) + _2142;
        _2208 = (((_2267 * cbLight._m0[_2216].y) * _2280) * _2281) + _2143;
        _2210 = (((_2267 * cbLight._m0[_2216].z) * _2280) * _2281) + _2144;
    }
    float _2316;
    float _2318;
    float _2320;
    if (_1948)
    {
        _2316 = _2206;
        _2318 = _2208;
        _2320 = _2210;
    }
    else
    {
        uint _2327 = _1857 + 3u;
        uint _2331 = _1857 + 11u;
        float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2327].w)) * _672) * 0.949999988079071044921875);
        float _2346 = _2345 * _2345;
        float _2347 = cbLight._m0[_2327].x + _749;
        float _2348 = cbLight._m0[_2327].y + _750;
        float _2349 = cbLight._m0[_2327].z + _751;
        float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
        float _2354 = _2353 * _2347;
        float _2355 = _2353 * _2348;
        float _2356 = _2353 * _2349;
        float _2357 = dot(vec3(_669, _670, _671), vec3(cbLight._m0[_2327].xyz));
        float _4233 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2361 = dot(vec3(_669, _670, _671), vec3(_2354, _2355, _2356));
        float _4244 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2365 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_2354, _2355, _2356));
        float _4255 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2369 = _2346 * _2346;
        float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
        float _2382 = (exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2383 = 1.0 - _2346;
        float _2393 = (0.5 / (((_2022 * ((_2360 * _2383) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2383) + _2346) * _2360))) * _2360;
        float _4266 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2395 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
        float _2396 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
        _2316 = (((_2382 * cbLight._m0[_2331].x) * _2395) * _2396) + _2206;
        _2318 = (((_2382 * cbLight._m0[_2331].y) * _2395) * _2396) + _2208;
        _2320 = (((_2382 * cbLight._m0[_2331].z) * _2395) * _2396) + _2210;
    }
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    float _2541;
    if (_1855.y == 0u)
    {
        float _2471 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2472 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2471;
        float _2473 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2471;
        float _2474 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2471;
        uvec4 _2486 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2487 = _2486.x;
        uint _2498 = uint((float(_2486.y) * floor(float(uint(cbSceneParam._m0[85u].y * _758) / _2487))) + floor(float(uint(cbSceneParam._m0[85u].x * _757) / _2487)));
        float _2508 = (log2(_2474 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2509 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        uint _2512 = uint(isnan(14.0) ? _2509 : (isnan(_2509) ? 14.0 : min(_2509, 14.0)));
        uvec4 _2517 = texelFetch(g_lightClusterGridBuffer, int(((_2512 << 2u) + (_2498 << 6u)) >> 2u));
        uint _2518 = _2517.x;
        uint _2519 = _2486.z;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        if (((((1u << ((_2519 >> 4u) & 15u)) + 4294967295u) & _2518) == 0u) || ((_2519 & 240u) == 0u))
        {
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
        }
        else
        {
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            uint _2770 = 0u;
            uint _2779;
            bool _2780;
            for (;;)
            {
                _2779 = texelFetch(g_lightClassification, int((((_2512 << 5u) + (_2498 << 9u)) + (_2770 << 2u)) >> 2u)).x;
                _2780 = _2779 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2780)
                {
                    frontier_phi_61_pred = _2764;
                    frontier_phi_61_pred_1 = _2769;
                    frontier_phi_61_pred_2 = _2768;
                    frontier_phi_61_pred_3 = _2767;
                    frontier_phi_61_pred_4 = _2766;
                    frontier_phi_61_pred_5 = _2765;
                }
                else
                {
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    uint _2894;
                    _2888 = _2764;
                    _2889 = _2765;
                    _2890 = _2766;
                    _2891 = _2767;
                    _2892 = _2768;
                    _2893 = _2769;
                    _2894 = _2779;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    for (;;)
                    {
                        uint _2898 = uint(findLSB(_2894)) + (_2770 << 5u);
                        uint _2895 = (_2894 + 4294967295u) & _2894;
                        uint _2900 = _2898 * 48u;
                        vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 3u)).x));
                        uint _2920 = (_2898 * 48u) + 4u;
                        vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2920)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 3u)).x));
                        uint _2939 = (_2898 * 48u) + 8u;
                        vec3 _2950 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x));
                        float _2954 = _2914.x - _2472;
                        float _2955 = _2914.y - _2473;
                        float _2956 = _2914.z - _2474;
                        float _2957 = dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956));
                        float _2960 = inversesqrt(_2957);
                        float _2961 = _2960 * _2954;
                        float _2962 = _2960 * _2955;
                        float _2963 = _2960 * _2956;
                        float _2964 = dot(vec3(_776, _779, _782), vec3(_2961, _2962, _2963));
                        float _2969 = 1.0 - (_2957 * _2914.w);
                        float _4292 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                        float _2970 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                        float _2971 = sqrt(_2957) * _2933.w;
                        float _2974 = 1.39999997615814208984375 / (_2971 + 1.39999997615814208984375);
                        float _2975 = _2974 * _2974;
                        float _2978 = ((1.0 - _2975) * _2964) + _2975;
                        float _2981 = _2971 * _2971;
                        float _2985 = ((isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0))) * _2970) / ((_2981 * 0.699999988079071044921875) + 1.0);
                        float _2989 = (-0.0) - _2472;
                        float _2990 = (-0.0) - _2473;
                        float _2991 = (-0.0) - _2474;
                        float _2995 = inversesqrt(dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991)));
                        float _2996 = _2995 * _2989;
                        float _2997 = _2995 * _2990;
                        float _2998 = _2995 * _2991;
                        float _3006 = exp2(log2(1.0 / ((_2981 * 3.5) + 5.0)) * 0.25);
                        float _3007 = 1.0 - _836;
                        float _3014 = sqrt(1.0 - ((1.0 - (_3007 * _3007)) * (1.0 - (_3006 * _3006))));
                        float _3015 = _3014 * _3014;
                        float _3016 = _3015 * _3015;
                        float _3017 = _2996 + _2961;
                        float _3018 = _2997 + _2962;
                        float _3019 = _2998 + _2963;
                        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                        float _3027 = dot(vec3(_776, _779, _782), vec3(_2996, _2997, _2998));
                        float _4308 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3030 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                        float _3031 = dot(vec3(_776, _779, _782), vec3(_3023 * _3017, _3023 * _3018, _3023 * _3019));
                        float _4319 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3034 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _3038 = ((_3034 * _3034) * (_3016 + (-1.0))) + 1.0;
                        float _3039 = _2974 * _3015;
                        float _3040 = _3039 * _3039;
                        float _3043 = ((1.0 - _3040) * _2964) + _3040;
                        float _4330 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3044 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3045 = 1.0 - _3015;
                        float _3055 = (0.5 / (((_3044 * ((_3030 * _3045) + _3015)) + 9.9999999392252902907785028219223e-09) + (((_3044 * _3045) + _3015) * _3030))) * _3044;
                        float _4341 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3066 = (((_3016 * 3.1415927410125732421875) * (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0)))) / ((_3038 * _3038) * ((_2981 * 2.1991131305694580078125) + 3.141590118408203125))) * _2970;
                        _2823 = (_2985 * _2933.x) + _2891;
                        _2824 = (_2985 * _2933.y) + _2892;
                        _2825 = (_2985 * _2933.z) + _2893;
                        _2820 = (_3066 * _2950.x) + _2888;
                        _2821 = (_3066 * _2950.y) + _2889;
                        _2822 = (_3066 * _2950.z) + _2890;
                        if (_2895 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2888 = _2820;
                            _2889 = _2821;
                            _2890 = _2822;
                            _2891 = _2823;
                            _2892 = _2824;
                            _2893 = _2825;
                            _2894 = _2895;
                        }
                    }
                    frontier_phi_61_pred = _2820;
                    frontier_phi_61_pred_1 = _2825;
                    frontier_phi_61_pred_2 = _2824;
                    frontier_phi_61_pred_3 = _2823;
                    frontier_phi_61_pred_4 = _2822;
                    frontier_phi_61_pred_5 = _2821;
                }
                _2620 = frontier_phi_61_pred;
                _2630 = frontier_phi_61_pred_1;
                _2628 = frontier_phi_61_pred_2;
                _2626 = frontier_phi_61_pred_3;
                _2624 = frontier_phi_61_pred_4;
                _2622 = frontier_phi_61_pred_5;
                uint _2771 = _2770 + 1u;
                if (_2771 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2764 = _2620;
                    _2765 = _2622;
                    _2766 = _2624;
                    _2767 = _2626;
                    _2768 = _2628;
                    _2769 = _2630;
                    _2770 = _2771;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
        }
        uvec4 _2633 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2634 = _2633.z;
        uint _2636 = (_2634 >> 8u) & 15u;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        if (((4294967295u << _2636) & _2518) == 0u)
        {
            _2732 = _2619;
            _2734 = _2621;
            _2736 = _2623;
            _2738 = _2625;
            _2740 = _2627;
            _2742 = _2629;
        }
        else
        {
            float _2757 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
            float _2758 = _2757 * _2472;
            float _2759 = _2757 * _2473;
            float _2760 = _2757 * _2474;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2636 < ((_2634 >> 12u) & 15u))
            {
                float _2733;
                float _2735;
                float _2737;
                float _2739;
                float _2741;
                float _2743;
                float _2871 = _2619;
                float _2872 = _2621;
                float _2873 = _2623;
                float _2874 = _2625;
                float _2875 = _2627;
                float _2876 = _2629;
                uint _2877 = _2636;
                uint _2886;
                bool _2887;
                for (;;)
                {
                    _2886 = texelFetch(g_lightClassification, int((((_2512 << 5u) + (_2498 << 9u)) + (_2877 << 2u)) >> 2u)).x;
                    _2887 = _2886 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2887)
                    {
                        frontier_phi_67_pred = _2874;
                        frontier_phi_67_pred_1 = _2875;
                        frontier_phi_67_pred_2 = _2876;
                        frontier_phi_67_pred_3 = _2873;
                        frontier_phi_67_pred_4 = _2872;
                        frontier_phi_67_pred_5 = _2871;
                    }
                    else
                    {
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3084 = _2871;
                        float _3085 = _2872;
                        float _3086 = _2873;
                        float _3087 = _2874;
                        float _3088 = _2875;
                        float _3089 = _2876;
                        uint _3090 = _2886;
                        uint _3091;
                        vec4 _3116;
                        float _3117;
                        vec4 _3132;
                        vec3 _3144;
                        vec4 _3159;
                        vec4 _3174;
                        float _3220;
                        bool _3221;
                        for (;;)
                        {
                            uint _3101 = ((_2877 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3090));
                            _3091 = (_3090 + 4294967295u) & _3090;
                            uint _3103 = _3101 * 40u;
                            _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            _3117 = _3116.w;
                            uint _3119 = (_3101 * 40u) + 4u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3134 = (_3101 * 40u) + 8u;
                            _3144 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x));
                            uint _3146 = (_3101 * 40u) + 16u;
                            _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            uint _3161 = (_3101 * 40u) + 20u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3176 = (_3101 * 40u) + 24u;
                            vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3195 = (_3101 * 40u) + 28u;
                            vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            _3220 = fma(_2474, _3208.z, fma(_2473, _3208.y, _3208.x * _2472)) + _3208.w;
                            _3221 = !((fma(_2474, _3189.z, fma(_2473, _3189.y, _3189.x * _2472)) + _3189.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3221)
                            {
                                float _3248 = _3116.x - _2472;
                                float _3249 = _3116.y - _2473;
                                float _3250 = _3116.z - _2474;
                                float _3251 = dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250));
                                float _3254 = inversesqrt(_3251);
                                float _3255 = _3254 * _3248;
                                float _3256 = _3254 * _3249;
                                float _3257 = _3254 * _3250;
                                float _3261 = 1.0 - (_3251 / (_3117 * _3117));
                                float _4352 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                                float _3266 = sqrt(_3251) * _3132.w;
                                float _3268 = 1.39999997615814208984375 / (_3266 + 1.39999997615814208984375);
                                float _3269 = _3268 * _3268;
                                float _3272 = ((1.0 - _3269) * dot(vec3(_3255, _3256, _3257), vec3(_776, _779, _782))) + _3269;
                                float _3275 = _3266 * _3266;
                                float _3279 = (fma(_2474, _3159.z, fma(_2473, _3159.y, _3159.x * _2472)) + _3159.w) / _3220;
                                float _3280 = (fma(_2474, _3174.z, fma(_2473, _3174.y, _3174.x * _2472)) + _3174.w) / _3220;
                                float _3284 = 1.0 - dot(vec2(_3279, _3280), vec2(_3279, _3280));
                                float _4368 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3286 = _3285 * (((isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0))) * _3262) / ((_3275 * 0.699999988079071044921875) + 1.0));
                                float _3298 = exp2(log2(1.0 / ((_3275 * 3.5) + 5.0)) * 0.25);
                                float _3299 = 1.0 - _836;
                                float _3306 = sqrt(1.0 - ((1.0 - (_3299 * _3299)) * (1.0 - (_3298 * _3298))));
                                float _3307 = _3306 * _3306;
                                float _3308 = _3307 * _3307;
                                float _3309 = _3255 - _2758;
                                float _3310 = _3256 - _2759;
                                float _3311 = _3257 - _2760;
                                float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                                float _3319 = dot(vec3(_776, _779, _782), vec3((-0.0) - _2758, (-0.0) - _2759, (-0.0) - _2760));
                                float _4379 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3322 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3323 = dot(vec3(_776, _779, _782), vec3(_3315 * _3309, _3315 * _3310, _3315 * _3311));
                                float _4390 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3326 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3330 = ((_3326 * _3326) * (_3308 + (-1.0))) + 1.0;
                                float _3331 = _3268 * _3307;
                                float _3332 = _3331 * _3331;
                                float _3338 = ((1.0 - _3332) * dot(vec3(_776, _779, _782), vec3(_3255, _3256, _3257))) + _3332;
                                float _4401 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3339 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3340 = 1.0 - _3307;
                                float _3350 = (0.5 / (((_3339 * ((_3322 * _3340) + _3307)) + 9.9999999392252902907785028219223e-09) + (((_3339 * _3340) + _3307) * _3322))) * _3339;
                                float _4412 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3360 = (_3285 * _3262) * (((_3308 * 3.1415927410125732421875) * (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) / ((_3330 * _3330) * ((_3275 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3360 * _3144.x;
                                frontier_phi_73_pred_1 = _3360 * _3144.y;
                                frontier_phi_73_pred_2 = _3286 * _3132.z;
                                frontier_phi_73_pred_3 = _3286 * _3132.y;
                                frontier_phi_73_pred_4 = _3286 * _3132.x;
                                frontier_phi_73_pred_5 = _3360 * _3144.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3364 = frontier_phi_73_pred;
                            _3365 = frontier_phi_73_pred_1;
                            _3369 = frontier_phi_73_pred_2;
                            _3368 = frontier_phi_73_pred_3;
                            _3367 = frontier_phi_73_pred_4;
                            _3366 = frontier_phi_73_pred_5;
                            _3074 = _3367 + _3087;
                            _3075 = _3368 + _3088;
                            _3076 = _3369 + _3089;
                            _3071 = _3364 + _3084;
                            _3072 = _3365 + _3085;
                            _3073 = _3366 + _3086;
                            if (_3091 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3091;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3074;
                        frontier_phi_67_pred_1 = _3075;
                        frontier_phi_67_pred_2 = _3076;
                        frontier_phi_67_pred_3 = _3073;
                        frontier_phi_67_pred_4 = _3072;
                        frontier_phi_67_pred_5 = _3071;
                    }
                    _2739 = frontier_phi_67_pred;
                    _2741 = frontier_phi_67_pred_1;
                    _2743 = frontier_phi_67_pred_2;
                    _2737 = frontier_phi_67_pred_3;
                    _2735 = frontier_phi_67_pred_4;
                    _2733 = frontier_phi_67_pred_5;
                    uint _2878 = _2877 + 1u;
                    if (_2878 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2871 = _2733;
                        _2872 = _2735;
                        _2873 = _2737;
                        _2874 = _2739;
                        _2875 = _2741;
                        _2876 = _2743;
                        _2877 = _2878;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2741;
                frontier_phi_55_56_ladder_1 = _2743;
                frontier_phi_55_56_ladder_2 = _2739;
                frontier_phi_55_56_ladder_3 = _2737;
                frontier_phi_55_56_ladder_4 = _2735;
                frontier_phi_55_56_ladder_5 = _2733;
            }
            else
            {
                frontier_phi_55_56_ladder = _2627;
                frontier_phi_55_56_ladder_1 = _2629;
                frontier_phi_55_56_ladder_2 = _2625;
                frontier_phi_55_56_ladder_3 = _2623;
                frontier_phi_55_56_ladder_4 = _2621;
                frontier_phi_55_56_ladder_5 = _2619;
            }
            _2732 = frontier_phi_55_56_ladder_5;
            _2734 = frontier_phi_55_56_ladder_4;
            _2736 = frontier_phi_55_56_ladder_3;
            _2738 = frontier_phi_55_56_ladder_2;
            _2740 = frontier_phi_55_56_ladder;
            _2742 = frontier_phi_55_56_ladder_1;
        }
        float _2747 = isnan(1.0) ? _820 : (isnan(_820) ? 1.0 : min(_820, 1.0));
        _2531 = (_2747 * _2738) + _1986;
        _2533 = (_2747 * _2740) + _1988;
        _2535 = (_2747 * _2742) + _1990;
        _2537 = ((_2732 * 0.039999999105930328369140625) * _2747) + _2316;
        _2539 = ((_2734 * 0.039999999105930328369140625) * _2747) + _2318;
        _2541 = ((_2736 * 0.039999999105930328369140625) * _2747) + _2320;
    }
    else
    {
        _2531 = _1986;
        _2533 = _1988;
        _2535 = _1990;
        _2537 = _2316;
        _2539 = _2318;
        _2541 = _2320;
    }
    float _4428 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4439 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4450 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    uint _2561 = _260 + 6u;
    float _2569 = _757 / cbSceneParam._m0[86u].x;
    float _2570 = _758 / cbSceneParam._m0[86u].y;
    vec4 _2584 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2569, _2570, (log2((isnan(cbSceneParam._m0[77u].w) ? _690 : (isnan(_690) ? cbSceneParam._m0[77u].w : min(_690, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2586 = _2584.x;
    float _2587 = _2584.y;
    float _2588 = _2584.z;
    float _2589 = _2584.w;
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    if (_690 > cbSceneParam._m0[78u].w)
    {
        float _2644 = isnan(_690) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _690 : min(cbSceneParam._m0[80u].w, _690));
        float _2645 = _2644 / _690;
        float _2656 = _2645 * _742;
        float _2657 = _743 * _2645;
        float _2658 = (-0.0) - _2657;
        float _2660 = _2645 * _744;
        float _2662 = (cbSceneParam._m0[77u].w * _2658) / _2644;
        float _2663 = _2662 + cbSceneParam._m0[79u].w;
        float _2664 = cbSceneParam._m0[79u].w - _2657;
        float _2670 = sqrt(((_2656 * _2656) + (_2657 * _2657)) + (_2660 * _2660));
        float _2673 = (1.0 - (cbSceneParam._m0[77u].w / _2644)) * _2670;
        float _2678 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2680 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2833;
        if (abs((_2658 - _2662) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2833 = ((((_2663 > 0.0) ? exp2(_2678 * _2663) : (2.0 - exp2(_2680 * _2663))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2673;
        }
        else
        {
            float _2793 = 1.0 / cbSceneParam._m0[80u].x;
            float _2794 = isnan(_2664) ? _2663 : (isnan(_2663) ? _2664 : max(_2663, _2664));
            float _2795 = isnan(_2664) ? _2663 : (isnan(_2663) ? _2664 : min(_2663, _2664));
            float _2804 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : min(_2794, 0.0));
            float _2805 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : min(_2795, 0.0));
            _2833 = ((abs(_2670 / _2658) * cbSceneParam._m0[80u].y) * ((((_2804 - _2805) * 2.0) - ((exp2(_2678 * (isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0)))) - exp2(_2678 * (isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0))))) * _2793)) - ((exp2(_2680 * _2804) - exp2(_2680 * _2805)) * _2793))) + (_2673 * cbSceneParam._m0[80u].z);
        }
        vec4 _2835 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2569, _2570, 1.0), 0.0);
        float _2844 = exp2((_2833 * (-1.44269502162933349609375)) * (1.0 - _2835.w));
        float _2845 = log2(_2844);
        float _2861 = log2(_2589);
        _2682 = (exp2(_2861 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2845 * cbSceneParam._m0[78u].x)) * _2835.x) / cbSceneParam._m0[78u].x)) + _2586;
        _2684 = (exp2(_2861 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2845 * cbSceneParam._m0[78u].y)) * _2835.y) / cbSceneParam._m0[78u].y)) + _2587;
        _2686 = (exp2(_2861 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2845 * cbSceneParam._m0[78u].z)) * _2835.z) / cbSceneParam._m0[78u].z)) + _2588;
        _2688 = _2844 * _2589;
    }
    else
    {
        _2682 = _2586;
        _2684 = _2587;
        _2686 = _2588;
        _2688 = _2589;
    }
    float _2700 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2701 = _2700 == 3.0;
    float _2702 = log2(_2688);
    float _2709 = exp2(_2702 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2531 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _820))) + ((_2537 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1624)) * cbPerFrame._m0[3u].x));
    float _2710 = exp2(_2702 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2533 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _820))) + ((_2539 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1624)) * cbPerFrame._m0[3u].x));
    float _2711 = exp2(_2702 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2535 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _820))) + ((_2541 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1624)) * cbPerFrame._m0[3u].x));
    float _2720 = (_2700 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2720 * (_2701 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2682)));
    SV_Target.y = _2720 * (_2701 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2684)));
    SV_Target.z = _2720 * (_2701 ? _2711 : (_2711 + (cbSceneParam._m0[72u].w * _2686)));
    SV_Target.w = cbInstanceData._m0[_2561].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2561].w;
}


