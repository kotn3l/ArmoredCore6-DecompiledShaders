#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1184;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _360 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _360) * cbMtdParam._m0[24u].x) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3774 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _385 = (_378 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _386 = (_378 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _387 = (_378 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _400 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _417 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _419 = _417.x;
    float _420 = _417.y;
    float _421 = _417.z;
    float _430 = ((_400.z - _421) * _378) + _421;
    float _433 = ((((_400.x - _419) * _378) + _419) * 2.0) + (-1.0);
    float _435 = ((((_400.y - _420) * _378) + _420) * 2.0) + (-1.0);
    float _436 = dot(vec2(_433, _435), vec2(_433, _435));
    float _3785 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _441 = sqrt(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))));
    vec4 _457 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _469 = (((_457.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _433;
    float _470 = (((_457.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _435;
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _484 = _482.x;
    float _485 = 1.0 - _484;
    float _513 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_484 - _485) * cbMtdParam._m0[24u].w) + _485) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3796 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _522 = ((((cbMtdParam._m0[10u].x - _385) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _514) + _385;
    float _523 = ((((cbMtdParam._m0[10u].y - _386) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _514) + _386;
    float _524 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _387)) * _514) + _387;
    float _528 = (cbMtdParam._m0[19u].w * (_457.z - _430)) + _430;
    float _532 = ((cbMtdParam._m0[23u].y - _528) * _514) + _528;
    vec4 _551 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _553 = _551.x;
    float _554 = _551.y;
    float _560 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_231, _232, _233, 0.0));
    vec4 _575 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _262) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _263) + cbTextureTilingScale._m0[18u].w));
    float _577 = _575.x;
    float _582 = fract(_575.w + cbPerFrame._m0[22u].x);
    float _584 = (1.0 - _582) * _577;
    float _589 = ((_582 + (-1.0)) + _577) * 9.0;
    float _591 = ((_577 + (-1.0)) + _582) * 9.0;
    float _592 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _593 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _607 = (_584 * ((_575.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _592 : (isnan(_592) ? 3.0 : min(_592, 3.0))) * 3.1415927410125732421875);
    float _609 = (_584 * ((_575.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _593 : (isnan(_593) ? 3.0 : min(_593, 3.0))) * 3.1415927410125732421875);
    float _613 = inversesqrt(dot(vec3(_607, _609, 1.0), vec3(_607, _609, 1.0)));
    float _629 = (((((0.5 - _553) + ((_607 * 0.5) * _613)) * _560) + _553) * 2.0) + (-1.0);
    float _630 = (((((0.5 - _554) + ((_613 * 0.5) * _609)) * _560) + _554) * 2.0) + (-1.0);
    float _631 = dot(vec2(_629, _630), vec2(_629, _630));
    float _3827 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _647 = ((((cbMtdParam._m0[22u].z * _469) - _469) + _629) * _514) + _469;
    float _648 = ((((cbMtdParam._m0[22u].z * _470) - _470) + _630) * _514) + _470;
    float _649 = (_514 * (sqrt(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) - _441)) + _441;
    float _651 = cbMtdParam._m0[22u].x + _457.w;
    float _654 = fma(_649, _231, fma(_648, _237 * TANGENT.x, (_223 * _215) * _647));
    float _657 = fma(_649, _232, fma(_648, _237 * TANGENT.y, (_223 * _216) * _647));
    float _660 = fma(_649, _233, fma(_648, _237 * TANGENT.z, (_223 * _217) * _647));
    float _664 = inversesqrt(dot(vec3(_654, _657, _660), vec3(_654, _657, _660)));
    float _665 = _664 * _654;
    float _666 = _664 * _657;
    float _667 = _664 * _660;
    float _3838 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _668 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _3860 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3871 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3882 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _686 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _737 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _727);
    float _738 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _727);
    float _739 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _727);
    float _743 = inversesqrt(dot(vec3(_737, _738, _739), vec3(_737, _738, _739)));
    float _744 = _737 * _743;
    float _745 = _738 * _743;
    float _746 = _739 * _743;
    float _752 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _753 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _771 = fma(_667, cbSceneParam._m0[5u].z, fma(_666, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _665));
    float _774 = fma(_667, cbSceneParam._m0[6u].z, fma(_666, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _665));
    float _777 = fma(_667, cbSceneParam._m0[7u].z, fma(_666, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _665));
    uint _791 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _797 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_791].x;
    float _798 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_791].y;
    float _799 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_791].z;
    float _3893 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    vec4 _811 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _752, cbSceneParam._m0[86u].y * _753));
    float _815 = ((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * TEXCOORD_5.w) * _811.x;
    float _816 = dot(vec3(_665, _666, _667), vec3(_744, _745, _746));
    float _819 = _816 * 2.0;
    float _823 = (_819 * _665) - _744;
    float _824 = (_819 * _666) - _745;
    float _825 = (_819 * _667) - _746;
    float _829 = abs(dot(vec3(_744, _745, _746), vec3(_665, _666, _667)));
    float _3926 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _831 = sqrt(_668);
    float _843 = exp2((_831 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_831 * 3.0));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1183;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _909 = fma(_883, cbModelParam._m0[26u].z, fma(_879, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _875));
        float _913 = fma(_883, cbModelParam._m0[27u].z, fma(_879, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _875));
        float _917 = fma(_883, cbModelParam._m0[28u].z, fma(_879, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _875));
        float _941 = _875 + _665;
        float _942 = _879 + _666;
        float _943 = _883 + _667;
        float _953 = fma(_943, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941)) - _909;
        float _954 = fma(_943, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941)) - _913;
        float _955 = fma(_943, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941)) - _917;
        float _959 = inversesqrt(dot(vec3(_953, _954, _955), vec3(_953, _954, _955)));
        float _972 = ((_959 * _953) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_909 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_959 * _954) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_913 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_959 * _955) / cbModelParam._m0[34u].z) + ((((((_917 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        float _1011 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_977.x + (-0.5));
        float _1013 = _1011 * (_977.y + (-0.5));
        float _1014 = _1011 * (_977.z + (-0.5));
        float _1021 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_984.x + (-0.5));
        float _1023 = _1021 * (_984.y + (-0.5));
        float _1024 = _1021 * (_984.z + (-0.5));
        float _1031 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_991.x + (-0.5));
        float _1033 = _1031 * (_991.y + (-0.5));
        float _1034 = _1031 * (_991.z + (-0.5));
        float _1041 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_998.x + (-0.5));
        float _1043 = _1041 * (_998.y + (-0.5));
        float _1044 = _1041 * (_998.z + (-0.5));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = _1012 * 0.5;
        float _1049 = _1022 * 0.5;
        float _1050 = _1032 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1065 = (dot(vec3(_665, _666, _667), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1075 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3974 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1077 + 1.0))) + _1082) * _1045;
        float _1092 = _1013 * 0.5;
        float _1093 = _1023 * 0.5;
        float _1094 = _1033 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_665, _666, _667), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _4007 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1119 + 1.0))) + _1124) * _1046;
        float _1134 = _1014 * 0.5;
        float _1135 = _1024 * 0.5;
        float _1136 = _1034 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_665, _666, _667), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _4040 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1161 + 1.0))) + _1166) * _1047;
        _1183 = _1014;
        _1185 = _1013;
        _1186 = _1012;
        _1187 = _1024;
        _1188 = _1023;
        _1189 = _1022;
        _1190 = _1034;
        _1191 = _1033;
        _1192 = _1032;
        _1193 = _1047;
        _1194 = _1046;
        _1195 = _1045;
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1197 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1198 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
    }
    else
    {
        _1183 = _1184;
        _1185 = _1184;
        _1186 = _1184;
        _1187 = _1184;
        _1188 = _1184;
        _1189 = _1184;
        _1190 = _1184;
        _1191 = _1184;
        _1192 = _1184;
        _1193 = _1184;
        _1194 = _1184;
        _1195 = _1184;
        _1196 = 0.0;
        _1197 = 0.0;
        _1198 = 0.0;
    }
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1223 = fma(_883, cbModelParam._m0[30u].z, fma(_879, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _875));
        float _1227 = fma(_883, cbModelParam._m0[31u].z, fma(_879, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _875));
        float _1231 = fma(_883, cbModelParam._m0[32u].z, fma(_879, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _875));
        float _1254 = _875 + _665;
        float _1255 = _879 + _666;
        float _1256 = _883 + _667;
        float _1266 = fma(_1256, cbModelParam._m0[30u].z, fma(_1255, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1254)) - _1223;
        float _1267 = fma(_1256, cbModelParam._m0[31u].z, fma(_1255, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1254)) - _1227;
        float _1268 = fma(_1256, cbModelParam._m0[32u].z, fma(_1255, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1254)) - _1231;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1285 = ((_1272 * _1266) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1223 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1272 * _1267) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1227 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1272 * _1268) / cbModelParam._m0[35u].z) + ((((((_1231 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        float _1322 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1289.x + (-0.5));
        float _1324 = _1322 * (_1289.y + (-0.5));
        float _1325 = _1322 * (_1289.z + (-0.5));
        float _1332 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1296.x + (-0.5));
        float _1334 = _1332 * (_1296.y + (-0.5));
        float _1335 = _1332 * (_1296.z + (-0.5));
        float _1342 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1303.x + (-0.5));
        float _1344 = _1342 * (_1303.y + (-0.5));
        float _1345 = _1342 * (_1303.z + (-0.5));
        float _1352 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1310.x + (-0.5));
        float _1354 = _1352 * (_1310.y + (-0.5));
        float _1355 = _1352 * (_1310.z + (-0.5));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = _1323 * 0.5;
        float _1360 = _1333 * 0.5;
        float _1361 = _1343 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_665, _666, _667), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4103 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1386 + 1.0))) + _1391) * _1356;
        float _1401 = _1324 * 0.5;
        float _1402 = _1334 * 0.5;
        float _1403 = _1344 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_665, _666, _667), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4136 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1428 + 1.0))) + _1433) * _1357;
        float _1443 = _1325 * 0.5;
        float _1444 = _1335 * 0.5;
        float _1445 = _1345 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_665, _666, _667), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4169 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1470 + 1.0))) + _1475) * _1358;
        _1492 = _1325;
        _1493 = _1324;
        _1494 = _1323;
        _1495 = _1335;
        _1496 = _1334;
        _1497 = _1333;
        _1498 = _1345;
        _1499 = _1344;
        _1500 = _1343;
        _1501 = _1358;
        _1502 = _1357;
        _1503 = _1356;
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1505 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
    }
    else
    {
        _1492 = _1184;
        _1493 = _1184;
        _1494 = _1184;
        _1495 = _1184;
        _1496 = _1184;
        _1497 = _1184;
        _1498 = _1184;
        _1499 = _1184;
        _1500 = _1184;
        _1501 = _1184;
        _1502 = _1184;
        _1503 = _1184;
        _1504 = 0.0;
        _1505 = 0.0;
        _1506 = 0.0;
    }
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1196)) + _1196;
    float _1517 = (cbModelParam._m0[1u].x * (_1505 - _1197)) + _1197;
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1198)) + _1198;
    float _1539 = fma(_1518, cbSceneParam._m0[89u].z, fma(_1517, cbSceneParam._m0[89u].y, _1516 * cbSceneParam._m0[89u].x));
    float _1542 = fma(_1518, cbSceneParam._m0[90u].z, fma(_1517, cbSceneParam._m0[90u].y, _1516 * cbSceneParam._m0[90u].x));
    float _1545 = fma(_1518, cbSceneParam._m0[91u].z, fma(_1517, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1516));
    float _1560 = _823 * 0.5;
    float _1561 = _824 * 0.5;
    float _1562 = _825 * 0.5;
    float _1563 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1566 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1493, _1496, _1499, _1502));
    float _1569 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1603;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1576 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1183, _1187, _1190, _1193));
        float _1580 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1185, _1188, _1191, _1194));
        float _1584 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1186, _1189, _1192, _1195));
        float _1591 = dot(vec4(cbModelParam._m0[39u]), vec4(_1560, _1561, _1562, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1591) ? 0.0 : (isnan(0.0) ? _1591 : max(0.0, _1591))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1614;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1605 = dot(vec4(cbModelParam._m0[40u]), vec4(_1560, _1561, _1562, 1.0));
        _1614 = dot(vec3(isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1605) ? 0.0 : (isnan(0.0) ? _1605 : max(0.0, _1605))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1614 = 1.0;
    }
    float _1618 = (_1614 * cbModelParam._m0[1u].x) + (_1603 * (1.0 - cbModelParam._m0[1u].x));
    float _1628 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _668);
    float _1629 = isnan(_1628) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1628 : min(cbModelParam._m0[25u].z, _1628));
    float _1711;
    float _1713;
    float _1715;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1678 = fma(_883, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _875)) + cbModelParam._m0[13u].w;
        float _1682 = fma(_883, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _875)) + cbModelParam._m0[14u].w;
        float _1686 = fma(_883, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _875)) + cbModelParam._m0[15u].w;
        float _1689 = fma(_825, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _823));
        float _1692 = fma(_825, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _823));
        float _1695 = fma(_825, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _823));
        float _1723;
        if (_1689 > 0.0)
        {
            _1723 = abs((1.0 - _1678) / _1689);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1678 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1723 = frontier_phi_14_12_ladder;
        }
        float _1893;
        if (_1692 > 0.0)
        {
            _1893 = abs((1.0 - _1682) / _1692);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1682 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1893 = frontier_phi_23_19_ladder;
        }
        float _2188;
        if (_1695 > 0.0)
        {
            _2188 = abs((1.0 - _1686) / _1695);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1686 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2188 = frontier_phi_35_30_ladder;
        }
        float _2190 = isnan(_1893) ? _1723 : (isnan(_1723) ? _1893 : min(_1723, _1893));
        float _2191 = isnan(_2188) ? _2190 : (isnan(_2190) ? _2188 : min(_2190, _2188));
        float _2195 = (_2191 * _1689) + _1678;
        float _2196 = (_2191 * _1692) + _1682;
        float _2197 = (_2191 * _1695) + _1686;
        float _2198 = _2191 * 9.9999997473787516355514526367188e-05;
        float _2200 = (-1.0) - _2198;
        float _2202 = _2198 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2197 > _2202) || ((_2197 < _2200) || ((_2196 > _2202) || ((_2196 < _2200) || ((_2195 < _2200) || (_2195 > _2202))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2342 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2197, cbModelParam._m0[9u].z, fma(_2196, cbModelParam._m0[9u].y, _2195 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2197, cbModelParam._m0[10u].z, fma(_2196, cbModelParam._m0[10u].y, _2195 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2197, cbModelParam._m0[11u].z, fma(_2196, cbModelParam._m0[11u].y, _2195 * cbModelParam._m0[11u].x))), _1629);
            frontier_phi_13_35_ladder = _2342.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2342.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2342.x * cbModelParam._m0[1u].y;
        }
        _1711 = frontier_phi_13_35_ladder_2;
        _1713 = frontier_phi_13_35_ladder_1;
        _1715 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1699 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_823, _824, _825), _1629);
        _1711 = _1699.x * cbModelParam._m0[1u].y;
        _1713 = _1699.y * cbModelParam._m0[1u].y;
        _1715 = _1699.z * cbModelParam._m0[1u].y;
    }
    float _1719 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _668);
    float _1720 = isnan(_1719) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1719 : min(cbModelParam._m0[25u].w, _1719));
    float _1810;
    float _1812;
    float _1814;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1774 = fma(_883, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _875)) + cbModelParam._m0[21u].w;
        float _1778 = fma(_883, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _875)) + cbModelParam._m0[22u].w;
        float _1782 = fma(_883, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _875)) + cbModelParam._m0[23u].w;
        float _1785 = fma(_825, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _823));
        float _1788 = fma(_825, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _823));
        float _1791 = fma(_825, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _823));
        float _1898;
        if (_1785 > 0.0)
        {
            _1898 = abs((1.0 - _1774) / _1785);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1774 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1898 = frontier_phi_25_21_ladder;
        }
        float _2215;
        if (_1788 > 0.0)
        {
            _2215 = abs((1.0 - _1778) / _1788);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1778 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2215 = frontier_phi_37_32_ladder;
        }
        float _2542;
        if (_1791 > 0.0)
        {
            _2542 = abs((1.0 - _1782) / _1791);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1782 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2542 = frontier_phi_47_44_ladder;
        }
        float _2544 = isnan(_2215) ? _1898 : (isnan(_1898) ? _2215 : min(_1898, _2215));
        float _2545 = isnan(_2542) ? _2544 : (isnan(_2544) ? _2542 : min(_2544, _2542));
        float _2549 = (_2545 * _1785) + _1774;
        float _2550 = (_2545 * _1788) + _1778;
        float _2551 = (_2545 * _1791) + _1782;
        float _2552 = _2545 * 9.9999997473787516355514526367188e-05;
        float _2553 = (-1.0) - _2552;
        float _2555 = _2552 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2551 > _2555) || ((_2551 < _2553) || ((_2550 > _2555) || ((_2550 < _2553) || ((_2549 < _2553) || (_2549 > _2555))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2669 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2551, cbModelParam._m0[17u].z, fma(_2550, cbModelParam._m0[17u].y, _2549 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2551, cbModelParam._m0[18u].z, fma(_2550, cbModelParam._m0[18u].y, _2549 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2551, cbModelParam._m0[19u].z, fma(_2550, cbModelParam._m0[19u].y, _2549 * cbModelParam._m0[19u].x))), _1720);
            frontier_phi_22_47_ladder = _2669.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2669.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2669.x * cbModelParam._m0[1u].z;
        }
        _1810 = frontier_phi_22_47_ladder_2;
        _1812 = frontier_phi_22_47_ladder_1;
        _1814 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1794 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_823, _824, _825), _1720);
        _1810 = _1794.x * cbModelParam._m0[1u].z;
        _1812 = _1794.y * cbModelParam._m0[1u].z;
        _1814 = _1794.z * cbModelParam._m0[1u].z;
    }
    float _1826 = ((((1.0 - _843) * ((_831 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_843 * _831)) * _815;
    float _1827 = _1826 * ((cbModelParam._m0[1u].w * (_1810 - _1711)) + _1711);
    float _1828 = _1826 * ((cbModelParam._m0[1u].w * (_1812 - _1713)) + _1713);
    float _1829 = _1826 * ((cbModelParam._m0[1u].w * (_1814 - _1715)) + _1715);
    float _1832 = fma(_1829, cbSceneParam._m0[89u].z, fma(_1828, cbSceneParam._m0[89u].y, _1827 * cbSceneParam._m0[89u].x));
    float _1835 = fma(_1829, cbSceneParam._m0[90u].z, fma(_1828, cbSceneParam._m0[90u].y, _1827 * cbSceneParam._m0[90u].x));
    float _1838 = fma(_1829, cbSceneParam._m0[91u].z, fma(_1828, cbSceneParam._m0[91u].y, _1827 * cbSceneParam._m0[91u].x));
    float _1872 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1876 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1880 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1884 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1885 = _1872 / _1884;
    float _1886 = _1876 / _1884;
    float _1887 = _1880 / _1884;
    float _2034;
    float _2035;
    float _2036;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1914 = ((uint(_1887 > cbSceneParam._m0[59u].y) + uint(_1887 > cbSceneParam._m0[59u].x)) + uint(_1887 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1915 = _1914 + 43u;
        uint _1923 = _1914 + 44u;
        uint _1931 = _1914 + 45u;
        uint _1939 = _1914 + 46u;
        float _1950 = fma(_1884, cbSceneParam._m0[_1915].w, fma(_1880, cbSceneParam._m0[_1915].z, fma(_1876, cbSceneParam._m0[_1915].y, _1872 * cbSceneParam._m0[_1915].x)));
        float _1954 = fma(_1884, cbSceneParam._m0[_1923].w, fma(_1880, cbSceneParam._m0[_1923].z, fma(_1876, cbSceneParam._m0[_1923].y, _1872 * cbSceneParam._m0[_1923].x)));
        float _1962 = fma(_1884, cbSceneParam._m0[_1939].w, fma(_1880, cbSceneParam._m0[_1939].z, fma(_1876, cbSceneParam._m0[_1939].y, _1872 * cbSceneParam._m0[_1939].x)));
        float _1967 = cbSceneParam._m0[33u].z * _1962;
        float _1969 = cbSceneParam._m0[33u].w * _1962;
        float _1972 = fma(_1884, cbSceneParam._m0[_1931].w, fma(_1880, cbSceneParam._m0[_1931].z, fma(_1876, cbSceneParam._m0[_1931].y, _1872 * cbSceneParam._m0[_1931].x))) / _1962;
        float _2020 = (cbSceneParam._m0[33u].x - sqrt(((_1886 * _1886) + (_1885 * _1885)) + (_1887 * _1887))) * cbSceneParam._m0[33u].y;
        float _4295 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2027 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1967 + _1950) / _1962, (_1969 + _1954) / _1962), _1972), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1969 + _1950) / _1962, (_1954 - _1967) / _1962), _1972), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1950 - _1967) / _1962, (_1954 - _1969) / _1962), _1972), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1950 - _1969) / _1962, (_1967 + _1954) / _1962), _1972), 0.0)).x), vec4(0.25)));
        _2034 = 1.0 - (_2027 * cbSceneParam._m0[34u].x);
        _2035 = 1.0 - (_2027 * cbSceneParam._m0[34u].y);
        _2036 = 1.0 - (_2027 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2034 = 1.0;
        _2035 = 1.0;
        _2036 = 1.0;
    }
    float _2100;
    float _2102;
    float _2104;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2088 = fma(_1884, cbSceneParam._m0[63u].w, fma(_1880, cbSceneParam._m0[63u].z, fma(_1876, cbSceneParam._m0[63u].y, _1872 * cbSceneParam._m0[63u].x)));
        float _2089 = fma(_1884, cbSceneParam._m0[60u].w, fma(_1880, cbSceneParam._m0[60u].z, fma(_1876, cbSceneParam._m0[60u].y, _1872 * cbSceneParam._m0[60u].x))) / _2088;
        float _2090 = fma(_1884, cbSceneParam._m0[61u].w, fma(_1880, cbSceneParam._m0[61u].z, fma(_1876, cbSceneParam._m0[61u].y, _1872 * cbSceneParam._m0[61u].x))) / _2088;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2089 >= cbSceneParam._m0[64u].x) && (_2090 >= cbSceneParam._m0[64u].y)) && (_2089 <= cbSceneParam._m0[64u].z)) && (_2090 <= cbSceneParam._m0[64u].w))
        {
            float _2228 = fma(_1884, cbSceneParam._m0[62u].w, fma(_1880, cbSceneParam._m0[62u].z, fma(_1876, cbSceneParam._m0[62u].y, _1872 * cbSceneParam._m0[62u].x))) / _2088;
            float _2232 = isnan(cbSceneParam._m0[41u].w) ? _2228 : (isnan(_2228) ? cbSceneParam._m0[41u].w : max(_2228, cbSceneParam._m0[41u].w));
            float _2275 = (cbSceneParam._m0[33u].x - sqrt(((_1886 * _1886) + (_1885 * _1885)) + (_1887 * _1887))) * cbSceneParam._m0[33u].y;
            float _4311 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
            float _2282 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2089, cbSceneParam._m0[33u].w + _2090), _2232), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2089, _2090 - cbSceneParam._m0[33u].z), _2232), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2089 - cbSceneParam._m0[33u].z, _2090 - cbSceneParam._m0[33u].w), _2232), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2089 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2090), _2232), 0.0)).x), vec4(0.25)));
            float _2286 = 1.0 - (_2282 * cbSceneParam._m0[34u].x);
            float _2287 = 1.0 - (_2282 * cbSceneParam._m0[34u].y);
            float _2288 = 1.0 - (_2282 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2288) ? _2036 : (isnan(_2036) ? _2288 : min(_2036, _2288));
            frontier_phi_34_33_ladder_1 = isnan(_2287) ? _2035 : (isnan(_2035) ? _2287 : min(_2035, _2287));
            frontier_phi_34_33_ladder_2 = isnan(_2286) ? _2034 : (isnan(_2034) ? _2286 : min(_2034, _2286));
        }
        else
        {
            frontier_phi_34_33_ladder = _2036;
            frontier_phi_34_33_ladder_1 = _2035;
            frontier_phi_34_33_ladder_2 = _2034;
        }
        _2100 = frontier_phi_34_33_ladder_2;
        _2102 = frontier_phi_34_33_ladder_1;
        _2104 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2100 = _2034;
        _2102 = _2035;
        _2104 = _2036;
    }
    uvec4 _2109 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _2111 = _2109.x * 14u;
    uint _2112 = _2111 + 13u;
    float _2119 = _815 + (-1.0);
    float _2124 = (cbLight._m0[_2112].x * _2119) + 1.0;
    float _2125 = (cbLight._m0[_2112].y * _2119) + 1.0;
    float _2126 = (cbLight._m0[_2112].z * _2119) + 1.0;
    float _2127 = (cbLight._m0[_2112].w * _2119) + 1.0;
    uint _2128 = _2111 + 5u;
    float _2134 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
    uint _2138 = _2111 + 4u;
    float _2147 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
    uint _2151 = _2111 | 1u;
    float _2162 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_665, _666, _667));
    float _2165 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_665, _666, _667));
    float _4347 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _4358 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2170 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * 0.3183098733425140380859375;
    float _2172 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * 0.3183098733425140380859375;
    float _2179 = ((cbLight._m0[_2128].x * _2134) * _2172) + (((cbLight._m0[_2138].x * _2100) * _2147) * _2170);
    float _2180 = ((_2134 * cbLight._m0[_2128].y) * _2172) + (((cbLight._m0[_2138].y * _2102) * _2147) * _2170);
    float _2181 = ((_2134 * cbLight._m0[_2128].z) * _2172) + (((cbLight._m0[_2138].z * _2104) * _2147) * _2170);
    uvec4 _2185 = floatBitsToUint(cbLight._m0[_2111 + 12u]);
    bool _2187 = _2185.x == 0u;
    float _2289;
    float _2291;
    float _2293;
    if (_2187)
    {
        _2289 = _2179;
        _2291 = _2180;
        _2293 = _2181;
    }
    else
    {
        uint _2297 = _2111 + 6u;
        float _2313 = (dot(vec3(cbLight._m0[_2111 + 2u].xyz), vec3(_665, _666, _667)) * 0.5) + 0.5;
        float _2314 = _2313 * _2313;
        float _4369 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2315 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2316 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2289 = (((cbLight._m0[_2297].x * 0.3183098733425140380859375) * _2315) * _2316) + _2179;
        _2291 = (((cbLight._m0[_2297].y * 0.3183098733425140380859375) * _2315) * _2316) + _2180;
        _2293 = (((cbLight._m0[_2297].z * 0.3183098733425140380859375) * _2315) * _2316) + _2181;
    }
    bool _2296 = _2185.y == 0u;
    float _2351;
    float _2353;
    float _2355;
    if (_2296)
    {
        _2351 = _2289;
        _2353 = _2291;
        _2355 = _2293;
    }
    else
    {
        uint _2513 = _2111 + 7u;
        float _2529 = (dot(vec3(cbLight._m0[_2111 + 3u].xyz), vec3(_665, _666, _667)) * 0.5) + 0.5;
        float _2530 = _2529 * _2529;
        float _4385 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2531 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2532 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2351 = (((cbLight._m0[_2513].x * 0.3183098733425140380859375) * _2531) * _2532) + _2289;
        _2353 = (((cbLight._m0[_2513].y * 0.3183098733425140380859375) * _2531) * _2532) + _2291;
        _2355 = (((cbLight._m0[_2513].z * 0.3183098733425140380859375) * _2531) * _2532) + _2293;
    }
    uint _2358 = _2111 + 8u;
    float _2371 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2111].w)) * _668) * 0.949999988079071044921875);
    float _2372 = _2371 * _2371;
    float _2373 = cbLight._m0[_2111].x + _744;
    float _2374 = cbLight._m0[_2111].y + _745;
    float _2375 = cbLight._m0[_2111].z + _746;
    float _2379 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
    float _2380 = _2379 * _2373;
    float _2381 = _2379 * _2374;
    float _2382 = _2379 * _2375;
    float _2383 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2111].xyz));
    float _4401 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2386 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _4412 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _2387 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _2388 = dot(vec3(_665, _666, _667), vec3(_2380, _2381, _2382));
    float _4423 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2391 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2392 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_2380, _2381, _2382));
    float _4434 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2396 = _2372 * _2372;
    float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
    float _2411 = (exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2412 = 1.0 - _2372;
    float _2423 = (0.5 / (((_2387 * ((_2386 * _2412) + _2372)) + 9.9999999392252902907785028219223e-09) + (((_2387 * _2412) + _2372) * _2386))) * _2386;
    float _4445 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2425 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
    uint _2439 = _2111 + 9u;
    float _2450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2151].w)) * _668) * 0.949999988079071044921875);
    float _2451 = _2450 * _2450;
    float _2452 = cbLight._m0[_2151].x + _744;
    float _2453 = cbLight._m0[_2151].y + _745;
    float _2454 = cbLight._m0[_2151].z + _746;
    float _2458 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
    float _2459 = _2458 * _2452;
    float _2460 = _2458 * _2453;
    float _2461 = _2458 * _2454;
    float _2462 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2151].xyz));
    float _4456 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2465 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2466 = dot(vec3(_665, _666, _667), vec3(_2459, _2460, _2461));
    float _4467 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2470 = dot(vec3(cbLight._m0[_2151].xyz), vec3(_2459, _2460, _2461));
    float _4478 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2474 = _2451 * _2451;
    float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
    float _2487 = (exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2488 = 1.0 - _2451;
    float _2498 = (0.5 / (((_2387 * ((_2465 * _2488) + _2451)) + 9.9999999392252902907785028219223e-09) + (((_2387 * _2488) + _2451) * _2465))) * _2465;
    float _4489 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2500 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
    float _2510 = (((_2487 * cbLight._m0[_2439].x) * _2500) * _2134) + ((((cbLight._m0[_2358].x * _2100) * _2411) * _2425) * _2147);
    float _2511 = (((_2487 * cbLight._m0[_2439].y) * _2500) * _2134) + ((((cbLight._m0[_2358].y * _2102) * _2411) * _2425) * _2147);
    float _2512 = (((_2487 * cbLight._m0[_2439].z) * _2500) * _2134) + ((((cbLight._m0[_2358].z * _2104) * _2411) * _2425) * _2147);
    float _2568;
    float _2570;
    float _2572;
    if (_2187)
    {
        _2568 = _2510;
        _2570 = _2511;
        _2572 = _2512;
    }
    else
    {
        uint _2574 = _2111 + 2u;
        uint _2578 = _2111 + 10u;
        float _2592 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2574].w)) * _668) * 0.949999988079071044921875);
        float _2593 = _2592 * _2592;
        float _2594 = cbLight._m0[_2574].x + _744;
        float _2595 = cbLight._m0[_2574].y + _745;
        float _2596 = cbLight._m0[_2574].z + _746;
        float _2600 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
        float _2601 = _2600 * _2594;
        float _2602 = _2600 * _2595;
        float _2603 = _2600 * _2596;
        float _2604 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2574].xyz));
        float _4500 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2607 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2608 = dot(vec3(_665, _666, _667), vec3(_2601, _2602, _2603));
        float _4511 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2612 = dot(vec3(cbLight._m0[_2574].xyz), vec3(_2601, _2602, _2603));
        float _4522 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2616 = _2593 * _2593;
        float _2620 = ((_2611 * _2611) * (_2616 + (-1.0))) + 1.0;
        float _2629 = (exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2630 = 1.0 - _2593;
        float _2640 = (0.5 / (((_2387 * ((_2607 * _2630) + _2593)) + 9.9999999392252902907785028219223e-09) + (((_2387 * _2630) + _2593) * _2607))) * _2607;
        float _4533 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2642 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2616 / ((_2620 * _2620) * 3.141590118408203125));
        float _2643 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2568 = (((_2629 * cbLight._m0[_2578].x) * _2642) * _2643) + _2510;
        _2570 = (((_2629 * cbLight._m0[_2578].y) * _2642) * _2643) + _2511;
        _2572 = (((_2629 * cbLight._m0[_2578].z) * _2642) * _2643) + _2512;
    }
    float _2674;
    float _2676;
    float _2678;
    if (_2296)
    {
        _2674 = _2568;
        _2676 = _2570;
        _2678 = _2572;
    }
    else
    {
        uint _2685 = _2111 + 3u;
        uint _2689 = _2111 + 11u;
        float _2703 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2685].w)) * _668) * 0.949999988079071044921875);
        float _2704 = _2703 * _2703;
        float _2705 = cbLight._m0[_2685].x + _744;
        float _2706 = cbLight._m0[_2685].y + _745;
        float _2707 = cbLight._m0[_2685].z + _746;
        float _2711 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
        float _2712 = _2711 * _2705;
        float _2713 = _2711 * _2706;
        float _2714 = _2711 * _2707;
        float _2715 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2685].xyz));
        float _4549 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2718 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2719 = dot(vec3(_665, _666, _667), vec3(_2712, _2713, _2714));
        float _4560 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2722 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2723 = dot(vec3(cbLight._m0[_2685].xyz), vec3(_2712, _2713, _2714));
        float _4571 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2727 = _2704 * _2704;
        float _2731 = ((_2722 * _2722) * (_2727 + (-1.0))) + 1.0;
        float _2740 = (exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2741 = 1.0 - _2704;
        float _2751 = (0.5 / (((_2387 * ((_2718 * _2741) + _2704)) + 9.9999999392252902907785028219223e-09) + (((_2387 * _2741) + _2704) * _2718))) * _2718;
        float _4582 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2753 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2727 / ((_2731 * _2731) * 3.141590118408203125));
        float _2754 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
        _2674 = (((_2740 * cbLight._m0[_2689].x) * _2753) * _2754) + _2568;
        _2676 = (((_2740 * cbLight._m0[_2689].y) * _2753) * _2754) + _2570;
        _2678 = (((_2740 * cbLight._m0[_2689].z) * _2753) * _2754) + _2572;
    }
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    if (_2109.y == 0u)
    {
        uvec4 _2775 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2776 = _2775.x;
        uint _2787 = uint((float(_2775.y) * floor(float(uint(cbSceneParam._m0[85u].y * _753) / _2776))) + floor(float(uint(cbSceneParam._m0[85u].x * _752) / _2776)));
        float _2797 = (log2(_1887 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2798 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        uint _2801 = uint(isnan(14.0) ? _2798 : (isnan(_2798) ? 14.0 : min(_2798, 14.0)));
        uvec4 _2806 = texelFetch(g_lightClusterGridBuffer, int(((_2801 << 2u) + (_2787 << 6u)) >> 2u));
        uint _2807 = _2806.x;
        uint _2808 = _2775.z;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        if (((((1u << ((_2808 >> 4u) & 15u)) + 4294967295u) & _2807) == 0u) || ((_2808 & 240u) == 0u))
        {
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
            _2897 = 0.0;
        }
        else
        {
            float _2888;
            float _2890;
            float _2892;
            float _2894;
            float _2896;
            float _2898;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            uint _3038 = 0u;
            uint _3047;
            bool _3048;
            for (;;)
            {
                _3047 = texelFetch(g_lightClassification, int((((_2801 << 5u) + (_2787 << 9u)) + (_3038 << 2u)) >> 2u)).x;
                _3048 = _3047 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3048)
                {
                    frontier_phi_66_pred = _3037;
                    frontier_phi_66_pred_1 = _3036;
                    frontier_phi_66_pred_2 = _3035;
                    frontier_phi_66_pred_3 = _3034;
                    frontier_phi_66_pred_4 = _3033;
                    frontier_phi_66_pred_5 = _3032;
                }
                else
                {
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    uint _3162;
                    _3156 = _3032;
                    _3157 = _3033;
                    _3158 = _3034;
                    _3159 = _3035;
                    _3160 = _3036;
                    _3161 = _3037;
                    _3162 = _3047;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    for (;;)
                    {
                        uint _3166 = uint(findLSB(_3162)) + (_3038 << 5u);
                        uint _3163 = (_3162 + 4294967295u) & _3162;
                        uint _3168 = _3166 * 48u;
                        vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3168)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 3u)).x));
                        uint _3188 = (_3166 * 48u) + 4u;
                        vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3188)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 3u)).x));
                        uint _3207 = (_3166 * 48u) + 8u;
                        vec3 _3218 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3207)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 2u)).x));
                        float _3222 = _3182.x - _1885;
                        float _3223 = _3182.y - _1886;
                        float _3224 = _3182.z - _1887;
                        float _3225 = dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224));
                        float _3228 = inversesqrt(_3225);
                        float _3229 = _3228 * _3222;
                        float _3230 = _3228 * _3223;
                        float _3231 = _3228 * _3224;
                        float _3232 = dot(vec3(_771, _774, _777), vec3(_3229, _3230, _3231));
                        float _3237 = 1.0 - (_3225 * _3182.w);
                        float _4608 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3238 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3239 = sqrt(_3225) * _3201.w;
                        float _3242 = 1.39999997615814208984375 / (_3239 + 1.39999997615814208984375);
                        float _3243 = _3242 * _3242;
                        float _3246 = ((1.0 - _3243) * _3232) + _3243;
                        float _3249 = _3239 * _3239;
                        float _3253 = ((isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0))) * _3238) / ((_3249 * 0.699999988079071044921875) + 1.0);
                        float _3257 = (-0.0) - _1885;
                        float _3258 = (-0.0) - _1886;
                        float _3259 = (-0.0) - _1887;
                        float _3263 = inversesqrt(dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259)));
                        float _3264 = _3263 * _3257;
                        float _3265 = _3263 * _3258;
                        float _3266 = _3263 * _3259;
                        float _3273 = exp2(log2(1.0 / ((_3249 * 3.5) + 5.0)) * 0.25);
                        float _3274 = 1.0 - _831;
                        float _3281 = sqrt(1.0 - ((1.0 - (_3274 * _3274)) * (1.0 - (_3273 * _3273))));
                        float _3282 = _3281 * _3281;
                        float _3283 = _3282 * _3282;
                        float _3284 = _3264 + _3229;
                        float _3285 = _3265 + _3230;
                        float _3286 = _3266 + _3231;
                        float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                        float _3294 = dot(vec3(_771, _774, _777), vec3(_3264, _3265, _3266));
                        float _4624 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3298 = dot(vec3(_771, _774, _777), vec3(_3290 * _3284, _3290 * _3285, _3290 * _3286));
                        float _4635 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3301 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3305 = ((_3301 * _3301) * (_3283 + (-1.0))) + 1.0;
                        float _3306 = _3242 * _3282;
                        float _3307 = _3306 * _3306;
                        float _3310 = ((1.0 - _3307) * _3232) + _3307;
                        float _4646 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3311 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3312 = 1.0 - _3282;
                        float _3322 = (0.5 / (((_3311 * ((_3297 * _3312) + _3282)) + 9.9999999392252902907785028219223e-09) + (((_3311 * _3312) + _3282) * _3297))) * _3311;
                        float _4657 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3332 = (((_3283 * 3.1415927410125732421875) * (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) / ((_3305 * _3305) * ((_3249 * 2.1991131305694580078125) + 3.141590118408203125))) * _3238;
                        _3091 = (_3253 * _3201.x) + _3159;
                        _3092 = (_3253 * _3201.y) + _3160;
                        _3093 = (_3253 * _3201.z) + _3161;
                        _3088 = (_3332 * _3218.x) + _3156;
                        _3089 = (_3332 * _3218.y) + _3157;
                        _3090 = (_3332 * _3218.z) + _3158;
                        if (_3163 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3156 = _3088;
                            _3157 = _3089;
                            _3158 = _3090;
                            _3159 = _3091;
                            _3160 = _3092;
                            _3161 = _3093;
                            _3162 = _3163;
                        }
                    }
                    frontier_phi_66_pred = _3093;
                    frontier_phi_66_pred_1 = _3092;
                    frontier_phi_66_pred_2 = _3091;
                    frontier_phi_66_pred_3 = _3090;
                    frontier_phi_66_pred_4 = _3089;
                    frontier_phi_66_pred_5 = _3088;
                }
                _2898 = frontier_phi_66_pred;
                _2896 = frontier_phi_66_pred_1;
                _2894 = frontier_phi_66_pred_2;
                _2892 = frontier_phi_66_pred_3;
                _2890 = frontier_phi_66_pred_4;
                _2888 = frontier_phi_66_pred_5;
                uint _3039 = _3038 + 1u;
                if (_3039 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3032 = _2888;
                    _3033 = _2890;
                    _3034 = _2892;
                    _3035 = _2894;
                    _3036 = _2896;
                    _3037 = _2898;
                    _3038 = _3039;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
            _2897 = _2898;
        }
        uvec4 _2901 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2902 = _2901.z;
        uint _2904 = (_2902 >> 8u) & 15u;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        if (((4294967295u << _2904) & _2807) == 0u)
        {
            _3000 = _2887;
            _3002 = _2889;
            _3004 = _2891;
            _3006 = _2893;
            _3008 = _2895;
            _3010 = _2897;
        }
        else
        {
            float _3025 = inversesqrt(dot(vec3(_1885, _1886, _1887), vec3(_1885, _1886, _1887)));
            float _3026 = _3025 * _1885;
            float _3027 = _3025 * _1886;
            float _3028 = _3025 * _1887;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2904 < ((_2902 >> 12u) & 15u))
            {
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3009;
                float _3011;
                float _3139 = _2887;
                float _3140 = _2889;
                float _3141 = _2891;
                float _3142 = _2893;
                float _3143 = _2895;
                float _3144 = _2897;
                uint _3145 = _2904;
                uint _3154;
                bool _3155;
                for (;;)
                {
                    _3154 = texelFetch(g_lightClassification, int((((_2801 << 5u) + (_2787 << 9u)) + (_3145 << 2u)) >> 2u)).x;
                    _3155 = _3154 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3155)
                    {
                        frontier_phi_72_pred = _3144;
                        frontier_phi_72_pred_1 = _3143;
                        frontier_phi_72_pred_2 = _3142;
                        frontier_phi_72_pred_3 = _3141;
                        frontier_phi_72_pred_4 = _3140;
                        frontier_phi_72_pred_5 = _3139;
                    }
                    else
                    {
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3350 = _3139;
                        float _3351 = _3140;
                        float _3352 = _3141;
                        float _3353 = _3142;
                        float _3354 = _3143;
                        float _3355 = _3144;
                        uint _3356 = _3154;
                        uint _3357;
                        vec4 _3382;
                        float _3383;
                        vec4 _3398;
                        vec3 _3410;
                        vec4 _3425;
                        vec4 _3441;
                        float _3487;
                        bool _3488;
                        for (;;)
                        {
                            uint _3367 = ((_3145 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3356));
                            _3357 = (_3356 + 4294967295u) & _3356;
                            uint _3369 = _3367 * 40u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            _3383 = _3382.w;
                            uint _3385 = (_3367 * 40u) + 4u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3400 = (_3367 * 40u) + 8u;
                            _3410 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x));
                            uint _3412 = (_3367 * 40u) + 16u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3428 = (_3367 * 40u) + 20u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3443 = (_3367 * 40u) + 24u;
                            vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3462 = (_3367 * 40u) + 28u;
                            vec4 _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            _3487 = fma(_1887, _3475.z, fma(_1886, _3475.y, _3475.x * _1885)) + _3475.w;
                            _3488 = !((fma(_1887, _3456.z, fma(_1886, _3456.y, _3456.x * _1885)) + _3456.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3488)
                            {
                                float _3515 = _3382.x - _1885;
                                float _3516 = _3382.y - _1886;
                                float _3517 = _3382.z - _1887;
                                float _3518 = dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517));
                                float _3521 = inversesqrt(_3518);
                                float _3522 = _3521 * _3515;
                                float _3523 = _3521 * _3516;
                                float _3524 = _3521 * _3517;
                                float _3528 = 1.0 - (_3518 / (_3383 * _3383));
                                float _4668 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3529 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3533 = sqrt(_3518) * _3398.w;
                                float _3535 = 1.39999997615814208984375 / (_3533 + 1.39999997615814208984375);
                                float _3536 = _3535 * _3535;
                                float _3539 = ((1.0 - _3536) * dot(vec3(_3522, _3523, _3524), vec3(_771, _774, _777))) + _3536;
                                float _3542 = _3533 * _3533;
                                float _3546 = (fma(_1887, _3425.z, fma(_1886, _3425.y, _3425.x * _1885)) + _3425.w) / _3487;
                                float _3547 = (fma(_1887, _3441.z, fma(_1886, _3441.y, _3441.x * _1885)) + _3441.w) / _3487;
                                float _3551 = 1.0 - dot(vec2(_3546, _3547), vec2(_3546, _3547));
                                float _4684 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3553 = _3552 * (((isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0))) * _3529) / ((_3542 * 0.699999988079071044921875) + 1.0));
                                float _3565 = exp2(log2(1.0 / ((_3542 * 3.5) + 5.0)) * 0.25);
                                float _3566 = 1.0 - _831;
                                float _3573 = sqrt(1.0 - ((1.0 - (_3566 * _3566)) * (1.0 - (_3565 * _3565))));
                                float _3574 = _3573 * _3573;
                                float _3575 = _3574 * _3574;
                                float _3576 = _3522 - _3026;
                                float _3577 = _3523 - _3027;
                                float _3578 = _3524 - _3028;
                                float _3582 = inversesqrt(dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578)));
                                float _3586 = dot(vec3(_771, _774, _777), vec3((-0.0) - _3026, (-0.0) - _3027, (-0.0) - _3028));
                                float _4695 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3589 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3590 = dot(vec3(_771, _774, _777), vec3(_3582 * _3576, _3582 * _3577, _3582 * _3578));
                                float _4706 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3593 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3597 = ((_3593 * _3593) * (_3575 + (-1.0))) + 1.0;
                                float _3598 = _3535 * _3574;
                                float _3599 = _3598 * _3598;
                                float _3605 = ((1.0 - _3599) * dot(vec3(_771, _774, _777), vec3(_3522, _3523, _3524))) + _3599;
                                float _4717 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3607 = 1.0 - _3574;
                                float _3617 = (0.5 / (((_3606 * ((_3589 * _3607) + _3574)) + 9.9999999392252902907785028219223e-09) + (((_3606 * _3607) + _3574) * _3589))) * _3606;
                                float _4728 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3627 = (_3552 * _3529) * (((_3575 * 3.1415927410125732421875) * (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) / ((_3597 * _3597) * ((_3542 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3553 * _3398.y;
                                frontier_phi_78_pred_1 = _3553 * _3398.x;
                                frontier_phi_78_pred_2 = _3627 * _3410.z;
                                frontier_phi_78_pred_3 = _3627 * _3410.y;
                                frontier_phi_78_pred_4 = _3627 * _3410.x;
                                frontier_phi_78_pred_5 = _3553 * _3398.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3635 = frontier_phi_78_pred;
                            _3634 = frontier_phi_78_pred_1;
                            _3633 = frontier_phi_78_pred_2;
                            _3632 = frontier_phi_78_pred_3;
                            _3631 = frontier_phi_78_pred_4;
                            _3636 = frontier_phi_78_pred_5;
                            _3340 = _3634 + _3353;
                            _3341 = _3635 + _3354;
                            _3342 = _3636 + _3355;
                            _3337 = _3631 + _3350;
                            _3338 = _3632 + _3351;
                            _3339 = _3633 + _3352;
                            if (_3357 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3357;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3342;
                        frontier_phi_72_pred_1 = _3341;
                        frontier_phi_72_pred_2 = _3340;
                        frontier_phi_72_pred_3 = _3339;
                        frontier_phi_72_pred_4 = _3338;
                        frontier_phi_72_pred_5 = _3337;
                    }
                    _3011 = frontier_phi_72_pred;
                    _3009 = frontier_phi_72_pred_1;
                    _3007 = frontier_phi_72_pred_2;
                    _3005 = frontier_phi_72_pred_3;
                    _3003 = frontier_phi_72_pred_4;
                    _3001 = frontier_phi_72_pred_5;
                    uint _3146 = _3145 + 1u;
                    if (_3146 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3139 = _3001;
                        _3140 = _3003;
                        _3141 = _3005;
                        _3142 = _3007;
                        _3143 = _3009;
                        _3144 = _3011;
                        _3145 = _3146;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3011;
                frontier_phi_60_61_ladder_1 = _3009;
                frontier_phi_60_61_ladder_2 = _3005;
                frontier_phi_60_61_ladder_3 = _3003;
                frontier_phi_60_61_ladder_4 = _3001;
                frontier_phi_60_61_ladder_5 = _3007;
            }
            else
            {
                frontier_phi_60_61_ladder = _2897;
                frontier_phi_60_61_ladder_1 = _2895;
                frontier_phi_60_61_ladder_2 = _2891;
                frontier_phi_60_61_ladder_3 = _2889;
                frontier_phi_60_61_ladder_4 = _2887;
                frontier_phi_60_61_ladder_5 = _2893;
            }
            _3000 = frontier_phi_60_61_ladder_4;
            _3002 = frontier_phi_60_61_ladder_3;
            _3004 = frontier_phi_60_61_ladder_2;
            _3006 = frontier_phi_60_61_ladder_5;
            _3008 = frontier_phi_60_61_ladder_1;
            _3010 = frontier_phi_60_61_ladder;
        }
        float _3015 = isnan(1.0) ? _815 : (isnan(_815) ? 1.0 : min(_815, 1.0));
        _2820 = (_3015 * _3006) + _2351;
        _2822 = (_3015 * _3008) + _2353;
        _2824 = (_3015 * _3010) + _2355;
        _2826 = ((_3000 * 0.039999999105930328369140625) * _3015) + _2674;
        _2828 = ((_3002 * 0.039999999105930328369140625) * _3015) + _2676;
        _2830 = ((_3004 * 0.039999999105930328369140625) * _3015) + _2678;
    }
    else
    {
        _2820 = _2351;
        _2822 = _2353;
        _2824 = _2355;
        _2826 = _2674;
        _2828 = _2676;
        _2830 = _2678;
    }
    float _4744 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _4755 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _4766 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    uint _2850 = _243 + 6u;
    float _2858 = _752 / cbSceneParam._m0[86u].x;
    float _2859 = _753 / cbSceneParam._m0[86u].y;
    vec4 _2873 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2858, _2859, (log2((isnan(cbSceneParam._m0[77u].w) ? _686 : (isnan(_686) ? cbSceneParam._m0[77u].w : min(_686, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2875 = _2873.x;
    float _2876 = _2873.y;
    float _2877 = _2873.z;
    float _2878 = _2873.w;
    float _2950;
    float _2952;
    float _2954;
    float _2956;
    if (_686 > cbSceneParam._m0[78u].w)
    {
        float _2912 = isnan(_686) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _686 : min(cbSceneParam._m0[80u].w, _686));
        float _2913 = _2912 / _686;
        float _2924 = _2913 * _737;
        float _2925 = _738 * _2913;
        float _2926 = (-0.0) - _2925;
        float _2928 = _2913 * _739;
        float _2930 = (cbSceneParam._m0[77u].w * _2926) / _2912;
        float _2931 = _2930 + cbSceneParam._m0[79u].w;
        float _2932 = cbSceneParam._m0[79u].w - _2925;
        float _2938 = sqrt(((_2924 * _2924) + (_2925 * _2925)) + (_2928 * _2928));
        float _2941 = (1.0 - (cbSceneParam._m0[77u].w / _2912)) * _2938;
        float _2946 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2948 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3101;
        if (abs((_2926 - _2930) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3101 = ((((_2931 > 0.0) ? exp2(_2946 * _2931) : (2.0 - exp2(_2948 * _2931))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2941;
        }
        else
        {
            float _3061 = 1.0 / cbSceneParam._m0[80u].x;
            float _3062 = isnan(_2932) ? _2931 : (isnan(_2931) ? _2932 : max(_2931, _2932));
            float _3063 = isnan(_2932) ? _2931 : (isnan(_2931) ? _2932 : min(_2931, _2932));
            float _3072 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : min(_3062, 0.0));
            float _3073 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : min(_3063, 0.0));
            _3101 = ((abs(_2938 / _2926) * cbSceneParam._m0[80u].y) * ((((_3072 - _3073) * 2.0) - ((exp2(_2946 * (isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0)))) - exp2(_2946 * (isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0))))) * _3061)) - ((exp2(_2948 * _3072) - exp2(_2948 * _3073)) * _3061))) + (_2941 * cbSceneParam._m0[80u].z);
        }
        vec4 _3103 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2858, _2859, 1.0), 0.0);
        float _3112 = exp2((_3101 * (-1.44269502162933349609375)) * (1.0 - _3103.w));
        float _3113 = log2(_3112);
        float _3129 = log2(_2878);
        _2950 = (exp2(_3129 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].x)) * _3103.x) / cbSceneParam._m0[78u].x)) + _2875;
        _2952 = (exp2(_3129 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].y)) * _3103.y) / cbSceneParam._m0[78u].y)) + _2876;
        _2954 = (exp2(_3129 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].z)) * _3103.z) / cbSceneParam._m0[78u].z)) + _2877;
        _2956 = _3112 * _2878;
    }
    else
    {
        _2950 = _2875;
        _2952 = _2876;
        _2954 = _2877;
        _2956 = _2878;
    }
    float _2968 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2969 = _2968 == 3.0;
    float _2970 = log2(_2956);
    float _2977 = exp2(_2970 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2820 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _815))) + ((_2826 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1618)) * cbPerFrame._m0[3u].x));
    float _2978 = exp2(_2970 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2822 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _815))) + ((_2828 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1618)) * cbPerFrame._m0[3u].x));
    float _2979 = exp2(_2970 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2824 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _815))) + ((_2830 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1618)) * cbPerFrame._m0[3u].x));
    float _2988 = (_2968 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2988 * (_2969 ? _2977 : (_2977 + (cbSceneParam._m0[72u].w * _2950)));
    SV_Target.y = _2988 * (_2969 ? _2978 : (_2978 + (cbSceneParam._m0[72u].w * _2952)));
    SV_Target.z = _2988 * (_2969 ? _2979 : (_2979 + (cbSceneParam._m0[72u].w * _2954)));
    SV_Target.w = cbInstanceData._m0[_2850].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2850].w;
}


