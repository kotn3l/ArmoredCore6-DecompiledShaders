#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1198;
float _3843;
float _3844;
float _3845;
float _3846;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _292 = _286.x * cbMtdParam._m0[9u].x;
    float _293 = _286.y * cbMtdParam._m0[9u].y;
    float _294 = _286.z * cbMtdParam._m0[9u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _342 = _338.z;
    float _346 = (_338.x * 2.0) + (-1.0);
    float _347 = (_338.y * 2.0) + (-1.0);
    float _348 = dot(vec2(_346, _347), vec2(_346, _347));
    float _3855 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _354 = sqrt(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))));
    float _359 = _346 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_312.x * 2.0) + (-1.0)));
    float _360 = _347 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_312.y * 2.0) + (-1.0)));
    float _363 = fma(_354, _235, fma(_360, _242, _359 * _228));
    float _366 = fma(_354, _236, fma(_360, _243, _359 * _229));
    float _369 = fma(_354, _237, fma(_360, _244, _359 * _230));
    float _373 = inversesqrt(dot(vec3(_363, _366, _369), vec3(_363, _366, _369)));
    vec4 _409 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _411 = _409.x;
    float _412 = 1.0 - _411;
    float _419 = ((_411 - _412) * cbMtdParam._m0[24u].z) + _412;
    float _421 = (cbMtdParam._m0[19u].x + dot(vec4(_373 * _363, _373 * _366, _373 * _369, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_419 * cbMtdParam._m0[21u].z);
    float _3866 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _424 = (-0.0) - cbMtdParam._m0[24u].y;
    float _426 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _427 = isnan(1.0) ? _426 : (isnan(_426) ? 1.0 : min(_426, 1.0));
    float _434 = _422 - ((_422 * TEXCOORD_8.x) * _427);
    float _435 = _422 - ((_422 * TEXCOORD_8.y) * _427);
    float _436 = _422 - ((_422 * TEXCOORD_8.z) * _427);
    float _443 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _447 = ((isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : min(_443, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _455 = (_447 - (((_419 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _447))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3897 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _460 = ((_434 * (cbMtdParam._m0[17u].x - _292)) * _456) + _292;
    float _461 = ((_435 * (cbMtdParam._m0[17u].y - _293)) * _456) + _293;
    float _462 = ((_436 * (cbMtdParam._m0[17u].z - _294)) * _456) + _294;
    vec4 _474 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _476 = _474.x;
    float _477 = 1.0 - _476;
    float _506 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_476 - _477) * cbMtdParam._m0[24u].w) + _477) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3908 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _515 = ((((cbMtdParam._m0[10u].x - _460) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _507) + _460;
    float _516 = ((((cbMtdParam._m0[10u].y - _461) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _507) + _461;
    float _517 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _462)) * _507) + _462;
    float _522 = (((_312.z - _342) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _342;
    vec4 _536 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _543 = (_536.x * 2.0) + (-1.0);
    float _544 = (_536.y * 2.0) + (-1.0);
    float _545 = dot(vec2(_543, _544), vec2(_543, _544));
    float _3919 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _554 = (((_536.z - _522) * _434) * _456) + _522;
    float _557 = ((cbMtdParam._m0[23u].y - _554) * _507) + _554;
    vec4 _576 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _582 = (_576.x * 2.0) + (-1.0);
    float _583 = (_576.y * 2.0) + (-1.0);
    float _584 = dot(vec2(_582, _583), vec2(_582, _583));
    float _3930 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _604 = (((cbMtdParam._m0[21u].x * _359) + ((_543 - _359) * _434)) * _456) + _359;
    float _605 = (((cbMtdParam._m0[21u].x * _360) + ((_544 - _360) * _435)) * _456) + _360;
    float _606 = (((sqrt(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) - _354) * _436) * _456) + _354;
    float _617 = (((_582 - _604) + (_604 * cbMtdParam._m0[22u].z)) * _507) + _604;
    float _618 = (((_583 - _605) + (_605 * cbMtdParam._m0[22u].z)) * _507) + _605;
    float _619 = ((sqrt(1.0 - (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) - _606) * _507) + _606;
    float _621 = cbMtdParam._m0[22u].x + _338.w;
    float _624 = fma(_619, _235, fma(_618, _242, _617 * _228));
    float _627 = fma(_619, _236, fma(_618, _243, _617 * _229));
    float _630 = fma(_619, _237, fma(_618, _244, _617 * _230));
    float _634 = inversesqrt(dot(vec3(_624, _627, _630), vec3(_624, _627, _630)));
    float _635 = _634 * _624;
    float _636 = _634 * _627;
    float _637 = _634 * _630;
    float _3941 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _638 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _3952 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3963 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _3974 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3985 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _656 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _706 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _696);
    float _707 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _696);
    float _708 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _696);
    float _712 = inversesqrt(dot(vec3(_706, _707, _708), vec3(_706, _707, _708)));
    float _713 = _706 * _712;
    float _714 = _707 * _712;
    float _715 = _708 * _712;
    vec4 _720 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _722 = _720.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _879 = sqrt(((_706 * _706) + (_707 * _707)) + (_708 * _708));
        float _885 = (cbMatDynParam._m0[5u].x * _879) + cbMatDynParam._m0[5u].y;
        float _3996 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _890 = (cbMatDynParam._m0[5u].z * _879) + cbMatDynParam._m0[5u].w;
        float _4007 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) - _886)) + _886) < ((_722 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _734 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _735 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _755 = fma(_637, cbSceneParam._m0[5u].z, fma(_636, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _635));
    float _758 = fma(_637, cbSceneParam._m0[6u].z, fma(_636, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _635));
    float _761 = fma(_637, cbSceneParam._m0[7u].z, fma(_636, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _635));
    uint _774 = _247 + 9u;
    uint _775 = _774 + uint(cbMatDynParam._m0[0u].w);
    float _781 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * cbInstanceData._m0[_775].x;
    float _782 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * cbInstanceData._m0[_775].y;
    float _783 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * cbInstanceData._m0[_775].z;
    float _4018 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _4040 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    vec4 _795 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _734, cbSceneParam._m0[86u].y * _735));
    float _799 = ((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * TEXCOORD_5.w) * _795.x;
    float _800 = dot(vec3(_635, _636, _637), vec3(_713, _714, _715));
    float _803 = _800 * 2.0;
    float _807 = (_803 * _635) - _713;
    float _808 = (_803 * _636) - _714;
    float _809 = (_803 * _637) - _715;
    float _813 = abs(dot(vec3(_713, _714, _715), vec3(_635, _636, _637)));
    float _4051 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _815 = sqrt(_638);
    float _828 = exp2((_815 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_815 * 3.0));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1197;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _922 = fma(_868, cbModelParam._m0[26u].z, fma(_864, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _860));
        float _926 = fma(_868, cbModelParam._m0[27u].z, fma(_864, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _860));
        float _930 = fma(_868, cbModelParam._m0[28u].z, fma(_864, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _860));
        float _955 = _860 + _635;
        float _956 = _864 + _636;
        float _957 = _868 + _637;
        float _967 = fma(_957, cbModelParam._m0[26u].z, fma(_956, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _955)) - _922;
        float _968 = fma(_957, cbModelParam._m0[27u].z, fma(_956, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _955)) - _926;
        float _969 = fma(_957, cbModelParam._m0[28u].z, fma(_956, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _955)) - _930;
        float _973 = inversesqrt(dot(vec3(_967, _968, _969), vec3(_967, _968, _969)));
        float _986 = ((_973 * _967) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_922 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _987 = ((_973 * _968) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_926 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_973 * _969) / cbModelParam._m0[34u].z) + ((((((_930 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_986, _987, _988), 0.0);
        float _1025 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_991.x + (-0.5));
        float _1027 = _1025 * (_991.y + (-0.5));
        float _1028 = _1025 * (_991.z + (-0.5));
        float _1035 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_998.x + (-0.5));
        float _1037 = _1035 * (_998.y + (-0.5));
        float _1038 = _1035 * (_998.z + (-0.5));
        float _1045 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1005.x + (-0.5));
        float _1047 = _1045 * (_1005.y + (-0.5));
        float _1048 = _1045 * (_1005.z + (-0.5));
        float _1055 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1012.x + (-0.5));
        float _1057 = _1055 * (_1012.y + (-0.5));
        float _1058 = _1055 * (_1012.z + (-0.5));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = _1026 * 0.5;
        float _1063 = _1036 * 0.5;
        float _1064 = _1046 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1079 = (dot(vec3(_635, _636, _637), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1089 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _4099 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1091 + 1.0))) + _1096) * _1059;
        float _1106 = _1027 * 0.5;
        float _1107 = _1037 * 0.5;
        float _1108 = _1047 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_635, _636, _637), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _4132 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1133 + 1.0))) + _1138) * _1060;
        float _1148 = _1028 * 0.5;
        float _1149 = _1038 * 0.5;
        float _1150 = _1048 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_635, _636, _637), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _4165 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1175 + 1.0))) + _1180) * _1061;
        _1197 = _1028;
        _1199 = _1027;
        _1200 = _1026;
        _1201 = _1038;
        _1202 = _1037;
        _1203 = _1036;
        _1204 = _1048;
        _1205 = _1047;
        _1206 = _1046;
        _1207 = _1061;
        _1208 = _1060;
        _1209 = _1059;
        _1210 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
    }
    else
    {
        _1197 = _1198;
        _1199 = _1198;
        _1200 = _1198;
        _1201 = _1198;
        _1202 = _1198;
        _1203 = _1198;
        _1204 = _1198;
        _1205 = _1198;
        _1206 = _1198;
        _1207 = _1198;
        _1208 = _1198;
        _1209 = _1198;
        _1210 = 0.0;
        _1211 = 0.0;
        _1212 = 0.0;
    }
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1240 = fma(_868, cbModelParam._m0[30u].z, fma(_864, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _860));
        float _1244 = fma(_868, cbModelParam._m0[31u].z, fma(_864, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _860));
        float _1248 = fma(_868, cbModelParam._m0[32u].z, fma(_864, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _860));
        float _1271 = _860 + _635;
        float _1272 = _864 + _636;
        float _1273 = _868 + _637;
        float _1283 = fma(_1273, cbModelParam._m0[30u].z, fma(_1272, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1271)) - _1240;
        float _1284 = fma(_1273, cbModelParam._m0[31u].z, fma(_1272, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1271)) - _1244;
        float _1285 = fma(_1273, cbModelParam._m0[32u].z, fma(_1272, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1271)) - _1248;
        float _1289 = inversesqrt(dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285)));
        float _1302 = ((_1289 * _1283) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1240 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1303 = ((_1289 * _1284) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1244 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1289 * _1285) / cbModelParam._m0[35u].z) + ((((((_1248 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        float _1339 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1306.x + (-0.5));
        float _1341 = _1339 * (_1306.y + (-0.5));
        float _1342 = _1339 * (_1306.z + (-0.5));
        float _1349 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1313.x + (-0.5));
        float _1351 = _1349 * (_1313.y + (-0.5));
        float _1352 = _1349 * (_1313.z + (-0.5));
        float _1359 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1320.x + (-0.5));
        float _1361 = _1359 * (_1320.y + (-0.5));
        float _1362 = _1359 * (_1320.z + (-0.5));
        float _1369 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1327.x + (-0.5));
        float _1371 = _1369 * (_1327.y + (-0.5));
        float _1372 = _1369 * (_1327.z + (-0.5));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = _1340 * 0.5;
        float _1377 = _1350 * 0.5;
        float _1378 = _1360 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_635, _636, _637), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4228 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1403 + 1.0))) + _1408) * _1373;
        float _1418 = _1341 * 0.5;
        float _1419 = _1351 * 0.5;
        float _1420 = _1361 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_635, _636, _637), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4261 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1445 + 1.0))) + _1450) * _1374;
        float _1460 = _1342 * 0.5;
        float _1461 = _1352 * 0.5;
        float _1462 = _1362 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_635, _636, _637), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4294 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1487 + 1.0))) + _1492) * _1375;
        _1509 = _1342;
        _1510 = _1341;
        _1511 = _1340;
        _1512 = _1352;
        _1513 = _1351;
        _1514 = _1350;
        _1515 = _1362;
        _1516 = _1361;
        _1517 = _1360;
        _1518 = _1375;
        _1519 = _1374;
        _1520 = _1373;
        _1521 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
    }
    else
    {
        _1509 = _1198;
        _1510 = _1198;
        _1511 = _1198;
        _1512 = _1198;
        _1513 = _1198;
        _1514 = _1198;
        _1515 = _1198;
        _1516 = _1198;
        _1517 = _1198;
        _1518 = _1198;
        _1519 = _1198;
        _1520 = _1198;
        _1521 = 0.0;
        _1522 = 0.0;
        _1523 = 0.0;
    }
    float _1533 = (cbModelParam._m0[1u].x * (_1521 - _1210)) + _1210;
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1211)) + _1211;
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1212)) + _1212;
    float _1556 = fma(_1535, cbSceneParam._m0[89u].z, fma(_1534, cbSceneParam._m0[89u].y, _1533 * cbSceneParam._m0[89u].x));
    float _1559 = fma(_1535, cbSceneParam._m0[90u].z, fma(_1534, cbSceneParam._m0[90u].y, _1533 * cbSceneParam._m0[90u].x));
    float _1562 = fma(_1535, cbSceneParam._m0[91u].z, fma(_1534, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1533));
    float _1577 = _807 * 0.5;
    float _1578 = _808 * 0.5;
    float _1579 = _809 * 0.5;
    float _1580 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1583 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1586 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1509, _1512, _1515, _1518));
    float _1620;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1593 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1197, _1201, _1204, _1207));
        float _1597 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1199, _1202, _1205, _1208));
        float _1601 = dot(vec4(_1577, _1578, _1579, 1.0), vec4(_1200, _1203, _1206, _1209));
        float _1608 = dot(vec4(cbModelParam._m0[39u]), vec4(_1577, _1578, _1579, 1.0));
        _1620 = dot(vec3(isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1608) ? 0.0 : (isnan(0.0) ? _1608 : max(0.0, _1608))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1620 = 1.0;
    }
    float _1631;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1622 = dot(vec4(cbModelParam._m0[40u]), vec4(_1577, _1578, _1579, 1.0));
        _1631 = dot(vec3(isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1622) ? 0.0 : (isnan(0.0) ? _1622 : max(0.0, _1622))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1631 = 1.0;
    }
    float _1635 = (_1631 * cbModelParam._m0[1u].x) + (_1620 * (1.0 - cbModelParam._m0[1u].x));
    float _1645 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _638);
    float _1646 = isnan(_1645) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1645 : min(cbModelParam._m0[25u].z, _1645));
    float _1727;
    float _1729;
    float _1731;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1694 = fma(_868, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860)) + cbModelParam._m0[13u].w;
        float _1698 = fma(_868, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860)) + cbModelParam._m0[14u].w;
        float _1702 = fma(_868, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860)) + cbModelParam._m0[15u].w;
        float _1705 = fma(_809, cbModelParam._m0[13u].z, fma(_808, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _807));
        float _1708 = fma(_809, cbModelParam._m0[14u].z, fma(_808, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _807));
        float _1711 = fma(_809, cbModelParam._m0[15u].z, fma(_808, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _807));
        float _1739;
        if (_1705 > 0.0)
        {
            _1739 = abs((1.0 - _1694) / _1705);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1694 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1739 = frontier_phi_17_15_ladder;
        }
        float _1910;
        if (_1708 > 0.0)
        {
            _1910 = abs((1.0 - _1698) / _1708);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1698 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1910 = frontier_phi_26_22_ladder;
        }
        float _2206;
        if (_1711 > 0.0)
        {
            _2206 = abs((1.0 - _1702) / _1711);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1702 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2206 = frontier_phi_38_33_ladder;
        }
        float _2208 = isnan(_1910) ? _1739 : (isnan(_1739) ? _1910 : min(_1739, _1910));
        float _2209 = isnan(_2206) ? _2208 : (isnan(_2208) ? _2206 : min(_2208, _2206));
        float _2213 = (_2209 * _1705) + _1694;
        float _2214 = (_2209 * _1708) + _1698;
        float _2215 = (_2209 * _1711) + _1702;
        float _2216 = _2209 * 9.9999997473787516355514526367188e-05;
        float _2218 = (-1.0) - _2216;
        float _2220 = _2216 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2215 > _2220) || ((_2215 < _2218) || ((_2214 > _2220) || ((_2214 < _2218) || ((_2213 < _2218) || (_2213 > _2220))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2360 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2215, cbModelParam._m0[9u].z, fma(_2214, cbModelParam._m0[9u].y, _2213 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2215, cbModelParam._m0[10u].z, fma(_2214, cbModelParam._m0[10u].y, _2213 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2215, cbModelParam._m0[11u].z, fma(_2214, cbModelParam._m0[11u].y, _2213 * cbModelParam._m0[11u].x))), _1646);
            frontier_phi_16_38_ladder = _2360.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2360.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2360.x * cbModelParam._m0[1u].y;
        }
        _1727 = frontier_phi_16_38_ladder_2;
        _1729 = frontier_phi_16_38_ladder_1;
        _1731 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1715 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_807, _808, _809), _1646);
        _1727 = _1715.x * cbModelParam._m0[1u].y;
        _1729 = _1715.y * cbModelParam._m0[1u].y;
        _1731 = _1715.z * cbModelParam._m0[1u].y;
    }
    float _1735 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _638);
    float _1736 = isnan(_1735) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1735 : min(cbModelParam._m0[25u].w, _1735));
    float _1826;
    float _1828;
    float _1830;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1790 = fma(_868, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860)) + cbModelParam._m0[21u].w;
        float _1794 = fma(_868, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860)) + cbModelParam._m0[22u].w;
        float _1798 = fma(_868, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860)) + cbModelParam._m0[23u].w;
        float _1801 = fma(_809, cbModelParam._m0[21u].z, fma(_808, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _807));
        float _1804 = fma(_809, cbModelParam._m0[22u].z, fma(_808, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _807));
        float _1807 = fma(_809, cbModelParam._m0[23u].z, fma(_808, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _807));
        float _1915;
        if (_1801 > 0.0)
        {
            _1915 = abs((1.0 - _1790) / _1801);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1790 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1915 = frontier_phi_28_24_ladder;
        }
        float _2233;
        if (_1804 > 0.0)
        {
            _2233 = abs((1.0 - _1794) / _1804);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1794 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2233 = frontier_phi_40_35_ladder;
        }
        float _2560;
        if (_1807 > 0.0)
        {
            _2560 = abs((1.0 - _1798) / _1807);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1798 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2560 = frontier_phi_50_47_ladder;
        }
        float _2562 = isnan(_2233) ? _1915 : (isnan(_1915) ? _2233 : min(_1915, _2233));
        float _2563 = isnan(_2560) ? _2562 : (isnan(_2562) ? _2560 : min(_2562, _2560));
        float _2567 = (_2563 * _1801) + _1790;
        float _2568 = (_2563 * _1804) + _1794;
        float _2569 = (_2563 * _1807) + _1798;
        float _2570 = _2563 * 9.9999997473787516355514526367188e-05;
        float _2571 = (-1.0) - _2570;
        float _2573 = _2570 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2569 > _2573) || ((_2569 < _2571) || ((_2568 > _2573) || ((_2568 < _2571) || ((_2567 < _2571) || (_2567 > _2573))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2687 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2569, cbModelParam._m0[17u].z, fma(_2568, cbModelParam._m0[17u].y, _2567 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2569, cbModelParam._m0[18u].z, fma(_2568, cbModelParam._m0[18u].y, _2567 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2569, cbModelParam._m0[19u].z, fma(_2568, cbModelParam._m0[19u].y, _2567 * cbModelParam._m0[19u].x))), _1736);
            frontier_phi_25_50_ladder = _2687.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2687.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2687.x * cbModelParam._m0[1u].z;
        }
        _1826 = frontier_phi_25_50_ladder_2;
        _1828 = frontier_phi_25_50_ladder_1;
        _1830 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1810 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_807, _808, _809), _1736);
        _1826 = _1810.x * cbModelParam._m0[1u].z;
        _1828 = _1810.y * cbModelParam._m0[1u].z;
        _1830 = _1810.z * cbModelParam._m0[1u].z;
    }
    float _1842 = ((((1.0 - _828) * ((_815 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_828 * _815)) * _799;
    float _1843 = _1842 * ((cbModelParam._m0[1u].w * (_1826 - _1727)) + _1727);
    float _1844 = _1842 * ((cbModelParam._m0[1u].w * (_1828 - _1729)) + _1729);
    float _1845 = _1842 * ((cbModelParam._m0[1u].w * (_1830 - _1731)) + _1731);
    float _1848 = fma(_1845, cbSceneParam._m0[89u].z, fma(_1844, cbSceneParam._m0[89u].y, _1843 * cbSceneParam._m0[89u].x));
    float _1851 = fma(_1845, cbSceneParam._m0[90u].z, fma(_1844, cbSceneParam._m0[90u].y, _1843 * cbSceneParam._m0[90u].x));
    float _1854 = fma(_1845, cbSceneParam._m0[91u].z, fma(_1844, cbSceneParam._m0[91u].y, _1843 * cbSceneParam._m0[91u].x));
    float _1889 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1893 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1897 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1901 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1902 = _1889 / _1901;
    float _1903 = _1893 / _1901;
    float _1904 = _1897 / _1901;
    float _2051;
    float _2052;
    float _2053;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1931 = ((uint(_1904 > cbSceneParam._m0[59u].y) + uint(_1904 > cbSceneParam._m0[59u].x)) + uint(_1904 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1932 = _1931 + 43u;
        uint _1940 = _1931 + 44u;
        uint _1948 = _1931 + 45u;
        uint _1956 = _1931 + 46u;
        float _1967 = fma(_1901, cbSceneParam._m0[_1932].w, fma(_1897, cbSceneParam._m0[_1932].z, fma(_1893, cbSceneParam._m0[_1932].y, _1889 * cbSceneParam._m0[_1932].x)));
        float _1971 = fma(_1901, cbSceneParam._m0[_1940].w, fma(_1897, cbSceneParam._m0[_1940].z, fma(_1893, cbSceneParam._m0[_1940].y, _1889 * cbSceneParam._m0[_1940].x)));
        float _1979 = fma(_1901, cbSceneParam._m0[_1956].w, fma(_1897, cbSceneParam._m0[_1956].z, fma(_1893, cbSceneParam._m0[_1956].y, _1889 * cbSceneParam._m0[_1956].x)));
        float _1984 = cbSceneParam._m0[33u].z * _1979;
        float _1986 = cbSceneParam._m0[33u].w * _1979;
        float _1989 = fma(_1901, cbSceneParam._m0[_1948].w, fma(_1897, cbSceneParam._m0[_1948].z, fma(_1893, cbSceneParam._m0[_1948].y, _1889 * cbSceneParam._m0[_1948].x))) / _1979;
        float _2037 = (cbSceneParam._m0[33u].x - sqrt(((_1903 * _1903) + (_1902 * _1902)) + (_1904 * _1904))) * cbSceneParam._m0[33u].y;
        float _4420 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2044 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1984 + _1967) / _1979, (_1986 + _1971) / _1979), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1986 + _1967) / _1979, (_1971 - _1984) / _1979), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1967 - _1984) / _1979, (_1971 - _1986) / _1979), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1967 - _1986) / _1979, (_1984 + _1971) / _1979), _1989), 0.0)).x), vec4(0.25)));
        _2051 = 1.0 - (_2044 * cbSceneParam._m0[34u].x);
        _2052 = 1.0 - (_2044 * cbSceneParam._m0[34u].y);
        _2053 = 1.0 - (_2044 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2051 = 1.0;
        _2052 = 1.0;
        _2053 = 1.0;
    }
    float _2117;
    float _2119;
    float _2121;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2105 = fma(_1901, cbSceneParam._m0[63u].w, fma(_1897, cbSceneParam._m0[63u].z, fma(_1893, cbSceneParam._m0[63u].y, _1889 * cbSceneParam._m0[63u].x)));
        float _2106 = fma(_1901, cbSceneParam._m0[60u].w, fma(_1897, cbSceneParam._m0[60u].z, fma(_1893, cbSceneParam._m0[60u].y, _1889 * cbSceneParam._m0[60u].x))) / _2105;
        float _2107 = fma(_1901, cbSceneParam._m0[61u].w, fma(_1897, cbSceneParam._m0[61u].z, fma(_1893, cbSceneParam._m0[61u].y, _1889 * cbSceneParam._m0[61u].x))) / _2105;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2106 >= cbSceneParam._m0[64u].x) && (_2107 >= cbSceneParam._m0[64u].y)) && (_2106 <= cbSceneParam._m0[64u].z)) && (_2107 <= cbSceneParam._m0[64u].w))
        {
            float _2246 = fma(_1901, cbSceneParam._m0[62u].w, fma(_1897, cbSceneParam._m0[62u].z, fma(_1893, cbSceneParam._m0[62u].y, _1889 * cbSceneParam._m0[62u].x))) / _2105;
            float _2250 = isnan(cbSceneParam._m0[41u].w) ? _2246 : (isnan(_2246) ? cbSceneParam._m0[41u].w : max(_2246, cbSceneParam._m0[41u].w));
            float _2293 = (cbSceneParam._m0[33u].x - sqrt(((_1903 * _1903) + (_1902 * _1902)) + (_1904 * _1904))) * cbSceneParam._m0[33u].y;
            float _4436 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
            float _2300 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2106, cbSceneParam._m0[33u].w + _2107), _2250), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2106, _2107 - cbSceneParam._m0[33u].z), _2250), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2106 - cbSceneParam._m0[33u].z, _2107 - cbSceneParam._m0[33u].w), _2250), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2106 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2107), _2250), 0.0)).x), vec4(0.25)));
            float _2304 = 1.0 - (_2300 * cbSceneParam._m0[34u].x);
            float _2305 = 1.0 - (_2300 * cbSceneParam._m0[34u].y);
            float _2306 = 1.0 - (_2300 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2306) ? _2053 : (isnan(_2053) ? _2306 : min(_2053, _2306));
            frontier_phi_37_36_ladder_1 = isnan(_2305) ? _2052 : (isnan(_2052) ? _2305 : min(_2052, _2305));
            frontier_phi_37_36_ladder_2 = isnan(_2304) ? _2051 : (isnan(_2051) ? _2304 : min(_2051, _2304));
        }
        else
        {
            frontier_phi_37_36_ladder = _2053;
            frontier_phi_37_36_ladder_1 = _2052;
            frontier_phi_37_36_ladder_2 = _2051;
        }
        _2117 = frontier_phi_37_36_ladder_2;
        _2119 = frontier_phi_37_36_ladder_1;
        _2121 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2117 = _2051;
        _2119 = _2052;
        _2121 = _2053;
    }
    uvec4 _2126 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _2128 = _2126.x * 14u;
    uint _2129 = _2128 + 13u;
    float _2136 = _799 + (-1.0);
    float _2141 = (cbLight._m0[_2129].x * _2136) + 1.0;
    float _2142 = (cbLight._m0[_2129].y * _2136) + 1.0;
    float _2143 = (cbLight._m0[_2129].z * _2136) + 1.0;
    float _2144 = (cbLight._m0[_2129].w * _2136) + 1.0;
    uint _2145 = _2128 + 5u;
    float _2151 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
    uint _2155 = _2128 + 4u;
    float _2165 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
    uint _2169 = _2128 | 1u;
    float _2180 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_635, _636, _637));
    float _2183 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_635, _636, _637));
    float _4472 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _4483 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2188 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * 0.3183098733425140380859375;
    float _2190 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * 0.3183098733425140380859375;
    float _2197 = ((cbLight._m0[_2145].x * _2151) * _2190) + (((cbLight._m0[_2155].x * _2117) * _2165) * _2188);
    float _2198 = ((_2151 * cbLight._m0[_2145].y) * _2190) + (((cbLight._m0[_2155].y * _2119) * _2165) * _2188);
    float _2199 = ((_2151 * cbLight._m0[_2145].z) * _2190) + (((cbLight._m0[_2155].z * _2121) * _2165) * _2188);
    uvec4 _2203 = floatBitsToUint(cbLight._m0[_2128 + 12u]);
    bool _2205 = _2203.x == 0u;
    float _2307;
    float _2309;
    float _2311;
    if (_2205)
    {
        _2307 = _2197;
        _2309 = _2198;
        _2311 = _2199;
    }
    else
    {
        uint _2315 = _2128 + 6u;
        float _2331 = (dot(vec3(cbLight._m0[_2128 + 2u].xyz), vec3(_635, _636, _637)) * 0.5) + 0.5;
        float _2332 = _2331 * _2331;
        float _4494 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2333 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2334 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2307 = (((cbLight._m0[_2315].x * 0.3183098733425140380859375) * _2333) * _2334) + _2197;
        _2309 = (((cbLight._m0[_2315].y * 0.3183098733425140380859375) * _2333) * _2334) + _2198;
        _2311 = (((cbLight._m0[_2315].z * 0.3183098733425140380859375) * _2333) * _2334) + _2199;
    }
    bool _2314 = _2203.y == 0u;
    float _2369;
    float _2371;
    float _2373;
    if (_2314)
    {
        _2369 = _2307;
        _2371 = _2309;
        _2373 = _2311;
    }
    else
    {
        uint _2531 = _2128 + 7u;
        float _2547 = (dot(vec3(cbLight._m0[_2128 + 3u].xyz), vec3(_635, _636, _637)) * 0.5) + 0.5;
        float _2548 = _2547 * _2547;
        float _4510 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2549 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2550 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2369 = (((cbLight._m0[_2531].x * 0.3183098733425140380859375) * _2549) * _2550) + _2307;
        _2371 = (((cbLight._m0[_2531].y * 0.3183098733425140380859375) * _2549) * _2550) + _2309;
        _2373 = (((cbLight._m0[_2531].z * 0.3183098733425140380859375) * _2549) * _2550) + _2311;
    }
    uint _2376 = _2128 + 8u;
    float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _638) * 0.949999988079071044921875);
    float _2390 = _2389 * _2389;
    float _2391 = cbLight._m0[_2128].x + _713;
    float _2392 = cbLight._m0[_2128].y + _714;
    float _2393 = cbLight._m0[_2128].z + _715;
    float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
    float _2398 = _2397 * _2391;
    float _2399 = _2397 * _2392;
    float _2400 = _2397 * _2393;
    float _2401 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2128].xyz));
    float _4526 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2404 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _4537 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _2405 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
    float _2406 = dot(vec3(_635, _636, _637), vec3(_2398, _2399, _2400));
    float _4548 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2410 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2398, _2399, _2400));
    float _4559 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2414 = _2390 * _2390;
    float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
    float _2429 = (exp2(log2(1.0 - (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2430 = 1.0 - _2390;
    float _2441 = (0.5 / (((_2405 * ((_2404 * _2430) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2405 * _2430) + _2390) * _2404))) * _2404;
    float _4570 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2443 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
    uint _2457 = _2128 + 9u;
    float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _638) * 0.949999988079071044921875);
    float _2469 = _2468 * _2468;
    float _2470 = cbLight._m0[_2169].x + _713;
    float _2471 = cbLight._m0[_2169].y + _714;
    float _2472 = cbLight._m0[_2169].z + _715;
    float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
    float _2477 = _2476 * _2470;
    float _2478 = _2476 * _2471;
    float _2479 = _2476 * _2472;
    float _2480 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2169].xyz));
    float _4581 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2483 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _2484 = dot(vec3(_635, _636, _637), vec3(_2477, _2478, _2479));
    float _4592 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _2488 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2477, _2478, _2479));
    float _4603 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2492 = _2469 * _2469;
    float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
    float _2505 = (exp2(log2(1.0 - (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2506 = 1.0 - _2469;
    float _2516 = (0.5 / (((_2405 * ((_2483 * _2506) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2405 * _2506) + _2469) * _2483))) * _2483;
    float _4614 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2518 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
    float _2528 = (((_2505 * cbLight._m0[_2457].x) * _2518) * _2151) + ((((cbLight._m0[_2376].x * _2117) * _2429) * _2443) * _2165);
    float _2529 = (((_2505 * cbLight._m0[_2457].y) * _2518) * _2151) + ((((cbLight._m0[_2376].y * _2119) * _2429) * _2443) * _2165);
    float _2530 = (((_2505 * cbLight._m0[_2457].z) * _2518) * _2151) + ((((cbLight._m0[_2376].z * _2121) * _2429) * _2443) * _2165);
    float _2586;
    float _2588;
    float _2590;
    if (_2205)
    {
        _2586 = _2528;
        _2588 = _2529;
        _2590 = _2530;
    }
    else
    {
        uint _2592 = _2128 + 2u;
        uint _2596 = _2128 + 10u;
        float _2610 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2592].w)) * _638) * 0.949999988079071044921875);
        float _2611 = _2610 * _2610;
        float _2612 = cbLight._m0[_2592].x + _713;
        float _2613 = cbLight._m0[_2592].y + _714;
        float _2614 = cbLight._m0[_2592].z + _715;
        float _2618 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
        float _2619 = _2618 * _2612;
        float _2620 = _2618 * _2613;
        float _2621 = _2618 * _2614;
        float _2622 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2592].xyz));
        float _4625 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2626 = dot(vec3(_635, _636, _637), vec3(_2619, _2620, _2621));
        float _4636 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2629 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _2630 = dot(vec3(cbLight._m0[_2592].xyz), vec3(_2619, _2620, _2621));
        float _4647 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2634 = _2611 * _2611;
        float _2638 = ((_2629 * _2629) * (_2634 + (-1.0))) + 1.0;
        float _2647 = (exp2(log2(1.0 - (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2648 = 1.0 - _2611;
        float _2658 = (0.5 / (((_2405 * ((_2625 * _2648) + _2611)) + 9.9999999392252902907785028219223e-09) + (((_2405 * _2648) + _2611) * _2625))) * _2625;
        float _4658 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2660 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2634 / ((_2638 * _2638) * 3.141590118408203125));
        float _2661 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2586 = (((_2647 * cbLight._m0[_2596].x) * _2660) * _2661) + _2528;
        _2588 = (((_2647 * cbLight._m0[_2596].y) * _2660) * _2661) + _2529;
        _2590 = (((_2647 * cbLight._m0[_2596].z) * _2660) * _2661) + _2530;
    }
    float _2692;
    float _2694;
    float _2696;
    if (_2314)
    {
        _2692 = _2586;
        _2694 = _2588;
        _2696 = _2590;
    }
    else
    {
        uint _2703 = _2128 + 3u;
        uint _2707 = _2128 + 11u;
        float _2721 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2703].w)) * _638) * 0.949999988079071044921875);
        float _2722 = _2721 * _2721;
        float _2723 = cbLight._m0[_2703].x + _713;
        float _2724 = cbLight._m0[_2703].y + _714;
        float _2725 = cbLight._m0[_2703].z + _715;
        float _2729 = inversesqrt(dot(vec3(_2723, _2724, _2725), vec3(_2723, _2724, _2725)));
        float _2730 = _2729 * _2723;
        float _2731 = _2729 * _2724;
        float _2732 = _2729 * _2725;
        float _2733 = dot(vec3(_635, _636, _637), vec3(cbLight._m0[_2703].xyz));
        float _4674 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2736 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2737 = dot(vec3(_635, _636, _637), vec3(_2730, _2731, _2732));
        float _4685 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2740 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2741 = dot(vec3(cbLight._m0[_2703].xyz), vec3(_2730, _2731, _2732));
        float _4696 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2745 = _2722 * _2722;
        float _2749 = ((_2740 * _2740) * (_2745 + (-1.0))) + 1.0;
        float _2758 = (exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2759 = 1.0 - _2722;
        float _2769 = (0.5 / (((_2405 * ((_2736 * _2759) + _2722)) + 9.9999999392252902907785028219223e-09) + (((_2405 * _2759) + _2722) * _2736))) * _2736;
        float _4707 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2771 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2745 / ((_2749 * _2749) * 3.141590118408203125));
        float _2772 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2692 = (((_2758 * cbLight._m0[_2707].x) * _2771) * _2772) + _2586;
        _2694 = (((_2758 * cbLight._m0[_2707].y) * _2771) * _2772) + _2588;
        _2696 = (((_2758 * cbLight._m0[_2707].z) * _2771) * _2772) + _2590;
    }
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    if (_2126.y == 0u)
    {
        uvec4 _2793 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2794 = _2793.x;
        uint _2805 = uint((float(_2793.y) * floor(float(uint(cbSceneParam._m0[85u].y * _735) / _2794))) + floor(float(uint(cbSceneParam._m0[85u].x * _734) / _2794)));
        float _2815 = (log2(_1904 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2816 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        uint _2819 = uint(isnan(14.0) ? _2816 : (isnan(_2816) ? 14.0 : min(_2816, 14.0)));
        uvec4 _2824 = texelFetch(g_lightClusterGridBuffer, int(((_2819 << 2u) + (_2805 << 6u)) >> 2u));
        uint _2825 = _2824.x;
        uint _2826 = _2793.z;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        if (((((1u << ((_2826 >> 4u) & 15u)) + 4294967295u) & _2825) == 0u) || ((_2826 & 240u) == 0u))
        {
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
        }
        else
        {
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _2914;
            float _2916;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            uint _3063 = 0u;
            uint _3072;
            bool _3073;
            for (;;)
            {
                _3072 = texelFetch(g_lightClassification, int((((_2819 << 5u) + (_2805 << 9u)) + (_3063 << 2u)) >> 2u)).x;
                _3073 = _3072 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3073)
                {
                    frontier_phi_71_pred = _3062;
                    frontier_phi_71_pred_1 = _3061;
                    frontier_phi_71_pred_2 = _3060;
                    frontier_phi_71_pred_3 = _3059;
                    frontier_phi_71_pred_4 = _3058;
                    frontier_phi_71_pred_5 = _3057;
                }
                else
                {
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    uint _3208;
                    _3202 = _3057;
                    _3203 = _3058;
                    _3204 = _3059;
                    _3205 = _3060;
                    _3206 = _3061;
                    _3207 = _3062;
                    _3208 = _3072;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    for (;;)
                    {
                        uint _3212 = uint(findLSB(_3208)) + (_3063 << 5u);
                        uint _3209 = (_3208 + 4294967295u) & _3208;
                        uint _3214 = _3212 * 48u;
                        vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3214)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 3u)).x));
                        uint _3234 = (_3212 * 48u) + 4u;
                        vec4 _3247 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 3u)).x));
                        uint _3253 = (_3212 * 48u) + 8u;
                        vec3 _3264 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3253)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 2u)).x));
                        float _3268 = _3228.x - _1902;
                        float _3269 = _3228.y - _1903;
                        float _3270 = _3228.z - _1904;
                        float _3271 = dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270));
                        float _3274 = inversesqrt(_3271);
                        float _3275 = _3274 * _3268;
                        float _3276 = _3274 * _3269;
                        float _3277 = _3274 * _3270;
                        float _3278 = dot(vec3(_755, _758, _761), vec3(_3275, _3276, _3277));
                        float _3283 = 1.0 - (_3271 * _3228.w);
                        float _4733 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3284 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                        float _3285 = sqrt(_3271) * _3247.w;
                        float _3288 = 1.39999997615814208984375 / (_3285 + 1.39999997615814208984375);
                        float _3289 = _3288 * _3288;
                        float _3292 = ((1.0 - _3289) * _3278) + _3289;
                        float _3295 = _3285 * _3285;
                        float _3299 = ((isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0))) * _3284) / ((_3295 * 0.699999988079071044921875) + 1.0);
                        float _3303 = (-0.0) - _1902;
                        float _3304 = (-0.0) - _1903;
                        float _3305 = (-0.0) - _1904;
                        float _3309 = inversesqrt(dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305)));
                        float _3310 = _3309 * _3303;
                        float _3311 = _3309 * _3304;
                        float _3312 = _3309 * _3305;
                        float _3319 = exp2(log2(1.0 / ((_3295 * 3.5) + 5.0)) * 0.25);
                        float _3320 = 1.0 - _815;
                        float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                        float _3328 = _3327 * _3327;
                        float _3329 = _3328 * _3328;
                        float _3330 = _3310 + _3275;
                        float _3331 = _3311 + _3276;
                        float _3332 = _3312 + _3277;
                        float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                        float _3340 = dot(vec3(_755, _758, _761), vec3(_3310, _3311, _3312));
                        float _4749 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3343 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                        float _3344 = dot(vec3(_755, _758, _761), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                        float _4760 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3347 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                        float _3352 = _3288 * _3328;
                        float _3353 = _3352 * _3352;
                        float _3356 = ((1.0 - _3353) * _3278) + _3353;
                        float _4771 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3357 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3358 = 1.0 - _3328;
                        float _3368 = (0.5 / (((_3357 * ((_3343 * _3358) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3357 * _3358) + _3328) * _3343))) * _3357;
                        float _4782 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3379 = (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) / ((_3351 * _3351) * ((_3295 * 2.1991131305694580078125) + 3.141590118408203125))) * _3284;
                        _3132 = (_3299 * _3247.x) + _3205;
                        _3133 = (_3299 * _3247.y) + _3206;
                        _3134 = (_3299 * _3247.z) + _3207;
                        _3129 = (_3379 * _3264.x) + _3202;
                        _3130 = (_3379 * _3264.y) + _3203;
                        _3131 = (_3379 * _3264.z) + _3204;
                        if (_3209 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3202 = _3129;
                            _3203 = _3130;
                            _3204 = _3131;
                            _3205 = _3132;
                            _3206 = _3133;
                            _3207 = _3134;
                            _3208 = _3209;
                        }
                    }
                    frontier_phi_71_pred = _3134;
                    frontier_phi_71_pred_1 = _3133;
                    frontier_phi_71_pred_2 = _3132;
                    frontier_phi_71_pred_3 = _3131;
                    frontier_phi_71_pred_4 = _3130;
                    frontier_phi_71_pred_5 = _3129;
                }
                _2916 = frontier_phi_71_pred;
                _2914 = frontier_phi_71_pred_1;
                _2912 = frontier_phi_71_pred_2;
                _2910 = frontier_phi_71_pred_3;
                _2908 = frontier_phi_71_pred_4;
                _2906 = frontier_phi_71_pred_5;
                uint _3064 = _3063 + 1u;
                if (_3064 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3057 = _2906;
                    _3058 = _2908;
                    _3059 = _2910;
                    _3060 = _2912;
                    _3061 = _2914;
                    _3062 = _2916;
                    _3063 = _3064;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
        }
        uvec4 _2919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2920 = _2919.z;
        uint _2922 = (_2920 >> 8u) & 15u;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        if (((4294967295u << _2922) & _2825) == 0u)
        {
            _3025 = _2905;
            _3027 = _2907;
            _3029 = _2909;
            _3031 = _2911;
            _3033 = _2913;
            _3035 = _2915;
        }
        else
        {
            float _3050 = inversesqrt(dot(vec3(_1902, _1903, _1904), vec3(_1902, _1903, _1904)));
            float _3051 = _3050 * _1902;
            float _3052 = _3050 * _1903;
            float _3053 = _3050 * _1904;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2922 < ((_2920 >> 12u) & 15u))
            {
                float _3026;
                float _3028;
                float _3030;
                float _3032;
                float _3034;
                float _3036;
                float _3185 = _2905;
                float _3186 = _2907;
                float _3187 = _2909;
                float _3188 = _2911;
                float _3189 = _2913;
                float _3190 = _2915;
                uint _3191 = _2922;
                uint _3200;
                bool _3201;
                for (;;)
                {
                    _3200 = texelFetch(g_lightClassification, int((((_2819 << 5u) + (_2805 << 9u)) + (_3191 << 2u)) >> 2u)).x;
                    _3201 = _3200 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3201)
                    {
                        frontier_phi_82_pred = _3190;
                        frontier_phi_82_pred_1 = _3189;
                        frontier_phi_82_pred_2 = _3188;
                        frontier_phi_82_pred_3 = _3187;
                        frontier_phi_82_pred_4 = _3186;
                        frontier_phi_82_pred_5 = _3185;
                    }
                    else
                    {
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3406 = _3185;
                        float _3407 = _3186;
                        float _3408 = _3187;
                        float _3409 = _3188;
                        float _3410 = _3189;
                        float _3411 = _3190;
                        uint _3412 = _3200;
                        uint _3413;
                        vec4 _3438;
                        float _3439;
                        vec4 _3454;
                        vec3 _3466;
                        vec4 _3482;
                        vec4 _3497;
                        float _3543;
                        bool _3544;
                        for (;;)
                        {
                            uint _3423 = ((_3191 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3412));
                            _3413 = (_3412 + 4294967295u) & _3412;
                            uint _3425 = _3423 * 40u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            _3439 = _3438.w;
                            uint _3441 = (_3423 * 40u) + 4u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3456 = (_3423 * 40u) + 8u;
                            _3466 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x));
                            uint _3469 = (_3423 * 40u) + 16u;
                            _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3484 = (_3423 * 40u) + 20u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3499 = (_3423 * 40u) + 24u;
                            vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3518 = (_3423 * 40u) + 28u;
                            vec4 _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            _3543 = fma(_1904, _3531.z, fma(_1903, _3531.y, _3531.x * _1902)) + _3531.w;
                            _3544 = !((fma(_1904, _3512.z, fma(_1903, _3512.y, _3512.x * _1902)) + _3512.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3544)
                            {
                                float _3571 = _3438.x - _1902;
                                float _3572 = _3438.y - _1903;
                                float _3573 = _3438.z - _1904;
                                float _3574 = dot(vec3(_3571, _3572, _3573), vec3(_3571, _3572, _3573));
                                float _3577 = inversesqrt(_3574);
                                float _3578 = _3577 * _3571;
                                float _3579 = _3577 * _3572;
                                float _3580 = _3577 * _3573;
                                float _3584 = 1.0 - (_3574 / (_3439 * _3439));
                                float _4793 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3589 = sqrt(_3574) * _3454.w;
                                float _3591 = 1.39999997615814208984375 / (_3589 + 1.39999997615814208984375);
                                float _3592 = _3591 * _3591;
                                float _3595 = ((1.0 - _3592) * dot(vec3(_3578, _3579, _3580), vec3(_755, _758, _761))) + _3592;
                                float _3598 = _3589 * _3589;
                                float _3602 = (fma(_1904, _3482.z, fma(_1903, _3482.y, _3482.x * _1902)) + _3482.w) / _3543;
                                float _3603 = (fma(_1904, _3497.z, fma(_1903, _3497.y, _3497.x * _1902)) + _3497.w) / _3543;
                                float _3607 = 1.0 - dot(vec2(_3602, _3603), vec2(_3602, _3603));
                                float _4809 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3609 = _3608 * (((isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0))) * _3585) / ((_3598 * 0.699999988079071044921875) + 1.0));
                                float _3621 = exp2(log2(1.0 / ((_3598 * 3.5) + 5.0)) * 0.25);
                                float _3622 = 1.0 - _815;
                                float _3629 = sqrt(1.0 - ((1.0 - (_3622 * _3622)) * (1.0 - (_3621 * _3621))));
                                float _3630 = _3629 * _3629;
                                float _3631 = _3630 * _3630;
                                float _3632 = _3578 - _3051;
                                float _3633 = _3579 - _3052;
                                float _3634 = _3580 - _3053;
                                float _3638 = inversesqrt(dot(vec3(_3632, _3633, _3634), vec3(_3632, _3633, _3634)));
                                float _3642 = dot(vec3(_755, _758, _761), vec3((-0.0) - _3051, (-0.0) - _3052, (-0.0) - _3053));
                                float _4820 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3645 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3646 = dot(vec3(_755, _758, _761), vec3(_3638 * _3632, _3638 * _3633, _3638 * _3634));
                                float _4831 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3649 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3653 = ((_3649 * _3649) * (_3631 + (-1.0))) + 1.0;
                                float _3654 = _3591 * _3630;
                                float _3655 = _3654 * _3654;
                                float _3661 = ((1.0 - _3655) * dot(vec3(_755, _758, _761), vec3(_3578, _3579, _3580))) + _3655;
                                float _4842 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3663 = 1.0 - _3630;
                                float _3673 = (0.5 / (((_3662 * ((_3645 * _3663) + _3630)) + 9.9999999392252902907785028219223e-09) + (((_3662 * _3663) + _3630) * _3645))) * _3662;
                                float _4853 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3683 = (_3608 * _3585) * (((_3631 * 3.1415927410125732421875) * (isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0)))) / ((_3653 * _3653) * ((_3598 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3609 * _3454.z;
                                frontier_phi_88_pred_1 = _3609 * _3454.y;
                                frontier_phi_88_pred_2 = _3609 * _3454.x;
                                frontier_phi_88_pred_3 = _3683 * _3466.z;
                                frontier_phi_88_pred_4 = _3683 * _3466.y;
                                frontier_phi_88_pred_5 = _3683 * _3466.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3692 = frontier_phi_88_pred;
                            _3691 = frontier_phi_88_pred_1;
                            _3690 = frontier_phi_88_pred_2;
                            _3689 = frontier_phi_88_pred_3;
                            _3688 = frontier_phi_88_pred_4;
                            _3687 = frontier_phi_88_pred_5;
                            _3396 = _3690 + _3409;
                            _3397 = _3691 + _3410;
                            _3398 = _3692 + _3411;
                            _3393 = _3687 + _3406;
                            _3394 = _3688 + _3407;
                            _3395 = _3689 + _3408;
                            if (_3413 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3413;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3398;
                        frontier_phi_82_pred_1 = _3397;
                        frontier_phi_82_pred_2 = _3396;
                        frontier_phi_82_pred_3 = _3395;
                        frontier_phi_82_pred_4 = _3394;
                        frontier_phi_82_pred_5 = _3393;
                    }
                    _3036 = frontier_phi_82_pred;
                    _3034 = frontier_phi_82_pred_1;
                    _3032 = frontier_phi_82_pred_2;
                    _3030 = frontier_phi_82_pred_3;
                    _3028 = frontier_phi_82_pred_4;
                    _3026 = frontier_phi_82_pred_5;
                    uint _3192 = _3191 + 1u;
                    if (_3192 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3185 = _3026;
                        _3186 = _3028;
                        _3187 = _3030;
                        _3188 = _3032;
                        _3189 = _3034;
                        _3190 = _3036;
                        _3191 = _3192;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3032;
                frontier_phi_63_64_ladder_1 = _3036;
                frontier_phi_63_64_ladder_2 = _3034;
                frontier_phi_63_64_ladder_3 = _3030;
                frontier_phi_63_64_ladder_4 = _3028;
                frontier_phi_63_64_ladder_5 = _3026;
            }
            else
            {
                frontier_phi_63_64_ladder = _2911;
                frontier_phi_63_64_ladder_1 = _2915;
                frontier_phi_63_64_ladder_2 = _2913;
                frontier_phi_63_64_ladder_3 = _2909;
                frontier_phi_63_64_ladder_4 = _2907;
                frontier_phi_63_64_ladder_5 = _2905;
            }
            _3025 = frontier_phi_63_64_ladder_5;
            _3027 = frontier_phi_63_64_ladder_4;
            _3029 = frontier_phi_63_64_ladder_3;
            _3031 = frontier_phi_63_64_ladder;
            _3033 = frontier_phi_63_64_ladder_2;
            _3035 = frontier_phi_63_64_ladder_1;
        }
        float _3040 = isnan(1.0) ? _799 : (isnan(_799) ? 1.0 : min(_799, 1.0));
        _2838 = (_3040 * _3031) + _2369;
        _2840 = (_3040 * _3033) + _2371;
        _2842 = (_3040 * _3035) + _2373;
        _2844 = ((_3025 * 0.039999999105930328369140625) * _3040) + _2692;
        _2846 = ((_3027 * 0.039999999105930328369140625) * _3040) + _2694;
        _2848 = ((_3029 * 0.039999999105930328369140625) * _3040) + _2696;
    }
    else
    {
        _2838 = _2369;
        _2840 = _2371;
        _2842 = _2373;
        _2844 = _2692;
        _2846 = _2694;
        _2848 = _2696;
    }
    float _4869 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4880 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4891 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _2865 = ((isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2838 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _799))) + ((_2844 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    float _2866 = ((isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2840 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _799))) + ((_2846 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    float _2867 = ((isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2842 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _799))) + ((_2848 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1635)) * cbPerFrame._m0[3u].x);
    uint _2868 = _247 + 6u;
    float _2876 = _734 / cbSceneParam._m0[86u].x;
    float _2877 = _735 / cbSceneParam._m0[86u].y;
    vec4 _2891 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, (log2((isnan(cbSceneParam._m0[77u].w) ? _656 : (isnan(_656) ? cbSceneParam._m0[77u].w : min(_656, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2893 = _2891.x;
    float _2894 = _2891.y;
    float _2895 = _2891.z;
    float _2896 = _2891.w;
    float _2967;
    float _2969;
    float _2971;
    float _2973;
    if (_656 > cbSceneParam._m0[78u].w)
    {
        float _2930 = isnan(_656) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _656 : min(cbSceneParam._m0[80u].w, _656));
        float _2931 = _2930 / _656;
        float _2942 = _2931 * _706;
        float _2943 = _707 * _2931;
        float _2944 = (-0.0) - _2943;
        float _2945 = _2931 * _708;
        float _2947 = (cbSceneParam._m0[77u].w * _2944) / _2930;
        float _2948 = _2947 + cbSceneParam._m0[79u].w;
        float _2949 = cbSceneParam._m0[79u].w - _2943;
        float _2955 = sqrt(((_2942 * _2942) + (_2943 * _2943)) + (_2945 * _2945));
        float _2958 = (1.0 - (cbSceneParam._m0[77u].w / _2930)) * _2955;
        float _2963 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2965 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3142;
        if (abs((_2944 - _2947) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3142 = ((((_2948 > 0.0) ? exp2(_2963 * _2948) : (2.0 - exp2(_2965 * _2948))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2958;
        }
        else
        {
            float _3086 = 1.0 / cbSceneParam._m0[80u].x;
            float _3087 = isnan(_2949) ? _2948 : (isnan(_2948) ? _2949 : max(_2948, _2949));
            float _3088 = isnan(_2949) ? _2948 : (isnan(_2948) ? _2949 : min(_2948, _2949));
            float _3097 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : min(_3087, 0.0));
            float _3098 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : min(_3088, 0.0));
            _3142 = ((abs(_2955 / _2944) * cbSceneParam._m0[80u].y) * ((((_3097 - _3098) * 2.0) - ((exp2(_2963 * (isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0)))) - exp2(_2963 * (isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0))))) * _3086)) - ((exp2(_2965 * _3097) - exp2(_2965 * _3098)) * _3086))) + (_2958 * cbSceneParam._m0[80u].z);
        }
        vec4 _3144 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, 1.0), 0.0);
        float _3153 = exp2((_3142 * (-1.44269502162933349609375)) * (1.0 - _3144.w));
        float _3154 = log2(_3153);
        float _3170 = log2(_2896);
        _2967 = (exp2(_3170 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3154 * cbSceneParam._m0[78u].x)) * _3144.x) / cbSceneParam._m0[78u].x)) + _2893;
        _2969 = (exp2(_3170 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3154 * cbSceneParam._m0[78u].y)) * _3144.y) / cbSceneParam._m0[78u].y)) + _2894;
        _2971 = (exp2(_3170 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3154 * cbSceneParam._m0[78u].z)) * _3144.z) / cbSceneParam._m0[78u].z)) + _2895;
        _2973 = _3153 * _2896;
    }
    else
    {
        _2967 = _2893;
        _2969 = _2894;
        _2971 = _2895;
        _2973 = _2896;
    }
    bool _3180;
    vec4 _2983;
    vec4 _3005;
    float _3007;
    float _3011;
    float _3012;
    float _3013;
    float _3014;
    bool _3024;
    for (;;)
    {
        _2983 = cbMatDynParam._m0[0u];
        float _2985 = roundEven(_2983.y);
        bool _2986 = _2985 == 3.0;
        float _2987 = log2(_2973);
        float _2994 = exp2(_2987 * cbSceneParam._m0[78u].x) * _2865;
        float _2995 = exp2(_2987 * cbSceneParam._m0[78u].y) * _2866;
        float _2996 = exp2(_2987 * cbSceneParam._m0[78u].z) * _2867;
        float _3003 = _722 + (-0.5);
        _3005 = cbMtdParam._m0[1u];
        _3007 = _3005.y * _3003;
        float _3010 = (_2985 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3011 = _3010 * (_2986 ? _2994 : (_2994 + (cbSceneParam._m0[72u].w * _2967)));
        _3012 = _3010 * (_2986 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2969)));
        _3013 = _3010 * (_2986 ? _2996 : (_2996 + (cbSceneParam._m0[72u].w * _2971)));
        _3014 = _3003 * 0.999000012874603271484375;
        _3024 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3024)
        {
            if ((cbInstanceData._m0[_247 + 7u].x + _3014) < 0.5)
            {
                _3180 = true;
                break;
            }
        }
        uint _3121 = _774 + uint(_2983.w);
        if ((cbInstanceData._m0[_3121].w < 1.0) && ((cbInstanceData._m0[_3121].w + _3014) < 0.5))
        {
            _3180 = true;
            break;
        }
        if ((_3007 + 1.0) < _3005.x)
        {
            _3180 = true;
            break;
        }
        _3180 = false;
        break;
    }
    float _3384;
    if (_3180)
    {
        discard_state = true;
        _3384 = 0.0;
    }
    else
    {
        _3384 = cbInstanceData._m0[_2868].w;
    }
    SV_Target.x = _3011;
    SV_Target.y = _3012;
    SV_Target.z = _3013;
    SV_Target.w = _3384;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2868].w;
    discard_exit();
}


