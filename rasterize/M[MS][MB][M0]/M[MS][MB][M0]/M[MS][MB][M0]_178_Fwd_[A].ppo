#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1348;
float _3709;
float _3710;
float _3711;
float _3712;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3721 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3732 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3743 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _397 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _399 = _397.x;
    float _409 = dot(vec4(_399, _397.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _426 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_399 - _409) * cbMtdParam._m0[24u].x) + _409) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3754 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
    float _434 = (_427 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _435 = (_427 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _436 = (_427 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    vec4 _453 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _296) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _297) + cbTextureTilingScale._m0[3u].w));
    vec4 _473 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _475 = _473.x;
    float _485 = dot(vec4(_475, _473.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _499 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_475 - _485) * cbMtdParam._m0[24u].x) + _485) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3765 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _500 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _507 = (_500 * ((_453.x * cbMtdParam._m0[13u].x) - _434)) + _434;
    float _508 = (_500 * ((_453.y * cbMtdParam._m0[13u].y) - _435)) + _435;
    float _509 = (_500 * ((_453.z * cbMtdParam._m0[13u].z) - _436)) + _436;
    float _513 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _507;
    float _516 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _508;
    float _519 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _509;
    float _526 = ((_507 - _513) * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) + _513;
    float _527 = ((_508 - _516) * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) + _516;
    float _528 = ((_509 - _519) * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) + _519;
    vec4 _540 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _563 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _580 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _582 = _580.x;
    float _583 = _580.y;
    float _584 = _580.z;
    float _591 = ((_563.x - _582) * _427) + _582;
    float _592 = ((_563.y - _583) * _427) + _583;
    float _593 = ((_563.z - _584) * _427) + _584;
    vec4 _605 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _296) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _297) + cbTextureTilingScale._m0[2u].w));
    float _618 = ((_605.z - _593) * _500) + _593;
    float _621 = ((((_605.x - _591) * _500) + _591) * 2.0) + (-1.0);
    float _622 = ((((_605.y - _592) * _500) + _592) * 2.0) + (-1.0);
    float _623 = dot(vec2(_621, _622), vec2(_621, _622));
    float _3776 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _628 = sqrt(1.0 - (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))));
    vec4 _648 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _660 = (_621 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_540.x * 2.0) + (-1.0)))) + (((_648.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _661 = (_622 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_540.y * 2.0) + (-1.0)))) + (((_648.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _673 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _675 = _673.x;
    float _676 = 1.0 - _675;
    float _702 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_675 - _676) * cbMtdParam._m0[24u].w) + _676) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3787 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _703 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _711 = ((((cbMtdParam._m0[10u].x - _526) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _703) + _526;
    float _712 = ((((cbMtdParam._m0[10u].y - _527) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _703) + _527;
    float _713 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _528)) * _703) + _528;
    float _718 = (((_540.z - _618) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _618;
    float _722 = ((_648.z - _718) * cbMtdParam._m0[19u].w) + _718;
    float _726 = ((cbMtdParam._m0[23u].y - _722) * _703) + _722;
    vec4 _745 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _751 = (_745.x * 2.0) + (-1.0);
    float _752 = (_745.y * 2.0) + (-1.0);
    float _753 = dot(vec2(_751, _752), vec2(_751, _752));
    float _3798 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _769 = (_703 * (((cbMtdParam._m0[22u].z * _660) - _660) + _751)) + _660;
    float _770 = (_703 * (((cbMtdParam._m0[22u].z * _661) - _661) + _752)) + _661;
    float _771 = (_703 * (sqrt(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) - _628)) + _628;
    float _773 = cbMtdParam._m0[22u].x + _648.w;
    float _776 = fma(_771, _245 * NORMAL.x, fma(_770, _252 * TANGENT.x, (_238 * _230) * _769));
    float _779 = fma(_771, _245 * NORMAL.y, fma(_770, _252 * TANGENT.y, (_238 * _231) * _769));
    float _782 = fma(_771, _245 * NORMAL.z, fma(_770, _252 * TANGENT.z, (_238 * _232) * _769));
    float _786 = inversesqrt(dot(vec3(_776, _779, _782), vec3(_776, _779, _782)));
    float _787 = _786 * _776;
    float _788 = _786 * _779;
    float _789 = _786 * _782;
    float _3809 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _790 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _3831 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _3842 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _3853 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _808 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _859 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _849);
    float _860 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _849);
    float _861 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _849);
    float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
    float _866 = _859 * _865;
    float _867 = _860 * _865;
    float _868 = _861 * _865;
    vec4 _873 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _875 = _873.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1029 = sqrt(((_859 * _859) + (_860 * _860)) + (_861 * _861));
        float _1035 = (cbMatDynParam._m0[5u].x * _1029) + cbMatDynParam._m0[5u].y;
        float _3864 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1040 = (cbMatDynParam._m0[5u].z * _1029) + cbMatDynParam._m0[5u].w;
        float _3875 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) - _1036)) + _1036) < ((_875 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _886 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _887 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _905 = fma(_789, cbSceneParam._m0[5u].z, fma(_788, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _787));
    float _908 = fma(_789, cbSceneParam._m0[6u].z, fma(_788, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _787));
    float _911 = fma(_789, cbSceneParam._m0[7u].z, fma(_788, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _787));
    uint _924 = _277 + 9u;
    uint _925 = _924 + uint(cbMatDynParam._m0[0u].w);
    float _931 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * cbInstanceData._m0[_925].x;
    float _932 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_925].y;
    float _933 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_925].z;
    float _3886 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _934 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    vec4 _945 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _886, cbSceneParam._m0[86u].y * _887));
    float _949 = ((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * TEXCOORD_5.w) * _945.x;
    float _950 = dot(vec3(_787, _788, _789), vec3(_866, _867, _868));
    float _953 = _950 * 2.0;
    float _957 = (_953 * _787) - _866;
    float _958 = (_953 * _788) - _867;
    float _959 = (_953 * _789) - _868;
    float _963 = abs(dot(vec3(_866, _867, _868), vec3(_787, _788, _789)));
    float _3919 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _965 = sqrt(_790);
    float _978 = exp2((_965 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_965 * 3.0));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1347;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1072 = fma(_1018, cbModelParam._m0[26u].z, fma(_1014, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1010));
        float _1076 = fma(_1018, cbModelParam._m0[27u].z, fma(_1014, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1010));
        float _1080 = fma(_1018, cbModelParam._m0[28u].z, fma(_1014, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1010));
        float _1105 = _1010 + _787;
        float _1106 = _1014 + _788;
        float _1107 = _1018 + _789;
        float _1117 = fma(_1107, cbModelParam._m0[26u].z, fma(_1106, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1105)) - _1072;
        float _1118 = fma(_1107, cbModelParam._m0[27u].z, fma(_1106, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1105)) - _1076;
        float _1119 = fma(_1107, cbModelParam._m0[28u].z, fma(_1106, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1105)) - _1080;
        float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
        float _1136 = ((_1123 * _1117) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1072 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1123 * _1118) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1076 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1123 * _1119) / cbModelParam._m0[34u].z) + ((((((_1080 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        float _1175 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1141.x + (-0.5));
        float _1177 = _1175 * (_1141.y + (-0.5));
        float _1178 = _1175 * (_1141.z + (-0.5));
        float _1185 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1148.x + (-0.5));
        float _1187 = _1185 * (_1148.y + (-0.5));
        float _1188 = _1185 * (_1148.z + (-0.5));
        float _1195 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1155.x + (-0.5));
        float _1197 = _1195 * (_1155.y + (-0.5));
        float _1198 = _1195 * (_1155.z + (-0.5));
        float _1205 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1162.x + (-0.5));
        float _1207 = _1205 * (_1162.y + (-0.5));
        float _1208 = _1205 * (_1162.z + (-0.5));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = _1176 * 0.5;
        float _1213 = _1186 * 0.5;
        float _1214 = _1196 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1229 = (dot(vec3(_787, _788, _789), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1239 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3967 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1241 + 1.0))) + _1246) * _1209;
        float _1256 = _1177 * 0.5;
        float _1257 = _1187 * 0.5;
        float _1258 = _1197 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_787, _788, _789), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _4000 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1283 + 1.0))) + _1288) * _1210;
        float _1298 = _1178 * 0.5;
        float _1299 = _1188 * 0.5;
        float _1300 = _1198 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_787, _788, _789), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4033 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1325 + 1.0))) + _1330) * _1211;
        _1347 = _1178;
        _1349 = _1177;
        _1350 = _1176;
        _1351 = _1188;
        _1352 = _1187;
        _1353 = _1186;
        _1354 = _1198;
        _1355 = _1197;
        _1356 = _1196;
        _1357 = _1211;
        _1358 = _1210;
        _1359 = _1209;
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1362 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
    }
    else
    {
        _1347 = _1348;
        _1349 = _1348;
        _1350 = _1348;
        _1351 = _1348;
        _1352 = _1348;
        _1353 = _1348;
        _1354 = _1348;
        _1355 = _1348;
        _1356 = _1348;
        _1357 = _1348;
        _1358 = _1348;
        _1359 = _1348;
        _1360 = 0.0;
        _1361 = 0.0;
        _1362 = 0.0;
    }
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1389 = fma(_1018, cbModelParam._m0[30u].z, fma(_1014, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1010));
        float _1393 = fma(_1018, cbModelParam._m0[31u].z, fma(_1014, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1010));
        float _1397 = fma(_1018, cbModelParam._m0[32u].z, fma(_1014, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1010));
        float _1420 = _1010 + _787;
        float _1421 = _1014 + _788;
        float _1422 = _1018 + _789;
        float _1432 = fma(_1422, cbModelParam._m0[30u].z, fma(_1421, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1420)) - _1389;
        float _1433 = fma(_1422, cbModelParam._m0[31u].z, fma(_1421, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1420)) - _1393;
        float _1434 = fma(_1422, cbModelParam._m0[32u].z, fma(_1421, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1420)) - _1397;
        float _1438 = inversesqrt(dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434)));
        float _1451 = ((_1438 * _1432) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1389 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1452 = ((_1438 * _1433) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1393 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1453 = ((_1438 * _1434) / cbModelParam._m0[35u].z) + ((((((_1397 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        float _1488 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1455.x + (-0.5));
        float _1490 = _1488 * (_1455.y + (-0.5));
        float _1491 = _1488 * (_1455.z + (-0.5));
        float _1498 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1462.x + (-0.5));
        float _1500 = _1498 * (_1462.y + (-0.5));
        float _1501 = _1498 * (_1462.z + (-0.5));
        float _1508 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1469.x + (-0.5));
        float _1510 = _1508 * (_1469.y + (-0.5));
        float _1511 = _1508 * (_1469.z + (-0.5));
        float _1518 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1476.x + (-0.5));
        float _1520 = _1518 * (_1476.y + (-0.5));
        float _1521 = _1518 * (_1476.z + (-0.5));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = _1489 * 0.5;
        float _1526 = _1499 * 0.5;
        float _1527 = _1509 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_787, _788, _789), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4096 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1552 + 1.0))) + _1557) * _1522;
        float _1567 = _1490 * 0.5;
        float _1568 = _1500 * 0.5;
        float _1569 = _1510 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_787, _788, _789), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4129 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1594 + 1.0))) + _1599) * _1523;
        float _1609 = _1491 * 0.5;
        float _1610 = _1501 * 0.5;
        float _1611 = _1511 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_787, _788, _789), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4162 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1636 + 1.0))) + _1641) * _1524;
        _1658 = _1491;
        _1659 = _1490;
        _1660 = _1489;
        _1661 = _1501;
        _1662 = _1500;
        _1663 = _1499;
        _1664 = _1511;
        _1665 = _1510;
        _1666 = _1509;
        _1667 = _1524;
        _1668 = _1523;
        _1669 = _1522;
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
    }
    else
    {
        _1658 = _1348;
        _1659 = _1348;
        _1660 = _1348;
        _1661 = _1348;
        _1662 = _1348;
        _1663 = _1348;
        _1664 = _1348;
        _1665 = _1348;
        _1666 = _1348;
        _1667 = _1348;
        _1668 = _1348;
        _1669 = _1348;
        _1670 = 0.0;
        _1671 = 0.0;
        _1672 = 0.0;
    }
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1360)) + _1360;
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1361)) + _1361;
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1362)) + _1362;
    float _1705 = fma(_1684, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1682 * cbSceneParam._m0[89u].x));
    float _1708 = fma(_1684, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1682 * cbSceneParam._m0[90u].x));
    float _1711 = fma(_1684, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1682));
    float _1726 = _957 * 0.5;
    float _1727 = _958 * 0.5;
    float _1728 = _959 * 0.5;
    float _1729 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1732 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1735 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1769;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1742 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1347, _1351, _1354, _1357));
        float _1746 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1349, _1352, _1355, _1358));
        float _1750 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1350, _1353, _1356, _1359));
        float _1757 = dot(vec4(cbModelParam._m0[39u]), vec4(_1726, _1727, _1728, 1.0));
        _1769 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1769 = 1.0;
    }
    float _1780;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1771 = dot(vec4(cbModelParam._m0[40u]), vec4(_1726, _1727, _1728, 1.0));
        _1780 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1771) ? 0.0 : (isnan(0.0) ? _1771 : max(0.0, _1771))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1780 = 1.0;
    }
    float _1784 = (_1780 * cbModelParam._m0[1u].x) + (_1769 * (1.0 - cbModelParam._m0[1u].x));
    float _1794 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _790);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1794 : min(cbModelParam._m0[25u].z, _1794));
    float _1877;
    float _1879;
    float _1881;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1844 = fma(_1018, cbModelParam._m0[13u].z, fma(_1014, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1010)) + cbModelParam._m0[13u].w;
        float _1848 = fma(_1018, cbModelParam._m0[14u].z, fma(_1014, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1010)) + cbModelParam._m0[14u].w;
        float _1852 = fma(_1018, cbModelParam._m0[15u].z, fma(_1014, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1010)) + cbModelParam._m0[15u].w;
        float _1855 = fma(_959, cbModelParam._m0[13u].z, fma(_958, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _957));
        float _1858 = fma(_959, cbModelParam._m0[14u].z, fma(_958, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _957));
        float _1861 = fma(_959, cbModelParam._m0[15u].z, fma(_958, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _957));
        float _1889;
        if (_1855 > 0.0)
        {
            _1889 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1889 = frontier_phi_17_15_ladder;
        }
        float _2091;
        if (_1858 > 0.0)
        {
            _2091 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2091 = frontier_phi_26_22_ladder;
        }
        float _2334;
        if (_1861 > 0.0)
        {
            _2334 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2334 = frontier_phi_38_33_ladder;
        }
        float _2336 = isnan(_2091) ? _1889 : (isnan(_1889) ? _2091 : min(_1889, _2091));
        float _2337 = isnan(_2334) ? _2336 : (isnan(_2336) ? _2334 : min(_2336, _2334));
        float _2341 = (_2337 * _1855) + _1844;
        float _2342 = (_2337 * _1858) + _1848;
        float _2343 = (_2337 * _1861) + _1852;
        float _2344 = _2337 * 9.9999997473787516355514526367188e-05;
        float _2346 = (-1.0) - _2344;
        float _2348 = _2344 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2343 > _2348) || ((_2343 < _2346) || ((_2342 > _2348) || ((_2342 < _2346) || ((_2341 < _2346) || (_2341 > _2348))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2467 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2343, cbModelParam._m0[9u].z, fma(_2342, cbModelParam._m0[9u].y, _2341 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2343, cbModelParam._m0[10u].z, fma(_2342, cbModelParam._m0[10u].y, _2341 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2343, cbModelParam._m0[11u].z, fma(_2342, cbModelParam._m0[11u].y, _2341 * cbModelParam._m0[11u].x))), _1795);
            frontier_phi_16_38_ladder = _2467.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2467.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2467.x * cbModelParam._m0[1u].y;
        }
        _1877 = frontier_phi_16_38_ladder_2;
        _1879 = frontier_phi_16_38_ladder_1;
        _1881 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1865 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_957, _958, _959), _1795);
        _1877 = _1865.x * cbModelParam._m0[1u].y;
        _1879 = _1865.y * cbModelParam._m0[1u].y;
        _1881 = _1865.z * cbModelParam._m0[1u].y;
    }
    float _1885 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _790);
    float _1886 = isnan(_1885) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1885 : min(cbModelParam._m0[25u].w, _1885));
    float _1977;
    float _1979;
    float _1981;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1941 = fma(_1018, cbModelParam._m0[21u].z, fma(_1014, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1010)) + cbModelParam._m0[21u].w;
        float _1945 = fma(_1018, cbModelParam._m0[22u].z, fma(_1014, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1010)) + cbModelParam._m0[22u].w;
        float _1949 = fma(_1018, cbModelParam._m0[23u].z, fma(_1014, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1010)) + cbModelParam._m0[23u].w;
        float _1952 = fma(_959, cbModelParam._m0[21u].z, fma(_958, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _957));
        float _1955 = fma(_959, cbModelParam._m0[22u].z, fma(_958, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _957));
        float _1958 = fma(_959, cbModelParam._m0[23u].z, fma(_958, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _957));
        float _2096;
        if (_1952 > 0.0)
        {
            _2096 = abs((1.0 - _1941) / _1952);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1941 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2096 = frontier_phi_28_24_ladder;
        }
        float _2361;
        if (_1955 > 0.0)
        {
            _2361 = abs((1.0 - _1945) / _1955);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1945 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2361 = frontier_phi_40_35_ladder;
        }
        float _2566;
        if (_1958 > 0.0)
        {
            _2566 = abs((1.0 - _1949) / _1958);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1949 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2566 = frontier_phi_49_46_ladder;
        }
        float _2568 = isnan(_2361) ? _2096 : (isnan(_2096) ? _2361 : min(_2096, _2361));
        float _2569 = isnan(_2566) ? _2568 : (isnan(_2568) ? _2566 : min(_2568, _2566));
        float _2573 = (_2569 * _1952) + _1941;
        float _2574 = (_2569 * _1955) + _1945;
        float _2575 = (_2569 * _1958) + _1949;
        float _2576 = _2569 * 9.9999997473787516355514526367188e-05;
        float _2577 = (-1.0) - _2576;
        float _2579 = _2576 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2575 > _2579) || ((_2575 < _2577) || ((_2574 > _2579) || ((_2574 < _2577) || ((_2573 < _2577) || (_2573 > _2579))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2774 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2575, cbModelParam._m0[17u].z, fma(_2574, cbModelParam._m0[17u].y, _2573 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2575, cbModelParam._m0[18u].z, fma(_2574, cbModelParam._m0[18u].y, _2573 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2575, cbModelParam._m0[19u].z, fma(_2574, cbModelParam._m0[19u].y, _2573 * cbModelParam._m0[19u].x))), _1886);
            frontier_phi_25_49_ladder = _2774.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2774.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2774.x * cbModelParam._m0[1u].z;
        }
        _1977 = frontier_phi_25_49_ladder_2;
        _1979 = frontier_phi_25_49_ladder_1;
        _1981 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1961 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_957, _958, _959), _1886);
        _1977 = _1961.x * cbModelParam._m0[1u].z;
        _1979 = _1961.y * cbModelParam._m0[1u].z;
        _1981 = _1961.z * cbModelParam._m0[1u].z;
    }
    float _1993 = ((((1.0 - _978) * ((_965 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_978 * _965)) * _949;
    float _1994 = _1993 * ((cbModelParam._m0[1u].w * (_1977 - _1877)) + _1877);
    float _1995 = _1993 * ((cbModelParam._m0[1u].w * (_1979 - _1879)) + _1879);
    float _1996 = _1993 * ((cbModelParam._m0[1u].w * (_1981 - _1881)) + _1881);
    float _1999 = fma(_1996, cbSceneParam._m0[89u].z, fma(_1995, cbSceneParam._m0[89u].y, _1994 * cbSceneParam._m0[89u].x));
    float _2002 = fma(_1996, cbSceneParam._m0[90u].z, fma(_1995, cbSceneParam._m0[90u].y, _1994 * cbSceneParam._m0[90u].x));
    float _2005 = fma(_1996, cbSceneParam._m0[91u].z, fma(_1995, cbSceneParam._m0[91u].y, _1994 * cbSceneParam._m0[91u].x));
    uvec4 _2015 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2017 = _2015.x * 14u;
    uint _2018 = _2017 + 13u;
    float _2025 = _949 + (-1.0);
    float _2030 = (cbLight._m0[_2018].x * _2025) + 1.0;
    float _2031 = (cbLight._m0[_2018].y * _2025) + 1.0;
    float _2032 = (cbLight._m0[_2018].z * _2025) + 1.0;
    float _2033 = (cbLight._m0[_2018].w * _2025) + 1.0;
    uint _2034 = _2017 + 5u;
    float _2040 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2044 = _2017 + 4u;
    float _2050 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
    uint _2054 = _2017 | 1u;
    float _2065 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_787, _788, _789));
    float _2068 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_787, _788, _789));
    float _4298 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _4309 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2073 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * 0.3183098733425140380859375;
    float _2075 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * 0.3183098733425140380859375;
    float _2082 = ((cbLight._m0[_2034].x * _2040) * _2075) + ((cbLight._m0[_2044].x * _2050) * _2073);
    float _2083 = ((_2040 * cbLight._m0[_2034].y) * _2075) + ((_2050 * cbLight._m0[_2044].y) * _2073);
    float _2084 = ((_2040 * cbLight._m0[_2034].z) * _2075) + ((_2050 * cbLight._m0[_2044].z) * _2073);
    uvec4 _2088 = floatBitsToUint(cbLight._m0[_2017 + 12u]);
    bool _2090 = _2088.x == 0u;
    float _2101;
    float _2103;
    float _2105;
    if (_2090)
    {
        _2101 = _2082;
        _2103 = _2083;
        _2105 = _2084;
    }
    else
    {
        uint _2109 = _2017 + 6u;
        float _2125 = (dot(vec3(cbLight._m0[_2017 + 2u].xyz), vec3(_787, _788, _789)) * 0.5) + 0.5;
        float _2126 = _2125 * _2125;
        float _4320 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2127 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2128 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2101 = (((cbLight._m0[_2109].x * 0.3183098733425140380859375) * _2127) * _2128) + _2082;
        _2103 = (((cbLight._m0[_2109].y * 0.3183098733425140380859375) * _2127) * _2128) + _2083;
        _2105 = (((cbLight._m0[_2109].z * 0.3183098733425140380859375) * _2127) * _2128) + _2084;
    }
    bool _2108 = _2088.y == 0u;
    float _2146;
    float _2148;
    float _2150;
    if (_2108)
    {
        _2146 = _2101;
        _2148 = _2103;
        _2150 = _2105;
    }
    else
    {
        uint _2305 = _2017 + 7u;
        float _2321 = (dot(vec3(cbLight._m0[_2017 + 3u].xyz), vec3(_787, _788, _789)) * 0.5) + 0.5;
        float _2322 = _2321 * _2321;
        float _4336 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2323 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _2324 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2146 = (((cbLight._m0[_2305].x * 0.3183098733425140380859375) * _2323) * _2324) + _2101;
        _2148 = (((cbLight._m0[_2305].y * 0.3183098733425140380859375) * _2323) * _2324) + _2103;
        _2150 = (((cbLight._m0[_2305].z * 0.3183098733425140380859375) * _2323) * _2324) + _2105;
    }
    uint _2153 = _2017 + 8u;
    float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _790) * 0.949999988079071044921875);
    float _2167 = _2166 * _2166;
    float _2168 = cbLight._m0[_2017].x + _866;
    float _2169 = cbLight._m0[_2017].y + _867;
    float _2170 = cbLight._m0[_2017].z + _868;
    float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
    float _2175 = _2174 * _2168;
    float _2176 = _2174 * _2169;
    float _2177 = _2174 * _2170;
    float _2178 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2017].xyz));
    float _4352 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _4363 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _2182 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2183 = dot(vec3(_787, _788, _789), vec3(_2175, _2176, _2177));
    float _4374 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2187 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2175, _2176, _2177));
    float _4385 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2191 = _2167 * _2167;
    float _2195 = ((_2186 * _2186) * (_2191 + (-1.0))) + 1.0;
    float _2206 = (exp2(log2(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2207 = 1.0 - _2167;
    float _2218 = (0.5 / (((_2182 * ((_2181 * _2207) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_2182 * _2207) + _2167) * _2181))) * _2181;
    float _4396 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2220 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2191 / ((_2195 * _2195) * 3.141590118408203125));
    uint _2231 = _2017 + 9u;
    float _2242 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2054].w)) * _790) * 0.949999988079071044921875);
    float _2243 = _2242 * _2242;
    float _2244 = cbLight._m0[_2054].x + _866;
    float _2245 = cbLight._m0[_2054].y + _867;
    float _2246 = cbLight._m0[_2054].z + _868;
    float _2250 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
    float _2251 = _2250 * _2244;
    float _2252 = _2250 * _2245;
    float _2253 = _2250 * _2246;
    float _2254 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2054].xyz));
    float _4407 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _2258 = dot(vec3(_787, _788, _789), vec3(_2251, _2252, _2253));
    float _4418 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2262 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_2251, _2252, _2253));
    float _4429 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2266 = _2243 * _2243;
    float _2270 = ((_2261 * _2261) * (_2266 + (-1.0))) + 1.0;
    float _2279 = (exp2(log2(1.0 - (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2280 = 1.0 - _2243;
    float _2290 = (0.5 / (((_2182 * ((_2257 * _2280) + _2243)) + 9.9999999392252902907785028219223e-09) + (((_2182 * _2280) + _2243) * _2257))) * _2257;
    float _4440 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2292 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2266 / ((_2270 * _2270) * 3.141590118408203125));
    float _2302 = (((_2279 * cbLight._m0[_2231].x) * _2292) * _2040) + (((_2206 * cbLight._m0[_2153].x) * _2220) * _2050);
    float _2303 = (((_2279 * cbLight._m0[_2231].y) * _2292) * _2040) + (((_2206 * cbLight._m0[_2153].y) * _2220) * _2050);
    float _2304 = (((_2279 * cbLight._m0[_2231].z) * _2292) * _2040) + (((_2206 * cbLight._m0[_2153].z) * _2220) * _2050);
    float _2366;
    float _2368;
    float _2370;
    if (_2090)
    {
        _2366 = _2302;
        _2368 = _2303;
        _2370 = _2304;
    }
    else
    {
        uint _2372 = _2017 + 2u;
        uint _2376 = _2017 + 10u;
        float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _790) * 0.949999988079071044921875);
        float _2391 = _2390 * _2390;
        float _2392 = cbLight._m0[_2372].x + _866;
        float _2393 = cbLight._m0[_2372].y + _867;
        float _2394 = cbLight._m0[_2372].z + _868;
        float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
        float _2399 = _2398 * _2392;
        float _2400 = _2398 * _2393;
        float _2401 = _2398 * _2394;
        float _2402 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2372].xyz));
        float _4451 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2406 = dot(vec3(_787, _788, _789), vec3(_2399, _2400, _2401));
        float _4462 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2410 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2399, _2400, _2401));
        float _4473 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2414 = _2391 * _2391;
        float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
        float _2427 = (exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2428 = 1.0 - _2391;
        float _2438 = (0.5 / (((_2182 * ((_2405 * _2428) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2182 * _2428) + _2391) * _2405))) * _2405;
        float _4484 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2440 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
        float _2441 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2366 = (((_2427 * cbLight._m0[_2376].x) * _2440) * _2441) + _2302;
        _2368 = (((_2427 * cbLight._m0[_2376].y) * _2440) * _2441) + _2303;
        _2370 = (((_2427 * cbLight._m0[_2376].z) * _2440) * _2441) + _2304;
    }
    float _2476;
    float _2478;
    float _2480;
    if (_2108)
    {
        _2476 = _2366;
        _2478 = _2368;
        _2480 = _2370;
    }
    else
    {
        uint _2487 = _2017 + 3u;
        uint _2491 = _2017 + 11u;
        float _2505 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2487].w)) * _790) * 0.949999988079071044921875);
        float _2506 = _2505 * _2505;
        float _2507 = cbLight._m0[_2487].x + _866;
        float _2508 = cbLight._m0[_2487].y + _867;
        float _2509 = cbLight._m0[_2487].z + _868;
        float _2513 = inversesqrt(dot(vec3(_2507, _2508, _2509), vec3(_2507, _2508, _2509)));
        float _2514 = _2513 * _2507;
        float _2515 = _2513 * _2508;
        float _2516 = _2513 * _2509;
        float _2517 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2487].xyz));
        float _4500 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2521 = dot(vec3(_787, _788, _789), vec3(_2514, _2515, _2516));
        float _4511 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2524 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2525 = dot(vec3(cbLight._m0[_2487].xyz), vec3(_2514, _2515, _2516));
        float _4522 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2529 = _2506 * _2506;
        float _2533 = ((_2524 * _2524) * (_2529 + (-1.0))) + 1.0;
        float _2542 = (exp2(log2(1.0 - (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2543 = 1.0 - _2506;
        float _2553 = (0.5 / (((_2182 * ((_2520 * _2543) + _2506)) + 9.9999999392252902907785028219223e-09) + (((_2182 * _2543) + _2506) * _2520))) * _2520;
        float _4533 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2555 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_2529 / ((_2533 * _2533) * 3.141590118408203125));
        float _2556 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2476 = (((_2542 * cbLight._m0[_2491].x) * _2555) * _2556) + _2366;
        _2478 = (((_2542 * cbLight._m0[_2491].y) * _2555) * _2556) + _2368;
        _2480 = (((_2542 * cbLight._m0[_2491].z) * _2555) * _2556) + _2370;
    }
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    if (_2015.y == 0u)
    {
        float _2631 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2632 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2631;
        float _2633 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2631;
        float _2634 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2631;
        uvec4 _2646 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2647 = _2646.x;
        uint _2658 = uint((float(_2646.y) * floor(float(uint(cbSceneParam._m0[85u].y * _887) / _2647))) + floor(float(uint(cbSceneParam._m0[85u].x * _886) / _2647)));
        float _2668 = (log2(_2634 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2669 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        uint _2672 = uint(isnan(14.0) ? _2669 : (isnan(_2669) ? 14.0 : min(_2669, 14.0)));
        uvec4 _2677 = texelFetch(g_lightClusterGridBuffer, int(((_2672 << 2u) + (_2658 << 6u)) >> 2u));
        uint _2678 = _2677.x;
        uint _2679 = _2646.z;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        if (((((1u << ((_2679 >> 4u) & 15u)) + 4294967295u) & _2678) == 0u) || ((_2679 & 240u) == 0u))
        {
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
            _2785 = 0.0;
            _2787 = 0.0;
            _2789 = 0.0;
        }
        else
        {
            float _2780;
            float _2782;
            float _2784;
            float _2786;
            float _2788;
            float _2790;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            uint _2938 = 0u;
            uint _2947;
            bool _2948;
            for (;;)
            {
                _2947 = texelFetch(g_lightClassification, int((((_2672 << 5u) + (_2658 << 9u)) + (_2938 << 2u)) >> 2u)).x;
                _2948 = _2947 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2948)
                {
                    frontier_phi_66_pred = _2932;
                    frontier_phi_66_pred_1 = _2937;
                    frontier_phi_66_pred_2 = _2936;
                    frontier_phi_66_pred_3 = _2935;
                    frontier_phi_66_pred_4 = _2934;
                    frontier_phi_66_pred_5 = _2933;
                }
                else
                {
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    uint _3083;
                    _3077 = _2932;
                    _3078 = _2933;
                    _3079 = _2934;
                    _3080 = _2935;
                    _3081 = _2936;
                    _3082 = _2937;
                    _3083 = _2947;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    for (;;)
                    {
                        uint _3087 = uint(findLSB(_3083)) + (_2938 << 5u);
                        uint _3084 = (_3083 + 4294967295u) & _3083;
                        uint _3089 = _3087 * 48u;
                        vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3089)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 3u)).x));
                        uint _3109 = (_3087 * 48u) + 4u;
                        vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 3u)).x));
                        uint _3128 = (_3087 * 48u) + 8u;
                        vec3 _3139 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3128)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 2u)).x));
                        float _3143 = _3103.x - _2632;
                        float _3144 = _3103.y - _2633;
                        float _3145 = _3103.z - _2634;
                        float _3146 = dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145));
                        float _3149 = inversesqrt(_3146);
                        float _3150 = _3149 * _3143;
                        float _3151 = _3149 * _3144;
                        float _3152 = _3149 * _3145;
                        float _3153 = dot(vec3(_905, _908, _911), vec3(_3150, _3151, _3152));
                        float _3158 = 1.0 - (_3146 * _3103.w);
                        float _4559 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3159 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3160 = sqrt(_3146) * _3122.w;
                        float _3163 = 1.39999997615814208984375 / (_3160 + 1.39999997615814208984375);
                        float _3164 = _3163 * _3163;
                        float _3167 = ((1.0 - _3164) * _3153) + _3164;
                        float _3170 = _3160 * _3160;
                        float _3174 = ((isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0))) * _3159) / ((_3170 * 0.699999988079071044921875) + 1.0);
                        float _3178 = (-0.0) - _2632;
                        float _3179 = (-0.0) - _2633;
                        float _3180 = (-0.0) - _2634;
                        float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                        float _3185 = _3184 * _3178;
                        float _3186 = _3184 * _3179;
                        float _3187 = _3184 * _3180;
                        float _3195 = exp2(log2(1.0 / ((_3170 * 3.5) + 5.0)) * 0.25);
                        float _3196 = 1.0 - _965;
                        float _3203 = sqrt(1.0 - ((1.0 - (_3196 * _3196)) * (1.0 - (_3195 * _3195))));
                        float _3204 = _3203 * _3203;
                        float _3205 = _3204 * _3204;
                        float _3206 = _3185 + _3150;
                        float _3207 = _3186 + _3151;
                        float _3208 = _3187 + _3152;
                        float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                        float _3216 = dot(vec3(_905, _908, _911), vec3(_3185, _3186, _3187));
                        float _4575 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3219 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                        float _3220 = dot(vec3(_905, _908, _911), vec3(_3212 * _3206, _3212 * _3207, _3212 * _3208));
                        float _4586 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3223 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                        float _3227 = ((_3223 * _3223) * (_3205 + (-1.0))) + 1.0;
                        float _3228 = _3163 * _3204;
                        float _3229 = _3228 * _3228;
                        float _3232 = ((1.0 - _3229) * _3153) + _3229;
                        float _4597 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3233 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3234 = 1.0 - _3204;
                        float _3244 = (0.5 / (((_3233 * ((_3219 * _3234) + _3204)) + 9.9999999392252902907785028219223e-09) + (((_3233 * _3234) + _3204) * _3219))) * _3233;
                        float _4608 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3255 = (((_3205 * 3.1415927410125732421875) * (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) / ((_3227 * _3227) * ((_3170 * 2.1991131305694580078125) + 3.141590118408203125))) * _3159;
                        _3007 = (_3174 * _3122.x) + _3080;
                        _3008 = (_3174 * _3122.y) + _3081;
                        _3009 = (_3174 * _3122.z) + _3082;
                        _3004 = (_3255 * _3139.x) + _3077;
                        _3005 = (_3255 * _3139.y) + _3078;
                        _3006 = (_3255 * _3139.z) + _3079;
                        if (_3084 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3077 = _3004;
                            _3078 = _3005;
                            _3079 = _3006;
                            _3080 = _3007;
                            _3081 = _3008;
                            _3082 = _3009;
                            _3083 = _3084;
                        }
                    }
                    frontier_phi_66_pred = _3004;
                    frontier_phi_66_pred_1 = _3009;
                    frontier_phi_66_pred_2 = _3008;
                    frontier_phi_66_pred_3 = _3007;
                    frontier_phi_66_pred_4 = _3006;
                    frontier_phi_66_pred_5 = _3005;
                }
                _2780 = frontier_phi_66_pred;
                _2790 = frontier_phi_66_pred_1;
                _2788 = frontier_phi_66_pred_2;
                _2786 = frontier_phi_66_pred_3;
                _2784 = frontier_phi_66_pred_4;
                _2782 = frontier_phi_66_pred_5;
                uint _2939 = _2938 + 1u;
                if (_2939 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2932 = _2780;
                    _2933 = _2782;
                    _2934 = _2784;
                    _2935 = _2786;
                    _2936 = _2788;
                    _2937 = _2790;
                    _2938 = _2939;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
            _2785 = _2786;
            _2787 = _2788;
            _2789 = _2790;
        }
        uvec4 _2793 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2794 = _2793.z;
        uint _2796 = (_2794 >> 8u) & 15u;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        if (((4294967295u << _2796) & _2678) == 0u)
        {
            _2900 = _2779;
            _2902 = _2781;
            _2904 = _2783;
            _2906 = _2785;
            _2908 = _2787;
            _2910 = _2789;
        }
        else
        {
            float _2925 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
            float _2926 = _2925 * _2632;
            float _2927 = _2925 * _2633;
            float _2928 = _2925 * _2634;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2796 < ((_2794 >> 12u) & 15u))
            {
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _3060 = _2779;
                float _3061 = _2781;
                float _3062 = _2783;
                float _3063 = _2785;
                float _3064 = _2787;
                float _3065 = _2789;
                uint _3066 = _2796;
                uint _3075;
                bool _3076;
                for (;;)
                {
                    _3075 = texelFetch(g_lightClassification, int((((_2672 << 5u) + (_2658 << 9u)) + (_3066 << 2u)) >> 2u)).x;
                    _3076 = _3075 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3076)
                    {
                        frontier_phi_77_pred = _3065;
                        frontier_phi_77_pred_1 = _3064;
                        frontier_phi_77_pred_2 = _3063;
                        frontier_phi_77_pred_3 = _3062;
                        frontier_phi_77_pred_4 = _3061;
                        frontier_phi_77_pred_5 = _3060;
                    }
                    else
                    {
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3282 = _3060;
                        float _3283 = _3061;
                        float _3284 = _3062;
                        float _3285 = _3063;
                        float _3286 = _3064;
                        float _3287 = _3065;
                        uint _3288 = _3075;
                        uint _3289;
                        vec4 _3314;
                        float _3315;
                        vec4 _3330;
                        vec3 _3342;
                        vec4 _3357;
                        vec4 _3372;
                        float _3418;
                        bool _3419;
                        for (;;)
                        {
                            uint _3299 = ((_3066 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3288));
                            _3289 = (_3288 + 4294967295u) & _3288;
                            uint _3301 = _3299 * 40u;
                            _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            _3315 = _3314.w;
                            uint _3317 = (_3299 * 40u) + 4u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3332 = (_3299 * 40u) + 8u;
                            _3342 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x));
                            uint _3344 = (_3299 * 40u) + 16u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3359 = (_3299 * 40u) + 20u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3374 = (_3299 * 40u) + 24u;
                            vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3393 = (_3299 * 40u) + 28u;
                            vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            _3418 = fma(_2634, _3406.z, fma(_2633, _3406.y, _3406.x * _2632)) + _3406.w;
                            _3419 = !((fma(_2634, _3387.z, fma(_2633, _3387.y, _3387.x * _2632)) + _3387.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3419)
                            {
                                float _3446 = _3314.x - _2632;
                                float _3447 = _3314.y - _2633;
                                float _3448 = _3314.z - _2634;
                                float _3449 = dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448));
                                float _3452 = inversesqrt(_3449);
                                float _3453 = _3452 * _3446;
                                float _3454 = _3452 * _3447;
                                float _3455 = _3452 * _3448;
                                float _3459 = 1.0 - (_3449 / (_3315 * _3315));
                                float _4619 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3464 = sqrt(_3449) * _3330.w;
                                float _3466 = 1.39999997615814208984375 / (_3464 + 1.39999997615814208984375);
                                float _3467 = _3466 * _3466;
                                float _3470 = ((1.0 - _3467) * dot(vec3(_3453, _3454, _3455), vec3(_905, _908, _911))) + _3467;
                                float _3473 = _3464 * _3464;
                                float _3477 = (fma(_2634, _3357.z, fma(_2633, _3357.y, _3357.x * _2632)) + _3357.w) / _3418;
                                float _3478 = (fma(_2634, _3372.z, fma(_2633, _3372.y, _3372.x * _2632)) + _3372.w) / _3418;
                                float _3482 = 1.0 - dot(vec2(_3477, _3478), vec2(_3477, _3478));
                                float _4635 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                                float _3483 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3484 = _3483 * (((isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0))) * _3460) / ((_3473 * 0.699999988079071044921875) + 1.0));
                                float _3496 = exp2(log2(1.0 / ((_3473 * 3.5) + 5.0)) * 0.25);
                                float _3497 = 1.0 - _965;
                                float _3504 = sqrt(1.0 - ((1.0 - (_3497 * _3497)) * (1.0 - (_3496 * _3496))));
                                float _3505 = _3504 * _3504;
                                float _3506 = _3505 * _3505;
                                float _3507 = _3453 - _2926;
                                float _3508 = _3454 - _2927;
                                float _3509 = _3455 - _2928;
                                float _3513 = inversesqrt(dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509)));
                                float _3517 = dot(vec3(_905, _908, _911), vec3((-0.0) - _2926, (-0.0) - _2927, (-0.0) - _2928));
                                float _4646 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3520 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                                float _3521 = dot(vec3(_905, _908, _911), vec3(_3513 * _3507, _3513 * _3508, _3513 * _3509));
                                float _4657 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3524 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3528 = ((_3524 * _3524) * (_3506 + (-1.0))) + 1.0;
                                float _3529 = _3466 * _3505;
                                float _3530 = _3529 * _3529;
                                float _3536 = ((1.0 - _3530) * dot(vec3(_905, _908, _911), vec3(_3453, _3454, _3455))) + _3530;
                                float _4668 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3538 = 1.0 - _3505;
                                float _3548 = (0.5 / (((_3537 * ((_3520 * _3538) + _3505)) + 9.9999999392252902907785028219223e-09) + (((_3537 * _3538) + _3505) * _3520))) * _3537;
                                float _4679 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3558 = (_3483 * _3460) * (((_3506 * 3.1415927410125732421875) * (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) / ((_3528 * _3528) * ((_3473 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3484 * _3330.y;
                                frontier_phi_83_pred_1 = _3484 * _3330.x;
                                frontier_phi_83_pred_2 = _3558 * _3342.z;
                                frontier_phi_83_pred_3 = _3558 * _3342.y;
                                frontier_phi_83_pred_4 = _3558 * _3342.x;
                                frontier_phi_83_pred_5 = _3484 * _3330.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3566 = frontier_phi_83_pred;
                            _3565 = frontier_phi_83_pred_1;
                            _3564 = frontier_phi_83_pred_2;
                            _3563 = frontier_phi_83_pred_3;
                            _3562 = frontier_phi_83_pred_4;
                            _3567 = frontier_phi_83_pred_5;
                            _3272 = _3565 + _3285;
                            _3273 = _3566 + _3286;
                            _3274 = _3567 + _3287;
                            _3269 = _3562 + _3282;
                            _3270 = _3563 + _3283;
                            _3271 = _3564 + _3284;
                            if (_3289 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3273;
                                _3287 = _3274;
                                _3288 = _3289;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3274;
                        frontier_phi_77_pred_1 = _3273;
                        frontier_phi_77_pred_2 = _3272;
                        frontier_phi_77_pred_3 = _3271;
                        frontier_phi_77_pred_4 = _3270;
                        frontier_phi_77_pred_5 = _3269;
                    }
                    _2911 = frontier_phi_77_pred;
                    _2909 = frontier_phi_77_pred_1;
                    _2907 = frontier_phi_77_pred_2;
                    _2905 = frontier_phi_77_pred_3;
                    _2903 = frontier_phi_77_pred_4;
                    _2901 = frontier_phi_77_pred_5;
                    uint _3067 = _3066 + 1u;
                    if (_3067 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3060 = _2901;
                        _3061 = _2903;
                        _3062 = _2905;
                        _3063 = _2907;
                        _3064 = _2909;
                        _3065 = _2911;
                        _3066 = _3067;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2905;
                frontier_phi_58_59_ladder_1 = _2911;
                frontier_phi_58_59_ladder_2 = _2909;
                frontier_phi_58_59_ladder_3 = _2907;
                frontier_phi_58_59_ladder_4 = _2903;
                frontier_phi_58_59_ladder_5 = _2901;
            }
            else
            {
                frontier_phi_58_59_ladder = _2783;
                frontier_phi_58_59_ladder_1 = _2789;
                frontier_phi_58_59_ladder_2 = _2787;
                frontier_phi_58_59_ladder_3 = _2785;
                frontier_phi_58_59_ladder_4 = _2781;
                frontier_phi_58_59_ladder_5 = _2779;
            }
            _2900 = frontier_phi_58_59_ladder_5;
            _2902 = frontier_phi_58_59_ladder_4;
            _2904 = frontier_phi_58_59_ladder;
            _2906 = frontier_phi_58_59_ladder_3;
            _2908 = frontier_phi_58_59_ladder_2;
            _2910 = frontier_phi_58_59_ladder_1;
        }
        float _2915 = isnan(1.0) ? _949 : (isnan(_949) ? 1.0 : min(_949, 1.0));
        _2691 = (_2915 * _2906) + _2146;
        _2693 = (_2915 * _2908) + _2148;
        _2695 = (_2915 * _2910) + _2150;
        _2697 = ((_2900 * 0.039999999105930328369140625) * _2915) + _2476;
        _2699 = ((_2902 * 0.039999999105930328369140625) * _2915) + _2478;
        _2701 = ((_2904 * 0.039999999105930328369140625) * _2915) + _2480;
    }
    else
    {
        _2691 = _2146;
        _2693 = _2148;
        _2695 = _2150;
        _2697 = _2476;
        _2699 = _2478;
        _2701 = _2480;
    }
    float _4695 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4706 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _4717 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _2718 = ((isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2691 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _949))) + ((_2697 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    float _2719 = ((isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2693 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _949))) + ((_2699 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    float _2720 = ((isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2695 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _949))) + ((_2701 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    uint _2721 = _277 + 6u;
    float _2729 = _886 / cbSceneParam._m0[86u].x;
    float _2730 = _887 / cbSceneParam._m0[86u].y;
    vec4 _2744 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2729, _2730, (log2((isnan(cbSceneParam._m0[77u].w) ? _808 : (isnan(_808) ? cbSceneParam._m0[77u].w : min(_808, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2746 = _2744.x;
    float _2747 = _2744.y;
    float _2748 = _2744.z;
    float _2749 = _2744.w;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    if (_808 > cbSceneParam._m0[78u].w)
    {
        float _2804 = isnan(_808) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _808 : min(cbSceneParam._m0[80u].w, _808));
        float _2805 = _2804 / _808;
        float _2816 = _2805 * _859;
        float _2817 = _860 * _2805;
        float _2818 = (-0.0) - _2817;
        float _2820 = _2805 * _861;
        float _2822 = (cbSceneParam._m0[77u].w * _2818) / _2804;
        float _2823 = _2822 + cbSceneParam._m0[79u].w;
        float _2824 = cbSceneParam._m0[79u].w - _2817;
        float _2830 = sqrt(((_2816 * _2816) + (_2817 * _2817)) + (_2820 * _2820));
        float _2833 = (1.0 - (cbSceneParam._m0[77u].w / _2804)) * _2830;
        float _2838 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2840 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3017;
        if (abs((_2818 - _2822) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3017 = ((((_2823 > 0.0) ? exp2(_2838 * _2823) : (2.0 - exp2(_2840 * _2823))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2833;
        }
        else
        {
            float _2961 = 1.0 / cbSceneParam._m0[80u].x;
            float _2962 = isnan(_2824) ? _2823 : (isnan(_2823) ? _2824 : max(_2823, _2824));
            float _2963 = isnan(_2824) ? _2823 : (isnan(_2823) ? _2824 : min(_2823, _2824));
            float _2972 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : min(_2962, 0.0));
            float _2973 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : min(_2963, 0.0));
            _3017 = ((abs(_2830 / _2818) * cbSceneParam._m0[80u].y) * ((((_2972 - _2973) * 2.0) - ((exp2(_2838 * (isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0)))) - exp2(_2838 * (isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0))))) * _2961)) - ((exp2(_2840 * _2972) - exp2(_2840 * _2973)) * _2961))) + (_2833 * cbSceneParam._m0[80u].z);
        }
        vec4 _3019 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2729, _2730, 1.0), 0.0);
        float _3028 = exp2((_3017 * (-1.44269502162933349609375)) * (1.0 - _3019.w));
        float _3029 = log2(_3028);
        float _3045 = log2(_2749);
        _2842 = (exp2(_3045 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].x)) * _3019.x) / cbSceneParam._m0[78u].x)) + _2746;
        _2844 = (exp2(_3045 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].y)) * _3019.y) / cbSceneParam._m0[78u].y)) + _2747;
        _2846 = (exp2(_3045 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3029 * cbSceneParam._m0[78u].z)) * _3019.z) / cbSceneParam._m0[78u].z)) + _2748;
        _2848 = _3028 * _2749;
    }
    else
    {
        _2842 = _2746;
        _2844 = _2747;
        _2846 = _2748;
        _2848 = _2749;
    }
    bool _3055;
    vec4 _2858;
    vec4 _2880;
    float _2882;
    float _2886;
    float _2887;
    float _2888;
    float _2889;
    bool _2899;
    for (;;)
    {
        _2858 = cbMatDynParam._m0[0u];
        float _2860 = roundEven(_2858.y);
        bool _2861 = _2860 == 3.0;
        float _2862 = log2(_2848);
        float _2869 = exp2(_2862 * cbSceneParam._m0[78u].x) * _2718;
        float _2870 = exp2(_2862 * cbSceneParam._m0[78u].y) * _2719;
        float _2871 = exp2(_2862 * cbSceneParam._m0[78u].z) * _2720;
        float _2878 = _875 + (-0.5);
        _2880 = cbMtdParam._m0[1u];
        _2882 = _2880.y * _2878;
        float _2885 = (_2860 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2886 = _2885 * (_2861 ? _2869 : (_2869 + (cbSceneParam._m0[72u].w * _2842)));
        _2887 = _2885 * (_2861 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2844)));
        _2888 = _2885 * (_2861 ? _2871 : (_2871 + (cbSceneParam._m0[72u].w * _2846)));
        _2889 = _2878 * 0.999000012874603271484375;
        _2899 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2899)
        {
            if ((cbInstanceData._m0[_277 + 7u].x + _2889) < 0.5)
            {
                _3055 = true;
                break;
            }
        }
        uint _2996 = _924 + uint(_2858.w);
        if ((cbInstanceData._m0[_2996].w < 1.0) && ((cbInstanceData._m0[_2996].w + _2889) < 0.5))
        {
            _3055 = true;
            break;
        }
        if ((_2882 + 1.0) < _2880.x)
        {
            _3055 = true;
            break;
        }
        _3055 = false;
        break;
    }
    float _3260;
    if (_3055)
    {
        discard_state = true;
        _3260 = 0.0;
    }
    else
    {
        _3260 = cbInstanceData._m0[_2721].w;
    }
    SV_Target.x = _2886;
    SV_Target.y = _2887;
    SV_Target.z = _2888;
    SV_Target.w = _3260;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2721].w;
    discard_exit();
}


