#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1113;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _338 = _336.x;
    float _348 = dot(vec4(_338, _336.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _365 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_338 - _348) * cbMtdParam._m0[24u].x) + _348) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3703 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _373 = (_366 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _374 = (_366 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _375 = (_366 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _393 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _410 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _412 = _410.x;
    float _413 = _410.y;
    float _414 = _410.z;
    float _423 = ((_393.z - _414) * _366) + _414;
    float _426 = ((((_393.x - _412) * _366) + _412) * 2.0) + (-1.0);
    float _428 = ((((_393.y - _413) * _366) + _413) * 2.0) + (-1.0);
    float _429 = dot(vec2(_426, _428), vec2(_426, _428));
    float _3714 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _434 = sqrt(1.0 - (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))));
    vec4 _450 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _462 = (((_450.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _426;
    float _463 = (((_450.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _428;
    float _466 = fma(_434, _218, fma(_463, _225, _462 * _211));
    float _469 = fma(_434, _219, fma(_463, _226, _462 * _212));
    float _472 = fma(_434, _220, fma(_463, _227, _462 * _213));
    float _476 = inversesqrt(dot(vec3(_466, _469, _472), vec3(_466, _469, _472)));
    vec4 _505 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _507 = _505.x;
    float _508 = 1.0 - _507;
    float _514 = (cbMtdParam._m0[19u].x + dot(vec4(_476 * _466, _476 * _469, _476 * _472, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_507 - _508) * cbMtdParam._m0[24u].z) + _508) * cbMtdParam._m0[21u].z);
    float _3725 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _515 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _522 = (_515 * (cbMtdParam._m0[17u].x - _373)) + _373;
    float _523 = (_515 * (cbMtdParam._m0[17u].y - _374)) + _374;
    float _524 = (_515 * (cbMtdParam._m0[17u].z - _375)) + _375;
    float _528 = (cbMtdParam._m0[19u].w * (_450.z - _423)) + _423;
    vec4 _541 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _548 = (_541.x * 2.0) + (-1.0);
    float _549 = (_541.y * 2.0) + (-1.0);
    float _550 = dot(vec2(_548, _549), vec2(_548, _549));
    float _3736 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _558 = ((_541.z - _528) * _515) + _528;
    float _568 = ((sqrt(1.0 - (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) - _434) * _515) + _434;
    float _571 = (((_548 - _462) * _515) + _462) + (cbMtdParam._m0[21u].x * _462);
    float _572 = (((_549 - _463) * _515) + _463) + (cbMtdParam._m0[21u].x * _463);
    float _577 = cbMtdParam._m0[22u].x + _450.w;
    float _580 = fma(_568, _218, fma(_572, _225, _571 * _211));
    float _583 = fma(_568, _219, fma(_572, _226, _571 * _212));
    float _586 = fma(_568, _220, fma(_572, _227, _571 * _213));
    float _590 = inversesqrt(dot(vec3(_580, _583, _586), vec3(_580, _583, _586)));
    float _591 = _590 * _580;
    float _592 = _590 * _583;
    float _593 = _590 * _586;
    float _3747 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _594 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _3769 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3780 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3791 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _612 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _654 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _664 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _654);
    float _665 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _654);
    float _666 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _654);
    float _670 = inversesqrt(dot(vec3(_664, _665, _666), vec3(_664, _665, _666)));
    float _671 = _664 * _670;
    float _672 = _665 * _670;
    float _673 = _666 * _670;
    float _679 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _680 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _698 = fma(_593, cbSceneParam._m0[5u].z, fma(_592, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _591));
    float _701 = fma(_593, cbSceneParam._m0[6u].z, fma(_592, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _591));
    float _704 = fma(_593, cbSceneParam._m0[7u].z, fma(_592, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _591));
    uint _718 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _724 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_718].x;
    float _725 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_718].y;
    float _726 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_718].z;
    float _3802 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    vec4 _738 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _679, cbSceneParam._m0[86u].y * _680));
    float _742 = ((isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * TEXCOORD_5.w) * _738.x;
    float _743 = dot(vec3(_591, _592, _593), vec3(_671, _672, _673));
    float _746 = _743 * 2.0;
    float _750 = (_746 * _591) - _671;
    float _751 = (_746 * _592) - _672;
    float _752 = (_746 * _593) - _673;
    float _756 = abs(dot(vec3(_671, _672, _673), vec3(_591, _592, _593)));
    float _3835 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _758 = sqrt(_594);
    float _771 = exp2((_758 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_758 * 3.0));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1112;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _837 = fma(_811, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _803));
        float _841 = fma(_811, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _803));
        float _845 = fma(_811, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _803));
        float _870 = _803 + _591;
        float _871 = _807 + _592;
        float _872 = _811 + _593;
        float _882 = fma(_872, cbModelParam._m0[26u].z, fma(_871, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _870)) - _837;
        float _883 = fma(_872, cbModelParam._m0[27u].z, fma(_871, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _870)) - _841;
        float _884 = fma(_872, cbModelParam._m0[28u].z, fma(_871, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _870)) - _845;
        float _888 = inversesqrt(dot(vec3(_882, _883, _884), vec3(_882, _883, _884)));
        float _901 = ((_888 * _882) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_837 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_888 * _883) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_841 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_888 * _884) / cbModelParam._m0[34u].z) + ((((((_845 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        float _940 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_906.x + (-0.5));
        float _942 = _940 * (_906.y + (-0.5));
        float _943 = _940 * (_906.z + (-0.5));
        float _950 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_913.x + (-0.5));
        float _952 = _950 * (_913.y + (-0.5));
        float _953 = _950 * (_913.z + (-0.5));
        float _960 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_920.x + (-0.5));
        float _962 = _960 * (_920.y + (-0.5));
        float _963 = _960 * (_920.z + (-0.5));
        float _970 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_927.x + (-0.5));
        float _972 = _970 * (_927.y + (-0.5));
        float _973 = _970 * (_927.z + (-0.5));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = _941 * 0.5;
        float _978 = _951 * 0.5;
        float _979 = _961 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _994 = (dot(vec3(_591, _592, _593), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1004 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3883 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1006 + 1.0))) + _1011) * _974;
        float _1021 = _942 * 0.5;
        float _1022 = _952 * 0.5;
        float _1023 = _962 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_591, _592, _593), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3916 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1048 + 1.0))) + _1053) * _975;
        float _1063 = _943 * 0.5;
        float _1064 = _953 * 0.5;
        float _1065 = _963 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_591, _592, _593), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3949 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1090 + 1.0))) + _1095) * _976;
        _1112 = _943;
        _1114 = _942;
        _1115 = _941;
        _1116 = _953;
        _1117 = _952;
        _1118 = _951;
        _1119 = _963;
        _1120 = _962;
        _1121 = _961;
        _1122 = _976;
        _1123 = _975;
        _1124 = _974;
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
    }
    else
    {
        _1112 = _1113;
        _1114 = _1113;
        _1115 = _1113;
        _1116 = _1113;
        _1117 = _1113;
        _1118 = _1113;
        _1119 = _1113;
        _1120 = _1113;
        _1121 = _1113;
        _1122 = _1113;
        _1123 = _1113;
        _1124 = _1113;
        _1125 = 0.0;
        _1126 = 0.0;
        _1127 = 0.0;
    }
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1152 = fma(_811, cbModelParam._m0[30u].z, fma(_807, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _803));
        float _1156 = fma(_811, cbModelParam._m0[31u].z, fma(_807, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _803));
        float _1160 = fma(_811, cbModelParam._m0[32u].z, fma(_807, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _803));
        float _1183 = _803 + _591;
        float _1184 = _807 + _592;
        float _1185 = _811 + _593;
        float _1195 = fma(_1185, cbModelParam._m0[30u].z, fma(_1184, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1183)) - _1152;
        float _1196 = fma(_1185, cbModelParam._m0[31u].z, fma(_1184, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1183)) - _1156;
        float _1197 = fma(_1185, cbModelParam._m0[32u].z, fma(_1184, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1183)) - _1160;
        float _1201 = inversesqrt(dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197)));
        float _1214 = ((_1201 * _1195) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1152 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1201 * _1196) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1156 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1201 * _1197) / cbModelParam._m0[35u].z) + ((((((_1160 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        float _1251 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1218.x + (-0.5));
        float _1253 = _1251 * (_1218.y + (-0.5));
        float _1254 = _1251 * (_1218.z + (-0.5));
        float _1261 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1225.x + (-0.5));
        float _1263 = _1261 * (_1225.y + (-0.5));
        float _1264 = _1261 * (_1225.z + (-0.5));
        float _1271 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1232.x + (-0.5));
        float _1273 = _1271 * (_1232.y + (-0.5));
        float _1274 = _1271 * (_1232.z + (-0.5));
        float _1281 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1239.x + (-0.5));
        float _1283 = _1281 * (_1239.y + (-0.5));
        float _1284 = _1281 * (_1239.z + (-0.5));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = _1252 * 0.5;
        float _1289 = _1262 * 0.5;
        float _1290 = _1272 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_591, _592, _593), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4012 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1315 + 1.0))) + _1320) * _1285;
        float _1330 = _1253 * 0.5;
        float _1331 = _1263 * 0.5;
        float _1332 = _1273 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_591, _592, _593), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4045 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1357 + 1.0))) + _1362) * _1286;
        float _1372 = _1254 * 0.5;
        float _1373 = _1264 * 0.5;
        float _1374 = _1274 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_591, _592, _593), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4078 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1399 + 1.0))) + _1404) * _1287;
        _1421 = _1254;
        _1422 = _1253;
        _1423 = _1252;
        _1424 = _1264;
        _1425 = _1263;
        _1426 = _1262;
        _1427 = _1274;
        _1428 = _1273;
        _1429 = _1272;
        _1430 = _1287;
        _1431 = _1286;
        _1432 = _1285;
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
    }
    else
    {
        _1421 = _1113;
        _1422 = _1113;
        _1423 = _1113;
        _1424 = _1113;
        _1425 = _1113;
        _1426 = _1113;
        _1427 = _1113;
        _1428 = _1113;
        _1429 = _1113;
        _1430 = _1113;
        _1431 = _1113;
        _1432 = _1113;
        _1433 = 0.0;
        _1434 = 0.0;
        _1435 = 0.0;
    }
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1125)) + _1125;
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1126)) + _1126;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1127)) + _1127;
    float _1468 = fma(_1447, cbSceneParam._m0[89u].z, fma(_1446, cbSceneParam._m0[89u].y, _1445 * cbSceneParam._m0[89u].x));
    float _1471 = fma(_1447, cbSceneParam._m0[90u].z, fma(_1446, cbSceneParam._m0[90u].y, _1445 * cbSceneParam._m0[90u].x));
    float _1474 = fma(_1447, cbSceneParam._m0[91u].z, fma(_1446, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1445));
    float _1489 = _750 * 0.5;
    float _1490 = _751 * 0.5;
    float _1491 = _752 * 0.5;
    float _1492 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1495 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1498 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1532;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1505 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1112, _1116, _1119, _1122));
        float _1509 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1114, _1117, _1120, _1123));
        float _1513 = dot(vec4(_1489, _1490, _1491, 1.0), vec4(_1115, _1118, _1121, _1124));
        float _1520 = dot(vec4(cbModelParam._m0[39u]), vec4(_1489, _1490, _1491, 1.0));
        _1532 = dot(vec3(isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1520) ? 0.0 : (isnan(0.0) ? _1520 : max(0.0, _1520))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1532 = 1.0;
    }
    float _1543;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1534 = dot(vec4(cbModelParam._m0[40u]), vec4(_1489, _1490, _1491, 1.0));
        _1543 = dot(vec3(isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1543 = 1.0;
    }
    float _1547 = (_1543 * cbModelParam._m0[1u].x) + (_1532 * (1.0 - cbModelParam._m0[1u].x));
    float _1557 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _594);
    float _1558 = isnan(_1557) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1557 : min(cbModelParam._m0[25u].z, _1557));
    float _1639;
    float _1641;
    float _1643;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1606 = fma(_811, cbModelParam._m0[13u].z, fma(_807, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803)) + cbModelParam._m0[13u].w;
        float _1610 = fma(_811, cbModelParam._m0[14u].z, fma(_807, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803)) + cbModelParam._m0[14u].w;
        float _1614 = fma(_811, cbModelParam._m0[15u].z, fma(_807, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803)) + cbModelParam._m0[15u].w;
        float _1617 = fma(_752, cbModelParam._m0[13u].z, fma(_751, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _750));
        float _1620 = fma(_752, cbModelParam._m0[14u].z, fma(_751, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _750));
        float _1623 = fma(_752, cbModelParam._m0[15u].z, fma(_751, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _750));
        float _1651;
        if (_1617 > 0.0)
        {
            _1651 = abs((1.0 - _1606) / _1617);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1606 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1651 = frontier_phi_14_12_ladder;
        }
        float _1821;
        if (_1620 > 0.0)
        {
            _1821 = abs((1.0 - _1610) / _1620);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1610 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1821 = frontier_phi_23_19_ladder;
        }
        float _2116;
        if (_1623 > 0.0)
        {
            _2116 = abs((1.0 - _1614) / _1623);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1614 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2116 = frontier_phi_35_30_ladder;
        }
        float _2118 = isnan(_1821) ? _1651 : (isnan(_1651) ? _1821 : min(_1651, _1821));
        float _2119 = isnan(_2116) ? _2118 : (isnan(_2118) ? _2116 : min(_2118, _2116));
        float _2123 = (_2119 * _1617) + _1606;
        float _2124 = (_2119 * _1620) + _1610;
        float _2125 = (_2119 * _1623) + _1614;
        float _2126 = _2119 * 9.9999997473787516355514526367188e-05;
        float _2128 = (-1.0) - _2126;
        float _2130 = _2126 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2125 > _2130) || ((_2125 < _2128) || ((_2124 > _2130) || ((_2124 < _2128) || ((_2123 < _2128) || (_2123 > _2130))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2270 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2125, cbModelParam._m0[9u].z, fma(_2124, cbModelParam._m0[9u].y, _2123 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2125, cbModelParam._m0[10u].z, fma(_2124, cbModelParam._m0[10u].y, _2123 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2125, cbModelParam._m0[11u].z, fma(_2124, cbModelParam._m0[11u].y, _2123 * cbModelParam._m0[11u].x))), _1558);
            frontier_phi_13_35_ladder = _2270.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2270.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2270.x * cbModelParam._m0[1u].y;
        }
        _1639 = frontier_phi_13_35_ladder_2;
        _1641 = frontier_phi_13_35_ladder_1;
        _1643 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1627 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_750, _751, _752), _1558);
        _1639 = _1627.x * cbModelParam._m0[1u].y;
        _1641 = _1627.y * cbModelParam._m0[1u].y;
        _1643 = _1627.z * cbModelParam._m0[1u].y;
    }
    float _1647 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _594);
    float _1648 = isnan(_1647) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1647 : min(cbModelParam._m0[25u].w, _1647));
    float _1738;
    float _1740;
    float _1742;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1702 = fma(_811, cbModelParam._m0[21u].z, fma(_807, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803)) + cbModelParam._m0[21u].w;
        float _1706 = fma(_811, cbModelParam._m0[22u].z, fma(_807, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803)) + cbModelParam._m0[22u].w;
        float _1710 = fma(_811, cbModelParam._m0[23u].z, fma(_807, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803)) + cbModelParam._m0[23u].w;
        float _1713 = fma(_752, cbModelParam._m0[21u].z, fma(_751, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _750));
        float _1716 = fma(_752, cbModelParam._m0[22u].z, fma(_751, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _750));
        float _1719 = fma(_752, cbModelParam._m0[23u].z, fma(_751, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _750));
        float _1826;
        if (_1713 > 0.0)
        {
            _1826 = abs((1.0 - _1702) / _1713);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1702 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1826 = frontier_phi_25_21_ladder;
        }
        float _2143;
        if (_1716 > 0.0)
        {
            _2143 = abs((1.0 - _1706) / _1716);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1706 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2143 = frontier_phi_37_32_ladder;
        }
        float _2470;
        if (_1719 > 0.0)
        {
            _2470 = abs((1.0 - _1710) / _1719);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1710 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2470 = frontier_phi_47_44_ladder;
        }
        float _2472 = isnan(_2143) ? _1826 : (isnan(_1826) ? _2143 : min(_1826, _2143));
        float _2473 = isnan(_2470) ? _2472 : (isnan(_2472) ? _2470 : min(_2472, _2470));
        float _2477 = (_2473 * _1713) + _1702;
        float _2478 = (_2473 * _1716) + _1706;
        float _2479 = (_2473 * _1719) + _1710;
        float _2480 = _2473 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2480;
        float _2483 = _2480 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2479 > _2483) || ((_2479 < _2481) || ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 < _2481) || (_2477 > _2483))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2597 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2479, cbModelParam._m0[17u].z, fma(_2478, cbModelParam._m0[17u].y, _2477 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2479, cbModelParam._m0[18u].z, fma(_2478, cbModelParam._m0[18u].y, _2477 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2479, cbModelParam._m0[19u].z, fma(_2478, cbModelParam._m0[19u].y, _2477 * cbModelParam._m0[19u].x))), _1648);
            frontier_phi_22_47_ladder = _2597.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2597.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2597.x * cbModelParam._m0[1u].z;
        }
        _1738 = frontier_phi_22_47_ladder_2;
        _1740 = frontier_phi_22_47_ladder_1;
        _1742 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_750, _751, _752), _1648);
        _1738 = _1722.x * cbModelParam._m0[1u].z;
        _1740 = _1722.y * cbModelParam._m0[1u].z;
        _1742 = _1722.z * cbModelParam._m0[1u].z;
    }
    float _1754 = ((((1.0 - _771) * ((_758 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_771 * _758)) * _742;
    float _1755 = _1754 * ((cbModelParam._m0[1u].w * (_1738 - _1639)) + _1639);
    float _1756 = _1754 * ((cbModelParam._m0[1u].w * (_1740 - _1641)) + _1641);
    float _1757 = _1754 * ((cbModelParam._m0[1u].w * (_1742 - _1643)) + _1643);
    float _1760 = fma(_1757, cbSceneParam._m0[89u].z, fma(_1756, cbSceneParam._m0[89u].y, _1755 * cbSceneParam._m0[89u].x));
    float _1763 = fma(_1757, cbSceneParam._m0[90u].z, fma(_1756, cbSceneParam._m0[90u].y, _1755 * cbSceneParam._m0[90u].x));
    float _1766 = fma(_1757, cbSceneParam._m0[91u].z, fma(_1756, cbSceneParam._m0[91u].y, _1755 * cbSceneParam._m0[91u].x));
    float _1800 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1804 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1808 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1812 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1813 = _1800 / _1812;
    float _1814 = _1804 / _1812;
    float _1815 = _1808 / _1812;
    float _1962;
    float _1963;
    float _1964;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1842 = ((uint(_1815 > cbSceneParam._m0[59u].y) + uint(_1815 > cbSceneParam._m0[59u].x)) + uint(_1815 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1843 = _1842 + 43u;
        uint _1851 = _1842 + 44u;
        uint _1859 = _1842 + 45u;
        uint _1867 = _1842 + 46u;
        float _1878 = fma(_1812, cbSceneParam._m0[_1843].w, fma(_1808, cbSceneParam._m0[_1843].z, fma(_1804, cbSceneParam._m0[_1843].y, _1800 * cbSceneParam._m0[_1843].x)));
        float _1882 = fma(_1812, cbSceneParam._m0[_1851].w, fma(_1808, cbSceneParam._m0[_1851].z, fma(_1804, cbSceneParam._m0[_1851].y, _1800 * cbSceneParam._m0[_1851].x)));
        float _1890 = fma(_1812, cbSceneParam._m0[_1867].w, fma(_1808, cbSceneParam._m0[_1867].z, fma(_1804, cbSceneParam._m0[_1867].y, _1800 * cbSceneParam._m0[_1867].x)));
        float _1895 = cbSceneParam._m0[33u].z * _1890;
        float _1897 = cbSceneParam._m0[33u].w * _1890;
        float _1900 = fma(_1812, cbSceneParam._m0[_1859].w, fma(_1808, cbSceneParam._m0[_1859].z, fma(_1804, cbSceneParam._m0[_1859].y, _1800 * cbSceneParam._m0[_1859].x))) / _1890;
        float _1948 = (cbSceneParam._m0[33u].x - sqrt(((_1814 * _1814) + (_1813 * _1813)) + (_1815 * _1815))) * cbSceneParam._m0[33u].y;
        float _4204 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1955 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1895 + _1878) / _1890, (_1897 + _1882) / _1890), _1900), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1897 + _1878) / _1890, (_1882 - _1895) / _1890), _1900), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1878 - _1895) / _1890, (_1882 - _1897) / _1890), _1900), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1878 - _1897) / _1890, (_1895 + _1882) / _1890), _1900), 0.0)).x), vec4(0.25)));
        _1962 = 1.0 - (_1955 * cbSceneParam._m0[34u].x);
        _1963 = 1.0 - (_1955 * cbSceneParam._m0[34u].y);
        _1964 = 1.0 - (_1955 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1962 = 1.0;
        _1963 = 1.0;
        _1964 = 1.0;
    }
    float _2028;
    float _2030;
    float _2032;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2016 = fma(_1812, cbSceneParam._m0[63u].w, fma(_1808, cbSceneParam._m0[63u].z, fma(_1804, cbSceneParam._m0[63u].y, _1800 * cbSceneParam._m0[63u].x)));
        float _2017 = fma(_1812, cbSceneParam._m0[60u].w, fma(_1808, cbSceneParam._m0[60u].z, fma(_1804, cbSceneParam._m0[60u].y, _1800 * cbSceneParam._m0[60u].x))) / _2016;
        float _2018 = fma(_1812, cbSceneParam._m0[61u].w, fma(_1808, cbSceneParam._m0[61u].z, fma(_1804, cbSceneParam._m0[61u].y, _1800 * cbSceneParam._m0[61u].x))) / _2016;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2017 >= cbSceneParam._m0[64u].x) && (_2018 >= cbSceneParam._m0[64u].y)) && (_2017 <= cbSceneParam._m0[64u].z)) && (_2018 <= cbSceneParam._m0[64u].w))
        {
            float _2156 = fma(_1812, cbSceneParam._m0[62u].w, fma(_1808, cbSceneParam._m0[62u].z, fma(_1804, cbSceneParam._m0[62u].y, _1800 * cbSceneParam._m0[62u].x))) / _2016;
            float _2160 = isnan(cbSceneParam._m0[41u].w) ? _2156 : (isnan(_2156) ? cbSceneParam._m0[41u].w : max(_2156, cbSceneParam._m0[41u].w));
            float _2203 = (cbSceneParam._m0[33u].x - sqrt(((_1814 * _1814) + (_1813 * _1813)) + (_1815 * _1815))) * cbSceneParam._m0[33u].y;
            float _4220 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
            float _2210 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2017, cbSceneParam._m0[33u].w + _2018), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2017, _2018 - cbSceneParam._m0[33u].z), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2017 - cbSceneParam._m0[33u].z, _2018 - cbSceneParam._m0[33u].w), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2017 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2018), _2160), 0.0)).x), vec4(0.25)));
            float _2214 = 1.0 - (_2210 * cbSceneParam._m0[34u].x);
            float _2215 = 1.0 - (_2210 * cbSceneParam._m0[34u].y);
            float _2216 = 1.0 - (_2210 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2216) ? _1964 : (isnan(_1964) ? _2216 : min(_1964, _2216));
            frontier_phi_34_33_ladder_1 = isnan(_2215) ? _1963 : (isnan(_1963) ? _2215 : min(_1963, _2215));
            frontier_phi_34_33_ladder_2 = isnan(_2214) ? _1962 : (isnan(_1962) ? _2214 : min(_1962, _2214));
        }
        else
        {
            frontier_phi_34_33_ladder = _1964;
            frontier_phi_34_33_ladder_1 = _1963;
            frontier_phi_34_33_ladder_2 = _1962;
        }
        _2028 = frontier_phi_34_33_ladder_2;
        _2030 = frontier_phi_34_33_ladder_1;
        _2032 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2028 = _1962;
        _2030 = _1963;
        _2032 = _1964;
    }
    uvec4 _2037 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _2039 = _2037.x * 14u;
    uint _2040 = _2039 + 13u;
    float _2047 = _742 + (-1.0);
    float _2052 = (cbLight._m0[_2040].x * _2047) + 1.0;
    float _2053 = (cbLight._m0[_2040].y * _2047) + 1.0;
    float _2054 = (cbLight._m0[_2040].z * _2047) + 1.0;
    float _2055 = (cbLight._m0[_2040].w * _2047) + 1.0;
    uint _2056 = _2039 + 5u;
    float _2062 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
    uint _2066 = _2039 + 4u;
    float _2075 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
    uint _2079 = _2039 | 1u;
    float _2090 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_591, _592, _593));
    float _2093 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_591, _592, _593));
    float _4256 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _4267 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2098 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * 0.3183098733425140380859375;
    float _2100 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * 0.3183098733425140380859375;
    float _2107 = ((cbLight._m0[_2056].x * _2062) * _2100) + (((cbLight._m0[_2066].x * _2028) * _2075) * _2098);
    float _2108 = ((_2062 * cbLight._m0[_2056].y) * _2100) + (((cbLight._m0[_2066].y * _2030) * _2075) * _2098);
    float _2109 = ((_2062 * cbLight._m0[_2056].z) * _2100) + (((cbLight._m0[_2066].z * _2032) * _2075) * _2098);
    uvec4 _2113 = floatBitsToUint(cbLight._m0[_2039 + 12u]);
    bool _2115 = _2113.x == 0u;
    float _2217;
    float _2219;
    float _2221;
    if (_2115)
    {
        _2217 = _2107;
        _2219 = _2108;
        _2221 = _2109;
    }
    else
    {
        uint _2225 = _2039 + 6u;
        float _2241 = (dot(vec3(cbLight._m0[_2039 + 2u].xyz), vec3(_591, _592, _593)) * 0.5) + 0.5;
        float _2242 = _2241 * _2241;
        float _4278 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2243 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2244 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2217 = (((cbLight._m0[_2225].x * 0.3183098733425140380859375) * _2243) * _2244) + _2107;
        _2219 = (((cbLight._m0[_2225].y * 0.3183098733425140380859375) * _2243) * _2244) + _2108;
        _2221 = (((cbLight._m0[_2225].z * 0.3183098733425140380859375) * _2243) * _2244) + _2109;
    }
    bool _2224 = _2113.y == 0u;
    float _2279;
    float _2281;
    float _2283;
    if (_2224)
    {
        _2279 = _2217;
        _2281 = _2219;
        _2283 = _2221;
    }
    else
    {
        uint _2441 = _2039 + 7u;
        float _2457 = (dot(vec3(cbLight._m0[_2039 + 3u].xyz), vec3(_591, _592, _593)) * 0.5) + 0.5;
        float _2458 = _2457 * _2457;
        float _4294 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2459 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2460 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
        _2279 = (((cbLight._m0[_2441].x * 0.3183098733425140380859375) * _2459) * _2460) + _2217;
        _2281 = (((cbLight._m0[_2441].y * 0.3183098733425140380859375) * _2459) * _2460) + _2219;
        _2283 = (((cbLight._m0[_2441].z * 0.3183098733425140380859375) * _2459) * _2460) + _2221;
    }
    uint _2286 = _2039 + 8u;
    float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _594) * 0.949999988079071044921875);
    float _2300 = _2299 * _2299;
    float _2301 = cbLight._m0[_2039].x + _671;
    float _2302 = cbLight._m0[_2039].y + _672;
    float _2303 = cbLight._m0[_2039].z + _673;
    float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
    float _2308 = _2307 * _2301;
    float _2309 = _2307 * _2302;
    float _2310 = _2307 * _2303;
    float _2311 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2039].xyz));
    float _4310 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _4321 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _2315 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _2316 = dot(vec3(_591, _592, _593), vec3(_2308, _2309, _2310));
    float _4332 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2320 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2308, _2309, _2310));
    float _4343 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2324 = _2300 * _2300;
    float _2328 = ((_2319 * _2319) * (_2324 + (-1.0))) + 1.0;
    float _2339 = (exp2(log2(1.0 - (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2340 = 1.0 - _2300;
    float _2351 = (0.5 / (((_2315 * ((_2314 * _2340) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_2315 * _2340) + _2300) * _2314))) * _2314;
    float _4354 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2353 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2324 / ((_2328 * _2328) * 3.141590118408203125));
    uint _2367 = _2039 + 9u;
    float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _594) * 0.949999988079071044921875);
    float _2379 = _2378 * _2378;
    float _2380 = cbLight._m0[_2079].x + _671;
    float _2381 = cbLight._m0[_2079].y + _672;
    float _2382 = cbLight._m0[_2079].z + _673;
    float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
    float _2387 = _2386 * _2380;
    float _2388 = _2386 * _2381;
    float _2389 = _2386 * _2382;
    float _2390 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2079].xyz));
    float _4365 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2394 = dot(vec3(_591, _592, _593), vec3(_2387, _2388, _2389));
    float _4376 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2398 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2387, _2388, _2389));
    float _4387 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2402 = _2379 * _2379;
    float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
    float _2415 = (exp2(log2(1.0 - (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2416 = 1.0 - _2379;
    float _2426 = (0.5 / (((_2315 * ((_2393 * _2416) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2315 * _2416) + _2379) * _2393))) * _2393;
    float _4398 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2428 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
    float _2438 = (((_2415 * cbLight._m0[_2367].x) * _2428) * _2062) + ((((cbLight._m0[_2286].x * _2028) * _2339) * _2353) * _2075);
    float _2439 = (((_2415 * cbLight._m0[_2367].y) * _2428) * _2062) + ((((cbLight._m0[_2286].y * _2030) * _2339) * _2353) * _2075);
    float _2440 = (((_2415 * cbLight._m0[_2367].z) * _2428) * _2062) + ((((cbLight._m0[_2286].z * _2032) * _2339) * _2353) * _2075);
    float _2496;
    float _2498;
    float _2500;
    if (_2115)
    {
        _2496 = _2438;
        _2498 = _2439;
        _2500 = _2440;
    }
    else
    {
        uint _2502 = _2039 + 2u;
        uint _2506 = _2039 + 10u;
        float _2520 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2502].w)) * _594) * 0.949999988079071044921875);
        float _2521 = _2520 * _2520;
        float _2522 = cbLight._m0[_2502].x + _671;
        float _2523 = cbLight._m0[_2502].y + _672;
        float _2524 = cbLight._m0[_2502].z + _673;
        float _2528 = inversesqrt(dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524)));
        float _2529 = _2528 * _2522;
        float _2530 = _2528 * _2523;
        float _2531 = _2528 * _2524;
        float _2532 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2502].xyz));
        float _4409 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2535 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2536 = dot(vec3(_591, _592, _593), vec3(_2529, _2530, _2531));
        float _4420 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2540 = dot(vec3(cbLight._m0[_2502].xyz), vec3(_2529, _2530, _2531));
        float _4431 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2544 = _2521 * _2521;
        float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
        float _2557 = (exp2(log2(1.0 - (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2558 = 1.0 - _2521;
        float _2568 = (0.5 / (((_2315 * ((_2535 * _2558) + _2521)) + 9.9999999392252902907785028219223e-09) + (((_2315 * _2558) + _2521) * _2535))) * _2535;
        float _4442 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2570 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
        float _2571 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
        _2496 = (((_2557 * cbLight._m0[_2506].x) * _2570) * _2571) + _2438;
        _2498 = (((_2557 * cbLight._m0[_2506].y) * _2570) * _2571) + _2439;
        _2500 = (((_2557 * cbLight._m0[_2506].z) * _2570) * _2571) + _2440;
    }
    float _2602;
    float _2604;
    float _2606;
    if (_2224)
    {
        _2602 = _2496;
        _2604 = _2498;
        _2606 = _2500;
    }
    else
    {
        uint _2613 = _2039 + 3u;
        uint _2617 = _2039 + 11u;
        float _2631 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2613].w)) * _594) * 0.949999988079071044921875);
        float _2632 = _2631 * _2631;
        float _2633 = cbLight._m0[_2613].x + _671;
        float _2634 = cbLight._m0[_2613].y + _672;
        float _2635 = cbLight._m0[_2613].z + _673;
        float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
        float _2640 = _2639 * _2633;
        float _2641 = _2639 * _2634;
        float _2642 = _2639 * _2635;
        float _2643 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2613].xyz));
        float _4458 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2646 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2647 = dot(vec3(_591, _592, _593), vec3(_2640, _2641, _2642));
        float _4469 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2650 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2651 = dot(vec3(cbLight._m0[_2613].xyz), vec3(_2640, _2641, _2642));
        float _4480 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2655 = _2632 * _2632;
        float _2659 = ((_2650 * _2650) * (_2655 + (-1.0))) + 1.0;
        float _2668 = (exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2669 = 1.0 - _2632;
        float _2679 = (0.5 / (((_2315 * ((_2646 * _2669) + _2632)) + 9.9999999392252902907785028219223e-09) + (((_2315 * _2669) + _2632) * _2646))) * _2646;
        float _4491 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2681 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2655 / ((_2659 * _2659) * 3.141590118408203125));
        float _2682 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
        _2602 = (((_2668 * cbLight._m0[_2617].x) * _2681) * _2682) + _2496;
        _2604 = (((_2668 * cbLight._m0[_2617].y) * _2681) * _2682) + _2498;
        _2606 = (((_2668 * cbLight._m0[_2617].z) * _2681) * _2682) + _2500;
    }
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    if (_2037.y == 0u)
    {
        uvec4 _2703 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2704 = _2703.x;
        uint _2715 = uint((float(_2703.y) * floor(float(uint(cbSceneParam._m0[85u].y * _680) / _2704))) + floor(float(uint(cbSceneParam._m0[85u].x * _679) / _2704)));
        float _2725 = (log2(_1815 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2726 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        uint _2729 = uint(isnan(14.0) ? _2726 : (isnan(_2726) ? 14.0 : min(_2726, 14.0)));
        uvec4 _2734 = texelFetch(g_lightClusterGridBuffer, int(((_2729 << 2u) + (_2715 << 6u)) >> 2u));
        uint _2735 = _2734.x;
        uint _2736 = _2703.z;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        if (((((1u << ((_2736 >> 4u) & 15u)) + 4294967295u) & _2735) == 0u) || ((_2736 & 240u) == 0u))
        {
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
            _2825 = 0.0;
        }
        else
        {
            float _2816;
            float _2818;
            float _2820;
            float _2822;
            float _2824;
            float _2826;
            float _2960 = 0.0;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            uint _2966 = 0u;
            uint _2975;
            bool _2976;
            for (;;)
            {
                _2975 = texelFetch(g_lightClassification, int((((_2729 << 5u) + (_2715 << 9u)) + (_2966 << 2u)) >> 2u)).x;
                _2976 = _2975 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2976)
                {
                    frontier_phi_66_pred = _2965;
                    frontier_phi_66_pred_1 = _2964;
                    frontier_phi_66_pred_2 = _2963;
                    frontier_phi_66_pred_3 = _2962;
                    frontier_phi_66_pred_4 = _2961;
                    frontier_phi_66_pred_5 = _2960;
                }
                else
                {
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    uint _3090;
                    _3084 = _2960;
                    _3085 = _2961;
                    _3086 = _2962;
                    _3087 = _2963;
                    _3088 = _2964;
                    _3089 = _2965;
                    _3090 = _2975;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    for (;;)
                    {
                        uint _3094 = uint(findLSB(_3090)) + (_2966 << 5u);
                        uint _3091 = (_3090 + 4294967295u) & _3090;
                        uint _3096 = _3094 * 48u;
                        vec4 _3110 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3096)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 3u)).x));
                        uint _3116 = (_3094 * 48u) + 4u;
                        vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3116)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3116 + 3u)).x));
                        uint _3135 = (_3094 * 48u) + 8u;
                        vec3 _3146 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x));
                        float _3150 = _3110.x - _1813;
                        float _3151 = _3110.y - _1814;
                        float _3152 = _3110.z - _1815;
                        float _3153 = dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152));
                        float _3156 = inversesqrt(_3153);
                        float _3157 = _3156 * _3150;
                        float _3158 = _3156 * _3151;
                        float _3159 = _3156 * _3152;
                        float _3160 = dot(vec3(_698, _701, _704), vec3(_3157, _3158, _3159));
                        float _3165 = 1.0 - (_3153 * _3110.w);
                        float _4517 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3166 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3167 = sqrt(_3153) * _3129.w;
                        float _3170 = 1.39999997615814208984375 / (_3167 + 1.39999997615814208984375);
                        float _3171 = _3170 * _3170;
                        float _3174 = ((1.0 - _3171) * _3160) + _3171;
                        float _3177 = _3167 * _3167;
                        float _3181 = ((isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0))) * _3166) / ((_3177 * 0.699999988079071044921875) + 1.0);
                        float _3185 = (-0.0) - _1813;
                        float _3186 = (-0.0) - _1814;
                        float _3187 = (-0.0) - _1815;
                        float _3191 = inversesqrt(dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187)));
                        float _3192 = _3191 * _3185;
                        float _3193 = _3191 * _3186;
                        float _3194 = _3191 * _3187;
                        float _3201 = exp2(log2(1.0 / ((_3177 * 3.5) + 5.0)) * 0.25);
                        float _3202 = 1.0 - _758;
                        float _3209 = sqrt(1.0 - ((1.0 - (_3202 * _3202)) * (1.0 - (_3201 * _3201))));
                        float _3210 = _3209 * _3209;
                        float _3211 = _3210 * _3210;
                        float _3212 = _3192 + _3157;
                        float _3213 = _3193 + _3158;
                        float _3214 = _3194 + _3159;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3222 = dot(vec3(_698, _701, _704), vec3(_3192, _3193, _3194));
                        float _4533 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                        float _3225 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3226 = dot(vec3(_698, _701, _704), vec3(_3218 * _3212, _3218 * _3213, _3218 * _3214));
                        float _4544 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3229 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                        float _3233 = ((_3229 * _3229) * (_3211 + (-1.0))) + 1.0;
                        float _3234 = _3170 * _3210;
                        float _3235 = _3234 * _3234;
                        float _3238 = ((1.0 - _3235) * _3160) + _3235;
                        float _4555 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3239 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3240 = 1.0 - _3210;
                        float _3250 = (0.5 / (((_3239 * ((_3225 * _3240) + _3210)) + 9.9999999392252902907785028219223e-09) + (((_3239 * _3240) + _3210) * _3225))) * _3239;
                        float _4566 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3261 = (((_3211 * 3.1415927410125732421875) * (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) / ((_3233 * _3233) * ((_3177 * 2.1991131305694580078125) + 3.141590118408203125))) * _3166;
                        _3019 = (_3181 * _3129.x) + _3087;
                        _3020 = (_3181 * _3129.y) + _3088;
                        _3021 = (_3181 * _3129.z) + _3089;
                        _3016 = (_3261 * _3146.x) + _3084;
                        _3017 = (_3261 * _3146.y) + _3085;
                        _3018 = (_3261 * _3146.z) + _3086;
                        if (_3091 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3084 = _3016;
                            _3085 = _3017;
                            _3086 = _3018;
                            _3087 = _3019;
                            _3088 = _3020;
                            _3089 = _3021;
                            _3090 = _3091;
                        }
                    }
                    frontier_phi_66_pred = _3021;
                    frontier_phi_66_pred_1 = _3020;
                    frontier_phi_66_pred_2 = _3019;
                    frontier_phi_66_pred_3 = _3018;
                    frontier_phi_66_pred_4 = _3017;
                    frontier_phi_66_pred_5 = _3016;
                }
                _2826 = frontier_phi_66_pred;
                _2824 = frontier_phi_66_pred_1;
                _2822 = frontier_phi_66_pred_2;
                _2820 = frontier_phi_66_pred_3;
                _2818 = frontier_phi_66_pred_4;
                _2816 = frontier_phi_66_pred_5;
                uint _2967 = _2966 + 1u;
                if (_2967 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2960 = _2816;
                    _2961 = _2818;
                    _2962 = _2820;
                    _2963 = _2822;
                    _2964 = _2824;
                    _2965 = _2826;
                    _2966 = _2967;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
            _2825 = _2826;
        }
        uvec4 _2829 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2830 = _2829.z;
        uint _2832 = (_2830 >> 8u) & 15u;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        if (((4294967295u << _2832) & _2735) == 0u)
        {
            _2928 = _2815;
            _2930 = _2817;
            _2932 = _2819;
            _2934 = _2821;
            _2936 = _2823;
            _2938 = _2825;
        }
        else
        {
            float _2953 = inversesqrt(dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815)));
            float _2954 = _2953 * _1813;
            float _2955 = _2953 * _1814;
            float _2956 = _2953 * _1815;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2832 < ((_2830 >> 12u) & 15u))
            {
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _2937;
                float _2939;
                float _3067 = _2815;
                float _3068 = _2817;
                float _3069 = _2819;
                float _3070 = _2821;
                float _3071 = _2823;
                float _3072 = _2825;
                uint _3073 = _2832;
                uint _3082;
                bool _3083;
                for (;;)
                {
                    _3082 = texelFetch(g_lightClassification, int((((_2729 << 5u) + (_2715 << 9u)) + (_3073 << 2u)) >> 2u)).x;
                    _3083 = _3082 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3083)
                    {
                        frontier_phi_72_pred = _3072;
                        frontier_phi_72_pred_1 = _3071;
                        frontier_phi_72_pred_2 = _3070;
                        frontier_phi_72_pred_3 = _3069;
                        frontier_phi_72_pred_4 = _3068;
                        frontier_phi_72_pred_5 = _3067;
                    }
                    else
                    {
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3279 = _3067;
                        float _3280 = _3068;
                        float _3281 = _3069;
                        float _3282 = _3070;
                        float _3283 = _3071;
                        float _3284 = _3072;
                        uint _3285 = _3082;
                        uint _3286;
                        vec4 _3311;
                        float _3312;
                        vec4 _3327;
                        vec3 _3339;
                        vec4 _3354;
                        vec4 _3370;
                        float _3416;
                        bool _3417;
                        for (;;)
                        {
                            uint _3296 = ((_3073 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3285));
                            _3286 = (_3285 + 4294967295u) & _3285;
                            uint _3298 = _3296 * 40u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            _3312 = _3311.w;
                            uint _3314 = (_3296 * 40u) + 4u;
                            _3327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 3u)).x));
                            uint _3329 = (_3296 * 40u) + 8u;
                            _3339 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x));
                            uint _3341 = (_3296 * 40u) + 16u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3357 = (_3296 * 40u) + 20u;
                            _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            uint _3372 = (_3296 * 40u) + 24u;
                            vec4 _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3391 = (_3296 * 40u) + 28u;
                            vec4 _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            _3416 = fma(_1815, _3404.z, fma(_1814, _3404.y, _3404.x * _1813)) + _3404.w;
                            _3417 = !((fma(_1815, _3385.z, fma(_1814, _3385.y, _3385.x * _1813)) + _3385.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3417)
                            {
                                float _3444 = _3311.x - _1813;
                                float _3445 = _3311.y - _1814;
                                float _3446 = _3311.z - _1815;
                                float _3447 = dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446));
                                float _3450 = inversesqrt(_3447);
                                float _3451 = _3450 * _3444;
                                float _3452 = _3450 * _3445;
                                float _3453 = _3450 * _3446;
                                float _3457 = 1.0 - (_3447 / (_3312 * _3312));
                                float _4577 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3458 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3462 = sqrt(_3447) * _3327.w;
                                float _3464 = 1.39999997615814208984375 / (_3462 + 1.39999997615814208984375);
                                float _3465 = _3464 * _3464;
                                float _3468 = ((1.0 - _3465) * dot(vec3(_3451, _3452, _3453), vec3(_698, _701, _704))) + _3465;
                                float _3471 = _3462 * _3462;
                                float _3475 = (fma(_1815, _3354.z, fma(_1814, _3354.y, _3354.x * _1813)) + _3354.w) / _3416;
                                float _3476 = (fma(_1815, _3370.z, fma(_1814, _3370.y, _3370.x * _1813)) + _3370.w) / _3416;
                                float _3480 = 1.0 - dot(vec2(_3475, _3476), vec2(_3475, _3476));
                                float _4593 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3481 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3482 = _3481 * (((isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0))) * _3458) / ((_3471 * 0.699999988079071044921875) + 1.0));
                                float _3494 = exp2(log2(1.0 / ((_3471 * 3.5) + 5.0)) * 0.25);
                                float _3495 = 1.0 - _758;
                                float _3502 = sqrt(1.0 - ((1.0 - (_3495 * _3495)) * (1.0 - (_3494 * _3494))));
                                float _3503 = _3502 * _3502;
                                float _3504 = _3503 * _3503;
                                float _3505 = _3451 - _2954;
                                float _3506 = _3452 - _2955;
                                float _3507 = _3453 - _2956;
                                float _3511 = inversesqrt(dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507)));
                                float _3515 = dot(vec3(_698, _701, _704), vec3((-0.0) - _2954, (-0.0) - _2955, (-0.0) - _2956));
                                float _4604 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3518 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3519 = dot(vec3(_698, _701, _704), vec3(_3511 * _3505, _3511 * _3506, _3511 * _3507));
                                float _4615 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3522 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3526 = ((_3522 * _3522) * (_3504 + (-1.0))) + 1.0;
                                float _3527 = _3464 * _3503;
                                float _3528 = _3527 * _3527;
                                float _3534 = ((1.0 - _3528) * dot(vec3(_698, _701, _704), vec3(_3451, _3452, _3453))) + _3528;
                                float _4626 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3535 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3536 = 1.0 - _3503;
                                float _3546 = (0.5 / (((_3535 * ((_3518 * _3536) + _3503)) + 9.9999999392252902907785028219223e-09) + (((_3535 * _3536) + _3503) * _3518))) * _3535;
                                float _4637 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3556 = (_3481 * _3458) * (((_3504 * 3.1415927410125732421875) * (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) / ((_3526 * _3526) * ((_3471 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3482 * _3327.y;
                                frontier_phi_78_pred_1 = _3482 * _3327.x;
                                frontier_phi_78_pred_2 = _3556 * _3339.z;
                                frontier_phi_78_pred_3 = _3556 * _3339.y;
                                frontier_phi_78_pred_4 = _3556 * _3339.x;
                                frontier_phi_78_pred_5 = _3482 * _3327.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3564 = frontier_phi_78_pred;
                            _3563 = frontier_phi_78_pred_1;
                            _3562 = frontier_phi_78_pred_2;
                            _3561 = frontier_phi_78_pred_3;
                            _3560 = frontier_phi_78_pred_4;
                            _3565 = frontier_phi_78_pred_5;
                            _3269 = _3563 + _3282;
                            _3270 = _3564 + _3283;
                            _3271 = _3565 + _3284;
                            _3266 = _3560 + _3279;
                            _3267 = _3561 + _3280;
                            _3268 = _3562 + _3281;
                            if (_3286 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3286;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3271;
                        frontier_phi_72_pred_1 = _3270;
                        frontier_phi_72_pred_2 = _3269;
                        frontier_phi_72_pred_3 = _3268;
                        frontier_phi_72_pred_4 = _3267;
                        frontier_phi_72_pred_5 = _3266;
                    }
                    _2939 = frontier_phi_72_pred;
                    _2937 = frontier_phi_72_pred_1;
                    _2935 = frontier_phi_72_pred_2;
                    _2933 = frontier_phi_72_pred_3;
                    _2931 = frontier_phi_72_pred_4;
                    _2929 = frontier_phi_72_pred_5;
                    uint _3074 = _3073 + 1u;
                    if (_3074 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3067 = _2929;
                        _3068 = _2931;
                        _3069 = _2933;
                        _3070 = _2935;
                        _3071 = _2937;
                        _3072 = _2939;
                        _3073 = _3074;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2939;
                frontier_phi_60_61_ladder_1 = _2937;
                frontier_phi_60_61_ladder_2 = _2933;
                frontier_phi_60_61_ladder_3 = _2931;
                frontier_phi_60_61_ladder_4 = _2929;
                frontier_phi_60_61_ladder_5 = _2935;
            }
            else
            {
                frontier_phi_60_61_ladder = _2825;
                frontier_phi_60_61_ladder_1 = _2823;
                frontier_phi_60_61_ladder_2 = _2819;
                frontier_phi_60_61_ladder_3 = _2817;
                frontier_phi_60_61_ladder_4 = _2815;
                frontier_phi_60_61_ladder_5 = _2821;
            }
            _2928 = frontier_phi_60_61_ladder_4;
            _2930 = frontier_phi_60_61_ladder_3;
            _2932 = frontier_phi_60_61_ladder_2;
            _2934 = frontier_phi_60_61_ladder_5;
            _2936 = frontier_phi_60_61_ladder_1;
            _2938 = frontier_phi_60_61_ladder;
        }
        float _2943 = isnan(1.0) ? _742 : (isnan(_742) ? 1.0 : min(_742, 1.0));
        _2748 = (_2943 * _2934) + _2279;
        _2750 = (_2943 * _2936) + _2281;
        _2752 = (_2943 * _2938) + _2283;
        _2754 = ((_2928 * 0.039999999105930328369140625) * _2943) + _2602;
        _2756 = ((_2930 * 0.039999999105930328369140625) * _2943) + _2604;
        _2758 = ((_2932 * 0.039999999105930328369140625) * _2943) + _2606;
    }
    else
    {
        _2748 = _2279;
        _2750 = _2281;
        _2752 = _2283;
        _2754 = _2602;
        _2756 = _2604;
        _2758 = _2606;
    }
    float _4653 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4664 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4675 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    uint _2778 = _230 + 6u;
    float _2786 = _679 / cbSceneParam._m0[86u].x;
    float _2787 = _680 / cbSceneParam._m0[86u].y;
    vec4 _2801 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2786, _2787, (log2((isnan(cbSceneParam._m0[77u].w) ? _612 : (isnan(_612) ? cbSceneParam._m0[77u].w : min(_612, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2803 = _2801.x;
    float _2804 = _2801.y;
    float _2805 = _2801.z;
    float _2806 = _2801.w;
    float _2878;
    float _2880;
    float _2882;
    float _2884;
    if (_612 > cbSceneParam._m0[78u].w)
    {
        float _2840 = isnan(_612) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _612 : min(cbSceneParam._m0[80u].w, _612));
        float _2841 = _2840 / _612;
        float _2852 = _2841 * _664;
        float _2853 = _665 * _2841;
        float _2854 = (-0.0) - _2853;
        float _2856 = _2841 * _666;
        float _2858 = (cbSceneParam._m0[77u].w * _2854) / _2840;
        float _2859 = _2858 + cbSceneParam._m0[79u].w;
        float _2860 = cbSceneParam._m0[79u].w - _2853;
        float _2866 = sqrt(((_2852 * _2852) + (_2853 * _2853)) + (_2856 * _2856));
        float _2869 = (1.0 - (cbSceneParam._m0[77u].w / _2840)) * _2866;
        float _2874 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2876 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3029;
        if (abs((_2854 - _2858) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3029 = ((((_2859 > 0.0) ? exp2(_2874 * _2859) : (2.0 - exp2(_2876 * _2859))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2869;
        }
        else
        {
            float _2989 = 1.0 / cbSceneParam._m0[80u].x;
            float _2990 = isnan(_2860) ? _2859 : (isnan(_2859) ? _2860 : max(_2859, _2860));
            float _2991 = isnan(_2860) ? _2859 : (isnan(_2859) ? _2860 : min(_2859, _2860));
            float _3000 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : min(_2990, 0.0));
            float _3001 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : min(_2991, 0.0));
            _3029 = ((abs(_2866 / _2854) * cbSceneParam._m0[80u].y) * ((((_3000 - _3001) * 2.0) - ((exp2(_2874 * (isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0)))) - exp2(_2874 * (isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0))))) * _2989)) - ((exp2(_2876 * _3000) - exp2(_2876 * _3001)) * _2989))) + (_2869 * cbSceneParam._m0[80u].z);
        }
        vec4 _3031 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2786, _2787, 1.0), 0.0);
        float _3040 = exp2((_3029 * (-1.44269502162933349609375)) * (1.0 - _3031.w));
        float _3041 = log2(_3040);
        float _3057 = log2(_2806);
        _2878 = (exp2(_3057 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3041 * cbSceneParam._m0[78u].x)) * _3031.x) / cbSceneParam._m0[78u].x)) + _2803;
        _2880 = (exp2(_3057 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3041 * cbSceneParam._m0[78u].y)) * _3031.y) / cbSceneParam._m0[78u].y)) + _2804;
        _2882 = (exp2(_3057 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3041 * cbSceneParam._m0[78u].z)) * _3031.z) / cbSceneParam._m0[78u].z)) + _2805;
        _2884 = _3040 * _2806;
    }
    else
    {
        _2878 = _2803;
        _2880 = _2804;
        _2882 = _2805;
        _2884 = _2806;
    }
    float _2896 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2897 = _2896 == 3.0;
    float _2898 = log2(_2884);
    float _2905 = exp2(_2898 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2748 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _742))) + ((_2754 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1547)) * cbPerFrame._m0[3u].x));
    float _2906 = exp2(_2898 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2750 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _742))) + ((_2756 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1547)) * cbPerFrame._m0[3u].x));
    float _2907 = exp2(_2898 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2752 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _742))) + ((_2758 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1547)) * cbPerFrame._m0[3u].x));
    float _2916 = (_2896 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2916 * (_2897 ? _2905 : (_2905 + (cbSceneParam._m0[72u].w * _2878)));
    SV_Target.y = _2916 * (_2897 ? _2906 : (_2906 + (cbSceneParam._m0[72u].w * _2880)));
    SV_Target.z = _2916 * (_2897 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2882)));
    SV_Target.w = cbInstanceData._m0[_2778].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2778].w;
}


