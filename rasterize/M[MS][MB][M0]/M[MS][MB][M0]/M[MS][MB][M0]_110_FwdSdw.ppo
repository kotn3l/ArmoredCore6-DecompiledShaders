#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1114;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _340 = _338.x;
    float _350 = dot(vec4(_340, _338.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _367 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_340 - _350) * cbMtdParam._m0[24u].x) + _350) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3704 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _375 = (_368 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _376 = (_368 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _377 = (_368 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _395 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _412 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _414 = _412.x;
    float _415 = _412.y;
    float _416 = _412.z;
    float _425 = ((_395.z - _416) * _368) + _416;
    float _428 = ((((_395.x - _414) * _368) + _414) * 2.0) + (-1.0);
    float _430 = ((((_395.y - _415) * _368) + _415) * 2.0) + (-1.0);
    float _431 = dot(vec2(_428, _430), vec2(_428, _430));
    float _3715 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _436 = sqrt(1.0 - (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))));
    float _439 = fma(_436, _220, fma(_430, _227, _428 * _213));
    float _442 = fma(_436, _221, fma(_430, _228, _428 * _214));
    float _445 = fma(_436, _222, fma(_430, _229, _428 * _215));
    float _449 = inversesqrt(dot(vec3(_439, _442, _445), vec3(_439, _442, _445)));
    vec4 _465 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _493 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _495 = _493.x;
    float _496 = 1.0 - _495;
    float _500 = ((_495 - _496) * cbMtdParam._m0[24u].z) + _496;
    float _502 = (cbMtdParam._m0[19u].x + dot(vec4(_449 * _439, _449 * _442, _449 * _445, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_500 * cbMtdParam._m0[21u].z);
    float _3726 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _518 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_500 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3737 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _519 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _523 = ((_503 * (cbMtdParam._m0[17u].x - _375)) * _519) + _375;
    float _524 = ((_503 * (cbMtdParam._m0[17u].y - _376)) * _519) + _376;
    float _525 = ((_503 * (cbMtdParam._m0[17u].z - _377)) * _519) + _377;
    vec4 _538 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _545 = (_538.x * 2.0) + (-1.0);
    float _546 = (_538.y * 2.0) + (-1.0);
    float _547 = dot(vec2(_545, _546), vec2(_545, _546));
    float _3748 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _556 = (((_538.z - _425) * _503) * _519) + _425;
    float _571 = (((cbMtdParam._m0[21u].x * _428) + ((_545 - _428) * _503)) * _519) + _428;
    float _572 = (((cbMtdParam._m0[21u].x * _430) + ((_546 - _430) * _503)) * _519) + _430;
    float _573 = (((sqrt(1.0 - (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) - _436) * _503) * _519) + _436;
    float _578 = cbMtdParam._m0[22u].x + _465.w;
    float _581 = fma(_573, _220, fma(_572, _227, _571 * _213));
    float _584 = fma(_573, _221, fma(_572, _228, _571 * _214));
    float _587 = fma(_573, _222, fma(_572, _229, _571 * _215));
    float _591 = inversesqrt(dot(vec3(_581, _584, _587), vec3(_581, _584, _587)));
    float _592 = _591 * _581;
    float _593 = _591 * _584;
    float _594 = _591 * _587;
    float _3759 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _595 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3781 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3792 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _3803 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _613 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _665 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _655);
    float _666 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _655);
    float _667 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _655);
    float _671 = inversesqrt(dot(vec3(_665, _666, _667), vec3(_665, _666, _667)));
    float _672 = _665 * _671;
    float _673 = _666 * _671;
    float _674 = _667 * _671;
    float _680 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _681 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _699 = fma(_594, cbSceneParam._m0[5u].z, fma(_593, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _592));
    float _702 = fma(_594, cbSceneParam._m0[6u].z, fma(_593, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _592));
    float _705 = fma(_594, cbSceneParam._m0[7u].z, fma(_593, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _592));
    uint _719 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _725 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * cbInstanceData._m0[_719].x;
    float _726 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * cbInstanceData._m0[_719].y;
    float _727 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) * cbInstanceData._m0[_719].z;
    float _3814 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _3836 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    vec4 _739 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _680, cbSceneParam._m0[86u].y * _681));
    float _743 = ((isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * TEXCOORD_5.w) * _739.x;
    float _744 = dot(vec3(_592, _593, _594), vec3(_672, _673, _674));
    float _747 = _744 * 2.0;
    float _751 = (_747 * _592) - _672;
    float _752 = (_747 * _593) - _673;
    float _753 = (_747 * _594) - _674;
    float _757 = abs(dot(vec3(_672, _673, _674), vec3(_592, _593, _594)));
    float _3847 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _759 = sqrt(_595);
    float _772 = exp2((_759 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_759 * 3.0));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _812 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1113;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _838 = fma(_812, cbModelParam._m0[26u].z, fma(_808, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _804));
        float _842 = fma(_812, cbModelParam._m0[27u].z, fma(_808, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _804));
        float _846 = fma(_812, cbModelParam._m0[28u].z, fma(_808, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _804));
        float _871 = _804 + _592;
        float _872 = _808 + _593;
        float _873 = _812 + _594;
        float _883 = fma(_873, cbModelParam._m0[26u].z, fma(_872, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _871)) - _838;
        float _884 = fma(_873, cbModelParam._m0[27u].z, fma(_872, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _871)) - _842;
        float _885 = fma(_873, cbModelParam._m0[28u].z, fma(_872, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _871)) - _846;
        float _889 = inversesqrt(dot(vec3(_883, _884, _885), vec3(_883, _884, _885)));
        float _902 = ((_889 * _883) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_838 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_889 * _884) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_842 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_889 * _885) / cbModelParam._m0[34u].z) + ((((((_846 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        float _941 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_907.x + (-0.5));
        float _943 = _941 * (_907.y + (-0.5));
        float _944 = _941 * (_907.z + (-0.5));
        float _951 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_914.x + (-0.5));
        float _953 = _951 * (_914.y + (-0.5));
        float _954 = _951 * (_914.z + (-0.5));
        float _961 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_921.x + (-0.5));
        float _963 = _961 * (_921.y + (-0.5));
        float _964 = _961 * (_921.z + (-0.5));
        float _971 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_928.x + (-0.5));
        float _973 = _971 * (_928.y + (-0.5));
        float _974 = _971 * (_928.z + (-0.5));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = _942 * 0.5;
        float _979 = _952 * 0.5;
        float _980 = _962 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _995 = (dot(vec3(_592, _593, _594), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1005 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3895 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1007 + 1.0))) + _1012) * _975;
        float _1022 = _943 * 0.5;
        float _1023 = _953 * 0.5;
        float _1024 = _963 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_592, _593, _594), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3928 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1049 + 1.0))) + _1054) * _976;
        float _1064 = _944 * 0.5;
        float _1065 = _954 * 0.5;
        float _1066 = _964 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_592, _593, _594), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3939 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3950 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3961 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1091 + 1.0))) + _1096) * _977;
        _1113 = _944;
        _1115 = _943;
        _1116 = _942;
        _1117 = _954;
        _1118 = _953;
        _1119 = _952;
        _1120 = _964;
        _1121 = _963;
        _1122 = _962;
        _1123 = _977;
        _1124 = _976;
        _1125 = _975;
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
    }
    else
    {
        _1113 = _1114;
        _1115 = _1114;
        _1116 = _1114;
        _1117 = _1114;
        _1118 = _1114;
        _1119 = _1114;
        _1120 = _1114;
        _1121 = _1114;
        _1122 = _1114;
        _1123 = _1114;
        _1124 = _1114;
        _1125 = _1114;
        _1126 = 0.0;
        _1127 = 0.0;
        _1128 = 0.0;
    }
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1153 = fma(_812, cbModelParam._m0[30u].z, fma(_808, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _804));
        float _1157 = fma(_812, cbModelParam._m0[31u].z, fma(_808, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _804));
        float _1161 = fma(_812, cbModelParam._m0[32u].z, fma(_808, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _804));
        float _1184 = _804 + _592;
        float _1185 = _808 + _593;
        float _1186 = _812 + _594;
        float _1196 = fma(_1186, cbModelParam._m0[30u].z, fma(_1185, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1184)) - _1153;
        float _1197 = fma(_1186, cbModelParam._m0[31u].z, fma(_1185, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1184)) - _1157;
        float _1198 = fma(_1186, cbModelParam._m0[32u].z, fma(_1185, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1184)) - _1161;
        float _1202 = inversesqrt(dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198)));
        float _1215 = ((_1202 * _1196) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1153 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1202 * _1197) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1157 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1202 * _1198) / cbModelParam._m0[35u].z) + ((((((_1161 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        float _1252 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1219.x + (-0.5));
        float _1254 = _1252 * (_1219.y + (-0.5));
        float _1255 = _1252 * (_1219.z + (-0.5));
        float _1262 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1226.x + (-0.5));
        float _1264 = _1262 * (_1226.y + (-0.5));
        float _1265 = _1262 * (_1226.z + (-0.5));
        float _1272 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1233.x + (-0.5));
        float _1274 = _1272 * (_1233.y + (-0.5));
        float _1275 = _1272 * (_1233.z + (-0.5));
        float _1282 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1240.x + (-0.5));
        float _1284 = _1282 * (_1240.y + (-0.5));
        float _1285 = _1282 * (_1240.z + (-0.5));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = _1253 * 0.5;
        float _1290 = _1263 * 0.5;
        float _1291 = _1273 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_592, _593, _594), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4002 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4013 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4024 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_1316 + 1.0))) + _1321) * _1286;
        float _1331 = _1254 * 0.5;
        float _1332 = _1264 * 0.5;
        float _1333 = _1274 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_592, _593, _594), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4057 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1358 + 1.0))) + _1363) * _1287;
        float _1373 = _1255 * 0.5;
        float _1374 = _1265 * 0.5;
        float _1375 = _1275 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_592, _593, _594), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4068 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4079 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4090 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1400 + 1.0))) + _1405) * _1288;
        _1422 = _1255;
        _1423 = _1254;
        _1424 = _1253;
        _1425 = _1265;
        _1426 = _1264;
        _1427 = _1263;
        _1428 = _1275;
        _1429 = _1274;
        _1430 = _1273;
        _1431 = _1288;
        _1432 = _1287;
        _1433 = _1286;
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
    }
    else
    {
        _1422 = _1114;
        _1423 = _1114;
        _1424 = _1114;
        _1425 = _1114;
        _1426 = _1114;
        _1427 = _1114;
        _1428 = _1114;
        _1429 = _1114;
        _1430 = _1114;
        _1431 = _1114;
        _1432 = _1114;
        _1433 = _1114;
        _1434 = 0.0;
        _1435 = 0.0;
        _1436 = 0.0;
    }
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1126)) + _1126;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1127)) + _1127;
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1128)) + _1128;
    float _1469 = fma(_1448, cbSceneParam._m0[89u].z, fma(_1447, cbSceneParam._m0[89u].y, _1446 * cbSceneParam._m0[89u].x));
    float _1472 = fma(_1448, cbSceneParam._m0[90u].z, fma(_1447, cbSceneParam._m0[90u].y, _1446 * cbSceneParam._m0[90u].x));
    float _1475 = fma(_1448, cbSceneParam._m0[91u].z, fma(_1447, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1446));
    float _1490 = _751 * 0.5;
    float _1491 = _752 * 0.5;
    float _1492 = _753 * 0.5;
    float _1493 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1496 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1499 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1533;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1506 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1113, _1117, _1120, _1123));
        float _1510 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1115, _1118, _1121, _1124));
        float _1514 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1116, _1119, _1122, _1125));
        float _1521 = dot(vec4(cbModelParam._m0[39u]), vec4(_1490, _1491, _1492, 1.0));
        _1533 = dot(vec3(isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1521) ? 0.0 : (isnan(0.0) ? _1521 : max(0.0, _1521))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1533 = 1.0;
    }
    float _1544;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1535 = dot(vec4(cbModelParam._m0[40u]), vec4(_1490, _1491, _1492, 1.0));
        _1544 = dot(vec3(isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1535) ? 0.0 : (isnan(0.0) ? _1535 : max(0.0, _1535))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1544 = 1.0;
    }
    float _1548 = (_1544 * cbModelParam._m0[1u].x) + (_1533 * (1.0 - cbModelParam._m0[1u].x));
    float _1558 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _595);
    float _1559 = isnan(_1558) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1558 : min(cbModelParam._m0[25u].z, _1558));
    float _1640;
    float _1642;
    float _1644;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1607 = fma(_812, cbModelParam._m0[13u].z, fma(_808, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804)) + cbModelParam._m0[13u].w;
        float _1611 = fma(_812, cbModelParam._m0[14u].z, fma(_808, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804)) + cbModelParam._m0[14u].w;
        float _1615 = fma(_812, cbModelParam._m0[15u].z, fma(_808, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804)) + cbModelParam._m0[15u].w;
        float _1618 = fma(_753, cbModelParam._m0[13u].z, fma(_752, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _751));
        float _1621 = fma(_753, cbModelParam._m0[14u].z, fma(_752, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _751));
        float _1624 = fma(_753, cbModelParam._m0[15u].z, fma(_752, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _751));
        float _1652;
        if (_1618 > 0.0)
        {
            _1652 = abs((1.0 - _1607) / _1618);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1607 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1652 = frontier_phi_14_12_ladder;
        }
        float _1822;
        if (_1621 > 0.0)
        {
            _1822 = abs((1.0 - _1611) / _1621);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1611 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1822 = frontier_phi_23_19_ladder;
        }
        float _2117;
        if (_1624 > 0.0)
        {
            _2117 = abs((1.0 - _1615) / _1624);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1615 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2117 = frontier_phi_35_30_ladder;
        }
        float _2119 = isnan(_1822) ? _1652 : (isnan(_1652) ? _1822 : min(_1652, _1822));
        float _2120 = isnan(_2117) ? _2119 : (isnan(_2119) ? _2117 : min(_2119, _2117));
        float _2124 = (_2120 * _1618) + _1607;
        float _2125 = (_2120 * _1621) + _1611;
        float _2126 = (_2120 * _1624) + _1615;
        float _2127 = _2120 * 9.9999997473787516355514526367188e-05;
        float _2129 = (-1.0) - _2127;
        float _2131 = _2127 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2126 > _2131) || ((_2126 < _2129) || ((_2125 > _2131) || ((_2125 < _2129) || ((_2124 < _2129) || (_2124 > _2131))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2271 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2126, cbModelParam._m0[9u].z, fma(_2125, cbModelParam._m0[9u].y, _2124 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2126, cbModelParam._m0[10u].z, fma(_2125, cbModelParam._m0[10u].y, _2124 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2126, cbModelParam._m0[11u].z, fma(_2125, cbModelParam._m0[11u].y, _2124 * cbModelParam._m0[11u].x))), _1559);
            frontier_phi_13_35_ladder = _2271.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2271.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2271.x * cbModelParam._m0[1u].y;
        }
        _1640 = frontier_phi_13_35_ladder_2;
        _1642 = frontier_phi_13_35_ladder_1;
        _1644 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1628 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_751, _752, _753), _1559);
        _1640 = _1628.x * cbModelParam._m0[1u].y;
        _1642 = _1628.y * cbModelParam._m0[1u].y;
        _1644 = _1628.z * cbModelParam._m0[1u].y;
    }
    float _1648 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _595);
    float _1649 = isnan(_1648) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1648 : min(cbModelParam._m0[25u].w, _1648));
    float _1739;
    float _1741;
    float _1743;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1703 = fma(_812, cbModelParam._m0[21u].z, fma(_808, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804)) + cbModelParam._m0[21u].w;
        float _1707 = fma(_812, cbModelParam._m0[22u].z, fma(_808, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804)) + cbModelParam._m0[22u].w;
        float _1711 = fma(_812, cbModelParam._m0[23u].z, fma(_808, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804)) + cbModelParam._m0[23u].w;
        float _1714 = fma(_753, cbModelParam._m0[21u].z, fma(_752, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _751));
        float _1717 = fma(_753, cbModelParam._m0[22u].z, fma(_752, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _751));
        float _1720 = fma(_753, cbModelParam._m0[23u].z, fma(_752, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _751));
        float _1827;
        if (_1714 > 0.0)
        {
            _1827 = abs((1.0 - _1703) / _1714);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1703 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1827 = frontier_phi_25_21_ladder;
        }
        float _2144;
        if (_1717 > 0.0)
        {
            _2144 = abs((1.0 - _1707) / _1717);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1707 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2144 = frontier_phi_37_32_ladder;
        }
        float _2471;
        if (_1720 > 0.0)
        {
            _2471 = abs((1.0 - _1711) / _1720);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1711 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2471 = frontier_phi_47_44_ladder;
        }
        float _2473 = isnan(_2144) ? _1827 : (isnan(_1827) ? _2144 : min(_1827, _2144));
        float _2474 = isnan(_2471) ? _2473 : (isnan(_2473) ? _2471 : min(_2473, _2471));
        float _2478 = (_2474 * _1714) + _1703;
        float _2479 = (_2474 * _1717) + _1707;
        float _2480 = (_2474 * _1720) + _1711;
        float _2481 = _2474 * 9.9999997473787516355514526367188e-05;
        float _2482 = (-1.0) - _2481;
        float _2484 = _2481 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2480 > _2484) || ((_2480 < _2482) || ((_2479 > _2484) || ((_2479 < _2482) || ((_2478 < _2482) || (_2478 > _2484))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2598 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2480, cbModelParam._m0[17u].z, fma(_2479, cbModelParam._m0[17u].y, _2478 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2480, cbModelParam._m0[18u].z, fma(_2479, cbModelParam._m0[18u].y, _2478 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2480, cbModelParam._m0[19u].z, fma(_2479, cbModelParam._m0[19u].y, _2478 * cbModelParam._m0[19u].x))), _1649);
            frontier_phi_22_47_ladder = _2598.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2598.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2598.x * cbModelParam._m0[1u].z;
        }
        _1739 = frontier_phi_22_47_ladder_2;
        _1741 = frontier_phi_22_47_ladder_1;
        _1743 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1723 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_751, _752, _753), _1649);
        _1739 = _1723.x * cbModelParam._m0[1u].z;
        _1741 = _1723.y * cbModelParam._m0[1u].z;
        _1743 = _1723.z * cbModelParam._m0[1u].z;
    }
    float _1755 = ((((1.0 - _772) * ((_759 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_772 * _759)) * _743;
    float _1756 = _1755 * ((cbModelParam._m0[1u].w * (_1739 - _1640)) + _1640);
    float _1757 = _1755 * ((cbModelParam._m0[1u].w * (_1741 - _1642)) + _1642);
    float _1758 = _1755 * ((cbModelParam._m0[1u].w * (_1743 - _1644)) + _1644);
    float _1761 = fma(_1758, cbSceneParam._m0[89u].z, fma(_1757, cbSceneParam._m0[89u].y, _1756 * cbSceneParam._m0[89u].x));
    float _1764 = fma(_1758, cbSceneParam._m0[90u].z, fma(_1757, cbSceneParam._m0[90u].y, _1756 * cbSceneParam._m0[90u].x));
    float _1767 = fma(_1758, cbSceneParam._m0[91u].z, fma(_1757, cbSceneParam._m0[91u].y, _1756 * cbSceneParam._m0[91u].x));
    float _1801 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1805 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1809 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1813 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1814 = _1801 / _1813;
    float _1815 = _1805 / _1813;
    float _1816 = _1809 / _1813;
    float _1963;
    float _1964;
    float _1965;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1843 = ((uint(_1816 > cbSceneParam._m0[59u].y) + uint(_1816 > cbSceneParam._m0[59u].x)) + uint(_1816 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1844 = _1843 + 43u;
        uint _1852 = _1843 + 44u;
        uint _1860 = _1843 + 45u;
        uint _1868 = _1843 + 46u;
        float _1879 = fma(_1813, cbSceneParam._m0[_1844].w, fma(_1809, cbSceneParam._m0[_1844].z, fma(_1805, cbSceneParam._m0[_1844].y, _1801 * cbSceneParam._m0[_1844].x)));
        float _1883 = fma(_1813, cbSceneParam._m0[_1852].w, fma(_1809, cbSceneParam._m0[_1852].z, fma(_1805, cbSceneParam._m0[_1852].y, _1801 * cbSceneParam._m0[_1852].x)));
        float _1891 = fma(_1813, cbSceneParam._m0[_1868].w, fma(_1809, cbSceneParam._m0[_1868].z, fma(_1805, cbSceneParam._m0[_1868].y, _1801 * cbSceneParam._m0[_1868].x)));
        float _1896 = cbSceneParam._m0[33u].z * _1891;
        float _1898 = cbSceneParam._m0[33u].w * _1891;
        float _1901 = fma(_1813, cbSceneParam._m0[_1860].w, fma(_1809, cbSceneParam._m0[_1860].z, fma(_1805, cbSceneParam._m0[_1860].y, _1801 * cbSceneParam._m0[_1860].x))) / _1891;
        float _1949 = (cbSceneParam._m0[33u].x - sqrt(((_1815 * _1815) + (_1814 * _1814)) + (_1816 * _1816))) * cbSceneParam._m0[33u].y;
        float _4216 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1956 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1896 + _1879) / _1891, (_1898 + _1883) / _1891), _1901), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1898 + _1879) / _1891, (_1883 - _1896) / _1891), _1901), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1879 - _1896) / _1891, (_1883 - _1898) / _1891), _1901), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1879 - _1898) / _1891, (_1896 + _1883) / _1891), _1901), 0.0)).x), vec4(0.25)));
        _1963 = 1.0 - (_1956 * cbSceneParam._m0[34u].x);
        _1964 = 1.0 - (_1956 * cbSceneParam._m0[34u].y);
        _1965 = 1.0 - (_1956 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1963 = 1.0;
        _1964 = 1.0;
        _1965 = 1.0;
    }
    float _2029;
    float _2031;
    float _2033;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2017 = fma(_1813, cbSceneParam._m0[63u].w, fma(_1809, cbSceneParam._m0[63u].z, fma(_1805, cbSceneParam._m0[63u].y, _1801 * cbSceneParam._m0[63u].x)));
        float _2018 = fma(_1813, cbSceneParam._m0[60u].w, fma(_1809, cbSceneParam._m0[60u].z, fma(_1805, cbSceneParam._m0[60u].y, _1801 * cbSceneParam._m0[60u].x))) / _2017;
        float _2019 = fma(_1813, cbSceneParam._m0[61u].w, fma(_1809, cbSceneParam._m0[61u].z, fma(_1805, cbSceneParam._m0[61u].y, _1801 * cbSceneParam._m0[61u].x))) / _2017;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2018 >= cbSceneParam._m0[64u].x) && (_2019 >= cbSceneParam._m0[64u].y)) && (_2018 <= cbSceneParam._m0[64u].z)) && (_2019 <= cbSceneParam._m0[64u].w))
        {
            float _2157 = fma(_1813, cbSceneParam._m0[62u].w, fma(_1809, cbSceneParam._m0[62u].z, fma(_1805, cbSceneParam._m0[62u].y, _1801 * cbSceneParam._m0[62u].x))) / _2017;
            float _2161 = isnan(cbSceneParam._m0[41u].w) ? _2157 : (isnan(_2157) ? cbSceneParam._m0[41u].w : max(_2157, cbSceneParam._m0[41u].w));
            float _2204 = (cbSceneParam._m0[33u].x - sqrt(((_1815 * _1815) + (_1814 * _1814)) + (_1816 * _1816))) * cbSceneParam._m0[33u].y;
            float _4232 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
            float _2211 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2018, cbSceneParam._m0[33u].w + _2019), _2161), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2018, _2019 - cbSceneParam._m0[33u].z), _2161), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2018 - cbSceneParam._m0[33u].z, _2019 - cbSceneParam._m0[33u].w), _2161), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2018 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2019), _2161), 0.0)).x), vec4(0.25)));
            float _2215 = 1.0 - (_2211 * cbSceneParam._m0[34u].x);
            float _2216 = 1.0 - (_2211 * cbSceneParam._m0[34u].y);
            float _2217 = 1.0 - (_2211 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2217) ? _1965 : (isnan(_1965) ? _2217 : min(_1965, _2217));
            frontier_phi_34_33_ladder_1 = isnan(_2216) ? _1964 : (isnan(_1964) ? _2216 : min(_1964, _2216));
            frontier_phi_34_33_ladder_2 = isnan(_2215) ? _1963 : (isnan(_1963) ? _2215 : min(_1963, _2215));
        }
        else
        {
            frontier_phi_34_33_ladder = _1965;
            frontier_phi_34_33_ladder_1 = _1964;
            frontier_phi_34_33_ladder_2 = _1963;
        }
        _2029 = frontier_phi_34_33_ladder_2;
        _2031 = frontier_phi_34_33_ladder_1;
        _2033 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2029 = _1963;
        _2031 = _1964;
        _2033 = _1965;
    }
    uvec4 _2038 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _2040 = _2038.x * 14u;
    uint _2041 = _2040 + 13u;
    float _2048 = _743 + (-1.0);
    float _2053 = (cbLight._m0[_2041].x * _2048) + 1.0;
    float _2054 = (cbLight._m0[_2041].y * _2048) + 1.0;
    float _2055 = (cbLight._m0[_2041].z * _2048) + 1.0;
    float _2056 = (cbLight._m0[_2041].w * _2048) + 1.0;
    uint _2057 = _2040 + 5u;
    float _2063 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
    uint _2067 = _2040 + 4u;
    float _2076 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
    uint _2080 = _2040 | 1u;
    float _2091 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_592, _593, _594));
    float _2094 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_592, _593, _594));
    float _4268 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _4279 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2099 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * 0.3183098733425140380859375;
    float _2101 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * 0.3183098733425140380859375;
    float _2108 = ((cbLight._m0[_2057].x * _2063) * _2101) + (((cbLight._m0[_2067].x * _2029) * _2076) * _2099);
    float _2109 = ((_2063 * cbLight._m0[_2057].y) * _2101) + (((cbLight._m0[_2067].y * _2031) * _2076) * _2099);
    float _2110 = ((_2063 * cbLight._m0[_2057].z) * _2101) + (((cbLight._m0[_2067].z * _2033) * _2076) * _2099);
    uvec4 _2114 = floatBitsToUint(cbLight._m0[_2040 + 12u]);
    bool _2116 = _2114.x == 0u;
    float _2218;
    float _2220;
    float _2222;
    if (_2116)
    {
        _2218 = _2108;
        _2220 = _2109;
        _2222 = _2110;
    }
    else
    {
        uint _2226 = _2040 + 6u;
        float _2242 = (dot(vec3(cbLight._m0[_2040 + 2u].xyz), vec3(_592, _593, _594)) * 0.5) + 0.5;
        float _2243 = _2242 * _2242;
        float _4290 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2244 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2245 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
        _2218 = (((cbLight._m0[_2226].x * 0.3183098733425140380859375) * _2244) * _2245) + _2108;
        _2220 = (((cbLight._m0[_2226].y * 0.3183098733425140380859375) * _2244) * _2245) + _2109;
        _2222 = (((cbLight._m0[_2226].z * 0.3183098733425140380859375) * _2244) * _2245) + _2110;
    }
    bool _2225 = _2114.y == 0u;
    float _2280;
    float _2282;
    float _2284;
    if (_2225)
    {
        _2280 = _2218;
        _2282 = _2220;
        _2284 = _2222;
    }
    else
    {
        uint _2442 = _2040 + 7u;
        float _2458 = (dot(vec3(cbLight._m0[_2040 + 3u].xyz), vec3(_592, _593, _594)) * 0.5) + 0.5;
        float _2459 = _2458 * _2458;
        float _4306 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2460 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2461 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2280 = (((cbLight._m0[_2442].x * 0.3183098733425140380859375) * _2460) * _2461) + _2218;
        _2282 = (((cbLight._m0[_2442].y * 0.3183098733425140380859375) * _2460) * _2461) + _2220;
        _2284 = (((cbLight._m0[_2442].z * 0.3183098733425140380859375) * _2460) * _2461) + _2222;
    }
    uint _2287 = _2040 + 8u;
    float _2300 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _595) * 0.949999988079071044921875);
    float _2301 = _2300 * _2300;
    float _2302 = cbLight._m0[_2040].x + _672;
    float _2303 = cbLight._m0[_2040].y + _673;
    float _2304 = cbLight._m0[_2040].z + _674;
    float _2308 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
    float _2309 = _2308 * _2302;
    float _2310 = _2308 * _2303;
    float _2311 = _2308 * _2304;
    float _2312 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_2040].xyz));
    float _4322 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _4333 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _2316 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2317 = dot(vec3(_592, _593, _594), vec3(_2309, _2310, _2311));
    float _4344 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2320 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2321 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2309, _2310, _2311));
    float _4355 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2325 = _2301 * _2301;
    float _2329 = ((_2320 * _2320) * (_2325 + (-1.0))) + 1.0;
    float _2340 = (exp2(log2(1.0 - (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2341 = 1.0 - _2301;
    float _2352 = (0.5 / (((_2316 * ((_2315 * _2341) + _2301)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2341) + _2301) * _2315))) * _2315;
    float _4366 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2354 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_2325 / ((_2329 * _2329) * 3.141590118408203125));
    uint _2368 = _2040 + 9u;
    float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2080].w)) * _595) * 0.949999988079071044921875);
    float _2380 = _2379 * _2379;
    float _2381 = cbLight._m0[_2080].x + _672;
    float _2382 = cbLight._m0[_2080].y + _673;
    float _2383 = cbLight._m0[_2080].z + _674;
    float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
    float _2388 = _2387 * _2381;
    float _2389 = _2387 * _2382;
    float _2390 = _2387 * _2383;
    float _2391 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_2080].xyz));
    float _4377 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2395 = dot(vec3(_592, _593, _594), vec3(_2388, _2389, _2390));
    float _4388 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2398 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _2399 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2388, _2389, _2390));
    float _4399 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2403 = _2380 * _2380;
    float _2407 = ((_2398 * _2398) * (_2403 + (-1.0))) + 1.0;
    float _2416 = (exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2417 = 1.0 - _2380;
    float _2427 = (0.5 / (((_2316 * ((_2394 * _2417) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2417) + _2380) * _2394))) * _2394;
    float _4410 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2429 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2403 / ((_2407 * _2407) * 3.141590118408203125));
    float _2439 = (((_2416 * cbLight._m0[_2368].x) * _2429) * _2063) + ((((cbLight._m0[_2287].x * _2029) * _2340) * _2354) * _2076);
    float _2440 = (((_2416 * cbLight._m0[_2368].y) * _2429) * _2063) + ((((cbLight._m0[_2287].y * _2031) * _2340) * _2354) * _2076);
    float _2441 = (((_2416 * cbLight._m0[_2368].z) * _2429) * _2063) + ((((cbLight._m0[_2287].z * _2033) * _2340) * _2354) * _2076);
    float _2497;
    float _2499;
    float _2501;
    if (_2116)
    {
        _2497 = _2439;
        _2499 = _2440;
        _2501 = _2441;
    }
    else
    {
        uint _2503 = _2040 + 2u;
        uint _2507 = _2040 + 10u;
        float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2503].w)) * _595) * 0.949999988079071044921875);
        float _2522 = _2521 * _2521;
        float _2523 = cbLight._m0[_2503].x + _672;
        float _2524 = cbLight._m0[_2503].y + _673;
        float _2525 = cbLight._m0[_2503].z + _674;
        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
        float _2530 = _2529 * _2523;
        float _2531 = _2529 * _2524;
        float _2532 = _2529 * _2525;
        float _2533 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_2503].xyz));
        float _4421 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2537 = dot(vec3(_592, _593, _594), vec3(_2530, _2531, _2532));
        float _4432 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2541 = dot(vec3(cbLight._m0[_2503].xyz), vec3(_2530, _2531, _2532));
        float _4443 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2545 = _2522 * _2522;
        float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
        float _2558 = (exp2(log2(1.0 - (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2559 = 1.0 - _2522;
        float _2569 = (0.5 / (((_2316 * ((_2536 * _2559) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2559) + _2522) * _2536))) * _2536;
        float _4454 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2571 = (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
        float _2572 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
        _2497 = (((_2558 * cbLight._m0[_2507].x) * _2571) * _2572) + _2439;
        _2499 = (((_2558 * cbLight._m0[_2507].y) * _2571) * _2572) + _2440;
        _2501 = (((_2558 * cbLight._m0[_2507].z) * _2571) * _2572) + _2441;
    }
    float _2603;
    float _2605;
    float _2607;
    if (_2225)
    {
        _2603 = _2497;
        _2605 = _2499;
        _2607 = _2501;
    }
    else
    {
        uint _2614 = _2040 + 3u;
        uint _2618 = _2040 + 11u;
        float _2632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2614].w)) * _595) * 0.949999988079071044921875);
        float _2633 = _2632 * _2632;
        float _2634 = cbLight._m0[_2614].x + _672;
        float _2635 = cbLight._m0[_2614].y + _673;
        float _2636 = cbLight._m0[_2614].z + _674;
        float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
        float _2641 = _2640 * _2634;
        float _2642 = _2640 * _2635;
        float _2643 = _2640 * _2636;
        float _2644 = dot(vec3(_592, _593, _594), vec3(cbLight._m0[_2614].xyz));
        float _4470 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2648 = dot(vec3(_592, _593, _594), vec3(_2641, _2642, _2643));
        float _4481 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2652 = dot(vec3(cbLight._m0[_2614].xyz), vec3(_2641, _2642, _2643));
        float _4492 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2656 = _2633 * _2633;
        float _2660 = ((_2651 * _2651) * (_2656 + (-1.0))) + 1.0;
        float _2669 = (exp2(log2(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2670 = 1.0 - _2633;
        float _2680 = (0.5 / (((_2316 * ((_2647 * _2670) + _2633)) + 9.9999999392252902907785028219223e-09) + (((_2316 * _2670) + _2633) * _2647))) * _2647;
        float _4503 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2682 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2656 / ((_2660 * _2660) * 3.141590118408203125));
        float _2683 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2603 = (((_2669 * cbLight._m0[_2618].x) * _2682) * _2683) + _2497;
        _2605 = (((_2669 * cbLight._m0[_2618].y) * _2682) * _2683) + _2499;
        _2607 = (((_2669 * cbLight._m0[_2618].z) * _2682) * _2683) + _2501;
    }
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    if (_2038.y == 0u)
    {
        uvec4 _2704 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2705 = _2704.x;
        uint _2716 = uint((float(_2704.y) * floor(float(uint(cbSceneParam._m0[85u].y * _681) / _2705))) + floor(float(uint(cbSceneParam._m0[85u].x * _680) / _2705)));
        float _2726 = (log2(_1816 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2727 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        uint _2730 = uint(isnan(14.0) ? _2727 : (isnan(_2727) ? 14.0 : min(_2727, 14.0)));
        uvec4 _2735 = texelFetch(g_lightClusterGridBuffer, int(((_2730 << 2u) + (_2716 << 6u)) >> 2u));
        uint _2736 = _2735.x;
        uint _2737 = _2704.z;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        if (((((1u << ((_2737 >> 4u) & 15u)) + 4294967295u) & _2736) == 0u) || ((_2737 & 240u) == 0u))
        {
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
        }
        else
        {
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            uint _2967 = 0u;
            uint _2976;
            bool _2977;
            for (;;)
            {
                _2976 = texelFetch(g_lightClassification, int((((_2730 << 5u) + (_2716 << 9u)) + (_2967 << 2u)) >> 2u)).x;
                _2977 = _2976 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2977)
                {
                    frontier_phi_66_pred = _2966;
                    frontier_phi_66_pred_1 = _2965;
                    frontier_phi_66_pred_2 = _2964;
                    frontier_phi_66_pred_3 = _2963;
                    frontier_phi_66_pred_4 = _2962;
                    frontier_phi_66_pred_5 = _2961;
                }
                else
                {
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    uint _3091;
                    _3085 = _2961;
                    _3086 = _2962;
                    _3087 = _2963;
                    _3088 = _2964;
                    _3089 = _2965;
                    _3090 = _2966;
                    _3091 = _2976;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    for (;;)
                    {
                        uint _3095 = uint(findLSB(_3091)) + (_2967 << 5u);
                        uint _3092 = (_3091 + 4294967295u) & _3091;
                        uint _3097 = _3095 * 48u;
                        vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3097)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3097 + 3u)).x));
                        uint _3117 = (_3095 * 48u) + 4u;
                        vec4 _3130 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 3u)).x));
                        uint _3136 = (_3095 * 48u) + 8u;
                        vec3 _3147 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3136)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 2u)).x));
                        float _3151 = _3111.x - _1814;
                        float _3152 = _3111.y - _1815;
                        float _3153 = _3111.z - _1816;
                        float _3154 = dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153));
                        float _3157 = inversesqrt(_3154);
                        float _3158 = _3157 * _3151;
                        float _3159 = _3157 * _3152;
                        float _3160 = _3157 * _3153;
                        float _3161 = dot(vec3(_699, _702, _705), vec3(_3158, _3159, _3160));
                        float _3166 = 1.0 - (_3154 * _3111.w);
                        float _4529 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3167 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3168 = sqrt(_3154) * _3130.w;
                        float _3171 = 1.39999997615814208984375 / (_3168 + 1.39999997615814208984375);
                        float _3172 = _3171 * _3171;
                        float _3175 = ((1.0 - _3172) * _3161) + _3172;
                        float _3178 = _3168 * _3168;
                        float _3182 = ((isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0))) * _3167) / ((_3178 * 0.699999988079071044921875) + 1.0);
                        float _3186 = (-0.0) - _1814;
                        float _3187 = (-0.0) - _1815;
                        float _3188 = (-0.0) - _1816;
                        float _3192 = inversesqrt(dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188)));
                        float _3193 = _3192 * _3186;
                        float _3194 = _3192 * _3187;
                        float _3195 = _3192 * _3188;
                        float _3202 = exp2(log2(1.0 / ((_3178 * 3.5) + 5.0)) * 0.25);
                        float _3203 = 1.0 - _759;
                        float _3210 = sqrt(1.0 - ((1.0 - (_3203 * _3203)) * (1.0 - (_3202 * _3202))));
                        float _3211 = _3210 * _3210;
                        float _3212 = _3211 * _3211;
                        float _3213 = _3193 + _3158;
                        float _3214 = _3194 + _3159;
                        float _3215 = _3195 + _3160;
                        float _3219 = inversesqrt(dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215)));
                        float _3223 = dot(vec3(_699, _702, _705), vec3(_3193, _3194, _3195));
                        float _4545 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3226 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                        float _3227 = dot(vec3(_699, _702, _705), vec3(_3219 * _3213, _3219 * _3214, _3219 * _3215));
                        float _4556 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3230 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3234 = ((_3230 * _3230) * (_3212 + (-1.0))) + 1.0;
                        float _3235 = _3171 * _3211;
                        float _3236 = _3235 * _3235;
                        float _3239 = ((1.0 - _3236) * _3161) + _3236;
                        float _4567 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3240 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                        float _3241 = 1.0 - _3211;
                        float _3251 = (0.5 / (((_3240 * ((_3226 * _3241) + _3211)) + 9.9999999392252902907785028219223e-09) + (((_3240 * _3241) + _3211) * _3226))) * _3240;
                        float _4578 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3262 = (((_3212 * 3.1415927410125732421875) * (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) / ((_3234 * _3234) * ((_3178 * 2.1991131305694580078125) + 3.141590118408203125))) * _3167;
                        _3020 = (_3182 * _3130.x) + _3088;
                        _3021 = (_3182 * _3130.y) + _3089;
                        _3022 = (_3182 * _3130.z) + _3090;
                        _3017 = (_3262 * _3147.x) + _3085;
                        _3018 = (_3262 * _3147.y) + _3086;
                        _3019 = (_3262 * _3147.z) + _3087;
                        if (_3092 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3085 = _3017;
                            _3086 = _3018;
                            _3087 = _3019;
                            _3088 = _3020;
                            _3089 = _3021;
                            _3090 = _3022;
                            _3091 = _3092;
                        }
                    }
                    frontier_phi_66_pred = _3022;
                    frontier_phi_66_pred_1 = _3021;
                    frontier_phi_66_pred_2 = _3020;
                    frontier_phi_66_pred_3 = _3019;
                    frontier_phi_66_pred_4 = _3018;
                    frontier_phi_66_pred_5 = _3017;
                }
                _2827 = frontier_phi_66_pred;
                _2825 = frontier_phi_66_pred_1;
                _2823 = frontier_phi_66_pred_2;
                _2821 = frontier_phi_66_pred_3;
                _2819 = frontier_phi_66_pred_4;
                _2817 = frontier_phi_66_pred_5;
                uint _2968 = _2967 + 1u;
                if (_2968 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2961 = _2817;
                    _2962 = _2819;
                    _2963 = _2821;
                    _2964 = _2823;
                    _2965 = _2825;
                    _2966 = _2827;
                    _2967 = _2968;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
        }
        uvec4 _2830 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2831 = _2830.z;
        uint _2833 = (_2831 >> 8u) & 15u;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        if (((4294967295u << _2833) & _2736) == 0u)
        {
            _2929 = _2816;
            _2931 = _2818;
            _2933 = _2820;
            _2935 = _2822;
            _2937 = _2824;
            _2939 = _2826;
        }
        else
        {
            float _2954 = inversesqrt(dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816)));
            float _2955 = _2954 * _1814;
            float _2956 = _2954 * _1815;
            float _2957 = _2954 * _1816;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2833 < ((_2831 >> 12u) & 15u))
            {
                float _2930;
                float _2932;
                float _2934;
                float _2936;
                float _2938;
                float _2940;
                float _3068 = _2816;
                float _3069 = _2818;
                float _3070 = _2820;
                float _3071 = _2822;
                float _3072 = _2824;
                float _3073 = _2826;
                uint _3074 = _2833;
                uint _3083;
                bool _3084;
                for (;;)
                {
                    _3083 = texelFetch(g_lightClassification, int((((_2730 << 5u) + (_2716 << 9u)) + (_3074 << 2u)) >> 2u)).x;
                    _3084 = _3083 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3084)
                    {
                        frontier_phi_72_pred = _3073;
                        frontier_phi_72_pred_1 = _3072;
                        frontier_phi_72_pred_2 = _3071;
                        frontier_phi_72_pred_3 = _3070;
                        frontier_phi_72_pred_4 = _3069;
                        frontier_phi_72_pred_5 = _3068;
                    }
                    else
                    {
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3280 = _3068;
                        float _3281 = _3069;
                        float _3282 = _3070;
                        float _3283 = _3071;
                        float _3284 = _3072;
                        float _3285 = _3073;
                        uint _3286 = _3083;
                        uint _3287;
                        vec4 _3312;
                        float _3313;
                        vec4 _3328;
                        vec3 _3340;
                        vec4 _3355;
                        vec4 _3371;
                        float _3417;
                        bool _3418;
                        for (;;)
                        {
                            uint _3297 = ((_3074 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3286));
                            _3287 = (_3286 + 4294967295u) & _3286;
                            uint _3299 = _3297 * 40u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            _3313 = _3312.w;
                            uint _3315 = (_3297 * 40u) + 4u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3330 = (_3297 * 40u) + 8u;
                            _3340 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x));
                            uint _3342 = (_3297 * 40u) + 16u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3358 = (_3297 * 40u) + 20u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3373 = (_3297 * 40u) + 24u;
                            vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3392 = (_3297 * 40u) + 28u;
                            vec4 _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            _3417 = fma(_1816, _3405.z, fma(_1815, _3405.y, _3405.x * _1814)) + _3405.w;
                            _3418 = !((fma(_1816, _3386.z, fma(_1815, _3386.y, _3386.x * _1814)) + _3386.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3418)
                            {
                                float _3445 = _3312.x - _1814;
                                float _3446 = _3312.y - _1815;
                                float _3447 = _3312.z - _1816;
                                float _3448 = dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447));
                                float _3451 = inversesqrt(_3448);
                                float _3452 = _3451 * _3445;
                                float _3453 = _3451 * _3446;
                                float _3454 = _3451 * _3447;
                                float _3458 = 1.0 - (_3448 / (_3313 * _3313));
                                float _4589 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3459 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3463 = sqrt(_3448) * _3328.w;
                                float _3465 = 1.39999997615814208984375 / (_3463 + 1.39999997615814208984375);
                                float _3466 = _3465 * _3465;
                                float _3469 = ((1.0 - _3466) * dot(vec3(_3452, _3453, _3454), vec3(_699, _702, _705))) + _3466;
                                float _3472 = _3463 * _3463;
                                float _3476 = (fma(_1816, _3355.z, fma(_1815, _3355.y, _3355.x * _1814)) + _3355.w) / _3417;
                                float _3477 = (fma(_1816, _3371.z, fma(_1815, _3371.y, _3371.x * _1814)) + _3371.w) / _3417;
                                float _3481 = 1.0 - dot(vec2(_3476, _3477), vec2(_3476, _3477));
                                float _4605 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3482 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3483 = _3482 * (((isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0))) * _3459) / ((_3472 * 0.699999988079071044921875) + 1.0));
                                float _3495 = exp2(log2(1.0 / ((_3472 * 3.5) + 5.0)) * 0.25);
                                float _3496 = 1.0 - _759;
                                float _3503 = sqrt(1.0 - ((1.0 - (_3496 * _3496)) * (1.0 - (_3495 * _3495))));
                                float _3504 = _3503 * _3503;
                                float _3505 = _3504 * _3504;
                                float _3506 = _3452 - _2955;
                                float _3507 = _3453 - _2956;
                                float _3508 = _3454 - _2957;
                                float _3512 = inversesqrt(dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508)));
                                float _3516 = dot(vec3(_699, _702, _705), vec3((-0.0) - _2955, (-0.0) - _2956, (-0.0) - _2957));
                                float _4616 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3519 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3520 = dot(vec3(_699, _702, _705), vec3(_3512 * _3506, _3512 * _3507, _3512 * _3508));
                                float _4627 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3523 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3527 = ((_3523 * _3523) * (_3505 + (-1.0))) + 1.0;
                                float _3528 = _3465 * _3504;
                                float _3529 = _3528 * _3528;
                                float _3535 = ((1.0 - _3529) * dot(vec3(_699, _702, _705), vec3(_3452, _3453, _3454))) + _3529;
                                float _4638 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3537 = 1.0 - _3504;
                                float _3547 = (0.5 / (((_3536 * ((_3519 * _3537) + _3504)) + 9.9999999392252902907785028219223e-09) + (((_3536 * _3537) + _3504) * _3519))) * _3536;
                                float _4649 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3557 = (_3482 * _3459) * (((_3505 * 3.1415927410125732421875) * (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) / ((_3527 * _3527) * ((_3472 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3483 * _3328.y;
                                frontier_phi_78_pred_1 = _3483 * _3328.x;
                                frontier_phi_78_pred_2 = _3557 * _3340.z;
                                frontier_phi_78_pred_3 = _3557 * _3340.y;
                                frontier_phi_78_pred_4 = _3557 * _3340.x;
                                frontier_phi_78_pred_5 = _3483 * _3328.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3565 = frontier_phi_78_pred;
                            _3564 = frontier_phi_78_pred_1;
                            _3563 = frontier_phi_78_pred_2;
                            _3562 = frontier_phi_78_pred_3;
                            _3561 = frontier_phi_78_pred_4;
                            _3566 = frontier_phi_78_pred_5;
                            _3270 = _3564 + _3283;
                            _3271 = _3565 + _3284;
                            _3272 = _3566 + _3285;
                            _3267 = _3561 + _3280;
                            _3268 = _3562 + _3281;
                            _3269 = _3563 + _3282;
                            if (_3287 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3271;
                                _3285 = _3272;
                                _3286 = _3287;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3272;
                        frontier_phi_72_pred_1 = _3271;
                        frontier_phi_72_pred_2 = _3270;
                        frontier_phi_72_pred_3 = _3269;
                        frontier_phi_72_pred_4 = _3268;
                        frontier_phi_72_pred_5 = _3267;
                    }
                    _2940 = frontier_phi_72_pred;
                    _2938 = frontier_phi_72_pred_1;
                    _2936 = frontier_phi_72_pred_2;
                    _2934 = frontier_phi_72_pred_3;
                    _2932 = frontier_phi_72_pred_4;
                    _2930 = frontier_phi_72_pred_5;
                    uint _3075 = _3074 + 1u;
                    if (_3075 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3068 = _2930;
                        _3069 = _2932;
                        _3070 = _2934;
                        _3071 = _2936;
                        _3072 = _2938;
                        _3073 = _2940;
                        _3074 = _3075;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2940;
                frontier_phi_60_61_ladder_1 = _2938;
                frontier_phi_60_61_ladder_2 = _2934;
                frontier_phi_60_61_ladder_3 = _2932;
                frontier_phi_60_61_ladder_4 = _2930;
                frontier_phi_60_61_ladder_5 = _2936;
            }
            else
            {
                frontier_phi_60_61_ladder = _2826;
                frontier_phi_60_61_ladder_1 = _2824;
                frontier_phi_60_61_ladder_2 = _2820;
                frontier_phi_60_61_ladder_3 = _2818;
                frontier_phi_60_61_ladder_4 = _2816;
                frontier_phi_60_61_ladder_5 = _2822;
            }
            _2929 = frontier_phi_60_61_ladder_4;
            _2931 = frontier_phi_60_61_ladder_3;
            _2933 = frontier_phi_60_61_ladder_2;
            _2935 = frontier_phi_60_61_ladder_5;
            _2937 = frontier_phi_60_61_ladder_1;
            _2939 = frontier_phi_60_61_ladder;
        }
        float _2944 = isnan(1.0) ? _743 : (isnan(_743) ? 1.0 : min(_743, 1.0));
        _2749 = (_2944 * _2935) + _2280;
        _2751 = (_2944 * _2937) + _2282;
        _2753 = (_2944 * _2939) + _2284;
        _2755 = ((_2929 * 0.039999999105930328369140625) * _2944) + _2603;
        _2757 = ((_2931 * 0.039999999105930328369140625) * _2944) + _2605;
        _2759 = ((_2933 * 0.039999999105930328369140625) * _2944) + _2607;
    }
    else
    {
        _2749 = _2280;
        _2751 = _2282;
        _2753 = _2284;
        _2755 = _2603;
        _2757 = _2605;
        _2759 = _2607;
    }
    float _4665 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4676 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4687 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    uint _2779 = _232 + 6u;
    float _2787 = _680 / cbSceneParam._m0[86u].x;
    float _2788 = _681 / cbSceneParam._m0[86u].y;
    vec4 _2802 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2787, _2788, (log2((isnan(cbSceneParam._m0[77u].w) ? _613 : (isnan(_613) ? cbSceneParam._m0[77u].w : min(_613, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2804 = _2802.x;
    float _2805 = _2802.y;
    float _2806 = _2802.z;
    float _2807 = _2802.w;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    if (_613 > cbSceneParam._m0[78u].w)
    {
        float _2841 = isnan(_613) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _613 : min(cbSceneParam._m0[80u].w, _613));
        float _2842 = _2841 / _613;
        float _2853 = _2842 * _665;
        float _2854 = _666 * _2842;
        float _2855 = (-0.0) - _2854;
        float _2857 = _2842 * _667;
        float _2859 = (cbSceneParam._m0[77u].w * _2855) / _2841;
        float _2860 = _2859 + cbSceneParam._m0[79u].w;
        float _2861 = cbSceneParam._m0[79u].w - _2854;
        float _2867 = sqrt(((_2853 * _2853) + (_2854 * _2854)) + (_2857 * _2857));
        float _2870 = (1.0 - (cbSceneParam._m0[77u].w / _2841)) * _2867;
        float _2875 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2877 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3030;
        if (abs((_2855 - _2859) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3030 = ((((_2860 > 0.0) ? exp2(_2875 * _2860) : (2.0 - exp2(_2877 * _2860))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2870;
        }
        else
        {
            float _2990 = 1.0 / cbSceneParam._m0[80u].x;
            float _2991 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : max(_2860, _2861));
            float _2992 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : min(_2860, _2861));
            float _3001 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : min(_2991, 0.0));
            float _3002 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : min(_2992, 0.0));
            _3030 = ((abs(_2867 / _2855) * cbSceneParam._m0[80u].y) * ((((_3001 - _3002) * 2.0) - ((exp2(_2875 * (isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0)))) - exp2(_2875 * (isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0))))) * _2990)) - ((exp2(_2877 * _3001) - exp2(_2877 * _3002)) * _2990))) + (_2870 * cbSceneParam._m0[80u].z);
        }
        vec4 _3032 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2787, _2788, 1.0), 0.0);
        float _3041 = exp2((_3030 * (-1.44269502162933349609375)) * (1.0 - _3032.w));
        float _3042 = log2(_3041);
        float _3058 = log2(_2807);
        _2879 = (exp2(_3058 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].x)) * _3032.x) / cbSceneParam._m0[78u].x)) + _2804;
        _2881 = (exp2(_3058 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].y)) * _3032.y) / cbSceneParam._m0[78u].y)) + _2805;
        _2883 = (exp2(_3058 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3042 * cbSceneParam._m0[78u].z)) * _3032.z) / cbSceneParam._m0[78u].z)) + _2806;
        _2885 = _3041 * _2807;
    }
    else
    {
        _2879 = _2804;
        _2881 = _2805;
        _2883 = _2806;
        _2885 = _2807;
    }
    float _2897 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2898 = _2897 == 3.0;
    float _2899 = log2(_2885);
    float _2906 = exp2(_2899 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2749 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _743))) + ((_2755 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1548)) * cbPerFrame._m0[3u].x));
    float _2907 = exp2(_2899 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2751 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _743))) + ((_2757 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1548)) * cbPerFrame._m0[3u].x));
    float _2908 = exp2(_2899 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2753 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _743))) + ((_2759 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1548)) * cbPerFrame._m0[3u].x));
    float _2917 = (_2897 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2917 * (_2898 ? _2906 : (_2906 + (cbSceneParam._m0[72u].w * _2879)));
    SV_Target.y = _2917 * (_2898 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2881)));
    SV_Target.z = _2917 * (_2898 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2883)));
    SV_Target.w = cbInstanceData._m0[_2779].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2779].w;
}


