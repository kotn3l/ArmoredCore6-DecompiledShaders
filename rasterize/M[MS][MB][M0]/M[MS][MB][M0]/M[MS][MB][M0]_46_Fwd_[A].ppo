#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1067;
float _3428;
float _3429;
float _3430;
float _3431;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _248) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _249) + cbTextureTilingScale._m0[14u].w));
    vec4 _315 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _248) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _249) + cbTextureTilingScale._m0[20u].w));
    vec4 _341 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _345 = _341.z;
    float _349 = (_341.x * 2.0) + (-1.0);
    float _350 = (_341.y * 2.0) + (-1.0);
    float _351 = dot(vec2(_349, _350), vec2(_349, _350));
    float _3440 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _357 = sqrt(1.0 - (isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))));
    float _362 = _349 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_315.x * 2.0) + (-1.0)));
    float _363 = _350 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_315.y * 2.0) + (-1.0)));
    float _366 = fma(_357, _216, fma(_363, _223, _362 * _209));
    float _369 = fma(_357, _217, fma(_363, _224, _362 * _210));
    float _372 = fma(_357, _218, fma(_363, _225, _362 * _211));
    float _376 = inversesqrt(dot(vec3(_366, _369, _372), vec3(_366, _369, _372)));
    vec4 _412 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _414 = _412.x;
    float _415 = 1.0 - _414;
    float _424 = (cbMtdParam._m0[19u].x + dot(vec4(_376 * _366, _376 * _369, _376 * _372, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_414 - _415) * cbMtdParam._m0[24u].z) + _415) * cbMtdParam._m0[21u].z);
    float _3451 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _432 = (_425 * ((_295.x * cbMtdParam._m0[18u].x) - _274)) + _274;
    float _433 = (_425 * ((_295.y * cbMtdParam._m0[18u].y) - _275)) + _275;
    float _434 = (_425 * ((_295.z * cbMtdParam._m0[18u].z) - _276)) + _276;
    float _439 = (((_315.z - _345) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _345;
    vec4 _452 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _459 = (_452.x * 2.0) + (-1.0);
    float _460 = (_452.y * 2.0) + (-1.0);
    float _461 = dot(vec2(_459, _460), vec2(_459, _460));
    float _3462 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _469 = ((_452.z - _439) * _425) + _439;
    float _479 = ((sqrt(1.0 - (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0)))) - _357) * _425) + _357;
    float _482 = (((_459 - _362) * _425) + _362) + (cbMtdParam._m0[21u].x * _362);
    float _483 = (((_460 - _363) * _425) + _363) + (cbMtdParam._m0[21u].x * _363);
    float _488 = cbMtdParam._m0[22u].x + _341.w;
    float _491 = fma(_479, _216, fma(_483, _223, _482 * _209));
    float _494 = fma(_479, _217, fma(_483, _224, _482 * _210));
    float _497 = fma(_479, _218, fma(_483, _225, _482 * _211));
    float _501 = inversesqrt(dot(vec3(_491, _494, _497), vec3(_491, _494, _497)));
    float _502 = _501 * _491;
    float _503 = _501 * _494;
    float _504 = _501 * _497;
    float _3473 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _505 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _3484 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3495 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3506 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3517 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _523 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _574 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _564);
    float _575 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _564);
    float _576 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _564);
    float _580 = inversesqrt(dot(vec3(_574, _575, _576), vec3(_574, _575, _576)));
    float _581 = _574 * _580;
    float _582 = _575 * _580;
    float _583 = _576 * _580;
    vec4 _588 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _590 = _588.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _747 = sqrt(((_574 * _574) + (_575 * _575)) + (_576 * _576));
        float _753 = (cbMatDynParam._m0[5u].x * _747) + cbMatDynParam._m0[5u].y;
        float _3528 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _754 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _758 = (cbMatDynParam._m0[5u].z * _747) + cbMatDynParam._m0[5u].w;
        float _3539 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) - _754)) + _754) < ((_590 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _602 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _603 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _623 = fma(_504, cbSceneParam._m0[5u].z, fma(_503, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _502));
    float _626 = fma(_504, cbSceneParam._m0[6u].z, fma(_503, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _502));
    float _629 = fma(_504, cbSceneParam._m0[7u].z, fma(_503, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _502));
    uint _642 = _228 + 9u;
    uint _643 = _642 + uint(cbMatDynParam._m0[0u].w);
    float _649 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) * cbInstanceData._m0[_643].x;
    float _650 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0)))) * cbInstanceData._m0[_643].y;
    float _651 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) * cbInstanceData._m0[_643].z;
    float _3550 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    vec4 _663 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _602, cbSceneParam._m0[86u].y * _603));
    float _667 = ((isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * TEXCOORD_5.w) * _663.x;
    float _668 = dot(vec3(_502, _503, _504), vec3(_581, _582, _583));
    float _671 = _668 * 2.0;
    float _675 = (_671 * _502) - _581;
    float _676 = (_671 * _503) - _582;
    float _677 = (_671 * _504) - _583;
    float _681 = abs(dot(vec3(_581, _582, _583), vec3(_502, _503, _504)));
    float _3583 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _683 = sqrt(_505);
    float _696 = exp2((_683 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_683 * 3.0));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1066;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _791 = fma(_736, cbModelParam._m0[26u].z, fma(_732, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _728));
        float _795 = fma(_736, cbModelParam._m0[27u].z, fma(_732, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _728));
        float _799 = fma(_736, cbModelParam._m0[28u].z, fma(_732, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _728));
        float _824 = _728 + _502;
        float _825 = _732 + _503;
        float _826 = _736 + _504;
        float _836 = fma(_826, cbModelParam._m0[26u].z, fma(_825, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _824)) - _791;
        float _837 = fma(_826, cbModelParam._m0[27u].z, fma(_825, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _824)) - _795;
        float _838 = fma(_826, cbModelParam._m0[28u].z, fma(_825, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _824)) - _799;
        float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
        float _855 = ((_842 * _836) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_791 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _856 = ((_842 * _837) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_795 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _857 = ((_842 * _838) / cbModelParam._m0[34u].z) + ((((((_799 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        float _894 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_860.x + (-0.5));
        float _896 = _894 * (_860.y + (-0.5));
        float _897 = _894 * (_860.z + (-0.5));
        float _904 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_867.x + (-0.5));
        float _906 = _904 * (_867.y + (-0.5));
        float _907 = _904 * (_867.z + (-0.5));
        float _914 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_874.x + (-0.5));
        float _916 = _914 * (_874.y + (-0.5));
        float _917 = _914 * (_874.z + (-0.5));
        float _924 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_881.x + (-0.5));
        float _926 = _924 * (_881.y + (-0.5));
        float _927 = _924 * (_881.z + (-0.5));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = _895 * 0.5;
        float _932 = _905 * 0.5;
        float _933 = _915 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _948 = (dot(vec3(_502, _503, _504), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _958 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3631 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_960 + 1.0))) + _965) * _928;
        float _975 = _896 * 0.5;
        float _976 = _906 * 0.5;
        float _977 = _916 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_502, _503, _504), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3664 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1002 + 1.0))) + _1007) * _929;
        float _1017 = _897 * 0.5;
        float _1018 = _907 * 0.5;
        float _1019 = _917 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_502, _503, _504), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3697 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1044 + 1.0))) + _1049) * _930;
        _1066 = _897;
        _1068 = _896;
        _1069 = _895;
        _1070 = _907;
        _1071 = _906;
        _1072 = _905;
        _1073 = _917;
        _1074 = _916;
        _1075 = _915;
        _1076 = _930;
        _1077 = _929;
        _1078 = _928;
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
        _1080 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
    }
    else
    {
        _1066 = _1067;
        _1068 = _1067;
        _1069 = _1067;
        _1070 = _1067;
        _1071 = _1067;
        _1072 = _1067;
        _1073 = _1067;
        _1074 = _1067;
        _1075 = _1067;
        _1076 = _1067;
        _1077 = _1067;
        _1078 = _1067;
        _1079 = 0.0;
        _1080 = 0.0;
        _1081 = 0.0;
    }
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1109 = fma(_736, cbModelParam._m0[30u].z, fma(_732, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _728));
        float _1113 = fma(_736, cbModelParam._m0[31u].z, fma(_732, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _728));
        float _1117 = fma(_736, cbModelParam._m0[32u].z, fma(_732, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _728));
        float _1140 = _728 + _502;
        float _1141 = _732 + _503;
        float _1142 = _736 + _504;
        float _1152 = fma(_1142, cbModelParam._m0[30u].z, fma(_1141, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1140)) - _1109;
        float _1153 = fma(_1142, cbModelParam._m0[31u].z, fma(_1141, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1140)) - _1113;
        float _1154 = fma(_1142, cbModelParam._m0[32u].z, fma(_1141, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1140)) - _1117;
        float _1158 = inversesqrt(dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154)));
        float _1171 = ((_1158 * _1152) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1109 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1158 * _1153) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1113 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1158 * _1154) / cbModelParam._m0[35u].z) + ((((((_1117 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        float _1208 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1175.x + (-0.5));
        float _1210 = _1208 * (_1175.y + (-0.5));
        float _1211 = _1208 * (_1175.z + (-0.5));
        float _1218 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1182.x + (-0.5));
        float _1220 = _1218 * (_1182.y + (-0.5));
        float _1221 = _1218 * (_1182.z + (-0.5));
        float _1228 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1189.x + (-0.5));
        float _1230 = _1228 * (_1189.y + (-0.5));
        float _1231 = _1228 * (_1189.z + (-0.5));
        float _1238 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1196.x + (-0.5));
        float _1240 = _1238 * (_1196.y + (-0.5));
        float _1241 = _1238 * (_1196.z + (-0.5));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = _1209 * 0.5;
        float _1246 = _1219 * 0.5;
        float _1247 = _1229 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_502, _503, _504), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _3760 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1272 + 1.0))) + _1277) * _1242;
        float _1287 = _1210 * 0.5;
        float _1288 = _1220 * 0.5;
        float _1289 = _1230 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_502, _503, _504), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _3793 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1314 + 1.0))) + _1319) * _1243;
        float _1329 = _1211 * 0.5;
        float _1330 = _1221 * 0.5;
        float _1331 = _1231 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_502, _503, _504), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _3826 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1356 + 1.0))) + _1361) * _1244;
        _1378 = _1211;
        _1379 = _1210;
        _1380 = _1209;
        _1381 = _1221;
        _1382 = _1220;
        _1383 = _1219;
        _1384 = _1231;
        _1385 = _1230;
        _1386 = _1229;
        _1387 = _1244;
        _1388 = _1243;
        _1389 = _1242;
        _1390 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
    }
    else
    {
        _1378 = _1067;
        _1379 = _1067;
        _1380 = _1067;
        _1381 = _1067;
        _1382 = _1067;
        _1383 = _1067;
        _1384 = _1067;
        _1385 = _1067;
        _1386 = _1067;
        _1387 = _1067;
        _1388 = _1067;
        _1389 = _1067;
        _1390 = 0.0;
        _1391 = 0.0;
        _1392 = 0.0;
    }
    float _1402 = (cbModelParam._m0[1u].x * (_1390 - _1079)) + _1079;
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1080)) + _1080;
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1081)) + _1081;
    float _1425 = fma(_1404, cbSceneParam._m0[89u].z, fma(_1403, cbSceneParam._m0[89u].y, _1402 * cbSceneParam._m0[89u].x));
    float _1428 = fma(_1404, cbSceneParam._m0[90u].z, fma(_1403, cbSceneParam._m0[90u].y, _1402 * cbSceneParam._m0[90u].x));
    float _1431 = fma(_1404, cbSceneParam._m0[91u].z, fma(_1403, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1402));
    float _1446 = _675 * 0.5;
    float _1447 = _676 * 0.5;
    float _1448 = _677 * 0.5;
    float _1449 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1452 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1455 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1378, _1381, _1384, _1387));
    float _1489;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1462 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1066, _1070, _1073, _1076));
        float _1466 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1068, _1071, _1074, _1077));
        float _1470 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1069, _1072, _1075, _1078));
        float _1477 = dot(vec4(cbModelParam._m0[39u]), vec4(_1446, _1447, _1448, 1.0));
        _1489 = dot(vec3(isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1477) ? 0.0 : (isnan(0.0) ? _1477 : max(0.0, _1477))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1489 = 1.0;
    }
    float _1500;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1491 = dot(vec4(cbModelParam._m0[40u]), vec4(_1446, _1447, _1448, 1.0));
        _1500 = dot(vec3(isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1491) ? 0.0 : (isnan(0.0) ? _1491 : max(0.0, _1491))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1500 = 1.0;
    }
    float _1504 = (_1500 * cbModelParam._m0[1u].x) + (_1489 * (1.0 - cbModelParam._m0[1u].x));
    float _1514 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _505);
    float _1515 = isnan(_1514) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1514 : min(cbModelParam._m0[25u].z, _1514));
    float _1595;
    float _1597;
    float _1599;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1562 = fma(_736, cbModelParam._m0[13u].z, fma(_732, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _728)) + cbModelParam._m0[13u].w;
        float _1566 = fma(_736, cbModelParam._m0[14u].z, fma(_732, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _728)) + cbModelParam._m0[14u].w;
        float _1570 = fma(_736, cbModelParam._m0[15u].z, fma(_732, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _728)) + cbModelParam._m0[15u].w;
        float _1573 = fma(_677, cbModelParam._m0[13u].z, fma(_676, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _675));
        float _1576 = fma(_677, cbModelParam._m0[14u].z, fma(_676, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _675));
        float _1579 = fma(_677, cbModelParam._m0[15u].z, fma(_676, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _675));
        float _1607;
        if (_1573 > 0.0)
        {
            _1607 = abs((1.0 - _1562) / _1573);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1562 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1607 = frontier_phi_17_15_ladder;
        }
        float _1809;
        if (_1576 > 0.0)
        {
            _1809 = abs((1.0 - _1566) / _1576);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1566 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1809 = frontier_phi_26_22_ladder;
        }
        float _2052;
        if (_1579 > 0.0)
        {
            _2052 = abs((1.0 - _1570) / _1579);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1570 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2052 = frontier_phi_38_33_ladder;
        }
        float _2054 = isnan(_1809) ? _1607 : (isnan(_1607) ? _1809 : min(_1607, _1809));
        float _2055 = isnan(_2052) ? _2054 : (isnan(_2054) ? _2052 : min(_2054, _2052));
        float _2059 = (_2055 * _1573) + _1562;
        float _2060 = (_2055 * _1576) + _1566;
        float _2061 = (_2055 * _1579) + _1570;
        float _2062 = _2055 * 9.9999997473787516355514526367188e-05;
        float _2064 = (-1.0) - _2062;
        float _2066 = _2062 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2061 > _2066) || ((_2061 < _2064) || ((_2060 > _2066) || ((_2060 < _2064) || ((_2059 < _2064) || (_2059 > _2066))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2185 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2061, cbModelParam._m0[9u].z, fma(_2060, cbModelParam._m0[9u].y, _2059 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2061, cbModelParam._m0[10u].z, fma(_2060, cbModelParam._m0[10u].y, _2059 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2061, cbModelParam._m0[11u].z, fma(_2060, cbModelParam._m0[11u].y, _2059 * cbModelParam._m0[11u].x))), _1515);
            frontier_phi_16_38_ladder = _2185.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2185.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2185.x * cbModelParam._m0[1u].y;
        }
        _1595 = frontier_phi_16_38_ladder_2;
        _1597 = frontier_phi_16_38_ladder_1;
        _1599 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1583 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_675, _676, _677), _1515);
        _1595 = _1583.x * cbModelParam._m0[1u].y;
        _1597 = _1583.y * cbModelParam._m0[1u].y;
        _1599 = _1583.z * cbModelParam._m0[1u].y;
    }
    float _1603 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _505);
    float _1604 = isnan(_1603) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1603 : min(cbModelParam._m0[25u].w, _1603));
    float _1693;
    float _1695;
    float _1697;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1657 = fma(_736, cbModelParam._m0[21u].z, fma(_732, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _728)) + cbModelParam._m0[21u].w;
        float _1661 = fma(_736, cbModelParam._m0[22u].z, fma(_732, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _728)) + cbModelParam._m0[22u].w;
        float _1665 = fma(_736, cbModelParam._m0[23u].z, fma(_732, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _728)) + cbModelParam._m0[23u].w;
        float _1668 = fma(_677, cbModelParam._m0[21u].z, fma(_676, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _675));
        float _1671 = fma(_677, cbModelParam._m0[22u].z, fma(_676, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _675));
        float _1674 = fma(_677, cbModelParam._m0[23u].z, fma(_676, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _675));
        float _1814;
        if (_1668 > 0.0)
        {
            _1814 = abs((1.0 - _1657) / _1668);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1657 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1814 = frontier_phi_28_24_ladder;
        }
        float _2079;
        if (_1671 > 0.0)
        {
            _2079 = abs((1.0 - _1661) / _1671);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1661 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2079 = frontier_phi_40_35_ladder;
        }
        float _2284;
        if (_1674 > 0.0)
        {
            _2284 = abs((1.0 - _1665) / _1674);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1665 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2284 = frontier_phi_49_46_ladder;
        }
        float _2286 = isnan(_2079) ? _1814 : (isnan(_1814) ? _2079 : min(_1814, _2079));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1668) + _1657;
        float _2292 = (_2287 * _1671) + _1661;
        float _2293 = (_2287 * _1674) + _1665;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2295 = (-1.0) - _2294;
        float _2297 = _2294 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2293 > _2297) || ((_2293 < _2295) || ((_2292 > _2297) || ((_2292 < _2295) || ((_2291 < _2295) || (_2291 > _2297))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2492 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2293, cbModelParam._m0[17u].z, fma(_2292, cbModelParam._m0[17u].y, _2291 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2293, cbModelParam._m0[18u].z, fma(_2292, cbModelParam._m0[18u].y, _2291 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2293, cbModelParam._m0[19u].z, fma(_2292, cbModelParam._m0[19u].y, _2291 * cbModelParam._m0[19u].x))), _1604);
            frontier_phi_25_49_ladder = _2492.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2492.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2492.x * cbModelParam._m0[1u].z;
        }
        _1693 = frontier_phi_25_49_ladder_2;
        _1695 = frontier_phi_25_49_ladder_1;
        _1697 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1677 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_675, _676, _677), _1604);
        _1693 = _1677.x * cbModelParam._m0[1u].z;
        _1695 = _1677.y * cbModelParam._m0[1u].z;
        _1697 = _1677.z * cbModelParam._m0[1u].z;
    }
    float _1709 = ((((1.0 - _696) * ((_683 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_696 * _683)) * _667;
    float _1710 = _1709 * ((cbModelParam._m0[1u].w * (_1693 - _1595)) + _1595);
    float _1711 = _1709 * ((cbModelParam._m0[1u].w * (_1695 - _1597)) + _1597);
    float _1712 = _1709 * ((cbModelParam._m0[1u].w * (_1697 - _1599)) + _1599);
    float _1715 = fma(_1712, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1710 * cbSceneParam._m0[89u].x));
    float _1718 = fma(_1712, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1710 * cbSceneParam._m0[90u].x));
    float _1721 = fma(_1712, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, _1710 * cbSceneParam._m0[91u].x));
    uvec4 _1731 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1733 = _1731.x * 14u;
    uint _1734 = _1733 + 13u;
    float _1741 = _667 + (-1.0);
    float _1746 = (cbLight._m0[_1734].x * _1741) + 1.0;
    float _1747 = (cbLight._m0[_1734].y * _1741) + 1.0;
    float _1748 = (cbLight._m0[_1734].z * _1741) + 1.0;
    float _1749 = (cbLight._m0[_1734].w * _1741) + 1.0;
    uint _1750 = _1733 + 5u;
    float _1756 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
    uint _1760 = _1733 + 4u;
    float _1767 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
    uint _1771 = _1733 | 1u;
    float _1782 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_502, _503, _504));
    float _1785 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_502, _503, _504));
    float _3962 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _3973 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1790 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.3183098733425140380859375;
    float _1792 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * 0.3183098733425140380859375;
    float _1799 = ((cbLight._m0[_1750].x * _1756) * _1792) + ((cbLight._m0[_1760].x * _1767) * _1790);
    float _1800 = ((_1756 * cbLight._m0[_1750].y) * _1792) + ((_1767 * cbLight._m0[_1760].y) * _1790);
    float _1801 = ((_1756 * cbLight._m0[_1750].z) * _1792) + ((_1767 * cbLight._m0[_1760].z) * _1790);
    uvec4 _1806 = floatBitsToUint(cbLight._m0[_1733 + 12u]);
    bool _1808 = _1806.x == 0u;
    float _1819;
    float _1821;
    float _1823;
    if (_1808)
    {
        _1819 = _1799;
        _1821 = _1800;
        _1823 = _1801;
    }
    else
    {
        uint _1827 = _1733 + 6u;
        float _1843 = (dot(vec3(cbLight._m0[_1733 + 2u].xyz), vec3(_502, _503, _504)) * 0.5) + 0.5;
        float _1844 = _1843 * _1843;
        float _3984 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1846 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _1819 = (((cbLight._m0[_1827].x * 0.3183098733425140380859375) * _1845) * _1846) + _1799;
        _1821 = (((cbLight._m0[_1827].y * 0.3183098733425140380859375) * _1845) * _1846) + _1800;
        _1823 = (((cbLight._m0[_1827].z * 0.3183098733425140380859375) * _1845) * _1846) + _1801;
    }
    bool _1826 = _1806.y == 0u;
    float _1864;
    float _1866;
    float _1868;
    if (_1826)
    {
        _1864 = _1819;
        _1866 = _1821;
        _1868 = _1823;
    }
    else
    {
        uint _2023 = _1733 + 7u;
        float _2039 = (dot(vec3(cbLight._m0[_1733 + 3u].xyz), vec3(_502, _503, _504)) * 0.5) + 0.5;
        float _2040 = _2039 * _2039;
        float _4000 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2041 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2042 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _1864 = (((cbLight._m0[_2023].x * 0.3183098733425140380859375) * _2041) * _2042) + _1819;
        _1866 = (((cbLight._m0[_2023].y * 0.3183098733425140380859375) * _2041) * _2042) + _1821;
        _1868 = (((cbLight._m0[_2023].z * 0.3183098733425140380859375) * _2041) * _2042) + _1823;
    }
    uint _1871 = _1733 + 8u;
    float _1884 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1733].w)) * _505) * 0.949999988079071044921875);
    float _1885 = _1884 * _1884;
    float _1886 = cbLight._m0[_1733].x + _581;
    float _1887 = cbLight._m0[_1733].y + _582;
    float _1888 = cbLight._m0[_1733].z + _583;
    float _1892 = inversesqrt(dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888)));
    float _1893 = _1892 * _1886;
    float _1894 = _1892 * _1887;
    float _1895 = _1892 * _1888;
    float _1896 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_1733].xyz));
    float _4016 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1899 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _4027 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _1900 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _1901 = dot(vec3(_502, _503, _504), vec3(_1893, _1894, _1895));
    float _4038 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _1905 = dot(vec3(cbLight._m0[_1733].xyz), vec3(_1893, _1894, _1895));
    float _4049 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1909 = _1885 * _1885;
    float _1913 = ((_1904 * _1904) * (_1909 + (-1.0))) + 1.0;
    float _1924 = (exp2(log2(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1925 = 1.0 - _1885;
    float _1936 = (0.5 / (((_1900 * ((_1899 * _1925) + _1885)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _1925) + _1885) * _1899))) * _1899;
    float _4060 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1938 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1909 / ((_1913 * _1913) * 3.141590118408203125));
    uint _1949 = _1733 + 9u;
    float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1771].w)) * _505) * 0.949999988079071044921875);
    float _1961 = _1960 * _1960;
    float _1962 = cbLight._m0[_1771].x + _581;
    float _1963 = cbLight._m0[_1771].y + _582;
    float _1964 = cbLight._m0[_1771].z + _583;
    float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
    float _1969 = _1968 * _1962;
    float _1970 = _1968 * _1963;
    float _1971 = _1968 * _1964;
    float _1972 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_1771].xyz));
    float _4071 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _1976 = dot(vec3(_502, _503, _504), vec3(_1969, _1970, _1971));
    float _4082 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _1980 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1969, _1970, _1971));
    float _4093 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1984 = _1961 * _1961;
    float _1988 = ((_1979 * _1979) * (_1984 + (-1.0))) + 1.0;
    float _1997 = (exp2(log2(1.0 - (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1998 = 1.0 - _1961;
    float _2008 = (0.5 / (((_1900 * ((_1975 * _1998) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _1998) + _1961) * _1975))) * _1975;
    float _4104 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2010 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_1984 / ((_1988 * _1988) * 3.141590118408203125));
    float _2020 = (((_1997 * cbLight._m0[_1949].x) * _2010) * _1756) + (((_1924 * cbLight._m0[_1871].x) * _1938) * _1767);
    float _2021 = (((_1997 * cbLight._m0[_1949].y) * _2010) * _1756) + (((_1924 * cbLight._m0[_1871].y) * _1938) * _1767);
    float _2022 = (((_1997 * cbLight._m0[_1949].z) * _2010) * _1756) + (((_1924 * cbLight._m0[_1871].z) * _1938) * _1767);
    float _2084;
    float _2086;
    float _2088;
    if (_1808)
    {
        _2084 = _2020;
        _2086 = _2021;
        _2088 = _2022;
    }
    else
    {
        uint _2090 = _1733 + 2u;
        uint _2094 = _1733 + 10u;
        float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2090].w)) * _505) * 0.949999988079071044921875);
        float _2109 = _2108 * _2108;
        float _2110 = cbLight._m0[_2090].x + _581;
        float _2111 = cbLight._m0[_2090].y + _582;
        float _2112 = cbLight._m0[_2090].z + _583;
        float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
        float _2117 = _2116 * _2110;
        float _2118 = _2116 * _2111;
        float _2119 = _2116 * _2112;
        float _2120 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2090].xyz));
        float _4115 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2123 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2124 = dot(vec3(_502, _503, _504), vec3(_2117, _2118, _2119));
        float _4126 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2127 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2128 = dot(vec3(cbLight._m0[_2090].xyz), vec3(_2117, _2118, _2119));
        float _4137 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2132 = _2109 * _2109;
        float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
        float _2145 = (exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2146 = 1.0 - _2109;
        float _2156 = (0.5 / (((_1900 * ((_2123 * _2146) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2146) + _2109) * _2123))) * _2123;
        float _4148 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2158 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
        float _2159 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
        _2084 = (((_2145 * cbLight._m0[_2094].x) * _2158) * _2159) + _2020;
        _2086 = (((_2145 * cbLight._m0[_2094].y) * _2158) * _2159) + _2021;
        _2088 = (((_2145 * cbLight._m0[_2094].z) * _2158) * _2159) + _2022;
    }
    float _2194;
    float _2196;
    float _2198;
    if (_1826)
    {
        _2194 = _2084;
        _2196 = _2086;
        _2198 = _2088;
    }
    else
    {
        uint _2205 = _1733 + 3u;
        uint _2209 = _1733 + 11u;
        float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _505) * 0.949999988079071044921875);
        float _2224 = _2223 * _2223;
        float _2225 = cbLight._m0[_2205].x + _581;
        float _2226 = cbLight._m0[_2205].y + _582;
        float _2227 = cbLight._m0[_2205].z + _583;
        float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
        float _2232 = _2231 * _2225;
        float _2233 = _2231 * _2226;
        float _2234 = _2231 * _2227;
        float _2235 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2205].xyz));
        float _4164 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2239 = dot(vec3(_502, _503, _504), vec3(_2232, _2233, _2234));
        float _4175 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2242 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2243 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2232, _2233, _2234));
        float _4186 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2247 = _2224 * _2224;
        float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
        float _2260 = (exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2261 = 1.0 - _2224;
        float _2271 = (0.5 / (((_1900 * ((_2238 * _2261) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_1900 * _2261) + _2224) * _2238))) * _2238;
        float _4197 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2273 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
        float _2274 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
        _2194 = (((_2260 * cbLight._m0[_2209].x) * _2273) * _2274) + _2084;
        _2196 = (((_2260 * cbLight._m0[_2209].y) * _2273) * _2274) + _2086;
        _2198 = (((_2260 * cbLight._m0[_2209].z) * _2273) * _2274) + _2088;
    }
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    float _2419;
    if (_1731.y == 0u)
    {
        float _2349 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2350 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2349;
        float _2351 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2349;
        float _2352 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2349;
        uvec4 _2364 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2365 = _2364.x;
        uint _2376 = uint((float(_2364.y) * floor(float(uint(cbSceneParam._m0[85u].y * _603) / _2365))) + floor(float(uint(cbSceneParam._m0[85u].x * _602) / _2365)));
        float _2386 = (log2(_2352 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2387 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        uint _2390 = uint(isnan(14.0) ? _2387 : (isnan(_2387) ? 14.0 : min(_2387, 14.0)));
        uvec4 _2395 = texelFetch(g_lightClusterGridBuffer, int(((_2390 << 2u) + (_2376 << 6u)) >> 2u));
        uint _2396 = _2395.x;
        uint _2397 = _2364.z;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        if (((((1u << ((_2397 >> 4u) & 15u)) + 4294967295u) & _2396) == 0u) || ((_2397 & 240u) == 0u))
        {
            _2497 = 0.0;
            _2499 = 0.0;
            _2501 = 0.0;
            _2503 = 0.0;
            _2505 = 0.0;
            _2507 = 0.0;
        }
        else
        {
            float _2498;
            float _2500;
            float _2502;
            float _2504;
            float _2506;
            float _2508;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            uint _2656 = 0u;
            uint _2665;
            bool _2666;
            for (;;)
            {
                _2665 = texelFetch(g_lightClassification, int((((_2390 << 5u) + (_2376 << 9u)) + (_2656 << 2u)) >> 2u)).x;
                _2666 = _2665 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2666)
                {
                    frontier_phi_66_pred = _2650;
                    frontier_phi_66_pred_1 = _2655;
                    frontier_phi_66_pred_2 = _2654;
                    frontier_phi_66_pred_3 = _2653;
                    frontier_phi_66_pred_4 = _2652;
                    frontier_phi_66_pred_5 = _2651;
                }
                else
                {
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    uint _2801;
                    _2795 = _2650;
                    _2796 = _2651;
                    _2797 = _2652;
                    _2798 = _2653;
                    _2799 = _2654;
                    _2800 = _2655;
                    _2801 = _2665;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    for (;;)
                    {
                        uint _2805 = uint(findLSB(_2801)) + (_2656 << 5u);
                        uint _2802 = (_2801 + 4294967295u) & _2801;
                        uint _2807 = _2805 * 48u;
                        vec4 _2821 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2807)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 3u)).x));
                        uint _2827 = (_2805 * 48u) + 4u;
                        vec4 _2840 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2827)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 3u)).x));
                        uint _2846 = (_2805 * 48u) + 8u;
                        vec3 _2857 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x));
                        float _2861 = _2821.x - _2350;
                        float _2862 = _2821.y - _2351;
                        float _2863 = _2821.z - _2352;
                        float _2864 = dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863));
                        float _2867 = inversesqrt(_2864);
                        float _2868 = _2867 * _2861;
                        float _2869 = _2867 * _2862;
                        float _2870 = _2867 * _2863;
                        float _2871 = dot(vec3(_623, _626, _629), vec3(_2868, _2869, _2870));
                        float _2876 = 1.0 - (_2864 * _2821.w);
                        float _4223 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2877 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2878 = sqrt(_2864) * _2840.w;
                        float _2881 = 1.39999997615814208984375 / (_2878 + 1.39999997615814208984375);
                        float _2882 = _2881 * _2881;
                        float _2885 = ((1.0 - _2882) * _2871) + _2882;
                        float _2888 = _2878 * _2878;
                        float _2892 = ((isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0))) * _2877) / ((_2888 * 0.699999988079071044921875) + 1.0);
                        float _2896 = (-0.0) - _2350;
                        float _2897 = (-0.0) - _2351;
                        float _2898 = (-0.0) - _2352;
                        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
                        float _2903 = _2902 * _2896;
                        float _2904 = _2902 * _2897;
                        float _2905 = _2902 * _2898;
                        float _2913 = exp2(log2(1.0 / ((_2888 * 3.5) + 5.0)) * 0.25);
                        float _2914 = 1.0 - _683;
                        float _2921 = sqrt(1.0 - ((1.0 - (_2914 * _2914)) * (1.0 - (_2913 * _2913))));
                        float _2922 = _2921 * _2921;
                        float _2923 = _2922 * _2922;
                        float _2924 = _2903 + _2868;
                        float _2925 = _2904 + _2869;
                        float _2926 = _2905 + _2870;
                        float _2930 = inversesqrt(dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926)));
                        float _2934 = dot(vec3(_623, _626, _629), vec3(_2903, _2904, _2905));
                        float _4239 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2937 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                        float _2938 = dot(vec3(_623, _626, _629), vec3(_2930 * _2924, _2930 * _2925, _2930 * _2926));
                        float _4250 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2941 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                        float _2945 = ((_2941 * _2941) * (_2923 + (-1.0))) + 1.0;
                        float _2946 = _2881 * _2922;
                        float _2947 = _2946 * _2946;
                        float _2950 = ((1.0 - _2947) * _2871) + _2947;
                        float _4261 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2951 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                        float _2952 = 1.0 - _2922;
                        float _2962 = (0.5 / (((_2951 * ((_2937 * _2952) + _2922)) + 9.9999999392252902907785028219223e-09) + (((_2951 * _2952) + _2922) * _2937))) * _2951;
                        float _4272 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2973 = (((_2923 * 3.1415927410125732421875) * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) / ((_2945 * _2945) * ((_2888 * 2.1991131305694580078125) + 3.141590118408203125))) * _2877;
                        _2725 = (_2892 * _2840.x) + _2798;
                        _2726 = (_2892 * _2840.y) + _2799;
                        _2727 = (_2892 * _2840.z) + _2800;
                        _2722 = (_2973 * _2857.x) + _2795;
                        _2723 = (_2973 * _2857.y) + _2796;
                        _2724 = (_2973 * _2857.z) + _2797;
                        if (_2802 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2795 = _2722;
                            _2796 = _2723;
                            _2797 = _2724;
                            _2798 = _2725;
                            _2799 = _2726;
                            _2800 = _2727;
                            _2801 = _2802;
                        }
                    }
                    frontier_phi_66_pred = _2722;
                    frontier_phi_66_pred_1 = _2727;
                    frontier_phi_66_pred_2 = _2726;
                    frontier_phi_66_pred_3 = _2725;
                    frontier_phi_66_pred_4 = _2724;
                    frontier_phi_66_pred_5 = _2723;
                }
                _2498 = frontier_phi_66_pred;
                _2508 = frontier_phi_66_pred_1;
                _2506 = frontier_phi_66_pred_2;
                _2504 = frontier_phi_66_pred_3;
                _2502 = frontier_phi_66_pred_4;
                _2500 = frontier_phi_66_pred_5;
                uint _2657 = _2656 + 1u;
                if (_2657 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2650 = _2498;
                    _2651 = _2500;
                    _2652 = _2502;
                    _2653 = _2504;
                    _2654 = _2506;
                    _2655 = _2508;
                    _2656 = _2657;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2497 = _2498;
            _2499 = _2500;
            _2501 = _2502;
            _2503 = _2504;
            _2505 = _2506;
            _2507 = _2508;
        }
        uvec4 _2511 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2512 = _2511.z;
        uint _2514 = (_2512 >> 8u) & 15u;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        if (((4294967295u << _2514) & _2396) == 0u)
        {
            _2618 = _2497;
            _2620 = _2499;
            _2622 = _2501;
            _2624 = _2503;
            _2626 = _2505;
            _2628 = _2507;
        }
        else
        {
            float _2643 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
            float _2644 = _2643 * _2350;
            float _2645 = _2643 * _2351;
            float _2646 = _2643 * _2352;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2514 < ((_2512 >> 12u) & 15u))
            {
                float _2619;
                float _2621;
                float _2623;
                float _2625;
                float _2627;
                float _2629;
                float _2778 = _2497;
                float _2779 = _2499;
                float _2780 = _2501;
                float _2781 = _2503;
                float _2782 = _2505;
                float _2783 = _2507;
                uint _2784 = _2514;
                uint _2793;
                bool _2794;
                for (;;)
                {
                    _2793 = texelFetch(g_lightClassification, int((((_2390 << 5u) + (_2376 << 9u)) + (_2784 << 2u)) >> 2u)).x;
                    _2794 = _2793 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2794)
                    {
                        frontier_phi_77_pred = _2783;
                        frontier_phi_77_pred_1 = _2782;
                        frontier_phi_77_pred_2 = _2781;
                        frontier_phi_77_pred_3 = _2780;
                        frontier_phi_77_pred_4 = _2779;
                        frontier_phi_77_pred_5 = _2778;
                    }
                    else
                    {
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3000 = _2778;
                        float _3001 = _2779;
                        float _3002 = _2780;
                        float _3003 = _2781;
                        float _3004 = _2782;
                        float _3005 = _2783;
                        uint _3006 = _2793;
                        uint _3007;
                        vec4 _3032;
                        float _3033;
                        vec4 _3048;
                        vec3 _3060;
                        vec4 _3076;
                        vec4 _3091;
                        float _3137;
                        bool _3138;
                        for (;;)
                        {
                            uint _3017 = ((_2784 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3006));
                            _3007 = (_3006 + 4294967295u) & _3006;
                            uint _3019 = _3017 * 40u;
                            _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            _3033 = _3032.w;
                            uint _3035 = (_3017 * 40u) + 4u;
                            _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3050 = (_3017 * 40u) + 8u;
                            _3060 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x));
                            uint _3063 = (_3017 * 40u) + 16u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            uint _3078 = (_3017 * 40u) + 20u;
                            _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3093 = (_3017 * 40u) + 24u;
                            vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            uint _3112 = (_3017 * 40u) + 28u;
                            vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            _3137 = fma(_2352, _3125.z, fma(_2351, _3125.y, _3125.x * _2350)) + _3125.w;
                            _3138 = !((fma(_2352, _3106.z, fma(_2351, _3106.y, _3106.x * _2350)) + _3106.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3138)
                            {
                                float _3165 = _3032.x - _2350;
                                float _3166 = _3032.y - _2351;
                                float _3167 = _3032.z - _2352;
                                float _3168 = dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167));
                                float _3171 = inversesqrt(_3168);
                                float _3172 = _3171 * _3165;
                                float _3173 = _3171 * _3166;
                                float _3174 = _3171 * _3167;
                                float _3178 = 1.0 - (_3168 / (_3033 * _3033));
                                float _4283 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3179 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3183 = sqrt(_3168) * _3048.w;
                                float _3185 = 1.39999997615814208984375 / (_3183 + 1.39999997615814208984375);
                                float _3186 = _3185 * _3185;
                                float _3189 = ((1.0 - _3186) * dot(vec3(_3172, _3173, _3174), vec3(_623, _626, _629))) + _3186;
                                float _3192 = _3183 * _3183;
                                float _3196 = (fma(_2352, _3076.z, fma(_2351, _3076.y, _3076.x * _2350)) + _3076.w) / _3137;
                                float _3197 = (fma(_2352, _3091.z, fma(_2351, _3091.y, _3091.x * _2350)) + _3091.w) / _3137;
                                float _3201 = 1.0 - dot(vec2(_3196, _3197), vec2(_3196, _3197));
                                float _4299 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3202 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3203 = _3202 * (((isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0))) * _3179) / ((_3192 * 0.699999988079071044921875) + 1.0));
                                float _3215 = exp2(log2(1.0 / ((_3192 * 3.5) + 5.0)) * 0.25);
                                float _3216 = 1.0 - _683;
                                float _3223 = sqrt(1.0 - ((1.0 - (_3216 * _3216)) * (1.0 - (_3215 * _3215))));
                                float _3224 = _3223 * _3223;
                                float _3225 = _3224 * _3224;
                                float _3226 = _3172 - _2644;
                                float _3227 = _3173 - _2645;
                                float _3228 = _3174 - _2646;
                                float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                                float _3236 = dot(vec3(_623, _626, _629), vec3((-0.0) - _2644, (-0.0) - _2645, (-0.0) - _2646));
                                float _4310 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3239 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                                float _3240 = dot(vec3(_623, _626, _629), vec3(_3232 * _3226, _3232 * _3227, _3232 * _3228));
                                float _4321 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3243 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3247 = ((_3243 * _3243) * (_3225 + (-1.0))) + 1.0;
                                float _3248 = _3185 * _3224;
                                float _3249 = _3248 * _3248;
                                float _3255 = ((1.0 - _3249) * dot(vec3(_623, _626, _629), vec3(_3172, _3173, _3174))) + _3249;
                                float _4332 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3256 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3257 = 1.0 - _3224;
                                float _3267 = (0.5 / (((_3256 * ((_3239 * _3257) + _3224)) + 9.9999999392252902907785028219223e-09) + (((_3256 * _3257) + _3224) * _3239))) * _3256;
                                float _4343 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3277 = (_3202 * _3179) * (((_3225 * 3.1415927410125732421875) * (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) / ((_3247 * _3247) * ((_3192 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3203 * _3048.y;
                                frontier_phi_83_pred_1 = _3203 * _3048.x;
                                frontier_phi_83_pred_2 = _3277 * _3060.z;
                                frontier_phi_83_pred_3 = _3277 * _3060.y;
                                frontier_phi_83_pred_4 = _3277 * _3060.x;
                                frontier_phi_83_pred_5 = _3203 * _3048.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3285 = frontier_phi_83_pred;
                            _3284 = frontier_phi_83_pred_1;
                            _3283 = frontier_phi_83_pred_2;
                            _3282 = frontier_phi_83_pred_3;
                            _3281 = frontier_phi_83_pred_4;
                            _3286 = frontier_phi_83_pred_5;
                            _2990 = _3284 + _3003;
                            _2991 = _3285 + _3004;
                            _2992 = _3286 + _3005;
                            _2987 = _3281 + _3000;
                            _2988 = _3282 + _3001;
                            _2989 = _3283 + _3002;
                            if (_3007 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _3007;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2992;
                        frontier_phi_77_pred_1 = _2991;
                        frontier_phi_77_pred_2 = _2990;
                        frontier_phi_77_pred_3 = _2989;
                        frontier_phi_77_pred_4 = _2988;
                        frontier_phi_77_pred_5 = _2987;
                    }
                    _2629 = frontier_phi_77_pred;
                    _2627 = frontier_phi_77_pred_1;
                    _2625 = frontier_phi_77_pred_2;
                    _2623 = frontier_phi_77_pred_3;
                    _2621 = frontier_phi_77_pred_4;
                    _2619 = frontier_phi_77_pred_5;
                    uint _2785 = _2784 + 1u;
                    if (_2785 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2778 = _2619;
                        _2779 = _2621;
                        _2780 = _2623;
                        _2781 = _2625;
                        _2782 = _2627;
                        _2783 = _2629;
                        _2784 = _2785;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2623;
                frontier_phi_58_59_ladder_1 = _2629;
                frontier_phi_58_59_ladder_2 = _2627;
                frontier_phi_58_59_ladder_3 = _2625;
                frontier_phi_58_59_ladder_4 = _2621;
                frontier_phi_58_59_ladder_5 = _2619;
            }
            else
            {
                frontier_phi_58_59_ladder = _2501;
                frontier_phi_58_59_ladder_1 = _2507;
                frontier_phi_58_59_ladder_2 = _2505;
                frontier_phi_58_59_ladder_3 = _2503;
                frontier_phi_58_59_ladder_4 = _2499;
                frontier_phi_58_59_ladder_5 = _2497;
            }
            _2618 = frontier_phi_58_59_ladder_5;
            _2620 = frontier_phi_58_59_ladder_4;
            _2622 = frontier_phi_58_59_ladder;
            _2624 = frontier_phi_58_59_ladder_3;
            _2626 = frontier_phi_58_59_ladder_2;
            _2628 = frontier_phi_58_59_ladder_1;
        }
        float _2633 = isnan(1.0) ? _667 : (isnan(_667) ? 1.0 : min(_667, 1.0));
        _2409 = (_2633 * _2624) + _1864;
        _2411 = (_2633 * _2626) + _1866;
        _2413 = (_2633 * _2628) + _1868;
        _2415 = ((_2618 * 0.039999999105930328369140625) * _2633) + _2194;
        _2417 = ((_2620 * 0.039999999105930328369140625) * _2633) + _2196;
        _2419 = ((_2622 * 0.039999999105930328369140625) * _2633) + _2198;
    }
    else
    {
        _2409 = _1864;
        _2411 = _1866;
        _2413 = _1868;
        _2415 = _2194;
        _2417 = _2196;
        _2419 = _2198;
    }
    float _4359 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4370 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4381 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _2436 = ((isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2409 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _667))) + ((_2415 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1504)) * cbPerFrame._m0[3u].x);
    float _2437 = ((isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2411 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _667))) + ((_2417 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1504)) * cbPerFrame._m0[3u].x);
    float _2438 = ((isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2413 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _667))) + ((_2419 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1504)) * cbPerFrame._m0[3u].x);
    uint _2439 = _228 + 6u;
    float _2447 = _602 / cbSceneParam._m0[86u].x;
    float _2448 = _603 / cbSceneParam._m0[86u].y;
    vec4 _2462 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2447, _2448, (log2((isnan(cbSceneParam._m0[77u].w) ? _523 : (isnan(_523) ? cbSceneParam._m0[77u].w : min(_523, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2464 = _2462.x;
    float _2465 = _2462.y;
    float _2466 = _2462.z;
    float _2467 = _2462.w;
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    if (_523 > cbSceneParam._m0[78u].w)
    {
        float _2522 = isnan(_523) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _523 : min(cbSceneParam._m0[80u].w, _523));
        float _2523 = _2522 / _523;
        float _2534 = _2523 * _574;
        float _2535 = _575 * _2523;
        float _2536 = (-0.0) - _2535;
        float _2538 = _2523 * _576;
        float _2540 = (cbSceneParam._m0[77u].w * _2536) / _2522;
        float _2541 = _2540 + cbSceneParam._m0[79u].w;
        float _2542 = cbSceneParam._m0[79u].w - _2535;
        float _2548 = sqrt(((_2534 * _2534) + (_2535 * _2535)) + (_2538 * _2538));
        float _2551 = (1.0 - (cbSceneParam._m0[77u].w / _2522)) * _2548;
        float _2556 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2558 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2735;
        if (abs((_2536 - _2540) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2735 = ((((_2541 > 0.0) ? exp2(_2556 * _2541) : (2.0 - exp2(_2558 * _2541))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2551;
        }
        else
        {
            float _2679 = 1.0 / cbSceneParam._m0[80u].x;
            float _2680 = isnan(_2542) ? _2541 : (isnan(_2541) ? _2542 : max(_2541, _2542));
            float _2681 = isnan(_2542) ? _2541 : (isnan(_2541) ? _2542 : min(_2541, _2542));
            float _2690 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : min(_2680, 0.0));
            float _2691 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : min(_2681, 0.0));
            _2735 = ((abs(_2548 / _2536) * cbSceneParam._m0[80u].y) * ((((_2690 - _2691) * 2.0) - ((exp2(_2556 * (isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0)))) - exp2(_2556 * (isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0))))) * _2679)) - ((exp2(_2558 * _2690) - exp2(_2558 * _2691)) * _2679))) + (_2551 * cbSceneParam._m0[80u].z);
        }
        vec4 _2737 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2447, _2448, 1.0), 0.0);
        float _2746 = exp2((_2735 * (-1.44269502162933349609375)) * (1.0 - _2737.w));
        float _2747 = log2(_2746);
        float _2763 = log2(_2467);
        _2560 = (exp2(_2763 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2747 * cbSceneParam._m0[78u].x)) * _2737.x) / cbSceneParam._m0[78u].x)) + _2464;
        _2562 = (exp2(_2763 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2747 * cbSceneParam._m0[78u].y)) * _2737.y) / cbSceneParam._m0[78u].y)) + _2465;
        _2564 = (exp2(_2763 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2747 * cbSceneParam._m0[78u].z)) * _2737.z) / cbSceneParam._m0[78u].z)) + _2466;
        _2566 = _2746 * _2467;
    }
    else
    {
        _2560 = _2464;
        _2562 = _2465;
        _2564 = _2466;
        _2566 = _2467;
    }
    bool _2773;
    vec4 _2576;
    vec4 _2598;
    float _2600;
    float _2604;
    float _2605;
    float _2606;
    float _2607;
    bool _2617;
    for (;;)
    {
        _2576 = cbMatDynParam._m0[0u];
        float _2578 = roundEven(_2576.y);
        bool _2579 = _2578 == 3.0;
        float _2580 = log2(_2566);
        float _2587 = exp2(_2580 * cbSceneParam._m0[78u].x) * _2436;
        float _2588 = exp2(_2580 * cbSceneParam._m0[78u].y) * _2437;
        float _2589 = exp2(_2580 * cbSceneParam._m0[78u].z) * _2438;
        float _2596 = _590 + (-0.5);
        _2598 = cbMtdParam._m0[1u];
        _2600 = _2598.y * _2596;
        float _2603 = (_2578 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2604 = _2603 * (_2579 ? _2587 : (_2587 + (cbSceneParam._m0[72u].w * _2560)));
        _2605 = _2603 * (_2579 ? _2588 : (_2588 + (cbSceneParam._m0[72u].w * _2562)));
        _2606 = _2603 * (_2579 ? _2589 : (_2589 + (cbSceneParam._m0[72u].w * _2564)));
        _2607 = _2596 * 0.999000012874603271484375;
        _2617 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2617)
        {
            if ((cbInstanceData._m0[_228 + 7u].x + _2607) < 0.5)
            {
                _2773 = true;
                break;
            }
        }
        uint _2714 = _642 + uint(_2576.w);
        if ((cbInstanceData._m0[_2714].w < 1.0) && ((cbInstanceData._m0[_2714].w + _2607) < 0.5))
        {
            _2773 = true;
            break;
        }
        if ((_2600 + 1.0) < _2598.x)
        {
            _2773 = true;
            break;
        }
        _2773 = false;
        break;
    }
    float _2978;
    if (_2773)
    {
        discard_state = true;
        _2978 = 0.0;
    }
    else
    {
        _2978 = cbInstanceData._m0[_2439].w;
    }
    SV_Target.x = _2604;
    SV_Target.y = _2605;
    SV_Target.z = _2606;
    SV_Target.w = _2978;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2439].w;
    discard_exit();
}


