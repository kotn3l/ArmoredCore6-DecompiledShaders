#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _981;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _199 = _198 * _190;
    float _200 = _198 * _191;
    float _201 = _198 * _192;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    uint _218 = uint(roundEven(NORMAL.w)) * 13u;
    uint _224 = _218 + 1u;
    uint _228 = _218 + 2u;
    float _237 = sqrt(((cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x) + (cbInstanceData._m0[_218].x * cbInstanceData._m0[_218].x)) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x));
    float _238 = _237 * TEXCOORD.z;
    float _239 = _237 * TEXCOORD.w;
    vec4 _258 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _264 = _258.x * cbMtdParam._m0[9u].x;
    float _265 = _258.y * cbMtdParam._m0[9u].y;
    float _266 = _258.z * cbMtdParam._m0[9u].z;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _238) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _239) + cbTextureTilingScale._m0[14u].w));
    vec4 _305 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _309 = _305.z;
    float _314 = (_305.x * 2.0) + (-1.0);
    float _316 = (_305.y * 2.0) + (-1.0);
    float _317 = dot(vec2(_314, _316), vec2(_314, _316));
    float _3289 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _323 = sqrt(1.0 - (isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0))));
    float _326 = fma(_323, _206, fma(_316, _213, _314 * _199));
    float _329 = fma(_323, _207, fma(_316, _214, _314 * _200));
    float _332 = fma(_323, _208, fma(_316, _215, _314 * _201));
    float _336 = inversesqrt(dot(vec3(_326, _329, _332), vec3(_326, _329, _332)));
    vec4 _372 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _238) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _239) + cbTextureTilingScale._m0[11u].w));
    float _374 = _372.x;
    float _375 = 1.0 - _374;
    float _384 = (cbMtdParam._m0[19u].x + dot(vec4(_336 * _326, _336 * _329, _336 * _332, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_374 - _375) * cbMtdParam._m0[24u].z) + _375) * cbMtdParam._m0[21u].z);
    float _3300 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
    float _392 = (_385 * ((_285.x * cbMtdParam._m0[18u].x) - _264)) + _264;
    float _393 = (_385 * ((_285.y * cbMtdParam._m0[18u].y) - _265)) + _265;
    float _394 = (_385 * ((_285.z * cbMtdParam._m0[18u].z) - _266)) + _266;
    vec4 _407 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _238) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _239) + cbTextureTilingScale._m0[15u].w));
    float _414 = (_407.x * 2.0) + (-1.0);
    float _415 = (_407.y * 2.0) + (-1.0);
    float _416 = dot(vec2(_414, _415), vec2(_414, _415));
    float _3311 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _424 = ((_407.z - _309) * _385) + _309;
    float _434 = ((sqrt(1.0 - (isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0)))) - _323) * _385) + _323;
    float _437 = (((_414 - _314) * _385) + _314) + (cbMtdParam._m0[21u].x * _314);
    float _438 = (((_415 - _316) * _385) + _316) + (cbMtdParam._m0[21u].x * _316);
    float _443 = cbMtdParam._m0[22u].x + _305.w;
    float _446 = fma(_434, _206, fma(_438, _213, _437 * _199));
    float _449 = fma(_434, _207, fma(_438, _214, _437 * _200));
    float _452 = fma(_434, _208, fma(_438, _215, _437 * _201));
    float _456 = inversesqrt(dot(vec3(_446, _449, _452), vec3(_446, _449, _452)));
    float _457 = _456 * _446;
    float _458 = _456 * _449;
    float _459 = _456 * _452;
    float _3322 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _460 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _3333 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3344 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _3355 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _3366 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _478 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _529 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _519);
    float _530 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _519);
    float _531 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _519);
    float _535 = inversesqrt(dot(vec3(_529, _530, _531), vec3(_529, _530, _531)));
    float _536 = _529 * _535;
    float _537 = _530 * _535;
    float _538 = _531 * _535;
    float _544 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _545 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _566 = fma(_459, cbSceneParam._m0[5u].z, fma(_458, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _457));
    float _569 = fma(_459, cbSceneParam._m0[6u].z, fma(_458, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _457));
    float _572 = fma(_459, cbSceneParam._m0[7u].z, fma(_458, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _457));
    uint _586 = (_218 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _592 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0)))) * cbInstanceData._m0[_586].x;
    float _593 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0)))) * cbInstanceData._m0[_586].y;
    float _594 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0)))) * cbInstanceData._m0[_586].z;
    float _3377 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _595 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    float _3388 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _596 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    float _3399 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
    vec4 _606 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _544, cbSceneParam._m0[86u].y * _545));
    float _610 = ((isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) * TEXCOORD_5.w) * _606.x;
    float _611 = dot(vec3(_457, _458, _459), vec3(_536, _537, _538));
    float _614 = _611 * 2.0;
    float _618 = (_614 * _457) - _536;
    float _619 = (_614 * _458) - _537;
    float _620 = (_614 * _459) - _538;
    float _624 = abs(dot(vec3(_536, _537, _538), vec3(_457, _458, _459)));
    float _3410 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _626 = sqrt(_460);
    float _639 = exp2((_626 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_626 * 3.0));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _980;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _705 = fma(_679, cbModelParam._m0[26u].z, fma(_675, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _671));
        float _709 = fma(_679, cbModelParam._m0[27u].z, fma(_675, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _671));
        float _713 = fma(_679, cbModelParam._m0[28u].z, fma(_675, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _671));
        float _738 = _671 + _457;
        float _739 = _675 + _458;
        float _740 = _679 + _459;
        float _750 = fma(_740, cbModelParam._m0[26u].z, fma(_739, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _738)) - _705;
        float _751 = fma(_740, cbModelParam._m0[27u].z, fma(_739, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _738)) - _709;
        float _752 = fma(_740, cbModelParam._m0[28u].z, fma(_739, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _738)) - _713;
        float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
        float _769 = ((_756 * _750) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_705 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _770 = ((_756 * _751) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_709 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _771 = ((_756 * _752) / cbModelParam._m0[34u].z) + ((((((_713 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        float _808 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_774.x + (-0.5));
        float _810 = _808 * (_774.y + (-0.5));
        float _811 = _808 * (_774.z + (-0.5));
        float _818 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_781.x + (-0.5));
        float _820 = _818 * (_781.y + (-0.5));
        float _821 = _818 * (_781.z + (-0.5));
        float _828 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_788.x + (-0.5));
        float _830 = _828 * (_788.y + (-0.5));
        float _831 = _828 * (_788.z + (-0.5));
        float _838 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_795.x + (-0.5));
        float _840 = _838 * (_795.y + (-0.5));
        float _841 = _838 * (_795.z + (-0.5));
        float _842 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _843 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = _809 * 0.5;
        float _846 = _819 * 0.5;
        float _847 = _829 * 0.5;
        float _848 = dot(vec3(_845, _846, _847), vec3(_845, _846, _847));
        float _853 = (_848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_848);
        float _862 = (dot(vec3(_457, _458, _459), vec3(_853 * _845, _853 * _846, _853 * _847)) + 1.0) * 0.5;
        float _3436 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _872 = sqrt(((_846 * _846) + (_845 * _845)) + (_847 * _847)) / (_842 + 9.9999997473787516355514526367188e-06);
        float _3447 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _874 = _873 * 2.0;
        float _878 = (1.0 - _873) / (_873 + 1.0);
        float _3458 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _888 = ((((1.0 - _879) * (_874 + 2.0)) * exp2(log2(isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * (_874 + 1.0))) + _879) * _842;
        float _889 = _810 * 0.5;
        float _890 = _820 * 0.5;
        float _891 = _830 * 0.5;
        float _892 = dot(vec3(_889, _890, _891), vec3(_889, _890, _891));
        float _897 = (_892 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_892);
        float _905 = (dot(vec3(_457, _458, _459), vec3(_897 * _889, _897 * _890, _897 * _891)) + 1.0) * 0.5;
        float _3469 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _914 = sqrt(((_890 * _890) + (_889 * _889)) + (_891 * _891)) / (_843 + 9.9999997473787516355514526367188e-06);
        float _3480 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _916 = _915 * 2.0;
        float _920 = (1.0 - _915) / (_915 + 1.0);
        float _3491 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _930 = ((((1.0 - _921) * (_916 + 2.0)) * exp2(log2(isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * (_916 + 1.0))) + _921) * _843;
        float _931 = _811 * 0.5;
        float _932 = _821 * 0.5;
        float _933 = _831 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _947 = (dot(vec3(_457, _458, _459), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3502 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _956 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3513 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3524 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_958 + 1.0))) + _963) * _844;
        _980 = _811;
        _982 = _810;
        _983 = _809;
        _984 = _821;
        _985 = _820;
        _986 = _819;
        _987 = _831;
        _988 = _830;
        _989 = _829;
        _990 = _844;
        _991 = _843;
        _992 = _842;
        _993 = cbModelParam._m0[36u].z * (isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0)));
        _994 = cbModelParam._m0[36u].z * (isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0)));
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
    }
    else
    {
        _980 = _981;
        _982 = _981;
        _983 = _981;
        _984 = _981;
        _985 = _981;
        _986 = _981;
        _987 = _981;
        _988 = _981;
        _989 = _981;
        _990 = _981;
        _991 = _981;
        _992 = _981;
        _993 = 0.0;
        _994 = 0.0;
        _995 = 0.0;
    }
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1020 = fma(_679, cbModelParam._m0[30u].z, fma(_675, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _671));
        float _1024 = fma(_679, cbModelParam._m0[31u].z, fma(_675, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _671));
        float _1028 = fma(_679, cbModelParam._m0[32u].z, fma(_675, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _671));
        float _1051 = _671 + _457;
        float _1052 = _675 + _458;
        float _1053 = _679 + _459;
        float _1063 = fma(_1053, cbModelParam._m0[30u].z, fma(_1052, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1051)) - _1020;
        float _1064 = fma(_1053, cbModelParam._m0[31u].z, fma(_1052, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1051)) - _1024;
        float _1065 = fma(_1053, cbModelParam._m0[32u].z, fma(_1052, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1051)) - _1028;
        float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
        float _1082 = ((_1069 * _1063) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1020 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1069 * _1064) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1024 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1069 * _1065) / cbModelParam._m0[35u].z) + ((((((_1028 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        float _1119 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1086.x + (-0.5));
        float _1121 = _1119 * (_1086.y + (-0.5));
        float _1122 = _1119 * (_1086.z + (-0.5));
        float _1129 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1093.x + (-0.5));
        float _1131 = _1129 * (_1093.y + (-0.5));
        float _1132 = _1129 * (_1093.z + (-0.5));
        float _1139 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1100.x + (-0.5));
        float _1141 = _1139 * (_1100.y + (-0.5));
        float _1142 = _1139 * (_1100.z + (-0.5));
        float _1149 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1107.x + (-0.5));
        float _1151 = _1149 * (_1107.y + (-0.5));
        float _1152 = _1149 * (_1107.z + (-0.5));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = _1120 * 0.5;
        float _1157 = _1130 * 0.5;
        float _1158 = _1140 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_457, _458, _459), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3587 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_1183 + 1.0))) + _1188) * _1153;
        float _1198 = _1121 * 0.5;
        float _1199 = _1131 * 0.5;
        float _1200 = _1141 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_457, _458, _459), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3620 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_1225 + 1.0))) + _1230) * _1154;
        float _1240 = _1122 * 0.5;
        float _1241 = _1132 * 0.5;
        float _1242 = _1142 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_457, _458, _459), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3653 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_1267 + 1.0))) + _1272) * _1155;
        _1289 = _1122;
        _1290 = _1121;
        _1291 = _1120;
        _1292 = _1132;
        _1293 = _1131;
        _1294 = _1130;
        _1295 = _1142;
        _1296 = _1141;
        _1297 = _1140;
        _1298 = _1155;
        _1299 = _1154;
        _1300 = _1153;
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1302 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _981;
        _1290 = _981;
        _1291 = _981;
        _1292 = _981;
        _1293 = _981;
        _1294 = _981;
        _1295 = _981;
        _1296 = _981;
        _1297 = _981;
        _1298 = _981;
        _1299 = _981;
        _1300 = _981;
        _1301 = 0.0;
        _1302 = 0.0;
        _1303 = 0.0;
    }
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _993)) + _993;
    float _1314 = (cbModelParam._m0[1u].x * (_1302 - _994)) + _994;
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _995)) + _995;
    float _1336 = fma(_1315, cbSceneParam._m0[89u].z, fma(_1314, cbSceneParam._m0[89u].y, _1313 * cbSceneParam._m0[89u].x));
    float _1339 = fma(_1315, cbSceneParam._m0[90u].z, fma(_1314, cbSceneParam._m0[90u].y, _1313 * cbSceneParam._m0[90u].x));
    float _1342 = fma(_1315, cbSceneParam._m0[91u].z, fma(_1314, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1313));
    float _1357 = _618 * 0.5;
    float _1358 = _619 * 0.5;
    float _1359 = _620 * 0.5;
    float _1360 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1363 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1290, _1293, _1296, _1299));
    float _1366 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1400;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1373 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_980, _984, _987, _990));
        float _1377 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_982, _985, _988, _991));
        float _1381 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_983, _986, _989, _992));
        float _1388 = dot(vec4(cbModelParam._m0[39u]), vec4(_1357, _1358, _1359, 1.0));
        _1400 = dot(vec3(isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1388) ? 0.0 : (isnan(0.0) ? _1388 : max(0.0, _1388))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1400 = 1.0;
    }
    float _1411;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1402 = dot(vec4(cbModelParam._m0[40u]), vec4(_1357, _1358, _1359, 1.0));
        _1411 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1402) ? 0.0 : (isnan(0.0) ? _1402 : max(0.0, _1402))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1411 = 1.0;
    }
    float _1415 = (_1411 * cbModelParam._m0[1u].x) + (_1400 * (1.0 - cbModelParam._m0[1u].x));
    float _1425 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _460);
    float _1426 = isnan(_1425) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1425 : min(cbModelParam._m0[25u].z, _1425));
    float _1506;
    float _1508;
    float _1510;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1473 = fma(_679, cbModelParam._m0[13u].z, fma(_675, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671)) + cbModelParam._m0[13u].w;
        float _1477 = fma(_679, cbModelParam._m0[14u].z, fma(_675, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671)) + cbModelParam._m0[14u].w;
        float _1481 = fma(_679, cbModelParam._m0[15u].z, fma(_675, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671)) + cbModelParam._m0[15u].w;
        float _1484 = fma(_620, cbModelParam._m0[13u].z, fma(_619, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _618));
        float _1487 = fma(_620, cbModelParam._m0[14u].z, fma(_619, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _618));
        float _1490 = fma(_620, cbModelParam._m0[15u].z, fma(_619, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _618));
        float _1518;
        if (_1484 > 0.0)
        {
            _1518 = abs((1.0 - _1473) / _1484);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1473 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1518 = frontier_phi_14_12_ladder;
        }
        float _1720;
        if (_1487 > 0.0)
        {
            _1720 = abs((1.0 - _1477) / _1487);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1477 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1720 = frontier_phi_23_19_ladder;
        }
        float _1963;
        if (_1490 > 0.0)
        {
            _1963 = abs((1.0 - _1481) / _1490);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1481 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1963 = frontier_phi_35_30_ladder;
        }
        float _1965 = isnan(_1720) ? _1518 : (isnan(_1518) ? _1720 : min(_1518, _1720));
        float _1966 = isnan(_1963) ? _1965 : (isnan(_1965) ? _1963 : min(_1965, _1963));
        float _1970 = (_1966 * _1484) + _1473;
        float _1971 = (_1966 * _1487) + _1477;
        float _1972 = (_1966 * _1490) + _1481;
        float _1973 = _1966 * 9.9999997473787516355514526367188e-05;
        float _1975 = (-1.0) - _1973;
        float _1977 = _1973 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1972 > _1977) || ((_1972 < _1975) || ((_1971 > _1977) || ((_1971 < _1975) || ((_1970 < _1975) || (_1970 > _1977))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2096 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1972, cbModelParam._m0[9u].z, fma(_1971, cbModelParam._m0[9u].y, _1970 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1972, cbModelParam._m0[10u].z, fma(_1971, cbModelParam._m0[10u].y, _1970 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1972, cbModelParam._m0[11u].z, fma(_1971, cbModelParam._m0[11u].y, _1970 * cbModelParam._m0[11u].x))), _1426);
            frontier_phi_13_35_ladder = _2096.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2096.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2096.x * cbModelParam._m0[1u].y;
        }
        _1506 = frontier_phi_13_35_ladder_2;
        _1508 = frontier_phi_13_35_ladder_1;
        _1510 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1494 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_618, _619, _620), _1426);
        _1506 = _1494.x * cbModelParam._m0[1u].y;
        _1508 = _1494.y * cbModelParam._m0[1u].y;
        _1510 = _1494.z * cbModelParam._m0[1u].y;
    }
    float _1514 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _460);
    float _1515 = isnan(_1514) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1514 : min(cbModelParam._m0[25u].w, _1514));
    float _1604;
    float _1606;
    float _1608;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1568 = fma(_679, cbModelParam._m0[21u].z, fma(_675, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671)) + cbModelParam._m0[21u].w;
        float _1572 = fma(_679, cbModelParam._m0[22u].z, fma(_675, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671)) + cbModelParam._m0[22u].w;
        float _1576 = fma(_679, cbModelParam._m0[23u].z, fma(_675, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671)) + cbModelParam._m0[23u].w;
        float _1579 = fma(_620, cbModelParam._m0[21u].z, fma(_619, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _618));
        float _1582 = fma(_620, cbModelParam._m0[22u].z, fma(_619, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _618));
        float _1585 = fma(_620, cbModelParam._m0[23u].z, fma(_619, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _618));
        float _1725;
        if (_1579 > 0.0)
        {
            _1725 = abs((1.0 - _1568) / _1579);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1568 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1725 = frontier_phi_25_21_ladder;
        }
        float _1990;
        if (_1582 > 0.0)
        {
            _1990 = abs((1.0 - _1572) / _1582);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1572 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1990 = frontier_phi_37_32_ladder;
        }
        float _2195;
        if (_1585 > 0.0)
        {
            _2195 = abs((1.0 - _1576) / _1585);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1576 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2195 = frontier_phi_46_43_ladder;
        }
        float _2197 = isnan(_1990) ? _1725 : (isnan(_1725) ? _1990 : min(_1725, _1990));
        float _2198 = isnan(_2195) ? _2197 : (isnan(_2197) ? _2195 : min(_2197, _2195));
        float _2202 = (_2198 * _1579) + _1568;
        float _2203 = (_2198 * _1582) + _1572;
        float _2204 = (_2198 * _1585) + _1576;
        float _2205 = _2198 * 9.9999997473787516355514526367188e-05;
        float _2206 = (-1.0) - _2205;
        float _2208 = _2205 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2204 > _2208) || ((_2204 < _2206) || ((_2203 > _2208) || ((_2203 < _2206) || ((_2202 < _2206) || (_2202 > _2208))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2403 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2204, cbModelParam._m0[17u].z, fma(_2203, cbModelParam._m0[17u].y, _2202 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2204, cbModelParam._m0[18u].z, fma(_2203, cbModelParam._m0[18u].y, _2202 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2204, cbModelParam._m0[19u].z, fma(_2203, cbModelParam._m0[19u].y, _2202 * cbModelParam._m0[19u].x))), _1515);
            frontier_phi_22_46_ladder = _2403.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2403.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2403.x * cbModelParam._m0[1u].z;
        }
        _1604 = frontier_phi_22_46_ladder_2;
        _1606 = frontier_phi_22_46_ladder_1;
        _1608 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1588 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_618, _619, _620), _1515);
        _1604 = _1588.x * cbModelParam._m0[1u].z;
        _1606 = _1588.y * cbModelParam._m0[1u].z;
        _1608 = _1588.z * cbModelParam._m0[1u].z;
    }
    float _1620 = ((((1.0 - _639) * ((_626 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_639 * _626)) * _610;
    float _1621 = _1620 * ((cbModelParam._m0[1u].w * (_1604 - _1506)) + _1506);
    float _1622 = _1620 * ((cbModelParam._m0[1u].w * (_1606 - _1508)) + _1508);
    float _1623 = _1620 * ((cbModelParam._m0[1u].w * (_1608 - _1510)) + _1510);
    float _1626 = fma(_1623, cbSceneParam._m0[89u].z, fma(_1622, cbSceneParam._m0[89u].y, _1621 * cbSceneParam._m0[89u].x));
    float _1629 = fma(_1623, cbSceneParam._m0[90u].z, fma(_1622, cbSceneParam._m0[90u].y, _1621 * cbSceneParam._m0[90u].x));
    float _1632 = fma(_1623, cbSceneParam._m0[91u].z, fma(_1622, cbSceneParam._m0[91u].y, _1621 * cbSceneParam._m0[91u].x));
    uvec4 _1642 = floatBitsToUint(cbInstanceData._m0[_218 + 5u]);
    uint _1644 = _1642.x * 14u;
    uint _1645 = _1644 + 13u;
    float _1652 = _610 + (-1.0);
    float _1657 = (cbLight._m0[_1645].x * _1652) + 1.0;
    float _1658 = (cbLight._m0[_1645].y * _1652) + 1.0;
    float _1659 = (cbLight._m0[_1645].z * _1652) + 1.0;
    float _1660 = (cbLight._m0[_1645].w * _1652) + 1.0;
    uint _1661 = _1644 + 5u;
    float _1667 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
    uint _1671 = _1644 + 4u;
    float _1678 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
    uint _1682 = _1644 | 1u;
    float _1693 = dot(vec3(cbLight._m0[_1644].xyz), vec3(_457, _458, _459));
    float _1696 = dot(vec3(cbLight._m0[_1682].xyz), vec3(_457, _458, _459));
    float _3789 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
    float _3800 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _1701 = (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * 0.3183098733425140380859375;
    float _1703 = (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * 0.3183098733425140380859375;
    float _1710 = ((cbLight._m0[_1661].x * _1667) * _1703) + ((cbLight._m0[_1671].x * _1678) * _1701);
    float _1711 = ((_1667 * cbLight._m0[_1661].y) * _1703) + ((_1678 * cbLight._m0[_1671].y) * _1701);
    float _1712 = ((_1667 * cbLight._m0[_1661].z) * _1703) + ((_1678 * cbLight._m0[_1671].z) * _1701);
    uvec4 _1717 = floatBitsToUint(cbLight._m0[_1644 + 12u]);
    bool _1719 = _1717.x == 0u;
    float _1730;
    float _1732;
    float _1734;
    if (_1719)
    {
        _1730 = _1710;
        _1732 = _1711;
        _1734 = _1712;
    }
    else
    {
        uint _1738 = _1644 + 6u;
        float _1754 = (dot(vec3(cbLight._m0[_1644 + 2u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _1755 = _1754 * _1754;
        float _3811 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1757 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
        _1730 = (((cbLight._m0[_1738].x * 0.3183098733425140380859375) * _1756) * _1757) + _1710;
        _1732 = (((cbLight._m0[_1738].y * 0.3183098733425140380859375) * _1756) * _1757) + _1711;
        _1734 = (((cbLight._m0[_1738].z * 0.3183098733425140380859375) * _1756) * _1757) + _1712;
    }
    bool _1737 = _1717.y == 0u;
    float _1775;
    float _1777;
    float _1779;
    if (_1737)
    {
        _1775 = _1730;
        _1777 = _1732;
        _1779 = _1734;
    }
    else
    {
        uint _1934 = _1644 + 7u;
        float _1950 = (dot(vec3(cbLight._m0[_1644 + 3u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _1951 = _1950 * _1950;
        float _3827 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1952 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1953 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
        _1775 = (((cbLight._m0[_1934].x * 0.3183098733425140380859375) * _1952) * _1953) + _1730;
        _1777 = (((cbLight._m0[_1934].y * 0.3183098733425140380859375) * _1952) * _1953) + _1732;
        _1779 = (((cbLight._m0[_1934].z * 0.3183098733425140380859375) * _1952) * _1953) + _1734;
    }
    uint _1782 = _1644 + 8u;
    float _1795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1644].w)) * _460) * 0.949999988079071044921875);
    float _1796 = _1795 * _1795;
    float _1797 = cbLight._m0[_1644].x + _536;
    float _1798 = cbLight._m0[_1644].y + _537;
    float _1799 = cbLight._m0[_1644].z + _538;
    float _1803 = inversesqrt(dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799)));
    float _1804 = _1803 * _1797;
    float _1805 = _1803 * _1798;
    float _1806 = _1803 * _1799;
    float _1807 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1644].xyz));
    float _3843 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1810 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _1811 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _1812 = dot(vec3(_457, _458, _459), vec3(_1804, _1805, _1806));
    float _3865 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1815 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _1816 = dot(vec3(cbLight._m0[_1644].xyz), vec3(_1804, _1805, _1806));
    float _3876 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1820 = _1796 * _1796;
    float _1824 = ((_1815 * _1815) * (_1820 + (-1.0))) + 1.0;
    float _1835 = (exp2(log2(1.0 - (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1836 = 1.0 - _1796;
    float _1847 = (0.5 / (((_1811 * ((_1810 * _1836) + _1796)) + 9.9999999392252902907785028219223e-09) + (((_1811 * _1836) + _1796) * _1810))) * _1810;
    float _3887 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1849 = (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1820 / ((_1824 * _1824) * 3.141590118408203125));
    uint _1860 = _1644 + 9u;
    float _1871 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1682].w)) * _460) * 0.949999988079071044921875);
    float _1872 = _1871 * _1871;
    float _1873 = cbLight._m0[_1682].x + _536;
    float _1874 = cbLight._m0[_1682].y + _537;
    float _1875 = cbLight._m0[_1682].z + _538;
    float _1879 = inversesqrt(dot(vec3(_1873, _1874, _1875), vec3(_1873, _1874, _1875)));
    float _1880 = _1879 * _1873;
    float _1881 = _1879 * _1874;
    float _1882 = _1879 * _1875;
    float _1883 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1682].xyz));
    float _3898 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1886 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _1887 = dot(vec3(_457, _458, _459), vec3(_1880, _1881, _1882));
    float _3909 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1890 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _1891 = dot(vec3(cbLight._m0[_1682].xyz), vec3(_1880, _1881, _1882));
    float _3920 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1895 = _1872 * _1872;
    float _1899 = ((_1890 * _1890) * (_1895 + (-1.0))) + 1.0;
    float _1908 = (exp2(log2(1.0 - (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1909 = 1.0 - _1872;
    float _1919 = (0.5 / (((_1811 * ((_1886 * _1909) + _1872)) + 9.9999999392252902907785028219223e-09) + (((_1811 * _1909) + _1872) * _1886))) * _1886;
    float _3931 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1921 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1895 / ((_1899 * _1899) * 3.141590118408203125));
    float _1931 = (((_1908 * cbLight._m0[_1860].x) * _1921) * _1667) + (((_1835 * cbLight._m0[_1782].x) * _1849) * _1678);
    float _1932 = (((_1908 * cbLight._m0[_1860].y) * _1921) * _1667) + (((_1835 * cbLight._m0[_1782].y) * _1849) * _1678);
    float _1933 = (((_1908 * cbLight._m0[_1860].z) * _1921) * _1667) + (((_1835 * cbLight._m0[_1782].z) * _1849) * _1678);
    float _1995;
    float _1997;
    float _1999;
    if (_1719)
    {
        _1995 = _1931;
        _1997 = _1932;
        _1999 = _1933;
    }
    else
    {
        uint _2001 = _1644 + 2u;
        uint _2005 = _1644 + 10u;
        float _2019 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2001].w)) * _460) * 0.949999988079071044921875);
        float _2020 = _2019 * _2019;
        float _2021 = cbLight._m0[_2001].x + _536;
        float _2022 = cbLight._m0[_2001].y + _537;
        float _2023 = cbLight._m0[_2001].z + _538;
        float _2027 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
        float _2028 = _2027 * _2021;
        float _2029 = _2027 * _2022;
        float _2030 = _2027 * _2023;
        float _2031 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2001].xyz));
        float _3942 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2034 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _2035 = dot(vec3(_457, _458, _459), vec3(_2028, _2029, _2030));
        float _3953 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2038 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _2039 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_2028, _2029, _2030));
        float _3964 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2043 = _2020 * _2020;
        float _2047 = ((_2038 * _2038) * (_2043 + (-1.0))) + 1.0;
        float _2056 = (exp2(log2(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2057 = 1.0 - _2020;
        float _2067 = (0.5 / (((_1811 * ((_2034 * _2057) + _2020)) + 9.9999999392252902907785028219223e-09) + (((_1811 * _2057) + _2020) * _2034))) * _2034;
        float _3975 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2069 = (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * (_2043 / ((_2047 * _2047) * 3.141590118408203125));
        float _2070 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
        _1995 = (((_2056 * cbLight._m0[_2005].x) * _2069) * _2070) + _1931;
        _1997 = (((_2056 * cbLight._m0[_2005].y) * _2069) * _2070) + _1932;
        _1999 = (((_2056 * cbLight._m0[_2005].z) * _2069) * _2070) + _1933;
    }
    float _2105;
    float _2107;
    float _2109;
    if (_1737)
    {
        _2105 = _1995;
        _2107 = _1997;
        _2109 = _1999;
    }
    else
    {
        uint _2116 = _1644 + 3u;
        uint _2120 = _1644 + 11u;
        float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2116].w)) * _460) * 0.949999988079071044921875);
        float _2135 = _2134 * _2134;
        float _2136 = cbLight._m0[_2116].x + _536;
        float _2137 = cbLight._m0[_2116].y + _537;
        float _2138 = cbLight._m0[_2116].z + _538;
        float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
        float _2143 = _2142 * _2136;
        float _2144 = _2142 * _2137;
        float _2145 = _2142 * _2138;
        float _2146 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2116].xyz));
        float _3991 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2150 = dot(vec3(_457, _458, _459), vec3(_2143, _2144, _2145));
        float _4002 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2153 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _2154 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_2143, _2144, _2145));
        float _4013 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2158 = _2135 * _2135;
        float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
        float _2171 = (exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2172 = 1.0 - _2135;
        float _2182 = (0.5 / (((_1811 * ((_2149 * _2172) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_1811 * _2172) + _2135) * _2149))) * _2149;
        float _4024 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2184 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
        float _2185 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
        _2105 = (((_2171 * cbLight._m0[_2120].x) * _2184) * _2185) + _1995;
        _2107 = (((_2171 * cbLight._m0[_2120].y) * _2184) * _2185) + _1997;
        _2109 = (((_2171 * cbLight._m0[_2120].z) * _2184) * _2185) + _1999;
    }
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    float _2328;
    float _2330;
    if (_1642.y == 0u)
    {
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2260;
        float _2262 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2260;
        float _2263 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2260;
        uvec4 _2275 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2276 = _2275.x;
        uint _2287 = uint((float(_2275.y) * floor(float(uint(cbSceneParam._m0[85u].y * _545) / _2276))) + floor(float(uint(cbSceneParam._m0[85u].x * _544) / _2276)));
        float _2297 = (log2(_2263 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2298 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        uint _2301 = uint(isnan(14.0) ? _2298 : (isnan(_2298) ? 14.0 : min(_2298, 14.0)));
        uvec4 _2306 = texelFetch(g_lightClusterGridBuffer, int(((_2301 << 2u) + (_2287 << 6u)) >> 2u));
        uint _2307 = _2306.x;
        uint _2308 = _2275.z;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        if (((((1u << ((_2308 >> 4u) & 15u)) + 4294967295u) & _2307) == 0u) || ((_2308 & 240u) == 0u))
        {
            _2408 = 0.0;
            _2410 = 0.0;
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
            _2418 = 0.0;
        }
        else
        {
            float _2409;
            float _2411;
            float _2413;
            float _2415;
            float _2417;
            float _2419;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            float _2557 = 0.0;
            float _2558 = 0.0;
            uint _2559 = 0u;
            uint _2568;
            bool _2569;
            for (;;)
            {
                _2568 = texelFetch(g_lightClassification, int((((_2301 << 5u) + (_2287 << 9u)) + (_2559 << 2u)) >> 2u)).x;
                _2569 = _2568 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2569)
                {
                    frontier_phi_61_pred = _2553;
                    frontier_phi_61_pred_1 = _2558;
                    frontier_phi_61_pred_2 = _2557;
                    frontier_phi_61_pred_3 = _2556;
                    frontier_phi_61_pred_4 = _2555;
                    frontier_phi_61_pred_5 = _2554;
                }
                else
                {
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    uint _2683;
                    _2677 = _2553;
                    _2678 = _2554;
                    _2679 = _2555;
                    _2680 = _2556;
                    _2681 = _2557;
                    _2682 = _2558;
                    _2683 = _2568;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    for (;;)
                    {
                        uint _2687 = uint(findLSB(_2683)) + (_2559 << 5u);
                        uint _2684 = (_2683 + 4294967295u) & _2683;
                        uint _2689 = _2687 * 48u;
                        vec4 _2703 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2689)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 3u)).x));
                        uint _2709 = (_2687 * 48u) + 4u;
                        vec4 _2722 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2709)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 3u)).x));
                        uint _2728 = (_2687 * 48u) + 8u;
                        vec3 _2739 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2728)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2728 + 2u)).x));
                        float _2743 = _2703.x - _2261;
                        float _2744 = _2703.y - _2262;
                        float _2745 = _2703.z - _2263;
                        float _2746 = dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745));
                        float _2749 = inversesqrt(_2746);
                        float _2750 = _2749 * _2743;
                        float _2751 = _2749 * _2744;
                        float _2752 = _2749 * _2745;
                        float _2753 = dot(vec3(_566, _569, _572), vec3(_2750, _2751, _2752));
                        float _2758 = 1.0 - (_2746 * _2703.w);
                        float _4050 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2759 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                        float _2760 = sqrt(_2746) * _2722.w;
                        float _2763 = 1.39999997615814208984375 / (_2760 + 1.39999997615814208984375);
                        float _2764 = _2763 * _2763;
                        float _2767 = ((1.0 - _2764) * _2753) + _2764;
                        float _2770 = _2760 * _2760;
                        float _2774 = ((isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0))) * _2759) / ((_2770 * 0.699999988079071044921875) + 1.0);
                        float _2778 = (-0.0) - _2261;
                        float _2779 = (-0.0) - _2262;
                        float _2780 = (-0.0) - _2263;
                        float _2784 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
                        float _2785 = _2784 * _2778;
                        float _2786 = _2784 * _2779;
                        float _2787 = _2784 * _2780;
                        float _2795 = exp2(log2(1.0 / ((_2770 * 3.5) + 5.0)) * 0.25);
                        float _2796 = 1.0 - _626;
                        float _2803 = sqrt(1.0 - ((1.0 - (_2796 * _2796)) * (1.0 - (_2795 * _2795))));
                        float _2804 = _2803 * _2803;
                        float _2805 = _2804 * _2804;
                        float _2806 = _2785 + _2750;
                        float _2807 = _2786 + _2751;
                        float _2808 = _2787 + _2752;
                        float _2812 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
                        float _2816 = dot(vec3(_566, _569, _572), vec3(_2785, _2786, _2787));
                        float _4066 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2819 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                        float _2820 = dot(vec3(_566, _569, _572), vec3(_2812 * _2806, _2812 * _2807, _2812 * _2808));
                        float _4077 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2823 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                        float _2827 = ((_2823 * _2823) * (_2805 + (-1.0))) + 1.0;
                        float _2828 = _2763 * _2804;
                        float _2829 = _2828 * _2828;
                        float _2832 = ((1.0 - _2829) * _2753) + _2829;
                        float _4088 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2833 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                        float _2834 = 1.0 - _2804;
                        float _2844 = (0.5 / (((_2833 * ((_2819 * _2834) + _2804)) + 9.9999999392252902907785028219223e-09) + (((_2833 * _2834) + _2804) * _2819))) * _2833;
                        float _4099 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _2855 = (((_2805 * 3.1415927410125732421875) * (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) / ((_2827 * _2827) * ((_2770 * 2.1991131305694580078125) + 3.141590118408203125))) * _2759;
                        _2612 = (_2774 * _2722.x) + _2680;
                        _2613 = (_2774 * _2722.y) + _2681;
                        _2614 = (_2774 * _2722.z) + _2682;
                        _2609 = (_2855 * _2739.x) + _2677;
                        _2610 = (_2855 * _2739.y) + _2678;
                        _2611 = (_2855 * _2739.z) + _2679;
                        if (_2684 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2677 = _2609;
                            _2678 = _2610;
                            _2679 = _2611;
                            _2680 = _2612;
                            _2681 = _2613;
                            _2682 = _2614;
                            _2683 = _2684;
                        }
                    }
                    frontier_phi_61_pred = _2609;
                    frontier_phi_61_pred_1 = _2614;
                    frontier_phi_61_pred_2 = _2613;
                    frontier_phi_61_pred_3 = _2612;
                    frontier_phi_61_pred_4 = _2611;
                    frontier_phi_61_pred_5 = _2610;
                }
                _2409 = frontier_phi_61_pred;
                _2419 = frontier_phi_61_pred_1;
                _2417 = frontier_phi_61_pred_2;
                _2415 = frontier_phi_61_pred_3;
                _2413 = frontier_phi_61_pred_4;
                _2411 = frontier_phi_61_pred_5;
                uint _2560 = _2559 + 1u;
                if (_2560 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2553 = _2409;
                    _2554 = _2411;
                    _2555 = _2413;
                    _2556 = _2415;
                    _2557 = _2417;
                    _2558 = _2419;
                    _2559 = _2560;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2408 = _2409;
            _2410 = _2411;
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
            _2418 = _2419;
        }
        uvec4 _2422 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2423 = _2422.z;
        uint _2425 = (_2423 >> 8u) & 15u;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        if (((4294967295u << _2425) & _2307) == 0u)
        {
            _2521 = _2408;
            _2523 = _2410;
            _2525 = _2412;
            _2527 = _2414;
            _2529 = _2416;
            _2531 = _2418;
        }
        else
        {
            float _2546 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
            float _2547 = _2546 * _2261;
            float _2548 = _2546 * _2262;
            float _2549 = _2546 * _2263;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2425 < ((_2423 >> 12u) & 15u))
            {
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2530;
                float _2532;
                float _2660 = _2408;
                float _2661 = _2410;
                float _2662 = _2412;
                float _2663 = _2414;
                float _2664 = _2416;
                float _2665 = _2418;
                uint _2666 = _2425;
                uint _2675;
                bool _2676;
                for (;;)
                {
                    _2675 = texelFetch(g_lightClassification, int((((_2301 << 5u) + (_2287 << 9u)) + (_2666 << 2u)) >> 2u)).x;
                    _2676 = _2675 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2676)
                    {
                        frontier_phi_67_pred = _2663;
                        frontier_phi_67_pred_1 = _2664;
                        frontier_phi_67_pred_2 = _2665;
                        frontier_phi_67_pred_3 = _2662;
                        frontier_phi_67_pred_4 = _2661;
                        frontier_phi_67_pred_5 = _2660;
                    }
                    else
                    {
                        float _2860;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _2873 = _2660;
                        float _2874 = _2661;
                        float _2875 = _2662;
                        float _2876 = _2663;
                        float _2877 = _2664;
                        float _2878 = _2665;
                        uint _2879 = _2675;
                        uint _2880;
                        vec4 _2905;
                        float _2906;
                        vec4 _2921;
                        vec3 _2933;
                        vec4 _2949;
                        vec4 _2965;
                        float _3011;
                        bool _3012;
                        for (;;)
                        {
                            uint _2890 = ((_2666 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2879));
                            _2880 = (_2879 + 4294967295u) & _2879;
                            uint _2892 = _2890 * 40u;
                            _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            _2906 = _2905.w;
                            uint _2908 = (_2890 * 40u) + 4u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2923 = (_2890 * 40u) + 8u;
                            _2933 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x));
                            uint _2936 = (_2890 * 40u) + 16u;
                            _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            uint _2952 = (_2890 * 40u) + 20u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            uint _2967 = (_2890 * 40u) + 24u;
                            vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            uint _2986 = (_2890 * 40u) + 28u;
                            vec4 _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            _3011 = fma(_2263, _2999.z, fma(_2262, _2999.y, _2999.x * _2261)) + _2999.w;
                            _3012 = !((fma(_2263, _2980.z, fma(_2262, _2980.y, _2980.x * _2261)) + _2980.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3012)
                            {
                                float _3039 = _2905.x - _2261;
                                float _3040 = _2905.y - _2262;
                                float _3041 = _2905.z - _2263;
                                float _3042 = dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041));
                                float _3045 = inversesqrt(_3042);
                                float _3046 = _3045 * _3039;
                                float _3047 = _3045 * _3040;
                                float _3048 = _3045 * _3041;
                                float _3052 = 1.0 - (_3042 / (_2906 * _2906));
                                float _4110 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3053 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3057 = sqrt(_3042) * _2921.w;
                                float _3059 = 1.39999997615814208984375 / (_3057 + 1.39999997615814208984375);
                                float _3060 = _3059 * _3059;
                                float _3063 = ((1.0 - _3060) * dot(vec3(_3046, _3047, _3048), vec3(_566, _569, _572))) + _3060;
                                float _3066 = _3057 * _3057;
                                float _3070 = (fma(_2263, _2949.z, fma(_2262, _2949.y, _2949.x * _2261)) + _2949.w) / _3011;
                                float _3071 = (fma(_2263, _2965.z, fma(_2262, _2965.y, _2965.x * _2261)) + _2965.w) / _3011;
                                float _3075 = 1.0 - dot(vec2(_3070, _3071), vec2(_3070, _3071));
                                float _4126 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3076 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3077 = _3076 * (((isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0))) * _3053) / ((_3066 * 0.699999988079071044921875) + 1.0));
                                float _3089 = exp2(log2(1.0 / ((_3066 * 3.5) + 5.0)) * 0.25);
                                float _3090 = 1.0 - _626;
                                float _3097 = sqrt(1.0 - ((1.0 - (_3090 * _3090)) * (1.0 - (_3089 * _3089))));
                                float _3098 = _3097 * _3097;
                                float _3099 = _3098 * _3098;
                                float _3100 = _3046 - _2547;
                                float _3101 = _3047 - _2548;
                                float _3102 = _3048 - _2549;
                                float _3106 = inversesqrt(dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102)));
                                float _3110 = dot(vec3(_566, _569, _572), vec3((-0.0) - _2547, (-0.0) - _2548, (-0.0) - _2549));
                                float _4137 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3113 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                                float _3114 = dot(vec3(_566, _569, _572), vec3(_3106 * _3100, _3106 * _3101, _3106 * _3102));
                                float _4148 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                                float _3117 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                                float _3121 = ((_3117 * _3117) * (_3099 + (-1.0))) + 1.0;
                                float _3122 = _3059 * _3098;
                                float _3123 = _3122 * _3122;
                                float _3129 = ((1.0 - _3123) * dot(vec3(_566, _569, _572), vec3(_3046, _3047, _3048))) + _3123;
                                float _4159 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3130 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                                float _3131 = 1.0 - _3098;
                                float _3141 = (0.5 / (((_3130 * ((_3113 * _3131) + _3098)) + 9.9999999392252902907785028219223e-09) + (((_3130 * _3131) + _3098) * _3113))) * _3130;
                                float _4170 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3151 = (_3076 * _3053) * (((_3099 * 3.1415927410125732421875) * (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) / ((_3121 * _3121) * ((_3066 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3151 * _2933.x;
                                frontier_phi_73_pred_1 = _3151 * _2933.y;
                                frontier_phi_73_pred_2 = _3077 * _2921.z;
                                frontier_phi_73_pred_3 = _3077 * _2921.y;
                                frontier_phi_73_pred_4 = _3077 * _2921.x;
                                frontier_phi_73_pred_5 = _3151 * _2933.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3155 = frontier_phi_73_pred;
                            _3156 = frontier_phi_73_pred_1;
                            _3160 = frontier_phi_73_pred_2;
                            _3159 = frontier_phi_73_pred_3;
                            _3158 = frontier_phi_73_pred_4;
                            _3157 = frontier_phi_73_pred_5;
                            _2863 = _3158 + _2876;
                            _2864 = _3159 + _2877;
                            _2865 = _3160 + _2878;
                            _2860 = _3155 + _2873;
                            _2861 = _3156 + _2874;
                            _2862 = _3157 + _2875;
                            if (_2880 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2880;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2863;
                        frontier_phi_67_pred_1 = _2864;
                        frontier_phi_67_pred_2 = _2865;
                        frontier_phi_67_pred_3 = _2862;
                        frontier_phi_67_pred_4 = _2861;
                        frontier_phi_67_pred_5 = _2860;
                    }
                    _2528 = frontier_phi_67_pred;
                    _2530 = frontier_phi_67_pred_1;
                    _2532 = frontier_phi_67_pred_2;
                    _2526 = frontier_phi_67_pred_3;
                    _2524 = frontier_phi_67_pred_4;
                    _2522 = frontier_phi_67_pred_5;
                    uint _2667 = _2666 + 1u;
                    if (_2667 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2660 = _2522;
                        _2661 = _2524;
                        _2662 = _2526;
                        _2663 = _2528;
                        _2664 = _2530;
                        _2665 = _2532;
                        _2666 = _2667;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2530;
                frontier_phi_55_56_ladder_1 = _2532;
                frontier_phi_55_56_ladder_2 = _2528;
                frontier_phi_55_56_ladder_3 = _2526;
                frontier_phi_55_56_ladder_4 = _2524;
                frontier_phi_55_56_ladder_5 = _2522;
            }
            else
            {
                frontier_phi_55_56_ladder = _2416;
                frontier_phi_55_56_ladder_1 = _2418;
                frontier_phi_55_56_ladder_2 = _2414;
                frontier_phi_55_56_ladder_3 = _2412;
                frontier_phi_55_56_ladder_4 = _2410;
                frontier_phi_55_56_ladder_5 = _2408;
            }
            _2521 = frontier_phi_55_56_ladder_5;
            _2523 = frontier_phi_55_56_ladder_4;
            _2525 = frontier_phi_55_56_ladder_3;
            _2527 = frontier_phi_55_56_ladder_2;
            _2529 = frontier_phi_55_56_ladder;
            _2531 = frontier_phi_55_56_ladder_1;
        }
        float _2536 = isnan(1.0) ? _610 : (isnan(_610) ? 1.0 : min(_610, 1.0));
        _2320 = (_2536 * _2527) + _1775;
        _2322 = (_2536 * _2529) + _1777;
        _2324 = (_2536 * _2531) + _1779;
        _2326 = ((_2521 * 0.039999999105930328369140625) * _2536) + _2105;
        _2328 = ((_2523 * 0.039999999105930328369140625) * _2536) + _2107;
        _2330 = ((_2525 * 0.039999999105930328369140625) * _2536) + _2109;
    }
    else
    {
        _2320 = _1775;
        _2322 = _1777;
        _2324 = _1779;
        _2326 = _2105;
        _2328 = _2107;
        _2330 = _2109;
    }
    float _4186 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _4197 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _4208 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    uint _2350 = _218 + 6u;
    float _2358 = _544 / cbSceneParam._m0[86u].x;
    float _2359 = _545 / cbSceneParam._m0[86u].y;
    vec4 _2373 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2358, _2359, (log2((isnan(cbSceneParam._m0[77u].w) ? _478 : (isnan(_478) ? cbSceneParam._m0[77u].w : min(_478, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2375 = _2373.x;
    float _2376 = _2373.y;
    float _2377 = _2373.z;
    float _2378 = _2373.w;
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    if (_478 > cbSceneParam._m0[78u].w)
    {
        float _2433 = isnan(_478) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _478 : min(cbSceneParam._m0[80u].w, _478));
        float _2434 = _2433 / _478;
        float _2445 = _2434 * _529;
        float _2446 = _530 * _2434;
        float _2447 = (-0.0) - _2446;
        float _2449 = _2434 * _531;
        float _2451 = (cbSceneParam._m0[77u].w * _2447) / _2433;
        float _2452 = _2451 + cbSceneParam._m0[79u].w;
        float _2453 = cbSceneParam._m0[79u].w - _2446;
        float _2459 = sqrt(((_2445 * _2445) + (_2446 * _2446)) + (_2449 * _2449));
        float _2462 = (1.0 - (cbSceneParam._m0[77u].w / _2433)) * _2459;
        float _2467 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2469 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2622;
        if (abs((_2447 - _2451) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2622 = ((((_2452 > 0.0) ? exp2(_2467 * _2452) : (2.0 - exp2(_2469 * _2452))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2462;
        }
        else
        {
            float _2582 = 1.0 / cbSceneParam._m0[80u].x;
            float _2583 = isnan(_2453) ? _2452 : (isnan(_2452) ? _2453 : max(_2452, _2453));
            float _2584 = isnan(_2453) ? _2452 : (isnan(_2452) ? _2453 : min(_2452, _2453));
            float _2593 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : min(_2583, 0.0));
            float _2594 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : min(_2584, 0.0));
            _2622 = ((abs(_2459 / _2447) * cbSceneParam._m0[80u].y) * ((((_2593 - _2594) * 2.0) - ((exp2(_2467 * (isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0)))) - exp2(_2467 * (isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0))))) * _2582)) - ((exp2(_2469 * _2593) - exp2(_2469 * _2594)) * _2582))) + (_2462 * cbSceneParam._m0[80u].z);
        }
        vec4 _2624 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2358, _2359, 1.0), 0.0);
        float _2633 = exp2((_2622 * (-1.44269502162933349609375)) * (1.0 - _2624.w));
        float _2634 = log2(_2633);
        float _2650 = log2(_2378);
        _2471 = (exp2(_2650 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2634 * cbSceneParam._m0[78u].x)) * _2624.x) / cbSceneParam._m0[78u].x)) + _2375;
        _2473 = (exp2(_2650 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2634 * cbSceneParam._m0[78u].y)) * _2624.y) / cbSceneParam._m0[78u].y)) + _2376;
        _2475 = (exp2(_2650 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2634 * cbSceneParam._m0[78u].z)) * _2624.z) / cbSceneParam._m0[78u].z)) + _2377;
        _2477 = _2633 * _2378;
    }
    else
    {
        _2471 = _2375;
        _2473 = _2376;
        _2475 = _2377;
        _2477 = _2378;
    }
    float _2489 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2490 = _2489 == 3.0;
    float _2491 = log2(_2477);
    float _2498 = exp2(_2491 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2320 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _610))) + ((_2326 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _1415)) * cbPerFrame._m0[3u].x));
    float _2499 = exp2(_2491 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2322 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _610))) + ((_2328 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _1415)) * cbPerFrame._m0[3u].x));
    float _2500 = exp2(_2491 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2324 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _610))) + ((_2330 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _1415)) * cbPerFrame._m0[3u].x));
    float _2509 = (_2489 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2509 * (_2490 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2471)));
    SV_Target.y = _2509 * (_2490 ? _2499 : (_2499 + (cbSceneParam._m0[72u].w * _2473)));
    SV_Target.z = _2509 * (_2490 ? _2500 : (_2500 + (cbSceneParam._m0[72u].w * _2475)));
    SV_Target.w = cbInstanceData._m0[_2350].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2350].w;
}


