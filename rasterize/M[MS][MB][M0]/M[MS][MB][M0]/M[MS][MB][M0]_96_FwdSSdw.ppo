#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1093;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _269 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _275 = _269.x * cbMtdParam._m0[11u].x;
    float _276 = _269.y * cbMtdParam._m0[11u].y;
    float _277 = _269.z * cbMtdParam._m0[11u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _248) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _249) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _336 = _334.x;
    float _346 = dot(vec4(_336, _334.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _363 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_336 - _346) * cbMtdParam._m0[24u].x) + _346) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3424 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _371 = (_364 * ((_296.x * cbMtdParam._m0[12u].x) - _275)) + _275;
    float _372 = (_364 * ((_296.y * cbMtdParam._m0[12u].y) - _276)) + _276;
    float _373 = (_364 * ((_296.z * cbMtdParam._m0[12u].z) - _277)) + _277;
    vec4 _391 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _248) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _249) + cbTextureTilingScale._m0[4u].w));
    vec4 _408 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _410 = _408.x;
    float _411 = _408.y;
    float _412 = _408.z;
    float _421 = ((_391.z - _412) * _364) + _412;
    float _424 = ((((_391.x - _410) * _364) + _410) * 2.0) + (-1.0);
    float _426 = ((((_391.y - _411) * _364) + _411) * 2.0) + (-1.0);
    float _427 = dot(vec2(_424, _426), vec2(_424, _426));
    float _3435 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _432 = sqrt(1.0 - (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))));
    float _435 = fma(_432, _216, fma(_426, _223, _424 * _209));
    float _438 = fma(_432, _217, fma(_426, _224, _424 * _210));
    float _441 = fma(_432, _218, fma(_426, _225, _424 * _211));
    float _445 = inversesqrt(dot(vec3(_435, _438, _441), vec3(_435, _438, _441)));
    vec4 _461 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _489 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _491 = _489.x;
    float _492 = 1.0 - _491;
    float _498 = (cbMtdParam._m0[19u].x + dot(vec4(_445 * _435, _445 * _438, _445 * _441, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_491 - _492) * cbMtdParam._m0[24u].z) + _492) * cbMtdParam._m0[21u].z);
    float _3446 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _506 = (_499 * (cbMtdParam._m0[17u].x - _371)) + _371;
    float _507 = (_499 * (cbMtdParam._m0[17u].y - _372)) + _372;
    float _508 = (_499 * (cbMtdParam._m0[17u].z - _373)) + _373;
    vec4 _521 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _528 = (_521.x * 2.0) + (-1.0);
    float _529 = (_521.y * 2.0) + (-1.0);
    float _530 = dot(vec2(_528, _529), vec2(_528, _529));
    float _3457 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _538 = ((_521.z - _421) * _499) + _421;
    float _548 = ((sqrt(1.0 - (isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0)))) - _432) * _499) + _432;
    float _551 = (((_528 - _424) * _499) + _424) + (cbMtdParam._m0[21u].x * _424);
    float _552 = (((_529 - _426) * _499) + _426) + (cbMtdParam._m0[21u].x * _426);
    float _557 = cbMtdParam._m0[22u].x + _461.w;
    float _560 = fma(_548, _216, fma(_552, _223, _551 * _209));
    float _563 = fma(_548, _217, fma(_552, _224, _551 * _210));
    float _566 = fma(_548, _218, fma(_552, _225, _551 * _211));
    float _570 = inversesqrt(dot(vec3(_560, _563, _566), vec3(_560, _563, _566)));
    float _571 = _570 * _560;
    float _572 = _570 * _563;
    float _573 = _570 * _566;
    float _3468 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _574 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
    float _3479 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _3490 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3501 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3512 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _592 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _644 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _634);
    float _645 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _634);
    float _646 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _634);
    float _650 = inversesqrt(dot(vec3(_644, _645, _646), vec3(_644, _645, _646)));
    float _651 = _644 * _650;
    float _652 = _645 * _650;
    float _653 = _646 * _650;
    float _659 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _660 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _678 = fma(_573, cbSceneParam._m0[5u].z, fma(_572, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _571));
    float _681 = fma(_573, cbSceneParam._m0[6u].z, fma(_572, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _571));
    float _684 = fma(_573, cbSceneParam._m0[7u].z, fma(_572, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _571));
    uint _698 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _704 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) * cbInstanceData._m0[_698].x;
    float _705 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0)))) * cbInstanceData._m0[_698].y;
    float _706 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) * cbInstanceData._m0[_698].z;
    float _3523 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _3534 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _708 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _3545 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    vec4 _718 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _659, cbSceneParam._m0[86u].y * _660));
    float _722 = ((isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * TEXCOORD_5.w) * _718.x;
    float _723 = dot(vec3(_571, _572, _573), vec3(_651, _652, _653));
    float _726 = _723 * 2.0;
    float _730 = (_726 * _571) - _651;
    float _731 = (_726 * _572) - _652;
    float _732 = (_726 * _573) - _653;
    float _736 = abs(dot(vec3(_651, _652, _653), vec3(_571, _572, _573)));
    float _3556 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _738 = sqrt(_574);
    float _751 = exp2((_738 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_738 * 3.0));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1092;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _817 = fma(_791, cbModelParam._m0[26u].z, fma(_787, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _783));
        float _821 = fma(_791, cbModelParam._m0[27u].z, fma(_787, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _783));
        float _825 = fma(_791, cbModelParam._m0[28u].z, fma(_787, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _783));
        float _850 = _783 + _571;
        float _851 = _787 + _572;
        float _852 = _791 + _573;
        float _862 = fma(_852, cbModelParam._m0[26u].z, fma(_851, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _850)) - _817;
        float _863 = fma(_852, cbModelParam._m0[27u].z, fma(_851, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _850)) - _821;
        float _864 = fma(_852, cbModelParam._m0[28u].z, fma(_851, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _850)) - _825;
        float _868 = inversesqrt(dot(vec3(_862, _863, _864), vec3(_862, _863, _864)));
        float _881 = ((_868 * _862) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_817 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_868 * _863) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_821 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_868 * _864) / cbModelParam._m0[34u].z) + ((((((_825 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_881, _882, _883), 0.0);
        float _920 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_886.x + (-0.5));
        float _922 = _920 * (_886.y + (-0.5));
        float _923 = _920 * (_886.z + (-0.5));
        float _930 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_893.x + (-0.5));
        float _932 = _930 * (_893.y + (-0.5));
        float _933 = _930 * (_893.z + (-0.5));
        float _940 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_900.x + (-0.5));
        float _942 = _940 * (_900.y + (-0.5));
        float _943 = _940 * (_900.z + (-0.5));
        float _950 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_907.x + (-0.5));
        float _952 = _950 * (_907.y + (-0.5));
        float _953 = _950 * (_907.z + (-0.5));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = _921 * 0.5;
        float _958 = _931 * 0.5;
        float _959 = _941 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _974 = (dot(vec3(_571, _572, _573), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3582 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _984 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3593 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _986 = _985 * 2.0;
        float _990 = (1.0 - _985) / (_985 + 1.0);
        float _3604 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1000 = ((((1.0 - _991) * (_986 + 2.0)) * exp2(log2(isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * (_986 + 1.0))) + _991) * _954;
        float _1001 = _922 * 0.5;
        float _1002 = _932 * 0.5;
        float _1003 = _942 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1017 = (dot(vec3(_571, _572, _573), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3615 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1026 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3626 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3637 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * (_1028 + 1.0))) + _1033) * _955;
        float _1043 = _923 * 0.5;
        float _1044 = _933 * 0.5;
        float _1045 = _943 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_571, _572, _573), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3648 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3659 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3670 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_1070 + 1.0))) + _1075) * _956;
        _1092 = _923;
        _1094 = _922;
        _1095 = _921;
        _1096 = _933;
        _1097 = _932;
        _1098 = _931;
        _1099 = _943;
        _1100 = _942;
        _1101 = _941;
        _1102 = _956;
        _1103 = _955;
        _1104 = _954;
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0)));
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
    }
    else
    {
        _1092 = _1093;
        _1094 = _1093;
        _1095 = _1093;
        _1096 = _1093;
        _1097 = _1093;
        _1098 = _1093;
        _1099 = _1093;
        _1100 = _1093;
        _1101 = _1093;
        _1102 = _1093;
        _1103 = _1093;
        _1104 = _1093;
        _1105 = 0.0;
        _1106 = 0.0;
        _1107 = 0.0;
    }
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1132 = fma(_791, cbModelParam._m0[30u].z, fma(_787, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _783));
        float _1136 = fma(_791, cbModelParam._m0[31u].z, fma(_787, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _783));
        float _1140 = fma(_791, cbModelParam._m0[32u].z, fma(_787, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _783));
        float _1163 = _783 + _571;
        float _1164 = _787 + _572;
        float _1165 = _791 + _573;
        float _1175 = fma(_1165, cbModelParam._m0[30u].z, fma(_1164, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1163)) - _1132;
        float _1176 = fma(_1165, cbModelParam._m0[31u].z, fma(_1164, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1163)) - _1136;
        float _1177 = fma(_1165, cbModelParam._m0[32u].z, fma(_1164, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1163)) - _1140;
        float _1181 = inversesqrt(dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177)));
        float _1194 = ((_1181 * _1175) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1132 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1181 * _1176) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1136 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1181 * _1177) / cbModelParam._m0[35u].z) + ((((((_1140 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        float _1231 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1198.x + (-0.5));
        float _1233 = _1231 * (_1198.y + (-0.5));
        float _1234 = _1231 * (_1198.z + (-0.5));
        float _1241 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1205.x + (-0.5));
        float _1243 = _1241 * (_1205.y + (-0.5));
        float _1244 = _1241 * (_1205.z + (-0.5));
        float _1251 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1212.x + (-0.5));
        float _1253 = _1251 * (_1212.y + (-0.5));
        float _1254 = _1251 * (_1212.z + (-0.5));
        float _1261 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1219.x + (-0.5));
        float _1263 = _1261 * (_1219.y + (-0.5));
        float _1264 = _1261 * (_1219.z + (-0.5));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = _1232 * 0.5;
        float _1269 = _1242 * 0.5;
        float _1270 = _1252 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_571, _572, _573), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3711 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3722 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3733 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1295 + 1.0))) + _1300) * _1265;
        float _1310 = _1233 * 0.5;
        float _1311 = _1243 * 0.5;
        float _1312 = _1253 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_571, _572, _573), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3766 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1337 + 1.0))) + _1342) * _1266;
        float _1352 = _1234 * 0.5;
        float _1353 = _1244 * 0.5;
        float _1354 = _1254 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_571, _572, _573), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _3799 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1379 + 1.0))) + _1384) * _1267;
        _1401 = _1234;
        _1402 = _1233;
        _1403 = _1232;
        _1404 = _1244;
        _1405 = _1243;
        _1406 = _1242;
        _1407 = _1254;
        _1408 = _1253;
        _1409 = _1252;
        _1410 = _1267;
        _1411 = _1266;
        _1412 = _1265;
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
    }
    else
    {
        _1401 = _1093;
        _1402 = _1093;
        _1403 = _1093;
        _1404 = _1093;
        _1405 = _1093;
        _1406 = _1093;
        _1407 = _1093;
        _1408 = _1093;
        _1409 = _1093;
        _1410 = _1093;
        _1411 = _1093;
        _1412 = _1093;
        _1413 = 0.0;
        _1414 = 0.0;
        _1415 = 0.0;
    }
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1105)) + _1105;
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1106)) + _1106;
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1107)) + _1107;
    float _1448 = fma(_1427, cbSceneParam._m0[89u].z, fma(_1426, cbSceneParam._m0[89u].y, _1425 * cbSceneParam._m0[89u].x));
    float _1451 = fma(_1427, cbSceneParam._m0[90u].z, fma(_1426, cbSceneParam._m0[90u].y, _1425 * cbSceneParam._m0[90u].x));
    float _1454 = fma(_1427, cbSceneParam._m0[91u].z, fma(_1426, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1425));
    float _1469 = _730 * 0.5;
    float _1470 = _731 * 0.5;
    float _1471 = _732 * 0.5;
    float _1472 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1475 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1478 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1512;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1485 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1092, _1096, _1099, _1102));
        float _1489 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1094, _1097, _1100, _1103));
        float _1493 = dot(vec4(_1469, _1470, _1471, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1500 = dot(vec4(cbModelParam._m0[39u]), vec4(_1469, _1470, _1471, 1.0));
        _1512 = dot(vec3(isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1500) ? 0.0 : (isnan(0.0) ? _1500 : max(0.0, _1500))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1512 = 1.0;
    }
    float _1523;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1514 = dot(vec4(cbModelParam._m0[40u]), vec4(_1469, _1470, _1471, 1.0));
        _1523 = dot(vec3(isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1514) ? 0.0 : (isnan(0.0) ? _1514 : max(0.0, _1514))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1523 = 1.0;
    }
    float _1527 = (_1523 * cbModelParam._m0[1u].x) + (_1512 * (1.0 - cbModelParam._m0[1u].x));
    float _1537 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _574);
    float _1538 = isnan(_1537) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1537 : min(cbModelParam._m0[25u].z, _1537));
    float _1619;
    float _1621;
    float _1623;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1586 = fma(_791, cbModelParam._m0[13u].z, fma(_787, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _783)) + cbModelParam._m0[13u].w;
        float _1590 = fma(_791, cbModelParam._m0[14u].z, fma(_787, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _783)) + cbModelParam._m0[14u].w;
        float _1594 = fma(_791, cbModelParam._m0[15u].z, fma(_787, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _783)) + cbModelParam._m0[15u].w;
        float _1597 = fma(_732, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _730));
        float _1600 = fma(_732, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _730));
        float _1603 = fma(_732, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _730));
        float _1631;
        if (_1597 > 0.0)
        {
            _1631 = abs((1.0 - _1586) / _1597);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1586 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1631 = frontier_phi_14_12_ladder;
        }
        float _1853;
        if (_1600 > 0.0)
        {
            _1853 = abs((1.0 - _1590) / _1600);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1590 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1853 = frontier_phi_23_19_ladder;
        }
        float _2099;
        if (_1603 > 0.0)
        {
            _2099 = abs((1.0 - _1594) / _1603);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1594 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2099 = frontier_phi_35_30_ladder;
        }
        float _2101 = isnan(_1853) ? _1631 : (isnan(_1631) ? _1853 : min(_1631, _1853));
        float _2102 = isnan(_2099) ? _2101 : (isnan(_2101) ? _2099 : min(_2101, _2099));
        float _2106 = (_2102 * _1597) + _1586;
        float _2107 = (_2102 * _1600) + _1590;
        float _2108 = (_2102 * _1603) + _1594;
        float _2109 = _2102 * 9.9999997473787516355514526367188e-05;
        float _2111 = (-1.0) - _2109;
        float _2113 = _2109 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2108 > _2113) || ((_2108 < _2111) || ((_2107 > _2113) || ((_2107 < _2111) || ((_2106 < _2111) || (_2106 > _2113))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2232 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2108, cbModelParam._m0[9u].z, fma(_2107, cbModelParam._m0[9u].y, _2106 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2108, cbModelParam._m0[10u].z, fma(_2107, cbModelParam._m0[10u].y, _2106 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2108, cbModelParam._m0[11u].z, fma(_2107, cbModelParam._m0[11u].y, _2106 * cbModelParam._m0[11u].x))), _1538);
            frontier_phi_13_35_ladder = _2232.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2232.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2232.x * cbModelParam._m0[1u].y;
        }
        _1619 = frontier_phi_13_35_ladder_2;
        _1621 = frontier_phi_13_35_ladder_1;
        _1623 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1607 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_730, _731, _732), _1538);
        _1619 = _1607.x * cbModelParam._m0[1u].y;
        _1621 = _1607.y * cbModelParam._m0[1u].y;
        _1623 = _1607.z * cbModelParam._m0[1u].y;
    }
    float _1627 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _574);
    float _1628 = isnan(_1627) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1627 : min(cbModelParam._m0[25u].w, _1627));
    float _1718;
    float _1720;
    float _1722;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1682 = fma(_791, cbModelParam._m0[21u].z, fma(_787, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _783)) + cbModelParam._m0[21u].w;
        float _1686 = fma(_791, cbModelParam._m0[22u].z, fma(_787, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _783)) + cbModelParam._m0[22u].w;
        float _1690 = fma(_791, cbModelParam._m0[23u].z, fma(_787, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _783)) + cbModelParam._m0[23u].w;
        float _1693 = fma(_732, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _730));
        float _1696 = fma(_732, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _730));
        float _1699 = fma(_732, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _730));
        float _1858;
        if (_1693 > 0.0)
        {
            _1858 = abs((1.0 - _1682) / _1693);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1682 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1858 = frontier_phi_25_21_ladder;
        }
        float _2126;
        if (_1696 > 0.0)
        {
            _2126 = abs((1.0 - _1686) / _1696);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1686 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2126 = frontier_phi_37_32_ladder;
        }
        float _2331;
        if (_1699 > 0.0)
        {
            _2331 = abs((1.0 - _1690) / _1699);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1690 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2331 = frontier_phi_46_43_ladder;
        }
        float _2333 = isnan(_2126) ? _1858 : (isnan(_1858) ? _2126 : min(_1858, _2126));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1693) + _1682;
        float _2339 = (_2334 * _1696) + _1686;
        float _2340 = (_2334 * _1699) + _1690;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2342 = (-1.0) - _2341;
        float _2344 = _2341 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2340 > _2344) || ((_2340 < _2342) || ((_2339 > _2344) || ((_2339 < _2342) || ((_2338 < _2342) || (_2338 > _2344))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2539 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2340, cbModelParam._m0[17u].z, fma(_2339, cbModelParam._m0[17u].y, _2338 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2340, cbModelParam._m0[18u].z, fma(_2339, cbModelParam._m0[18u].y, _2338 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2340, cbModelParam._m0[19u].z, fma(_2339, cbModelParam._m0[19u].y, _2338 * cbModelParam._m0[19u].x))), _1628);
            frontier_phi_22_46_ladder = _2539.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2539.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2539.x * cbModelParam._m0[1u].z;
        }
        _1718 = frontier_phi_22_46_ladder_2;
        _1720 = frontier_phi_22_46_ladder_1;
        _1722 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1702 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_730, _731, _732), _1628);
        _1718 = _1702.x * cbModelParam._m0[1u].z;
        _1720 = _1702.y * cbModelParam._m0[1u].z;
        _1722 = _1702.z * cbModelParam._m0[1u].z;
    }
    float _1734 = ((((1.0 - _751) * ((_738 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_751 * _738)) * _722;
    float _1735 = _1734 * ((cbModelParam._m0[1u].w * (_1718 - _1619)) + _1619);
    float _1736 = _1734 * ((cbModelParam._m0[1u].w * (_1720 - _1621)) + _1621);
    float _1737 = _1734 * ((cbModelParam._m0[1u].w * (_1722 - _1623)) + _1623);
    float _1740 = fma(_1737, cbSceneParam._m0[89u].z, fma(_1736, cbSceneParam._m0[89u].y, _1735 * cbSceneParam._m0[89u].x));
    float _1743 = fma(_1737, cbSceneParam._m0[90u].z, fma(_1736, cbSceneParam._m0[90u].y, _1735 * cbSceneParam._m0[90u].x));
    float _1746 = fma(_1737, cbSceneParam._m0[91u].z, fma(_1736, cbSceneParam._m0[91u].y, _1735 * cbSceneParam._m0[91u].x));
    vec4 _1754 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_659, _660));
    float _1756 = _1754.w;
    float _1768 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1756);
    float _1769 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1756);
    float _1770 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1756);
    uvec4 _1774 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1776 = _1774.x * 14u;
    uint _1777 = _1776 + 13u;
    float _1784 = _722 + (-1.0);
    float _1789 = (cbLight._m0[_1777].x * _1784) + 1.0;
    float _1790 = (cbLight._m0[_1777].y * _1784) + 1.0;
    float _1791 = (cbLight._m0[_1777].z * _1784) + 1.0;
    float _1792 = (cbLight._m0[_1777].w * _1784) + 1.0;
    uint _1793 = _1776 + 5u;
    float _1799 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
    uint _1803 = _1776 + 4u;
    float _1812 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
    uint _1816 = _1776 | 1u;
    float _1827 = dot(vec3(cbLight._m0[_1776].xyz), vec3(_571, _572, _573));
    float _1830 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_571, _572, _573));
    float _3935 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _3946 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1835 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * 0.3183098733425140380859375;
    float _1837 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * 0.3183098733425140380859375;
    float _1844 = ((cbLight._m0[_1793].x * _1799) * _1837) + (((cbLight._m0[_1803].x * _1768) * _1812) * _1835);
    float _1845 = ((_1799 * cbLight._m0[_1793].y) * _1837) + (((cbLight._m0[_1803].y * _1769) * _1812) * _1835);
    float _1846 = ((_1799 * cbLight._m0[_1793].z) * _1837) + (((cbLight._m0[_1803].z * _1770) * _1812) * _1835);
    uvec4 _1850 = floatBitsToUint(cbLight._m0[_1776 + 12u]);
    bool _1852 = _1850.x == 0u;
    float _1863;
    float _1865;
    float _1867;
    if (_1852)
    {
        _1863 = _1844;
        _1865 = _1845;
        _1867 = _1846;
    }
    else
    {
        uint _1871 = _1776 + 6u;
        float _1887 = (dot(vec3(cbLight._m0[_1776 + 2u].xyz), vec3(_571, _572, _573)) * 0.5) + 0.5;
        float _1888 = _1887 * _1887;
        float _3957 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1889 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1890 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
        _1863 = (((cbLight._m0[_1871].x * 0.3183098733425140380859375) * _1889) * _1890) + _1844;
        _1865 = (((cbLight._m0[_1871].y * 0.3183098733425140380859375) * _1889) * _1890) + _1845;
        _1867 = (((cbLight._m0[_1871].z * 0.3183098733425140380859375) * _1889) * _1890) + _1846;
    }
    bool _1870 = _1850.y == 0u;
    float _1908;
    float _1910;
    float _1912;
    if (_1870)
    {
        _1908 = _1863;
        _1910 = _1865;
        _1912 = _1867;
    }
    else
    {
        uint _2070 = _1776 + 7u;
        float _2086 = (dot(vec3(cbLight._m0[_1776 + 3u].xyz), vec3(_571, _572, _573)) * 0.5) + 0.5;
        float _2087 = _2086 * _2086;
        float _3973 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2088 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _2089 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _1908 = (((cbLight._m0[_2070].x * 0.3183098733425140380859375) * _2088) * _2089) + _1863;
        _1910 = (((cbLight._m0[_2070].y * 0.3183098733425140380859375) * _2088) * _2089) + _1865;
        _1912 = (((cbLight._m0[_2070].z * 0.3183098733425140380859375) * _2088) * _2089) + _1867;
    }
    uint _1915 = _1776 + 8u;
    float _1928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1776].w)) * _574) * 0.949999988079071044921875);
    float _1929 = _1928 * _1928;
    float _1930 = cbLight._m0[_1776].x + _651;
    float _1931 = cbLight._m0[_1776].y + _652;
    float _1932 = cbLight._m0[_1776].z + _653;
    float _1936 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
    float _1937 = _1936 * _1930;
    float _1938 = _1936 * _1931;
    float _1939 = _1936 * _1932;
    float _1940 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_1776].xyz));
    float _3989 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1943 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _1944 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _1945 = dot(vec3(_571, _572, _573), vec3(_1937, _1938, _1939));
    float _4011 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _1949 = dot(vec3(cbLight._m0[_1776].xyz), vec3(_1937, _1938, _1939));
    float _4022 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1953 = _1929 * _1929;
    float _1957 = ((_1948 * _1948) * (_1953 + (-1.0))) + 1.0;
    float _1968 = (exp2(log2(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1969 = 1.0 - _1929;
    float _1980 = (0.5 / (((_1944 * ((_1943 * _1969) + _1929)) + 9.9999999392252902907785028219223e-09) + (((_1944 * _1969) + _1929) * _1943))) * _1943;
    float _4033 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1982 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1953 / ((_1957 * _1957) * 3.141590118408203125));
    uint _1996 = _1776 + 9u;
    float _2007 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1816].w)) * _574) * 0.949999988079071044921875);
    float _2008 = _2007 * _2007;
    float _2009 = cbLight._m0[_1816].x + _651;
    float _2010 = cbLight._m0[_1816].y + _652;
    float _2011 = cbLight._m0[_1816].z + _653;
    float _2015 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
    float _2016 = _2015 * _2009;
    float _2017 = _2015 * _2010;
    float _2018 = _2015 * _2011;
    float _2019 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_1816].xyz));
    float _4044 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2022 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _2023 = dot(vec3(_571, _572, _573), vec3(_2016, _2017, _2018));
    float _4055 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _2027 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_2016, _2017, _2018));
    float _4066 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2031 = _2008 * _2008;
    float _2035 = ((_2026 * _2026) * (_2031 + (-1.0))) + 1.0;
    float _2044 = (exp2(log2(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2045 = 1.0 - _2008;
    float _2055 = (0.5 / (((_1944 * ((_2022 * _2045) + _2008)) + 9.9999999392252902907785028219223e-09) + (((_1944 * _2045) + _2008) * _2022))) * _2022;
    float _4077 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2057 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_2031 / ((_2035 * _2035) * 3.141590118408203125));
    float _2067 = (((_2044 * cbLight._m0[_1996].x) * _2057) * _1799) + ((((cbLight._m0[_1915].x * _1768) * _1968) * _1982) * _1812);
    float _2068 = (((_2044 * cbLight._m0[_1996].y) * _2057) * _1799) + ((((cbLight._m0[_1915].y * _1769) * _1968) * _1982) * _1812);
    float _2069 = (((_2044 * cbLight._m0[_1996].z) * _2057) * _1799) + ((((cbLight._m0[_1915].z * _1770) * _1968) * _1982) * _1812);
    float _2131;
    float _2133;
    float _2135;
    if (_1852)
    {
        _2131 = _2067;
        _2133 = _2068;
        _2135 = _2069;
    }
    else
    {
        uint _2137 = _1776 + 2u;
        uint _2141 = _1776 + 10u;
        float _2155 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2137].w)) * _574) * 0.949999988079071044921875);
        float _2156 = _2155 * _2155;
        float _2157 = cbLight._m0[_2137].x + _651;
        float _2158 = cbLight._m0[_2137].y + _652;
        float _2159 = cbLight._m0[_2137].z + _653;
        float _2163 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
        float _2164 = _2163 * _2157;
        float _2165 = _2163 * _2158;
        float _2166 = _2163 * _2159;
        float _2167 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_2137].xyz));
        float _4088 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2170 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _2171 = dot(vec3(_571, _572, _573), vec3(_2164, _2165, _2166));
        float _4099 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2174 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2175 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_2164, _2165, _2166));
        float _4110 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2179 = _2156 * _2156;
        float _2183 = ((_2174 * _2174) * (_2179 + (-1.0))) + 1.0;
        float _2192 = (exp2(log2(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2193 = 1.0 - _2156;
        float _2203 = (0.5 / (((_1944 * ((_2170 * _2193) + _2156)) + 9.9999999392252902907785028219223e-09) + (((_1944 * _2193) + _2156) * _2170))) * _2170;
        float _4121 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2205 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2179 / ((_2183 * _2183) * 3.141590118408203125));
        float _2206 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
        _2131 = (((_2192 * cbLight._m0[_2141].x) * _2205) * _2206) + _2067;
        _2133 = (((_2192 * cbLight._m0[_2141].y) * _2205) * _2206) + _2068;
        _2135 = (((_2192 * cbLight._m0[_2141].z) * _2205) * _2206) + _2069;
    }
    float _2241;
    float _2243;
    float _2245;
    if (_1870)
    {
        _2241 = _2131;
        _2243 = _2133;
        _2245 = _2135;
    }
    else
    {
        uint _2252 = _1776 + 3u;
        uint _2256 = _1776 + 11u;
        float _2270 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2252].w)) * _574) * 0.949999988079071044921875);
        float _2271 = _2270 * _2270;
        float _2272 = cbLight._m0[_2252].x + _651;
        float _2273 = cbLight._m0[_2252].y + _652;
        float _2274 = cbLight._m0[_2252].z + _653;
        float _2278 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
        float _2279 = _2278 * _2272;
        float _2280 = _2278 * _2273;
        float _2281 = _2278 * _2274;
        float _2282 = dot(vec3(_571, _572, _573), vec3(cbLight._m0[_2252].xyz));
        float _4137 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2285 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _2286 = dot(vec3(_571, _572, _573), vec3(_2279, _2280, _2281));
        float _4148 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2289 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2290 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_2279, _2280, _2281));
        float _4159 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2294 = _2271 * _2271;
        float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
        float _2307 = (exp2(log2(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2308 = 1.0 - _2271;
        float _2318 = (0.5 / (((_1944 * ((_2285 * _2308) + _2271)) + 9.9999999392252902907785028219223e-09) + (((_1944 * _2308) + _2271) * _2285))) * _2285;
        float _4170 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2320 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
        float _2321 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
        _2241 = (((_2307 * cbLight._m0[_2256].x) * _2320) * _2321) + _2131;
        _2243 = (((_2307 * cbLight._m0[_2256].y) * _2320) * _2321) + _2133;
        _2245 = (((_2307 * cbLight._m0[_2256].z) * _2320) * _2321) + _2135;
    }
    float _2456;
    float _2458;
    float _2460;
    float _2462;
    float _2464;
    float _2466;
    if (_1774.y == 0u)
    {
        float _2396 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2397 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2396;
        float _2398 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2396;
        float _2399 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2396;
        uvec4 _2411 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2412 = _2411.x;
        uint _2423 = uint((float(_2411.y) * floor(float(uint(cbSceneParam._m0[85u].y * _660) / _2412))) + floor(float(uint(cbSceneParam._m0[85u].x * _659) / _2412)));
        float _2433 = (log2(_2399 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2434 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        uint _2437 = uint(isnan(14.0) ? _2434 : (isnan(_2434) ? 14.0 : min(_2434, 14.0)));
        uvec4 _2442 = texelFetch(g_lightClusterGridBuffer, int(((_2437 << 2u) + (_2423 << 6u)) >> 2u));
        uint _2443 = _2442.x;
        uint _2444 = _2411.z;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        if (((((1u << ((_2444 >> 4u) & 15u)) + 4294967295u) & _2443) == 0u) || ((_2444 & 240u) == 0u))
        {
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
        }
        else
        {
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2555;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            uint _2695 = 0u;
            uint _2704;
            bool _2705;
            for (;;)
            {
                _2704 = texelFetch(g_lightClassification, int((((_2437 << 5u) + (_2423 << 9u)) + (_2695 << 2u)) >> 2u)).x;
                _2705 = _2704 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2705)
                {
                    frontier_phi_61_pred = _2689;
                    frontier_phi_61_pred_1 = _2694;
                    frontier_phi_61_pred_2 = _2693;
                    frontier_phi_61_pred_3 = _2692;
                    frontier_phi_61_pred_4 = _2691;
                    frontier_phi_61_pred_5 = _2690;
                }
                else
                {
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    uint _2819;
                    _2813 = _2689;
                    _2814 = _2690;
                    _2815 = _2691;
                    _2816 = _2692;
                    _2817 = _2693;
                    _2818 = _2694;
                    _2819 = _2704;
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    for (;;)
                    {
                        uint _2823 = uint(findLSB(_2819)) + (_2695 << 5u);
                        uint _2820 = (_2819 + 4294967295u) & _2819;
                        uint _2825 = _2823 * 48u;
                        vec4 _2839 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 3u)).x));
                        uint _2845 = (_2823 * 48u) + 4u;
                        vec4 _2858 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2845)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2845 + 3u)).x));
                        uint _2864 = (_2823 * 48u) + 8u;
                        vec3 _2875 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x));
                        float _2879 = _2839.x - _2397;
                        float _2880 = _2839.y - _2398;
                        float _2881 = _2839.z - _2399;
                        float _2882 = dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881));
                        float _2885 = inversesqrt(_2882);
                        float _2886 = _2885 * _2879;
                        float _2887 = _2885 * _2880;
                        float _2888 = _2885 * _2881;
                        float _2889 = dot(vec3(_678, _681, _684), vec3(_2886, _2887, _2888));
                        float _2894 = 1.0 - (_2882 * _2839.w);
                        float _4196 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                        float _2895 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2896 = sqrt(_2882) * _2858.w;
                        float _2899 = 1.39999997615814208984375 / (_2896 + 1.39999997615814208984375);
                        float _2900 = _2899 * _2899;
                        float _2903 = ((1.0 - _2900) * _2889) + _2900;
                        float _2906 = _2896 * _2896;
                        float _2910 = ((isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0))) * _2895) / ((_2906 * 0.699999988079071044921875) + 1.0);
                        float _2914 = (-0.0) - _2397;
                        float _2915 = (-0.0) - _2398;
                        float _2916 = (-0.0) - _2399;
                        float _2920 = inversesqrt(dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916)));
                        float _2921 = _2920 * _2914;
                        float _2922 = _2920 * _2915;
                        float _2923 = _2920 * _2916;
                        float _2931 = exp2(log2(1.0 / ((_2906 * 3.5) + 5.0)) * 0.25);
                        float _2932 = 1.0 - _738;
                        float _2939 = sqrt(1.0 - ((1.0 - (_2932 * _2932)) * (1.0 - (_2931 * _2931))));
                        float _2940 = _2939 * _2939;
                        float _2941 = _2940 * _2940;
                        float _2942 = _2921 + _2886;
                        float _2943 = _2922 + _2887;
                        float _2944 = _2923 + _2888;
                        float _2948 = inversesqrt(dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944)));
                        float _2952 = dot(vec3(_678, _681, _684), vec3(_2921, _2922, _2923));
                        float _4212 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2955 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _2956 = dot(vec3(_678, _681, _684), vec3(_2948 * _2942, _2948 * _2943, _2948 * _2944));
                        float _4223 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2959 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2963 = ((_2959 * _2959) * (_2941 + (-1.0))) + 1.0;
                        float _2964 = _2899 * _2940;
                        float _2965 = _2964 * _2964;
                        float _2968 = ((1.0 - _2965) * _2889) + _2965;
                        float _4234 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2969 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                        float _2970 = 1.0 - _2940;
                        float _2980 = (0.5 / (((_2969 * ((_2955 * _2970) + _2940)) + 9.9999999392252902907785028219223e-09) + (((_2969 * _2970) + _2940) * _2955))) * _2969;
                        float _4245 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2991 = (((_2941 * 3.1415927410125732421875) * (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) / ((_2963 * _2963) * ((_2906 * 2.1991131305694580078125) + 3.141590118408203125))) * _2895;
                        _2748 = (_2910 * _2858.x) + _2816;
                        _2749 = (_2910 * _2858.y) + _2817;
                        _2750 = (_2910 * _2858.z) + _2818;
                        _2745 = (_2991 * _2875.x) + _2813;
                        _2746 = (_2991 * _2875.y) + _2814;
                        _2747 = (_2991 * _2875.z) + _2815;
                        if (_2820 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2813 = _2745;
                            _2814 = _2746;
                            _2815 = _2747;
                            _2816 = _2748;
                            _2817 = _2749;
                            _2818 = _2750;
                            _2819 = _2820;
                        }
                    }
                    frontier_phi_61_pred = _2745;
                    frontier_phi_61_pred_1 = _2750;
                    frontier_phi_61_pred_2 = _2749;
                    frontier_phi_61_pred_3 = _2748;
                    frontier_phi_61_pred_4 = _2747;
                    frontier_phi_61_pred_5 = _2746;
                }
                _2545 = frontier_phi_61_pred;
                _2555 = frontier_phi_61_pred_1;
                _2553 = frontier_phi_61_pred_2;
                _2551 = frontier_phi_61_pred_3;
                _2549 = frontier_phi_61_pred_4;
                _2547 = frontier_phi_61_pred_5;
                uint _2696 = _2695 + 1u;
                if (_2696 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2689 = _2545;
                    _2690 = _2547;
                    _2691 = _2549;
                    _2692 = _2551;
                    _2693 = _2553;
                    _2694 = _2555;
                    _2695 = _2696;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
        }
        uvec4 _2558 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2559 = _2558.z;
        uint _2561 = (_2559 >> 8u) & 15u;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        if (((4294967295u << _2561) & _2443) == 0u)
        {
            _2657 = _2544;
            _2659 = _2546;
            _2661 = _2548;
            _2663 = _2550;
            _2665 = _2552;
            _2667 = _2554;
        }
        else
        {
            float _2682 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
            float _2683 = _2682 * _2397;
            float _2684 = _2682 * _2398;
            float _2685 = _2682 * _2399;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2561 < ((_2559 >> 12u) & 15u))
            {
                float _2658;
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2796 = _2544;
                float _2797 = _2546;
                float _2798 = _2548;
                float _2799 = _2550;
                float _2800 = _2552;
                float _2801 = _2554;
                uint _2802 = _2561;
                uint _2811;
                bool _2812;
                for (;;)
                {
                    _2811 = texelFetch(g_lightClassification, int((((_2437 << 5u) + (_2423 << 9u)) + (_2802 << 2u)) >> 2u)).x;
                    _2812 = _2811 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2812)
                    {
                        frontier_phi_67_pred = _2799;
                        frontier_phi_67_pred_1 = _2800;
                        frontier_phi_67_pred_2 = _2801;
                        frontier_phi_67_pred_3 = _2798;
                        frontier_phi_67_pred_4 = _2797;
                        frontier_phi_67_pred_5 = _2796;
                    }
                    else
                    {
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3009 = _2796;
                        float _3010 = _2797;
                        float _3011 = _2798;
                        float _3012 = _2799;
                        float _3013 = _2800;
                        float _3014 = _2801;
                        uint _3015 = _2811;
                        uint _3016;
                        vec4 _3041;
                        float _3042;
                        vec4 _3057;
                        vec3 _3069;
                        vec4 _3084;
                        vec4 _3100;
                        float _3146;
                        bool _3147;
                        for (;;)
                        {
                            uint _3026 = ((_2802 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3015));
                            _3016 = (_3015 + 4294967295u) & _3015;
                            uint _3028 = _3026 * 40u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            _3042 = _3041.w;
                            uint _3044 = (_3026 * 40u) + 4u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            uint _3059 = (_3026 * 40u) + 8u;
                            _3069 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x));
                            uint _3071 = (_3026 * 40u) + 16u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3087 = (_3026 * 40u) + 20u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3102 = (_3026 * 40u) + 24u;
                            vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            uint _3121 = (_3026 * 40u) + 28u;
                            vec4 _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            _3146 = fma(_2399, _3134.z, fma(_2398, _3134.y, _3134.x * _2397)) + _3134.w;
                            _3147 = !((fma(_2399, _3115.z, fma(_2398, _3115.y, _3115.x * _2397)) + _3115.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3147)
                            {
                                float _3174 = _3041.x - _2397;
                                float _3175 = _3041.y - _2398;
                                float _3176 = _3041.z - _2399;
                                float _3177 = dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176));
                                float _3180 = inversesqrt(_3177);
                                float _3181 = _3180 * _3174;
                                float _3182 = _3180 * _3175;
                                float _3183 = _3180 * _3176;
                                float _3187 = 1.0 - (_3177 / (_3042 * _3042));
                                float _4256 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3188 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3192 = sqrt(_3177) * _3057.w;
                                float _3194 = 1.39999997615814208984375 / (_3192 + 1.39999997615814208984375);
                                float _3195 = _3194 * _3194;
                                float _3198 = ((1.0 - _3195) * dot(vec3(_3181, _3182, _3183), vec3(_678, _681, _684))) + _3195;
                                float _3201 = _3192 * _3192;
                                float _3205 = (fma(_2399, _3084.z, fma(_2398, _3084.y, _3084.x * _2397)) + _3084.w) / _3146;
                                float _3206 = (fma(_2399, _3100.z, fma(_2398, _3100.y, _3100.x * _2397)) + _3100.w) / _3146;
                                float _3210 = 1.0 - dot(vec2(_3205, _3206), vec2(_3205, _3206));
                                float _4272 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3211 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3212 = _3211 * (((isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0))) * _3188) / ((_3201 * 0.699999988079071044921875) + 1.0));
                                float _3224 = exp2(log2(1.0 / ((_3201 * 3.5) + 5.0)) * 0.25);
                                float _3225 = 1.0 - _738;
                                float _3232 = sqrt(1.0 - ((1.0 - (_3225 * _3225)) * (1.0 - (_3224 * _3224))));
                                float _3233 = _3232 * _3232;
                                float _3234 = _3233 * _3233;
                                float _3235 = _3181 - _2683;
                                float _3236 = _3182 - _2684;
                                float _3237 = _3183 - _2685;
                                float _3241 = inversesqrt(dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237)));
                                float _3245 = dot(vec3(_678, _681, _684), vec3((-0.0) - _2683, (-0.0) - _2684, (-0.0) - _2685));
                                float _4283 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3248 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3249 = dot(vec3(_678, _681, _684), vec3(_3241 * _3235, _3241 * _3236, _3241 * _3237));
                                float _4294 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3252 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                                float _3256 = ((_3252 * _3252) * (_3234 + (-1.0))) + 1.0;
                                float _3257 = _3194 * _3233;
                                float _3258 = _3257 * _3257;
                                float _3264 = ((1.0 - _3258) * dot(vec3(_678, _681, _684), vec3(_3181, _3182, _3183))) + _3258;
                                float _4305 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3265 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                                float _3266 = 1.0 - _3233;
                                float _3276 = (0.5 / (((_3265 * ((_3248 * _3266) + _3233)) + 9.9999999392252902907785028219223e-09) + (((_3265 * _3266) + _3233) * _3248))) * _3265;
                                float _4316 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3286 = (_3211 * _3188) * (((_3234 * 3.1415927410125732421875) * (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) / ((_3256 * _3256) * ((_3201 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3286 * _3069.x;
                                frontier_phi_73_pred_1 = _3286 * _3069.y;
                                frontier_phi_73_pred_2 = _3212 * _3057.z;
                                frontier_phi_73_pred_3 = _3212 * _3057.y;
                                frontier_phi_73_pred_4 = _3212 * _3057.x;
                                frontier_phi_73_pred_5 = _3286 * _3069.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3290 = frontier_phi_73_pred;
                            _3291 = frontier_phi_73_pred_1;
                            _3295 = frontier_phi_73_pred_2;
                            _3294 = frontier_phi_73_pred_3;
                            _3293 = frontier_phi_73_pred_4;
                            _3292 = frontier_phi_73_pred_5;
                            _2999 = _3293 + _3012;
                            _3000 = _3294 + _3013;
                            _3001 = _3295 + _3014;
                            _2996 = _3290 + _3009;
                            _2997 = _3291 + _3010;
                            _2998 = _3292 + _3011;
                            if (_3016 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3016;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2999;
                        frontier_phi_67_pred_1 = _3000;
                        frontier_phi_67_pred_2 = _3001;
                        frontier_phi_67_pred_3 = _2998;
                        frontier_phi_67_pred_4 = _2997;
                        frontier_phi_67_pred_5 = _2996;
                    }
                    _2664 = frontier_phi_67_pred;
                    _2666 = frontier_phi_67_pred_1;
                    _2668 = frontier_phi_67_pred_2;
                    _2662 = frontier_phi_67_pred_3;
                    _2660 = frontier_phi_67_pred_4;
                    _2658 = frontier_phi_67_pred_5;
                    uint _2803 = _2802 + 1u;
                    if (_2803 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2796 = _2658;
                        _2797 = _2660;
                        _2798 = _2662;
                        _2799 = _2664;
                        _2800 = _2666;
                        _2801 = _2668;
                        _2802 = _2803;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2666;
                frontier_phi_55_56_ladder_1 = _2668;
                frontier_phi_55_56_ladder_2 = _2664;
                frontier_phi_55_56_ladder_3 = _2662;
                frontier_phi_55_56_ladder_4 = _2660;
                frontier_phi_55_56_ladder_5 = _2658;
            }
            else
            {
                frontier_phi_55_56_ladder = _2552;
                frontier_phi_55_56_ladder_1 = _2554;
                frontier_phi_55_56_ladder_2 = _2550;
                frontier_phi_55_56_ladder_3 = _2548;
                frontier_phi_55_56_ladder_4 = _2546;
                frontier_phi_55_56_ladder_5 = _2544;
            }
            _2657 = frontier_phi_55_56_ladder_5;
            _2659 = frontier_phi_55_56_ladder_4;
            _2661 = frontier_phi_55_56_ladder_3;
            _2663 = frontier_phi_55_56_ladder_2;
            _2665 = frontier_phi_55_56_ladder;
            _2667 = frontier_phi_55_56_ladder_1;
        }
        float _2672 = isnan(1.0) ? _722 : (isnan(_722) ? 1.0 : min(_722, 1.0));
        _2456 = (_2672 * _2663) + _1908;
        _2458 = (_2672 * _2665) + _1910;
        _2460 = (_2672 * _2667) + _1912;
        _2462 = ((_2657 * 0.039999999105930328369140625) * _2672) + _2241;
        _2464 = ((_2659 * 0.039999999105930328369140625) * _2672) + _2243;
        _2466 = ((_2661 * 0.039999999105930328369140625) * _2672) + _2245;
    }
    else
    {
        _2456 = _1908;
        _2458 = _1910;
        _2460 = _1912;
        _2462 = _2241;
        _2464 = _2243;
        _2466 = _2245;
    }
    float _4332 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4343 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _4354 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    uint _2486 = _228 + 6u;
    float _2494 = _659 / cbSceneParam._m0[86u].x;
    float _2495 = _660 / cbSceneParam._m0[86u].y;
    vec4 _2509 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2494, _2495, (log2((isnan(cbSceneParam._m0[77u].w) ? _592 : (isnan(_592) ? cbSceneParam._m0[77u].w : min(_592, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2511 = _2509.x;
    float _2512 = _2509.y;
    float _2513 = _2509.z;
    float _2514 = _2509.w;
    float _2607;
    float _2609;
    float _2611;
    float _2613;
    if (_592 > cbSceneParam._m0[78u].w)
    {
        float _2569 = isnan(_592) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _592 : min(cbSceneParam._m0[80u].w, _592));
        float _2570 = _2569 / _592;
        float _2581 = _2570 * _644;
        float _2582 = _645 * _2570;
        float _2583 = (-0.0) - _2582;
        float _2585 = _2570 * _646;
        float _2587 = (cbSceneParam._m0[77u].w * _2583) / _2569;
        float _2588 = _2587 + cbSceneParam._m0[79u].w;
        float _2589 = cbSceneParam._m0[79u].w - _2582;
        float _2595 = sqrt(((_2581 * _2581) + (_2582 * _2582)) + (_2585 * _2585));
        float _2598 = (1.0 - (cbSceneParam._m0[77u].w / _2569)) * _2595;
        float _2603 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2605 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2758;
        if (abs((_2583 - _2587) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2758 = ((((_2588 > 0.0) ? exp2(_2603 * _2588) : (2.0 - exp2(_2605 * _2588))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2598;
        }
        else
        {
            float _2718 = 1.0 / cbSceneParam._m0[80u].x;
            float _2719 = isnan(_2589) ? _2588 : (isnan(_2588) ? _2589 : max(_2588, _2589));
            float _2720 = isnan(_2589) ? _2588 : (isnan(_2588) ? _2589 : min(_2588, _2589));
            float _2729 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : min(_2719, 0.0));
            float _2730 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : min(_2720, 0.0));
            _2758 = ((abs(_2595 / _2583) * cbSceneParam._m0[80u].y) * ((((_2729 - _2730) * 2.0) - ((exp2(_2603 * (isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0)))) - exp2(_2603 * (isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0))))) * _2718)) - ((exp2(_2605 * _2729) - exp2(_2605 * _2730)) * _2718))) + (_2598 * cbSceneParam._m0[80u].z);
        }
        vec4 _2760 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2494, _2495, 1.0), 0.0);
        float _2769 = exp2((_2758 * (-1.44269502162933349609375)) * (1.0 - _2760.w));
        float _2770 = log2(_2769);
        float _2786 = log2(_2514);
        _2607 = (exp2(_2786 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2770 * cbSceneParam._m0[78u].x)) * _2760.x) / cbSceneParam._m0[78u].x)) + _2511;
        _2609 = (exp2(_2786 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2770 * cbSceneParam._m0[78u].y)) * _2760.y) / cbSceneParam._m0[78u].y)) + _2512;
        _2611 = (exp2(_2786 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2770 * cbSceneParam._m0[78u].z)) * _2760.z) / cbSceneParam._m0[78u].z)) + _2513;
        _2613 = _2769 * _2514;
    }
    else
    {
        _2607 = _2511;
        _2609 = _2512;
        _2611 = _2513;
        _2613 = _2514;
    }
    float _2625 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2626 = _2625 == 3.0;
    float _2627 = log2(_2613);
    float _2634 = exp2(_2627 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2456 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _722))) + ((_2462 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1527)) * cbPerFrame._m0[3u].x));
    float _2635 = exp2(_2627 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2458 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _722))) + ((_2464 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1527)) * cbPerFrame._m0[3u].x));
    float _2636 = exp2(_2627 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2460 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _722))) + ((_2466 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1527)) * cbPerFrame._m0[3u].x));
    float _2645 = (_2625 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2645 * (_2626 ? _2634 : (_2634 + (cbSceneParam._m0[72u].w * _2607)));
    SV_Target.y = _2645 * (_2626 ? _2635 : (_2635 + (cbSceneParam._m0[72u].w * _2609)));
    SV_Target.z = _2645 * (_2626 ? _2636 : (_2636 + (cbSceneParam._m0[72u].w * _2611)));
    SV_Target.w = cbInstanceData._m0[_2486].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2486].w;
}


