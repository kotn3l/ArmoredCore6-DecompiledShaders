#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1380;
float _3739;
float _3740;
float _3741;
float _3742;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _239 = _238 * _230;
    float _240 = _238 * _231;
    float _241 = _238 * _232;
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = _252 * TANGENT.x;
    float _254 = _252 * TANGENT.y;
    float _255 = _252 * TANGENT.z;
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3751 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3762 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3773 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _408 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _408) * cbMtdParam._m0[24u].x) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3784 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _433 = (_426 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _434 = (_426 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _435 = (_426 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _439 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _433;
    float _442 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _434;
    float _445 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _435;
    float _452 = ((_433 - _439) * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) + _439;
    float _453 = ((_434 - _442) * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) + _442;
    float _454 = ((_435 - _445) * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) + _445;
    vec4 _472 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _518 = _516.x;
    float _519 = _516.y;
    float _520 = _516.z;
    float _529 = ((_499.z - _520) * _426) + _520;
    float _532 = ((((_499.x - _518) * _426) + _518) * 2.0) + (-1.0);
    float _533 = ((((_499.y - _519) * _426) + _519) * 2.0) + (-1.0);
    float _534 = dot(vec2(_532, _533), vec2(_532, _533));
    float _3795 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _539 = sqrt(1.0 - (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))));
    float _542 = _532 + ((((_472.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _543 = _533 + ((((_472.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _546 = fma(_539, _246, fma(_543, _253, _542 * _239));
    float _549 = fma(_539, _247, fma(_543, _254, _542 * _240));
    float _552 = fma(_539, _248, fma(_543, _255, _542 * _241));
    float _556 = inversesqrt(dot(vec3(_546, _549, _552), vec3(_546, _549, _552)));
    vec4 _572 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _600 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _296) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _297) + cbTextureTilingScale._m0[11u].w));
    float _602 = _600.x;
    float _603 = 1.0 - _602;
    float _607 = ((_602 - _603) * cbMtdParam._m0[24u].z) + _603;
    float _609 = (cbMtdParam._m0[19u].x + dot(vec4(_556 * _546, _556 * _549, _556 * _552, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_607 * cbMtdParam._m0[21u].z);
    float _3806 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _610 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _612 = (-0.0) - cbMtdParam._m0[24u].y;
    float _614 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _614 : (isnan(_614) ? 1.0 : min(_614, 1.0));
    float _622 = _610 - ((_610 * TEXCOORD_8.x) * _615);
    float _623 = _610 - ((_610 * TEXCOORD_8.y) * _615);
    float _624 = _610 - ((_610 * TEXCOORD_8.z) * _615);
    float _631 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _635 = ((isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : min(_631, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _643 = (_635 - (((_607 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _635))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3837 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _644 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _648 = ((_622 * (cbMtdParam._m0[17u].x - _452)) * _644) + _452;
    float _649 = ((_623 * (cbMtdParam._m0[17u].y - _453)) * _644) + _453;
    float _650 = ((_624 * (cbMtdParam._m0[17u].z - _454)) * _644) + _454;
    vec4 _662 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _664 = _662.x;
    float _665 = 1.0 - _664;
    float _690 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_664 - _665) * cbMtdParam._m0[24u].w) + _665) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3848 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _691 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _699 = ((((cbMtdParam._m0[10u].x - _648) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _691) + _648;
    float _700 = ((((cbMtdParam._m0[10u].y - _649) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _691) + _649;
    float _701 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _650)) * _691) + _650;
    float _706 = (((_472.z - _529) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _529;
    vec4 _720 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _296) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _297) + cbTextureTilingScale._m0[15u].w));
    float _727 = (_720.x * 2.0) + (-1.0);
    float _728 = (_720.y * 2.0) + (-1.0);
    float _729 = dot(vec2(_727, _728), vec2(_727, _728));
    float _3859 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _738 = (((_720.z - _706) * _622) * _644) + _706;
    float _741 = ((cbMtdParam._m0[23u].y - _738) * _691) + _738;
    vec4 _760 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _766 = (_760.x * 2.0) + (-1.0);
    float _767 = (_760.y * 2.0) + (-1.0);
    float _768 = dot(vec2(_766, _767), vec2(_766, _767));
    float _3870 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _788 = (((cbMtdParam._m0[21u].x * _542) + ((_727 - _542) * _622)) * _644) + _542;
    float _789 = (((cbMtdParam._m0[21u].x * _543) + ((_728 - _543) * _623)) * _644) + _543;
    float _790 = (((sqrt(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) - _539) * _624) * _644) + _539;
    float _801 = (((_766 - _788) + (_788 * cbMtdParam._m0[22u].z)) * _691) + _788;
    float _802 = (((_767 - _789) + (_789 * cbMtdParam._m0[22u].z)) * _691) + _789;
    float _803 = ((sqrt(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) - _790) * _691) + _790;
    float _805 = cbMtdParam._m0[22u].x + _572.w;
    float _808 = fma(_803, _246, fma(_802, _253, _801 * _239));
    float _811 = fma(_803, _247, fma(_802, _254, _801 * _240));
    float _814 = fma(_803, _248, fma(_802, _255, _801 * _241));
    float _818 = inversesqrt(dot(vec3(_808, _811, _814), vec3(_808, _811, _814)));
    float _819 = _818 * _808;
    float _820 = _818 * _811;
    float _821 = _818 * _814;
    float _3881 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _822 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _3903 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _3914 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _3925 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _840 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _891 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _881);
    float _892 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _881);
    float _893 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _881);
    float _897 = inversesqrt(dot(vec3(_891, _892, _893), vec3(_891, _892, _893)));
    float _898 = _891 * _897;
    float _899 = _892 * _897;
    float _900 = _893 * _897;
    vec4 _905 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _907 = _905.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1061 = sqrt(((_891 * _891) + (_892 * _892)) + (_893 * _893));
        float _1067 = (cbMatDynParam._m0[5u].x * _1061) + cbMatDynParam._m0[5u].y;
        float _3936 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1072 = (cbMatDynParam._m0[5u].z * _1061) + cbMatDynParam._m0[5u].w;
        float _3947 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) - _1068)) + _1068) < ((_907 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _918 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _919 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _937 = fma(_821, cbSceneParam._m0[5u].z, fma(_820, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _819));
    float _940 = fma(_821, cbSceneParam._m0[6u].z, fma(_820, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _819));
    float _943 = fma(_821, cbSceneParam._m0[7u].z, fma(_820, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _819));
    uint _956 = _277 + 9u;
    uint _957 = _956 + uint(cbMatDynParam._m0[0u].w);
    float _963 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * cbInstanceData._m0[_957].x;
    float _964 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * cbInstanceData._m0[_957].y;
    float _965 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * cbInstanceData._m0[_957].z;
    float _3958 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _3969 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    vec4 _977 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _918, cbSceneParam._m0[86u].y * _919));
    float _981 = ((isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * TEXCOORD_5.w) * _977.x;
    float _982 = dot(vec3(_819, _820, _821), vec3(_898, _899, _900));
    float _985 = _982 * 2.0;
    float _989 = (_985 * _819) - _898;
    float _990 = (_985 * _820) - _899;
    float _991 = (_985 * _821) - _900;
    float _995 = abs(dot(vec3(_898, _899, _900), vec3(_819, _820, _821)));
    float _3991 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _997 = sqrt(_822);
    float _1010 = exp2((_997 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_997 * 3.0));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1379;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1104 = fma(_1050, cbModelParam._m0[26u].z, fma(_1046, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1042));
        float _1108 = fma(_1050, cbModelParam._m0[27u].z, fma(_1046, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1042));
        float _1112 = fma(_1050, cbModelParam._m0[28u].z, fma(_1046, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1042));
        float _1137 = _1042 + _819;
        float _1138 = _1046 + _820;
        float _1139 = _1050 + _821;
        float _1149 = fma(_1139, cbModelParam._m0[26u].z, fma(_1138, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1137)) - _1104;
        float _1150 = fma(_1139, cbModelParam._m0[27u].z, fma(_1138, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1137)) - _1108;
        float _1151 = fma(_1139, cbModelParam._m0[28u].z, fma(_1138, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1137)) - _1112;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1104 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1108 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[34u].z) + ((((((_1112 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1207 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1173.x + (-0.5));
        float _1209 = _1207 * (_1173.y + (-0.5));
        float _1210 = _1207 * (_1173.z + (-0.5));
        float _1217 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1180.x + (-0.5));
        float _1219 = _1217 * (_1180.y + (-0.5));
        float _1220 = _1217 * (_1180.z + (-0.5));
        float _1227 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1187.x + (-0.5));
        float _1229 = _1227 * (_1187.y + (-0.5));
        float _1230 = _1227 * (_1187.z + (-0.5));
        float _1237 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1194.x + (-0.5));
        float _1239 = _1237 * (_1194.y + (-0.5));
        float _1240 = _1237 * (_1194.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1261 = (dot(vec3(_819, _820, _821), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1271 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4039 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1273 + 1.0))) + _1278) * _1241;
        float _1288 = _1209 * 0.5;
        float _1289 = _1219 * 0.5;
        float _1290 = _1229 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_819, _820, _821), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4072 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1315 + 1.0))) + _1320) * _1242;
        float _1330 = _1210 * 0.5;
        float _1331 = _1220 * 0.5;
        float _1332 = _1230 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_819, _820, _821), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4105 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1357 + 1.0))) + _1362) * _1243;
        _1379 = _1210;
        _1381 = _1209;
        _1382 = _1208;
        _1383 = _1220;
        _1384 = _1219;
        _1385 = _1218;
        _1386 = _1230;
        _1387 = _1229;
        _1388 = _1228;
        _1389 = _1243;
        _1390 = _1242;
        _1391 = _1241;
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _1380;
        _1381 = _1380;
        _1382 = _1380;
        _1383 = _1380;
        _1384 = _1380;
        _1385 = _1380;
        _1386 = _1380;
        _1387 = _1380;
        _1388 = _1380;
        _1389 = _1380;
        _1390 = _1380;
        _1391 = _1380;
        _1392 = 0.0;
        _1393 = 0.0;
        _1394 = 0.0;
    }
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1422 = fma(_1050, cbModelParam._m0[30u].z, fma(_1046, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1042));
        float _1426 = fma(_1050, cbModelParam._m0[31u].z, fma(_1046, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1042));
        float _1430 = fma(_1050, cbModelParam._m0[32u].z, fma(_1046, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1042));
        float _1453 = _1042 + _819;
        float _1454 = _1046 + _820;
        float _1455 = _1050 + _821;
        float _1465 = fma(_1455, cbModelParam._m0[30u].z, fma(_1454, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1453)) - _1422;
        float _1466 = fma(_1455, cbModelParam._m0[31u].z, fma(_1454, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1453)) - _1426;
        float _1467 = fma(_1455, cbModelParam._m0[32u].z, fma(_1454, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1453)) - _1430;
        float _1471 = inversesqrt(dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467)));
        float _1484 = ((_1471 * _1465) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1422 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1471 * _1466) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1426 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1471 * _1467) / cbModelParam._m0[35u].z) + ((((((_1430 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        float _1521 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1488.x + (-0.5));
        float _1523 = _1521 * (_1488.y + (-0.5));
        float _1524 = _1521 * (_1488.z + (-0.5));
        float _1531 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1495.x + (-0.5));
        float _1533 = _1531 * (_1495.y + (-0.5));
        float _1534 = _1531 * (_1495.z + (-0.5));
        float _1541 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1502.x + (-0.5));
        float _1543 = _1541 * (_1502.y + (-0.5));
        float _1544 = _1541 * (_1502.z + (-0.5));
        float _1551 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1509.x + (-0.5));
        float _1553 = _1551 * (_1509.y + (-0.5));
        float _1554 = _1551 * (_1509.z + (-0.5));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = _1522 * 0.5;
        float _1559 = _1532 * 0.5;
        float _1560 = _1542 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_819, _820, _821), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4168 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1585 + 1.0))) + _1590) * _1555;
        float _1600 = _1523 * 0.5;
        float _1601 = _1533 * 0.5;
        float _1602 = _1543 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_819, _820, _821), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4179 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4190 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4201 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1627 + 1.0))) + _1632) * _1556;
        float _1642 = _1524 * 0.5;
        float _1643 = _1534 * 0.5;
        float _1644 = _1544 * 0.5;
        float _1645 = dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644));
        float _1650 = (_1645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1645);
        float _1658 = (dot(vec3(_819, _820, _821), vec3(_1650 * _1642, _1650 * _1643, _1650 * _1644)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1667 = sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1669 = _1668 * 2.0;
        float _1673 = (1.0 - _1668) / (_1668 + 1.0);
        float _4234 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1683 = ((((1.0 - _1674) * (_1669 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1669 + 1.0))) + _1674) * _1557;
        _1691 = _1524;
        _1692 = _1523;
        _1693 = _1522;
        _1694 = _1534;
        _1695 = _1533;
        _1696 = _1532;
        _1697 = _1544;
        _1698 = _1543;
        _1699 = _1542;
        _1700 = _1557;
        _1701 = _1556;
        _1702 = _1555;
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)));
    }
    else
    {
        _1691 = _1380;
        _1692 = _1380;
        _1693 = _1380;
        _1694 = _1380;
        _1695 = _1380;
        _1696 = _1380;
        _1697 = _1380;
        _1698 = _1380;
        _1699 = _1380;
        _1700 = _1380;
        _1701 = _1380;
        _1702 = _1380;
        _1703 = 0.0;
        _1704 = 0.0;
        _1705 = 0.0;
    }
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1392)) + _1392;
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1393)) + _1393;
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1394)) + _1394;
    float _1738 = fma(_1717, cbSceneParam._m0[89u].z, fma(_1716, cbSceneParam._m0[89u].y, _1715 * cbSceneParam._m0[89u].x));
    float _1741 = fma(_1717, cbSceneParam._m0[90u].z, fma(_1716, cbSceneParam._m0[90u].y, _1715 * cbSceneParam._m0[90u].x));
    float _1744 = fma(_1717, cbSceneParam._m0[91u].z, fma(_1716, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1715));
    float _1759 = _989 * 0.5;
    float _1760 = _990 * 0.5;
    float _1761 = _991 * 0.5;
    float _1762 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1765 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1768 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1802;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1775 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1379, _1383, _1386, _1389));
        float _1779 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1381, _1384, _1387, _1390));
        float _1783 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1790 = dot(vec4(cbModelParam._m0[39u]), vec4(_1759, _1760, _1761, 1.0));
        _1802 = dot(vec3(isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1790) ? 0.0 : (isnan(0.0) ? _1790 : max(0.0, _1790))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1802 = 1.0;
    }
    float _1813;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1804 = dot(vec4(cbModelParam._m0[40u]), vec4(_1759, _1760, _1761, 1.0));
        _1813 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1804) ? 0.0 : (isnan(0.0) ? _1804 : max(0.0, _1804))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1813 = 1.0;
    }
    float _1817 = (_1813 * cbModelParam._m0[1u].x) + (_1802 * (1.0 - cbModelParam._m0[1u].x));
    float _1827 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _822);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1827 : min(cbModelParam._m0[25u].z, _1827));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1876 = fma(_1050, cbModelParam._m0[13u].z, fma(_1046, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1042)) + cbModelParam._m0[13u].w;
        float _1880 = fma(_1050, cbModelParam._m0[14u].z, fma(_1046, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1042)) + cbModelParam._m0[14u].w;
        float _1884 = fma(_1050, cbModelParam._m0[15u].z, fma(_1046, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1042)) + cbModelParam._m0[15u].w;
        float _1887 = fma(_991, cbModelParam._m0[13u].z, fma(_990, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _989));
        float _1890 = fma(_991, cbModelParam._m0[14u].z, fma(_990, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _989));
        float _1893 = fma(_991, cbModelParam._m0[15u].z, fma(_990, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _989));
        float _1921;
        if (_1887 > 0.0)
        {
            _1921 = abs((1.0 - _1876) / _1887);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1876 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1921 = frontier_phi_17_15_ladder;
        }
        float _2122;
        if (_1890 > 0.0)
        {
            _2122 = abs((1.0 - _1880) / _1890);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1880 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2122 = frontier_phi_26_22_ladder;
        }
        float _2365;
        if (_1893 > 0.0)
        {
            _2365 = abs((1.0 - _1884) / _1893);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1884 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2365 = frontier_phi_38_33_ladder;
        }
        float _2367 = isnan(_2122) ? _1921 : (isnan(_1921) ? _2122 : min(_1921, _2122));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1887) + _1876;
        float _2373 = (_2368 * _1890) + _1880;
        float _2374 = (_2368 * _1893) + _1884;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2377 = (-1.0) - _2375;
        float _2379 = _2375 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2374 > _2379) || ((_2374 < _2377) || ((_2373 > _2379) || ((_2373 < _2377) || ((_2372 < _2377) || (_2372 > _2379))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2498 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2374, cbModelParam._m0[9u].z, fma(_2373, cbModelParam._m0[9u].y, _2372 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2374, cbModelParam._m0[10u].z, fma(_2373, cbModelParam._m0[10u].y, _2372 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2374, cbModelParam._m0[11u].z, fma(_2373, cbModelParam._m0[11u].y, _2372 * cbModelParam._m0[11u].x))), _1828);
            frontier_phi_16_38_ladder = _2498.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2498.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2498.x * cbModelParam._m0[1u].y;
        }
        _1909 = frontier_phi_16_38_ladder_2;
        _1911 = frontier_phi_16_38_ladder_1;
        _1913 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_989, _990, _991), _1828);
        _1909 = _1897.x * cbModelParam._m0[1u].y;
        _1911 = _1897.y * cbModelParam._m0[1u].y;
        _1913 = _1897.z * cbModelParam._m0[1u].y;
    }
    float _1917 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _822);
    float _1918 = isnan(_1917) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1917 : min(cbModelParam._m0[25u].w, _1917));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1972 = fma(_1050, cbModelParam._m0[21u].z, fma(_1046, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1042)) + cbModelParam._m0[21u].w;
        float _1976 = fma(_1050, cbModelParam._m0[22u].z, fma(_1046, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1042)) + cbModelParam._m0[22u].w;
        float _1980 = fma(_1050, cbModelParam._m0[23u].z, fma(_1046, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1042)) + cbModelParam._m0[23u].w;
        float _1983 = fma(_991, cbModelParam._m0[21u].z, fma(_990, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _989));
        float _1986 = fma(_991, cbModelParam._m0[22u].z, fma(_990, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _989));
        float _1989 = fma(_991, cbModelParam._m0[23u].z, fma(_990, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _989));
        float _2127;
        if (_1983 > 0.0)
        {
            _2127 = abs((1.0 - _1972) / _1983);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1972 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2127 = frontier_phi_28_24_ladder;
        }
        float _2392;
        if (_1986 > 0.0)
        {
            _2392 = abs((1.0 - _1976) / _1986);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1976 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2392 = frontier_phi_40_35_ladder;
        }
        float _2597;
        if (_1989 > 0.0)
        {
            _2597 = abs((1.0 - _1980) / _1989);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1980 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2597 = frontier_phi_49_46_ladder;
        }
        float _2599 = isnan(_2392) ? _2127 : (isnan(_2127) ? _2392 : min(_2127, _2392));
        float _2600 = isnan(_2597) ? _2599 : (isnan(_2599) ? _2597 : min(_2599, _2597));
        float _2604 = (_2600 * _1983) + _1972;
        float _2605 = (_2600 * _1986) + _1976;
        float _2606 = (_2600 * _1989) + _1980;
        float _2607 = _2600 * 9.9999997473787516355514526367188e-05;
        float _2608 = (-1.0) - _2607;
        float _2610 = _2607 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2606 > _2610) || ((_2606 < _2608) || ((_2605 > _2610) || ((_2605 < _2608) || ((_2604 < _2608) || (_2604 > _2610))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2805 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2606, cbModelParam._m0[17u].z, fma(_2605, cbModelParam._m0[17u].y, _2604 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2606, cbModelParam._m0[18u].z, fma(_2605, cbModelParam._m0[18u].y, _2604 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2606, cbModelParam._m0[19u].z, fma(_2605, cbModelParam._m0[19u].y, _2604 * cbModelParam._m0[19u].x))), _1918);
            frontier_phi_25_49_ladder = _2805.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2805.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2805.x * cbModelParam._m0[1u].z;
        }
        _2008 = frontier_phi_25_49_ladder_2;
        _2010 = frontier_phi_25_49_ladder_1;
        _2012 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_989, _990, _991), _1918);
        _2008 = _1992.x * cbModelParam._m0[1u].z;
        _2010 = _1992.y * cbModelParam._m0[1u].z;
        _2012 = _1992.z * cbModelParam._m0[1u].z;
    }
    float _2024 = ((((1.0 - _1010) * ((_997 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1010 * _997)) * _981;
    float _2025 = _2024 * ((cbModelParam._m0[1u].w * (_2008 - _1909)) + _1909);
    float _2026 = _2024 * ((cbModelParam._m0[1u].w * (_2010 - _1911)) + _1911);
    float _2027 = _2024 * ((cbModelParam._m0[1u].w * (_2012 - _1913)) + _1913);
    float _2030 = fma(_2027, cbSceneParam._m0[89u].z, fma(_2026, cbSceneParam._m0[89u].y, _2025 * cbSceneParam._m0[89u].x));
    float _2033 = fma(_2027, cbSceneParam._m0[90u].z, fma(_2026, cbSceneParam._m0[90u].y, _2025 * cbSceneParam._m0[90u].x));
    float _2036 = fma(_2027, cbSceneParam._m0[91u].z, fma(_2026, cbSceneParam._m0[91u].y, _2025 * cbSceneParam._m0[91u].x));
    uvec4 _2046 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2048 = _2046.x * 14u;
    uint _2049 = _2048 + 13u;
    float _2056 = _981 + (-1.0);
    float _2061 = (cbLight._m0[_2049].x * _2056) + 1.0;
    float _2062 = (cbLight._m0[_2049].y * _2056) + 1.0;
    float _2063 = (cbLight._m0[_2049].z * _2056) + 1.0;
    float _2064 = (cbLight._m0[_2049].w * _2056) + 1.0;
    uint _2065 = _2048 + 5u;
    float _2071 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
    uint _2075 = _2048 + 4u;
    float _2081 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
    uint _2085 = _2048 | 1u;
    float _2096 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_819, _820, _821));
    float _2099 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_819, _820, _821));
    float _4370 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _4381 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2104 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * 0.3183098733425140380859375;
    float _2106 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * 0.3183098733425140380859375;
    float _2113 = ((cbLight._m0[_2065].x * _2071) * _2106) + ((cbLight._m0[_2075].x * _2081) * _2104);
    float _2114 = ((_2071 * cbLight._m0[_2065].y) * _2106) + ((_2081 * cbLight._m0[_2075].y) * _2104);
    float _2115 = ((_2071 * cbLight._m0[_2065].z) * _2106) + ((_2081 * cbLight._m0[_2075].z) * _2104);
    uvec4 _2119 = floatBitsToUint(cbLight._m0[_2048 + 12u]);
    bool _2121 = _2119.x == 0u;
    float _2132;
    float _2134;
    float _2136;
    if (_2121)
    {
        _2132 = _2113;
        _2134 = _2114;
        _2136 = _2115;
    }
    else
    {
        uint _2140 = _2048 + 6u;
        float _2156 = (dot(vec3(cbLight._m0[_2048 + 2u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2157 = _2156 * _2156;
        float _4392 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2158 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2159 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2132 = (((cbLight._m0[_2140].x * 0.3183098733425140380859375) * _2158) * _2159) + _2113;
        _2134 = (((cbLight._m0[_2140].y * 0.3183098733425140380859375) * _2158) * _2159) + _2114;
        _2136 = (((cbLight._m0[_2140].z * 0.3183098733425140380859375) * _2158) * _2159) + _2115;
    }
    bool _2139 = _2119.y == 0u;
    float _2177;
    float _2179;
    float _2181;
    if (_2139)
    {
        _2177 = _2132;
        _2179 = _2134;
        _2181 = _2136;
    }
    else
    {
        uint _2336 = _2048 + 7u;
        float _2352 = (dot(vec3(cbLight._m0[_2048 + 3u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2353 = _2352 * _2352;
        float _4408 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2354 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2355 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
        _2177 = (((cbLight._m0[_2336].x * 0.3183098733425140380859375) * _2354) * _2355) + _2132;
        _2179 = (((cbLight._m0[_2336].y * 0.3183098733425140380859375) * _2354) * _2355) + _2134;
        _2181 = (((cbLight._m0[_2336].z * 0.3183098733425140380859375) * _2354) * _2355) + _2136;
    }
    uint _2184 = _2048 + 8u;
    float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _822) * 0.949999988079071044921875);
    float _2198 = _2197 * _2197;
    float _2199 = cbLight._m0[_2048].x + _898;
    float _2200 = cbLight._m0[_2048].y + _899;
    float _2201 = cbLight._m0[_2048].z + _900;
    float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
    float _2206 = _2205 * _2199;
    float _2207 = _2205 * _2200;
    float _2208 = _2205 * _2201;
    float _2209 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2048].xyz));
    float _4424 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _4435 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _2213 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2214 = dot(vec3(_819, _820, _821), vec3(_2206, _2207, _2208));
    float _4446 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2218 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2206, _2207, _2208));
    float _4457 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2222 = _2198 * _2198;
    float _2226 = ((_2217 * _2217) * (_2222 + (-1.0))) + 1.0;
    float _2237 = (exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2238 = 1.0 - _2198;
    float _2249 = (0.5 / (((_2213 * ((_2212 * _2238) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2238) + _2198) * _2212))) * _2212;
    float _4468 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2251 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2222 / ((_2226 * _2226) * 3.141590118408203125));
    uint _2262 = _2048 + 9u;
    float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2085].w)) * _822) * 0.949999988079071044921875);
    float _2274 = _2273 * _2273;
    float _2275 = cbLight._m0[_2085].x + _898;
    float _2276 = cbLight._m0[_2085].y + _899;
    float _2277 = cbLight._m0[_2085].z + _900;
    float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
    float _2282 = _2281 * _2275;
    float _2283 = _2281 * _2276;
    float _2284 = _2281 * _2277;
    float _2285 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2085].xyz));
    float _4479 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _2289 = dot(vec3(_819, _820, _821), vec3(_2282, _2283, _2284));
    float _4490 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2293 = dot(vec3(cbLight._m0[_2085].xyz), vec3(_2282, _2283, _2284));
    float _4501 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2297 = _2274 * _2274;
    float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
    float _2310 = (exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2311 = 1.0 - _2274;
    float _2321 = (0.5 / (((_2213 * ((_2288 * _2311) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2311) + _2274) * _2288))) * _2288;
    float _4512 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
    float _2333 = (((_2310 * cbLight._m0[_2262].x) * _2323) * _2071) + (((_2237 * cbLight._m0[_2184].x) * _2251) * _2081);
    float _2334 = (((_2310 * cbLight._m0[_2262].y) * _2323) * _2071) + (((_2237 * cbLight._m0[_2184].y) * _2251) * _2081);
    float _2335 = (((_2310 * cbLight._m0[_2262].z) * _2323) * _2071) + (((_2237 * cbLight._m0[_2184].z) * _2251) * _2081);
    float _2397;
    float _2399;
    float _2401;
    if (_2121)
    {
        _2397 = _2333;
        _2399 = _2334;
        _2401 = _2335;
    }
    else
    {
        uint _2403 = _2048 + 2u;
        uint _2407 = _2048 + 10u;
        float _2421 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _822) * 0.949999988079071044921875);
        float _2422 = _2421 * _2421;
        float _2423 = cbLight._m0[_2403].x + _898;
        float _2424 = cbLight._m0[_2403].y + _899;
        float _2425 = cbLight._m0[_2403].z + _900;
        float _2429 = inversesqrt(dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425)));
        float _2430 = _2429 * _2423;
        float _2431 = _2429 * _2424;
        float _2432 = _2429 * _2425;
        float _2433 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2403].xyz));
        float _4523 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2436 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2437 = dot(vec3(_819, _820, _821), vec3(_2430, _2431, _2432));
        float _4534 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _2441 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2430, _2431, _2432));
        float _4545 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2445 = _2422 * _2422;
        float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
        float _2458 = (exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2459 = 1.0 - _2422;
        float _2469 = (0.5 / (((_2213 * ((_2436 * _2459) + _2422)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2459) + _2422) * _2436))) * _2436;
        float _4556 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2471 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
        float _2472 = isnan(1.0) ? _2063 : (isnan(_2063) ? 1.0 : min(_2063, 1.0));
        _2397 = (((_2458 * cbLight._m0[_2407].x) * _2471) * _2472) + _2333;
        _2399 = (((_2458 * cbLight._m0[_2407].y) * _2471) * _2472) + _2334;
        _2401 = (((_2458 * cbLight._m0[_2407].z) * _2471) * _2472) + _2335;
    }
    float _2507;
    float _2509;
    float _2511;
    if (_2139)
    {
        _2507 = _2397;
        _2509 = _2399;
        _2511 = _2401;
    }
    else
    {
        uint _2518 = _2048 + 3u;
        uint _2522 = _2048 + 11u;
        float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2518].w)) * _822) * 0.949999988079071044921875);
        float _2537 = _2536 * _2536;
        float _2538 = cbLight._m0[_2518].x + _898;
        float _2539 = cbLight._m0[_2518].y + _899;
        float _2540 = cbLight._m0[_2518].z + _900;
        float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
        float _2545 = _2544 * _2538;
        float _2546 = _2544 * _2539;
        float _2547 = _2544 * _2540;
        float _2548 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2518].xyz));
        float _4572 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2552 = dot(vec3(_819, _820, _821), vec3(_2545, _2546, _2547));
        float _4583 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2555 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2556 = dot(vec3(cbLight._m0[_2518].xyz), vec3(_2545, _2546, _2547));
        float _4594 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2560 = _2537 * _2537;
        float _2564 = ((_2555 * _2555) * (_2560 + (-1.0))) + 1.0;
        float _2573 = (exp2(log2(1.0 - (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2574 = 1.0 - _2537;
        float _2584 = (0.5 / (((_2213 * ((_2551 * _2574) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2574) + _2537) * _2551))) * _2551;
        float _4605 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2586 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2560 / ((_2564 * _2564) * 3.141590118408203125));
        float _2587 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
        _2507 = (((_2573 * cbLight._m0[_2522].x) * _2586) * _2587) + _2397;
        _2509 = (((_2573 * cbLight._m0[_2522].y) * _2586) * _2587) + _2399;
        _2511 = (((_2573 * cbLight._m0[_2522].z) * _2586) * _2587) + _2401;
    }
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    if (_2046.y == 0u)
    {
        float _2662 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2662;
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2662;
        float _2665 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2662;
        uvec4 _2677 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2678 = _2677.x;
        uint _2689 = uint((float(_2677.y) * floor(float(uint(cbSceneParam._m0[85u].y * _919) / _2678))) + floor(float(uint(cbSceneParam._m0[85u].x * _918) / _2678)));
        float _2699 = (log2(_2665 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2700 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        uint _2703 = uint(isnan(14.0) ? _2700 : (isnan(_2700) ? 14.0 : min(_2700, 14.0)));
        uvec4 _2708 = texelFetch(g_lightClusterGridBuffer, int(((_2703 << 2u) + (_2689 << 6u)) >> 2u));
        uint _2709 = _2708.x;
        uint _2710 = _2677.z;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        if (((((1u << ((_2710 >> 4u) & 15u)) + 4294967295u) & _2709) == 0u) || ((_2710 & 240u) == 0u))
        {
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
        }
        else
        {
            float _2811;
            float _2813;
            float _2815;
            float _2817;
            float _2819;
            float _2821;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            float _2967 = 0.0;
            uint _2968 = 0u;
            uint _2977;
            bool _2978;
            for (;;)
            {
                _2977 = texelFetch(g_lightClassification, int((((_2703 << 5u) + (_2689 << 9u)) + (_2968 << 2u)) >> 2u)).x;
                _2978 = _2977 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2978)
                {
                    frontier_phi_66_pred = _2962;
                    frontier_phi_66_pred_1 = _2967;
                    frontier_phi_66_pred_2 = _2966;
                    frontier_phi_66_pred_3 = _2965;
                    frontier_phi_66_pred_4 = _2964;
                    frontier_phi_66_pred_5 = _2963;
                }
                else
                {
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    uint _3113;
                    _3107 = _2962;
                    _3108 = _2963;
                    _3109 = _2964;
                    _3110 = _2965;
                    _3111 = _2966;
                    _3112 = _2967;
                    _3113 = _2977;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    for (;;)
                    {
                        uint _3117 = uint(findLSB(_3113)) + (_2968 << 5u);
                        uint _3114 = (_3113 + 4294967295u) & _3113;
                        uint _3119 = _3117 * 48u;
                        vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3119)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 3u)).x));
                        uint _3139 = (_3117 * 48u) + 4u;
                        vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3139)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 3u)).x));
                        uint _3158 = (_3117 * 48u) + 8u;
                        vec3 _3169 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3158)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 2u)).x));
                        float _3173 = _3133.x - _2663;
                        float _3174 = _3133.y - _2664;
                        float _3175 = _3133.z - _2665;
                        float _3176 = dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175));
                        float _3179 = inversesqrt(_3176);
                        float _3180 = _3179 * _3173;
                        float _3181 = _3179 * _3174;
                        float _3182 = _3179 * _3175;
                        float _3183 = dot(vec3(_937, _940, _943), vec3(_3180, _3181, _3182));
                        float _3188 = 1.0 - (_3176 * _3133.w);
                        float _4631 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3189 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                        float _3190 = sqrt(_3176) * _3152.w;
                        float _3193 = 1.39999997615814208984375 / (_3190 + 1.39999997615814208984375);
                        float _3194 = _3193 * _3193;
                        float _3197 = ((1.0 - _3194) * _3183) + _3194;
                        float _3200 = _3190 * _3190;
                        float _3204 = ((isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0))) * _3189) / ((_3200 * 0.699999988079071044921875) + 1.0);
                        float _3208 = (-0.0) - _2663;
                        float _3209 = (-0.0) - _2664;
                        float _3210 = (-0.0) - _2665;
                        float _3214 = inversesqrt(dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210)));
                        float _3215 = _3214 * _3208;
                        float _3216 = _3214 * _3209;
                        float _3217 = _3214 * _3210;
                        float _3225 = exp2(log2(1.0 / ((_3200 * 3.5) + 5.0)) * 0.25);
                        float _3226 = 1.0 - _997;
                        float _3233 = sqrt(1.0 - ((1.0 - (_3226 * _3226)) * (1.0 - (_3225 * _3225))));
                        float _3234 = _3233 * _3233;
                        float _3235 = _3234 * _3234;
                        float _3236 = _3215 + _3180;
                        float _3237 = _3216 + _3181;
                        float _3238 = _3217 + _3182;
                        float _3242 = inversesqrt(dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238)));
                        float _3246 = dot(vec3(_937, _940, _943), vec3(_3215, _3216, _3217));
                        float _4647 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3249 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3250 = dot(vec3(_937, _940, _943), vec3(_3242 * _3236, _3242 * _3237, _3242 * _3238));
                        float _4658 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3253 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                        float _3257 = ((_3253 * _3253) * (_3235 + (-1.0))) + 1.0;
                        float _3258 = _3193 * _3234;
                        float _3259 = _3258 * _3258;
                        float _3262 = ((1.0 - _3259) * _3183) + _3259;
                        float _4669 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3263 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3264 = 1.0 - _3234;
                        float _3274 = (0.5 / (((_3263 * ((_3249 * _3264) + _3234)) + 9.9999999392252902907785028219223e-09) + (((_3263 * _3264) + _3234) * _3249))) * _3263;
                        float _4680 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3285 = (((_3235 * 3.1415927410125732421875) * (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) / ((_3257 * _3257) * ((_3200 * 2.1991131305694580078125) + 3.141590118408203125))) * _3189;
                        _3037 = (_3204 * _3152.x) + _3110;
                        _3038 = (_3204 * _3152.y) + _3111;
                        _3039 = (_3204 * _3152.z) + _3112;
                        _3034 = (_3285 * _3169.x) + _3107;
                        _3035 = (_3285 * _3169.y) + _3108;
                        _3036 = (_3285 * _3169.z) + _3109;
                        if (_3114 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3107 = _3034;
                            _3108 = _3035;
                            _3109 = _3036;
                            _3110 = _3037;
                            _3111 = _3038;
                            _3112 = _3039;
                            _3113 = _3114;
                        }
                    }
                    frontier_phi_66_pred = _3034;
                    frontier_phi_66_pred_1 = _3039;
                    frontier_phi_66_pred_2 = _3038;
                    frontier_phi_66_pred_3 = _3037;
                    frontier_phi_66_pred_4 = _3036;
                    frontier_phi_66_pred_5 = _3035;
                }
                _2811 = frontier_phi_66_pred;
                _2821 = frontier_phi_66_pred_1;
                _2819 = frontier_phi_66_pred_2;
                _2817 = frontier_phi_66_pred_3;
                _2815 = frontier_phi_66_pred_4;
                _2813 = frontier_phi_66_pred_5;
                uint _2969 = _2968 + 1u;
                if (_2969 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2962 = _2811;
                    _2963 = _2813;
                    _2964 = _2815;
                    _2965 = _2817;
                    _2966 = _2819;
                    _2967 = _2821;
                    _2968 = _2969;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
        }
        uvec4 _2824 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2825 = _2824.z;
        uint _2827 = (_2825 >> 8u) & 15u;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        if (((4294967295u << _2827) & _2709) == 0u)
        {
            _2930 = _2810;
            _2932 = _2812;
            _2934 = _2814;
            _2936 = _2816;
            _2938 = _2818;
            _2940 = _2820;
        }
        else
        {
            float _2955 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
            float _2956 = _2955 * _2663;
            float _2957 = _2955 * _2664;
            float _2958 = _2955 * _2665;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2827 < ((_2825 >> 12u) & 15u))
            {
                float _2931;
                float _2933;
                float _2935;
                float _2937;
                float _2939;
                float _2941;
                float _3090 = _2810;
                float _3091 = _2812;
                float _3092 = _2814;
                float _3093 = _2816;
                float _3094 = _2818;
                float _3095 = _2820;
                uint _3096 = _2827;
                uint _3105;
                bool _3106;
                for (;;)
                {
                    _3105 = texelFetch(g_lightClassification, int((((_2703 << 5u) + (_2689 << 9u)) + (_3096 << 2u)) >> 2u)).x;
                    _3106 = _3105 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3106)
                    {
                        frontier_phi_77_pred = _3095;
                        frontier_phi_77_pred_1 = _3094;
                        frontier_phi_77_pred_2 = _3093;
                        frontier_phi_77_pred_3 = _3092;
                        frontier_phi_77_pred_4 = _3091;
                        frontier_phi_77_pred_5 = _3090;
                    }
                    else
                    {
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3312 = _3090;
                        float _3313 = _3091;
                        float _3314 = _3092;
                        float _3315 = _3093;
                        float _3316 = _3094;
                        float _3317 = _3095;
                        uint _3318 = _3105;
                        uint _3319;
                        vec4 _3344;
                        float _3345;
                        vec4 _3360;
                        vec3 _3372;
                        vec4 _3387;
                        vec4 _3402;
                        float _3448;
                        bool _3449;
                        for (;;)
                        {
                            uint _3329 = ((_3096 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3318));
                            _3319 = (_3318 + 4294967295u) & _3318;
                            uint _3331 = _3329 * 40u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            _3345 = _3344.w;
                            uint _3347 = (_3329 * 40u) + 4u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3362 = (_3329 * 40u) + 8u;
                            _3372 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x));
                            uint _3374 = (_3329 * 40u) + 16u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3389 = (_3329 * 40u) + 20u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3404 = (_3329 * 40u) + 24u;
                            vec4 _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3423 = (_3329 * 40u) + 28u;
                            vec4 _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            _3448 = fma(_2665, _3436.z, fma(_2664, _3436.y, _3436.x * _2663)) + _3436.w;
                            _3449 = !((fma(_2665, _3417.z, fma(_2664, _3417.y, _3417.x * _2663)) + _3417.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3449)
                            {
                                float _3476 = _3344.x - _2663;
                                float _3477 = _3344.y - _2664;
                                float _3478 = _3344.z - _2665;
                                float _3479 = dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478));
                                float _3482 = inversesqrt(_3479);
                                float _3483 = _3482 * _3476;
                                float _3484 = _3482 * _3477;
                                float _3485 = _3482 * _3478;
                                float _3489 = 1.0 - (_3479 / (_3345 * _3345));
                                float _4691 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3490 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                                float _3494 = sqrt(_3479) * _3360.w;
                                float _3496 = 1.39999997615814208984375 / (_3494 + 1.39999997615814208984375);
                                float _3497 = _3496 * _3496;
                                float _3500 = ((1.0 - _3497) * dot(vec3(_3483, _3484, _3485), vec3(_937, _940, _943))) + _3497;
                                float _3503 = _3494 * _3494;
                                float _3507 = (fma(_2665, _3387.z, fma(_2664, _3387.y, _3387.x * _2663)) + _3387.w) / _3448;
                                float _3508 = (fma(_2665, _3402.z, fma(_2664, _3402.y, _3402.x * _2663)) + _3402.w) / _3448;
                                float _3512 = 1.0 - dot(vec2(_3507, _3508), vec2(_3507, _3508));
                                float _4707 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3513 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3514 = _3513 * (((isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0))) * _3490) / ((_3503 * 0.699999988079071044921875) + 1.0));
                                float _3526 = exp2(log2(1.0 / ((_3503 * 3.5) + 5.0)) * 0.25);
                                float _3527 = 1.0 - _997;
                                float _3534 = sqrt(1.0 - ((1.0 - (_3527 * _3527)) * (1.0 - (_3526 * _3526))));
                                float _3535 = _3534 * _3534;
                                float _3536 = _3535 * _3535;
                                float _3537 = _3483 - _2956;
                                float _3538 = _3484 - _2957;
                                float _3539 = _3485 - _2958;
                                float _3543 = inversesqrt(dot(vec3(_3537, _3538, _3539), vec3(_3537, _3538, _3539)));
                                float _3547 = dot(vec3(_937, _940, _943), vec3((-0.0) - _2956, (-0.0) - _2957, (-0.0) - _2958));
                                float _4718 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3550 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                                float _3551 = dot(vec3(_937, _940, _943), vec3(_3543 * _3537, _3543 * _3538, _3543 * _3539));
                                float _4729 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3554 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3558 = ((_3554 * _3554) * (_3536 + (-1.0))) + 1.0;
                                float _3559 = _3496 * _3535;
                                float _3560 = _3559 * _3559;
                                float _3566 = ((1.0 - _3560) * dot(vec3(_937, _940, _943), vec3(_3483, _3484, _3485))) + _3560;
                                float _4740 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3567 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3568 = 1.0 - _3535;
                                float _3578 = (0.5 / (((_3567 * ((_3550 * _3568) + _3535)) + 9.9999999392252902907785028219223e-09) + (((_3567 * _3568) + _3535) * _3550))) * _3567;
                                float _4751 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3588 = (_3513 * _3490) * (((_3536 * 3.1415927410125732421875) * (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) / ((_3558 * _3558) * ((_3503 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3514 * _3360.y;
                                frontier_phi_83_pred_1 = _3514 * _3360.x;
                                frontier_phi_83_pred_2 = _3588 * _3372.z;
                                frontier_phi_83_pred_3 = _3588 * _3372.y;
                                frontier_phi_83_pred_4 = _3588 * _3372.x;
                                frontier_phi_83_pred_5 = _3514 * _3360.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3596 = frontier_phi_83_pred;
                            _3595 = frontier_phi_83_pred_1;
                            _3594 = frontier_phi_83_pred_2;
                            _3593 = frontier_phi_83_pred_3;
                            _3592 = frontier_phi_83_pred_4;
                            _3597 = frontier_phi_83_pred_5;
                            _3302 = _3595 + _3315;
                            _3303 = _3596 + _3316;
                            _3304 = _3597 + _3317;
                            _3299 = _3592 + _3312;
                            _3300 = _3593 + _3313;
                            _3301 = _3594 + _3314;
                            if (_3319 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3319;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3304;
                        frontier_phi_77_pred_1 = _3303;
                        frontier_phi_77_pred_2 = _3302;
                        frontier_phi_77_pred_3 = _3301;
                        frontier_phi_77_pred_4 = _3300;
                        frontier_phi_77_pred_5 = _3299;
                    }
                    _2941 = frontier_phi_77_pred;
                    _2939 = frontier_phi_77_pred_1;
                    _2937 = frontier_phi_77_pred_2;
                    _2935 = frontier_phi_77_pred_3;
                    _2933 = frontier_phi_77_pred_4;
                    _2931 = frontier_phi_77_pred_5;
                    uint _3097 = _3096 + 1u;
                    if (_3097 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3090 = _2931;
                        _3091 = _2933;
                        _3092 = _2935;
                        _3093 = _2937;
                        _3094 = _2939;
                        _3095 = _2941;
                        _3096 = _3097;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2935;
                frontier_phi_58_59_ladder_1 = _2941;
                frontier_phi_58_59_ladder_2 = _2939;
                frontier_phi_58_59_ladder_3 = _2937;
                frontier_phi_58_59_ladder_4 = _2933;
                frontier_phi_58_59_ladder_5 = _2931;
            }
            else
            {
                frontier_phi_58_59_ladder = _2814;
                frontier_phi_58_59_ladder_1 = _2820;
                frontier_phi_58_59_ladder_2 = _2818;
                frontier_phi_58_59_ladder_3 = _2816;
                frontier_phi_58_59_ladder_4 = _2812;
                frontier_phi_58_59_ladder_5 = _2810;
            }
            _2930 = frontier_phi_58_59_ladder_5;
            _2932 = frontier_phi_58_59_ladder_4;
            _2934 = frontier_phi_58_59_ladder;
            _2936 = frontier_phi_58_59_ladder_3;
            _2938 = frontier_phi_58_59_ladder_2;
            _2940 = frontier_phi_58_59_ladder_1;
        }
        float _2945 = isnan(1.0) ? _981 : (isnan(_981) ? 1.0 : min(_981, 1.0));
        _2722 = (_2945 * _2936) + _2177;
        _2724 = (_2945 * _2938) + _2179;
        _2726 = (_2945 * _2940) + _2181;
        _2728 = ((_2930 * 0.039999999105930328369140625) * _2945) + _2507;
        _2730 = ((_2932 * 0.039999999105930328369140625) * _2945) + _2509;
        _2732 = ((_2934 * 0.039999999105930328369140625) * _2945) + _2511;
    }
    else
    {
        _2722 = _2177;
        _2724 = _2179;
        _2726 = _2181;
        _2728 = _2507;
        _2730 = _2509;
        _2732 = _2511;
    }
    float _4767 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4778 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _4789 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _2749 = ((isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2722 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _981))) + ((_2728 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    float _2750 = ((isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * (_2724 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _981))) + ((_2730 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    float _2751 = ((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2726 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _981))) + ((_2732 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    uint _2752 = _277 + 6u;
    float _2760 = _918 / cbSceneParam._m0[86u].x;
    float _2761 = _919 / cbSceneParam._m0[86u].y;
    vec4 _2775 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2760, _2761, (log2((isnan(cbSceneParam._m0[77u].w) ? _840 : (isnan(_840) ? cbSceneParam._m0[77u].w : min(_840, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2777 = _2775.x;
    float _2778 = _2775.y;
    float _2779 = _2775.z;
    float _2780 = _2775.w;
    float _2872;
    float _2874;
    float _2876;
    float _2878;
    if (_840 > cbSceneParam._m0[78u].w)
    {
        float _2835 = isnan(_840) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _840 : min(cbSceneParam._m0[80u].w, _840));
        float _2836 = _2835 / _840;
        float _2847 = _2836 * _891;
        float _2848 = _892 * _2836;
        float _2849 = (-0.0) - _2848;
        float _2850 = _2836 * _893;
        float _2852 = (cbSceneParam._m0[77u].w * _2849) / _2835;
        float _2853 = _2852 + cbSceneParam._m0[79u].w;
        float _2854 = cbSceneParam._m0[79u].w - _2848;
        float _2860 = sqrt(((_2847 * _2847) + (_2848 * _2848)) + (_2850 * _2850));
        float _2863 = (1.0 - (cbSceneParam._m0[77u].w / _2835)) * _2860;
        float _2868 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2870 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3047;
        if (abs((_2849 - _2852) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3047 = ((((_2853 > 0.0) ? exp2(_2868 * _2853) : (2.0 - exp2(_2870 * _2853))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2863;
        }
        else
        {
            float _2991 = 1.0 / cbSceneParam._m0[80u].x;
            float _2992 = isnan(_2854) ? _2853 : (isnan(_2853) ? _2854 : max(_2853, _2854));
            float _2993 = isnan(_2854) ? _2853 : (isnan(_2853) ? _2854 : min(_2853, _2854));
            float _3002 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : min(_2992, 0.0));
            float _3003 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : min(_2993, 0.0));
            _3047 = ((abs(_2860 / _2849) * cbSceneParam._m0[80u].y) * ((((_3002 - _3003) * 2.0) - ((exp2(_2868 * (isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0)))) - exp2(_2868 * (isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0))))) * _2991)) - ((exp2(_2870 * _3002) - exp2(_2870 * _3003)) * _2991))) + (_2863 * cbSceneParam._m0[80u].z);
        }
        vec4 _3049 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2760, _2761, 1.0), 0.0);
        float _3058 = exp2((_3047 * (-1.44269502162933349609375)) * (1.0 - _3049.w));
        float _3059 = log2(_3058);
        float _3075 = log2(_2780);
        _2872 = (exp2(_3075 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3059 * cbSceneParam._m0[78u].x)) * _3049.x) / cbSceneParam._m0[78u].x)) + _2777;
        _2874 = (exp2(_3075 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3059 * cbSceneParam._m0[78u].y)) * _3049.y) / cbSceneParam._m0[78u].y)) + _2778;
        _2876 = (exp2(_3075 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3059 * cbSceneParam._m0[78u].z)) * _3049.z) / cbSceneParam._m0[78u].z)) + _2779;
        _2878 = _3058 * _2780;
    }
    else
    {
        _2872 = _2777;
        _2874 = _2778;
        _2876 = _2779;
        _2878 = _2780;
    }
    bool _3085;
    vec4 _2888;
    vec4 _2910;
    float _2912;
    float _2916;
    float _2917;
    float _2918;
    float _2919;
    bool _2929;
    for (;;)
    {
        _2888 = cbMatDynParam._m0[0u];
        float _2890 = roundEven(_2888.y);
        bool _2891 = _2890 == 3.0;
        float _2892 = log2(_2878);
        float _2899 = exp2(_2892 * cbSceneParam._m0[78u].x) * _2749;
        float _2900 = exp2(_2892 * cbSceneParam._m0[78u].y) * _2750;
        float _2901 = exp2(_2892 * cbSceneParam._m0[78u].z) * _2751;
        float _2908 = _907 + (-0.5);
        _2910 = cbMtdParam._m0[1u];
        _2912 = _2910.y * _2908;
        float _2915 = (_2890 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2916 = _2915 * (_2891 ? _2899 : (_2899 + (cbSceneParam._m0[72u].w * _2872)));
        _2917 = _2915 * (_2891 ? _2900 : (_2900 + (cbSceneParam._m0[72u].w * _2874)));
        _2918 = _2915 * (_2891 ? _2901 : (_2901 + (cbSceneParam._m0[72u].w * _2876)));
        _2919 = _2908 * 0.999000012874603271484375;
        _2929 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2929)
        {
            if ((cbInstanceData._m0[_277 + 7u].x + _2919) < 0.5)
            {
                _3085 = true;
                break;
            }
        }
        uint _3026 = _956 + uint(_2888.w);
        if ((cbInstanceData._m0[_3026].w < 1.0) && ((cbInstanceData._m0[_3026].w + _2919) < 0.5))
        {
            _3085 = true;
            break;
        }
        if ((_2912 + 1.0) < _2910.x)
        {
            _3085 = true;
            break;
        }
        _3085 = false;
        break;
    }
    float _3290;
    if (_3085)
    {
        discard_state = true;
        _3290 = 0.0;
    }
    else
    {
        _3290 = cbInstanceData._m0[_2752].w;
    }
    SV_Target.x = _2916;
    SV_Target.y = _2917;
    SV_Target.z = _2918;
    SV_Target.w = _3290;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2752].w;
    discard_exit();
}


