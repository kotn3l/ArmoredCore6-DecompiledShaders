#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1129;
float _3774;
float _3775;
float _3776;
float _3777;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _309 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _333 = _329.z;
    float _338 = (_329.x * 2.0) + (-1.0);
    float _340 = (_329.y * 2.0) + (-1.0);
    float _341 = dot(vec2(_338, _340), vec2(_338, _340));
    float _3786 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _347 = sqrt(1.0 - (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))));
    vec4 _364 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _366 = _364.x;
    float _367 = 1.0 - _366;
    float _376 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _379 = ((isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : min(_376, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _388 = (_379 - ((((((_366 - _367) * cbMtdParam._m0[24u].z) + _367) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _379))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3807 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _396 = (_389 * ((_309.x * cbMtdParam._m0[18u].x) - _288)) + _288;
    float _397 = (_389 * ((_309.y * cbMtdParam._m0[18u].y) - _289)) + _289;
    float _398 = (_389 * ((_309.z * cbMtdParam._m0[18u].z) - _290)) + _290;
    vec4 _411 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _413 = _411.x;
    float _414 = 1.0 - _413;
    float _443 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_413 - _414) * cbMtdParam._m0[24u].w) + _414) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3818 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _452 = ((((cbMtdParam._m0[10u].x - _396) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _444) + _396;
    float _453 = ((((cbMtdParam._m0[10u].y - _397) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _444) + _397;
    float _454 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _398)) * _444) + _398;
    vec4 _468 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _475 = (_468.x * 2.0) + (-1.0);
    float _476 = (_468.y * 2.0) + (-1.0);
    float _477 = dot(vec2(_475, _476), vec2(_475, _476));
    float _3829 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _485 = (_389 * (_468.z - _333)) + _333;
    float _488 = ((cbMtdParam._m0[23u].y - _485) * _444) + _485;
    vec4 _510 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _516 = (_510.x * 2.0) + (-1.0);
    float _517 = (_510.y * 2.0) + (-1.0);
    float _518 = dot(vec2(_516, _517), vec2(_516, _517));
    float _3840 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _535 = (((_475 - _338) + (cbMtdParam._m0[21u].x * _338)) * _389) + _338;
    float _536 = (((_476 - _340) + (cbMtdParam._m0[21u].x * _340)) * _389) + _340;
    float _537 = (_389 * (sqrt(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) - _347)) + _347;
    float _548 = (((_516 - _535) + (_535 * cbMtdParam._m0[22u].z)) * _444) + _535;
    float _549 = (((_517 - _536) + (_536 * cbMtdParam._m0[22u].z)) * _444) + _536;
    float _550 = ((sqrt(1.0 - (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) - _537) * _444) + _537;
    float _552 = cbMtdParam._m0[22u].x + _329.w;
    float _555 = fma(_550, _230 * NORMAL.x, fma(_549, _237 * TANGENT.x, (_223 * _215) * _548));
    float _558 = fma(_550, _230 * NORMAL.y, fma(_549, _237 * TANGENT.y, (_223 * _216) * _548));
    float _561 = fma(_550, _230 * NORMAL.z, fma(_549, _237 * TANGENT.z, (_223 * _217) * _548));
    float _565 = inversesqrt(dot(vec3(_555, _558, _561), vec3(_555, _558, _561)));
    float _566 = _565 * _555;
    float _567 = _565 * _558;
    float _568 = _565 * _561;
    float _3851 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _569 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _3873 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3884 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3895 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _587 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _637 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _627);
    float _638 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _627);
    float _639 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _627);
    float _643 = inversesqrt(dot(vec3(_637, _638, _639), vec3(_637, _638, _639)));
    float _644 = _637 * _643;
    float _645 = _638 * _643;
    float _646 = _639 * _643;
    vec4 _651 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _653 = _651.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _810 = sqrt(((_637 * _637) + (_638 * _638)) + (_639 * _639));
        float _816 = (cbMatDynParam._m0[5u].x * _810) + cbMatDynParam._m0[5u].y;
        float _3906 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _821 = (cbMatDynParam._m0[5u].z * _810) + cbMatDynParam._m0[5u].w;
        float _3917 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) - _817)) + _817) < ((_653 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _665 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _666 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _686 = fma(_568, cbSceneParam._m0[5u].z, fma(_567, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _566));
    float _689 = fma(_568, cbSceneParam._m0[6u].z, fma(_567, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _566));
    float _692 = fma(_568, cbSceneParam._m0[7u].z, fma(_567, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _566));
    uint _705 = _243 + 9u;
    uint _706 = _705 + uint(cbMatDynParam._m0[0u].w);
    float _712 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_706].x;
    float _713 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * cbInstanceData._m0[_706].y;
    float _714 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * cbInstanceData._m0[_706].z;
    float _3928 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _3939 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    vec4 _726 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _665, cbSceneParam._m0[86u].y * _666));
    float _730 = ((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * TEXCOORD_5.w) * _726.x;
    float _731 = dot(vec3(_566, _567, _568), vec3(_644, _645, _646));
    float _734 = _731 * 2.0;
    float _738 = (_734 * _566) - _644;
    float _739 = (_734 * _567) - _645;
    float _740 = (_734 * _568) - _646;
    float _744 = abs(dot(vec3(_644, _645, _646), vec3(_566, _567, _568)));
    float _3961 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _746 = sqrt(_569);
    float _759 = exp2((_746 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_746 * 3.0));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1128;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _853 = fma(_799, cbModelParam._m0[26u].z, fma(_795, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _791));
        float _857 = fma(_799, cbModelParam._m0[27u].z, fma(_795, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _791));
        float _861 = fma(_799, cbModelParam._m0[28u].z, fma(_795, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _791));
        float _886 = _791 + _566;
        float _887 = _795 + _567;
        float _888 = _799 + _568;
        float _898 = fma(_888, cbModelParam._m0[26u].z, fma(_887, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _886)) - _853;
        float _899 = fma(_888, cbModelParam._m0[27u].z, fma(_887, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _886)) - _857;
        float _900 = fma(_888, cbModelParam._m0[28u].z, fma(_887, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _886)) - _861;
        float _904 = inversesqrt(dot(vec3(_898, _899, _900), vec3(_898, _899, _900)));
        float _917 = ((_904 * _898) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_853 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_904 * _899) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_857 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_904 * _900) / cbModelParam._m0[34u].z) + ((((((_861 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        float _956 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_922.x + (-0.5));
        float _958 = _956 * (_922.y + (-0.5));
        float _959 = _956 * (_922.z + (-0.5));
        float _966 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_929.x + (-0.5));
        float _968 = _966 * (_929.y + (-0.5));
        float _969 = _966 * (_929.z + (-0.5));
        float _976 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_936.x + (-0.5));
        float _978 = _976 * (_936.y + (-0.5));
        float _979 = _976 * (_936.z + (-0.5));
        float _986 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_943.x + (-0.5));
        float _988 = _986 * (_943.y + (-0.5));
        float _989 = _986 * (_943.z + (-0.5));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = _957 * 0.5;
        float _994 = _967 * 0.5;
        float _995 = _977 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1010 = (dot(vec3(_566, _567, _568), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1020 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _4009 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1022 + 1.0))) + _1027) * _990;
        float _1037 = _958 * 0.5;
        float _1038 = _968 * 0.5;
        float _1039 = _978 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_566, _567, _568), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _4042 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1064 + 1.0))) + _1069) * _991;
        float _1079 = _959 * 0.5;
        float _1080 = _969 * 0.5;
        float _1081 = _979 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_566, _567, _568), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _4075 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1106 + 1.0))) + _1111) * _992;
        _1128 = _959;
        _1130 = _958;
        _1131 = _957;
        _1132 = _969;
        _1133 = _968;
        _1134 = _967;
        _1135 = _979;
        _1136 = _978;
        _1137 = _977;
        _1138 = _992;
        _1139 = _991;
        _1140 = _990;
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
    }
    else
    {
        _1128 = _1129;
        _1130 = _1129;
        _1131 = _1129;
        _1132 = _1129;
        _1133 = _1129;
        _1134 = _1129;
        _1135 = _1129;
        _1136 = _1129;
        _1137 = _1129;
        _1138 = _1129;
        _1139 = _1129;
        _1140 = _1129;
        _1141 = 0.0;
        _1142 = 0.0;
        _1143 = 0.0;
    }
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1171 = fma(_799, cbModelParam._m0[30u].z, fma(_795, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _791));
        float _1175 = fma(_799, cbModelParam._m0[31u].z, fma(_795, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _791));
        float _1179 = fma(_799, cbModelParam._m0[32u].z, fma(_795, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _791));
        float _1202 = _791 + _566;
        float _1203 = _795 + _567;
        float _1204 = _799 + _568;
        float _1214 = fma(_1204, cbModelParam._m0[30u].z, fma(_1203, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1202)) - _1171;
        float _1215 = fma(_1204, cbModelParam._m0[31u].z, fma(_1203, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1202)) - _1175;
        float _1216 = fma(_1204, cbModelParam._m0[32u].z, fma(_1203, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1202)) - _1179;
        float _1220 = inversesqrt(dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216)));
        float _1233 = ((_1220 * _1214) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1171 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1220 * _1215) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1175 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1235 = ((_1220 * _1216) / cbModelParam._m0[35u].z) + ((((((_1179 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1233, _1234, _1235), 0.0);
        float _1270 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1237.x + (-0.5));
        float _1272 = _1270 * (_1237.y + (-0.5));
        float _1273 = _1270 * (_1237.z + (-0.5));
        float _1280 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1244.x + (-0.5));
        float _1282 = _1280 * (_1244.y + (-0.5));
        float _1283 = _1280 * (_1244.z + (-0.5));
        float _1290 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1251.x + (-0.5));
        float _1292 = _1290 * (_1251.y + (-0.5));
        float _1293 = _1290 * (_1251.z + (-0.5));
        float _1300 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1258.x + (-0.5));
        float _1302 = _1300 * (_1258.y + (-0.5));
        float _1303 = _1300 * (_1258.z + (-0.5));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1307 = _1271 * 0.5;
        float _1308 = _1281 * 0.5;
        float _1309 = _1291 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_566, _567, _568), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4116 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _4127 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4138 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_1334 + 1.0))) + _1339) * _1304;
        float _1349 = _1272 * 0.5;
        float _1350 = _1282 * 0.5;
        float _1351 = _1292 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_566, _567, _568), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4171 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1376 + 1.0))) + _1381) * _1305;
        float _1391 = _1273 * 0.5;
        float _1392 = _1283 * 0.5;
        float _1393 = _1293 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_566, _567, _568), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1306 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4204 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1418 + 1.0))) + _1423) * _1306;
        _1440 = _1273;
        _1441 = _1272;
        _1442 = _1271;
        _1443 = _1283;
        _1444 = _1282;
        _1445 = _1281;
        _1446 = _1293;
        _1447 = _1292;
        _1448 = _1291;
        _1449 = _1306;
        _1450 = _1305;
        _1451 = _1304;
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1454 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
    }
    else
    {
        _1440 = _1129;
        _1441 = _1129;
        _1442 = _1129;
        _1443 = _1129;
        _1444 = _1129;
        _1445 = _1129;
        _1446 = _1129;
        _1447 = _1129;
        _1448 = _1129;
        _1449 = _1129;
        _1450 = _1129;
        _1451 = _1129;
        _1452 = 0.0;
        _1453 = 0.0;
        _1454 = 0.0;
    }
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1141)) + _1141;
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1142)) + _1142;
    float _1466 = (cbModelParam._m0[1u].x * (_1454 - _1143)) + _1143;
    float _1487 = fma(_1466, cbSceneParam._m0[89u].z, fma(_1465, cbSceneParam._m0[89u].y, _1464 * cbSceneParam._m0[89u].x));
    float _1490 = fma(_1466, cbSceneParam._m0[90u].z, fma(_1465, cbSceneParam._m0[90u].y, _1464 * cbSceneParam._m0[90u].x));
    float _1493 = fma(_1466, cbSceneParam._m0[91u].z, fma(_1465, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1464));
    float _1508 = _738 * 0.5;
    float _1509 = _739 * 0.5;
    float _1510 = _740 * 0.5;
    float _1511 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1442, _1445, _1448, _1451));
    float _1514 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1517 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1551;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1524 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1128, _1132, _1135, _1138));
        float _1528 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1130, _1133, _1136, _1139));
        float _1532 = dot(vec4(_1508, _1509, _1510, 1.0), vec4(_1131, _1134, _1137, _1140));
        float _1539 = dot(vec4(cbModelParam._m0[39u]), vec4(_1508, _1509, _1510, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1539) ? 0.0 : (isnan(0.0) ? _1539 : max(0.0, _1539))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1562;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1553 = dot(vec4(cbModelParam._m0[40u]), vec4(_1508, _1509, _1510, 1.0));
        _1562 = dot(vec3(isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1553) ? 0.0 : (isnan(0.0) ? _1553 : max(0.0, _1553))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1562 = 1.0;
    }
    float _1566 = (_1562 * cbModelParam._m0[1u].x) + (_1551 * (1.0 - cbModelParam._m0[1u].x));
    float _1576 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _569);
    float _1577 = isnan(_1576) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1576 : min(cbModelParam._m0[25u].z, _1576));
    float _1657;
    float _1659;
    float _1661;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1624 = fma(_799, cbModelParam._m0[13u].z, fma(_795, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791)) + cbModelParam._m0[13u].w;
        float _1628 = fma(_799, cbModelParam._m0[14u].z, fma(_795, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791)) + cbModelParam._m0[14u].w;
        float _1632 = fma(_799, cbModelParam._m0[15u].z, fma(_795, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791)) + cbModelParam._m0[15u].w;
        float _1635 = fma(_740, cbModelParam._m0[13u].z, fma(_739, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _738));
        float _1638 = fma(_740, cbModelParam._m0[14u].z, fma(_739, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _738));
        float _1641 = fma(_740, cbModelParam._m0[15u].z, fma(_739, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _738));
        float _1669;
        if (_1635 > 0.0)
        {
            _1669 = abs((1.0 - _1624) / _1635);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1624 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1669 = frontier_phi_17_15_ladder;
        }
        float _1839;
        if (_1638 > 0.0)
        {
            _1839 = abs((1.0 - _1628) / _1638);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1628 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1839 = frontier_phi_26_22_ladder;
        }
        float _2135;
        if (_1641 > 0.0)
        {
            _2135 = abs((1.0 - _1632) / _1641);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1632 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2135 = frontier_phi_38_33_ladder;
        }
        float _2137 = isnan(_1839) ? _1669 : (isnan(_1669) ? _1839 : min(_1669, _1839));
        float _2138 = isnan(_2135) ? _2137 : (isnan(_2137) ? _2135 : min(_2137, _2135));
        float _2142 = (_2138 * _1635) + _1624;
        float _2143 = (_2138 * _1638) + _1628;
        float _2144 = (_2138 * _1641) + _1632;
        float _2145 = _2138 * 9.9999997473787516355514526367188e-05;
        float _2147 = (-1.0) - _2145;
        float _2149 = _2145 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2144 > _2149) || ((_2144 < _2147) || ((_2143 > _2149) || ((_2143 < _2147) || ((_2142 < _2147) || (_2142 > _2149))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2289 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2144, cbModelParam._m0[9u].z, fma(_2143, cbModelParam._m0[9u].y, _2142 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2144, cbModelParam._m0[10u].z, fma(_2143, cbModelParam._m0[10u].y, _2142 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2144, cbModelParam._m0[11u].z, fma(_2143, cbModelParam._m0[11u].y, _2142 * cbModelParam._m0[11u].x))), _1577);
            frontier_phi_16_38_ladder = _2289.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2289.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2289.x * cbModelParam._m0[1u].y;
        }
        _1657 = frontier_phi_16_38_ladder_2;
        _1659 = frontier_phi_16_38_ladder_1;
        _1661 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1645 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_738, _739, _740), _1577);
        _1657 = _1645.x * cbModelParam._m0[1u].y;
        _1659 = _1645.y * cbModelParam._m0[1u].y;
        _1661 = _1645.z * cbModelParam._m0[1u].y;
    }
    float _1665 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _569);
    float _1666 = isnan(_1665) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1665 : min(cbModelParam._m0[25u].w, _1665));
    float _1755;
    float _1757;
    float _1759;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1719 = fma(_799, cbModelParam._m0[21u].z, fma(_795, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791)) + cbModelParam._m0[21u].w;
        float _1723 = fma(_799, cbModelParam._m0[22u].z, fma(_795, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791)) + cbModelParam._m0[22u].w;
        float _1727 = fma(_799, cbModelParam._m0[23u].z, fma(_795, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791)) + cbModelParam._m0[23u].w;
        float _1730 = fma(_740, cbModelParam._m0[21u].z, fma(_739, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _738));
        float _1733 = fma(_740, cbModelParam._m0[22u].z, fma(_739, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _738));
        float _1736 = fma(_740, cbModelParam._m0[23u].z, fma(_739, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _738));
        float _1844;
        if (_1730 > 0.0)
        {
            _1844 = abs((1.0 - _1719) / _1730);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1719 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1844 = frontier_phi_28_24_ladder;
        }
        float _2162;
        if (_1733 > 0.0)
        {
            _2162 = abs((1.0 - _1723) / _1733);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1723 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2162 = frontier_phi_40_35_ladder;
        }
        float _2489;
        if (_1736 > 0.0)
        {
            _2489 = abs((1.0 - _1727) / _1736);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1727 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2489 = frontier_phi_50_47_ladder;
        }
        float _2491 = isnan(_2162) ? _1844 : (isnan(_1844) ? _2162 : min(_1844, _2162));
        float _2492 = isnan(_2489) ? _2491 : (isnan(_2491) ? _2489 : min(_2491, _2489));
        float _2496 = (_2492 * _1730) + _1719;
        float _2497 = (_2492 * _1733) + _1723;
        float _2498 = (_2492 * _1736) + _1727;
        float _2499 = _2492 * 9.9999997473787516355514526367188e-05;
        float _2500 = (-1.0) - _2499;
        float _2502 = _2499 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2498 > _2502) || ((_2498 < _2500) || ((_2497 > _2502) || ((_2497 < _2500) || ((_2496 < _2500) || (_2496 > _2502))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2498, cbModelParam._m0[17u].z, fma(_2497, cbModelParam._m0[17u].y, _2496 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2498, cbModelParam._m0[18u].z, fma(_2497, cbModelParam._m0[18u].y, _2496 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2498, cbModelParam._m0[19u].z, fma(_2497, cbModelParam._m0[19u].y, _2496 * cbModelParam._m0[19u].x))), _1666);
            frontier_phi_25_50_ladder = _2616.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2616.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2616.x * cbModelParam._m0[1u].z;
        }
        _1755 = frontier_phi_25_50_ladder_2;
        _1757 = frontier_phi_25_50_ladder_1;
        _1759 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1739 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_738, _739, _740), _1666);
        _1755 = _1739.x * cbModelParam._m0[1u].z;
        _1757 = _1739.y * cbModelParam._m0[1u].z;
        _1759 = _1739.z * cbModelParam._m0[1u].z;
    }
    float _1771 = ((((1.0 - _759) * ((_746 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_759 * _746)) * _730;
    float _1772 = _1771 * ((cbModelParam._m0[1u].w * (_1755 - _1657)) + _1657);
    float _1773 = _1771 * ((cbModelParam._m0[1u].w * (_1757 - _1659)) + _1659);
    float _1774 = _1771 * ((cbModelParam._m0[1u].w * (_1759 - _1661)) + _1661);
    float _1777 = fma(_1774, cbSceneParam._m0[89u].z, fma(_1773, cbSceneParam._m0[89u].y, _1772 * cbSceneParam._m0[89u].x));
    float _1780 = fma(_1774, cbSceneParam._m0[90u].z, fma(_1773, cbSceneParam._m0[90u].y, _1772 * cbSceneParam._m0[90u].x));
    float _1783 = fma(_1774, cbSceneParam._m0[91u].z, fma(_1773, cbSceneParam._m0[91u].y, _1772 * cbSceneParam._m0[91u].x));
    float _1818 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1822 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1826 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1830 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1831 = _1818 / _1830;
    float _1832 = _1822 / _1830;
    float _1833 = _1826 / _1830;
    float _1980;
    float _1981;
    float _1982;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1860 = ((uint(_1833 > cbSceneParam._m0[59u].y) + uint(_1833 > cbSceneParam._m0[59u].x)) + uint(_1833 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1861 = _1860 + 43u;
        uint _1869 = _1860 + 44u;
        uint _1877 = _1860 + 45u;
        uint _1885 = _1860 + 46u;
        float _1896 = fma(_1830, cbSceneParam._m0[_1861].w, fma(_1826, cbSceneParam._m0[_1861].z, fma(_1822, cbSceneParam._m0[_1861].y, _1818 * cbSceneParam._m0[_1861].x)));
        float _1900 = fma(_1830, cbSceneParam._m0[_1869].w, fma(_1826, cbSceneParam._m0[_1869].z, fma(_1822, cbSceneParam._m0[_1869].y, _1818 * cbSceneParam._m0[_1869].x)));
        float _1908 = fma(_1830, cbSceneParam._m0[_1885].w, fma(_1826, cbSceneParam._m0[_1885].z, fma(_1822, cbSceneParam._m0[_1885].y, _1818 * cbSceneParam._m0[_1885].x)));
        float _1913 = cbSceneParam._m0[33u].z * _1908;
        float _1915 = cbSceneParam._m0[33u].w * _1908;
        float _1918 = fma(_1830, cbSceneParam._m0[_1877].w, fma(_1826, cbSceneParam._m0[_1877].z, fma(_1822, cbSceneParam._m0[_1877].y, _1818 * cbSceneParam._m0[_1877].x))) / _1908;
        float _1966 = (cbSceneParam._m0[33u].x - sqrt(((_1832 * _1832) + (_1831 * _1831)) + (_1833 * _1833))) * cbSceneParam._m0[33u].y;
        float _4330 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1973 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1913 + _1896) / _1908, (_1915 + _1900) / _1908), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1915 + _1896) / _1908, (_1900 - _1913) / _1908), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1896 - _1913) / _1908, (_1900 - _1915) / _1908), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1896 - _1915) / _1908, (_1913 + _1900) / _1908), _1918), 0.0)).x), vec4(0.25)));
        _1980 = 1.0 - (_1973 * cbSceneParam._m0[34u].x);
        _1981 = 1.0 - (_1973 * cbSceneParam._m0[34u].y);
        _1982 = 1.0 - (_1973 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1980 = 1.0;
        _1981 = 1.0;
        _1982 = 1.0;
    }
    float _2046;
    float _2048;
    float _2050;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2034 = fma(_1830, cbSceneParam._m0[63u].w, fma(_1826, cbSceneParam._m0[63u].z, fma(_1822, cbSceneParam._m0[63u].y, _1818 * cbSceneParam._m0[63u].x)));
        float _2035 = fma(_1830, cbSceneParam._m0[60u].w, fma(_1826, cbSceneParam._m0[60u].z, fma(_1822, cbSceneParam._m0[60u].y, _1818 * cbSceneParam._m0[60u].x))) / _2034;
        float _2036 = fma(_1830, cbSceneParam._m0[61u].w, fma(_1826, cbSceneParam._m0[61u].z, fma(_1822, cbSceneParam._m0[61u].y, _1818 * cbSceneParam._m0[61u].x))) / _2034;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2035 >= cbSceneParam._m0[64u].x) && (_2036 >= cbSceneParam._m0[64u].y)) && (_2035 <= cbSceneParam._m0[64u].z)) && (_2036 <= cbSceneParam._m0[64u].w))
        {
            float _2175 = fma(_1830, cbSceneParam._m0[62u].w, fma(_1826, cbSceneParam._m0[62u].z, fma(_1822, cbSceneParam._m0[62u].y, _1818 * cbSceneParam._m0[62u].x))) / _2034;
            float _2179 = isnan(cbSceneParam._m0[41u].w) ? _2175 : (isnan(_2175) ? cbSceneParam._m0[41u].w : max(_2175, cbSceneParam._m0[41u].w));
            float _2222 = (cbSceneParam._m0[33u].x - sqrt(((_1832 * _1832) + (_1831 * _1831)) + (_1833 * _1833))) * cbSceneParam._m0[33u].y;
            float _4346 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
            float _2229 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2035, cbSceneParam._m0[33u].w + _2036), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2035, _2036 - cbSceneParam._m0[33u].z), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2035 - cbSceneParam._m0[33u].z, _2036 - cbSceneParam._m0[33u].w), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2035 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2036), _2179), 0.0)).x), vec4(0.25)));
            float _2233 = 1.0 - (_2229 * cbSceneParam._m0[34u].x);
            float _2234 = 1.0 - (_2229 * cbSceneParam._m0[34u].y);
            float _2235 = 1.0 - (_2229 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2235) ? _1982 : (isnan(_1982) ? _2235 : min(_1982, _2235));
            frontier_phi_37_36_ladder_1 = isnan(_2234) ? _1981 : (isnan(_1981) ? _2234 : min(_1981, _2234));
            frontier_phi_37_36_ladder_2 = isnan(_2233) ? _1980 : (isnan(_1980) ? _2233 : min(_1980, _2233));
        }
        else
        {
            frontier_phi_37_36_ladder = _1982;
            frontier_phi_37_36_ladder_1 = _1981;
            frontier_phi_37_36_ladder_2 = _1980;
        }
        _2046 = frontier_phi_37_36_ladder_2;
        _2048 = frontier_phi_37_36_ladder_1;
        _2050 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2046 = _1980;
        _2048 = _1981;
        _2050 = _1982;
    }
    uvec4 _2055 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _2057 = _2055.x * 14u;
    uint _2058 = _2057 + 13u;
    float _2065 = _730 + (-1.0);
    float _2070 = (cbLight._m0[_2058].x * _2065) + 1.0;
    float _2071 = (cbLight._m0[_2058].y * _2065) + 1.0;
    float _2072 = (cbLight._m0[_2058].z * _2065) + 1.0;
    float _2073 = (cbLight._m0[_2058].w * _2065) + 1.0;
    uint _2074 = _2057 + 5u;
    float _2080 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2084 = _2057 + 4u;
    float _2094 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
    uint _2098 = _2057 | 1u;
    float _2109 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_566, _567, _568));
    float _2112 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_566, _567, _568));
    float _4382 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _4393 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2117 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.3183098733425140380859375;
    float _2119 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * 0.3183098733425140380859375;
    float _2126 = ((cbLight._m0[_2074].x * _2080) * _2119) + (((cbLight._m0[_2084].x * _2046) * _2094) * _2117);
    float _2127 = ((_2080 * cbLight._m0[_2074].y) * _2119) + (((cbLight._m0[_2084].y * _2048) * _2094) * _2117);
    float _2128 = ((_2080 * cbLight._m0[_2074].z) * _2119) + (((cbLight._m0[_2084].z * _2050) * _2094) * _2117);
    uvec4 _2132 = floatBitsToUint(cbLight._m0[_2057 + 12u]);
    bool _2134 = _2132.x == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2134)
    {
        _2236 = _2126;
        _2238 = _2127;
        _2240 = _2128;
    }
    else
    {
        uint _2244 = _2057 + 6u;
        float _2260 = (dot(vec3(cbLight._m0[_2057 + 2u].xyz), vec3(_566, _567, _568)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4404 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2263 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2236 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2126;
        _2238 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2127;
        _2240 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2128;
    }
    bool _2243 = _2132.y == 0u;
    float _2298;
    float _2300;
    float _2302;
    if (_2243)
    {
        _2298 = _2236;
        _2300 = _2238;
        _2302 = _2240;
    }
    else
    {
        uint _2460 = _2057 + 7u;
        float _2476 = (dot(vec3(cbLight._m0[_2057 + 3u].xyz), vec3(_566, _567, _568)) * 0.5) + 0.5;
        float _2477 = _2476 * _2476;
        float _4420 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2478 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2479 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2298 = (((cbLight._m0[_2460].x * 0.3183098733425140380859375) * _2478) * _2479) + _2236;
        _2300 = (((cbLight._m0[_2460].y * 0.3183098733425140380859375) * _2478) * _2479) + _2238;
        _2302 = (((cbLight._m0[_2460].z * 0.3183098733425140380859375) * _2478) * _2479) + _2240;
    }
    uint _2305 = _2057 + 8u;
    float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _569) * 0.949999988079071044921875);
    float _2319 = _2318 * _2318;
    float _2320 = cbLight._m0[_2057].x + _644;
    float _2321 = cbLight._m0[_2057].y + _645;
    float _2322 = cbLight._m0[_2057].z + _646;
    float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
    float _2327 = _2326 * _2320;
    float _2328 = _2326 * _2321;
    float _2329 = _2326 * _2322;
    float _2330 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2057].xyz));
    float _4436 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _4447 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _2334 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2335 = dot(vec3(_566, _567, _568), vec3(_2327, _2328, _2329));
    float _4458 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2339 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2327, _2328, _2329));
    float _4469 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2343 = _2319 * _2319;
    float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
    float _2358 = (exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2359 = 1.0 - _2319;
    float _2370 = (0.5 / (((_2334 * ((_2333 * _2359) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2359) + _2319) * _2333))) * _2333;
    float _4480 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2372 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
    uint _2386 = _2057 + 9u;
    float _2397 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _569) * 0.949999988079071044921875);
    float _2398 = _2397 * _2397;
    float _2399 = cbLight._m0[_2098].x + _644;
    float _2400 = cbLight._m0[_2098].y + _645;
    float _2401 = cbLight._m0[_2098].z + _646;
    float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
    float _2406 = _2405 * _2399;
    float _2407 = _2405 * _2400;
    float _2408 = _2405 * _2401;
    float _2409 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2098].xyz));
    float _4491 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2412 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _2413 = dot(vec3(_566, _567, _568), vec3(_2406, _2407, _2408));
    float _4502 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2417 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2406, _2407, _2408));
    float _4513 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2421 = _2398 * _2398;
    float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
    float _2434 = (exp2(log2(1.0 - (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2435 = 1.0 - _2398;
    float _2445 = (0.5 / (((_2334 * ((_2412 * _2435) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2435) + _2398) * _2412))) * _2412;
    float _4524 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2447 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
    float _2457 = (((_2434 * cbLight._m0[_2386].x) * _2447) * _2080) + ((((cbLight._m0[_2305].x * _2046) * _2358) * _2372) * _2094);
    float _2458 = (((_2434 * cbLight._m0[_2386].y) * _2447) * _2080) + ((((cbLight._m0[_2305].y * _2048) * _2358) * _2372) * _2094);
    float _2459 = (((_2434 * cbLight._m0[_2386].z) * _2447) * _2080) + ((((cbLight._m0[_2305].z * _2050) * _2358) * _2372) * _2094);
    float _2515;
    float _2517;
    float _2519;
    if (_2134)
    {
        _2515 = _2457;
        _2517 = _2458;
        _2519 = _2459;
    }
    else
    {
        uint _2521 = _2057 + 2u;
        uint _2525 = _2057 + 10u;
        float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2521].w)) * _569) * 0.949999988079071044921875);
        float _2540 = _2539 * _2539;
        float _2541 = cbLight._m0[_2521].x + _644;
        float _2542 = cbLight._m0[_2521].y + _645;
        float _2543 = cbLight._m0[_2521].z + _646;
        float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
        float _2548 = _2547 * _2541;
        float _2549 = _2547 * _2542;
        float _2550 = _2547 * _2543;
        float _2551 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2521].xyz));
        float _4535 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2555 = dot(vec3(_566, _567, _568), vec3(_2548, _2549, _2550));
        float _4546 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2559 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_2548, _2549, _2550));
        float _4557 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2563 = _2540 * _2540;
        float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
        float _2576 = (exp2(log2(1.0 - (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2577 = 1.0 - _2540;
        float _2587 = (0.5 / (((_2334 * ((_2554 * _2577) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2577) + _2540) * _2554))) * _2554;
        float _4568 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2589 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
        float _2590 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2515 = (((_2576 * cbLight._m0[_2525].x) * _2589) * _2590) + _2457;
        _2517 = (((_2576 * cbLight._m0[_2525].y) * _2589) * _2590) + _2458;
        _2519 = (((_2576 * cbLight._m0[_2525].z) * _2589) * _2590) + _2459;
    }
    float _2621;
    float _2623;
    float _2625;
    if (_2243)
    {
        _2621 = _2515;
        _2623 = _2517;
        _2625 = _2519;
    }
    else
    {
        uint _2632 = _2057 + 3u;
        uint _2636 = _2057 + 11u;
        float _2650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2632].w)) * _569) * 0.949999988079071044921875);
        float _2651 = _2650 * _2650;
        float _2652 = cbLight._m0[_2632].x + _644;
        float _2653 = cbLight._m0[_2632].y + _645;
        float _2654 = cbLight._m0[_2632].z + _646;
        float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
        float _2659 = _2658 * _2652;
        float _2660 = _2658 * _2653;
        float _2661 = _2658 * _2654;
        float _2662 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2632].xyz));
        float _4584 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2666 = dot(vec3(_566, _567, _568), vec3(_2659, _2660, _2661));
        float _4595 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2670 = dot(vec3(cbLight._m0[_2632].xyz), vec3(_2659, _2660, _2661));
        float _4606 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2674 = _2651 * _2651;
        float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
        float _2687 = (exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2688 = 1.0 - _2651;
        float _2698 = (0.5 / (((_2334 * ((_2665 * _2688) + _2651)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2688) + _2651) * _2665))) * _2665;
        float _4617 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2700 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
        float _2701 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2621 = (((_2687 * cbLight._m0[_2636].x) * _2700) * _2701) + _2515;
        _2623 = (((_2687 * cbLight._m0[_2636].y) * _2700) * _2701) + _2517;
        _2625 = (((_2687 * cbLight._m0[_2636].z) * _2700) * _2701) + _2519;
    }
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    if (_2055.y == 0u)
    {
        uvec4 _2722 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2723 = _2722.x;
        uint _2734 = uint((float(_2722.y) * floor(float(uint(cbSceneParam._m0[85u].y * _666) / _2723))) + floor(float(uint(cbSceneParam._m0[85u].x * _665) / _2723)));
        float _2744 = (log2(_1833 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2745 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        uint _2748 = uint(isnan(14.0) ? _2745 : (isnan(_2745) ? 14.0 : min(_2745, 14.0)));
        uvec4 _2753 = texelFetch(g_lightClusterGridBuffer, int(((_2748 << 2u) + (_2734 << 6u)) >> 2u));
        uint _2754 = _2753.x;
        uint _2755 = _2722.z;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        if (((((1u << ((_2755 >> 4u) & 15u)) + 4294967295u) & _2754) == 0u) || ((_2755 & 240u) == 0u))
        {
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
        }
        else
        {
            float _2835;
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            uint _2993 = 0u;
            uint _3002;
            bool _3003;
            for (;;)
            {
                _3002 = texelFetch(g_lightClassification, int((((_2748 << 5u) + (_2734 << 9u)) + (_2993 << 2u)) >> 2u)).x;
                _3003 = _3002 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3003)
                {
                    frontier_phi_71_pred = _2992;
                    frontier_phi_71_pred_1 = _2991;
                    frontier_phi_71_pred_2 = _2990;
                    frontier_phi_71_pred_3 = _2989;
                    frontier_phi_71_pred_4 = _2988;
                    frontier_phi_71_pred_5 = _2987;
                }
                else
                {
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    uint _3138;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2990;
                    _3136 = _2991;
                    _3137 = _2992;
                    _3138 = _3002;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    for (;;)
                    {
                        uint _3142 = uint(findLSB(_3138)) + (_2993 << 5u);
                        uint _3139 = (_3138 + 4294967295u) & _3138;
                        uint _3144 = _3142 * 48u;
                        vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3144)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 3u)).x));
                        uint _3164 = (_3142 * 48u) + 4u;
                        vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3164)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 3u)).x));
                        uint _3183 = (_3142 * 48u) + 8u;
                        vec3 _3194 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x));
                        float _3198 = _3158.x - _1831;
                        float _3199 = _3158.y - _1832;
                        float _3200 = _3158.z - _1833;
                        float _3201 = dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200));
                        float _3204 = inversesqrt(_3201);
                        float _3205 = _3204 * _3198;
                        float _3206 = _3204 * _3199;
                        float _3207 = _3204 * _3200;
                        float _3208 = dot(vec3(_686, _689, _692), vec3(_3205, _3206, _3207));
                        float _3213 = 1.0 - (_3201 * _3158.w);
                        float _4643 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3214 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3215 = sqrt(_3201) * _3177.w;
                        float _3218 = 1.39999997615814208984375 / (_3215 + 1.39999997615814208984375);
                        float _3219 = _3218 * _3218;
                        float _3222 = ((1.0 - _3219) * _3208) + _3219;
                        float _3225 = _3215 * _3215;
                        float _3229 = ((isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))) * _3214) / ((_3225 * 0.699999988079071044921875) + 1.0);
                        float _3233 = (-0.0) - _1831;
                        float _3234 = (-0.0) - _1832;
                        float _3235 = (-0.0) - _1833;
                        float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                        float _3240 = _3239 * _3233;
                        float _3241 = _3239 * _3234;
                        float _3242 = _3239 * _3235;
                        float _3249 = exp2(log2(1.0 / ((_3225 * 3.5) + 5.0)) * 0.25);
                        float _3250 = 1.0 - _746;
                        float _3257 = sqrt(1.0 - ((1.0 - (_3250 * _3250)) * (1.0 - (_3249 * _3249))));
                        float _3258 = _3257 * _3257;
                        float _3259 = _3258 * _3258;
                        float _3260 = _3240 + _3205;
                        float _3261 = _3241 + _3206;
                        float _3262 = _3242 + _3207;
                        float _3266 = inversesqrt(dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262)));
                        float _3270 = dot(vec3(_686, _689, _692), vec3(_3240, _3241, _3242));
                        float _4659 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3273 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3274 = dot(vec3(_686, _689, _692), vec3(_3266 * _3260, _3266 * _3261, _3266 * _3262));
                        float _4670 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3277 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3281 = ((_3277 * _3277) * (_3259 + (-1.0))) + 1.0;
                        float _3282 = _3218 * _3258;
                        float _3283 = _3282 * _3282;
                        float _3286 = ((1.0 - _3283) * _3208) + _3283;
                        float _4681 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3287 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3288 = 1.0 - _3258;
                        float _3298 = (0.5 / (((_3287 * ((_3273 * _3288) + _3258)) + 9.9999999392252902907785028219223e-09) + (((_3287 * _3288) + _3258) * _3273))) * _3287;
                        float _4692 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3309 = (((_3259 * 3.1415927410125732421875) * (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) / ((_3281 * _3281) * ((_3225 * 2.1991131305694580078125) + 3.141590118408203125))) * _3214;
                        _3062 = (_3229 * _3177.x) + _3135;
                        _3063 = (_3229 * _3177.y) + _3136;
                        _3064 = (_3229 * _3177.z) + _3137;
                        _3059 = (_3309 * _3194.x) + _3132;
                        _3060 = (_3309 * _3194.y) + _3133;
                        _3061 = (_3309 * _3194.z) + _3134;
                        if (_3139 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3062;
                            _3136 = _3063;
                            _3137 = _3064;
                            _3138 = _3139;
                        }
                    }
                    frontier_phi_71_pred = _3064;
                    frontier_phi_71_pred_1 = _3063;
                    frontier_phi_71_pred_2 = _3062;
                    frontier_phi_71_pred_3 = _3061;
                    frontier_phi_71_pred_4 = _3060;
                    frontier_phi_71_pred_5 = _3059;
                }
                _2845 = frontier_phi_71_pred;
                _2843 = frontier_phi_71_pred_1;
                _2841 = frontier_phi_71_pred_2;
                _2839 = frontier_phi_71_pred_3;
                _2837 = frontier_phi_71_pred_4;
                _2835 = frontier_phi_71_pred_5;
                uint _2994 = _2993 + 1u;
                if (_2994 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2987 = _2835;
                    _2988 = _2837;
                    _2989 = _2839;
                    _2990 = _2841;
                    _2991 = _2843;
                    _2992 = _2845;
                    _2993 = _2994;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
        }
        uvec4 _2848 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2849 = _2848.z;
        uint _2851 = (_2849 >> 8u) & 15u;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        if (((4294967295u << _2851) & _2754) == 0u)
        {
            _2955 = _2834;
            _2957 = _2836;
            _2959 = _2838;
            _2961 = _2840;
            _2963 = _2842;
            _2965 = _2844;
        }
        else
        {
            float _2980 = inversesqrt(dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833)));
            float _2981 = _2980 * _1831;
            float _2982 = _2980 * _1832;
            float _2983 = _2980 * _1833;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2851 < ((_2849 >> 12u) & 15u))
            {
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _3115 = _2834;
                float _3116 = _2836;
                float _3117 = _2838;
                float _3118 = _2840;
                float _3119 = _2842;
                float _3120 = _2844;
                uint _3121 = _2851;
                uint _3130;
                bool _3131;
                for (;;)
                {
                    _3130 = texelFetch(g_lightClassification, int((((_2748 << 5u) + (_2734 << 9u)) + (_3121 << 2u)) >> 2u)).x;
                    _3131 = _3130 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3131)
                    {
                        frontier_phi_82_pred = _3120;
                        frontier_phi_82_pred_1 = _3119;
                        frontier_phi_82_pred_2 = _3118;
                        frontier_phi_82_pred_3 = _3117;
                        frontier_phi_82_pred_4 = _3116;
                        frontier_phi_82_pred_5 = _3115;
                    }
                    else
                    {
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3336 = _3115;
                        float _3337 = _3116;
                        float _3338 = _3117;
                        float _3339 = _3118;
                        float _3340 = _3119;
                        float _3341 = _3120;
                        uint _3342 = _3130;
                        uint _3343;
                        vec4 _3368;
                        float _3369;
                        vec4 _3384;
                        vec3 _3396;
                        vec4 _3412;
                        vec4 _3428;
                        float _3474;
                        bool _3475;
                        for (;;)
                        {
                            uint _3353 = ((_3121 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3342));
                            _3343 = (_3342 + 4294967295u) & _3342;
                            uint _3355 = _3353 * 40u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            _3369 = _3368.w;
                            uint _3371 = (_3353 * 40u) + 4u;
                            _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            uint _3386 = (_3353 * 40u) + 8u;
                            _3396 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x));
                            uint _3399 = (_3353 * 40u) + 16u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3415 = (_3353 * 40u) + 20u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3430 = (_3353 * 40u) + 24u;
                            vec4 _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3449 = (_3353 * 40u) + 28u;
                            vec4 _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            _3474 = fma(_1833, _3462.z, fma(_1832, _3462.y, _3462.x * _1831)) + _3462.w;
                            _3475 = !((fma(_1833, _3443.z, fma(_1832, _3443.y, _3443.x * _1831)) + _3443.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3475)
                            {
                                float _3502 = _3368.x - _1831;
                                float _3503 = _3368.y - _1832;
                                float _3504 = _3368.z - _1833;
                                float _3505 = dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504));
                                float _3508 = inversesqrt(_3505);
                                float _3509 = _3508 * _3502;
                                float _3510 = _3508 * _3503;
                                float _3511 = _3508 * _3504;
                                float _3515 = 1.0 - (_3505 / (_3369 * _3369));
                                float _4703 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3516 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3520 = sqrt(_3505) * _3384.w;
                                float _3522 = 1.39999997615814208984375 / (_3520 + 1.39999997615814208984375);
                                float _3523 = _3522 * _3522;
                                float _3526 = ((1.0 - _3523) * dot(vec3(_3509, _3510, _3511), vec3(_686, _689, _692))) + _3523;
                                float _3529 = _3520 * _3520;
                                float _3533 = (fma(_1833, _3412.z, fma(_1832, _3412.y, _3412.x * _1831)) + _3412.w) / _3474;
                                float _3534 = (fma(_1833, _3428.z, fma(_1832, _3428.y, _3428.x * _1831)) + _3428.w) / _3474;
                                float _3538 = 1.0 - dot(vec2(_3533, _3534), vec2(_3533, _3534));
                                float _4719 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3539 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3540 = _3539 * (((isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0))) * _3516) / ((_3529 * 0.699999988079071044921875) + 1.0));
                                float _3552 = exp2(log2(1.0 / ((_3529 * 3.5) + 5.0)) * 0.25);
                                float _3553 = 1.0 - _746;
                                float _3560 = sqrt(1.0 - ((1.0 - (_3553 * _3553)) * (1.0 - (_3552 * _3552))));
                                float _3561 = _3560 * _3560;
                                float _3562 = _3561 * _3561;
                                float _3563 = _3509 - _2981;
                                float _3564 = _3510 - _2982;
                                float _3565 = _3511 - _2983;
                                float _3569 = inversesqrt(dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565)));
                                float _3573 = dot(vec3(_686, _689, _692), vec3((-0.0) - _2981, (-0.0) - _2982, (-0.0) - _2983));
                                float _4730 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3576 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3577 = dot(vec3(_686, _689, _692), vec3(_3569 * _3563, _3569 * _3564, _3569 * _3565));
                                float _4741 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3580 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3584 = ((_3580 * _3580) * (_3562 + (-1.0))) + 1.0;
                                float _3585 = _3522 * _3561;
                                float _3586 = _3585 * _3585;
                                float _3592 = ((1.0 - _3586) * dot(vec3(_686, _689, _692), vec3(_3509, _3510, _3511))) + _3586;
                                float _4752 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3594 = 1.0 - _3561;
                                float _3604 = (0.5 / (((_3593 * ((_3576 * _3594) + _3561)) + 9.9999999392252902907785028219223e-09) + (((_3593 * _3594) + _3561) * _3576))) * _3593;
                                float _4763 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3614 = (_3539 * _3516) * (((_3562 * 3.1415927410125732421875) * (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) / ((_3584 * _3584) * ((_3529 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3540 * _3384.z;
                                frontier_phi_88_pred_1 = _3540 * _3384.y;
                                frontier_phi_88_pred_2 = _3540 * _3384.x;
                                frontier_phi_88_pred_3 = _3614 * _3396.z;
                                frontier_phi_88_pred_4 = _3614 * _3396.y;
                                frontier_phi_88_pred_5 = _3614 * _3396.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3623 = frontier_phi_88_pred;
                            _3622 = frontier_phi_88_pred_1;
                            _3621 = frontier_phi_88_pred_2;
                            _3620 = frontier_phi_88_pred_3;
                            _3619 = frontier_phi_88_pred_4;
                            _3618 = frontier_phi_88_pred_5;
                            _3326 = _3621 + _3339;
                            _3327 = _3622 + _3340;
                            _3328 = _3623 + _3341;
                            _3323 = _3618 + _3336;
                            _3324 = _3619 + _3337;
                            _3325 = _3620 + _3338;
                            if (_3343 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3343;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3328;
                        frontier_phi_82_pred_1 = _3327;
                        frontier_phi_82_pred_2 = _3326;
                        frontier_phi_82_pred_3 = _3325;
                        frontier_phi_82_pred_4 = _3324;
                        frontier_phi_82_pred_5 = _3323;
                    }
                    _2966 = frontier_phi_82_pred;
                    _2964 = frontier_phi_82_pred_1;
                    _2962 = frontier_phi_82_pred_2;
                    _2960 = frontier_phi_82_pred_3;
                    _2958 = frontier_phi_82_pred_4;
                    _2956 = frontier_phi_82_pred_5;
                    uint _3122 = _3121 + 1u;
                    if (_3122 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3115 = _2956;
                        _3116 = _2958;
                        _3117 = _2960;
                        _3118 = _2962;
                        _3119 = _2964;
                        _3120 = _2966;
                        _3121 = _3122;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2962;
                frontier_phi_63_64_ladder_1 = _2966;
                frontier_phi_63_64_ladder_2 = _2964;
                frontier_phi_63_64_ladder_3 = _2960;
                frontier_phi_63_64_ladder_4 = _2958;
                frontier_phi_63_64_ladder_5 = _2956;
            }
            else
            {
                frontier_phi_63_64_ladder = _2840;
                frontier_phi_63_64_ladder_1 = _2844;
                frontier_phi_63_64_ladder_2 = _2842;
                frontier_phi_63_64_ladder_3 = _2838;
                frontier_phi_63_64_ladder_4 = _2836;
                frontier_phi_63_64_ladder_5 = _2834;
            }
            _2955 = frontier_phi_63_64_ladder_5;
            _2957 = frontier_phi_63_64_ladder_4;
            _2959 = frontier_phi_63_64_ladder_3;
            _2961 = frontier_phi_63_64_ladder;
            _2963 = frontier_phi_63_64_ladder_2;
            _2965 = frontier_phi_63_64_ladder_1;
        }
        float _2970 = isnan(1.0) ? _730 : (isnan(_730) ? 1.0 : min(_730, 1.0));
        _2767 = (_2970 * _2961) + _2298;
        _2769 = (_2970 * _2963) + _2300;
        _2771 = (_2970 * _2965) + _2302;
        _2773 = ((_2955 * 0.039999999105930328369140625) * _2970) + _2621;
        _2775 = ((_2957 * 0.039999999105930328369140625) * _2970) + _2623;
        _2777 = ((_2959 * 0.039999999105930328369140625) * _2970) + _2625;
    }
    else
    {
        _2767 = _2298;
        _2769 = _2300;
        _2771 = _2302;
        _2773 = _2621;
        _2775 = _2623;
        _2777 = _2625;
    }
    float _4779 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _4790 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4801 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _2794 = ((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2767 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _730))) + ((_2773 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1566)) * cbPerFrame._m0[3u].x);
    float _2795 = ((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2769 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _730))) + ((_2775 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1566)) * cbPerFrame._m0[3u].x);
    float _2796 = ((isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2771 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _730))) + ((_2777 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1566)) * cbPerFrame._m0[3u].x);
    uint _2797 = _243 + 6u;
    float _2805 = _665 / cbSceneParam._m0[86u].x;
    float _2806 = _666 / cbSceneParam._m0[86u].y;
    vec4 _2820 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2805, _2806, (log2((isnan(cbSceneParam._m0[77u].w) ? _587 : (isnan(_587) ? cbSceneParam._m0[77u].w : min(_587, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2822 = _2820.x;
    float _2823 = _2820.y;
    float _2824 = _2820.z;
    float _2825 = _2820.w;
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    if (_587 > cbSceneParam._m0[78u].w)
    {
        float _2859 = isnan(_587) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _587 : min(cbSceneParam._m0[80u].w, _587));
        float _2860 = _2859 / _587;
        float _2871 = _2860 * _637;
        float _2872 = _638 * _2860;
        float _2873 = (-0.0) - _2872;
        float _2875 = _2860 * _639;
        float _2877 = (cbSceneParam._m0[77u].w * _2873) / _2859;
        float _2878 = _2877 + cbSceneParam._m0[79u].w;
        float _2879 = cbSceneParam._m0[79u].w - _2872;
        float _2885 = sqrt(((_2871 * _2871) + (_2872 * _2872)) + (_2875 * _2875));
        float _2888 = (1.0 - (cbSceneParam._m0[77u].w / _2859)) * _2885;
        float _2893 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2895 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3072;
        if (abs((_2873 - _2877) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3072 = ((((_2878 > 0.0) ? exp2(_2893 * _2878) : (2.0 - exp2(_2895 * _2878))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2888;
        }
        else
        {
            float _3016 = 1.0 / cbSceneParam._m0[80u].x;
            float _3017 = isnan(_2879) ? _2878 : (isnan(_2878) ? _2879 : max(_2878, _2879));
            float _3018 = isnan(_2879) ? _2878 : (isnan(_2878) ? _2879 : min(_2878, _2879));
            float _3027 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : min(_3017, 0.0));
            float _3028 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : min(_3018, 0.0));
            _3072 = ((abs(_2885 / _2873) * cbSceneParam._m0[80u].y) * ((((_3027 - _3028) * 2.0) - ((exp2(_2893 * (isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0)))) - exp2(_2893 * (isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))))) * _3016)) - ((exp2(_2895 * _3027) - exp2(_2895 * _3028)) * _3016))) + (_2888 * cbSceneParam._m0[80u].z);
        }
        vec4 _3074 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2805, _2806, 1.0), 0.0);
        float _3083 = exp2((_3072 * (-1.44269502162933349609375)) * (1.0 - _3074.w));
        float _3084 = log2(_3083);
        float _3100 = log2(_2825);
        _2897 = (exp2(_3100 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].x)) * _3074.x) / cbSceneParam._m0[78u].x)) + _2822;
        _2899 = (exp2(_3100 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].y)) * _3074.y) / cbSceneParam._m0[78u].y)) + _2823;
        _2901 = (exp2(_3100 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3084 * cbSceneParam._m0[78u].z)) * _3074.z) / cbSceneParam._m0[78u].z)) + _2824;
        _2903 = _3083 * _2825;
    }
    else
    {
        _2897 = _2822;
        _2899 = _2823;
        _2901 = _2824;
        _2903 = _2825;
    }
    bool _3110;
    vec4 _2913;
    vec4 _2935;
    float _2937;
    float _2941;
    float _2942;
    float _2943;
    float _2944;
    bool _2954;
    for (;;)
    {
        _2913 = cbMatDynParam._m0[0u];
        float _2915 = roundEven(_2913.y);
        bool _2916 = _2915 == 3.0;
        float _2917 = log2(_2903);
        float _2924 = exp2(_2917 * cbSceneParam._m0[78u].x) * _2794;
        float _2925 = exp2(_2917 * cbSceneParam._m0[78u].y) * _2795;
        float _2926 = exp2(_2917 * cbSceneParam._m0[78u].z) * _2796;
        float _2933 = _653 + (-0.5);
        _2935 = cbMtdParam._m0[1u];
        _2937 = _2935.y * _2933;
        float _2940 = (_2915 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2941 = _2940 * (_2916 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2897)));
        _2942 = _2940 * (_2916 ? _2925 : (_2925 + (cbSceneParam._m0[72u].w * _2899)));
        _2943 = _2940 * (_2916 ? _2926 : (_2926 + (cbSceneParam._m0[72u].w * _2901)));
        _2944 = _2933 * 0.999000012874603271484375;
        _2954 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2954)
        {
            if ((cbInstanceData._m0[_243 + 7u].x + _2944) < 0.5)
            {
                _3110 = true;
                break;
            }
        }
        uint _3051 = _705 + uint(_2913.w);
        if ((cbInstanceData._m0[_3051].w < 1.0) && ((cbInstanceData._m0[_3051].w + _2944) < 0.5))
        {
            _3110 = true;
            break;
        }
        if ((_2937 + 1.0) < _2935.x)
        {
            _3110 = true;
            break;
        }
        _3110 = false;
        break;
    }
    float _3314;
    if (_3110)
    {
        discard_state = true;
        _3314 = 0.0;
    }
    else
    {
        _3314 = cbInstanceData._m0[_2797].w;
    }
    SV_Target.x = _2941;
    SV_Target.y = _2942;
    SV_Target.z = _2943;
    SV_Target.w = _3314;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2797].w;
    discard_exit();
}


