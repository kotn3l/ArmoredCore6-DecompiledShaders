#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1228;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3532 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3543 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3554 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _322 = _317.x * cbMtdParam._m0[11u].x;
    float _323 = _317.y * cbMtdParam._m0[11u].y;
    float _324 = _317.z * cbMtdParam._m0[11u].z;
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _279) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _280) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _391 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _408 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_381 - _391) * cbMtdParam._m0[24u].x) + _391) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3565 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _416 = (_409 * ((_343.x * cbMtdParam._m0[12u].x) - _322)) + _322;
    float _417 = (_409 * ((_343.y * cbMtdParam._m0[12u].y) - _323)) + _323;
    float _418 = (_409 * ((_343.z * cbMtdParam._m0[12u].z) - _324)) + _324;
    float _422 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _416;
    float _425 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _417;
    float _428 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _418;
    float _435 = ((_416 - _422) * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) + _422;
    float _436 = ((_417 - _425) * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) + _425;
    float _437 = ((_418 - _428) * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) + _428;
    vec4 _456 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _279) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _280) + cbTextureTilingScale._m0[14u].w));
    vec4 _476 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _279) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _280) + cbTextureTilingScale._m0[4u].w));
    vec4 _520 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _522 = _520.x;
    float _523 = _520.y;
    float _524 = _520.z;
    float _533 = ((_503.z - _524) * _409) + _524;
    float _536 = ((((_503.x - _522) * _409) + _522) * 2.0) + (-1.0);
    float _537 = ((((_503.y - _523) * _409) + _523) * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3576 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _543 = sqrt(1.0 - (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))));
    vec4 _563 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _575 = (_536 + ((((_476.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_563.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _576 = (_537 + ((((_476.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_563.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _579 = fma(_543, _227, fma(_576, _234, _575 * _220));
    float _582 = fma(_543, _228, fma(_576, _235, _575 * _221));
    float _585 = fma(_543, _229, fma(_576, _236, _575 * _222));
    float _589 = inversesqrt(dot(vec3(_579, _582, _585), vec3(_579, _582, _585)));
    vec4 _618 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _279) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _280) + cbTextureTilingScale._m0[11u].w));
    float _620 = _618.x;
    float _621 = 1.0 - _620;
    float _627 = (cbMtdParam._m0[19u].x + dot(vec4(_589 * _579, _589 * _582, _589 * _585, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_620 - _621) * cbMtdParam._m0[24u].z) + _621) * cbMtdParam._m0[21u].z);
    float _3587 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _635 = (_628 * ((_456.x * cbMtdParam._m0[18u].x) - _435)) + _435;
    float _636 = (_628 * ((_456.y * cbMtdParam._m0[18u].y) - _436)) + _436;
    float _637 = (_628 * ((_456.z * cbMtdParam._m0[18u].z) - _437)) + _437;
    float _642 = (((_476.z - _533) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _533;
    float _646 = ((_563.z - _642) * cbMtdParam._m0[19u].w) + _642;
    vec4 _659 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _279) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _280) + cbTextureTilingScale._m0[15u].w));
    float _666 = (_659.x * 2.0) + (-1.0);
    float _667 = (_659.y * 2.0) + (-1.0);
    float _668 = dot(vec2(_666, _667), vec2(_666, _667));
    float _3598 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _676 = ((_659.z - _646) * _628) + _646;
    float _686 = ((sqrt(1.0 - (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) - _543) * _628) + _543;
    float _689 = (((_666 - _575) * _628) + _575) + (cbMtdParam._m0[21u].x * _575);
    float _690 = (((_667 - _576) * _628) + _576) + (cbMtdParam._m0[21u].x * _576);
    float _692 = cbMtdParam._m0[22u].x + _563.w;
    float _695 = fma(_686, _227, fma(_690, _234, _689 * _220));
    float _698 = fma(_686, _228, fma(_690, _235, _689 * _221));
    float _701 = fma(_686, _229, fma(_690, _236, _689 * _222));
    float _705 = inversesqrt(dot(vec3(_695, _698, _701), vec3(_695, _698, _701)));
    float _706 = _705 * _695;
    float _707 = _705 * _698;
    float _708 = _705 * _701;
    float _3609 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _709 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _3620 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _3631 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3642 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _3653 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _727 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _779 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _769);
    float _780 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _769);
    float _781 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _769);
    float _785 = inversesqrt(dot(vec3(_779, _780, _781), vec3(_779, _780, _781)));
    float _786 = _779 * _785;
    float _787 = _780 * _785;
    float _788 = _781 * _785;
    float _794 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _795 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _813 = fma(_708, cbSceneParam._m0[5u].z, fma(_707, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _706));
    float _816 = fma(_708, cbSceneParam._m0[6u].z, fma(_707, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _706));
    float _819 = fma(_708, cbSceneParam._m0[7u].z, fma(_707, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _706));
    uint _833 = (_260 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _839 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * cbInstanceData._m0[_833].x;
    float _840 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) * cbInstanceData._m0[_833].y;
    float _841 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) * cbInstanceData._m0[_833].z;
    float _3664 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    vec4 _853 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _794, cbSceneParam._m0[86u].y * _795));
    float _857 = ((isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * TEXCOORD_5.w) * _853.x;
    float _858 = dot(vec3(_706, _707, _708), vec3(_786, _787, _788));
    float _861 = _858 * 2.0;
    float _865 = (_861 * _706) - _786;
    float _866 = (_861 * _707) - _787;
    float _867 = (_861 * _708) - _788;
    float _871 = abs(dot(vec3(_786, _787, _788), vec3(_706, _707, _708)));
    float _3697 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _873 = sqrt(_709);
    float _886 = exp2((_873 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_873 * 3.0));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1227;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _952 = fma(_926, cbModelParam._m0[26u].z, fma(_922, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _918));
        float _956 = fma(_926, cbModelParam._m0[27u].z, fma(_922, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _918));
        float _960 = fma(_926, cbModelParam._m0[28u].z, fma(_922, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _918));
        float _985 = _918 + _706;
        float _986 = _922 + _707;
        float _987 = _926 + _708;
        float _997 = fma(_987, cbModelParam._m0[26u].z, fma(_986, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _985)) - _952;
        float _998 = fma(_987, cbModelParam._m0[27u].z, fma(_986, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _985)) - _956;
        float _999 = fma(_987, cbModelParam._m0[28u].z, fma(_986, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _985)) - _960;
        float _1003 = inversesqrt(dot(vec3(_997, _998, _999), vec3(_997, _998, _999)));
        float _1016 = ((_1003 * _997) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_952 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1003 * _998) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_956 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1003 * _999) / cbModelParam._m0[34u].z) + ((((((_960 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        float _1055 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1021.x + (-0.5));
        float _1057 = _1055 * (_1021.y + (-0.5));
        float _1058 = _1055 * (_1021.z + (-0.5));
        float _1065 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1028.x + (-0.5));
        float _1067 = _1065 * (_1028.y + (-0.5));
        float _1068 = _1065 * (_1028.z + (-0.5));
        float _1075 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1035.x + (-0.5));
        float _1077 = _1075 * (_1035.y + (-0.5));
        float _1078 = _1075 * (_1035.z + (-0.5));
        float _1085 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1042.x + (-0.5));
        float _1087 = _1085 * (_1042.y + (-0.5));
        float _1088 = _1085 * (_1042.z + (-0.5));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = _1056 * 0.5;
        float _1093 = _1066 * 0.5;
        float _1094 = _1076 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1109 = (dot(vec3(_706, _707, _708), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1119 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3745 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1121 + 1.0))) + _1126) * _1089;
        float _1136 = _1057 * 0.5;
        float _1137 = _1067 * 0.5;
        float _1138 = _1077 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_706, _707, _708), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3778 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1163 + 1.0))) + _1168) * _1090;
        float _1178 = _1058 * 0.5;
        float _1179 = _1068 * 0.5;
        float _1180 = _1078 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_706, _707, _708), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3811 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1205 + 1.0))) + _1210) * _1091;
        _1227 = _1058;
        _1229 = _1057;
        _1230 = _1056;
        _1231 = _1068;
        _1232 = _1067;
        _1233 = _1066;
        _1234 = _1078;
        _1235 = _1077;
        _1236 = _1076;
        _1237 = _1091;
        _1238 = _1090;
        _1239 = _1089;
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1241 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
    }
    else
    {
        _1227 = _1228;
        _1229 = _1228;
        _1230 = _1228;
        _1231 = _1228;
        _1232 = _1228;
        _1233 = _1228;
        _1234 = _1228;
        _1235 = _1228;
        _1236 = _1228;
        _1237 = _1228;
        _1238 = _1228;
        _1239 = _1228;
        _1240 = 0.0;
        _1241 = 0.0;
        _1242 = 0.0;
    }
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1267 = fma(_926, cbModelParam._m0[30u].z, fma(_922, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _918));
        float _1271 = fma(_926, cbModelParam._m0[31u].z, fma(_922, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _918));
        float _1275 = fma(_926, cbModelParam._m0[32u].z, fma(_922, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _918));
        float _1298 = _918 + _706;
        float _1299 = _922 + _707;
        float _1300 = _926 + _708;
        float _1310 = fma(_1300, cbModelParam._m0[30u].z, fma(_1299, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1298)) - _1267;
        float _1311 = fma(_1300, cbModelParam._m0[31u].z, fma(_1299, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1298)) - _1271;
        float _1312 = fma(_1300, cbModelParam._m0[32u].z, fma(_1299, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1298)) - _1275;
        float _1316 = inversesqrt(dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312)));
        float _1329 = ((_1316 * _1310) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1267 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1330 = ((_1316 * _1311) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1271 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1331 = ((_1316 * _1312) / cbModelParam._m0[35u].z) + ((((((_1275 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1329, _1330, _1331), 0.0);
        float _1366 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1333.x + (-0.5));
        float _1368 = _1366 * (_1333.y + (-0.5));
        float _1369 = _1366 * (_1333.z + (-0.5));
        float _1376 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1340.x + (-0.5));
        float _1378 = _1376 * (_1340.y + (-0.5));
        float _1379 = _1376 * (_1340.z + (-0.5));
        float _1386 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1347.x + (-0.5));
        float _1388 = _1386 * (_1347.y + (-0.5));
        float _1389 = _1386 * (_1347.z + (-0.5));
        float _1396 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1354.x + (-0.5));
        float _1398 = _1396 * (_1354.y + (-0.5));
        float _1399 = _1396 * (_1354.z + (-0.5));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = _1367 * 0.5;
        float _1404 = _1377 * 0.5;
        float _1405 = _1387 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_706, _707, _708), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3874 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1430 + 1.0))) + _1435) * _1400;
        float _1445 = _1368 * 0.5;
        float _1446 = _1378 * 0.5;
        float _1447 = _1388 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_706, _707, _708), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _3907 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1472 + 1.0))) + _1477) * _1401;
        float _1487 = _1369 * 0.5;
        float _1488 = _1379 * 0.5;
        float _1489 = _1389 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_706, _707, _708), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _3940 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1514 + 1.0))) + _1519) * _1402;
        _1536 = _1369;
        _1537 = _1368;
        _1538 = _1367;
        _1539 = _1379;
        _1540 = _1378;
        _1541 = _1377;
        _1542 = _1389;
        _1543 = _1388;
        _1544 = _1387;
        _1545 = _1402;
        _1546 = _1401;
        _1547 = _1400;
        _1548 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1549 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
        _1550 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
    }
    else
    {
        _1536 = _1228;
        _1537 = _1228;
        _1538 = _1228;
        _1539 = _1228;
        _1540 = _1228;
        _1541 = _1228;
        _1542 = _1228;
        _1543 = _1228;
        _1544 = _1228;
        _1545 = _1228;
        _1546 = _1228;
        _1547 = _1228;
        _1548 = 0.0;
        _1549 = 0.0;
        _1550 = 0.0;
    }
    float _1560 = (cbModelParam._m0[1u].x * (_1548 - _1240)) + _1240;
    float _1561 = (cbModelParam._m0[1u].x * (_1549 - _1241)) + _1241;
    float _1562 = (cbModelParam._m0[1u].x * (_1550 - _1242)) + _1242;
    float _1583 = fma(_1562, cbSceneParam._m0[89u].z, fma(_1561, cbSceneParam._m0[89u].y, _1560 * cbSceneParam._m0[89u].x));
    float _1586 = fma(_1562, cbSceneParam._m0[90u].z, fma(_1561, cbSceneParam._m0[90u].y, _1560 * cbSceneParam._m0[90u].x));
    float _1589 = fma(_1562, cbSceneParam._m0[91u].z, fma(_1561, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1560));
    float _1604 = _865 * 0.5;
    float _1605 = _866 * 0.5;
    float _1606 = _867 * 0.5;
    float _1607 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1538, _1541, _1544, _1547));
    float _1610 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1537, _1540, _1543, _1546));
    float _1613 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1536, _1539, _1542, _1545));
    float _1647;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1620 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1227, _1231, _1234, _1237));
        float _1624 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1229, _1232, _1235, _1238));
        float _1628 = dot(vec4(_1604, _1605, _1606, 1.0), vec4(_1230, _1233, _1236, _1239));
        float _1635 = dot(vec4(cbModelParam._m0[39u]), vec4(_1604, _1605, _1606, 1.0));
        _1647 = dot(vec3(isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1635) ? 0.0 : (isnan(0.0) ? _1635 : max(0.0, _1635))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1647 = 1.0;
    }
    float _1658;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1649 = dot(vec4(cbModelParam._m0[40u]), vec4(_1604, _1605, _1606, 1.0));
        _1658 = dot(vec3(isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1649) ? 0.0 : (isnan(0.0) ? _1649 : max(0.0, _1649))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1658 = 1.0;
    }
    float _1662 = (_1658 * cbModelParam._m0[1u].x) + (_1647 * (1.0 - cbModelParam._m0[1u].x));
    float _1672 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _709);
    float _1673 = isnan(_1672) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1672 : min(cbModelParam._m0[25u].z, _1672));
    float _1753;
    float _1755;
    float _1757;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1720 = fma(_926, cbModelParam._m0[13u].z, fma(_922, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _918)) + cbModelParam._m0[13u].w;
        float _1724 = fma(_926, cbModelParam._m0[14u].z, fma(_922, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _918)) + cbModelParam._m0[14u].w;
        float _1728 = fma(_926, cbModelParam._m0[15u].z, fma(_922, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _918)) + cbModelParam._m0[15u].w;
        float _1731 = fma(_867, cbModelParam._m0[13u].z, fma(_866, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _865));
        float _1734 = fma(_867, cbModelParam._m0[14u].z, fma(_866, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _865));
        float _1737 = fma(_867, cbModelParam._m0[15u].z, fma(_866, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _865));
        float _1765;
        if (_1731 > 0.0)
        {
            _1765 = abs((1.0 - _1720) / _1731);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1720 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1765 = frontier_phi_14_12_ladder;
        }
        float _1965;
        if (_1734 > 0.0)
        {
            _1965 = abs((1.0 - _1724) / _1734);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1724 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1965 = frontier_phi_23_19_ladder;
        }
        float _2208;
        if (_1737 > 0.0)
        {
            _2208 = abs((1.0 - _1728) / _1737);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1728 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2208 = frontier_phi_35_30_ladder;
        }
        float _2210 = isnan(_1965) ? _1765 : (isnan(_1765) ? _1965 : min(_1765, _1965));
        float _2211 = isnan(_2208) ? _2210 : (isnan(_2210) ? _2208 : min(_2210, _2208));
        float _2215 = (_2211 * _1731) + _1720;
        float _2216 = (_2211 * _1734) + _1724;
        float _2217 = (_2211 * _1737) + _1728;
        float _2218 = _2211 * 9.9999997473787516355514526367188e-05;
        float _2220 = (-1.0) - _2218;
        float _2222 = _2218 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2217 > _2222) || ((_2217 < _2220) || ((_2216 > _2222) || ((_2216 < _2220) || ((_2215 < _2220) || (_2215 > _2222))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2341 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2217, cbModelParam._m0[9u].z, fma(_2216, cbModelParam._m0[9u].y, _2215 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2217, cbModelParam._m0[10u].z, fma(_2216, cbModelParam._m0[10u].y, _2215 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2217, cbModelParam._m0[11u].z, fma(_2216, cbModelParam._m0[11u].y, _2215 * cbModelParam._m0[11u].x))), _1673);
            frontier_phi_13_35_ladder = _2341.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2341.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2341.x * cbModelParam._m0[1u].y;
        }
        _1753 = frontier_phi_13_35_ladder_2;
        _1755 = frontier_phi_13_35_ladder_1;
        _1757 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1741 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_865, _866, _867), _1673);
        _1753 = _1741.x * cbModelParam._m0[1u].y;
        _1755 = _1741.y * cbModelParam._m0[1u].y;
        _1757 = _1741.z * cbModelParam._m0[1u].y;
    }
    float _1761 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _709);
    float _1762 = isnan(_1761) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1761 : min(cbModelParam._m0[25u].w, _1761));
    float _1851;
    float _1853;
    float _1855;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1815 = fma(_926, cbModelParam._m0[21u].z, fma(_922, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _918)) + cbModelParam._m0[21u].w;
        float _1819 = fma(_926, cbModelParam._m0[22u].z, fma(_922, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _918)) + cbModelParam._m0[22u].w;
        float _1823 = fma(_926, cbModelParam._m0[23u].z, fma(_922, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _918)) + cbModelParam._m0[23u].w;
        float _1826 = fma(_867, cbModelParam._m0[21u].z, fma(_866, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _865));
        float _1829 = fma(_867, cbModelParam._m0[22u].z, fma(_866, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _865));
        float _1832 = fma(_867, cbModelParam._m0[23u].z, fma(_866, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _865));
        float _1970;
        if (_1826 > 0.0)
        {
            _1970 = abs((1.0 - _1815) / _1826);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1815 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1970 = frontier_phi_25_21_ladder;
        }
        float _2235;
        if (_1829 > 0.0)
        {
            _2235 = abs((1.0 - _1819) / _1829);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1819 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2235 = frontier_phi_37_32_ladder;
        }
        float _2440;
        if (_1832 > 0.0)
        {
            _2440 = abs((1.0 - _1823) / _1832);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1823 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2440 = frontier_phi_46_43_ladder;
        }
        float _2442 = isnan(_2235) ? _1970 : (isnan(_1970) ? _2235 : min(_1970, _2235));
        float _2443 = isnan(_2440) ? _2442 : (isnan(_2442) ? _2440 : min(_2442, _2440));
        float _2447 = (_2443 * _1826) + _1815;
        float _2448 = (_2443 * _1829) + _1819;
        float _2449 = (_2443 * _1832) + _1823;
        float _2450 = _2443 * 9.9999997473787516355514526367188e-05;
        float _2451 = (-1.0) - _2450;
        float _2453 = _2450 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2449 > _2453) || ((_2449 < _2451) || ((_2448 > _2453) || ((_2448 < _2451) || ((_2447 < _2451) || (_2447 > _2453))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2449, cbModelParam._m0[17u].z, fma(_2448, cbModelParam._m0[17u].y, _2447 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2449, cbModelParam._m0[18u].z, fma(_2448, cbModelParam._m0[18u].y, _2447 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2449, cbModelParam._m0[19u].z, fma(_2448, cbModelParam._m0[19u].y, _2447 * cbModelParam._m0[19u].x))), _1762);
            frontier_phi_22_46_ladder = _2648.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2648.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2648.x * cbModelParam._m0[1u].z;
        }
        _1851 = frontier_phi_22_46_ladder_2;
        _1853 = frontier_phi_22_46_ladder_1;
        _1855 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1835 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_865, _866, _867), _1762);
        _1851 = _1835.x * cbModelParam._m0[1u].z;
        _1853 = _1835.y * cbModelParam._m0[1u].z;
        _1855 = _1835.z * cbModelParam._m0[1u].z;
    }
    float _1867 = ((((1.0 - _886) * ((_873 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_886 * _873)) * _857;
    float _1868 = _1867 * ((cbModelParam._m0[1u].w * (_1851 - _1753)) + _1753);
    float _1869 = _1867 * ((cbModelParam._m0[1u].w * (_1853 - _1755)) + _1755);
    float _1870 = _1867 * ((cbModelParam._m0[1u].w * (_1855 - _1757)) + _1757);
    float _1873 = fma(_1870, cbSceneParam._m0[89u].z, fma(_1869, cbSceneParam._m0[89u].y, _1868 * cbSceneParam._m0[89u].x));
    float _1876 = fma(_1870, cbSceneParam._m0[90u].z, fma(_1869, cbSceneParam._m0[90u].y, _1868 * cbSceneParam._m0[90u].x));
    float _1879 = fma(_1870, cbSceneParam._m0[91u].z, fma(_1869, cbSceneParam._m0[91u].y, _1868 * cbSceneParam._m0[91u].x));
    uvec4 _1889 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _1891 = _1889.x * 14u;
    uint _1892 = _1891 + 13u;
    float _1899 = _857 + (-1.0);
    float _1904 = (cbLight._m0[_1892].x * _1899) + 1.0;
    float _1905 = (cbLight._m0[_1892].y * _1899) + 1.0;
    float _1906 = (cbLight._m0[_1892].z * _1899) + 1.0;
    float _1907 = (cbLight._m0[_1892].w * _1899) + 1.0;
    uint _1908 = _1891 + 5u;
    float _1914 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
    uint _1918 = _1891 + 4u;
    float _1924 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
    uint _1928 = _1891 | 1u;
    float _1939 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_706, _707, _708));
    float _1942 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_706, _707, _708));
    float _4076 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _4087 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1947 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.3183098733425140380859375;
    float _1949 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.3183098733425140380859375;
    float _1956 = ((cbLight._m0[_1908].x * _1914) * _1949) + ((cbLight._m0[_1918].x * _1924) * _1947);
    float _1957 = ((_1914 * cbLight._m0[_1908].y) * _1949) + ((_1924 * cbLight._m0[_1918].y) * _1947);
    float _1958 = ((_1914 * cbLight._m0[_1908].z) * _1949) + ((_1924 * cbLight._m0[_1918].z) * _1947);
    uvec4 _1962 = floatBitsToUint(cbLight._m0[_1891 + 12u]);
    bool _1964 = _1962.x == 0u;
    float _1975;
    float _1977;
    float _1979;
    if (_1964)
    {
        _1975 = _1956;
        _1977 = _1957;
        _1979 = _1958;
    }
    else
    {
        uint _1983 = _1891 + 6u;
        float _1999 = (dot(vec3(cbLight._m0[_1891 + 2u].xyz), vec3(_706, _707, _708)) * 0.5) + 0.5;
        float _2000 = _1999 * _1999;
        float _4098 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2001 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2002 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _1975 = (((cbLight._m0[_1983].x * 0.3183098733425140380859375) * _2001) * _2002) + _1956;
        _1977 = (((cbLight._m0[_1983].y * 0.3183098733425140380859375) * _2001) * _2002) + _1957;
        _1979 = (((cbLight._m0[_1983].z * 0.3183098733425140380859375) * _2001) * _2002) + _1958;
    }
    bool _1982 = _1962.y == 0u;
    float _2020;
    float _2022;
    float _2024;
    if (_1982)
    {
        _2020 = _1975;
        _2022 = _1977;
        _2024 = _1979;
    }
    else
    {
        uint _2179 = _1891 + 7u;
        float _2195 = (dot(vec3(cbLight._m0[_1891 + 3u].xyz), vec3(_706, _707, _708)) * 0.5) + 0.5;
        float _2196 = _2195 * _2195;
        float _4114 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2197 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2198 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _2020 = (((cbLight._m0[_2179].x * 0.3183098733425140380859375) * _2197) * _2198) + _1975;
        _2022 = (((cbLight._m0[_2179].y * 0.3183098733425140380859375) * _2197) * _2198) + _1977;
        _2024 = (((cbLight._m0[_2179].z * 0.3183098733425140380859375) * _2197) * _2198) + _1979;
    }
    uint _2027 = _1891 + 8u;
    float _2040 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1891].w)) * _709) * 0.949999988079071044921875);
    float _2041 = _2040 * _2040;
    float _2042 = cbLight._m0[_1891].x + _786;
    float _2043 = cbLight._m0[_1891].y + _787;
    float _2044 = cbLight._m0[_1891].z + _788;
    float _2048 = inversesqrt(dot(vec3(_2042, _2043, _2044), vec3(_2042, _2043, _2044)));
    float _2049 = _2048 * _2042;
    float _2050 = _2048 * _2043;
    float _2051 = _2048 * _2044;
    float _2052 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_1891].xyz));
    float _4130 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2055 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _2056 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2057 = dot(vec3(_706, _707, _708), vec3(_2049, _2050, _2051));
    float _4152 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2060 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2061 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_2049, _2050, _2051));
    float _4163 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2065 = _2041 * _2041;
    float _2069 = ((_2060 * _2060) * (_2065 + (-1.0))) + 1.0;
    float _2080 = (exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2081 = 1.0 - _2041;
    float _2092 = (0.5 / (((_2056 * ((_2055 * _2081) + _2041)) + 9.9999999392252902907785028219223e-09) + (((_2056 * _2081) + _2041) * _2055))) * _2055;
    float _4174 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2094 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2065 / ((_2069 * _2069) * 3.141590118408203125));
    uint _2105 = _1891 + 9u;
    float _2116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1928].w)) * _709) * 0.949999988079071044921875);
    float _2117 = _2116 * _2116;
    float _2118 = cbLight._m0[_1928].x + _786;
    float _2119 = cbLight._m0[_1928].y + _787;
    float _2120 = cbLight._m0[_1928].z + _788;
    float _2124 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
    float _2125 = _2124 * _2118;
    float _2126 = _2124 * _2119;
    float _2127 = _2124 * _2120;
    float _2128 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_1928].xyz));
    float _4185 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2131 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _2132 = dot(vec3(_706, _707, _708), vec3(_2125, _2126, _2127));
    float _4196 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _2136 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_2125, _2126, _2127));
    float _4207 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2140 = _2117 * _2117;
    float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
    float _2153 = (exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2154 = 1.0 - _2117;
    float _2164 = (0.5 / (((_2056 * ((_2131 * _2154) + _2117)) + 9.9999999392252902907785028219223e-09) + (((_2056 * _2154) + _2117) * _2131))) * _2131;
    float _4218 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2166 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
    float _2176 = (((_2153 * cbLight._m0[_2105].x) * _2166) * _1914) + (((_2080 * cbLight._m0[_2027].x) * _2094) * _1924);
    float _2177 = (((_2153 * cbLight._m0[_2105].y) * _2166) * _1914) + (((_2080 * cbLight._m0[_2027].y) * _2094) * _1924);
    float _2178 = (((_2153 * cbLight._m0[_2105].z) * _2166) * _1914) + (((_2080 * cbLight._m0[_2027].z) * _2094) * _1924);
    float _2240;
    float _2242;
    float _2244;
    if (_1964)
    {
        _2240 = _2176;
        _2242 = _2177;
        _2244 = _2178;
    }
    else
    {
        uint _2246 = _1891 + 2u;
        uint _2250 = _1891 + 10u;
        float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _709) * 0.949999988079071044921875);
        float _2265 = _2264 * _2264;
        float _2266 = cbLight._m0[_2246].x + _786;
        float _2267 = cbLight._m0[_2246].y + _787;
        float _2268 = cbLight._m0[_2246].z + _788;
        float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
        float _2273 = _2272 * _2266;
        float _2274 = _2272 * _2267;
        float _2275 = _2272 * _2268;
        float _2276 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_2246].xyz));
        float _4229 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2280 = dot(vec3(_706, _707, _708), vec3(_2273, _2274, _2275));
        float _4240 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2283 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2284 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2273, _2274, _2275));
        float _4251 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2288 = _2265 * _2265;
        float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
        float _2301 = (exp2(log2(1.0 - (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2302 = 1.0 - _2265;
        float _2312 = (0.5 / (((_2056 * ((_2279 * _2302) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2056 * _2302) + _2265) * _2279))) * _2279;
        float _4262 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2314 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
        float _2315 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _2240 = (((_2301 * cbLight._m0[_2250].x) * _2314) * _2315) + _2176;
        _2242 = (((_2301 * cbLight._m0[_2250].y) * _2314) * _2315) + _2177;
        _2244 = (((_2301 * cbLight._m0[_2250].z) * _2314) * _2315) + _2178;
    }
    float _2350;
    float _2352;
    float _2354;
    if (_1982)
    {
        _2350 = _2240;
        _2352 = _2242;
        _2354 = _2244;
    }
    else
    {
        uint _2361 = _1891 + 3u;
        uint _2365 = _1891 + 11u;
        float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2361].w)) * _709) * 0.949999988079071044921875);
        float _2380 = _2379 * _2379;
        float _2381 = cbLight._m0[_2361].x + _786;
        float _2382 = cbLight._m0[_2361].y + _787;
        float _2383 = cbLight._m0[_2361].z + _788;
        float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
        float _2388 = _2387 * _2381;
        float _2389 = _2387 * _2382;
        float _2390 = _2387 * _2383;
        float _2391 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_2361].xyz));
        float _4278 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2395 = dot(vec3(_706, _707, _708), vec3(_2388, _2389, _2390));
        float _4289 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2398 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2399 = dot(vec3(cbLight._m0[_2361].xyz), vec3(_2388, _2389, _2390));
        float _4300 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2403 = _2380 * _2380;
        float _2407 = ((_2398 * _2398) * (_2403 + (-1.0))) + 1.0;
        float _2416 = (exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2417 = 1.0 - _2380;
        float _2427 = (0.5 / (((_2056 * ((_2394 * _2417) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2056 * _2417) + _2380) * _2394))) * _2394;
        float _4311 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2429 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2403 / ((_2407 * _2407) * 3.141590118408203125));
        float _2430 = isnan(1.0) ? _1907 : (isnan(_1907) ? 1.0 : min(_1907, 1.0));
        _2350 = (((_2416 * cbLight._m0[_2365].x) * _2429) * _2430) + _2240;
        _2352 = (((_2416 * cbLight._m0[_2365].y) * _2429) * _2430) + _2242;
        _2354 = (((_2416 * cbLight._m0[_2365].z) * _2429) * _2430) + _2244;
    }
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    if (_1889.y == 0u)
    {
        float _2505 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2506 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2505;
        float _2507 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2505;
        float _2508 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2505;
        uvec4 _2520 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2521 = _2520.x;
        uint _2532 = uint((float(_2520.y) * floor(float(uint(cbSceneParam._m0[85u].y * _795) / _2521))) + floor(float(uint(cbSceneParam._m0[85u].x * _794) / _2521)));
        float _2542 = (log2(_2508 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2543 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        uint _2546 = uint(isnan(14.0) ? _2543 : (isnan(_2543) ? 14.0 : min(_2543, 14.0)));
        uvec4 _2551 = texelFetch(g_lightClusterGridBuffer, int(((_2546 << 2u) + (_2532 << 6u)) >> 2u));
        uint _2552 = _2551.x;
        uint _2553 = _2520.z;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        if (((((1u << ((_2553 >> 4u) & 15u)) + 4294967295u) & _2552) == 0u) || ((_2553 & 240u) == 0u))
        {
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
        }
        else
        {
            float _2654;
            float _2656;
            float _2658;
            float _2660;
            float _2662;
            float _2664;
            float _2798 = 0.0;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            float _2802 = 0.0;
            float _2803 = 0.0;
            uint _2804 = 0u;
            uint _2813;
            bool _2814;
            for (;;)
            {
                _2813 = texelFetch(g_lightClassification, int((((_2546 << 5u) + (_2532 << 9u)) + (_2804 << 2u)) >> 2u)).x;
                _2814 = _2813 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2814)
                {
                    frontier_phi_61_pred = _2798;
                    frontier_phi_61_pred_1 = _2803;
                    frontier_phi_61_pred_2 = _2802;
                    frontier_phi_61_pred_3 = _2801;
                    frontier_phi_61_pred_4 = _2800;
                    frontier_phi_61_pred_5 = _2799;
                }
                else
                {
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    uint _2928;
                    _2922 = _2798;
                    _2923 = _2799;
                    _2924 = _2800;
                    _2925 = _2801;
                    _2926 = _2802;
                    _2927 = _2803;
                    _2928 = _2813;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    for (;;)
                    {
                        uint _2932 = uint(findLSB(_2928)) + (_2804 << 5u);
                        uint _2929 = (_2928 + 4294967295u) & _2928;
                        uint _2934 = _2932 * 48u;
                        vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2934)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 3u)).x));
                        uint _2954 = (_2932 * 48u) + 4u;
                        vec4 _2967 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2954)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 3u)).x));
                        uint _2973 = (_2932 * 48u) + 8u;
                        vec3 _2984 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2973)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 2u)).x));
                        float _2988 = _2948.x - _2506;
                        float _2989 = _2948.y - _2507;
                        float _2990 = _2948.z - _2508;
                        float _2991 = dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990));
                        float _2994 = inversesqrt(_2991);
                        float _2995 = _2994 * _2988;
                        float _2996 = _2994 * _2989;
                        float _2997 = _2994 * _2990;
                        float _2998 = dot(vec3(_813, _816, _819), vec3(_2995, _2996, _2997));
                        float _3003 = 1.0 - (_2991 * _2948.w);
                        float _4337 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3004 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3005 = sqrt(_2991) * _2967.w;
                        float _3008 = 1.39999997615814208984375 / (_3005 + 1.39999997615814208984375);
                        float _3009 = _3008 * _3008;
                        float _3012 = ((1.0 - _3009) * _2998) + _3009;
                        float _3015 = _3005 * _3005;
                        float _3019 = ((isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0))) * _3004) / ((_3015 * 0.699999988079071044921875) + 1.0);
                        float _3023 = (-0.0) - _2506;
                        float _3024 = (-0.0) - _2507;
                        float _3025 = (-0.0) - _2508;
                        float _3029 = inversesqrt(dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025)));
                        float _3030 = _3029 * _3023;
                        float _3031 = _3029 * _3024;
                        float _3032 = _3029 * _3025;
                        float _3040 = exp2(log2(1.0 / ((_3015 * 3.5) + 5.0)) * 0.25);
                        float _3041 = 1.0 - _873;
                        float _3048 = sqrt(1.0 - ((1.0 - (_3041 * _3041)) * (1.0 - (_3040 * _3040))));
                        float _3049 = _3048 * _3048;
                        float _3050 = _3049 * _3049;
                        float _3051 = _3030 + _2995;
                        float _3052 = _3031 + _2996;
                        float _3053 = _3032 + _2997;
                        float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
                        float _3061 = dot(vec3(_813, _816, _819), vec3(_3030, _3031, _3032));
                        float _4353 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3064 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _3065 = dot(vec3(_813, _816, _819), vec3(_3057 * _3051, _3057 * _3052, _3057 * _3053));
                        float _4364 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3068 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3072 = ((_3068 * _3068) * (_3050 + (-1.0))) + 1.0;
                        float _3073 = _3008 * _3049;
                        float _3074 = _3073 * _3073;
                        float _3077 = ((1.0 - _3074) * _2998) + _3074;
                        float _4375 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3078 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _3079 = 1.0 - _3049;
                        float _3089 = (0.5 / (((_3078 * ((_3064 * _3079) + _3049)) + 9.9999999392252902907785028219223e-09) + (((_3078 * _3079) + _3049) * _3064))) * _3078;
                        float _4386 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                        float _3100 = (((_3050 * 3.1415927410125732421875) * (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) / ((_3072 * _3072) * ((_3015 * 2.1991131305694580078125) + 3.141590118408203125))) * _3004;
                        _2857 = (_3019 * _2967.x) + _2925;
                        _2858 = (_3019 * _2967.y) + _2926;
                        _2859 = (_3019 * _2967.z) + _2927;
                        _2854 = (_3100 * _2984.x) + _2922;
                        _2855 = (_3100 * _2984.y) + _2923;
                        _2856 = (_3100 * _2984.z) + _2924;
                        if (_2929 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2922 = _2854;
                            _2923 = _2855;
                            _2924 = _2856;
                            _2925 = _2857;
                            _2926 = _2858;
                            _2927 = _2859;
                            _2928 = _2929;
                        }
                    }
                    frontier_phi_61_pred = _2854;
                    frontier_phi_61_pred_1 = _2859;
                    frontier_phi_61_pred_2 = _2858;
                    frontier_phi_61_pred_3 = _2857;
                    frontier_phi_61_pred_4 = _2856;
                    frontier_phi_61_pred_5 = _2855;
                }
                _2654 = frontier_phi_61_pred;
                _2664 = frontier_phi_61_pred_1;
                _2662 = frontier_phi_61_pred_2;
                _2660 = frontier_phi_61_pred_3;
                _2658 = frontier_phi_61_pred_4;
                _2656 = frontier_phi_61_pred_5;
                uint _2805 = _2804 + 1u;
                if (_2805 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2798 = _2654;
                    _2799 = _2656;
                    _2800 = _2658;
                    _2801 = _2660;
                    _2802 = _2662;
                    _2803 = _2664;
                    _2804 = _2805;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
        }
        uvec4 _2667 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2668 = _2667.z;
        uint _2670 = (_2668 >> 8u) & 15u;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        if (((4294967295u << _2670) & _2552) == 0u)
        {
            _2766 = _2653;
            _2768 = _2655;
            _2770 = _2657;
            _2772 = _2659;
            _2774 = _2661;
            _2776 = _2663;
        }
        else
        {
            float _2791 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
            float _2792 = _2791 * _2506;
            float _2793 = _2791 * _2507;
            float _2794 = _2791 * _2508;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2670 < ((_2668 >> 12u) & 15u))
            {
                float _2767;
                float _2769;
                float _2771;
                float _2773;
                float _2775;
                float _2777;
                float _2905 = _2653;
                float _2906 = _2655;
                float _2907 = _2657;
                float _2908 = _2659;
                float _2909 = _2661;
                float _2910 = _2663;
                uint _2911 = _2670;
                uint _2920;
                bool _2921;
                for (;;)
                {
                    _2920 = texelFetch(g_lightClassification, int((((_2546 << 5u) + (_2532 << 9u)) + (_2911 << 2u)) >> 2u)).x;
                    _2921 = _2920 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2921)
                    {
                        frontier_phi_67_pred = _2908;
                        frontier_phi_67_pred_1 = _2909;
                        frontier_phi_67_pred_2 = _2910;
                        frontier_phi_67_pred_3 = _2907;
                        frontier_phi_67_pred_4 = _2906;
                        frontier_phi_67_pred_5 = _2905;
                    }
                    else
                    {
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3118 = _2905;
                        float _3119 = _2906;
                        float _3120 = _2907;
                        float _3121 = _2908;
                        float _3122 = _2909;
                        float _3123 = _2910;
                        uint _3124 = _2920;
                        uint _3125;
                        vec4 _3150;
                        float _3151;
                        vec4 _3166;
                        vec3 _3178;
                        vec4 _3193;
                        vec4 _3208;
                        float _3254;
                        bool _3255;
                        for (;;)
                        {
                            uint _3135 = ((_2911 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3124));
                            _3125 = (_3124 + 4294967295u) & _3124;
                            uint _3137 = _3135 * 40u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            _3151 = _3150.w;
                            uint _3153 = (_3135 * 40u) + 4u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3168 = (_3135 * 40u) + 8u;
                            _3178 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x));
                            uint _3180 = (_3135 * 40u) + 16u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3195 = (_3135 * 40u) + 20u;
                            _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3210 = (_3135 * 40u) + 24u;
                            vec4 _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3229 = (_3135 * 40u) + 28u;
                            vec4 _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            _3254 = fma(_2508, _3242.z, fma(_2507, _3242.y, _3242.x * _2506)) + _3242.w;
                            _3255 = !((fma(_2508, _3223.z, fma(_2507, _3223.y, _3223.x * _2506)) + _3223.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3255)
                            {
                                float _3282 = _3150.x - _2506;
                                float _3283 = _3150.y - _2507;
                                float _3284 = _3150.z - _2508;
                                float _3285 = dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284));
                                float _3288 = inversesqrt(_3285);
                                float _3289 = _3288 * _3282;
                                float _3290 = _3288 * _3283;
                                float _3291 = _3288 * _3284;
                                float _3295 = 1.0 - (_3285 / (_3151 * _3151));
                                float _4397 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3296 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3300 = sqrt(_3285) * _3166.w;
                                float _3302 = 1.39999997615814208984375 / (_3300 + 1.39999997615814208984375);
                                float _3303 = _3302 * _3302;
                                float _3306 = ((1.0 - _3303) * dot(vec3(_3289, _3290, _3291), vec3(_813, _816, _819))) + _3303;
                                float _3309 = _3300 * _3300;
                                float _3313 = (fma(_2508, _3193.z, fma(_2507, _3193.y, _3193.x * _2506)) + _3193.w) / _3254;
                                float _3314 = (fma(_2508, _3208.z, fma(_2507, _3208.y, _3208.x * _2506)) + _3208.w) / _3254;
                                float _3318 = 1.0 - dot(vec2(_3313, _3314), vec2(_3313, _3314));
                                float _4413 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3319 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3320 = _3319 * (((isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0))) * _3296) / ((_3309 * 0.699999988079071044921875) + 1.0));
                                float _3332 = exp2(log2(1.0 / ((_3309 * 3.5) + 5.0)) * 0.25);
                                float _3333 = 1.0 - _873;
                                float _3340 = sqrt(1.0 - ((1.0 - (_3333 * _3333)) * (1.0 - (_3332 * _3332))));
                                float _3341 = _3340 * _3340;
                                float _3342 = _3341 * _3341;
                                float _3343 = _3289 - _2792;
                                float _3344 = _3290 - _2793;
                                float _3345 = _3291 - _2794;
                                float _3349 = inversesqrt(dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345)));
                                float _3353 = dot(vec3(_813, _816, _819), vec3((-0.0) - _2792, (-0.0) - _2793, (-0.0) - _2794));
                                float _4424 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3356 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3357 = dot(vec3(_813, _816, _819), vec3(_3349 * _3343, _3349 * _3344, _3349 * _3345));
                                float _4435 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3360 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3364 = ((_3360 * _3360) * (_3342 + (-1.0))) + 1.0;
                                float _3365 = _3302 * _3341;
                                float _3366 = _3365 * _3365;
                                float _3372 = ((1.0 - _3366) * dot(vec3(_813, _816, _819), vec3(_3289, _3290, _3291))) + _3366;
                                float _4446 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3373 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3374 = 1.0 - _3341;
                                float _3384 = (0.5 / (((_3373 * ((_3356 * _3374) + _3341)) + 9.9999999392252902907785028219223e-09) + (((_3373 * _3374) + _3341) * _3356))) * _3373;
                                float _4457 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3394 = (_3319 * _3296) * (((_3342 * 3.1415927410125732421875) * (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) / ((_3364 * _3364) * ((_3309 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3394 * _3178.x;
                                frontier_phi_73_pred_1 = _3394 * _3178.y;
                                frontier_phi_73_pred_2 = _3320 * _3166.z;
                                frontier_phi_73_pred_3 = _3320 * _3166.y;
                                frontier_phi_73_pred_4 = _3320 * _3166.x;
                                frontier_phi_73_pred_5 = _3394 * _3178.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3398 = frontier_phi_73_pred;
                            _3399 = frontier_phi_73_pred_1;
                            _3403 = frontier_phi_73_pred_2;
                            _3402 = frontier_phi_73_pred_3;
                            _3401 = frontier_phi_73_pred_4;
                            _3400 = frontier_phi_73_pred_5;
                            _3108 = _3401 + _3121;
                            _3109 = _3402 + _3122;
                            _3110 = _3403 + _3123;
                            _3105 = _3398 + _3118;
                            _3106 = _3399 + _3119;
                            _3107 = _3400 + _3120;
                            if (_3125 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3125;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3108;
                        frontier_phi_67_pred_1 = _3109;
                        frontier_phi_67_pred_2 = _3110;
                        frontier_phi_67_pred_3 = _3107;
                        frontier_phi_67_pred_4 = _3106;
                        frontier_phi_67_pred_5 = _3105;
                    }
                    _2773 = frontier_phi_67_pred;
                    _2775 = frontier_phi_67_pred_1;
                    _2777 = frontier_phi_67_pred_2;
                    _2771 = frontier_phi_67_pred_3;
                    _2769 = frontier_phi_67_pred_4;
                    _2767 = frontier_phi_67_pred_5;
                    uint _2912 = _2911 + 1u;
                    if (_2912 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2905 = _2767;
                        _2906 = _2769;
                        _2907 = _2771;
                        _2908 = _2773;
                        _2909 = _2775;
                        _2910 = _2777;
                        _2911 = _2912;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2775;
                frontier_phi_55_56_ladder_1 = _2777;
                frontier_phi_55_56_ladder_2 = _2773;
                frontier_phi_55_56_ladder_3 = _2771;
                frontier_phi_55_56_ladder_4 = _2769;
                frontier_phi_55_56_ladder_5 = _2767;
            }
            else
            {
                frontier_phi_55_56_ladder = _2661;
                frontier_phi_55_56_ladder_1 = _2663;
                frontier_phi_55_56_ladder_2 = _2659;
                frontier_phi_55_56_ladder_3 = _2657;
                frontier_phi_55_56_ladder_4 = _2655;
                frontier_phi_55_56_ladder_5 = _2653;
            }
            _2766 = frontier_phi_55_56_ladder_5;
            _2768 = frontier_phi_55_56_ladder_4;
            _2770 = frontier_phi_55_56_ladder_3;
            _2772 = frontier_phi_55_56_ladder_2;
            _2774 = frontier_phi_55_56_ladder;
            _2776 = frontier_phi_55_56_ladder_1;
        }
        float _2781 = isnan(1.0) ? _857 : (isnan(_857) ? 1.0 : min(_857, 1.0));
        _2565 = (_2781 * _2772) + _2020;
        _2567 = (_2781 * _2774) + _2022;
        _2569 = (_2781 * _2776) + _2024;
        _2571 = ((_2766 * 0.039999999105930328369140625) * _2781) + _2350;
        _2573 = ((_2768 * 0.039999999105930328369140625) * _2781) + _2352;
        _2575 = ((_2770 * 0.039999999105930328369140625) * _2781) + _2354;
    }
    else
    {
        _2565 = _2020;
        _2567 = _2022;
        _2569 = _2024;
        _2571 = _2350;
        _2573 = _2352;
        _2575 = _2354;
    }
    float _4473 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4484 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4495 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    uint _2595 = _260 + 6u;
    float _2603 = _794 / cbSceneParam._m0[86u].x;
    float _2604 = _795 / cbSceneParam._m0[86u].y;
    vec4 _2618 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2603, _2604, (log2((isnan(cbSceneParam._m0[77u].w) ? _727 : (isnan(_727) ? cbSceneParam._m0[77u].w : min(_727, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2620 = _2618.x;
    float _2621 = _2618.y;
    float _2622 = _2618.z;
    float _2623 = _2618.w;
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    if (_727 > cbSceneParam._m0[78u].w)
    {
        float _2678 = isnan(_727) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _727 : min(cbSceneParam._m0[80u].w, _727));
        float _2679 = _2678 / _727;
        float _2690 = _2679 * _779;
        float _2691 = _780 * _2679;
        float _2692 = (-0.0) - _2691;
        float _2694 = _2679 * _781;
        float _2696 = (cbSceneParam._m0[77u].w * _2692) / _2678;
        float _2697 = _2696 + cbSceneParam._m0[79u].w;
        float _2698 = cbSceneParam._m0[79u].w - _2691;
        float _2704 = sqrt(((_2690 * _2690) + (_2691 * _2691)) + (_2694 * _2694));
        float _2707 = (1.0 - (cbSceneParam._m0[77u].w / _2678)) * _2704;
        float _2712 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2714 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2867;
        if (abs((_2692 - _2696) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2867 = ((((_2697 > 0.0) ? exp2(_2712 * _2697) : (2.0 - exp2(_2714 * _2697))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2707;
        }
        else
        {
            float _2827 = 1.0 / cbSceneParam._m0[80u].x;
            float _2828 = isnan(_2698) ? _2697 : (isnan(_2697) ? _2698 : max(_2697, _2698));
            float _2829 = isnan(_2698) ? _2697 : (isnan(_2697) ? _2698 : min(_2697, _2698));
            float _2838 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : min(_2828, 0.0));
            float _2839 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : min(_2829, 0.0));
            _2867 = ((abs(_2704 / _2692) * cbSceneParam._m0[80u].y) * ((((_2838 - _2839) * 2.0) - ((exp2(_2712 * (isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0)))) - exp2(_2712 * (isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0))))) * _2827)) - ((exp2(_2714 * _2838) - exp2(_2714 * _2839)) * _2827))) + (_2707 * cbSceneParam._m0[80u].z);
        }
        vec4 _2869 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2603, _2604, 1.0), 0.0);
        float _2878 = exp2((_2867 * (-1.44269502162933349609375)) * (1.0 - _2869.w));
        float _2879 = log2(_2878);
        float _2895 = log2(_2623);
        _2716 = (exp2(_2895 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2879 * cbSceneParam._m0[78u].x)) * _2869.x) / cbSceneParam._m0[78u].x)) + _2620;
        _2718 = (exp2(_2895 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2879 * cbSceneParam._m0[78u].y)) * _2869.y) / cbSceneParam._m0[78u].y)) + _2621;
        _2720 = (exp2(_2895 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2879 * cbSceneParam._m0[78u].z)) * _2869.z) / cbSceneParam._m0[78u].z)) + _2622;
        _2722 = _2878 * _2623;
    }
    else
    {
        _2716 = _2620;
        _2718 = _2621;
        _2720 = _2622;
        _2722 = _2623;
    }
    float _2734 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2735 = _2734 == 3.0;
    float _2736 = log2(_2722);
    float _2743 = exp2(_2736 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2565 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _857))) + ((_2571 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1662)) * cbPerFrame._m0[3u].x));
    float _2744 = exp2(_2736 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2567 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _857))) + ((_2573 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1662)) * cbPerFrame._m0[3u].x));
    float _2745 = exp2(_2736 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2569 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _857))) + ((_2575 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1662)) * cbPerFrame._m0[3u].x));
    float _2754 = (_2734 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2754 * (_2735 ? _2743 : (_2743 + (cbSceneParam._m0[72u].w * _2716)));
    SV_Target.y = _2754 * (_2735 ? _2744 : (_2744 + (cbSceneParam._m0[72u].w * _2718)));
    SV_Target.z = _2754 * (_2735 ? _2745 : (_2745 + (cbSceneParam._m0[72u].w * _2720)));
    SV_Target.w = cbInstanceData._m0[_2595].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2595].w;
}


