#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1004;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _264 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _244) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _245) + cbTextureTilingScale._m0[14u].w));
    vec4 _311 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _315 = _311.z;
    float _320 = (_311.x * 2.0) + (-1.0);
    float _322 = (_311.y * 2.0) + (-1.0);
    float _323 = dot(vec2(_320, _322), vec2(_320, _322));
    float _3595 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))));
    float _332 = fma(_329, _212, fma(_322, _219, _320 * _205));
    float _335 = fma(_329, _213, fma(_322, _220, _320 * _206));
    float _338 = fma(_329, _214, fma(_322, _221, _320 * _207));
    float _342 = inversesqrt(dot(vec3(_332, _335, _338), vec3(_332, _335, _338)));
    vec4 _378 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _244) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _245) + cbTextureTilingScale._m0[11u].w));
    float _380 = _378.x;
    float _381 = 1.0 - _380;
    float _388 = ((_380 - _381) * cbMtdParam._m0[24u].z) + _381;
    float _390 = (cbMtdParam._m0[19u].x + dot(vec4(_342 * _332, _342 * _335, _342 * _338, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_388 * cbMtdParam._m0[21u].z);
    float _3606 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _406 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_388 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3617 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _411 = ((_391 * ((_291.x * cbMtdParam._m0[18u].x) - _270)) * _407) + _270;
    float _412 = ((_391 * ((_291.y * cbMtdParam._m0[18u].y) - _271)) * _407) + _271;
    float _413 = ((_391 * ((_291.z * cbMtdParam._m0[18u].z) - _272)) * _407) + _272;
    vec4 _426 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _244) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _245) + cbTextureTilingScale._m0[15u].w));
    float _433 = (_426.x * 2.0) + (-1.0);
    float _434 = (_426.y * 2.0) + (-1.0);
    float _435 = dot(vec2(_433, _434), vec2(_433, _434));
    float _3628 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _444 = (((_426.z - _315) * _391) * _407) + _315;
    float _459 = (((cbMtdParam._m0[21u].x * _320) + ((_433 - _320) * _391)) * _407) + _320;
    float _460 = (((cbMtdParam._m0[21u].x * _322) + ((_434 - _322) * _391)) * _407) + _322;
    float _461 = (((sqrt(1.0 - (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) - _329) * _391) * _407) + _329;
    float _466 = cbMtdParam._m0[22u].x + _311.w;
    float _469 = fma(_461, _212, fma(_460, _219, _459 * _205));
    float _472 = fma(_461, _213, fma(_460, _220, _459 * _206));
    float _475 = fma(_461, _214, fma(_460, _221, _459 * _207));
    float _479 = inversesqrt(dot(vec3(_469, _472, _475), vec3(_469, _472, _475)));
    float _480 = _479 * _469;
    float _481 = _479 * _472;
    float _482 = _479 * _475;
    float _3639 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _483 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _3650 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3661 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _3672 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _3683 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _501 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _552 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _542);
    float _553 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _542);
    float _554 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _542);
    float _558 = inversesqrt(dot(vec3(_552, _553, _554), vec3(_552, _553, _554)));
    float _559 = _552 * _558;
    float _560 = _553 * _558;
    float _561 = _554 * _558;
    float _567 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _568 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _589 = fma(_482, cbSceneParam._m0[5u].z, fma(_481, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _480));
    float _592 = fma(_482, cbSceneParam._m0[6u].z, fma(_481, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _480));
    float _595 = fma(_482, cbSceneParam._m0[7u].z, fma(_481, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _480));
    uint _609 = (_224 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _615 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * cbInstanceData._m0[_609].x;
    float _616 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) * cbInstanceData._m0[_609].y;
    float _617 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) * cbInstanceData._m0[_609].z;
    float _3694 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _3705 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _3716 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    vec4 _629 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _567, cbSceneParam._m0[86u].y * _568));
    float _633 = ((isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * TEXCOORD_5.w) * _629.x;
    float _634 = dot(vec3(_480, _481, _482), vec3(_559, _560, _561));
    float _637 = _634 * 2.0;
    float _641 = (_637 * _480) - _559;
    float _642 = (_637 * _481) - _560;
    float _643 = (_637 * _482) - _561;
    float _647 = abs(dot(vec3(_559, _560, _561), vec3(_480, _481, _482)));
    float _3727 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _649 = sqrt(_483);
    float _662 = exp2((_649 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_649 * 3.0));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1003;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _728 = fma(_702, cbModelParam._m0[26u].z, fma(_698, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _694));
        float _732 = fma(_702, cbModelParam._m0[27u].z, fma(_698, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _694));
        float _736 = fma(_702, cbModelParam._m0[28u].z, fma(_698, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _694));
        float _761 = _694 + _480;
        float _762 = _698 + _481;
        float _763 = _702 + _482;
        float _773 = fma(_763, cbModelParam._m0[26u].z, fma(_762, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _761)) - _728;
        float _774 = fma(_763, cbModelParam._m0[27u].z, fma(_762, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _761)) - _732;
        float _775 = fma(_763, cbModelParam._m0[28u].z, fma(_762, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _761)) - _736;
        float _779 = inversesqrt(dot(vec3(_773, _774, _775), vec3(_773, _774, _775)));
        float _792 = ((_779 * _773) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_728 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _793 = ((_779 * _774) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_732 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _794 = ((_779 * _775) / cbModelParam._m0[34u].z) + ((((((_736 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        vec4 _818 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_792, _793, _794), 0.0);
        float _831 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_797.x + (-0.5));
        float _833 = _831 * (_797.y + (-0.5));
        float _834 = _831 * (_797.z + (-0.5));
        float _841 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_804.x + (-0.5));
        float _843 = _841 * (_804.y + (-0.5));
        float _844 = _841 * (_804.z + (-0.5));
        float _851 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_811.x + (-0.5));
        float _853 = _851 * (_811.y + (-0.5));
        float _854 = _851 * (_811.z + (-0.5));
        float _861 = exp2((_818.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_818.x + (-0.5));
        float _863 = _861 * (_818.y + (-0.5));
        float _864 = _861 * (_818.z + (-0.5));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = _832 * 0.5;
        float _869 = _842 * 0.5;
        float _870 = _852 * 0.5;
        float _871 = dot(vec3(_868, _869, _870), vec3(_868, _869, _870));
        float _876 = (_871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_871);
        float _885 = (dot(vec3(_480, _481, _482), vec3(_876 * _868, _876 * _869, _876 * _870)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _895 = sqrt(((_869 * _869) + (_868 * _868)) + (_870 * _870)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3775 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_897 + 1.0))) + _902) * _865;
        float _912 = _833 * 0.5;
        float _913 = _843 * 0.5;
        float _914 = _853 * 0.5;
        float _915 = dot(vec3(_912, _913, _914), vec3(_912, _913, _914));
        float _920 = (_915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_915);
        float _928 = (dot(vec3(_480, _481, _482), vec3(_920 * _912, _920 * _913, _920 * _914)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _937 = sqrt(((_913 * _913) + (_912 * _912)) + (_914 * _914)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3808 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_939 + 1.0))) + _944) * _866;
        float _954 = _834 * 0.5;
        float _955 = _844 * 0.5;
        float _956 = _854 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_480, _481, _482), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3841 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_981 + 1.0))) + _986) * _867;
        _1003 = _834;
        _1005 = _833;
        _1006 = _832;
        _1007 = _844;
        _1008 = _843;
        _1009 = _842;
        _1010 = _854;
        _1011 = _853;
        _1012 = _852;
        _1013 = _867;
        _1014 = _866;
        _1015 = _865;
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
    }
    else
    {
        _1003 = _1004;
        _1005 = _1004;
        _1006 = _1004;
        _1007 = _1004;
        _1008 = _1004;
        _1009 = _1004;
        _1010 = _1004;
        _1011 = _1004;
        _1012 = _1004;
        _1013 = _1004;
        _1014 = _1004;
        _1015 = _1004;
        _1016 = 0.0;
        _1017 = 0.0;
        _1018 = 0.0;
    }
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1043 = fma(_702, cbModelParam._m0[30u].z, fma(_698, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _694));
        float _1047 = fma(_702, cbModelParam._m0[31u].z, fma(_698, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _694));
        float _1051 = fma(_702, cbModelParam._m0[32u].z, fma(_698, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _694));
        float _1074 = _694 + _480;
        float _1075 = _698 + _481;
        float _1076 = _702 + _482;
        float _1086 = fma(_1076, cbModelParam._m0[30u].z, fma(_1075, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1074)) - _1043;
        float _1087 = fma(_1076, cbModelParam._m0[31u].z, fma(_1075, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1074)) - _1047;
        float _1088 = fma(_1076, cbModelParam._m0[32u].z, fma(_1075, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1074)) - _1051;
        float _1092 = inversesqrt(dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088)));
        float _1105 = ((_1092 * _1086) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1043 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1092 * _1087) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1047 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1092 * _1088) / cbModelParam._m0[35u].z) + ((((((_1051 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        float _1142 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1109.x + (-0.5));
        float _1144 = _1142 * (_1109.y + (-0.5));
        float _1145 = _1142 * (_1109.z + (-0.5));
        float _1152 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1116.x + (-0.5));
        float _1154 = _1152 * (_1116.y + (-0.5));
        float _1155 = _1152 * (_1116.z + (-0.5));
        float _1162 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1123.x + (-0.5));
        float _1164 = _1162 * (_1123.y + (-0.5));
        float _1165 = _1162 * (_1123.z + (-0.5));
        float _1172 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1130.x + (-0.5));
        float _1174 = _1172 * (_1130.y + (-0.5));
        float _1175 = _1172 * (_1130.z + (-0.5));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = _1143 * 0.5;
        float _1180 = _1153 * 0.5;
        float _1181 = _1163 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(_480, _481, _482), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3904 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1206 + 1.0))) + _1211) * _1176;
        float _1221 = _1144 * 0.5;
        float _1222 = _1154 * 0.5;
        float _1223 = _1164 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_480, _481, _482), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3937 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1248 + 1.0))) + _1253) * _1177;
        float _1263 = _1145 * 0.5;
        float _1264 = _1155 * 0.5;
        float _1265 = _1165 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_480, _481, _482), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3970 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1290 + 1.0))) + _1295) * _1178;
        _1312 = _1145;
        _1313 = _1144;
        _1314 = _1143;
        _1315 = _1155;
        _1316 = _1154;
        _1317 = _1153;
        _1318 = _1165;
        _1319 = _1164;
        _1320 = _1163;
        _1321 = _1178;
        _1322 = _1177;
        _1323 = _1176;
        _1324 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
        _1325 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
    }
    else
    {
        _1312 = _1004;
        _1313 = _1004;
        _1314 = _1004;
        _1315 = _1004;
        _1316 = _1004;
        _1317 = _1004;
        _1318 = _1004;
        _1319 = _1004;
        _1320 = _1004;
        _1321 = _1004;
        _1322 = _1004;
        _1323 = _1004;
        _1324 = 0.0;
        _1325 = 0.0;
        _1326 = 0.0;
    }
    float _1336 = (cbModelParam._m0[1u].x * (_1324 - _1016)) + _1016;
    float _1337 = (cbModelParam._m0[1u].x * (_1325 - _1017)) + _1017;
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _1018)) + _1018;
    float _1359 = fma(_1338, cbSceneParam._m0[89u].z, fma(_1337, cbSceneParam._m0[89u].y, _1336 * cbSceneParam._m0[89u].x));
    float _1362 = fma(_1338, cbSceneParam._m0[90u].z, fma(_1337, cbSceneParam._m0[90u].y, _1336 * cbSceneParam._m0[90u].x));
    float _1365 = fma(_1338, cbSceneParam._m0[91u].z, fma(_1337, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1336));
    float _1380 = _641 * 0.5;
    float _1381 = _642 * 0.5;
    float _1382 = _643 * 0.5;
    float _1383 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1386 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1313, _1316, _1319, _1322));
    float _1389 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1312, _1315, _1318, _1321));
    float _1423;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1396 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1003, _1007, _1010, _1013));
        float _1400 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1005, _1008, _1011, _1014));
        float _1404 = dot(vec4(_1380, _1381, _1382, 1.0), vec4(_1006, _1009, _1012, _1015));
        float _1411 = dot(vec4(cbModelParam._m0[39u]), vec4(_1380, _1381, _1382, 1.0));
        _1423 = dot(vec3(isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1411) ? 0.0 : (isnan(0.0) ? _1411 : max(0.0, _1411))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1423 = 1.0;
    }
    float _1434;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1425 = dot(vec4(cbModelParam._m0[40u]), vec4(_1380, _1381, _1382, 1.0));
        _1434 = dot(vec3(isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1425) ? 0.0 : (isnan(0.0) ? _1425 : max(0.0, _1425))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1434 = 1.0;
    }
    float _1438 = (_1434 * cbModelParam._m0[1u].x) + (_1423 * (1.0 - cbModelParam._m0[1u].x));
    float _1448 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _483);
    float _1449 = isnan(_1448) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1448 : min(cbModelParam._m0[25u].z, _1448));
    float _1529;
    float _1531;
    float _1533;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1496 = fma(_702, cbModelParam._m0[13u].z, fma(_698, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _694)) + cbModelParam._m0[13u].w;
        float _1500 = fma(_702, cbModelParam._m0[14u].z, fma(_698, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _694)) + cbModelParam._m0[14u].w;
        float _1504 = fma(_702, cbModelParam._m0[15u].z, fma(_698, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _694)) + cbModelParam._m0[15u].w;
        float _1507 = fma(_643, cbModelParam._m0[13u].z, fma(_642, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _641));
        float _1510 = fma(_643, cbModelParam._m0[14u].z, fma(_642, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _641));
        float _1513 = fma(_643, cbModelParam._m0[15u].z, fma(_642, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _641));
        float _1541;
        if (_1507 > 0.0)
        {
            _1541 = abs((1.0 - _1496) / _1507);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1496 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1541 = frontier_phi_14_12_ladder;
        }
        float _1711;
        if (_1510 > 0.0)
        {
            _1711 = abs((1.0 - _1500) / _1510);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1500 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1711 = frontier_phi_23_19_ladder;
        }
        float _2007;
        if (_1513 > 0.0)
        {
            _2007 = abs((1.0 - _1504) / _1513);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1504 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2007 = frontier_phi_35_30_ladder;
        }
        float _2009 = isnan(_1711) ? _1541 : (isnan(_1541) ? _1711 : min(_1541, _1711));
        float _2010 = isnan(_2007) ? _2009 : (isnan(_2009) ? _2007 : min(_2009, _2007));
        float _2014 = (_2010 * _1507) + _1496;
        float _2015 = (_2010 * _1510) + _1500;
        float _2016 = (_2010 * _1513) + _1504;
        float _2017 = _2010 * 9.9999997473787516355514526367188e-05;
        float _2019 = (-1.0) - _2017;
        float _2021 = _2017 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2016 > _2021) || ((_2016 < _2019) || ((_2015 > _2021) || ((_2015 < _2019) || ((_2014 < _2019) || (_2014 > _2021))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2161 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2016, cbModelParam._m0[9u].z, fma(_2015, cbModelParam._m0[9u].y, _2014 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2016, cbModelParam._m0[10u].z, fma(_2015, cbModelParam._m0[10u].y, _2014 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2016, cbModelParam._m0[11u].z, fma(_2015, cbModelParam._m0[11u].y, _2014 * cbModelParam._m0[11u].x))), _1449);
            frontier_phi_13_35_ladder = _2161.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2161.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2161.x * cbModelParam._m0[1u].y;
        }
        _1529 = frontier_phi_13_35_ladder_2;
        _1531 = frontier_phi_13_35_ladder_1;
        _1533 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1517 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_641, _642, _643), _1449);
        _1529 = _1517.x * cbModelParam._m0[1u].y;
        _1531 = _1517.y * cbModelParam._m0[1u].y;
        _1533 = _1517.z * cbModelParam._m0[1u].y;
    }
    float _1537 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _483);
    float _1538 = isnan(_1537) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1537 : min(cbModelParam._m0[25u].w, _1537));
    float _1627;
    float _1629;
    float _1631;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1591 = fma(_702, cbModelParam._m0[21u].z, fma(_698, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _694)) + cbModelParam._m0[21u].w;
        float _1595 = fma(_702, cbModelParam._m0[22u].z, fma(_698, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _694)) + cbModelParam._m0[22u].w;
        float _1599 = fma(_702, cbModelParam._m0[23u].z, fma(_698, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _694)) + cbModelParam._m0[23u].w;
        float _1602 = fma(_643, cbModelParam._m0[21u].z, fma(_642, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _641));
        float _1605 = fma(_643, cbModelParam._m0[22u].z, fma(_642, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _641));
        float _1608 = fma(_643, cbModelParam._m0[23u].z, fma(_642, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _641));
        float _1716;
        if (_1602 > 0.0)
        {
            _1716 = abs((1.0 - _1591) / _1602);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1591 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1716 = frontier_phi_25_21_ladder;
        }
        float _2034;
        if (_1605 > 0.0)
        {
            _2034 = abs((1.0 - _1595) / _1605);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1595 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2034 = frontier_phi_37_32_ladder;
        }
        float _2361;
        if (_1608 > 0.0)
        {
            _2361 = abs((1.0 - _1599) / _1608);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1599 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2361 = frontier_phi_47_44_ladder;
        }
        float _2363 = isnan(_2034) ? _1716 : (isnan(_1716) ? _2034 : min(_1716, _2034));
        float _2364 = isnan(_2361) ? _2363 : (isnan(_2363) ? _2361 : min(_2363, _2361));
        float _2368 = (_2364 * _1602) + _1591;
        float _2369 = (_2364 * _1605) + _1595;
        float _2370 = (_2364 * _1608) + _1599;
        float _2371 = _2364 * 9.9999997473787516355514526367188e-05;
        float _2372 = (-1.0) - _2371;
        float _2374 = _2371 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2370 > _2374) || ((_2370 < _2372) || ((_2369 > _2374) || ((_2369 < _2372) || ((_2368 < _2372) || (_2368 > _2374))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2488 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2370, cbModelParam._m0[17u].z, fma(_2369, cbModelParam._m0[17u].y, _2368 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2370, cbModelParam._m0[18u].z, fma(_2369, cbModelParam._m0[18u].y, _2368 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2370, cbModelParam._m0[19u].z, fma(_2369, cbModelParam._m0[19u].y, _2368 * cbModelParam._m0[19u].x))), _1538);
            frontier_phi_22_47_ladder = _2488.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2488.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2488.x * cbModelParam._m0[1u].z;
        }
        _1627 = frontier_phi_22_47_ladder_2;
        _1629 = frontier_phi_22_47_ladder_1;
        _1631 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1611 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_641, _642, _643), _1538);
        _1627 = _1611.x * cbModelParam._m0[1u].z;
        _1629 = _1611.y * cbModelParam._m0[1u].z;
        _1631 = _1611.z * cbModelParam._m0[1u].z;
    }
    float _1643 = ((((1.0 - _662) * ((_649 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_662 * _649)) * _633;
    float _1644 = _1643 * ((cbModelParam._m0[1u].w * (_1627 - _1529)) + _1529);
    float _1645 = _1643 * ((cbModelParam._m0[1u].w * (_1629 - _1531)) + _1531);
    float _1646 = _1643 * ((cbModelParam._m0[1u].w * (_1631 - _1533)) + _1533);
    float _1649 = fma(_1646, cbSceneParam._m0[89u].z, fma(_1645, cbSceneParam._m0[89u].y, _1644 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1646, cbSceneParam._m0[90u].z, fma(_1645, cbSceneParam._m0[90u].y, _1644 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1646, cbSceneParam._m0[91u].z, fma(_1645, cbSceneParam._m0[91u].y, _1644 * cbSceneParam._m0[91u].x));
    float _1690 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1694 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1698 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1702 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1703 = _1690 / _1702;
    float _1704 = _1694 / _1702;
    float _1705 = _1698 / _1702;
    float _1852;
    float _1853;
    float _1854;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1732 = ((uint(_1705 > cbSceneParam._m0[59u].y) + uint(_1705 > cbSceneParam._m0[59u].x)) + uint(_1705 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1733 = _1732 + 43u;
        uint _1741 = _1732 + 44u;
        uint _1749 = _1732 + 45u;
        uint _1757 = _1732 + 46u;
        float _1768 = fma(_1702, cbSceneParam._m0[_1733].w, fma(_1698, cbSceneParam._m0[_1733].z, fma(_1694, cbSceneParam._m0[_1733].y, _1690 * cbSceneParam._m0[_1733].x)));
        float _1772 = fma(_1702, cbSceneParam._m0[_1741].w, fma(_1698, cbSceneParam._m0[_1741].z, fma(_1694, cbSceneParam._m0[_1741].y, _1690 * cbSceneParam._m0[_1741].x)));
        float _1780 = fma(_1702, cbSceneParam._m0[_1757].w, fma(_1698, cbSceneParam._m0[_1757].z, fma(_1694, cbSceneParam._m0[_1757].y, _1690 * cbSceneParam._m0[_1757].x)));
        float _1785 = cbSceneParam._m0[33u].z * _1780;
        float _1787 = cbSceneParam._m0[33u].w * _1780;
        float _1790 = fma(_1702, cbSceneParam._m0[_1749].w, fma(_1698, cbSceneParam._m0[_1749].z, fma(_1694, cbSceneParam._m0[_1749].y, _1690 * cbSceneParam._m0[_1749].x))) / _1780;
        float _1838 = (cbSceneParam._m0[33u].x - sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705))) * cbSceneParam._m0[33u].y;
        float _4096 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1845 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1785 + _1768) / _1780, (_1787 + _1772) / _1780), _1790), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1787 + _1768) / _1780, (_1772 - _1785) / _1780), _1790), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1768 - _1785) / _1780, (_1772 - _1787) / _1780), _1790), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1768 - _1787) / _1780, (_1785 + _1772) / _1780), _1790), 0.0)).x), vec4(0.25)));
        _1852 = 1.0 - (_1845 * cbSceneParam._m0[34u].x);
        _1853 = 1.0 - (_1845 * cbSceneParam._m0[34u].y);
        _1854 = 1.0 - (_1845 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1852 = 1.0;
        _1853 = 1.0;
        _1854 = 1.0;
    }
    float _1918;
    float _1920;
    float _1922;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1906 = fma(_1702, cbSceneParam._m0[63u].w, fma(_1698, cbSceneParam._m0[63u].z, fma(_1694, cbSceneParam._m0[63u].y, _1690 * cbSceneParam._m0[63u].x)));
        float _1907 = fma(_1702, cbSceneParam._m0[60u].w, fma(_1698, cbSceneParam._m0[60u].z, fma(_1694, cbSceneParam._m0[60u].y, _1690 * cbSceneParam._m0[60u].x))) / _1906;
        float _1908 = fma(_1702, cbSceneParam._m0[61u].w, fma(_1698, cbSceneParam._m0[61u].z, fma(_1694, cbSceneParam._m0[61u].y, _1690 * cbSceneParam._m0[61u].x))) / _1906;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1907 >= cbSceneParam._m0[64u].x) && (_1908 >= cbSceneParam._m0[64u].y)) && (_1907 <= cbSceneParam._m0[64u].z)) && (_1908 <= cbSceneParam._m0[64u].w))
        {
            float _2047 = fma(_1702, cbSceneParam._m0[62u].w, fma(_1698, cbSceneParam._m0[62u].z, fma(_1694, cbSceneParam._m0[62u].y, _1690 * cbSceneParam._m0[62u].x))) / _1906;
            float _2051 = isnan(cbSceneParam._m0[41u].w) ? _2047 : (isnan(_2047) ? cbSceneParam._m0[41u].w : max(_2047, cbSceneParam._m0[41u].w));
            float _2094 = (cbSceneParam._m0[33u].x - sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705))) * cbSceneParam._m0[33u].y;
            float _4112 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
            float _2101 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1907, cbSceneParam._m0[33u].w + _1908), _2051), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1907, _1908 - cbSceneParam._m0[33u].z), _2051), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1907 - cbSceneParam._m0[33u].z, _1908 - cbSceneParam._m0[33u].w), _2051), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1907 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1908), _2051), 0.0)).x), vec4(0.25)));
            float _2105 = 1.0 - (_2101 * cbSceneParam._m0[34u].x);
            float _2106 = 1.0 - (_2101 * cbSceneParam._m0[34u].y);
            float _2107 = 1.0 - (_2101 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2107) ? _1854 : (isnan(_1854) ? _2107 : min(_1854, _2107));
            frontier_phi_34_33_ladder_1 = isnan(_2106) ? _1853 : (isnan(_1853) ? _2106 : min(_1853, _2106));
            frontier_phi_34_33_ladder_2 = isnan(_2105) ? _1852 : (isnan(_1852) ? _2105 : min(_1852, _2105));
        }
        else
        {
            frontier_phi_34_33_ladder = _1854;
            frontier_phi_34_33_ladder_1 = _1853;
            frontier_phi_34_33_ladder_2 = _1852;
        }
        _1918 = frontier_phi_34_33_ladder_2;
        _1920 = frontier_phi_34_33_ladder_1;
        _1922 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1918 = _1852;
        _1920 = _1853;
        _1922 = _1854;
    }
    uvec4 _1927 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1929 = _1927.x * 14u;
    uint _1930 = _1929 + 13u;
    float _1937 = _633 + (-1.0);
    float _1942 = (cbLight._m0[_1930].x * _1937) + 1.0;
    float _1943 = (cbLight._m0[_1930].y * _1937) + 1.0;
    float _1944 = (cbLight._m0[_1930].z * _1937) + 1.0;
    float _1945 = (cbLight._m0[_1930].w * _1937) + 1.0;
    uint _1946 = _1929 + 5u;
    float _1952 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
    uint _1956 = _1929 + 4u;
    float _1966 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
    uint _1970 = _1929 | 1u;
    float _1981 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_480, _481, _482));
    float _1984 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_480, _481, _482));
    float _4148 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _4159 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1989 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * 0.3183098733425140380859375;
    float _1991 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * 0.3183098733425140380859375;
    float _1998 = ((cbLight._m0[_1946].x * _1952) * _1991) + (((cbLight._m0[_1956].x * _1918) * _1966) * _1989);
    float _1999 = ((_1952 * cbLight._m0[_1946].y) * _1991) + (((cbLight._m0[_1956].y * _1920) * _1966) * _1989);
    float _2000 = ((_1952 * cbLight._m0[_1946].z) * _1991) + (((cbLight._m0[_1956].z * _1922) * _1966) * _1989);
    uvec4 _2004 = floatBitsToUint(cbLight._m0[_1929 + 12u]);
    bool _2006 = _2004.x == 0u;
    float _2108;
    float _2110;
    float _2112;
    if (_2006)
    {
        _2108 = _1998;
        _2110 = _1999;
        _2112 = _2000;
    }
    else
    {
        uint _2116 = _1929 + 6u;
        float _2132 = (dot(vec3(cbLight._m0[_1929 + 2u].xyz), vec3(_480, _481, _482)) * 0.5) + 0.5;
        float _2133 = _2132 * _2132;
        float _4170 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2134 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2135 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2108 = (((cbLight._m0[_2116].x * 0.3183098733425140380859375) * _2134) * _2135) + _1998;
        _2110 = (((cbLight._m0[_2116].y * 0.3183098733425140380859375) * _2134) * _2135) + _1999;
        _2112 = (((cbLight._m0[_2116].z * 0.3183098733425140380859375) * _2134) * _2135) + _2000;
    }
    bool _2115 = _2004.y == 0u;
    float _2170;
    float _2172;
    float _2174;
    if (_2115)
    {
        _2170 = _2108;
        _2172 = _2110;
        _2174 = _2112;
    }
    else
    {
        uint _2332 = _1929 + 7u;
        float _2348 = (dot(vec3(cbLight._m0[_1929 + 3u].xyz), vec3(_480, _481, _482)) * 0.5) + 0.5;
        float _2349 = _2348 * _2348;
        float _4186 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2350 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2351 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2170 = (((cbLight._m0[_2332].x * 0.3183098733425140380859375) * _2350) * _2351) + _2108;
        _2172 = (((cbLight._m0[_2332].y * 0.3183098733425140380859375) * _2350) * _2351) + _2110;
        _2174 = (((cbLight._m0[_2332].z * 0.3183098733425140380859375) * _2350) * _2351) + _2112;
    }
    uint _2177 = _1929 + 8u;
    float _2190 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _483) * 0.949999988079071044921875);
    float _2191 = _2190 * _2190;
    float _2192 = cbLight._m0[_1929].x + _559;
    float _2193 = cbLight._m0[_1929].y + _560;
    float _2194 = cbLight._m0[_1929].z + _561;
    float _2198 = inversesqrt(dot(vec3(_2192, _2193, _2194), vec3(_2192, _2193, _2194)));
    float _2199 = _2198 * _2192;
    float _2200 = _2198 * _2193;
    float _2201 = _2198 * _2194;
    float _2202 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_1929].xyz));
    float _4202 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _2206 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2207 = dot(vec3(_480, _481, _482), vec3(_2199, _2200, _2201));
    float _4224 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2211 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_2199, _2200, _2201));
    float _4235 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2215 = _2191 * _2191;
    float _2219 = ((_2210 * _2210) * (_2215 + (-1.0))) + 1.0;
    float _2230 = (exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2231 = 1.0 - _2191;
    float _2242 = (0.5 / (((_2206 * ((_2205 * _2231) + _2191)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2231) + _2191) * _2205))) * _2205;
    float _4246 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2215 / ((_2219 * _2219) * 3.141590118408203125));
    uint _2258 = _1929 + 9u;
    float _2269 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _483) * 0.949999988079071044921875);
    float _2270 = _2269 * _2269;
    float _2271 = cbLight._m0[_1970].x + _559;
    float _2272 = cbLight._m0[_1970].y + _560;
    float _2273 = cbLight._m0[_1970].z + _561;
    float _2277 = inversesqrt(dot(vec3(_2271, _2272, _2273), vec3(_2271, _2272, _2273)));
    float _2278 = _2277 * _2271;
    float _2279 = _2277 * _2272;
    float _2280 = _2277 * _2273;
    float _2281 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_1970].xyz));
    float _4257 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2285 = dot(vec3(_480, _481, _482), vec3(_2278, _2279, _2280));
    float _4268 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2289 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2278, _2279, _2280));
    float _4279 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2293 = _2270 * _2270;
    float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
    float _2306 = (exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2307 = 1.0 - _2270;
    float _2317 = (0.5 / (((_2206 * ((_2284 * _2307) + _2270)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2307) + _2270) * _2284))) * _2284;
    float _4290 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2319 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
    float _2329 = (((_2306 * cbLight._m0[_2258].x) * _2319) * _1952) + ((((cbLight._m0[_2177].x * _1918) * _2230) * _2244) * _1966);
    float _2330 = (((_2306 * cbLight._m0[_2258].y) * _2319) * _1952) + ((((cbLight._m0[_2177].y * _1920) * _2230) * _2244) * _1966);
    float _2331 = (((_2306 * cbLight._m0[_2258].z) * _2319) * _1952) + ((((cbLight._m0[_2177].z * _1922) * _2230) * _2244) * _1966);
    float _2387;
    float _2389;
    float _2391;
    if (_2006)
    {
        _2387 = _2329;
        _2389 = _2330;
        _2391 = _2331;
    }
    else
    {
        uint _2393 = _1929 + 2u;
        uint _2397 = _1929 + 10u;
        float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2393].w)) * _483) * 0.949999988079071044921875);
        float _2412 = _2411 * _2411;
        float _2413 = cbLight._m0[_2393].x + _559;
        float _2414 = cbLight._m0[_2393].y + _560;
        float _2415 = cbLight._m0[_2393].z + _561;
        float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
        float _2420 = _2419 * _2413;
        float _2421 = _2419 * _2414;
        float _2422 = _2419 * _2415;
        float _2423 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_2393].xyz));
        float _4301 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2427 = dot(vec3(_480, _481, _482), vec3(_2420, _2421, _2422));
        float _4312 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2431 = dot(vec3(cbLight._m0[_2393].xyz), vec3(_2420, _2421, _2422));
        float _4323 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2435 = _2412 * _2412;
        float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
        float _2448 = (exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2449 = 1.0 - _2412;
        float _2459 = (0.5 / (((_2206 * ((_2426 * _2449) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2449) + _2412) * _2426))) * _2426;
        float _4334 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2461 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
        float _2462 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2387 = (((_2448 * cbLight._m0[_2397].x) * _2461) * _2462) + _2329;
        _2389 = (((_2448 * cbLight._m0[_2397].y) * _2461) * _2462) + _2330;
        _2391 = (((_2448 * cbLight._m0[_2397].z) * _2461) * _2462) + _2331;
    }
    float _2493;
    float _2495;
    float _2497;
    if (_2115)
    {
        _2493 = _2387;
        _2495 = _2389;
        _2497 = _2391;
    }
    else
    {
        uint _2504 = _1929 + 3u;
        uint _2508 = _1929 + 11u;
        float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _483) * 0.949999988079071044921875);
        float _2523 = _2522 * _2522;
        float _2524 = cbLight._m0[_2504].x + _559;
        float _2525 = cbLight._m0[_2504].y + _560;
        float _2526 = cbLight._m0[_2504].z + _561;
        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
        float _2531 = _2530 * _2524;
        float _2532 = _2530 * _2525;
        float _2533 = _2530 * _2526;
        float _2534 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_2504].xyz));
        float _4350 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2538 = dot(vec3(_480, _481, _482), vec3(_2531, _2532, _2533));
        float _4361 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2542 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2531, _2532, _2533));
        float _4372 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2546 = _2523 * _2523;
        float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
        float _2559 = (exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2560 = 1.0 - _2523;
        float _2570 = (0.5 / (((_2206 * ((_2537 * _2560) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2206 * _2560) + _2523) * _2537))) * _2537;
        float _4383 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2572 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
        float _2573 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2493 = (((_2559 * cbLight._m0[_2508].x) * _2572) * _2573) + _2387;
        _2495 = (((_2559 * cbLight._m0[_2508].y) * _2572) * _2573) + _2389;
        _2497 = (((_2559 * cbLight._m0[_2508].z) * _2572) * _2573) + _2391;
    }
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    if (_1927.y == 0u)
    {
        uvec4 _2594 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2595 = _2594.x;
        uint _2606 = uint((float(_2594.y) * floor(float(uint(cbSceneParam._m0[85u].y * _568) / _2595))) + floor(float(uint(cbSceneParam._m0[85u].x * _567) / _2595)));
        float _2616 = (log2(_1705 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2617 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        uint _2620 = uint(isnan(14.0) ? _2617 : (isnan(_2617) ? 14.0 : min(_2617, 14.0)));
        uvec4 _2625 = texelFetch(g_lightClusterGridBuffer, int(((_2620 << 2u) + (_2606 << 6u)) >> 2u));
        uint _2626 = _2625.x;
        uint _2627 = _2594.z;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        if (((((1u << ((_2627 >> 4u) & 15u)) + 4294967295u) & _2626) == 0u) || ((_2627 & 240u) == 0u))
        {
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
        }
        else
        {
            float _2707;
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            uint _2857 = 0u;
            uint _2866;
            bool _2867;
            for (;;)
            {
                _2866 = texelFetch(g_lightClassification, int((((_2620 << 5u) + (_2606 << 9u)) + (_2857 << 2u)) >> 2u)).x;
                _2867 = _2866 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2867)
                {
                    frontier_phi_66_pred = _2856;
                    frontier_phi_66_pred_1 = _2855;
                    frontier_phi_66_pred_2 = _2854;
                    frontier_phi_66_pred_3 = _2853;
                    frontier_phi_66_pred_4 = _2852;
                    frontier_phi_66_pred_5 = _2851;
                }
                else
                {
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    uint _2981;
                    _2975 = _2851;
                    _2976 = _2852;
                    _2977 = _2853;
                    _2978 = _2854;
                    _2979 = _2855;
                    _2980 = _2856;
                    _2981 = _2866;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    for (;;)
                    {
                        uint _2985 = uint(findLSB(_2981)) + (_2857 << 5u);
                        uint _2982 = (_2981 + 4294967295u) & _2981;
                        uint _2987 = _2985 * 48u;
                        vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2987)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 3u)).x));
                        uint _3007 = (_2985 * 48u) + 4u;
                        vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 3u)).x));
                        uint _3026 = (_2985 * 48u) + 8u;
                        vec3 _3037 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x));
                        float _3041 = _3001.x - _1703;
                        float _3042 = _3001.y - _1704;
                        float _3043 = _3001.z - _1705;
                        float _3044 = dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043));
                        float _3047 = inversesqrt(_3044);
                        float _3048 = _3047 * _3041;
                        float _3049 = _3047 * _3042;
                        float _3050 = _3047 * _3043;
                        float _3051 = dot(vec3(_589, _592, _595), vec3(_3048, _3049, _3050));
                        float _3056 = 1.0 - (_3044 * _3001.w);
                        float _4409 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3057 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3058 = sqrt(_3044) * _3020.w;
                        float _3061 = 1.39999997615814208984375 / (_3058 + 1.39999997615814208984375);
                        float _3062 = _3061 * _3061;
                        float _3065 = ((1.0 - _3062) * _3051) + _3062;
                        float _3068 = _3058 * _3058;
                        float _3072 = ((isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0))) * _3057) / ((_3068 * 0.699999988079071044921875) + 1.0);
                        float _3076 = (-0.0) - _1703;
                        float _3077 = (-0.0) - _1704;
                        float _3078 = (-0.0) - _1705;
                        float _3082 = inversesqrt(dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078)));
                        float _3083 = _3082 * _3076;
                        float _3084 = _3082 * _3077;
                        float _3085 = _3082 * _3078;
                        float _3092 = exp2(log2(1.0 / ((_3068 * 3.5) + 5.0)) * 0.25);
                        float _3093 = 1.0 - _649;
                        float _3100 = sqrt(1.0 - ((1.0 - (_3093 * _3093)) * (1.0 - (_3092 * _3092))));
                        float _3101 = _3100 * _3100;
                        float _3102 = _3101 * _3101;
                        float _3103 = _3083 + _3048;
                        float _3104 = _3084 + _3049;
                        float _3105 = _3085 + _3050;
                        float _3109 = inversesqrt(dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105)));
                        float _3113 = dot(vec3(_589, _592, _595), vec3(_3083, _3084, _3085));
                        float _4425 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3116 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3117 = dot(vec3(_589, _592, _595), vec3(_3109 * _3103, _3109 * _3104, _3109 * _3105));
                        float _4436 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3120 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3124 = ((_3120 * _3120) * (_3102 + (-1.0))) + 1.0;
                        float _3125 = _3061 * _3101;
                        float _3126 = _3125 * _3125;
                        float _3129 = ((1.0 - _3126) * _3051) + _3126;
                        float _4447 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3130 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3131 = 1.0 - _3101;
                        float _3141 = (0.5 / (((_3130 * ((_3116 * _3131) + _3101)) + 9.9999999392252902907785028219223e-09) + (((_3130 * _3131) + _3101) * _3116))) * _3130;
                        float _4458 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3152 = (((_3102 * 3.1415927410125732421875) * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) / ((_3124 * _3124) * ((_3068 * 2.1991131305694580078125) + 3.141590118408203125))) * _3057;
                        _2910 = (_3072 * _3020.x) + _2978;
                        _2911 = (_3072 * _3020.y) + _2979;
                        _2912 = (_3072 * _3020.z) + _2980;
                        _2907 = (_3152 * _3037.x) + _2975;
                        _2908 = (_3152 * _3037.y) + _2976;
                        _2909 = (_3152 * _3037.z) + _2977;
                        if (_2982 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2975 = _2907;
                            _2976 = _2908;
                            _2977 = _2909;
                            _2978 = _2910;
                            _2979 = _2911;
                            _2980 = _2912;
                            _2981 = _2982;
                        }
                    }
                    frontier_phi_66_pred = _2912;
                    frontier_phi_66_pred_1 = _2911;
                    frontier_phi_66_pred_2 = _2910;
                    frontier_phi_66_pred_3 = _2909;
                    frontier_phi_66_pred_4 = _2908;
                    frontier_phi_66_pred_5 = _2907;
                }
                _2717 = frontier_phi_66_pred;
                _2715 = frontier_phi_66_pred_1;
                _2713 = frontier_phi_66_pred_2;
                _2711 = frontier_phi_66_pred_3;
                _2709 = frontier_phi_66_pred_4;
                _2707 = frontier_phi_66_pred_5;
                uint _2858 = _2857 + 1u;
                if (_2858 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2851 = _2707;
                    _2852 = _2709;
                    _2853 = _2711;
                    _2854 = _2713;
                    _2855 = _2715;
                    _2856 = _2717;
                    _2857 = _2858;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
        }
        uvec4 _2720 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2721 = _2720.z;
        uint _2723 = (_2721 >> 8u) & 15u;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        if (((4294967295u << _2723) & _2626) == 0u)
        {
            _2819 = _2706;
            _2821 = _2708;
            _2823 = _2710;
            _2825 = _2712;
            _2827 = _2714;
            _2829 = _2716;
        }
        else
        {
            float _2844 = inversesqrt(dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705)));
            float _2845 = _2844 * _1703;
            float _2846 = _2844 * _1704;
            float _2847 = _2844 * _1705;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2723 < ((_2721 >> 12u) & 15u))
            {
                float _2820;
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2830;
                float _2958 = _2706;
                float _2959 = _2708;
                float _2960 = _2710;
                float _2961 = _2712;
                float _2962 = _2714;
                float _2963 = _2716;
                uint _2964 = _2723;
                uint _2973;
                bool _2974;
                for (;;)
                {
                    _2973 = texelFetch(g_lightClassification, int((((_2620 << 5u) + (_2606 << 9u)) + (_2964 << 2u)) >> 2u)).x;
                    _2974 = _2973 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2974)
                    {
                        frontier_phi_72_pred = _2963;
                        frontier_phi_72_pred_1 = _2962;
                        frontier_phi_72_pred_2 = _2961;
                        frontier_phi_72_pred_3 = _2960;
                        frontier_phi_72_pred_4 = _2959;
                        frontier_phi_72_pred_5 = _2958;
                    }
                    else
                    {
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3170 = _2958;
                        float _3171 = _2959;
                        float _3172 = _2960;
                        float _3173 = _2961;
                        float _3174 = _2962;
                        float _3175 = _2963;
                        uint _3176 = _2973;
                        uint _3177;
                        vec4 _3202;
                        float _3203;
                        vec4 _3218;
                        vec3 _3230;
                        vec4 _3246;
                        vec4 _3262;
                        float _3308;
                        bool _3309;
                        for (;;)
                        {
                            uint _3187 = ((_2964 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3176));
                            _3177 = (_3176 + 4294967295u) & _3176;
                            uint _3189 = _3187 * 40u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            _3203 = _3202.w;
                            uint _3205 = (_3187 * 40u) + 4u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            uint _3220 = (_3187 * 40u) + 8u;
                            _3230 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x));
                            uint _3233 = (_3187 * 40u) + 16u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3249 = (_3187 * 40u) + 20u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3264 = (_3187 * 40u) + 24u;
                            vec4 _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3283 = (_3187 * 40u) + 28u;
                            vec4 _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            _3308 = fma(_1705, _3296.z, fma(_1704, _3296.y, _3296.x * _1703)) + _3296.w;
                            _3309 = !((fma(_1705, _3277.z, fma(_1704, _3277.y, _3277.x * _1703)) + _3277.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3309)
                            {
                                float _3336 = _3202.x - _1703;
                                float _3337 = _3202.y - _1704;
                                float _3338 = _3202.z - _1705;
                                float _3339 = dot(vec3(_3336, _3337, _3338), vec3(_3336, _3337, _3338));
                                float _3342 = inversesqrt(_3339);
                                float _3343 = _3342 * _3336;
                                float _3344 = _3342 * _3337;
                                float _3345 = _3342 * _3338;
                                float _3349 = 1.0 - (_3339 / (_3203 * _3203));
                                float _4469 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3350 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3354 = sqrt(_3339) * _3218.w;
                                float _3356 = 1.39999997615814208984375 / (_3354 + 1.39999997615814208984375);
                                float _3357 = _3356 * _3356;
                                float _3360 = ((1.0 - _3357) * dot(vec3(_3343, _3344, _3345), vec3(_589, _592, _595))) + _3357;
                                float _3363 = _3354 * _3354;
                                float _3367 = (fma(_1705, _3246.z, fma(_1704, _3246.y, _3246.x * _1703)) + _3246.w) / _3308;
                                float _3368 = (fma(_1705, _3262.z, fma(_1704, _3262.y, _3262.x * _1703)) + _3262.w) / _3308;
                                float _3372 = 1.0 - dot(vec2(_3367, _3368), vec2(_3367, _3368));
                                float _4485 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3373 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3374 = _3373 * (((isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0))) * _3350) / ((_3363 * 0.699999988079071044921875) + 1.0));
                                float _3386 = exp2(log2(1.0 / ((_3363 * 3.5) + 5.0)) * 0.25);
                                float _3387 = 1.0 - _649;
                                float _3394 = sqrt(1.0 - ((1.0 - (_3387 * _3387)) * (1.0 - (_3386 * _3386))));
                                float _3395 = _3394 * _3394;
                                float _3396 = _3395 * _3395;
                                float _3397 = _3343 - _2845;
                                float _3398 = _3344 - _2846;
                                float _3399 = _3345 - _2847;
                                float _3403 = inversesqrt(dot(vec3(_3397, _3398, _3399), vec3(_3397, _3398, _3399)));
                                float _3407 = dot(vec3(_589, _592, _595), vec3((-0.0) - _2845, (-0.0) - _2846, (-0.0) - _2847));
                                float _4496 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3410 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3411 = dot(vec3(_589, _592, _595), vec3(_3403 * _3397, _3403 * _3398, _3403 * _3399));
                                float _4507 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3414 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3418 = ((_3414 * _3414) * (_3396 + (-1.0))) + 1.0;
                                float _3419 = _3356 * _3395;
                                float _3420 = _3419 * _3419;
                                float _3426 = ((1.0 - _3420) * dot(vec3(_589, _592, _595), vec3(_3343, _3344, _3345))) + _3420;
                                float _4518 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3427 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3428 = 1.0 - _3395;
                                float _3438 = (0.5 / (((_3427 * ((_3410 * _3428) + _3395)) + 9.9999999392252902907785028219223e-09) + (((_3427 * _3428) + _3395) * _3410))) * _3427;
                                float _4529 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3448 = (_3373 * _3350) * (((_3396 * 3.1415927410125732421875) * (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) / ((_3418 * _3418) * ((_3363 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3374 * _3218.y;
                                frontier_phi_78_pred_1 = _3374 * _3218.x;
                                frontier_phi_78_pred_2 = _3448 * _3230.z;
                                frontier_phi_78_pred_3 = _3448 * _3230.y;
                                frontier_phi_78_pred_4 = _3448 * _3230.x;
                                frontier_phi_78_pred_5 = _3374 * _3218.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3456 = frontier_phi_78_pred;
                            _3455 = frontier_phi_78_pred_1;
                            _3454 = frontier_phi_78_pred_2;
                            _3453 = frontier_phi_78_pred_3;
                            _3452 = frontier_phi_78_pred_4;
                            _3457 = frontier_phi_78_pred_5;
                            _3160 = _3455 + _3173;
                            _3161 = _3456 + _3174;
                            _3162 = _3457 + _3175;
                            _3157 = _3452 + _3170;
                            _3158 = _3453 + _3171;
                            _3159 = _3454 + _3172;
                            if (_3177 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3177;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3162;
                        frontier_phi_72_pred_1 = _3161;
                        frontier_phi_72_pred_2 = _3160;
                        frontier_phi_72_pred_3 = _3159;
                        frontier_phi_72_pred_4 = _3158;
                        frontier_phi_72_pred_5 = _3157;
                    }
                    _2830 = frontier_phi_72_pred;
                    _2828 = frontier_phi_72_pred_1;
                    _2826 = frontier_phi_72_pred_2;
                    _2824 = frontier_phi_72_pred_3;
                    _2822 = frontier_phi_72_pred_4;
                    _2820 = frontier_phi_72_pred_5;
                    uint _2965 = _2964 + 1u;
                    if (_2965 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2958 = _2820;
                        _2959 = _2822;
                        _2960 = _2824;
                        _2961 = _2826;
                        _2962 = _2828;
                        _2963 = _2830;
                        _2964 = _2965;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2830;
                frontier_phi_60_61_ladder_1 = _2828;
                frontier_phi_60_61_ladder_2 = _2824;
                frontier_phi_60_61_ladder_3 = _2822;
                frontier_phi_60_61_ladder_4 = _2820;
                frontier_phi_60_61_ladder_5 = _2826;
            }
            else
            {
                frontier_phi_60_61_ladder = _2716;
                frontier_phi_60_61_ladder_1 = _2714;
                frontier_phi_60_61_ladder_2 = _2710;
                frontier_phi_60_61_ladder_3 = _2708;
                frontier_phi_60_61_ladder_4 = _2706;
                frontier_phi_60_61_ladder_5 = _2712;
            }
            _2819 = frontier_phi_60_61_ladder_4;
            _2821 = frontier_phi_60_61_ladder_3;
            _2823 = frontier_phi_60_61_ladder_2;
            _2825 = frontier_phi_60_61_ladder_5;
            _2827 = frontier_phi_60_61_ladder_1;
            _2829 = frontier_phi_60_61_ladder;
        }
        float _2834 = isnan(1.0) ? _633 : (isnan(_633) ? 1.0 : min(_633, 1.0));
        _2639 = (_2834 * _2825) + _2170;
        _2641 = (_2834 * _2827) + _2172;
        _2643 = (_2834 * _2829) + _2174;
        _2645 = ((_2819 * 0.039999999105930328369140625) * _2834) + _2493;
        _2647 = ((_2821 * 0.039999999105930328369140625) * _2834) + _2495;
        _2649 = ((_2823 * 0.039999999105930328369140625) * _2834) + _2497;
    }
    else
    {
        _2639 = _2170;
        _2641 = _2172;
        _2643 = _2174;
        _2645 = _2493;
        _2647 = _2495;
        _2649 = _2497;
    }
    float _4545 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _4556 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _4567 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    uint _2669 = _224 + 6u;
    float _2677 = _567 / cbSceneParam._m0[86u].x;
    float _2678 = _568 / cbSceneParam._m0[86u].y;
    vec4 _2692 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2677, _2678, (log2((isnan(cbSceneParam._m0[77u].w) ? _501 : (isnan(_501) ? cbSceneParam._m0[77u].w : min(_501, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2694 = _2692.x;
    float _2695 = _2692.y;
    float _2696 = _2692.z;
    float _2697 = _2692.w;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    if (_501 > cbSceneParam._m0[78u].w)
    {
        float _2731 = isnan(_501) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _501 : min(cbSceneParam._m0[80u].w, _501));
        float _2732 = _2731 / _501;
        float _2743 = _2732 * _552;
        float _2744 = _553 * _2732;
        float _2745 = (-0.0) - _2744;
        float _2747 = _2732 * _554;
        float _2749 = (cbSceneParam._m0[77u].w * _2745) / _2731;
        float _2750 = _2749 + cbSceneParam._m0[79u].w;
        float _2751 = cbSceneParam._m0[79u].w - _2744;
        float _2757 = sqrt(((_2743 * _2743) + (_2744 * _2744)) + (_2747 * _2747));
        float _2760 = (1.0 - (cbSceneParam._m0[77u].w / _2731)) * _2757;
        float _2765 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2767 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2920;
        if (abs((_2745 - _2749) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2920 = ((((_2750 > 0.0) ? exp2(_2765 * _2750) : (2.0 - exp2(_2767 * _2750))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2760;
        }
        else
        {
            float _2880 = 1.0 / cbSceneParam._m0[80u].x;
            float _2881 = isnan(_2751) ? _2750 : (isnan(_2750) ? _2751 : max(_2750, _2751));
            float _2882 = isnan(_2751) ? _2750 : (isnan(_2750) ? _2751 : min(_2750, _2751));
            float _2891 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : min(_2881, 0.0));
            float _2892 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : min(_2882, 0.0));
            _2920 = ((abs(_2757 / _2745) * cbSceneParam._m0[80u].y) * ((((_2891 - _2892) * 2.0) - ((exp2(_2765 * (isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0)))) - exp2(_2765 * (isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0))))) * _2880)) - ((exp2(_2767 * _2891) - exp2(_2767 * _2892)) * _2880))) + (_2760 * cbSceneParam._m0[80u].z);
        }
        vec4 _2922 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2677, _2678, 1.0), 0.0);
        float _2931 = exp2((_2920 * (-1.44269502162933349609375)) * (1.0 - _2922.w));
        float _2932 = log2(_2931);
        float _2948 = log2(_2697);
        _2769 = (exp2(_2948 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].x)) * _2922.x) / cbSceneParam._m0[78u].x)) + _2694;
        _2771 = (exp2(_2948 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].y)) * _2922.y) / cbSceneParam._m0[78u].y)) + _2695;
        _2773 = (exp2(_2948 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].z)) * _2922.z) / cbSceneParam._m0[78u].z)) + _2696;
        _2775 = _2931 * _2697;
    }
    else
    {
        _2769 = _2694;
        _2771 = _2695;
        _2773 = _2696;
        _2775 = _2697;
    }
    float _2787 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2788 = _2787 == 3.0;
    float _2789 = log2(_2775);
    float _2796 = exp2(_2789 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2639 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _633))) + ((_2645 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1438)) * cbPerFrame._m0[3u].x));
    float _2797 = exp2(_2789 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2641 + ((isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))) * _633))) + ((_2647 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1438)) * cbPerFrame._m0[3u].x));
    float _2798 = exp2(_2789 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2643 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _633))) + ((_2649 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1438)) * cbPerFrame._m0[3u].x));
    float _2807 = (_2787 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2807 * (_2788 ? _2796 : (_2796 + (cbSceneParam._m0[72u].w * _2769)));
    SV_Target.y = _2807 * (_2788 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2771)));
    SV_Target.z = _2807 * (_2788 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2773)));
    SV_Target.w = cbInstanceData._m0[_2669].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2669].w;
}


