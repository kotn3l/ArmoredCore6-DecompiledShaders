#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1078;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    float _237 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _240 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3384 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3395 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3406 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _255 = _250 + 1u;
    uint _259 = _250 + 2u;
    float _268 = sqrt(((cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x));
    float _269 = _268 * TEXCOORD.z;
    float _270 = _268 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _269) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _270) + cbTextureTilingScale._m0[13u].w));
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _311 = _306.x * cbMtdParam._m0[9u].x;
    float _312 = _306.y * cbMtdParam._m0[9u].y;
    float _313 = _306.z * cbMtdParam._m0[9u].z;
    float _317 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _283.x) * _311;
    float _320 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _283.y) * _312;
    float _323 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _283.z) * _313;
    float _330 = ((_311 - _317) * (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0)))) + _317;
    float _331 = ((_312 - _320) * (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0)))) + _320;
    float _332 = ((_313 - _323) * (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0)))) + _323;
    vec4 _351 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _269) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _270) + cbTextureTilingScale._m0[14u].w));
    vec4 _371 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _269) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _270) + cbTextureTilingScale._m0[20u].w));
    vec4 _397 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _401 = _397.z;
    float _405 = (_397.x * 2.0) + (-1.0);
    float _406 = (_397.y * 2.0) + (-1.0);
    float _407 = dot(vec2(_405, _406), vec2(_405, _406));
    float _3417 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _412 = sqrt(1.0 - (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))));
    float _417 = _405 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_371.x * 2.0) + (-1.0)));
    float _418 = _406 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_371.y * 2.0) + (-1.0)));
    float _421 = fma(_412, _217, fma(_418, _224, _417 * _210));
    float _424 = fma(_412, _218, fma(_418, _225, _417 * _211));
    float _427 = fma(_412, _219, fma(_418, _226, _417 * _212));
    float _431 = inversesqrt(dot(vec3(_421, _424, _427), vec3(_421, _424, _427)));
    vec4 _467 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _269) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _270) + cbTextureTilingScale._m0[11u].w));
    float _469 = _467.x;
    float _470 = 1.0 - _469;
    float _479 = (cbMtdParam._m0[19u].x + dot(vec4(_431 * _421, _431 * _424, _431 * _427, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_469 - _470) * cbMtdParam._m0[24u].z) + _470) * cbMtdParam._m0[21u].z);
    float _3428 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _480 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _487 = (_480 * ((_351.x * cbMtdParam._m0[18u].x) - _330)) + _330;
    float _488 = (_480 * ((_351.y * cbMtdParam._m0[18u].y) - _331)) + _331;
    float _489 = (_480 * ((_351.z * cbMtdParam._m0[18u].z) - _332)) + _332;
    float _494 = (((_371.z - _401) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _401;
    vec4 _507 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _269) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _270) + cbTextureTilingScale._m0[15u].w));
    float _514 = (_507.x * 2.0) + (-1.0);
    float _515 = (_507.y * 2.0) + (-1.0);
    float _516 = dot(vec2(_514, _515), vec2(_514, _515));
    float _3439 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _524 = ((_507.z - _494) * _480) + _494;
    float _534 = ((sqrt(1.0 - (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0)))) - _412) * _480) + _412;
    float _537 = (((_514 - _417) * _480) + _417) + (cbMtdParam._m0[21u].x * _417);
    float _538 = (((_515 - _418) * _480) + _418) + (cbMtdParam._m0[21u].x * _418);
    float _540 = cbMtdParam._m0[22u].x + _397.w;
    float _543 = fma(_534, _217, fma(_538, _224, _537 * _210));
    float _546 = fma(_534, _218, fma(_538, _225, _537 * _211));
    float _549 = fma(_534, _219, fma(_538, _226, _537 * _212));
    float _553 = inversesqrt(dot(vec3(_543, _546, _549), vec3(_543, _546, _549)));
    float _554 = _553 * _543;
    float _555 = _553 * _546;
    float _556 = _553 * _549;
    float _3450 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _557 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _3461 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3472 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3483 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3494 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _575 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _626 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _616);
    float _627 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _616);
    float _628 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _616);
    float _632 = inversesqrt(dot(vec3(_626, _627, _628), vec3(_626, _627, _628)));
    float _633 = _626 * _632;
    float _634 = _627 * _632;
    float _635 = _628 * _632;
    float _641 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _642 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _663 = fma(_556, cbSceneParam._m0[5u].z, fma(_555, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _554));
    float _666 = fma(_556, cbSceneParam._m0[6u].z, fma(_555, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _554));
    float _669 = fma(_556, cbSceneParam._m0[7u].z, fma(_555, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _554));
    uint _683 = (_250 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _689 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0)))) * cbInstanceData._m0[_683].x;
    float _690 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0)))) * cbInstanceData._m0[_683].y;
    float _691 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) * cbInstanceData._m0[_683].z;
    float _3505 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
    float _3516 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _693 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _3527 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    vec4 _703 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _641, cbSceneParam._m0[86u].y * _642));
    float _707 = ((isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * TEXCOORD_5.w) * _703.x;
    float _708 = dot(vec3(_554, _555, _556), vec3(_633, _634, _635));
    float _711 = _708 * 2.0;
    float _715 = (_711 * _554) - _633;
    float _716 = (_711 * _555) - _634;
    float _717 = (_711 * _556) - _635;
    float _721 = abs(dot(vec3(_633, _634, _635), vec3(_554, _555, _556)));
    float _3538 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _723 = sqrt(_557);
    float _736 = exp2((_723 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_723 * 3.0));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1077;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _802 = fma(_776, cbModelParam._m0[26u].z, fma(_772, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _768));
        float _806 = fma(_776, cbModelParam._m0[27u].z, fma(_772, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _768));
        float _810 = fma(_776, cbModelParam._m0[28u].z, fma(_772, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _768));
        float _835 = _768 + _554;
        float _836 = _772 + _555;
        float _837 = _776 + _556;
        float _847 = fma(_837, cbModelParam._m0[26u].z, fma(_836, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _835)) - _802;
        float _848 = fma(_837, cbModelParam._m0[27u].z, fma(_836, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _835)) - _806;
        float _849 = fma(_837, cbModelParam._m0[28u].z, fma(_836, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _835)) - _810;
        float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
        float _866 = ((_853 * _847) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_802 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _867 = ((_853 * _848) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_806 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _868 = ((_853 * _849) / cbModelParam._m0[34u].z) + ((((((_810 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        float _905 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_871.x + (-0.5));
        float _907 = _905 * (_871.y + (-0.5));
        float _908 = _905 * (_871.z + (-0.5));
        float _915 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_878.x + (-0.5));
        float _917 = _915 * (_878.y + (-0.5));
        float _918 = _915 * (_878.z + (-0.5));
        float _925 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_885.x + (-0.5));
        float _927 = _925 * (_885.y + (-0.5));
        float _928 = _925 * (_885.z + (-0.5));
        float _935 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_892.x + (-0.5));
        float _937 = _935 * (_892.y + (-0.5));
        float _938 = _935 * (_892.z + (-0.5));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = _906 * 0.5;
        float _943 = _916 * 0.5;
        float _944 = _926 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _959 = (dot(vec3(_554, _555, _556), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3564 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _969 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3575 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3586 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (_971 + 1.0))) + _976) * _939;
        float _986 = _907 * 0.5;
        float _987 = _917 * 0.5;
        float _988 = _927 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_554, _555, _556), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3619 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_1013 + 1.0))) + _1018) * _940;
        float _1028 = _908 * 0.5;
        float _1029 = _918 * 0.5;
        float _1030 = _928 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_554, _555, _556), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3652 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1055 + 1.0))) + _1060) * _941;
        _1077 = _908;
        _1079 = _907;
        _1080 = _906;
        _1081 = _918;
        _1082 = _917;
        _1083 = _916;
        _1084 = _928;
        _1085 = _927;
        _1086 = _926;
        _1087 = _941;
        _1088 = _940;
        _1089 = _939;
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1091 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
    }
    else
    {
        _1077 = _1078;
        _1079 = _1078;
        _1080 = _1078;
        _1081 = _1078;
        _1082 = _1078;
        _1083 = _1078;
        _1084 = _1078;
        _1085 = _1078;
        _1086 = _1078;
        _1087 = _1078;
        _1088 = _1078;
        _1089 = _1078;
        _1090 = 0.0;
        _1091 = 0.0;
        _1092 = 0.0;
    }
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1117 = fma(_776, cbModelParam._m0[30u].z, fma(_772, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _768));
        float _1121 = fma(_776, cbModelParam._m0[31u].z, fma(_772, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _768));
        float _1125 = fma(_776, cbModelParam._m0[32u].z, fma(_772, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _768));
        float _1148 = _768 + _554;
        float _1149 = _772 + _555;
        float _1150 = _776 + _556;
        float _1160 = fma(_1150, cbModelParam._m0[30u].z, fma(_1149, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1148)) - _1117;
        float _1161 = fma(_1150, cbModelParam._m0[31u].z, fma(_1149, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1148)) - _1121;
        float _1162 = fma(_1150, cbModelParam._m0[32u].z, fma(_1149, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1148)) - _1125;
        float _1166 = inversesqrt(dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162)));
        float _1179 = ((_1166 * _1160) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1117 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1166 * _1161) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1121 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1166 * _1162) / cbModelParam._m0[35u].z) + ((((((_1125 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        float _1216 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1183.x + (-0.5));
        float _1218 = _1216 * (_1183.y + (-0.5));
        float _1219 = _1216 * (_1183.z + (-0.5));
        float _1226 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1190.x + (-0.5));
        float _1228 = _1226 * (_1190.y + (-0.5));
        float _1229 = _1226 * (_1190.z + (-0.5));
        float _1236 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1197.x + (-0.5));
        float _1238 = _1236 * (_1197.y + (-0.5));
        float _1239 = _1236 * (_1197.z + (-0.5));
        float _1246 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1204.x + (-0.5));
        float _1248 = _1246 * (_1204.y + (-0.5));
        float _1249 = _1246 * (_1204.z + (-0.5));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = _1217 * 0.5;
        float _1254 = _1227 * 0.5;
        float _1255 = _1237 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_554, _555, _556), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _3715 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1280 + 1.0))) + _1285) * _1250;
        float _1295 = _1218 * 0.5;
        float _1296 = _1228 * 0.5;
        float _1297 = _1238 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_554, _555, _556), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _3748 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1322 + 1.0))) + _1327) * _1251;
        float _1337 = _1219 * 0.5;
        float _1338 = _1229 * 0.5;
        float _1339 = _1239 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_554, _555, _556), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _3781 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1364 + 1.0))) + _1369) * _1252;
        _1386 = _1219;
        _1387 = _1218;
        _1388 = _1217;
        _1389 = _1229;
        _1390 = _1228;
        _1391 = _1227;
        _1392 = _1239;
        _1393 = _1238;
        _1394 = _1237;
        _1395 = _1252;
        _1396 = _1251;
        _1397 = _1250;
        _1398 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1399 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1400 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
    }
    else
    {
        _1386 = _1078;
        _1387 = _1078;
        _1388 = _1078;
        _1389 = _1078;
        _1390 = _1078;
        _1391 = _1078;
        _1392 = _1078;
        _1393 = _1078;
        _1394 = _1078;
        _1395 = _1078;
        _1396 = _1078;
        _1397 = _1078;
        _1398 = 0.0;
        _1399 = 0.0;
        _1400 = 0.0;
    }
    float _1410 = (cbModelParam._m0[1u].x * (_1398 - _1090)) + _1090;
    float _1411 = (cbModelParam._m0[1u].x * (_1399 - _1091)) + _1091;
    float _1412 = (cbModelParam._m0[1u].x * (_1400 - _1092)) + _1092;
    float _1433 = fma(_1412, cbSceneParam._m0[89u].z, fma(_1411, cbSceneParam._m0[89u].y, _1410 * cbSceneParam._m0[89u].x));
    float _1436 = fma(_1412, cbSceneParam._m0[90u].z, fma(_1411, cbSceneParam._m0[90u].y, _1410 * cbSceneParam._m0[90u].x));
    float _1439 = fma(_1412, cbSceneParam._m0[91u].z, fma(_1411, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1410));
    float _1454 = _715 * 0.5;
    float _1455 = _716 * 0.5;
    float _1456 = _717 * 0.5;
    float _1457 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1388, _1391, _1394, _1397));
    float _1460 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1387, _1390, _1393, _1396));
    float _1463 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1386, _1389, _1392, _1395));
    float _1497;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1470 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1077, _1081, _1084, _1087));
        float _1474 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1079, _1082, _1085, _1088));
        float _1478 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1080, _1083, _1086, _1089));
        float _1485 = dot(vec4(cbModelParam._m0[39u]), vec4(_1454, _1455, _1456, 1.0));
        _1497 = dot(vec3(isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1485) ? 0.0 : (isnan(0.0) ? _1485 : max(0.0, _1485))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1497 = 1.0;
    }
    float _1508;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1499 = dot(vec4(cbModelParam._m0[40u]), vec4(_1454, _1455, _1456, 1.0));
        _1508 = dot(vec3(isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1499) ? 0.0 : (isnan(0.0) ? _1499 : max(0.0, _1499))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1508 = 1.0;
    }
    float _1512 = (_1508 * cbModelParam._m0[1u].x) + (_1497 * (1.0 - cbModelParam._m0[1u].x));
    float _1522 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _557);
    float _1523 = isnan(_1522) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1522 : min(cbModelParam._m0[25u].z, _1522));
    float _1603;
    float _1605;
    float _1607;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1570 = fma(_776, cbModelParam._m0[13u].z, fma(_772, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _768)) + cbModelParam._m0[13u].w;
        float _1574 = fma(_776, cbModelParam._m0[14u].z, fma(_772, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _768)) + cbModelParam._m0[14u].w;
        float _1578 = fma(_776, cbModelParam._m0[15u].z, fma(_772, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _768)) + cbModelParam._m0[15u].w;
        float _1581 = fma(_717, cbModelParam._m0[13u].z, fma(_716, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715));
        float _1584 = fma(_717, cbModelParam._m0[14u].z, fma(_716, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715));
        float _1587 = fma(_717, cbModelParam._m0[15u].z, fma(_716, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715));
        float _1615;
        if (_1581 > 0.0)
        {
            _1615 = abs((1.0 - _1570) / _1581);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1570 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1615 = frontier_phi_14_12_ladder;
        }
        float _1817;
        if (_1584 > 0.0)
        {
            _1817 = abs((1.0 - _1574) / _1584);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1574 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1817 = frontier_phi_23_19_ladder;
        }
        float _2060;
        if (_1587 > 0.0)
        {
            _2060 = abs((1.0 - _1578) / _1587);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1578 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2060 = frontier_phi_35_30_ladder;
        }
        float _2062 = isnan(_1817) ? _1615 : (isnan(_1615) ? _1817 : min(_1615, _1817));
        float _2063 = isnan(_2060) ? _2062 : (isnan(_2062) ? _2060 : min(_2062, _2060));
        float _2067 = (_2063 * _1581) + _1570;
        float _2068 = (_2063 * _1584) + _1574;
        float _2069 = (_2063 * _1587) + _1578;
        float _2070 = _2063 * 9.9999997473787516355514526367188e-05;
        float _2072 = (-1.0) - _2070;
        float _2074 = _2070 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2069 > _2074) || ((_2069 < _2072) || ((_2068 > _2074) || ((_2068 < _2072) || ((_2067 < _2072) || (_2067 > _2074))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2193 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2069, cbModelParam._m0[9u].z, fma(_2068, cbModelParam._m0[9u].y, _2067 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2069, cbModelParam._m0[10u].z, fma(_2068, cbModelParam._m0[10u].y, _2067 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2069, cbModelParam._m0[11u].z, fma(_2068, cbModelParam._m0[11u].y, _2067 * cbModelParam._m0[11u].x))), _1523);
            frontier_phi_13_35_ladder = _2193.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2193.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2193.x * cbModelParam._m0[1u].y;
        }
        _1603 = frontier_phi_13_35_ladder_2;
        _1605 = frontier_phi_13_35_ladder_1;
        _1607 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1591 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_715, _716, _717), _1523);
        _1603 = _1591.x * cbModelParam._m0[1u].y;
        _1605 = _1591.y * cbModelParam._m0[1u].y;
        _1607 = _1591.z * cbModelParam._m0[1u].y;
    }
    float _1611 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _557);
    float _1612 = isnan(_1611) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1611 : min(cbModelParam._m0[25u].w, _1611));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1665 = fma(_776, cbModelParam._m0[21u].z, fma(_772, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _768)) + cbModelParam._m0[21u].w;
        float _1669 = fma(_776, cbModelParam._m0[22u].z, fma(_772, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _768)) + cbModelParam._m0[22u].w;
        float _1673 = fma(_776, cbModelParam._m0[23u].z, fma(_772, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _768)) + cbModelParam._m0[23u].w;
        float _1676 = fma(_717, cbModelParam._m0[21u].z, fma(_716, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715));
        float _1679 = fma(_717, cbModelParam._m0[22u].z, fma(_716, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715));
        float _1682 = fma(_717, cbModelParam._m0[23u].z, fma(_716, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715));
        float _1822;
        if (_1676 > 0.0)
        {
            _1822 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1822 = frontier_phi_25_21_ladder;
        }
        float _2087;
        if (_1679 > 0.0)
        {
            _2087 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2087 = frontier_phi_37_32_ladder;
        }
        float _2292;
        if (_1682 > 0.0)
        {
            _2292 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2292 = frontier_phi_46_43_ladder;
        }
        float _2294 = isnan(_2087) ? _1822 : (isnan(_1822) ? _2087 : min(_1822, _2087));
        float _2295 = isnan(_2292) ? _2294 : (isnan(_2294) ? _2292 : min(_2294, _2292));
        float _2299 = (_2295 * _1676) + _1665;
        float _2300 = (_2295 * _1679) + _1669;
        float _2301 = (_2295 * _1682) + _1673;
        float _2302 = _2295 * 9.9999997473787516355514526367188e-05;
        float _2303 = (-1.0) - _2302;
        float _2305 = _2302 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2301 > _2305) || ((_2301 < _2303) || ((_2300 > _2305) || ((_2300 < _2303) || ((_2299 < _2303) || (_2299 > _2305))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2500 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2301, cbModelParam._m0[17u].z, fma(_2300, cbModelParam._m0[17u].y, _2299 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2301, cbModelParam._m0[18u].z, fma(_2300, cbModelParam._m0[18u].y, _2299 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2301, cbModelParam._m0[19u].z, fma(_2300, cbModelParam._m0[19u].y, _2299 * cbModelParam._m0[19u].x))), _1612);
            frontier_phi_22_46_ladder = _2500.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2500.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2500.x * cbModelParam._m0[1u].z;
        }
        _1701 = frontier_phi_22_46_ladder_2;
        _1703 = frontier_phi_22_46_ladder_1;
        _1705 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_715, _716, _717), _1612);
        _1701 = _1685.x * cbModelParam._m0[1u].z;
        _1703 = _1685.y * cbModelParam._m0[1u].z;
        _1705 = _1685.z * cbModelParam._m0[1u].z;
    }
    float _1717 = ((((1.0 - _736) * ((_723 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_736 * _723)) * _707;
    float _1718 = _1717 * ((cbModelParam._m0[1u].w * (_1701 - _1603)) + _1603);
    float _1719 = _1717 * ((cbModelParam._m0[1u].w * (_1703 - _1605)) + _1605);
    float _1720 = _1717 * ((cbModelParam._m0[1u].w * (_1705 - _1607)) + _1607);
    float _1723 = fma(_1720, cbSceneParam._m0[89u].z, fma(_1719, cbSceneParam._m0[89u].y, _1718 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1720, cbSceneParam._m0[90u].z, fma(_1719, cbSceneParam._m0[90u].y, _1718 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1720, cbSceneParam._m0[91u].z, fma(_1719, cbSceneParam._m0[91u].y, _1718 * cbSceneParam._m0[91u].x));
    uvec4 _1739 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _1741 = _1739.x * 14u;
    uint _1742 = _1741 + 13u;
    float _1749 = _707 + (-1.0);
    float _1754 = (cbLight._m0[_1742].x * _1749) + 1.0;
    float _1755 = (cbLight._m0[_1742].y * _1749) + 1.0;
    float _1756 = (cbLight._m0[_1742].z * _1749) + 1.0;
    float _1757 = (cbLight._m0[_1742].w * _1749) + 1.0;
    uint _1758 = _1741 + 5u;
    float _1764 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
    uint _1768 = _1741 + 4u;
    float _1775 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
    uint _1779 = _1741 | 1u;
    float _1790 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_554, _555, _556));
    float _1793 = dot(vec3(cbLight._m0[_1779].xyz), vec3(_554, _555, _556));
    float _3917 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _3928 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1798 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * 0.3183098733425140380859375;
    float _1800 = (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * 0.3183098733425140380859375;
    float _1807 = ((cbLight._m0[_1758].x * _1764) * _1800) + ((cbLight._m0[_1768].x * _1775) * _1798);
    float _1808 = ((_1764 * cbLight._m0[_1758].y) * _1800) + ((_1775 * cbLight._m0[_1768].y) * _1798);
    float _1809 = ((_1764 * cbLight._m0[_1758].z) * _1800) + ((_1775 * cbLight._m0[_1768].z) * _1798);
    uvec4 _1814 = floatBitsToUint(cbLight._m0[_1741 + 12u]);
    bool _1816 = _1814.x == 0u;
    float _1827;
    float _1829;
    float _1831;
    if (_1816)
    {
        _1827 = _1807;
        _1829 = _1808;
        _1831 = _1809;
    }
    else
    {
        uint _1835 = _1741 + 6u;
        float _1851 = (dot(vec3(cbLight._m0[_1741 + 2u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _1852 = _1851 * _1851;
        float _3939 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1854 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _1827 = (((cbLight._m0[_1835].x * 0.3183098733425140380859375) * _1853) * _1854) + _1807;
        _1829 = (((cbLight._m0[_1835].y * 0.3183098733425140380859375) * _1853) * _1854) + _1808;
        _1831 = (((cbLight._m0[_1835].z * 0.3183098733425140380859375) * _1853) * _1854) + _1809;
    }
    bool _1834 = _1814.y == 0u;
    float _1872;
    float _1874;
    float _1876;
    if (_1834)
    {
        _1872 = _1827;
        _1874 = _1829;
        _1876 = _1831;
    }
    else
    {
        uint _2031 = _1741 + 7u;
        float _2047 = (dot(vec3(cbLight._m0[_1741 + 3u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _2048 = _2047 * _2047;
        float _3955 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        float _2049 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _2050 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
        _1872 = (((cbLight._m0[_2031].x * 0.3183098733425140380859375) * _2049) * _2050) + _1827;
        _1874 = (((cbLight._m0[_2031].y * 0.3183098733425140380859375) * _2049) * _2050) + _1829;
        _1876 = (((cbLight._m0[_2031].z * 0.3183098733425140380859375) * _2049) * _2050) + _1831;
    }
    uint _1879 = _1741 + 8u;
    float _1892 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1741].w)) * _557) * 0.949999988079071044921875);
    float _1893 = _1892 * _1892;
    float _1894 = cbLight._m0[_1741].x + _633;
    float _1895 = cbLight._m0[_1741].y + _634;
    float _1896 = cbLight._m0[_1741].z + _635;
    float _1900 = inversesqrt(dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896)));
    float _1901 = _1900 * _1894;
    float _1902 = _1900 * _1895;
    float _1903 = _1900 * _1896;
    float _1904 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_1741].xyz));
    float _3971 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _1908 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _1909 = dot(vec3(_554, _555, _556), vec3(_1901, _1902, _1903));
    float _3993 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _1913 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_1901, _1902, _1903));
    float _4004 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1917 = _1893 * _1893;
    float _1921 = ((_1912 * _1912) * (_1917 + (-1.0))) + 1.0;
    float _1932 = (exp2(log2(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1933 = 1.0 - _1893;
    float _1944 = (0.5 / (((_1908 * ((_1907 * _1933) + _1893)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _1933) + _1893) * _1907))) * _1907;
    float _4015 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1946 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1917 / ((_1921 * _1921) * 3.141590118408203125));
    uint _1957 = _1741 + 9u;
    float _1968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1779].w)) * _557) * 0.949999988079071044921875);
    float _1969 = _1968 * _1968;
    float _1970 = cbLight._m0[_1779].x + _633;
    float _1971 = cbLight._m0[_1779].y + _634;
    float _1972 = cbLight._m0[_1779].z + _635;
    float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
    float _1977 = _1976 * _1970;
    float _1978 = _1976 * _1971;
    float _1979 = _1976 * _1972;
    float _1980 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_1779].xyz));
    float _4026 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _1984 = dot(vec3(_554, _555, _556), vec3(_1977, _1978, _1979));
    float _4037 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _1988 = dot(vec3(cbLight._m0[_1779].xyz), vec3(_1977, _1978, _1979));
    float _4048 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1992 = _1969 * _1969;
    float _1996 = ((_1987 * _1987) * (_1992 + (-1.0))) + 1.0;
    float _2005 = (exp2(log2(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2006 = 1.0 - _1969;
    float _2016 = (0.5 / (((_1908 * ((_1983 * _2006) + _1969)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _2006) + _1969) * _1983))) * _1983;
    float _4059 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2018 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1992 / ((_1996 * _1996) * 3.141590118408203125));
    float _2028 = (((_2005 * cbLight._m0[_1957].x) * _2018) * _1764) + (((_1932 * cbLight._m0[_1879].x) * _1946) * _1775);
    float _2029 = (((_2005 * cbLight._m0[_1957].y) * _2018) * _1764) + (((_1932 * cbLight._m0[_1879].y) * _1946) * _1775);
    float _2030 = (((_2005 * cbLight._m0[_1957].z) * _2018) * _1764) + (((_1932 * cbLight._m0[_1879].z) * _1946) * _1775);
    float _2092;
    float _2094;
    float _2096;
    if (_1816)
    {
        _2092 = _2028;
        _2094 = _2029;
        _2096 = _2030;
    }
    else
    {
        uint _2098 = _1741 + 2u;
        uint _2102 = _1741 + 10u;
        float _2116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _557) * 0.949999988079071044921875);
        float _2117 = _2116 * _2116;
        float _2118 = cbLight._m0[_2098].x + _633;
        float _2119 = cbLight._m0[_2098].y + _634;
        float _2120 = cbLight._m0[_2098].z + _635;
        float _2124 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
        float _2125 = _2124 * _2118;
        float _2126 = _2124 * _2119;
        float _2127 = _2124 * _2120;
        float _2128 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2098].xyz));
        float _4070 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2132 = dot(vec3(_554, _555, _556), vec3(_2125, _2126, _2127));
        float _4081 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2135 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2136 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2125, _2126, _2127));
        float _4092 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2140 = _2117 * _2117;
        float _2144 = ((_2135 * _2135) * (_2140 + (-1.0))) + 1.0;
        float _2153 = (exp2(log2(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2154 = 1.0 - _2117;
        float _2164 = (0.5 / (((_1908 * ((_2131 * _2154) + _2117)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _2154) + _2117) * _2131))) * _2131;
        float _4103 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2166 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_2140 / ((_2144 * _2144) * 3.141590118408203125));
        float _2167 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _2092 = (((_2153 * cbLight._m0[_2102].x) * _2166) * _2167) + _2028;
        _2094 = (((_2153 * cbLight._m0[_2102].y) * _2166) * _2167) + _2029;
        _2096 = (((_2153 * cbLight._m0[_2102].z) * _2166) * _2167) + _2030;
    }
    float _2202;
    float _2204;
    float _2206;
    if (_1834)
    {
        _2202 = _2092;
        _2204 = _2094;
        _2206 = _2096;
    }
    else
    {
        uint _2213 = _1741 + 3u;
        uint _2217 = _1741 + 11u;
        float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _557) * 0.949999988079071044921875);
        float _2232 = _2231 * _2231;
        float _2233 = cbLight._m0[_2213].x + _633;
        float _2234 = cbLight._m0[_2213].y + _634;
        float _2235 = cbLight._m0[_2213].z + _635;
        float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
        float _2240 = _2239 * _2233;
        float _2241 = _2239 * _2234;
        float _2242 = _2239 * _2235;
        float _2243 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2213].xyz));
        float _4119 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2246 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2247 = dot(vec3(_554, _555, _556), vec3(_2240, _2241, _2242));
        float _4130 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2250 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2251 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2240, _2241, _2242));
        float _4141 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2255 = _2232 * _2232;
        float _2259 = ((_2250 * _2250) * (_2255 + (-1.0))) + 1.0;
        float _2268 = (exp2(log2(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2269 = 1.0 - _2232;
        float _2279 = (0.5 / (((_1908 * ((_2246 * _2269) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_1908 * _2269) + _2232) * _2246))) * _2246;
        float _4152 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2281 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2255 / ((_2259 * _2259) * 3.141590118408203125));
        float _2282 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
        _2202 = (((_2268 * cbLight._m0[_2217].x) * _2281) * _2282) + _2092;
        _2204 = (((_2268 * cbLight._m0[_2217].y) * _2281) * _2282) + _2094;
        _2206 = (((_2268 * cbLight._m0[_2217].z) * _2281) * _2282) + _2096;
    }
    float _2417;
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    if (_1739.y == 0u)
    {
        float _2357 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2358 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2357;
        float _2359 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2357;
        float _2360 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2357;
        uvec4 _2372 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2373 = _2372.x;
        uint _2384 = uint((float(_2372.y) * floor(float(uint(cbSceneParam._m0[85u].y * _642) / _2373))) + floor(float(uint(cbSceneParam._m0[85u].x * _641) / _2373)));
        float _2394 = (log2(_2360 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2395 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        uint _2398 = uint(isnan(14.0) ? _2395 : (isnan(_2395) ? 14.0 : min(_2395, 14.0)));
        uvec4 _2403 = texelFetch(g_lightClusterGridBuffer, int(((_2398 << 2u) + (_2384 << 6u)) >> 2u));
        uint _2404 = _2403.x;
        uint _2405 = _2372.z;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        if (((((1u << ((_2405 >> 4u) & 15u)) + 4294967295u) & _2404) == 0u) || ((_2405 & 240u) == 0u))
        {
            _2505 = 0.0;
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
        }
        else
        {
            float _2506;
            float _2508;
            float _2510;
            float _2512;
            float _2514;
            float _2516;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            float _2654 = 0.0;
            float _2655 = 0.0;
            uint _2656 = 0u;
            uint _2665;
            bool _2666;
            for (;;)
            {
                _2665 = texelFetch(g_lightClassification, int((((_2398 << 5u) + (_2384 << 9u)) + (_2656 << 2u)) >> 2u)).x;
                _2666 = _2665 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2666)
                {
                    frontier_phi_61_pred = _2650;
                    frontier_phi_61_pred_1 = _2655;
                    frontier_phi_61_pred_2 = _2654;
                    frontier_phi_61_pred_3 = _2653;
                    frontier_phi_61_pred_4 = _2652;
                    frontier_phi_61_pred_5 = _2651;
                }
                else
                {
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    uint _2780;
                    _2774 = _2650;
                    _2775 = _2651;
                    _2776 = _2652;
                    _2777 = _2653;
                    _2778 = _2654;
                    _2779 = _2655;
                    _2780 = _2665;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    for (;;)
                    {
                        uint _2784 = uint(findLSB(_2780)) + (_2656 << 5u);
                        uint _2781 = (_2780 + 4294967295u) & _2780;
                        uint _2786 = _2784 * 48u;
                        vec4 _2800 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2786)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 3u)).x));
                        uint _2806 = (_2784 * 48u) + 4u;
                        vec4 _2819 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 3u)).x));
                        uint _2825 = (_2784 * 48u) + 8u;
                        vec3 _2836 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x));
                        float _2840 = _2800.x - _2358;
                        float _2841 = _2800.y - _2359;
                        float _2842 = _2800.z - _2360;
                        float _2843 = dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842));
                        float _2846 = inversesqrt(_2843);
                        float _2847 = _2846 * _2840;
                        float _2848 = _2846 * _2841;
                        float _2849 = _2846 * _2842;
                        float _2850 = dot(vec3(_663, _666, _669), vec3(_2847, _2848, _2849));
                        float _2855 = 1.0 - (_2843 * _2800.w);
                        float _4178 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2856 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                        float _2857 = sqrt(_2843) * _2819.w;
                        float _2860 = 1.39999997615814208984375 / (_2857 + 1.39999997615814208984375);
                        float _2861 = _2860 * _2860;
                        float _2864 = ((1.0 - _2861) * _2850) + _2861;
                        float _2867 = _2857 * _2857;
                        float _2871 = ((isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0))) * _2856) / ((_2867 * 0.699999988079071044921875) + 1.0);
                        float _2875 = (-0.0) - _2358;
                        float _2876 = (-0.0) - _2359;
                        float _2877 = (-0.0) - _2360;
                        float _2881 = inversesqrt(dot(vec3(_2875, _2876, _2877), vec3(_2875, _2876, _2877)));
                        float _2882 = _2881 * _2875;
                        float _2883 = _2881 * _2876;
                        float _2884 = _2881 * _2877;
                        float _2892 = exp2(log2(1.0 / ((_2867 * 3.5) + 5.0)) * 0.25);
                        float _2893 = 1.0 - _723;
                        float _2900 = sqrt(1.0 - ((1.0 - (_2893 * _2893)) * (1.0 - (_2892 * _2892))));
                        float _2901 = _2900 * _2900;
                        float _2902 = _2901 * _2901;
                        float _2903 = _2882 + _2847;
                        float _2904 = _2883 + _2848;
                        float _2905 = _2884 + _2849;
                        float _2909 = inversesqrt(dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905)));
                        float _2913 = dot(vec3(_663, _666, _669), vec3(_2882, _2883, _2884));
                        float _4194 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2916 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                        float _2917 = dot(vec3(_663, _666, _669), vec3(_2909 * _2903, _2909 * _2904, _2909 * _2905));
                        float _4205 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                        float _2920 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                        float _2924 = ((_2920 * _2920) * (_2902 + (-1.0))) + 1.0;
                        float _2925 = _2860 * _2901;
                        float _2926 = _2925 * _2925;
                        float _2929 = ((1.0 - _2926) * _2850) + _2926;
                        float _4216 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2930 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                        float _2931 = 1.0 - _2901;
                        float _2941 = (0.5 / (((_2930 * ((_2916 * _2931) + _2901)) + 9.9999999392252902907785028219223e-09) + (((_2930 * _2931) + _2901) * _2916))) * _2930;
                        float _4227 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2952 = (((_2902 * 3.1415927410125732421875) * (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) / ((_2924 * _2924) * ((_2867 * 2.1991131305694580078125) + 3.141590118408203125))) * _2856;
                        _2709 = (_2871 * _2819.x) + _2777;
                        _2710 = (_2871 * _2819.y) + _2778;
                        _2711 = (_2871 * _2819.z) + _2779;
                        _2706 = (_2952 * _2836.x) + _2774;
                        _2707 = (_2952 * _2836.y) + _2775;
                        _2708 = (_2952 * _2836.z) + _2776;
                        if (_2781 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2774 = _2706;
                            _2775 = _2707;
                            _2776 = _2708;
                            _2777 = _2709;
                            _2778 = _2710;
                            _2779 = _2711;
                            _2780 = _2781;
                        }
                    }
                    frontier_phi_61_pred = _2706;
                    frontier_phi_61_pred_1 = _2711;
                    frontier_phi_61_pred_2 = _2710;
                    frontier_phi_61_pred_3 = _2709;
                    frontier_phi_61_pred_4 = _2708;
                    frontier_phi_61_pred_5 = _2707;
                }
                _2506 = frontier_phi_61_pred;
                _2516 = frontier_phi_61_pred_1;
                _2514 = frontier_phi_61_pred_2;
                _2512 = frontier_phi_61_pred_3;
                _2510 = frontier_phi_61_pred_4;
                _2508 = frontier_phi_61_pred_5;
                uint _2657 = _2656 + 1u;
                if (_2657 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2650 = _2506;
                    _2651 = _2508;
                    _2652 = _2510;
                    _2653 = _2512;
                    _2654 = _2514;
                    _2655 = _2516;
                    _2656 = _2657;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2505 = _2506;
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
        }
        uvec4 _2519 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2520 = _2519.z;
        uint _2522 = (_2520 >> 8u) & 15u;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        if (((4294967295u << _2522) & _2404) == 0u)
        {
            _2618 = _2505;
            _2620 = _2507;
            _2622 = _2509;
            _2624 = _2511;
            _2626 = _2513;
            _2628 = _2515;
        }
        else
        {
            float _2643 = inversesqrt(dot(vec3(_2358, _2359, _2360), vec3(_2358, _2359, _2360)));
            float _2644 = _2643 * _2358;
            float _2645 = _2643 * _2359;
            float _2646 = _2643 * _2360;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2522 < ((_2520 >> 12u) & 15u))
            {
                float _2619;
                float _2621;
                float _2623;
                float _2625;
                float _2627;
                float _2629;
                float _2757 = _2505;
                float _2758 = _2507;
                float _2759 = _2509;
                float _2760 = _2511;
                float _2761 = _2513;
                float _2762 = _2515;
                uint _2763 = _2522;
                uint _2772;
                bool _2773;
                for (;;)
                {
                    _2772 = texelFetch(g_lightClassification, int((((_2398 << 5u) + (_2384 << 9u)) + (_2763 << 2u)) >> 2u)).x;
                    _2773 = _2772 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2773)
                    {
                        frontier_phi_67_pred = _2760;
                        frontier_phi_67_pred_1 = _2761;
                        frontier_phi_67_pred_2 = _2762;
                        frontier_phi_67_pred_3 = _2759;
                        frontier_phi_67_pred_4 = _2758;
                        frontier_phi_67_pred_5 = _2757;
                    }
                    else
                    {
                        float _2957;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _2970 = _2757;
                        float _2971 = _2758;
                        float _2972 = _2759;
                        float _2973 = _2760;
                        float _2974 = _2761;
                        float _2975 = _2762;
                        uint _2976 = _2772;
                        uint _2977;
                        vec4 _3002;
                        float _3003;
                        vec4 _3018;
                        vec3 _3030;
                        vec4 _3045;
                        vec4 _3060;
                        float _3106;
                        bool _3107;
                        for (;;)
                        {
                            uint _2987 = ((_2763 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2976));
                            _2977 = (_2976 + 4294967295u) & _2976;
                            uint _2989 = _2987 * 40u;
                            _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            _3003 = _3002.w;
                            uint _3005 = (_2987 * 40u) + 4u;
                            _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            uint _3020 = (_2987 * 40u) + 8u;
                            _3030 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x));
                            uint _3032 = (_2987 * 40u) + 16u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3047 = (_2987 * 40u) + 20u;
                            _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            uint _3062 = (_2987 * 40u) + 24u;
                            vec4 _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            uint _3081 = (_2987 * 40u) + 28u;
                            vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            _3106 = fma(_2360, _3094.z, fma(_2359, _3094.y, _3094.x * _2358)) + _3094.w;
                            _3107 = !((fma(_2360, _3075.z, fma(_2359, _3075.y, _3075.x * _2358)) + _3075.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3107)
                            {
                                float _3134 = _3002.x - _2358;
                                float _3135 = _3002.y - _2359;
                                float _3136 = _3002.z - _2360;
                                float _3137 = dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136));
                                float _3140 = inversesqrt(_3137);
                                float _3141 = _3140 * _3134;
                                float _3142 = _3140 * _3135;
                                float _3143 = _3140 * _3136;
                                float _3147 = 1.0 - (_3137 / (_3003 * _3003));
                                float _4238 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                                float _3148 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3152 = sqrt(_3137) * _3018.w;
                                float _3154 = 1.39999997615814208984375 / (_3152 + 1.39999997615814208984375);
                                float _3155 = _3154 * _3154;
                                float _3158 = ((1.0 - _3155) * dot(vec3(_3141, _3142, _3143), vec3(_663, _666, _669))) + _3155;
                                float _3161 = _3152 * _3152;
                                float _3165 = (fma(_2360, _3045.z, fma(_2359, _3045.y, _3045.x * _2358)) + _3045.w) / _3106;
                                float _3166 = (fma(_2360, _3060.z, fma(_2359, _3060.y, _3060.x * _2358)) + _3060.w) / _3106;
                                float _3170 = 1.0 - dot(vec2(_3165, _3166), vec2(_3165, _3166));
                                float _4254 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3171 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                                float _3172 = _3171 * (((isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0))) * _3148) / ((_3161 * 0.699999988079071044921875) + 1.0));
                                float _3184 = exp2(log2(1.0 / ((_3161 * 3.5) + 5.0)) * 0.25);
                                float _3185 = 1.0 - _723;
                                float _3192 = sqrt(1.0 - ((1.0 - (_3185 * _3185)) * (1.0 - (_3184 * _3184))));
                                float _3193 = _3192 * _3192;
                                float _3194 = _3193 * _3193;
                                float _3195 = _3141 - _2644;
                                float _3196 = _3142 - _2645;
                                float _3197 = _3143 - _2646;
                                float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                                float _3205 = dot(vec3(_663, _666, _669), vec3((-0.0) - _2644, (-0.0) - _2645, (-0.0) - _2646));
                                float _4265 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3208 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                                float _3209 = dot(vec3(_663, _666, _669), vec3(_3201 * _3195, _3201 * _3196, _3201 * _3197));
                                float _4276 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3212 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                                float _3216 = ((_3212 * _3212) * (_3194 + (-1.0))) + 1.0;
                                float _3217 = _3154 * _3193;
                                float _3218 = _3217 * _3217;
                                float _3224 = ((1.0 - _3218) * dot(vec3(_663, _666, _669), vec3(_3141, _3142, _3143))) + _3218;
                                float _4287 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3226 = 1.0 - _3193;
                                float _3236 = (0.5 / (((_3225 * ((_3208 * _3226) + _3193)) + 9.9999999392252902907785028219223e-09) + (((_3225 * _3226) + _3193) * _3208))) * _3225;
                                float _4298 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3246 = (_3171 * _3148) * (((_3194 * 3.1415927410125732421875) * (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) / ((_3216 * _3216) * ((_3161 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3246 * _3030.x;
                                frontier_phi_73_pred_1 = _3246 * _3030.y;
                                frontier_phi_73_pred_2 = _3172 * _3018.z;
                                frontier_phi_73_pred_3 = _3172 * _3018.y;
                                frontier_phi_73_pred_4 = _3172 * _3018.x;
                                frontier_phi_73_pred_5 = _3246 * _3030.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3250 = frontier_phi_73_pred;
                            _3251 = frontier_phi_73_pred_1;
                            _3255 = frontier_phi_73_pred_2;
                            _3254 = frontier_phi_73_pred_3;
                            _3253 = frontier_phi_73_pred_4;
                            _3252 = frontier_phi_73_pred_5;
                            _2960 = _3253 + _2973;
                            _2961 = _3254 + _2974;
                            _2962 = _3255 + _2975;
                            _2957 = _3250 + _2970;
                            _2958 = _3251 + _2971;
                            _2959 = _3252 + _2972;
                            if (_2977 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2977;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2960;
                        frontier_phi_67_pred_1 = _2961;
                        frontier_phi_67_pred_2 = _2962;
                        frontier_phi_67_pred_3 = _2959;
                        frontier_phi_67_pred_4 = _2958;
                        frontier_phi_67_pred_5 = _2957;
                    }
                    _2625 = frontier_phi_67_pred;
                    _2627 = frontier_phi_67_pred_1;
                    _2629 = frontier_phi_67_pred_2;
                    _2623 = frontier_phi_67_pred_3;
                    _2621 = frontier_phi_67_pred_4;
                    _2619 = frontier_phi_67_pred_5;
                    uint _2764 = _2763 + 1u;
                    if (_2764 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2757 = _2619;
                        _2758 = _2621;
                        _2759 = _2623;
                        _2760 = _2625;
                        _2761 = _2627;
                        _2762 = _2629;
                        _2763 = _2764;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2627;
                frontier_phi_55_56_ladder_1 = _2629;
                frontier_phi_55_56_ladder_2 = _2625;
                frontier_phi_55_56_ladder_3 = _2623;
                frontier_phi_55_56_ladder_4 = _2621;
                frontier_phi_55_56_ladder_5 = _2619;
            }
            else
            {
                frontier_phi_55_56_ladder = _2513;
                frontier_phi_55_56_ladder_1 = _2515;
                frontier_phi_55_56_ladder_2 = _2511;
                frontier_phi_55_56_ladder_3 = _2509;
                frontier_phi_55_56_ladder_4 = _2507;
                frontier_phi_55_56_ladder_5 = _2505;
            }
            _2618 = frontier_phi_55_56_ladder_5;
            _2620 = frontier_phi_55_56_ladder_4;
            _2622 = frontier_phi_55_56_ladder_3;
            _2624 = frontier_phi_55_56_ladder_2;
            _2626 = frontier_phi_55_56_ladder;
            _2628 = frontier_phi_55_56_ladder_1;
        }
        float _2633 = isnan(1.0) ? _707 : (isnan(_707) ? 1.0 : min(_707, 1.0));
        _2417 = (_2633 * _2624) + _1872;
        _2419 = (_2633 * _2626) + _1874;
        _2421 = (_2633 * _2628) + _1876;
        _2423 = ((_2618 * 0.039999999105930328369140625) * _2633) + _2202;
        _2425 = ((_2620 * 0.039999999105930328369140625) * _2633) + _2204;
        _2427 = ((_2622 * 0.039999999105930328369140625) * _2633) + _2206;
    }
    else
    {
        _2417 = _1872;
        _2419 = _1874;
        _2421 = _1876;
        _2423 = _2202;
        _2425 = _2204;
        _2427 = _2206;
    }
    float _4314 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _4325 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4336 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    uint _2447 = _250 + 6u;
    float _2455 = _641 / cbSceneParam._m0[86u].x;
    float _2456 = _642 / cbSceneParam._m0[86u].y;
    vec4 _2470 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2455, _2456, (log2((isnan(cbSceneParam._m0[77u].w) ? _575 : (isnan(_575) ? cbSceneParam._m0[77u].w : min(_575, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2472 = _2470.x;
    float _2473 = _2470.y;
    float _2474 = _2470.z;
    float _2475 = _2470.w;
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    if (_575 > cbSceneParam._m0[78u].w)
    {
        float _2530 = isnan(_575) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _575 : min(cbSceneParam._m0[80u].w, _575));
        float _2531 = _2530 / _575;
        float _2542 = _2531 * _626;
        float _2543 = _627 * _2531;
        float _2544 = (-0.0) - _2543;
        float _2546 = _2531 * _628;
        float _2548 = (cbSceneParam._m0[77u].w * _2544) / _2530;
        float _2549 = _2548 + cbSceneParam._m0[79u].w;
        float _2550 = cbSceneParam._m0[79u].w - _2543;
        float _2556 = sqrt(((_2542 * _2542) + (_2543 * _2543)) + (_2546 * _2546));
        float _2559 = (1.0 - (cbSceneParam._m0[77u].w / _2530)) * _2556;
        float _2564 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2566 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2719;
        if (abs((_2544 - _2548) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2719 = ((((_2549 > 0.0) ? exp2(_2564 * _2549) : (2.0 - exp2(_2566 * _2549))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2559;
        }
        else
        {
            float _2679 = 1.0 / cbSceneParam._m0[80u].x;
            float _2680 = isnan(_2550) ? _2549 : (isnan(_2549) ? _2550 : max(_2549, _2550));
            float _2681 = isnan(_2550) ? _2549 : (isnan(_2549) ? _2550 : min(_2549, _2550));
            float _2690 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : min(_2680, 0.0));
            float _2691 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : min(_2681, 0.0));
            _2719 = ((abs(_2556 / _2544) * cbSceneParam._m0[80u].y) * ((((_2690 - _2691) * 2.0) - ((exp2(_2564 * (isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0)))) - exp2(_2564 * (isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0))))) * _2679)) - ((exp2(_2566 * _2690) - exp2(_2566 * _2691)) * _2679))) + (_2559 * cbSceneParam._m0[80u].z);
        }
        vec4 _2721 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2455, _2456, 1.0), 0.0);
        float _2730 = exp2((_2719 * (-1.44269502162933349609375)) * (1.0 - _2721.w));
        float _2731 = log2(_2730);
        float _2747 = log2(_2475);
        _2568 = (exp2(_2747 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2731 * cbSceneParam._m0[78u].x)) * _2721.x) / cbSceneParam._m0[78u].x)) + _2472;
        _2570 = (exp2(_2747 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2731 * cbSceneParam._m0[78u].y)) * _2721.y) / cbSceneParam._m0[78u].y)) + _2473;
        _2572 = (exp2(_2747 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2731 * cbSceneParam._m0[78u].z)) * _2721.z) / cbSceneParam._m0[78u].z)) + _2474;
        _2574 = _2730 * _2475;
    }
    else
    {
        _2568 = _2472;
        _2570 = _2473;
        _2572 = _2474;
        _2574 = _2475;
    }
    float _2586 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2587 = _2586 == 3.0;
    float _2588 = log2(_2574);
    float _2595 = exp2(_2588 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2417 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _707))) + ((_2423 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1512)) * cbPerFrame._m0[3u].x));
    float _2596 = exp2(_2588 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2419 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _707))) + ((_2425 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1512)) * cbPerFrame._m0[3u].x));
    float _2597 = exp2(_2588 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2421 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _707))) + ((_2427 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1512)) * cbPerFrame._m0[3u].x));
    float _2606 = (_2586 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2606 * (_2587 ? _2595 : (_2595 + (cbSceneParam._m0[72u].w * _2568)));
    SV_Target.y = _2606 * (_2587 ? _2596 : (_2596 + (cbSceneParam._m0[72u].w * _2570)));
    SV_Target.z = _2606 * (_2587 ? _2597 : (_2597 + (cbSceneParam._m0[72u].w * _2572)));
    SV_Target.w = cbInstanceData._m0[_2447].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2447].w;
}


